
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f70  08004f70  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f70  08004f70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000078  08004ff0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004ff0  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b24  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d4  00000000  00000000  00030bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  000340f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018409  00000000  00000000  00035150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132b2  00000000  00000000  0004d559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914fc  00000000  00000000  0006080b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e54  00000000  00000000  000f1d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004eb8 	.word	0x08004eb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004eb8 	.word	0x08004eb8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <Select_Bank>:
#include "stm32f1xx_hal_gpio.h"
#include "stm32f1xx_hal_gpio.h"
#include "stm32f103xb.h"

void Select_Bank(userbank ub, I2C_HandleTypeDef *hi2c1)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
	uint8_t Trans[2]={REG_BANK_SEL, ub};
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <Select_Bank+0x38>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	733b      	strb	r3, [r7, #12]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c1,ICM20948_ADDRESS,Trans,2,1000);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <Select_Bank+0x3c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b299      	uxth	r1, r3
 8000624:	f107 020c 	add.w	r2, r7, #12
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	6838      	ldr	r0, [r7, #0]
 8000632:	f001 fd37 	bl	80020a4 <HAL_I2C_Master_Transmit>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000001 	.word	0x20000001
 8000644:	20000000 	.word	0x20000000

08000648 <ICM20948_Read_Gyro>:


axises ICM20948_Read_Gyro(I2C_HandleTypeDef *hi2c1)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	axises data;
	uint8_t temp[6];
	Select_Bank(0, hi2c1);
 8000652:	6839      	ldr	r1, [r7, #0]
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ffd7 	bl	8000608 <Select_Bank>

	// send write request to gyro
    ret = HAL_I2C_Master_Transmit(hi2c1, ICM20948_ADDRESS << 1, &B0_GYRO_XOUT_H, 1, 1000);
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <ICM20948_Read_Gyro+0xb4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b29b      	uxth	r3, r3
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	b299      	uxth	r1, r3
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <ICM20948_Read_Gyro+0xb8>)
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	f001 fd18 	bl	80020a4 <HAL_I2C_Master_Transmit>
 8000674:	4603      	mov	r3, r0
 8000676:	77fb      	strb	r3, [r7, #31]
    if(ret != HAL_OK)
    {
    	// error message
    }

	HAL_Delay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 ff21 	bl	80014c0 <HAL_Delay>

	// read data
	HAL_I2C_Master_Receive(hi2c1, ICM20948_ADDRESS << 1, temp, 6, 1000);
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <ICM20948_Read_Gyro+0xb4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	b299      	uxth	r1, r3
 8000688:	f107 0208 	add.w	r2, r7, #8
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2306      	movs	r3, #6
 8000694:	6838      	ldr	r0, [r7, #0]
 8000696:	f001 fe03 	bl	80022a0 <HAL_I2C_Master_Receive>

	data.x = (int16_t)(temp[0] << 8 | temp[1]);
 800069a:	7a3b      	ldrb	r3, [r7, #8]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7a7b      	ldrb	r3, [r7, #9]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fe09 	bl	80002c0 <__aeabi_i2f>
 80006ae:	4603      	mov	r3, r0
 80006b0:	613b      	str	r3, [r7, #16]
	data.y = (int16_t)(temp[2] << 8 | temp[3]);
 80006b2:	7abb      	ldrb	r3, [r7, #10]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fdfd 	bl	80002c0 <__aeabi_i2f>
 80006c6:	4603      	mov	r3, r0
 80006c8:	617b      	str	r3, [r7, #20]
	data.z = (int16_t)(temp[4] << 8 | temp[5]);
 80006ca:	7b3b      	ldrb	r3, [r7, #12]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fdf1 	bl	80002c0 <__aeabi_i2f>
 80006de:	4603      	mov	r3, r0
 80006e0:	61bb      	str	r3, [r7, #24]

	return data;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	461c      	mov	r4, r3
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	3724      	adds	r7, #36	; 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000002 	.word	0x20000002

08000704 <ICM20948_Read_Accel>:

axises ICM20948_Read_Accel(I2C_HandleTypeDef *hi2c1)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08b      	sub	sp, #44	; 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	axises data;
	uint8_t temp[6];
	Select_Bank(0, hi2c1);
 800070e:	6839      	ldr	r1, [r7, #0]
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff79 	bl	8000608 <Select_Bank>

	// send write request to accelerometer
    ret = HAL_I2C_Master_Transmit(hi2c1, ICM20948_ADDRESS << 1, &B0_ACCEL_XOUT_H, 1, 1000);
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <ICM20948_Read_Accel+0xb4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b299      	uxth	r1, r3
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	4a24      	ldr	r2, [pc, #144]	; (80007bc <ICM20948_Read_Accel+0xb8>)
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f001 fcba 	bl	80020a4 <HAL_I2C_Master_Transmit>
 8000730:	4603      	mov	r3, r0
 8000732:	77fb      	strb	r3, [r7, #31]
    if(ret != HAL_OK)
    {
    	// error message
    }

	HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fec3 	bl	80014c0 <HAL_Delay>

	// read data
	HAL_I2C_Master_Receive(hi2c1, ICM20948_ADDRESS << 1, temp, 6, 1000);
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <ICM20948_Read_Accel+0xb4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	b299      	uxth	r1, r3
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2306      	movs	r3, #6
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	f001 fda5 	bl	80022a0 <HAL_I2C_Master_Receive>

	data.x = (int16_t)(temp[0] << 8 | temp[1]);
 8000756:	7a3b      	ldrb	r3, [r7, #8]
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	b21a      	sxth	r2, r3
 800075c:	7a7b      	ldrb	r3, [r7, #9]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21b      	sxth	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fdab 	bl	80002c0 <__aeabi_i2f>
 800076a:	4603      	mov	r3, r0
 800076c:	613b      	str	r3, [r7, #16]
	data.y = (int16_t)(temp[2] << 8 | temp[3]);
 800076e:	7abb      	ldrb	r3, [r7, #10]
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd9f 	bl	80002c0 <__aeabi_i2f>
 8000782:	4603      	mov	r3, r0
 8000784:	617b      	str	r3, [r7, #20]
	data.z = (int16_t)(temp[4] << 8 | temp[5]);
 8000786:	7b3b      	ldrb	r3, [r7, #12]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b21a      	sxth	r2, r3
 800078c:	7b7b      	ldrb	r3, [r7, #13]
 800078e:	b21b      	sxth	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b21b      	sxth	r3, r3
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fd93 	bl	80002c0 <__aeabi_i2f>
 800079a:	4603      	mov	r3, r0
 800079c:	61bb      	str	r3, [r7, #24]

	return data;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	461c      	mov	r4, r3
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000003 	.word	0x20000003

080007c0 <ICM20948_Read_Magn>:

axises ICM20948_Read_Magn(I2C_HandleTypeDef *hi2c1)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	axises data;
	uint8_t temp[6];
	Select_Bank(0, hi2c1);
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff1b 	bl	8000608 <Select_Bank>

	// send write request to AK09916
    ret = HAL_I2C_Master_Transmit(hi2c1, AK09916_ADDR << 1, &MAG_HXL, 1, 1000);
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <ICM20948_Read_Magn+0xb4>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b299      	uxth	r1, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	4a24      	ldr	r2, [pc, #144]	; (8000878 <ICM20948_Read_Magn+0xb8>)
 80007e6:	6838      	ldr	r0, [r7, #0]
 80007e8:	f001 fc5c 	bl	80020a4 <HAL_I2C_Master_Transmit>
 80007ec:	4603      	mov	r3, r0
 80007ee:	77fb      	strb	r3, [r7, #31]
    if(ret != HAL_OK)
    {
    	// error message
    }

	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 fe65 	bl	80014c0 <HAL_Delay>

	// read data starting from lower x-axis
	HAL_I2C_Master_Receive(hi2c1, AK09916_ADDR << 1, temp, 6, 1000);
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <ICM20948_Read_Magn+0xb4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b299      	uxth	r1, r3
 8000800:	f107 0208 	add.w	r2, r7, #8
 8000804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2306      	movs	r3, #6
 800080c:	6838      	ldr	r0, [r7, #0]
 800080e:	f001 fd47 	bl	80022a0 <HAL_I2C_Master_Receive>

	// separate data into axises
    data.x = (int16_t)(temp[1] << 8 | temp[0]);
 8000812:	7a7b      	ldrb	r3, [r7, #9]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	7a3b      	ldrb	r3, [r7, #8]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fd4d 	bl	80002c0 <__aeabi_i2f>
 8000826:	4603      	mov	r3, r0
 8000828:	613b      	str	r3, [r7, #16]
	data.y = (int16_t)(temp[3] << 8 | temp[2]);
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd41 	bl	80002c0 <__aeabi_i2f>
 800083e:	4603      	mov	r3, r0
 8000840:	617b      	str	r3, [r7, #20]
	data.z = (int16_t)(temp[5] << 8 | temp[4]);
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21a      	sxth	r2, r3
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	b21b      	sxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b21b      	sxth	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd35 	bl	80002c0 <__aeabi_i2f>
 8000856:	4603      	mov	r3, r0
 8000858:	61bb      	str	r3, [r7, #24]

	return data;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	461c      	mov	r4, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	20000004 	.word	0x20000004
 8000878:	20000005 	.word	0x20000005

0800087c <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c1)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b090      	sub	sp, #64	; 0x40
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	 axises gyro_bias, accel_bias;

	Select_Bank(0, hi2c1);
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff febe 	bl	8000608 <Select_Bank>

	for(int i=0; i<50; i++){
 800088c:	2300      	movs	r3, #0
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000890:	e023      	b.n	80008da <ICM20948_Calibrate+0x5e>
		axises accRawVal = ICM20948_Read_Accel(hi2c1);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff33 	bl	8000704 <ICM20948_Read_Accel>
		accel_bias.x += accRawVal.x;
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fc57 	bl	8000158 <__addsf3>
 80008aa:	4603      	mov	r3, r0
 80008ac:	623b      	str	r3, [r7, #32]
		accel_bias.y += accRawVal.y;
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fc4f 	bl	8000158 <__addsf3>
 80008ba:	4603      	mov	r3, r0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
		accel_bias.z += accRawVal.z;
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fc47 	bl	8000158 <__addsf3>
 80008ca:	4603      	mov	r3, r0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_Delay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fdf6 	bl	80014c0 <HAL_Delay>
	for(int i=0; i<50; i++){
 80008d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d6:	3301      	adds	r3, #1
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	2b31      	cmp	r3, #49	; 0x31
 80008de:	ddd8      	ble.n	8000892 <ICM20948_Calibrate+0x16>
	}

	accel_bias.x /= 50;
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	492f      	ldr	r1, [pc, #188]	; (80009a0 <ICM20948_Calibrate+0x124>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fdf3 	bl	80004d0 <__aeabi_fdiv>
 80008ea:	4603      	mov	r3, r0
 80008ec:	623b      	str	r3, [r7, #32]
	accel_bias.y /= 50;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	492b      	ldr	r1, [pc, #172]	; (80009a0 <ICM20948_Calibrate+0x124>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fdec 	bl	80004d0 <__aeabi_fdiv>
 80008f8:	4603      	mov	r3, r0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias.z /= 50;
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	4928      	ldr	r1, [pc, #160]	; (80009a0 <ICM20948_Calibrate+0x124>)
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fde5 	bl	80004d0 <__aeabi_fdiv>
 8000906:	4603      	mov	r3, r0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias.z -= 16384.0; // 16384 LSB/g
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc1f 	bl	8000154 <__aeabi_fsub>
 8000916:	4603      	mov	r3, r0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i=0; i<50; i++){
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
 800091e:	e023      	b.n	8000968 <ICM20948_Calibrate+0xec>
		axises gyrRawVal = ICM20948_Read_Gyro(hi2c1);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe8e 	bl	8000648 <ICM20948_Read_Gyro>
		gyro_bias.x += gyrRawVal.x;
 800092c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc10 	bl	8000158 <__addsf3>
 8000938:	4603      	mov	r3, r0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
		gyro_bias.y += gyrRawVal.y;
 800093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc08 	bl	8000158 <__addsf3>
 8000948:	4603      	mov	r3, r0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
		gyro_bias.z += gyrRawVal.z;
 800094c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc00 	bl	8000158 <__addsf3>
 8000958:	4603      	mov	r3, r0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_Delay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fdaf 	bl	80014c0 <HAL_Delay>
	for(int i=0; i<50; i++){
 8000962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000964:	3301      	adds	r3, #1
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
 8000968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800096a:	2b31      	cmp	r3, #49	; 0x31
 800096c:	ddd8      	ble.n	8000920 <ICM20948_Calibrate+0xa4>
	}

	gyro_bias.x /= 50;
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	490b      	ldr	r1, [pc, #44]	; (80009a0 <ICM20948_Calibrate+0x124>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fdac 	bl	80004d0 <__aeabi_fdiv>
 8000978:	4603      	mov	r3, r0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gyro_bias.y /= 50;
 800097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <ICM20948_Calibrate+0x124>)
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fda5 	bl	80004d0 <__aeabi_fdiv>
 8000986:	4603      	mov	r3, r0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
	gyro_bias.z /= 50;
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098c:	4904      	ldr	r1, [pc, #16]	; (80009a0 <ICM20948_Calibrate+0x124>)
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fd9e 	bl	80004d0 <__aeabi_fdiv>
 8000994:	4603      	mov	r3, r0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34

	// set both offsets somewhere to use when reading accel and gyro values
}
 8000998:	bf00      	nop
 800099a:	3740      	adds	r7, #64	; 0x40
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	42480000 	.word	0x42480000

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fd27 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f863 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 fa31 	bl	8000e18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b6:	f000 fa05 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009ba:	f000 f8f1 	bl	8000ba0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009be:	f000 f91d 	bl	8000bfc <MX_I2C2_Init>
  MX_ADC1_Init();
 80009c2:	f000 f8af 	bl	8000b24 <MX_ADC1_Init>
  MX_SPI2_Init();
 80009c6:	f000 f947 	bl	8000c58 <MX_SPI2_Init>
  MX_TIM2_Init();
 80009ca:	f000 f97b 	bl	8000cc4 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ICM20948_Calibrate(&hi2c1);
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <main+0xbc>)
 80009d0:	f7ff ff54 	bl	800087c <ICM20948_Calibrate>
	  sprintf(MSG, "testing calibrate");
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4923      	ldr	r1, [pc, #140]	; (8000a64 <main+0xc0>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fe33 	bl	8004644 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80009de:	1d39      	adds	r1, r7, #4
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	2223      	movs	r2, #35	; 0x23
 80009e4:	4820      	ldr	r0, [pc, #128]	; (8000a68 <main+0xc4>)
 80009e6:	f003 fc90 	bl	800430a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80009ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ee:	f000 fd67 	bl	80014c0 <HAL_Delay>

	  ICM20948_Read_Gyro(&hi2c1);
 80009f2:	481b      	ldr	r0, [pc, #108]	; (8000a60 <main+0xbc>)
 80009f4:	f7ff fe28 	bl	8000648 <ICM20948_Read_Gyro>
	  sprintf(MSG, "testing gyro");
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	491c      	ldr	r1, [pc, #112]	; (8000a6c <main+0xc8>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 fe21 	bl	8004644 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000a02:	1d39      	adds	r1, r7, #4
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2223      	movs	r2, #35	; 0x23
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <main+0xc4>)
 8000a0a:	f003 fc7e 	bl	800430a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fd55 	bl	80014c0 <HAL_Delay>

	  ICM20948_Read_Accel(&hi2c1);
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <main+0xbc>)
 8000a18:	f7ff fe74 	bl	8000704 <ICM20948_Read_Accel>
	  sprintf(MSG, "testing accel");
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4914      	ldr	r1, [pc, #80]	; (8000a70 <main+0xcc>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fe0f 	bl	8004644 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000a26:	1d39      	adds	r1, r7, #4
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2223      	movs	r2, #35	; 0x23
 8000a2c:	480e      	ldr	r0, [pc, #56]	; (8000a68 <main+0xc4>)
 8000a2e:	f003 fc6c 	bl	800430a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 fd43 	bl	80014c0 <HAL_Delay>

	  ICM20948_Read_Magn(&hi2c1);
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <main+0xbc>)
 8000a3c:	f7ff fec0 	bl	80007c0 <ICM20948_Read_Magn>
	  sprintf(MSG, "testing magn");
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	490c      	ldr	r1, [pc, #48]	; (8000a74 <main+0xd0>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fdfd 	bl	8004644 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2223      	movs	r2, #35	; 0x23
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <main+0xc4>)
 8000a52:	f003 fc5a 	bl	800430a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f000 fd31 	bl	80014c0 <HAL_Delay>
  {
 8000a5e:	e7b6      	b.n	80009ce <main+0x2a>
 8000a60:	200000f8 	.word	0x200000f8
 8000a64:	08004ed0 	.word	0x08004ed0
 8000a68:	20000218 	.word	0x20000218
 8000a6c:	08004ee4 	.word	0x08004ee4
 8000a70:	08004ef4 	.word	0x08004ef4
 8000a74:	08004f04 	.word	0x08004f04

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a82:	2228      	movs	r2, #40	; 0x28
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fdd4 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 f977 	bl	8002db8 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 fa38 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fbe1 	bl	80032b8 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000afc:	f000 fa22 	bl	8000f44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b00:	2302      	movs	r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd6e 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b16:	f000 fa15 	bl	8000f44 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b36:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <MX_ADC1_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b62:	f000 fcd1 	bl	8001508 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f9ea 	bl	8000f44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b82:	f000 fd99 	bl	80016b8 <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b8c:	f000 f9da 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001a0 	.word	0x200001a0
 8000b9c:	40012400 	.word	0x40012400

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bde:	f001 f91d 	bl	8001e1c <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 f9ac 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000f8 	.word	0x200000f8
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <MX_I2C2_Init+0x54>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <MX_I2C2_Init+0x58>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_I2C2_Init+0x50>)
 8000c3a:	f001 f8ef 	bl	8001e1c <HAL_I2C_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 f97e 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000014c 	.word	0x2000014c
 8000c50:	40005800 	.word	0x40005800
 8000c54:	000186a0 	.word	0x000186a0

08000c58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <MX_SPI2_Init+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_SPI2_Init+0x64>)
 8000caa:	f002 fd55 	bl	8003758 <HAL_SPI_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cb4:	f000 f946 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000a0 	.word	0x200000a0
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1c:	4828      	ldr	r0, [pc, #160]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d1e:	f002 fd9f 	bl	8003860 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d28:	f000 f90c 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d3a:	f002 fef7 	bl	8003b2c <HAL_TIM_ConfigClockSource>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d44:	f000 f8fe 	bl	8000f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d4a:	f002 fdd8 	bl	80038fe <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 f8f6 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4619      	mov	r1, r3
 8000d66:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d68:	f003 fa24 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d72:	f000 f8e7 	bl	8000f44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000d8e:	f002 fe0f 	bl	80039b0 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d98:	f000 f8d4 	bl	8000f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000da4:	f002 fe04 	bl	80039b0 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000dae:	f000 f8c9 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM2_Init+0xfc>)
 8000db4:	f000 fa1e 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001d0 	.word	0x200001d0

08000dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <MX_USART2_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	f003 fa38 	bl	8004270 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f000 f89d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000218 	.word	0x20000218
 8000e14:	40004400 	.word	0x40004400

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a39      	ldr	r2, [pc, #228]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_GPIO_Init+0x11c>)
 8000e94:	f000 ffaa 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2158      	movs	r1, #88	; 0x58
 8000e9c:	4826      	ldr	r0, [pc, #152]	; (8000f38 <MX_GPIO_Init+0x120>)
 8000e9e:	f000 ffa5 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481e      	ldr	r0, [pc, #120]	; (8000f34 <MX_GPIO_Init+0x11c>)
 8000ebc:	f000 fe12 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin FRONT_TRIG_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|FRONT_TRIG_Pin|FRONT_ECHO_Pin;
 8000ec0:	23e0      	movs	r3, #224	; 0xe0
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <MX_GPIO_Init+0x124>)
 8000ed4:	f000 fe06 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|SIDE_TRIG_Pin;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_GPIO_Init+0x120>)
 8000eec:	f000 fdfa 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8000ef0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_GPIO_Init+0x128>)
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_GPIO_Init+0x124>)
 8000f06:	f000 fded 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000f0a:	2358      	movs	r3, #88	; 0x58
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_GPIO_Init+0x120>)
 8000f22:	f000 fddf 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	10110000 	.word	0x10110000

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_MspInit+0x5c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x5c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_MspInit+0x60>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_ADC_MspInit+0x6c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d121      	bne.n	8001018 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_ADC_MspInit+0x70>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8001004:	2310      	movs	r3, #16
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_ADC_MspInit+0x74>)
 8001014:	f000 fd66 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40012400 	.word	0x40012400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_I2C_MspInit+0xe4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d133      	bne.n	80010b4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8001064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106a:	2312      	movs	r3, #18
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4827      	ldr	r0, [pc, #156]	; (8001118 <HAL_I2C_MspInit+0xec>)
 800107a:	f000 fd33 	bl	8001ae4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_I2C_MspInit+0xf0>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_I2C_MspInit+0xf0>)
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010b2:	e029      	b.n	8001108 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_I2C_MspInit+0xf4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d124      	bne.n	8001108 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 80010d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_I2C_MspInit+0xec>)
 80010ec:	f000 fcfa 	bl	8001ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0xe8>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00
 800111c:	40010000 	.word	0x40010000
 8001120:	40005800 	.word	0x40005800

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d131      	bne.n	80011a8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	61d3      	str	r3, [r2, #28]
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001174:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <HAL_SPI_MspInit+0x94>)
 800118a:	f000 fcab 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800118e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_SPI_MspInit+0x94>)
 80011a4:	f000 fc9e 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40003800 	.word	0x40003800
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010c00 	.word	0x40010c00

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d10b      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_TIM_Base_MspInit+0x34>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_TIM_Base_MspInit+0x34>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_TIM_Base_MspInit+0x34>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001212:	d117      	bne.n	8001244 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_TIM_MspPostInit+0x58>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_MspPostInit+0x58>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_MspPostInit+0x58>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 800122c:	2303      	movs	r3, #3
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2302      	movs	r3, #2
 8001236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <HAL_TIM_MspPostInit+0x5c>)
 8001240:	f000 fc50 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d12f      	bne.n	80012d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	61d3      	str	r3, [r2, #28]
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a4:	2304      	movs	r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0x90>)
 80012b8:	f000 fc14 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012bc:	2308      	movs	r3, #8
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x90>)
 80012d0:	f000 fc08 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f8ab 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 f93a 	bl	80045e0 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20005000 	.word	0x20005000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000094 	.word	0x20000094
 80013a0:	20000270 	.word	0x20000270

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013b2:	e003      	b.n	80013bc <LoopCopyDataInit>

080013b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013ba:	3104      	adds	r1, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013c4:	d3f6      	bcc.n	80013b4 <CopyDataInit>
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013c8:	e002      	b.n	80013d0 <LoopFillZerobss>

080013ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013cc:	f842 3b04 	str.w	r3, [r2], #4

080013d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013d4:	d3f9      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d6:	f7ff ffe5 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f003 f907 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff fae1 	bl	80009a4 <main>
  bx lr
 80013e2:	4770      	bx	lr
  ldr r3, =_sidata
 80013e4:	08004f78 	.word	0x08004f78
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013ec:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80013f0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80013f4:	2000026c 	.word	0x2000026c

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x28>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 fb35 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f808 	bl	8001428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fd9a 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x54>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x58>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fb3f 	bl	8001aca <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001464:	f000 fb15 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x5c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000008 	.word	0x20000008
 8001480:	20000010 	.word	0x20000010
 8001484:	2000000c 	.word	0x2000000c

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_IncTick+0x20>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000010 	.word	0x20000010
 80014a8:	20000258 	.word	0x20000258

080014ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000258 	.word	0x20000258

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fff0 	bl	80014ac <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffe0 	bl	80014ac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000010 	.word	0x20000010

08001508 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0be      	b.n	80016a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	2b00      	cmp	r3, #0
 8001536:	d109      	bne.n	800154c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fd34 	bl	8000fb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f9ab 	bl	80018a8 <ADC_ConversionStop_Disable>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 8099 	bne.w	8001696 <HAL_ADC_Init+0x18e>
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8095 	bne.w	8001696 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001574:	f023 0302 	bic.w	r3, r3, #2
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001588:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001590:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4313      	orrs	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a0:	d003      	beq.n	80015aa <HAL_ADC_Init+0xa2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_ADC_Init+0xa8>
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	e000      	b.n	80015b2 <HAL_ADC_Init+0xaa>
 80015b0:	2300      	movs	r3, #0
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d119      	bne.n	80015f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7b1b      	ldrb	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	035a      	lsls	r2, r3, #13
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e00b      	b.n	80015f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_ADC_Init+0x1a8>)
 8001610:	4013      	ands	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	430b      	orrs	r3, r1
 800161a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001624:	d003      	beq.n	800162e <HAL_ADC_Init+0x126>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d104      	bne.n	8001638 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	3b01      	subs	r3, #1
 8001634:	051b      	lsls	r3, r3, #20
 8001636:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	430a      	orrs	r2, r1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_ADC_Init+0x1ac>)
 8001654:	4013      	ands	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d10b      	bne.n	8001674 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001672:	e018      	b.n	80016a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f023 0312 	bic.w	r3, r3, #18
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001694:	e007      	b.n	80016a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	ffe1f7fd 	.word	0xffe1f7fd
 80016b4:	ff1f0efe 	.word	0xff1f0efe

080016b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x20>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0dc      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1da>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d81c      	bhi.n	8001722 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	3b05      	subs	r3, #5
 80016fa:	221f      	movs	r2, #31
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b05      	subs	r3, #5
 8001714:	fa00 f203 	lsl.w	r2, r0, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
 8001720:	e03c      	b.n	800179c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d81c      	bhi.n	8001764 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b23      	subs	r3, #35	; 0x23
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b23      	subs	r3, #35	; 0x23
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	e01b      	b.n	800179c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3b41      	subs	r3, #65	; 0x41
 8001776:	221f      	movs	r2, #31
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b41      	subs	r3, #65	; 0x41
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d91c      	bls.n	80017de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	3b1e      	subs	r3, #30
 80017b6:	2207      	movs	r2, #7
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	4019      	ands	r1, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6898      	ldr	r0, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	3b1e      	subs	r3, #30
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	e019      	b.n	8001812 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6919      	ldr	r1, [r3, #16]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4019      	ands	r1, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6898      	ldr	r0, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	fa00 f203 	lsl.w	r2, r0, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d003      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800181e:	2b11      	cmp	r3, #17
 8001820:	d132      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_ADC_ConfigChannel+0x1e4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d125      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d126      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001848:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d11a      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9a      	lsrs	r2, r3, #18
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001868:	e002      	b.n	8001870 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <HAL_ADC_ConfigChannel+0x1b2>
 8001876:	e007      	b.n	8001888 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40012400 	.word	0x40012400
 80018a0:	20000008 	.word	0x20000008
 80018a4:	431bde83 	.word	0x431bde83

080018a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d127      	bne.n	8001912 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018d2:	f7ff fdeb 	bl	80014ac <HAL_GetTick>
 80018d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018d8:	e014      	b.n	8001904 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018da:	f7ff fde7 	bl	80014ac <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d90d      	bls.n	8001904 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f043 0210 	orr.w	r2, r3, #16
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e007      	b.n	8001914 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d0e3      	beq.n	80018da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff49 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e169      	b.n	8001dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af8:	2201      	movs	r2, #1
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8158 	bne.w	8001dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a9a      	ldr	r2, [pc, #616]	; (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d05e      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b20:	4a98      	ldr	r2, [pc, #608]	; (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d875      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b26:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d058      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b2c:	4a96      	ldr	r2, [pc, #600]	; (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d86f      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b32:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d052      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b38:	4a94      	ldr	r2, [pc, #592]	; (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d869      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d04c      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b44:	4a92      	ldr	r2, [pc, #584]	; (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d863      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d046      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b50:	4a90      	ldr	r2, [pc, #576]	; (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d85d      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d82a      	bhi.n	8001bb0 <HAL_GPIO_Init+0xcc>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d859      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b5e:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <HAL_GPIO_Init+0x80>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bb9 	.word	0x08001bb9
 8001b6c:	08001bcb 	.word	0x08001bcb
 8001b70:	08001c0d 	.word	0x08001c0d
 8001b74:	08001c13 	.word	0x08001c13
 8001b78:	08001c13 	.word	0x08001c13
 8001b7c:	08001c13 	.word	0x08001c13
 8001b80:	08001c13 	.word	0x08001c13
 8001b84:	08001c13 	.word	0x08001c13
 8001b88:	08001c13 	.word	0x08001c13
 8001b8c:	08001c13 	.word	0x08001c13
 8001b90:	08001c13 	.word	0x08001c13
 8001b94:	08001c13 	.word	0x08001c13
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001c13 	.word	0x08001c13
 8001ba0:	08001c13 	.word	0x08001c13
 8001ba4:	08001c13 	.word	0x08001c13
 8001ba8:	08001bc1 	.word	0x08001bc1
 8001bac:	08001bd5 	.word	0x08001bd5
 8001bb0:	4a79      	ldr	r2, [pc, #484]	; (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bb6:	e02c      	b.n	8001c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e029      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e024      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e01f      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e01a      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be6:	2304      	movs	r3, #4
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e013      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	611a      	str	r2, [r3, #16]
          break;
 8001bfe:	e009      	b.n	8001c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	615a      	str	r2, [r3, #20]
          break;
 8001c0a:	e003      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          break;
 8001c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d801      	bhi.n	8001c1e <HAL_GPIO_Init+0x13a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_Init+0x13e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d802      	bhi.n	8001c30 <HAL_GPIO_Init+0x14c>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x152>
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	3b08      	subs	r3, #8
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80b1 	beq.w	8001dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a40      	ldr	r2, [pc, #256]	; (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3f      	ldr	r2, [pc, #252]	; (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <HAL_GPIO_Init+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce2:	492f      	ldr	r1, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	492c      	ldr	r1, [pc, #176]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4928      	ldr	r1, [pc, #160]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4922      	ldr	r1, [pc, #136]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	491e      	ldr	r1, [pc, #120]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4918      	ldr	r1, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4914      	ldr	r1, [pc, #80]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d021      	beq.n	8001db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e021      	b.n	8001dc6 <HAL_GPIO_Init+0x2e2>
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4909      	ldr	r1, [pc, #36]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f ae8e 	bne.w	8001af8 <HAL_GPIO_Init+0x14>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	372c      	adds	r7, #44	; 0x2c
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e12b      	b.n	8002086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff f8f2 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e80:	f001 fb6e 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8001e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a81      	ldr	r2, [pc, #516]	; (8002090 <HAL_I2C_Init+0x274>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d807      	bhi.n	8001ea0 <HAL_I2C_Init+0x84>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a80      	ldr	r2, [pc, #512]	; (8002094 <HAL_I2C_Init+0x278>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	bf94      	ite	ls
 8001e98:	2301      	movls	r3, #1
 8001e9a:	2300      	movhi	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e006      	b.n	8001eae <HAL_I2C_Init+0x92>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a7d      	ldr	r2, [pc, #500]	; (8002098 <HAL_I2C_Init+0x27c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0e7      	b.n	8002086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a78      	ldr	r2, [pc, #480]	; (800209c <HAL_I2C_Init+0x280>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a6a      	ldr	r2, [pc, #424]	; (8002090 <HAL_I2C_Init+0x274>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d802      	bhi.n	8001ef0 <HAL_I2C_Init+0xd4>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3301      	adds	r3, #1
 8001eee:	e009      	b.n	8001f04 <HAL_I2C_Init+0xe8>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	4a69      	ldr	r2, [pc, #420]	; (80020a0 <HAL_I2C_Init+0x284>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	3301      	adds	r3, #1
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	495c      	ldr	r1, [pc, #368]	; (8002090 <HAL_I2C_Init+0x274>)
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d819      	bhi.n	8001f58 <HAL_I2C_Init+0x13c>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e59      	subs	r1, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f38:	400b      	ands	r3, r1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_I2C_Init+0x138>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1e59      	subs	r1, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f52:	e051      	b.n	8001ff8 <HAL_I2C_Init+0x1dc>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e04f      	b.n	8001ff8 <HAL_I2C_Init+0x1dc>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d111      	bne.n	8001f84 <HAL_I2C_Init+0x168>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e012      	b.n	8001faa <HAL_I2C_Init+0x18e>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	0099      	lsls	r1, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Init+0x196>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e022      	b.n	8001ff8 <HAL_I2C_Init+0x1dc>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_I2C_Init+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e58      	subs	r0, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6859      	ldr	r1, [r3, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	440b      	add	r3, r1
 8001fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	e00f      	b.n	8001ff8 <HAL_I2C_Init+0x1dc>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	0099      	lsls	r1, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	6809      	ldr	r1, [r1, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6911      	ldr	r1, [r2, #16]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68d2      	ldr	r2, [r2, #12]
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	430b      	orrs	r3, r1
 800203a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	000186a0 	.word	0x000186a0
 8002094:	001e847f 	.word	0x001e847f
 8002098:	003d08ff 	.word	0x003d08ff
 800209c:	431bde83 	.word	0x431bde83
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	461a      	mov	r2, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	817b      	strh	r3, [r7, #10]
 80020b4:	4613      	mov	r3, r2
 80020b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff f9f8 	bl	80014ac <HAL_GetTick>
 80020bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	f040 80e0 	bne.w	800228c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2319      	movs	r3, #25
 80020d2:	2201      	movs	r2, #1
 80020d4:	4970      	ldr	r1, [pc, #448]	; (8002298 <HAL_I2C_Master_Transmit+0x1f4>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fc92 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0d3      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2C_Master_Transmit+0x50>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0cc      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d007      	beq.n	800211a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2221      	movs	r2, #33	; 0x21
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2210      	movs	r2, #16
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	893a      	ldrh	r2, [r7, #8]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a50      	ldr	r2, [pc, #320]	; (800229c <HAL_I2C_Master_Transmit+0x1f8>)
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800215c:	8979      	ldrh	r1, [r7, #10]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fafc 	bl	8002760 <I2C_MasterRequestWrite>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e08d      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002188:	e066      	b.n	8002258 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	6a39      	ldr	r1, [r7, #32]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fd0c 	bl	8002bac <I2C_WaitOnTXEFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d107      	bne.n	80021b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06b      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d11b      	bne.n	800222c <HAL_I2C_Master_Transmit+0x188>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	6a39      	ldr	r1, [r7, #32]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fcfc 	bl	8002c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b04      	cmp	r3, #4
 8002242:	d107      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e01a      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d194      	bne.n	800218a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	00100002 	.word	0x00100002
 800229c:	ffff0000 	.word	0xffff0000

080022a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	461a      	mov	r2, r3
 80022ac:	460b      	mov	r3, r1
 80022ae:	817b      	strh	r3, [r7, #10]
 80022b0:	4613      	mov	r3, r2
 80022b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff f8f8 	bl	80014ac <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	f040 823f 	bne.w	800274a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2319      	movs	r3, #25
 80022d2:	2201      	movs	r2, #1
 80022d4:	497f      	ldr	r1, [pc, #508]	; (80024d4 <HAL_I2C_Master_Receive+0x234>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fb92 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e232      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_I2C_Master_Receive+0x54>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e22b      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d007      	beq.n	800231a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2222      	movs	r2, #34	; 0x22
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2210      	movs	r2, #16
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	893a      	ldrh	r2, [r7, #8]
 800234a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a5f      	ldr	r2, [pc, #380]	; (80024d8 <HAL_I2C_Master_Receive+0x238>)
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fa7e 	bl	8002864 <I2C_MasterRequestRead>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1ec      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e1c0      	b.n	8002724 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d11e      	bne.n	80023e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023ba:	b672      	cpsid	i
}
 80023bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023e4:	b662      	cpsie	i
}
 80023e6:	e035      	b.n	8002454 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d11e      	bne.n	800242e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800242a:	b662      	cpsie	i
}
 800242c:	e012      	b.n	8002454 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002454:	e166      	b.n	8002724 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b03      	cmp	r3, #3
 800245c:	f200 811f 	bhi.w	800269e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b01      	cmp	r3, #1
 8002466:	d123      	bne.n	80024b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fc1f 	bl	8002cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e167      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ae:	e139      	b.n	8002724 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d152      	bne.n	800255e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	2200      	movs	r2, #0
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <HAL_I2C_Master_Receive+0x23c>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fa9c 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e13c      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
 80024d2:	bf00      	nop
 80024d4:	00100002 	.word	0x00100002
 80024d8:	ffff0000 	.word	0xffff0000
 80024dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024e0:	b672      	cpsid	i
}
 80024e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002526:	b662      	cpsie	i
}
 8002528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255c:	e0e2      	b.n	8002724 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	2200      	movs	r2, #0
 8002566:	497b      	ldr	r1, [pc, #492]	; (8002754 <HAL_I2C_Master_Receive+0x4b4>)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa49 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0e9      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80025be:	4b66      	ldr	r3, [pc, #408]	; (8002758 <HAL_I2C_Master_Receive+0x4b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_I2C_Master_Receive+0x4bc>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a1a      	lsrs	r2, r3, #8
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	3b01      	subs	r3, #1
 80025dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d118      	bne.n	8002616 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002606:	b662      	cpsie	i
}
 8002608:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e09a      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b04      	cmp	r3, #4
 8002622:	d1d9      	bne.n	80025d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002666:	b662      	cpsie	i
}
 8002668:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269c:	e042      	b.n	8002724 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fb04 	bl	8002cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e04c      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d118      	bne.n	8002724 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f ae94 	bne.w	8002456 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010004 	.word	0x00010004
 8002758:	20000008 	.word	0x20000008
 800275c:	14f8b589 	.word	0x14f8b589

08002760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d006      	beq.n	800278a <I2C_MasterRequestWrite+0x2a>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d003      	beq.n	800278a <I2C_MasterRequestWrite+0x2a>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002788:	d108      	bne.n	800279c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00b      	b.n	80027b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2b12      	cmp	r3, #18
 80027a2:	d107      	bne.n	80027b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f91d 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027da:	d103      	bne.n	80027e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e035      	b.n	8002854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f0:	d108      	bne.n	8002804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e01b      	b.n	800283c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002804:	897b      	ldrh	r3, [r7, #10]
 8002806:	11db      	asrs	r3, r3, #7
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0306 	and.w	r3, r3, #6
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f063 030f 	orn	r3, r3, #15
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	490e      	ldr	r1, [pc, #56]	; (800285c <I2C_MasterRequestWrite+0xfc>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f943 	bl	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e010      	b.n	8002854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <I2C_MasterRequestWrite+0x100>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f933 	bl	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	00010008 	.word	0x00010008
 8002860:	00010002 	.word	0x00010002

08002864 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002888:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d006      	beq.n	800289e <I2C_MasterRequestRead+0x3a>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <I2C_MasterRequestRead+0x3a>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d107      	bne.n	80028c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f893 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ee:	d103      	bne.n	80028f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e079      	b.n	80029f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002904:	d108      	bne.n	8002918 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	e05f      	b.n	80029d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	11db      	asrs	r3, r3, #7
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0306 	and.w	r3, r3, #6
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f063 030f 	orn	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4930      	ldr	r1, [pc, #192]	; (80029f8 <I2C_MasterRequestRead+0x194>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8b9 	bl	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e054      	b.n	80029f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4929      	ldr	r1, [pc, #164]	; (80029fc <I2C_MasterRequestRead+0x198>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8a9 	bl	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e044      	b.n	80029f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f831 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b2:	d103      	bne.n	80029bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e017      	b.n	80029f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	11db      	asrs	r3, r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 030e 	orn	r3, r3, #14
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <I2C_MasterRequestRead+0x198>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f865 	bl	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00010008 	.word	0x00010008
 80029fc:	00010002 	.word	0x00010002

08002a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a10:	e025      	b.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a18:	d021      	beq.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fd47 	bl	80014ac <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e023      	b.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	e00c      	b.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d0b6      	beq.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002abc:	e051      	b.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d123      	bne.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e046      	b.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d021      	beq.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fcc5 	bl	80014ac <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e020      	b.n	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10c      	bne.n	8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e00b      	b.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d18d      	bne.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb8:	e02d      	b.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8ce 	bl	8002d5c <I2C_IsAcknowledgeFailed>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e02d      	b.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd0:	d021      	beq.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fc6b 	bl	80014ac <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d1ca      	bne.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c3a:	e02d      	b.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f88d 	bl	8002d5c <I2C_IsAcknowledgeFailed>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e02d      	b.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c52:	d021      	beq.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe fc2a 	bl	80014ac <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e007      	b.n	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d1ca      	bne.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cbc:	e042      	b.n	8002d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d119      	bne.n	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0210 	mvn.w	r2, #16
 8002cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e029      	b.n	8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d00:	f7fe fbd4 	bl	80014ac <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d302      	bcc.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e007      	b.n	8002d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d1b5      	bne.n	8002cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d11b      	bne.n	8002dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0204 	orr.w	r2, r3, #4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e26c      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8087 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd8:	4b92      	ldr	r3, [pc, #584]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d00c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de4:	4b8f      	ldr	r3, [pc, #572]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d112      	bne.n	8002e16 <HAL_RCC_OscConfig+0x5e>
 8002df0:	4b8c      	ldr	r3, [pc, #560]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d10b      	bne.n	8002e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d06c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x12c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d168      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e246      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x76>
 8002e20:	4b80      	ldr	r3, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a7f      	ldr	r2, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e02e      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a77      	ldr	r2, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0xbc>
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6a      	ldr	r2, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a67      	ldr	r2, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fb0a 	bl	80014ac <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fb06 	bl	80014ac <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1fa      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xe4>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe faf6 	bl	80014ac <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe faf2 	bl	80014ac <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1e6      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x10c>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d063      	beq.n	8002fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x18c>
 8002f0a:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x176>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1ba      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4939      	ldr	r1, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	e03a      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fe faab 	bl	80014ac <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7fe faa7 	bl	80014ac <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e19b      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4927      	ldr	r1, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fa8a 	bl	80014ac <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fa86 	bl	80014ac <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e17a      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03a      	beq.n	800303c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d019      	beq.n	8003002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_RCC_OscConfig+0x274>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fa6a 	bl	80014ac <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fa66 	bl	80014ac <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e15a      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f000 fad8 	bl	80035b0 <RCC_Delay>
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_OscConfig+0x274>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fe fa50 	bl	80014ac <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300e:	e00f      	b.n	8003030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fa4c 	bl	80014ac <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d908      	bls.n	8003030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e140      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	42420000 	.word	0x42420000
 800302c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b9e      	ldr	r3, [pc, #632]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e9      	bne.n	8003010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a6 	beq.w	8003196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b97      	ldr	r3, [pc, #604]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b94      	ldr	r3, [pc, #592]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a93      	ldr	r2, [pc, #588]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b91      	ldr	r3, [pc, #580]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b8e      	ldr	r3, [pc, #568]	; (80032b0 <HAL_RCC_OscConfig+0x4f8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b8b      	ldr	r3, [pc, #556]	; (80032b0 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a8a      	ldr	r2, [pc, #552]	; (80032b0 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe fa0d 	bl	80014ac <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe fa09 	bl	80014ac <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0fd      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b81      	ldr	r3, [pc, #516]	; (80032b0 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x312>
 80030bc:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a7a      	ldr	r2, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	e02d      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x334>
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a72      	ldr	r2, [pc, #456]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	e01c      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x356>
 80030f4:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a69      	ldr	r2, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe f9bd 	bl	80014ac <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe f9b9 	bl	80014ac <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0ab      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b57      	ldr	r3, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ee      	beq.n	8003136 <HAL_RCC_OscConfig+0x37e>
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe f9a7 	bl	80014ac <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe f9a3 	bl	80014ac <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e095      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b48      	ldr	r3, [pc, #288]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a47      	ldr	r2, [pc, #284]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8081 	beq.w	80032a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a0:	4b42      	ldr	r3, [pc, #264]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d061      	beq.n	8003270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d146      	bne.n	8003242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_OscConfig+0x4fc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe f977 	bl	80014ac <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe f973 	bl	80014ac <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e067      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d108      	bne.n	80031fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	492d      	ldr	r1, [pc, #180]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a19      	ldr	r1, [r3, #32]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	430b      	orrs	r3, r1
 800320e:	4927      	ldr	r1, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x4fc>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe f947 	bl	80014ac <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe f943 	bl	80014ac <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e037      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x46a>
 8003240:	e02f      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <HAL_RCC_OscConfig+0x4fc>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe f930 	bl	80014ac <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fe f92c 	bl	80014ac <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e020      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x498>
 800326e:	e018      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e013      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x4f4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060

080032b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0d0      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d910      	bls.n	80032fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	4965      	ldr	r1, [pc, #404]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0b8      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800331e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800332c:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	494d      	ldr	r1, [pc, #308]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d040      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d115      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e073      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06b      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4936      	ldr	r1, [pc, #216]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe f880 	bl	80014ac <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe f87c 	bl	80014ac <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e053      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d210      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0207 	bic.w	r2, r3, #7
 80033ee:	4922      	ldr	r1, [pc, #136]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e032      	b.n	800346e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4916      	ldr	r1, [pc, #88]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490e      	ldr	r1, [pc, #56]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490a      	ldr	r1, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1cc>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1d0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd ffde 	bl	8001428 <HAL_InitTick>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40022000 	.word	0x40022000
 800347c:	40021000 	.word	0x40021000
 8003480:	08004f24 	.word	0x08004f24
 8003484:	20000008 	.word	0x20000008
 8003488:	2000000c 	.word	0x2000000c

0800348c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b490      	push	{r4, r7}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003494:	1d3c      	adds	r4, r7, #4
 8003496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800349c:	f240 2301 	movw	r3, #513	; 0x201
 80034a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x40>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x46>
 80034ca:	e02d      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ce:	623b      	str	r3, [r7, #32]
      break;
 80034d0:	e02d      	b.n	800352e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034de:	4413      	add	r3, r2
 80034e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c5b      	lsrs	r3, r3, #17
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034fe:	4413      	add	r3, r2
 8003500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800350a:	fb02 f203 	mul.w	r2, r2, r3
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	e004      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	623b      	str	r3, [r7, #32]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352a:	623b      	str	r3, [r7, #32]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6a3b      	ldr	r3, [r7, #32]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3728      	adds	r7, #40	; 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc90      	pop	{r4, r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	08004f14 	.word	0x08004f14
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	003d0900 	.word	0x003d0900

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <HAL_RCC_GetHCLKFreq+0x10>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000008 	.word	0x20000008

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff2 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	08004f34 	.word	0x08004f34

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffde 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	0adb      	lsrs	r3, r3, #11
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08004f34 	.word	0x08004f34

080035b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <RCC_Delay+0x34>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <RCC_Delay+0x38>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035cc:	bf00      	nop
  }
  while (Delay --);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <RCC_Delay+0x1c>
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000008 	.word	0x20000008
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d07d      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b4c      	ldr	r3, [pc, #304]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	4a4b      	ldr	r2, [pc, #300]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	61d3      	str	r3, [r2, #28]
 8003624:	4b49      	ldr	r3, [pc, #292]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d118      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a42      	ldr	r2, [pc, #264]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364c:	f7fd ff2e 	bl	80014ac <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	e008      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003654:	f7fd ff2a 	bl	80014ac <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e06d      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003672:	4b36      	ldr	r3, [pc, #216]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02e      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d027      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d014      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fd fef9 	bl	80014ac <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd fef5 	bl	80014ac <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e036      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4917      	ldr	r1, [pc, #92]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	42420440 	.word	0x42420440

08003758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e076      	b.n	8003858 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800377a:	d009      	beq.n	8003790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
 8003782:	e005      	b.n	8003790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fcba 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	ea42 0103 	orr.w	r1, r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	0c1a      	lsrs	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f002 0204 	and.w	r2, r2, #4
 8003836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e041      	b.n	80038f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fc98 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 fa08 	bl	8003cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e041      	b.n	8003994 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f839 	bl	800399c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 f9b9 	bl	8003cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ac      	b.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f200 809f 	bhi.w	8003b18 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b19 	.word	0x08003b19
 80039e8:	08003b19 	.word	0x08003b19
 80039ec:	08003b19 	.word	0x08003b19
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	08003b19 	.word	0x08003b19
 80039fc:	08003b19 	.word	0x08003b19
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003b19 	.word	0x08003b19
 8003a08:	08003b19 	.word	0x08003b19
 8003a0c:	08003b19 	.word	0x08003b19
 8003a10:	08003ad7 	.word	0x08003ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f9ac 	bl	8003d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e062      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f9f2 	bl	8003e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e041      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fa3b 	bl	8003f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e021      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa85 	bl	8003fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0b3      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x180>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d03e      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0xd0>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	f200 8087 	bhi.w	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	f000 8085 	beq.w	8003c98 <HAL_TIM_ConfigClockSource+0x16c>
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d87f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d01a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xa2>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d87b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d050      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x116>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d877      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003ba4:	2b50      	cmp	r3, #80	; 0x50
 8003ba6:	d03c      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0xf6>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d873      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d058      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x136>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d86f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d064      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d86b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d060      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d867      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d05a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bcc:	e062      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f000 faca 	bl	8004176 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
      break;
 8003bfa:	e04e      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 fab3 	bl	8004176 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1e:	609a      	str	r2, [r3, #8]
      break;
 8003c20:	e03b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fa2a 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2150      	movs	r1, #80	; 0x50
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa81 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003c40:	e02b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fa48 	bl	80040e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2160      	movs	r1, #96	; 0x60
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fa71 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e01b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fa0a 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fa61 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fa58 	bl	8004142 <TIM_ITRx_SetConfig>
        break;
 8003c92:	e002      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <TIM_Base_SetConfig+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0x30>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x30>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <TIM_Base_SetConfig+0xbc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x30>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <TIM_Base_SetConfig+0xc0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <TIM_Base_SetConfig+0xb8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_Base_SetConfig+0x62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d007      	beq.n	8003d16 <TIM_Base_SetConfig+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <TIM_Base_SetConfig+0xbc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_Base_SetConfig+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <TIM_Base_SetConfig+0xc0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <TIM_Base_SetConfig+0xb8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d103      	bne.n	8003d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	615a      	str	r2, [r3, #20]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800

08003d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 0302 	bic.w	r3, r3, #2
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <TIM_OC1_SetConfig+0xc8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10c      	bne.n	8003dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0308 	bic.w	r3, r3, #8
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <TIM_OC1_SetConfig+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00

08003e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0210 	bic.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0320 	bic.w	r3, r3, #32
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <TIM_OC2_SetConfig+0xd0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10d      	bne.n	8003ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <TIM_OC2_SetConfig+0xd0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d113      	bne.n	8003ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <TIM_OC3_SetConfig+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <TIM_OC3_SetConfig+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d113      	bne.n	8003fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40012c00 	.word	0x40012c00

08003fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <TIM_OC4_SetConfig+0x98>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d109      	bne.n	8004060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00

08004088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 030a 	bic.w	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 0210 	bic.w	r2, r3, #16
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800410e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	031b      	lsls	r3, r3, #12
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	f043 0307 	orr.w	r3, r3, #7
 8004164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	431a      	orrs	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	609a      	str	r2, [r3, #8]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e046      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a16      	ldr	r2, [pc, #88]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e03f      	b.n	8004302 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc ffdc 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f905 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	; 0x28
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d17c      	bne.n	8004424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_UART_Transmit+0x2c>
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e075      	b.n	8004426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x3e>
 8004344:	2302      	movs	r3, #2
 8004346:	e06e      	b.n	8004426 <HAL_UART_Transmit+0x11c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2221      	movs	r2, #33	; 0x21
 800435a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800435e:	f7fd f8a5 	bl	80014ac <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004378:	d108      	bne.n	800438c <HAL_UART_Transmit+0x82>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800439c:	e02a      	b.n	80043f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f840 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e036      	b.n	8004426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	3302      	adds	r3, #2
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e007      	b.n	80043e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1cf      	bne.n	800439e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	; 0x40
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f810 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	e02c      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004446:	d028      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x30>
 800444e:	f7fd f82d 	bl	80014ac <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	429a      	cmp	r2, r3
 800445c:	d21d      	bcs.n	800449a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800446c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e00f      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d0c3      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044fe:	f023 030c 	bic.w	r3, r3, #12
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	430b      	orrs	r3, r1
 800450a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <UART_SetConfig+0x114>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7ff f82c 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	e002      	b.n	800453a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7ff f814 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	0119      	lsls	r1, r3, #4
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <UART_SetConfig+0x118>)
 8004572:	fba3 0302 	umull	r0, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2064      	movs	r0, #100	; 0x64
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	; 0x32
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <UART_SetConfig+0x118>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	4419      	add	r1, r3
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009a      	lsls	r2, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <UART_SetConfig+0x118>)
 80045aa:	fba3 0302 	umull	r0, r3, r3, r2
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2064      	movs	r0, #100	; 0x64
 80045b2:	fb00 f303 	mul.w	r3, r0, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	3332      	adds	r3, #50	; 0x32
 80045bc:	4a07      	ldr	r2, [pc, #28]	; (80045dc <UART_SetConfig+0x118>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	440a      	add	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40013800 	.word	0x40013800
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000014 	.word	0x20000014

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	f000 fc5c 	bl	8004eb8 <_init>
 8004600:	2600      	movs	r6, #0
 8004602:	4d0a      	ldr	r5, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08004f70 	.word	0x08004f70
 8004628:	08004f70 	.word	0x08004f70
 800462c:	08004f70 	.word	0x08004f70
 8004630:	08004f74 	.word	0x08004f74

08004634 <memset>:
 8004634:	4603      	mov	r3, r0
 8004636:	4402      	add	r2, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <siprintf>:
 8004644:	b40e      	push	{r1, r2, r3}
 8004646:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800464a:	b500      	push	{lr}
 800464c:	b09c      	sub	sp, #112	; 0x70
 800464e:	ab1d      	add	r3, sp, #116	; 0x74
 8004650:	9002      	str	r0, [sp, #8]
 8004652:	9006      	str	r0, [sp, #24]
 8004654:	9107      	str	r1, [sp, #28]
 8004656:	9104      	str	r1, [sp, #16]
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <siprintf+0x38>)
 800465a:	4909      	ldr	r1, [pc, #36]	; (8004680 <siprintf+0x3c>)
 800465c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004660:	9105      	str	r1, [sp, #20]
 8004662:	6800      	ldr	r0, [r0, #0]
 8004664:	a902      	add	r1, sp, #8
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	f000 f868 	bl	800473c <_svfiprintf_r>
 800466c:	2200      	movs	r2, #0
 800466e:	9b02      	ldr	r3, [sp, #8]
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	b01c      	add	sp, #112	; 0x70
 8004674:	f85d eb04 	ldr.w	lr, [sp], #4
 8004678:	b003      	add	sp, #12
 800467a:	4770      	bx	lr
 800467c:	20000014 	.word	0x20000014
 8004680:	ffff0208 	.word	0xffff0208

08004684 <__ssputs_r>:
 8004684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	688e      	ldr	r6, [r1, #8]
 800468a:	4682      	mov	sl, r0
 800468c:	429e      	cmp	r6, r3
 800468e:	460c      	mov	r4, r1
 8004690:	4690      	mov	r8, r2
 8004692:	461f      	mov	r7, r3
 8004694:	d838      	bhi.n	8004708 <__ssputs_r+0x84>
 8004696:	898a      	ldrh	r2, [r1, #12]
 8004698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800469c:	d032      	beq.n	8004704 <__ssputs_r+0x80>
 800469e:	6825      	ldr	r5, [r4, #0]
 80046a0:	6909      	ldr	r1, [r1, #16]
 80046a2:	3301      	adds	r3, #1
 80046a4:	eba5 0901 	sub.w	r9, r5, r1
 80046a8:	6965      	ldr	r5, [r4, #20]
 80046aa:	444b      	add	r3, r9
 80046ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046b4:	106d      	asrs	r5, r5, #1
 80046b6:	429d      	cmp	r5, r3
 80046b8:	bf38      	it	cc
 80046ba:	461d      	movcc	r5, r3
 80046bc:	0553      	lsls	r3, r2, #21
 80046be:	d531      	bpl.n	8004724 <__ssputs_r+0xa0>
 80046c0:	4629      	mov	r1, r5
 80046c2:	f000 fb53 	bl	8004d6c <_malloc_r>
 80046c6:	4606      	mov	r6, r0
 80046c8:	b950      	cbnz	r0, 80046e0 <__ssputs_r+0x5c>
 80046ca:	230c      	movs	r3, #12
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d0:	f8ca 3000 	str.w	r3, [sl]
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046da:	81a3      	strh	r3, [r4, #12]
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	464a      	mov	r2, r9
 80046e2:	6921      	ldr	r1, [r4, #16]
 80046e4:	f000 face 	bl	8004c84 <memcpy>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	6126      	str	r6, [r4, #16]
 80046f6:	444e      	add	r6, r9
 80046f8:	6026      	str	r6, [r4, #0]
 80046fa:	463e      	mov	r6, r7
 80046fc:	6165      	str	r5, [r4, #20]
 80046fe:	eba5 0509 	sub.w	r5, r5, r9
 8004702:	60a5      	str	r5, [r4, #8]
 8004704:	42be      	cmp	r6, r7
 8004706:	d900      	bls.n	800470a <__ssputs_r+0x86>
 8004708:	463e      	mov	r6, r7
 800470a:	4632      	mov	r2, r6
 800470c:	4641      	mov	r1, r8
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	f000 fac6 	bl	8004ca0 <memmove>
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	1b9b      	subs	r3, r3, r6
 800471a:	4432      	add	r2, r6
 800471c:	2000      	movs	r0, #0
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	e7db      	b.n	80046dc <__ssputs_r+0x58>
 8004724:	462a      	mov	r2, r5
 8004726:	f000 fb7b 	bl	8004e20 <_realloc_r>
 800472a:	4606      	mov	r6, r0
 800472c:	2800      	cmp	r0, #0
 800472e:	d1e1      	bne.n	80046f4 <__ssputs_r+0x70>
 8004730:	4650      	mov	r0, sl
 8004732:	6921      	ldr	r1, [r4, #16]
 8004734:	f000 face 	bl	8004cd4 <_free_r>
 8004738:	e7c7      	b.n	80046ca <__ssputs_r+0x46>
	...

0800473c <_svfiprintf_r>:
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	4698      	mov	r8, r3
 8004742:	898b      	ldrh	r3, [r1, #12]
 8004744:	4607      	mov	r7, r0
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	460d      	mov	r5, r1
 800474a:	4614      	mov	r4, r2
 800474c:	b09d      	sub	sp, #116	; 0x74
 800474e:	d50e      	bpl.n	800476e <_svfiprintf_r+0x32>
 8004750:	690b      	ldr	r3, [r1, #16]
 8004752:	b963      	cbnz	r3, 800476e <_svfiprintf_r+0x32>
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	f000 fb09 	bl	8004d6c <_malloc_r>
 800475a:	6028      	str	r0, [r5, #0]
 800475c:	6128      	str	r0, [r5, #16]
 800475e:	b920      	cbnz	r0, 800476a <_svfiprintf_r+0x2e>
 8004760:	230c      	movs	r3, #12
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004768:	e0d1      	b.n	800490e <_svfiprintf_r+0x1d2>
 800476a:	2340      	movs	r3, #64	; 0x40
 800476c:	616b      	str	r3, [r5, #20]
 800476e:	2300      	movs	r3, #0
 8004770:	9309      	str	r3, [sp, #36]	; 0x24
 8004772:	2320      	movs	r3, #32
 8004774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004778:	2330      	movs	r3, #48	; 0x30
 800477a:	f04f 0901 	mov.w	r9, #1
 800477e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004782:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004928 <_svfiprintf_r+0x1ec>
 8004786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800478a:	4623      	mov	r3, r4
 800478c:	469a      	mov	sl, r3
 800478e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004792:	b10a      	cbz	r2, 8004798 <_svfiprintf_r+0x5c>
 8004794:	2a25      	cmp	r2, #37	; 0x25
 8004796:	d1f9      	bne.n	800478c <_svfiprintf_r+0x50>
 8004798:	ebba 0b04 	subs.w	fp, sl, r4
 800479c:	d00b      	beq.n	80047b6 <_svfiprintf_r+0x7a>
 800479e:	465b      	mov	r3, fp
 80047a0:	4622      	mov	r2, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	4638      	mov	r0, r7
 80047a6:	f7ff ff6d 	bl	8004684 <__ssputs_r>
 80047aa:	3001      	adds	r0, #1
 80047ac:	f000 80aa 	beq.w	8004904 <_svfiprintf_r+0x1c8>
 80047b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047b2:	445a      	add	r2, fp
 80047b4:	9209      	str	r2, [sp, #36]	; 0x24
 80047b6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80a2 	beq.w	8004904 <_svfiprintf_r+0x1c8>
 80047c0:	2300      	movs	r3, #0
 80047c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ca:	f10a 0a01 	add.w	sl, sl, #1
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	9307      	str	r3, [sp, #28]
 80047d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047d6:	931a      	str	r3, [sp, #104]	; 0x68
 80047d8:	4654      	mov	r4, sl
 80047da:	2205      	movs	r2, #5
 80047dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e0:	4851      	ldr	r0, [pc, #324]	; (8004928 <_svfiprintf_r+0x1ec>)
 80047e2:	f000 fa41 	bl	8004c68 <memchr>
 80047e6:	9a04      	ldr	r2, [sp, #16]
 80047e8:	b9d8      	cbnz	r0, 8004822 <_svfiprintf_r+0xe6>
 80047ea:	06d0      	lsls	r0, r2, #27
 80047ec:	bf44      	itt	mi
 80047ee:	2320      	movmi	r3, #32
 80047f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047f4:	0711      	lsls	r1, r2, #28
 80047f6:	bf44      	itt	mi
 80047f8:	232b      	movmi	r3, #43	; 0x2b
 80047fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004802:	2b2a      	cmp	r3, #42	; 0x2a
 8004804:	d015      	beq.n	8004832 <_svfiprintf_r+0xf6>
 8004806:	4654      	mov	r4, sl
 8004808:	2000      	movs	r0, #0
 800480a:	f04f 0c0a 	mov.w	ip, #10
 800480e:	9a07      	ldr	r2, [sp, #28]
 8004810:	4621      	mov	r1, r4
 8004812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004816:	3b30      	subs	r3, #48	; 0x30
 8004818:	2b09      	cmp	r3, #9
 800481a:	d94e      	bls.n	80048ba <_svfiprintf_r+0x17e>
 800481c:	b1b0      	cbz	r0, 800484c <_svfiprintf_r+0x110>
 800481e:	9207      	str	r2, [sp, #28]
 8004820:	e014      	b.n	800484c <_svfiprintf_r+0x110>
 8004822:	eba0 0308 	sub.w	r3, r0, r8
 8004826:	fa09 f303 	lsl.w	r3, r9, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	46a2      	mov	sl, r4
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	e7d2      	b.n	80047d8 <_svfiprintf_r+0x9c>
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	9103      	str	r1, [sp, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfbb      	ittet	lt
 800483e:	425b      	neglt	r3, r3
 8004840:	f042 0202 	orrlt.w	r2, r2, #2
 8004844:	9307      	strge	r3, [sp, #28]
 8004846:	9307      	strlt	r3, [sp, #28]
 8004848:	bfb8      	it	lt
 800484a:	9204      	strlt	r2, [sp, #16]
 800484c:	7823      	ldrb	r3, [r4, #0]
 800484e:	2b2e      	cmp	r3, #46	; 0x2e
 8004850:	d10c      	bne.n	800486c <_svfiprintf_r+0x130>
 8004852:	7863      	ldrb	r3, [r4, #1]
 8004854:	2b2a      	cmp	r3, #42	; 0x2a
 8004856:	d135      	bne.n	80048c4 <_svfiprintf_r+0x188>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	3402      	adds	r4, #2
 800485c:	1d1a      	adds	r2, r3, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9203      	str	r2, [sp, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfb8      	it	lt
 8004866:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800486a:	9305      	str	r3, [sp, #20]
 800486c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004938 <_svfiprintf_r+0x1fc>
 8004870:	2203      	movs	r2, #3
 8004872:	4650      	mov	r0, sl
 8004874:	7821      	ldrb	r1, [r4, #0]
 8004876:	f000 f9f7 	bl	8004c68 <memchr>
 800487a:	b140      	cbz	r0, 800488e <_svfiprintf_r+0x152>
 800487c:	2340      	movs	r3, #64	; 0x40
 800487e:	eba0 000a 	sub.w	r0, r0, sl
 8004882:	fa03 f000 	lsl.w	r0, r3, r0
 8004886:	9b04      	ldr	r3, [sp, #16]
 8004888:	3401      	adds	r4, #1
 800488a:	4303      	orrs	r3, r0
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004892:	2206      	movs	r2, #6
 8004894:	4825      	ldr	r0, [pc, #148]	; (800492c <_svfiprintf_r+0x1f0>)
 8004896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800489a:	f000 f9e5 	bl	8004c68 <memchr>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d038      	beq.n	8004914 <_svfiprintf_r+0x1d8>
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <_svfiprintf_r+0x1f4>)
 80048a4:	bb1b      	cbnz	r3, 80048ee <_svfiprintf_r+0x1b2>
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	3307      	adds	r3, #7
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	3308      	adds	r3, #8
 80048b0:	9303      	str	r3, [sp, #12]
 80048b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b4:	4433      	add	r3, r6
 80048b6:	9309      	str	r3, [sp, #36]	; 0x24
 80048b8:	e767      	b.n	800478a <_svfiprintf_r+0x4e>
 80048ba:	460c      	mov	r4, r1
 80048bc:	2001      	movs	r0, #1
 80048be:	fb0c 3202 	mla	r2, ip, r2, r3
 80048c2:	e7a5      	b.n	8004810 <_svfiprintf_r+0xd4>
 80048c4:	2300      	movs	r3, #0
 80048c6:	f04f 0c0a 	mov.w	ip, #10
 80048ca:	4619      	mov	r1, r3
 80048cc:	3401      	adds	r4, #1
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	4620      	mov	r0, r4
 80048d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d6:	3a30      	subs	r2, #48	; 0x30
 80048d8:	2a09      	cmp	r2, #9
 80048da:	d903      	bls.n	80048e4 <_svfiprintf_r+0x1a8>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0c5      	beq.n	800486c <_svfiprintf_r+0x130>
 80048e0:	9105      	str	r1, [sp, #20]
 80048e2:	e7c3      	b.n	800486c <_svfiprintf_r+0x130>
 80048e4:	4604      	mov	r4, r0
 80048e6:	2301      	movs	r3, #1
 80048e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ec:	e7f0      	b.n	80048d0 <_svfiprintf_r+0x194>
 80048ee:	ab03      	add	r3, sp, #12
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	462a      	mov	r2, r5
 80048f4:	4638      	mov	r0, r7
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <_svfiprintf_r+0x1f8>)
 80048f8:	a904      	add	r1, sp, #16
 80048fa:	f3af 8000 	nop.w
 80048fe:	1c42      	adds	r2, r0, #1
 8004900:	4606      	mov	r6, r0
 8004902:	d1d6      	bne.n	80048b2 <_svfiprintf_r+0x176>
 8004904:	89ab      	ldrh	r3, [r5, #12]
 8004906:	065b      	lsls	r3, r3, #25
 8004908:	f53f af2c 	bmi.w	8004764 <_svfiprintf_r+0x28>
 800490c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490e:	b01d      	add	sp, #116	; 0x74
 8004910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	ab03      	add	r3, sp, #12
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	462a      	mov	r2, r5
 800491a:	4638      	mov	r0, r7
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <_svfiprintf_r+0x1f8>)
 800491e:	a904      	add	r1, sp, #16
 8004920:	f000 f87c 	bl	8004a1c <_printf_i>
 8004924:	e7eb      	b.n	80048fe <_svfiprintf_r+0x1c2>
 8004926:	bf00      	nop
 8004928:	08004f3c 	.word	0x08004f3c
 800492c:	08004f46 	.word	0x08004f46
 8004930:	00000000 	.word	0x00000000
 8004934:	08004685 	.word	0x08004685
 8004938:	08004f42 	.word	0x08004f42

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4699      	mov	r9, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	4607      	mov	r7, r0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfb8      	it	lt
 800494e:	4613      	movlt	r3, r2
 8004950:	6033      	str	r3, [r6, #0]
 8004952:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004956:	460c      	mov	r4, r1
 8004958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc28      	bgt.n	80049d6 <_printf_common+0x9a>
 8004984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004988:	1e13      	subs	r3, r2, #0
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42d      	bmi.n	80049f0 <_printf_common+0xb4>
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d020      	beq.n	80049e4 <_printf_common+0xa8>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	68e5      	ldr	r5, [r4, #12]
 80049a6:	f003 0306 	and.w	r3, r3, #6
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf18      	it	ne
 80049ae:	2500      	movne	r5, #0
 80049b0:	6832      	ldr	r2, [r6, #0]
 80049b2:	f04f 0600 	mov.w	r6, #0
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	bf08      	it	eq
 80049ba:	1aad      	subeq	r5, r5, r2
 80049bc:	6922      	ldr	r2, [r4, #16]
 80049be:	bf08      	it	eq
 80049c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bfc4      	itt	gt
 80049c8:	1a9b      	subgt	r3, r3, r2
 80049ca:	18ed      	addgt	r5, r5, r3
 80049cc:	341a      	adds	r4, #26
 80049ce:	42b5      	cmp	r5, r6
 80049d0:	d11a      	bne.n	8004a08 <_printf_common+0xcc>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e008      	b.n	80049e8 <_printf_common+0xac>
 80049d6:	2301      	movs	r3, #1
 80049d8:	4652      	mov	r2, sl
 80049da:	4649      	mov	r1, r9
 80049dc:	4638      	mov	r0, r7
 80049de:	47c0      	blx	r8
 80049e0:	3001      	adds	r0, #1
 80049e2:	d103      	bne.n	80049ec <_printf_common+0xb0>
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	3501      	adds	r5, #1
 80049ee:	e7c4      	b.n	800497a <_printf_common+0x3e>
 80049f0:	2030      	movs	r0, #48	; 0x30
 80049f2:	18e1      	adds	r1, r4, r3
 80049f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fe:	4422      	add	r2, r4
 8004a00:	3302      	adds	r3, #2
 8004a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a06:	e7c5      	b.n	8004994 <_printf_common+0x58>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0e6      	beq.n	80049e4 <_printf_common+0xa8>
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7d9      	b.n	80049ce <_printf_common+0x92>
	...

08004a1c <_printf_i>:
 8004a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	460c      	mov	r4, r1
 8004a22:	7e27      	ldrb	r7, [r4, #24]
 8004a24:	4691      	mov	r9, r2
 8004a26:	2f78      	cmp	r7, #120	; 0x78
 8004a28:	4680      	mov	r8, r0
 8004a2a:	469a      	mov	sl, r3
 8004a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a32:	d807      	bhi.n	8004a44 <_printf_i+0x28>
 8004a34:	2f62      	cmp	r7, #98	; 0x62
 8004a36:	d80a      	bhi.n	8004a4e <_printf_i+0x32>
 8004a38:	2f00      	cmp	r7, #0
 8004a3a:	f000 80d9 	beq.w	8004bf0 <_printf_i+0x1d4>
 8004a3e:	2f58      	cmp	r7, #88	; 0x58
 8004a40:	f000 80a4 	beq.w	8004b8c <_printf_i+0x170>
 8004a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a4c:	e03a      	b.n	8004ac4 <_printf_i+0xa8>
 8004a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a52:	2b15      	cmp	r3, #21
 8004a54:	d8f6      	bhi.n	8004a44 <_printf_i+0x28>
 8004a56:	a001      	add	r0, pc, #4	; (adr r0, 8004a5c <_printf_i+0x40>)
 8004a58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a5c:	08004ab5 	.word	0x08004ab5
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004a45 	.word	0x08004a45
 8004a68:	08004a45 	.word	0x08004a45
 8004a6c:	08004a45 	.word	0x08004a45
 8004a70:	08004a45 	.word	0x08004a45
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004a45 	.word	0x08004a45
 8004a7c:	08004a45 	.word	0x08004a45
 8004a80:	08004a45 	.word	0x08004a45
 8004a84:	08004a45 	.word	0x08004a45
 8004a88:	08004bd7 	.word	0x08004bd7
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004bb9 	.word	0x08004bb9
 8004a94:	08004a45 	.word	0x08004a45
 8004a98:	08004a45 	.word	0x08004a45
 8004a9c:	08004bf9 	.word	0x08004bf9
 8004aa0:	08004a45 	.word	0x08004a45
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004a45 	.word	0x08004a45
 8004aac:	08004a45 	.word	0x08004a45
 8004ab0:	08004bc1 	.word	0x08004bc1
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	600a      	str	r2, [r1, #0]
 8004ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0a4      	b.n	8004c12 <_printf_i+0x1f6>
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	6808      	ldr	r0, [r1, #0]
 8004acc:	062e      	lsls	r6, r5, #24
 8004ace:	f100 0304 	add.w	r3, r0, #4
 8004ad2:	d50a      	bpl.n	8004aea <_printf_i+0xce>
 8004ad4:	6805      	ldr	r5, [r0, #0]
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	da03      	bge.n	8004ae4 <_printf_i+0xc8>
 8004adc:	232d      	movs	r3, #45	; 0x2d
 8004ade:	426d      	negs	r5, r5
 8004ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae4:	230a      	movs	r3, #10
 8004ae6:	485e      	ldr	r0, [pc, #376]	; (8004c60 <_printf_i+0x244>)
 8004ae8:	e019      	b.n	8004b1e <_printf_i+0x102>
 8004aea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aee:	6805      	ldr	r5, [r0, #0]
 8004af0:	600b      	str	r3, [r1, #0]
 8004af2:	bf18      	it	ne
 8004af4:	b22d      	sxthne	r5, r5
 8004af6:	e7ef      	b.n	8004ad8 <_printf_i+0xbc>
 8004af8:	680b      	ldr	r3, [r1, #0]
 8004afa:	6825      	ldr	r5, [r4, #0]
 8004afc:	1d18      	adds	r0, r3, #4
 8004afe:	6008      	str	r0, [r1, #0]
 8004b00:	0628      	lsls	r0, r5, #24
 8004b02:	d501      	bpl.n	8004b08 <_printf_i+0xec>
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <_printf_i+0xf2>
 8004b08:	0669      	lsls	r1, r5, #25
 8004b0a:	d5fb      	bpl.n	8004b04 <_printf_i+0xe8>
 8004b0c:	881d      	ldrh	r5, [r3, #0]
 8004b0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b10:	bf0c      	ite	eq
 8004b12:	2308      	moveq	r3, #8
 8004b14:	230a      	movne	r3, #10
 8004b16:	4852      	ldr	r0, [pc, #328]	; (8004c60 <_printf_i+0x244>)
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1e:	6866      	ldr	r6, [r4, #4]
 8004b20:	2e00      	cmp	r6, #0
 8004b22:	bfa8      	it	ge
 8004b24:	6821      	ldrge	r1, [r4, #0]
 8004b26:	60a6      	str	r6, [r4, #8]
 8004b28:	bfa4      	itt	ge
 8004b2a:	f021 0104 	bicge.w	r1, r1, #4
 8004b2e:	6021      	strge	r1, [r4, #0]
 8004b30:	b90d      	cbnz	r5, 8004b36 <_printf_i+0x11a>
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	d04d      	beq.n	8004bd2 <_printf_i+0x1b6>
 8004b36:	4616      	mov	r6, r2
 8004b38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b40:	5dc7      	ldrb	r7, [r0, r7]
 8004b42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b46:	462f      	mov	r7, r5
 8004b48:	42bb      	cmp	r3, r7
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	d9f4      	bls.n	8004b38 <_printf_i+0x11c>
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d10b      	bne.n	8004b6a <_printf_i+0x14e>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	07df      	lsls	r7, r3, #31
 8004b56:	d508      	bpl.n	8004b6a <_printf_i+0x14e>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6861      	ldr	r1, [r4, #4]
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	bfde      	ittt	le
 8004b60:	2330      	movle	r3, #48	; 0x30
 8004b62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b66:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004b6a:	1b92      	subs	r2, r2, r6
 8004b6c:	6122      	str	r2, [r4, #16]
 8004b6e:	464b      	mov	r3, r9
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f8cd a000 	str.w	sl, [sp]
 8004b78:	aa03      	add	r2, sp, #12
 8004b7a:	f7ff fedf 	bl	800493c <_printf_common>
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d14c      	bne.n	8004c1c <_printf_i+0x200>
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b86:	b004      	add	sp, #16
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	4834      	ldr	r0, [pc, #208]	; (8004c60 <_printf_i+0x244>)
 8004b8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b92:	680e      	ldr	r6, [r1, #0]
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b9a:	061f      	lsls	r7, r3, #24
 8004b9c:	600e      	str	r6, [r1, #0]
 8004b9e:	d514      	bpl.n	8004bca <_printf_i+0x1ae>
 8004ba0:	07d9      	lsls	r1, r3, #31
 8004ba2:	bf44      	itt	mi
 8004ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba8:	6023      	strmi	r3, [r4, #0]
 8004baa:	b91d      	cbnz	r5, 8004bb4 <_printf_i+0x198>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	e7af      	b.n	8004b18 <_printf_i+0xfc>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f043 0320 	orr.w	r3, r3, #32
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	2378      	movs	r3, #120	; 0x78
 8004bc2:	4828      	ldr	r0, [pc, #160]	; (8004c64 <_printf_i+0x248>)
 8004bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc8:	e7e3      	b.n	8004b92 <_printf_i+0x176>
 8004bca:	065e      	lsls	r6, r3, #25
 8004bcc:	bf48      	it	mi
 8004bce:	b2ad      	uxthmi	r5, r5
 8004bd0:	e7e6      	b.n	8004ba0 <_printf_i+0x184>
 8004bd2:	4616      	mov	r6, r2
 8004bd4:	e7bb      	b.n	8004b4e <_printf_i+0x132>
 8004bd6:	680b      	ldr	r3, [r1, #0]
 8004bd8:	6826      	ldr	r6, [r4, #0]
 8004bda:	1d1d      	adds	r5, r3, #4
 8004bdc:	6960      	ldr	r0, [r4, #20]
 8004bde:	600d      	str	r5, [r1, #0]
 8004be0:	0635      	lsls	r5, r6, #24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	d501      	bpl.n	8004bea <_printf_i+0x1ce>
 8004be6:	6018      	str	r0, [r3, #0]
 8004be8:	e002      	b.n	8004bf0 <_printf_i+0x1d4>
 8004bea:	0671      	lsls	r1, r6, #25
 8004bec:	d5fb      	bpl.n	8004be6 <_printf_i+0x1ca>
 8004bee:	8018      	strh	r0, [r3, #0]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4616      	mov	r6, r2
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	e7ba      	b.n	8004b6e <_printf_i+0x152>
 8004bf8:	680b      	ldr	r3, [r1, #0]
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	600a      	str	r2, [r1, #0]
 8004bfe:	681e      	ldr	r6, [r3, #0]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4630      	mov	r0, r6
 8004c04:	6862      	ldr	r2, [r4, #4]
 8004c06:	f000 f82f 	bl	8004c68 <memchr>
 8004c0a:	b108      	cbz	r0, 8004c10 <_printf_i+0x1f4>
 8004c0c:	1b80      	subs	r0, r0, r6
 8004c0e:	6060      	str	r0, [r4, #4]
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	2300      	movs	r3, #0
 8004c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1a:	e7a8      	b.n	8004b6e <_printf_i+0x152>
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	47d0      	blx	sl
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0ab      	beq.n	8004b82 <_printf_i+0x166>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	079b      	lsls	r3, r3, #30
 8004c2e:	d413      	bmi.n	8004c58 <_printf_i+0x23c>
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	4298      	cmp	r0, r3
 8004c36:	bfb8      	it	lt
 8004c38:	4618      	movlt	r0, r3
 8004c3a:	e7a4      	b.n	8004b86 <_printf_i+0x16a>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4632      	mov	r2, r6
 8004c40:	4649      	mov	r1, r9
 8004c42:	4640      	mov	r0, r8
 8004c44:	47d0      	blx	sl
 8004c46:	3001      	adds	r0, #1
 8004c48:	d09b      	beq.n	8004b82 <_printf_i+0x166>
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	68e3      	ldr	r3, [r4, #12]
 8004c4e:	9903      	ldr	r1, [sp, #12]
 8004c50:	1a5b      	subs	r3, r3, r1
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	dcf2      	bgt.n	8004c3c <_printf_i+0x220>
 8004c56:	e7eb      	b.n	8004c30 <_printf_i+0x214>
 8004c58:	2500      	movs	r5, #0
 8004c5a:	f104 0619 	add.w	r6, r4, #25
 8004c5e:	e7f5      	b.n	8004c4c <_printf_i+0x230>
 8004c60:	08004f4d 	.word	0x08004f4d
 8004c64:	08004f5e 	.word	0x08004f5e

08004c68 <memchr>:
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	b2c9      	uxtb	r1, r1
 8004c6e:	4402      	add	r2, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	d101      	bne.n	8004c7a <memchr+0x12>
 8004c76:	2000      	movs	r0, #0
 8004c78:	e003      	b.n	8004c82 <memchr+0x1a>
 8004c7a:	7804      	ldrb	r4, [r0, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	428c      	cmp	r4, r1
 8004c80:	d1f6      	bne.n	8004c70 <memchr+0x8>
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <memcpy>:
 8004c84:	440a      	add	r2, r1
 8004c86:	4291      	cmp	r1, r2
 8004c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c8c:	d100      	bne.n	8004c90 <memcpy+0xc>
 8004c8e:	4770      	bx	lr
 8004c90:	b510      	push	{r4, lr}
 8004c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c9c:	d1f9      	bne.n	8004c92 <memcpy+0xe>
 8004c9e:	bd10      	pop	{r4, pc}

08004ca0 <memmove>:
 8004ca0:	4288      	cmp	r0, r1
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	eb01 0402 	add.w	r4, r1, r2
 8004ca8:	d902      	bls.n	8004cb0 <memmove+0x10>
 8004caa:	4284      	cmp	r4, r0
 8004cac:	4623      	mov	r3, r4
 8004cae:	d807      	bhi.n	8004cc0 <memmove+0x20>
 8004cb0:	1e43      	subs	r3, r0, #1
 8004cb2:	42a1      	cmp	r1, r4
 8004cb4:	d008      	beq.n	8004cc8 <memmove+0x28>
 8004cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cbe:	e7f8      	b.n	8004cb2 <memmove+0x12>
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	4402      	add	r2, r0
 8004cc4:	428a      	cmp	r2, r1
 8004cc6:	d100      	bne.n	8004cca <memmove+0x2a>
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cd2:	e7f7      	b.n	8004cc4 <memmove+0x24>

08004cd4 <_free_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d043      	beq.n	8004d64 <_free_r+0x90>
 8004cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce0:	1f0c      	subs	r4, r1, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfb8      	it	lt
 8004ce6:	18e4      	addlt	r4, r4, r3
 8004ce8:	f000 f8d0 	bl	8004e8c <__malloc_lock>
 8004cec:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <_free_r+0x94>)
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	b933      	cbnz	r3, 8004d02 <_free_r+0x2e>
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6014      	str	r4, [r2, #0]
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cfe:	f000 b8cb 	b.w	8004e98 <__malloc_unlock>
 8004d02:	42a3      	cmp	r3, r4
 8004d04:	d90a      	bls.n	8004d1c <_free_r+0x48>
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	1862      	adds	r2, r4, r1
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bf01      	itttt	eq
 8004d0e:	681a      	ldreq	r2, [r3, #0]
 8004d10:	685b      	ldreq	r3, [r3, #4]
 8004d12:	1852      	addeq	r2, r2, r1
 8004d14:	6022      	streq	r2, [r4, #0]
 8004d16:	6063      	str	r3, [r4, #4]
 8004d18:	6004      	str	r4, [r0, #0]
 8004d1a:	e7ed      	b.n	8004cf8 <_free_r+0x24>
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b10b      	cbz	r3, 8004d26 <_free_r+0x52>
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	d9fa      	bls.n	8004d1c <_free_r+0x48>
 8004d26:	6811      	ldr	r1, [r2, #0]
 8004d28:	1850      	adds	r0, r2, r1
 8004d2a:	42a0      	cmp	r0, r4
 8004d2c:	d10b      	bne.n	8004d46 <_free_r+0x72>
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	4401      	add	r1, r0
 8004d32:	1850      	adds	r0, r2, r1
 8004d34:	4283      	cmp	r3, r0
 8004d36:	6011      	str	r1, [r2, #0]
 8004d38:	d1de      	bne.n	8004cf8 <_free_r+0x24>
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4401      	add	r1, r0
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	6053      	str	r3, [r2, #4]
 8004d44:	e7d8      	b.n	8004cf8 <_free_r+0x24>
 8004d46:	d902      	bls.n	8004d4e <_free_r+0x7a>
 8004d48:	230c      	movs	r3, #12
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	e7d4      	b.n	8004cf8 <_free_r+0x24>
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1821      	adds	r1, r4, r0
 8004d52:	428b      	cmp	r3, r1
 8004d54:	bf01      	itttt	eq
 8004d56:	6819      	ldreq	r1, [r3, #0]
 8004d58:	685b      	ldreq	r3, [r3, #4]
 8004d5a:	1809      	addeq	r1, r1, r0
 8004d5c:	6021      	streq	r1, [r4, #0]
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	6054      	str	r4, [r2, #4]
 8004d62:	e7c9      	b.n	8004cf8 <_free_r+0x24>
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
 8004d66:	bf00      	nop
 8004d68:	20000098 	.word	0x20000098

08004d6c <_malloc_r>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	1ccd      	adds	r5, r1, #3
 8004d70:	f025 0503 	bic.w	r5, r5, #3
 8004d74:	3508      	adds	r5, #8
 8004d76:	2d0c      	cmp	r5, #12
 8004d78:	bf38      	it	cc
 8004d7a:	250c      	movcc	r5, #12
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	4606      	mov	r6, r0
 8004d80:	db01      	blt.n	8004d86 <_malloc_r+0x1a>
 8004d82:	42a9      	cmp	r1, r5
 8004d84:	d903      	bls.n	8004d8e <_malloc_r+0x22>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8e:	f000 f87d 	bl	8004e8c <__malloc_lock>
 8004d92:	4921      	ldr	r1, [pc, #132]	; (8004e18 <_malloc_r+0xac>)
 8004d94:	680a      	ldr	r2, [r1, #0]
 8004d96:	4614      	mov	r4, r2
 8004d98:	b99c      	cbnz	r4, 8004dc2 <_malloc_r+0x56>
 8004d9a:	4f20      	ldr	r7, [pc, #128]	; (8004e1c <_malloc_r+0xb0>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	b923      	cbnz	r3, 8004daa <_malloc_r+0x3e>
 8004da0:	4621      	mov	r1, r4
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 f862 	bl	8004e6c <_sbrk_r>
 8004da8:	6038      	str	r0, [r7, #0]
 8004daa:	4629      	mov	r1, r5
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f85d 	bl	8004e6c <_sbrk_r>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d123      	bne.n	8004dfe <_malloc_r+0x92>
 8004db6:	230c      	movs	r3, #12
 8004db8:	4630      	mov	r0, r6
 8004dba:	6033      	str	r3, [r6, #0]
 8004dbc:	f000 f86c 	bl	8004e98 <__malloc_unlock>
 8004dc0:	e7e3      	b.n	8004d8a <_malloc_r+0x1e>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	1b5b      	subs	r3, r3, r5
 8004dc6:	d417      	bmi.n	8004df8 <_malloc_r+0x8c>
 8004dc8:	2b0b      	cmp	r3, #11
 8004dca:	d903      	bls.n	8004dd4 <_malloc_r+0x68>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	441c      	add	r4, r3
 8004dd0:	6025      	str	r5, [r4, #0]
 8004dd2:	e004      	b.n	8004dde <_malloc_r+0x72>
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	42a2      	cmp	r2, r4
 8004dd8:	bf0c      	ite	eq
 8004dda:	600b      	streq	r3, [r1, #0]
 8004ddc:	6053      	strne	r3, [r2, #4]
 8004dde:	4630      	mov	r0, r6
 8004de0:	f000 f85a 	bl	8004e98 <__malloc_unlock>
 8004de4:	f104 000b 	add.w	r0, r4, #11
 8004de8:	1d23      	adds	r3, r4, #4
 8004dea:	f020 0007 	bic.w	r0, r0, #7
 8004dee:	1ac2      	subs	r2, r0, r3
 8004df0:	d0cc      	beq.n	8004d8c <_malloc_r+0x20>
 8004df2:	1a1b      	subs	r3, r3, r0
 8004df4:	50a3      	str	r3, [r4, r2]
 8004df6:	e7c9      	b.n	8004d8c <_malloc_r+0x20>
 8004df8:	4622      	mov	r2, r4
 8004dfa:	6864      	ldr	r4, [r4, #4]
 8004dfc:	e7cc      	b.n	8004d98 <_malloc_r+0x2c>
 8004dfe:	1cc4      	adds	r4, r0, #3
 8004e00:	f024 0403 	bic.w	r4, r4, #3
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d0e3      	beq.n	8004dd0 <_malloc_r+0x64>
 8004e08:	1a21      	subs	r1, r4, r0
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 f82e 	bl	8004e6c <_sbrk_r>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d1dd      	bne.n	8004dd0 <_malloc_r+0x64>
 8004e14:	e7cf      	b.n	8004db6 <_malloc_r+0x4a>
 8004e16:	bf00      	nop
 8004e18:	20000098 	.word	0x20000098
 8004e1c:	2000009c 	.word	0x2000009c

08004e20 <_realloc_r>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	4607      	mov	r7, r0
 8004e24:	4614      	mov	r4, r2
 8004e26:	460e      	mov	r6, r1
 8004e28:	b921      	cbnz	r1, 8004e34 <_realloc_r+0x14>
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e30:	f7ff bf9c 	b.w	8004d6c <_malloc_r>
 8004e34:	b922      	cbnz	r2, 8004e40 <_realloc_r+0x20>
 8004e36:	f7ff ff4d 	bl	8004cd4 <_free_r>
 8004e3a:	4625      	mov	r5, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e40:	f000 f830 	bl	8004ea4 <_malloc_usable_size_r>
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d20f      	bcs.n	8004e68 <_realloc_r+0x48>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff ff8e 	bl	8004d6c <_malloc_r>
 8004e50:	4605      	mov	r5, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0f2      	beq.n	8004e3c <_realloc_r+0x1c>
 8004e56:	4631      	mov	r1, r6
 8004e58:	4622      	mov	r2, r4
 8004e5a:	f7ff ff13 	bl	8004c84 <memcpy>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff ff37 	bl	8004cd4 <_free_r>
 8004e66:	e7e9      	b.n	8004e3c <_realloc_r+0x1c>
 8004e68:	4635      	mov	r5, r6
 8004e6a:	e7e7      	b.n	8004e3c <_realloc_r+0x1c>

08004e6c <_sbrk_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4d05      	ldr	r5, [pc, #20]	; (8004e88 <_sbrk_r+0x1c>)
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	602b      	str	r3, [r5, #0]
 8004e78:	f7fc fa5e 	bl	8001338 <_sbrk>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_sbrk_r+0x1a>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_sbrk_r+0x1a>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	2000025c 	.word	0x2000025c

08004e8c <__malloc_lock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__malloc_lock+0x8>)
 8004e8e:	f000 b811 	b.w	8004eb4 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	20000264 	.word	0x20000264

08004e98 <__malloc_unlock>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__malloc_unlock+0x8>)
 8004e9a:	f000 b80c 	b.w	8004eb6 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20000264 	.word	0x20000264

08004ea4 <_malloc_usable_size_r>:
 8004ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea8:	1f18      	subs	r0, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bfbc      	itt	lt
 8004eae:	580b      	ldrlt	r3, [r1, r0]
 8004eb0:	18c0      	addlt	r0, r0, r3
 8004eb2:	4770      	bx	lr

08004eb4 <__retarget_lock_acquire_recursive>:
 8004eb4:	4770      	bx	lr

08004eb6 <__retarget_lock_release_recursive>:
 8004eb6:	4770      	bx	lr

08004eb8 <_init>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr

08004ec4 <_fini>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr
