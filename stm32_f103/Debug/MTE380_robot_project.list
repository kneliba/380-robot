
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007ea0  08007ea0  00017ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008304  08008304  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008304  08008304  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008304  08008304  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008304  08008304  00018304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800830c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001dc  080084e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  080084e8  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158bc  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7d  00000000  00000000  00035ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00038640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8f3  00000000  00000000  0003ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a06  00000000  00000000  00055433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c11  00000000  00000000  0006ae39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100a4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00100aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e84 	.word	0x08007e84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007e84 	.word	0x08007e84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ae2:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8000ae8:	f107 0214 	add.w	r2, r7, #20
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	21d2      	movs	r1, #210	; 0xd2
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f002 f85c 	bl	8002bb4 <HAL_I2C_Master_Transmit>
 8000afc:	4603      	mov	r3, r0
 8000afe:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8000b00:	893b      	ldrh	r3, [r7, #8]
 8000b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	21d2      	movs	r1, #210	; 0xd2
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f002 f94f 	bl	8002db0 <HAL_I2C_Master_Receive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	75fb      	strb	r3, [r7, #23]
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b088      	sub	sp, #32
 8000b22:	af02      	add	r7, sp, #8
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	460b      	mov	r3, r1
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8000b2c:	7afb      	ldrb	r3, [r7, #11]
 8000b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b32:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8000b34:	7afb      	ldrb	r3, [r7, #11]
 8000b36:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8000b38:	f107 0214 	add.w	r2, r7, #20
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	21d2      	movs	r1, #210	; 0xd2
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f002 f834 	bl	8002bb4 <HAL_I2C_Master_Transmit>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 8000b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	21d2      	movs	r1, #210	; 0xd2
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f002 f927 	bl	8002db0 <HAL_I2C_Master_Receive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af02      	add	r7, sp, #8
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	460b      	mov	r3, r1
 8000b78:	70fb      	strb	r3, [r7, #3]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b84:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	733b      	strb	r3, [r7, #12]
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8000b8e:	f107 020c 	add.w	r2, r7, #12
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	21d2      	movs	r1, #210	; 0xd2
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f002 f809 	bl	8002bb4 <HAL_I2C_Master_Transmit>
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	70fb      	strb	r3, [r7, #3]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8000bba:	2230      	movs	r2, #48	; 0x30
 8000bbc:	217f      	movs	r1, #127	; 0x7f
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffd5 	bl	8000b6e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f001 f9e1 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8000bca:	220c      	movs	r2, #12
 8000bcc:	2103      	movs	r1, #3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffcd 	bl	8000b6e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f001 f9d9 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2104      	movs	r1, #4
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ffc4 	bl	8000b6e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f001 f9d0 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8000bec:	78bb      	ldrb	r3, [r7, #2]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2106      	movs	r1, #6
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffbb 	bl	8000b6e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f001 f9c7 	bl	8001f8c <HAL_Delay>
  }
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b084      	sub	sp, #16
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8000c12:	2230      	movs	r2, #48	; 0x30
 8000c14:	217f      	movs	r1, #127	; 0x7f
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa9 	bl	8000b6e <ICM_WriteOneByte>
    HAL_Delay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 f9b5 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 8000c22:	228c      	movs	r2, #140	; 0x8c
 8000c24:	2103      	movs	r1, #3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa1 	bl	8000b6e <ICM_WriteOneByte>
    HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 f9ad 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	461a      	mov	r2, r3
 8000c36:	2104      	movs	r1, #4
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff98 	bl	8000b6e <ICM_WriteOneByte>
    HAL_Delay(1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f001 f9a4 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	2106      	movs	r1, #6
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff90 	bl	8000b6e <ICM_WriteOneByte>
  	HAL_Delay(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f001 f99c 	bl	8001f8c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 8000c54:	2200      	movs	r2, #0
 8000c56:	217f      	movs	r1, #127	; 0x7f
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff88 	bl	8000b6e <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 8000c5e:	f107 030f 	add.w	r3, r7, #15
 8000c62:	461a      	mov	r2, r3
 8000c64:	213b      	movs	r1, #59	; 0x3b
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff59 	bl	8000b1e <ICM_ReadOneByte>
    HAL_Delay(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f001 f98d 	bl	8001f8c <HAL_Delay>
  	return Data;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 8000c86:	2101      	movs	r1, #1
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffbc 	bl	8000c06 <ICM_Mag_Read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 8000c92:	2111      	movs	r1, #17
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ffb6 	bl	8000c06 <ICM_Mag_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 8000c9e:	2112      	movs	r1, #18
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ffb0 	bl	8000c06 <ICM_Mag_Read>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8000caa:	7b7b      	ldrb	r3, [r7, #13]
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 8000cbc:	2113      	movs	r1, #19
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa1 	bl	8000c06 <ICM_Mag_Read>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8000cc8:	2114      	movs	r1, #20
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff9b 	bl	8000c06 <ICM_Mag_Read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	b219      	sxth	r1, r3
 8000cd8:	7c3b      	ldrb	r3, [r7, #16]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	b212      	sxth	r2, r2
 8000ce6:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 8000ce8:	2115      	movs	r1, #21
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff8b 	bl	8000c06 <ICM_Mag_Read>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 8000cf4:	2116      	movs	r1, #22
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff85 	bl	8000c06 <ICM_Mag_Read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8000d00:	7c7b      	ldrb	r3, [r7, #17]
 8000d02:	b219      	sxth	r1, r3
 8000d04:	7cbb      	ldrb	r3, [r7, #18]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	b212      	sxth	r2, r2
 8000d12:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2131      	movs	r1, #49	; 0x31
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff46 	bl	8000baa <i2c_Mag_write>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f001 f92c 	bl	8001f8c <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 8000d34:	2100      	movs	r1, #0
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f9c0 	bl	80010bc <ICM_SelectBank>
	HAL_Delay(10);
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f001 f925 	bl	8001f8c <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f9ca 	bl	80010dc <ICM_Enable_I2C>
	HAL_Delay(10);
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f001 f91f 	bl	8001f8c <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f9d0 	bl	80010f6 <ICM_SetClock>
	HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f001 f918 	bl	8001f8c <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f9da 	bl	8001116 <ICM_AccelGyroOff>
	HAL_Delay(20);
 8000d62:	2014      	movs	r0, #20
 8000d64:	f001 f912 	bl	8001f8c <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f9e1 	bl	8001130 <ICM_AccelGyroOn>
	HAL_Delay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f001 f90c 	bl	8001f8c <HAL_Delay>
	ICM_Initialize(hi2c);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f804 	bl	8000d82 <ICM_Initialize>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f995 	bl	80010bc <ICM_SelectBank>
	HAL_Delay(20);
 8000d92:	2014      	movs	r0, #20
 8000d94:	f001 f8fa 	bl	8001f8c <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000d98:	2229      	movs	r2, #41	; 0x29
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f9d4 	bl	800114a <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8000da2:	200a      	movs	r0, #10
 8000da4:	f001 f8f2 	bl	8001f8c <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8000da8:	220a      	movs	r2, #10
 8000daa:	2100      	movs	r1, #0
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fede 	bl	8000b6e <ICM_WriteOneByte>
	HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f001 f8ea 	bl	8001f8c <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8000db8:	2215      	movs	r2, #21
 8000dba:	2114      	movs	r1, #20
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fed6 	bl	8000b6e <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fed1 	bl	8000b6e <ICM_WriteOneByte>
	HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f001 f8dd 	bl	8001f8c <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	2111      	movs	r1, #17
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fec9 	bl	8000b6e <ICM_WriteOneByte>
	HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 f8d5 	bl	8001f8c <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 8000de2:	2120      	movs	r1, #32
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f969 	bl	80010bc <ICM_SelectBank>
	HAL_Delay(20);
 8000dea:	2014      	movs	r0, #20
 8000dec:	f001 f8ce 	bl	8001f8c <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 8000df0:	2200      	movs	r2, #0
 8000df2:	217f      	movs	r1, #127	; 0x7f
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff feba 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000dfa:	2230      	movs	r2, #48	; 0x30
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff feb5 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 8000e04:	2220      	movs	r2, #32
 8000e06:	2103      	movs	r1, #3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff feb0 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	217f      	movs	r1, #127	; 0x7f
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff feab 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8000e18:	224d      	movs	r2, #77	; 0x4d
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fea6 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8000e22:	2201      	movs	r2, #1
 8000e24:	2102      	movs	r1, #2
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fea1 	bl	8000b6e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8000e2c:	2281      	movs	r2, #129	; 0x81
 8000e2e:	2105      	movs	r1, #5
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fe9c 	bl	8000b6e <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 8000e36:	2201      	movs	r2, #1
 8000e38:	2132      	movs	r1, #50	; 0x32
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff feb5 	bl	8000baa <i2c_Mag_write>
	HAL_Delay(1000);
 8000e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e44:	f001 f8a2 	bl	8001f8c <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8000e48:	2202      	movs	r2, #2
 8000e4a:	2131      	movs	r1, #49	; 0x31
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff feac 	bl	8000baa <i2c_Mag_write>

	return 1337;
 8000e52:	f240 5339 	movw	r3, #1337	; 0x539
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 8000e68:	f107 020c 	add.w	r2, r7, #12
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	212d      	movs	r1, #45	; 0x2d
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fe29 	bl	8000ac8 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8000e76:	7b3b      	ldrb	r3, [r7, #12]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <ICM_ReadAccelGyro+0x98>)
 8000e88:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <ICM_ReadAccelGyro+0x98>)
 8000e9c:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8000e9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	7c7b      	ldrb	r3, [r7, #17]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <ICM_ReadAccelGyro+0x98>)
 8000eb0:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8000eb2:	7cbb      	ldrb	r3, [r7, #18]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <ICM_ReadAccelGyro+0x9c>)
 8000ec4:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8000ec6:	7d3b      	ldrb	r3, [r7, #20]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	7d7b      	ldrb	r3, [r7, #21]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <ICM_ReadAccelGyro+0x9c>)
 8000ed8:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <ICM_ReadAccelGyro+0x9c>)
 8000eec:	809a      	strh	r2, [r3, #4]
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000214 	.word	0x20000214
 8000efc:	2000021c 	.word	0x2000021c

08000f00 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <ICM_CorrectAccelGyro+0x1a0>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da00      	bge.n	8000f1e <ICM_CorrectAccelGyro+0x1e>
 8000f1c:	330f      	adds	r3, #15
 8000f1e:	111b      	asrs	r3, r3, #4
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fa6c 	bl	8000404 <__aeabi_i2d>
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <ICM_CorrectAccelGyro+0x1a4>)
 8000f32:	f7ff fbfb 	bl	800072c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fda3 	bl	8000a88 <__aeabi_d2uiz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b58      	ldr	r3, [pc, #352]	; (80010a8 <ICM_CorrectAccelGyro+0x1a8>)
 8000f48:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <ICM_CorrectAccelGyro+0x1a0>)
 8000f54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da00      	bge.n	8000f5e <ICM_CorrectAccelGyro+0x5e>
 8000f5c:	330f      	adds	r3, #15
 8000f5e:	111b      	asrs	r3, r3, #4
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa4c 	bl	8000404 <__aeabi_i2d>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <ICM_CorrectAccelGyro+0x1a4>)
 8000f72:	f7ff fbdb 	bl	800072c <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fd83 	bl	8000a88 <__aeabi_d2uiz>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <ICM_CorrectAccelGyro+0x1a8>)
 8000f88:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <ICM_CorrectAccelGyro+0x1a0>)
 8000f94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da00      	bge.n	8000f9e <ICM_CorrectAccelGyro+0x9e>
 8000f9c:	330f      	adds	r3, #15
 8000f9e:	111b      	asrs	r3, r3, #4
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa2c 	bl	8000404 <__aeabi_i2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <ICM_CorrectAccelGyro+0x1a4>)
 8000fb2:	f7ff fbbb 	bl	800072c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd63 	bl	8000a88 <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <ICM_CorrectAccelGyro+0x1a8>)
 8000fc8:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <ICM_CorrectAccelGyro+0x1ac>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa13 	bl	8000404 <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <ICM_CorrectAccelGyro+0x1b0>)
 8000fe4:	f7ff fa78 	bl	80004d8 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <ICM_CorrectAccelGyro+0x1b4>)
 8000ff6:	f7ff fb99 	bl	800072c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd41 	bl	8000a88 <__aeabi_d2uiz>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <ICM_CorrectAccelGyro+0x1b8>)
 800100c:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <ICM_CorrectAccelGyro+0x1ac>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9f1 	bl	8000404 <__aeabi_i2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <ICM_CorrectAccelGyro+0x1b0>)
 8001028:	f7ff fa56 	bl	80004d8 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <ICM_CorrectAccelGyro+0x1b4>)
 800103a:	f7ff fb77 	bl	800072c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd1f 	bl	8000a88 <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <ICM_CorrectAccelGyro+0x1b8>)
 8001050:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <ICM_CorrectAccelGyro+0x1ac>)
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f9cf 	bl	8000404 <__aeabi_i2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <ICM_CorrectAccelGyro+0x1b0>)
 800106c:	f7ff fa34 	bl	80004d8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <ICM_CorrectAccelGyro+0x1b4>)
 800107e:	f7ff fb55 	bl	800072c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fcfd 	bl	8000a88 <__aeabi_d2uiz>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <ICM_CorrectAccelGyro+0x1b8>)
 8001094:	809a      	strh	r2, [r3, #4]
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000022c 	.word	0x2000022c
 80010a4:	40d00000 	.word	0x40d00000
 80010a8:	2000020c 	.word	0x2000020c
 80010ac:	20000234 	.word	0x20000234
 80010b0:	406f4000 	.word	0x406f4000
 80010b4:	40fffb80 	.word	0x40fffb80
 80010b8:	20000204 	.word	0x20000204

080010bc <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	461a      	mov	r2, r3
 80010cc:	217f      	movs	r1, #127	; 0x7f
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fd4d 	bl	8000b6e <ICM_WriteOneByte>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 80010e4:	2220      	movs	r2, #32
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fd40 	bl	8000b6e <ICM_WriteOneByte>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	461a      	mov	r2, r3
 8001106:	2106      	movs	r1, #6
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fd30 	bl	8000b6e <ICM_WriteOneByte>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 800111e:	223f      	movs	r2, #63	; 0x3f
 8001120:	2107      	movs	r1, #7
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fd23 	bl	8000b6e <ICM_WriteOneByte>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8001138:	2200      	movs	r2, #0
 800113a:	2107      	movs	r1, #7
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fd16 	bl	8000b6e <ICM_WriteOneByte>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	70fb      	strb	r3, [r7, #3]
 8001156:	4613      	mov	r3, r2
 8001158:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	4313      	orrs	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fd01 	bl	8000b6e <ICM_WriteOneByte>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e029      	b.n	80011d6 <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fe6c 	bl	8000e60 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 8001188:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <ICM20948_Calibrate+0x18c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <ICM20948_Calibrate+0x190>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <ICM20948_Calibrate+0x18c>)
 800119c:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <ICM20948_Calibrate+0x190>)
 80011a8:	885b      	ldrh	r3, [r3, #2]
 80011aa:	4413      	add	r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b53      	ldr	r3, [pc, #332]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011b2:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <ICM20948_Calibrate+0x190>)
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b4e      	ldr	r3, [pc, #312]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011c8:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f000 fede 	bl	8001f8c <HAL_Delay>
	for(int i=0; i<50; i++){
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b31      	cmp	r3, #49	; 0x31
 80011da:	ddd2      	ble.n	8001182 <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	4a49      	ldr	r2, [pc, #292]	; (8001308 <ICM20948_Calibrate+0x194>)
 80011e4:	fb82 1203 	smull	r1, r2, r2, r3
 80011e8:	1112      	asrs	r2, r2, #4
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011f2:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 80011f4:	4b42      	ldr	r3, [pc, #264]	; (8001300 <ICM20948_Calibrate+0x18c>)
 80011f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011fa:	4a43      	ldr	r2, [pc, #268]	; (8001308 <ICM20948_Calibrate+0x194>)
 80011fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001200:	1112      	asrs	r2, r2, #4
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <ICM20948_Calibrate+0x18c>)
 800120a:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 800120c:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <ICM20948_Calibrate+0x18c>)
 800120e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001212:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <ICM20948_Calibrate+0x194>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1112      	asrs	r2, r2, #4
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <ICM20948_Calibrate+0x18c>)
 8001222:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <ICM20948_Calibrate+0x18c>)
 8001226:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8ea 	bl	8000404 <__aeabi_i2d>
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	4b35      	ldr	r3, [pc, #212]	; (800130c <ICM20948_Calibrate+0x198>)
 8001236:	f7fe ff97 	bl	8000168 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fbf9 	bl	8000a38 <__aeabi_d2iz>
 8001246:	4603      	mov	r3, r0
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <ICM20948_Calibrate+0x18c>)
 800124c:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e029      	b.n	80012a8 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe03 	bl	8000e60 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <ICM20948_Calibrate+0x19c>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <ICM20948_Calibrate+0x1a0>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <ICM20948_Calibrate+0x19c>)
 800126e:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <ICM20948_Calibrate+0x19c>)
 8001272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <ICM20948_Calibrate+0x1a0>)
 800127a:	885b      	ldrh	r3, [r3, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21a      	sxth	r2, r3
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <ICM20948_Calibrate+0x19c>)
 8001284:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <ICM20948_Calibrate+0x19c>)
 8001288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <ICM20948_Calibrate+0x1a0>)
 8001290:	889b      	ldrh	r3, [r3, #4]
 8001292:	4413      	add	r3, r2
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <ICM20948_Calibrate+0x19c>)
 800129a:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f000 fe75 	bl	8001f8c <HAL_Delay>
	for(int i=0; i<50; i++){
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b31      	cmp	r3, #49	; 0x31
 80012ac:	ddd2      	ble.n	8001254 <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <ICM20948_Calibrate+0x194>)
 80012b6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ba:	1112      	asrs	r2, r2, #4
 80012bc:	17db      	asrs	r3, r3, #31
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012c4:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <ICM20948_Calibrate+0x194>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1112      	asrs	r2, r2, #4
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012dc:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <ICM20948_Calibrate+0x194>)
 80012e6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ea:	1112      	asrs	r2, r2, #4
 80012ec:	17db      	asrs	r3, r3, #31
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <ICM20948_Calibrate+0x19c>)
 80012f4:	809a      	strh	r2, [r3, #4]
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000022c 	.word	0x2000022c
 8001304:	20000214 	.word	0x20000214
 8001308:	51eb851f 	.word	0x51eb851f
 800130c:	40b00000 	.word	0x40b00000
 8001310:	20000234 	.word	0x20000234
 8001314:	2000021c 	.word	0x2000021c

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800131c:	b0a4      	sub	sp, #144	; 0x90
 800131e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fdd2 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f884 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f000 fa52 	bl	80017d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800132c:	f000 fa26 	bl	800177c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001330:	f000 f912 	bl	8001558 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001334:	f000 f93e 	bl	80015b4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001338:	f000 f8d0 	bl	80014dc <MX_ADC1_Init>
  MX_SPI2_Init();
 800133c:	f000 f968 	bl	8001610 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001340:	f000 f99c 	bl	800167c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8001344:	2100      	movs	r1, #0
 8001346:	4834      	ldr	r0, [pc, #208]	; (8001418 <main+0x100>)
 8001348:	f7ff feb8 	bl	80010bc <ICM_SelectBank>
  HAL_Delay(10);
 800134c:	200a      	movs	r0, #10
 800134e:	f000 fe1d 	bl	8001f8c <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 8001352:	4831      	ldr	r0, [pc, #196]	; (8001418 <main+0x100>)
 8001354:	f7ff fce7 	bl	8000d26 <ICM_PowerOn>
  HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f000 fe17 	bl	8001f8c <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 800135e:	482e      	ldr	r0, [pc, #184]	; (8001418 <main+0x100>)
 8001360:	f7ff ff08 	bl	8001174 <ICM20948_Calibrate>
  HAL_Delay(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f000 fe11 	bl	8001f8c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136e:	482b      	ldr	r0, [pc, #172]	; (800141c <main+0x104>)
 8001370:	f001 fac2 	bl	80028f8 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 8001374:	2019      	movs	r0, #25
 8001376:	f000 fe09 	bl	8001f8c <HAL_Delay>
//	  sprintf(MSG, "should be 0xEA: %d\r\n", who_am_i);
//	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
//	  HAL_Delay(10);

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800137a:	2100      	movs	r1, #0
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <main+0x100>)
 800137e:	f7ff fe9d 	bl	80010bc <ICM_SelectBank>
	  HAL_Delay(10);
 8001382:	200a      	movs	r0, #10
 8001384:	f000 fe02 	bl	8001f8c <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 8001388:	4823      	ldr	r0, [pc, #140]	; (8001418 <main+0x100>)
 800138a:	f7ff fd69 	bl	8000e60 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <main+0x100>)
 8001394:	f7ff fc72 	bl	8000c7c <ICM_ReadMag>

	  // Print raw axis data values to screen
	  sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u)\r\n(Gx: %u | Gy: %u | Gz: %u)\r\n(Mx: %i | My: %i | Mz: %i)\r\n",
			accel_data[0], accel_data[1], accel_data[2],
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <main+0x108>)
 800139a:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 800139c:	469c      	mov	ip, r3
			accel_data[0], accel_data[1], accel_data[2],
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <main+0x108>)
 80013a0:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 80013a2:	469e      	mov	lr, r3
			accel_data[0], accel_data[1], accel_data[2],
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <main+0x108>)
 80013a6:	889b      	ldrh	r3, [r3, #4]
	  sprintf(uart_buffer,
 80013a8:	461a      	mov	r2, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <main+0x10c>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 80013ae:	4619      	mov	r1, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <main+0x10c>)
 80013b2:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 80013b4:	461c      	mov	r4, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <main+0x10c>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
			mag_data[0], mag_data[1], mag_data[2]);
 80013ba:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
	  sprintf(uart_buffer,
 80013be:	4605      	mov	r5, r0
			mag_data[0], mag_data[1], mag_data[2]);
 80013c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
	  sprintf(uart_buffer,
 80013c4:	4606      	mov	r6, r0
			mag_data[0], mag_data[1], mag_data[2]);
 80013c6:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
	  sprintf(uart_buffer,
 80013ca:	f107 080c 	add.w	r8, r7, #12
 80013ce:	9006      	str	r0, [sp, #24]
 80013d0:	9605      	str	r6, [sp, #20]
 80013d2:	9504      	str	r5, [sp, #16]
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	9402      	str	r4, [sp, #8]
 80013d8:	9101      	str	r1, [sp, #4]
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	4673      	mov	r3, lr
 80013de:	4662      	mov	r2, ip
 80013e0:	4911      	ldr	r1, [pc, #68]	; (8001428 <main+0x110>)
 80013e2:	4640      	mov	r0, r8
 80013e4:	f004 fb16 	bl	8005a14 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), 1000);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe feaf 	bl	8000150 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 010c 	add.w	r1, r7, #12
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <main+0x114>)
 8001400:	f003 fd0b 	bl	8004e1a <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001404:	200a      	movs	r0, #10
 8001406:	f000 fdc1 	bl	8001f8c <HAL_Delay>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <main+0x10c>)
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <main+0x108>)
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <main+0x100>)
 8001410:	f7ff fd76 	bl	8000f00 <ICM_CorrectAccelGyro>
  {
 8001414:	e7a9      	b.n	800136a <main+0x52>
 8001416:	bf00      	nop
 8001418:	200002e8 	.word	0x200002e8
 800141c:	40011000 	.word	0x40011000
 8001420:	20000214 	.word	0x20000214
 8001424:	2000021c 	.word	0x2000021c
 8001428:	08007ea0 	.word	0x08007ea0
 800142c:	200003b4 	.word	0x200003b4

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fe80 	bl	8005144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001470:	2300      	movs	r3, #0
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fa23 	bl	80038c8 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001488:	f000 fa38 	bl	80018fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fc8d 	bl	8003dc8 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80014b4:	f000 fa22 	bl	80018fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b8:	2302      	movs	r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fe1a 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014ce:	f000 fa15 	bl	80018fc <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_ADC1_Init+0x74>)
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <MX_ADC1_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_ADC1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_ADC1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_ADC1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_ADC1_Init+0x74>)
 8001506:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800150a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_ADC1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_ADC1_Init+0x74>)
 8001514:	2201      	movs	r2, #1
 8001516:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_ADC1_Init+0x74>)
 800151a:	f000 fd5b 	bl	8001fd4 <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001524:	f000 f9ea 	bl	80018fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001528:	2304      	movs	r3, #4
 800152a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152c:	2301      	movs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_ADC1_Init+0x74>)
 800153a:	f000 fe23 	bl	8002184 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001544:	f000 f9da 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000033c 	.word	0x2000033c
 8001554:	40012400 	.word	0x40012400

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f001 f9c9 	bl	800292c <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 f9ac 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000294 	.word	0x20000294
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C2_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_I2C2_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C2_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_I2C2_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C2_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_I2C2_Init+0x50>)
 80015cc:	22d2      	movs	r2, #210	; 0xd2
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_I2C2_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_I2C2_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_I2C2_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_I2C2_Init+0x50>)
 80015f2:	f001 f99b 	bl	800292c <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f000 f97e 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200002e8 	.word	0x200002e8
 8001608:	40005800 	.word	0x40005800
 800160c:	00061a80 	.word	0x00061a80

08001610 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_SPI2_Init+0x64>)
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <MX_SPI2_Init+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_SPI2_Init+0x64>)
 800161c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_SPI2_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_SPI2_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_SPI2_Init+0x64>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_SPI2_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_SPI2_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_SPI2_Init+0x64>)
 800165c:	220a      	movs	r2, #10
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_SPI2_Init+0x64>)
 8001662:	f002 fe01 	bl	8004268 <HAL_SPI_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800166c:	f000 f946 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000023c 	.word	0x2000023c
 8001678:	40003800 	.word	0x40003800

0800167c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016d6:	f002 fe4b 	bl	8004370 <HAL_TIM_Base_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016e0:	f000 f90c 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4821      	ldr	r0, [pc, #132]	; (8001778 <MX_TIM2_Init+0xfc>)
 80016f2:	f002 ffa3 	bl	800463c <HAL_TIM_ConfigClockSource>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016fc:	f000 f8fe 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001700:	481d      	ldr	r0, [pc, #116]	; (8001778 <MX_TIM2_Init+0xfc>)
 8001702:	f002 fe84 	bl	800440e <HAL_TIM_PWM_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800170c:	f000 f8f6 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4619      	mov	r1, r3
 800171e:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_TIM2_Init+0xfc>)
 8001720:	f003 fad0 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800172a:	f000 f8e7 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172e:	2360      	movs	r3, #96	; 0x60
 8001730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_TIM2_Init+0xfc>)
 8001746:	f002 febb 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001750:	f000 f8d4 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2204      	movs	r2, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM2_Init+0xfc>)
 800175c:	f002 feb0 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001766:	f000 f8c9 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM2_Init+0xfc>)
 800176c:	f000 fa1e 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	; 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000036c 	.word	0x2000036c

0800177c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <MX_USART2_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017b4:	f003 fae4 	bl	8004d80 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017be:	f000 f89d 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200003b4 	.word	0x200003b4
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <MX_GPIO_Init+0x118>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <MX_GPIO_Init+0x118>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <MX_GPIO_Init+0x118>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <MX_GPIO_Init+0x118>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a39      	ldr	r2, [pc, #228]	; (80018e8 <MX_GPIO_Init+0x118>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <MX_GPIO_Init+0x118>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <MX_GPIO_Init+0x118>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <MX_GPIO_Init+0x118>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <MX_GPIO_Init+0x118>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <MX_GPIO_Init+0x118>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <MX_GPIO_Init+0x118>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <MX_GPIO_Init+0x118>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184a:	4828      	ldr	r0, [pc, #160]	; (80018ec <MX_GPIO_Init+0x11c>)
 800184c:	f001 f83c 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2158      	movs	r1, #88	; 0x58
 8001854:	4826      	ldr	r0, [pc, #152]	; (80018f0 <MX_GPIO_Init+0x120>)
 8001856:	f001 f837 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2302      	movs	r3, #2
 800186a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <MX_GPIO_Init+0x11c>)
 8001874:	f000 fea4 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin FRONT_TRIG_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|FRONT_TRIG_Pin|FRONT_ECHO_Pin;
 8001878:	23e0      	movs	r3, #224	; 0xe0
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4619      	mov	r1, r3
 800188a:	481a      	ldr	r0, [pc, #104]	; (80018f4 <MX_GPIO_Init+0x124>)
 800188c:	f000 fe98 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|SIDE_TRIG_Pin;
 8001890:	2303      	movs	r3, #3
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	4813      	ldr	r0, [pc, #76]	; (80018f0 <MX_GPIO_Init+0x120>)
 80018a4:	f000 fe8c 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 80018a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_GPIO_Init+0x128>)
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_GPIO_Init+0x124>)
 80018be:	f000 fe7f 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80018c2:	2358      	movs	r3, #88	; 0x58
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_GPIO_Init+0x120>)
 80018da:	f000 fe71 	bl	80025c0 <HAL_GPIO_Init>

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	40010800 	.word	0x40010800
 80018f8:	10110000 	.word	0x10110000

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_MspInit+0x5c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_MspInit+0x5c>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x5c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x5c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x60>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_MspInit+0x60>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_ADC_MspInit+0x6c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d121      	bne.n	80019d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_ADC_MspInit+0x70>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_ADC_MspInit+0x70>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_ADC_MspInit+0x70>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_ADC_MspInit+0x70>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_ADC_MspInit+0x70>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_ADC_MspInit+0x70>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 80019bc:	2310      	movs	r3, #16
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c0:	2303      	movs	r3, #3
 80019c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_ADC_MspInit+0x74>)
 80019cc:	f000 fdf8 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40012400 	.word	0x40012400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_I2C_MspInit+0xe4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d133      	bne.n	8001a6c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8001a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4827      	ldr	r0, [pc, #156]	; (8001ad0 <HAL_I2C_MspInit+0xec>)
 8001a32:	f000 fdc5 	bl	80025c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_I2C_MspInit+0xf0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_I2C_MspInit+0xf0>)
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a6a:	e029      	b.n	8001ac0 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_I2C_MspInit+0xf4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d124      	bne.n	8001ac0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8001a8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <HAL_I2C_MspInit+0xec>)
 8001aa4:	f000 fd8c 	bl	80025c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab2:	61d3      	str	r3, [r2, #28]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_I2C_MspInit+0xe8>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	; 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40005800 	.word	0x40005800

08001adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_SPI_MspInit+0x8c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d131      	bne.n	8001b60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b06:	61d3      	str	r3, [r2, #28]
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_SPI_MspInit+0x90>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <HAL_SPI_MspInit+0x94>)
 8001b42:	f000 fd3d 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_SPI_MspInit+0x94>)
 8001b5c:	f000 fd30 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b84:	d10b      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_TIM_Base_MspInit+0x34>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_TIM_Base_MspInit+0x34>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_TIM_Base_MspInit+0x34>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d117      	bne.n	8001bfc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_TIM_MspPostInit+0x58>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_TIM_MspPostInit+0x58>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_MspPostInit+0x58>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8001be4:	2303      	movs	r3, #3
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <HAL_TIM_MspPostInit+0x5c>)
 8001bf8:	f000 fce2 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800

08001c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_UART_MspInit+0x88>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d12f      	bne.n	8001c8c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_MspInit+0x8c>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_UART_MspInit+0x90>)
 8001c70:	f000 fca6 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c74:	2308      	movs	r3, #8
 8001c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4619      	mov	r1, r3
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_UART_MspInit+0x90>)
 8001c88:	f000 fc9a 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce6:	f000 f935 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
	return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d06:	f003 f9f3 	bl	80050f0 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d2e:	e7fe      	b.n	8001d2e <_exit+0x12>

08001d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
	}

return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf1      	blt.n	8001d7c <_write+0x12>
	}
	return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_close>:

int _close(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc8:	605a      	str	r2, [r3, #4]
	return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <_isatty>:

int _isatty(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
	return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f003 f95c 	bl	80050f0 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20005000 	.word	0x20005000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	200001f8 	.word	0x200001f8
 8001e6c:	20000410 	.word	0x20000410

08001e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e7e:	e003      	b.n	8001e88 <LoopCopyDataInit>

08001e80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e86:	3104      	adds	r1, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e88:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e90:	d3f6      	bcc.n	8001e80 <CopyDataInit>
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e94:	e002      	b.n	8001e9c <LoopFillZerobss>

08001e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e98:	f842 3b04 	str.w	r3, [r2], #4

08001e9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ea0:	d3f9      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffe5 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f003 f929 	bl	80050fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff fa35 	bl	8001318 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r3, =_sidata
 8001eb0:	0800830c 	.word	0x0800830c
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001eb8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001ebc:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001ec0:	2000040c 	.word	0x2000040c

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 fb3d 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fd10 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fb47 	bl	80025a6 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f30:	f000 fb1d 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000008 	.word	0x20000008
 8001f74:	200003f8 	.word	0x200003f8

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	200003f8 	.word	0x200003f8

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffe0 	bl	8001f78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0be      	b.n	8002174 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fcaa 	bl	800196c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9ab 	bl	8002374 <ADC_ConversionStop_Disable>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 8099 	bne.w	8002162 <HAL_ADC_Init+0x18e>
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002054:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800205c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4313      	orrs	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0xa2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_ADC_Init+0xa8>
 8002076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207a:	e000      	b.n	800207e <HAL_ADC_Init+0xaa>
 800207c:	2300      	movs	r3, #0
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7d1b      	ldrb	r3, [r3, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d119      	bne.n	80020c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	3b01      	subs	r3, #1
 800209a:	035a      	lsls	r2, r3, #13
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e00b      	b.n	80020c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_ADC_Init+0x1a8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0x126>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	430a      	orrs	r2, r1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_ADC_Init+0x1ac>)
 8002120:	4013      	ands	r3, r2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d10b      	bne.n	8002140 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800213e:	e018      	b.n	8002172 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f023 0312 	bic.w	r3, r3, #18
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002160:	e007      	b.n	8002172 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	ffe1f7fd 	.word	0xffe1f7fd
 8002180:	ff1f0efe 	.word	0xff1f0efe

08002184 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x20>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0dc      	b.n	800235e <HAL_ADC_ConfigChannel+0x1da>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d81c      	bhi.n	80021ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b05      	subs	r3, #5
 80021c6:	221f      	movs	r2, #31
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4019      	ands	r1, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	3b05      	subs	r3, #5
 80021e0:	fa00 f203 	lsl.w	r2, r0, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
 80021ec:	e03c      	b.n	8002268 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d81c      	bhi.n	8002230 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b23      	subs	r3, #35	; 0x23
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	4019      	ands	r1, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b23      	subs	r3, #35	; 0x23
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
 800222e:	e01b      	b.n	8002268 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b41      	subs	r3, #65	; 0x41
 8002242:	221f      	movs	r2, #31
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b41      	subs	r3, #65	; 0x41
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b09      	cmp	r3, #9
 800226e:	d91c      	bls.n	80022aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	3b1e      	subs	r3, #30
 8002282:	2207      	movs	r2, #7
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	4019      	ands	r1, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6898      	ldr	r0, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	3b1e      	subs	r3, #30
 800229c:	fa00 f203 	lsl.w	r2, r0, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	e019      	b.n	80022de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6919      	ldr	r1, [r3, #16]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	2207      	movs	r2, #7
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4019      	ands	r1, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6898      	ldr	r0, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d003      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ea:	2b11      	cmp	r3, #17
 80022ec:	d132      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_ADC_ConfigChannel+0x1e4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d125      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d126      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002314:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d11a      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_ADC_ConfigChannel+0x1e8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_ADC_ConfigChannel+0x1ec>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9a      	lsrs	r2, r3, #18
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002334:	e002      	b.n	800233c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3b01      	subs	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x1b2>
 8002342:	e007      	b.n	8002354 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40012400 	.word	0x40012400
 800236c:	20000000 	.word	0x20000000
 8002370:	431bde83 	.word	0x431bde83

08002374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d12e      	bne.n	80023ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800239e:	f7ff fdeb 	bl	8001f78 <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a4:	e01b      	b.n	80023de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023a6:	f7ff fde7 	bl	8001f78 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d914      	bls.n	80023de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d10d      	bne.n	80023de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e007      	b.n	80023ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d0dc      	beq.n	80023a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	; (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	; (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f7ff ff90 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff49 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff5e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff90 	bl	80024b0 <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5f 	bl	800245c <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffb0 	bl	8002514 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b08b      	sub	sp, #44	; 0x2c
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	e169      	b.n	80028a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d4:	2201      	movs	r2, #1
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 8158 	bne.w	80028a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a9a      	ldr	r2, [pc, #616]	; (8002860 <HAL_GPIO_Init+0x2a0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d05e      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
 80025fc:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_GPIO_Init+0x2a0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d875      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 8002602:	4a98      	ldr	r2, [pc, #608]	; (8002864 <HAL_GPIO_Init+0x2a4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d058      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
 8002608:	4a96      	ldr	r2, [pc, #600]	; (8002864 <HAL_GPIO_Init+0x2a4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d86f      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 800260e:	4a96      	ldr	r2, [pc, #600]	; (8002868 <HAL_GPIO_Init+0x2a8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d052      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
 8002614:	4a94      	ldr	r2, [pc, #592]	; (8002868 <HAL_GPIO_Init+0x2a8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d869      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 800261a:	4a94      	ldr	r2, [pc, #592]	; (800286c <HAL_GPIO_Init+0x2ac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d04c      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
 8002620:	4a92      	ldr	r2, [pc, #584]	; (800286c <HAL_GPIO_Init+0x2ac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d863      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 8002626:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_GPIO_Init+0x2b0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d046      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
 800262c:	4a90      	ldr	r2, [pc, #576]	; (8002870 <HAL_GPIO_Init+0x2b0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d85d      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 8002632:	2b12      	cmp	r3, #18
 8002634:	d82a      	bhi.n	800268c <HAL_GPIO_Init+0xcc>
 8002636:	2b12      	cmp	r3, #18
 8002638:	d859      	bhi.n	80026ee <HAL_GPIO_Init+0x12e>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_GPIO_Init+0x80>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026bb 	.word	0x080026bb
 8002644:	08002695 	.word	0x08002695
 8002648:	080026a7 	.word	0x080026a7
 800264c:	080026e9 	.word	0x080026e9
 8002650:	080026ef 	.word	0x080026ef
 8002654:	080026ef 	.word	0x080026ef
 8002658:	080026ef 	.word	0x080026ef
 800265c:	080026ef 	.word	0x080026ef
 8002660:	080026ef 	.word	0x080026ef
 8002664:	080026ef 	.word	0x080026ef
 8002668:	080026ef 	.word	0x080026ef
 800266c:	080026ef 	.word	0x080026ef
 8002670:	080026ef 	.word	0x080026ef
 8002674:	080026ef 	.word	0x080026ef
 8002678:	080026ef 	.word	0x080026ef
 800267c:	080026ef 	.word	0x080026ef
 8002680:	080026ef 	.word	0x080026ef
 8002684:	0800269d 	.word	0x0800269d
 8002688:	080026b1 	.word	0x080026b1
 800268c:	4a79      	ldr	r2, [pc, #484]	; (8002874 <HAL_GPIO_Init+0x2b4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002692:	e02c      	b.n	80026ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	623b      	str	r3, [r7, #32]
          break;
 800269a:	e029      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	3304      	adds	r3, #4
 80026a2:	623b      	str	r3, [r7, #32]
          break;
 80026a4:	e024      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	3308      	adds	r3, #8
 80026ac:	623b      	str	r3, [r7, #32]
          break;
 80026ae:	e01f      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	330c      	adds	r3, #12
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	e01a      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c2:	2304      	movs	r3, #4
 80026c4:	623b      	str	r3, [r7, #32]
          break;
 80026c6:	e013      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d0:	2308      	movs	r3, #8
 80026d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	611a      	str	r2, [r3, #16]
          break;
 80026da:	e009      	b.n	80026f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026dc:	2308      	movs	r3, #8
 80026de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	615a      	str	r2, [r3, #20]
          break;
 80026e6:	e003      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
          break;
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x130>
          break;
 80026ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d801      	bhi.n	80026fa <HAL_GPIO_Init+0x13a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	e001      	b.n	80026fe <HAL_GPIO_Init+0x13e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d802      	bhi.n	800270c <HAL_GPIO_Init+0x14c>
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	e002      	b.n	8002712 <HAL_GPIO_Init+0x152>
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	3b08      	subs	r3, #8
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	210f      	movs	r1, #15
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	431a      	orrs	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80b1 	beq.w	80028a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002740:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_GPIO_Init+0x2b8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002758:	4a48      	ldr	r2, [pc, #288]	; (800287c <HAL_GPIO_Init+0x2bc>)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a40      	ldr	r2, [pc, #256]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_GPIO_Init+0x1ec>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3f      	ldr	r2, [pc, #252]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00d      	beq.n	80027a8 <HAL_GPIO_Init+0x1e8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a3e      	ldr	r2, [pc, #248]	; (8002888 <HAL_GPIO_Init+0x2c8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3d      	ldr	r2, [pc, #244]	; (800288c <HAL_GPIO_Init+0x2cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_GPIO_Init+0x1e0>
 800279c:	2303      	movs	r3, #3
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a0:	2304      	movs	r3, #4
 80027a2:	e004      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_GPIO_Init+0x1ee>
 80027ac:	2300      	movs	r3, #0
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	4093      	lsls	r3, r2
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027be:	492f      	ldr	r1, [pc, #188]	; (800287c <HAL_GPIO_Init+0x2bc>)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	492c      	ldr	r1, [pc, #176]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4928      	ldr	r1, [pc, #160]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	491e      	ldr	r1, [pc, #120]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4918      	ldr	r1, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	43db      	mvns	r3, r3
 800283e:	4914      	ldr	r1, [pc, #80]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002840:	4013      	ands	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d021      	beq.n	8002894 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	490e      	ldr	r1, [pc, #56]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e021      	b.n	80028a2 <HAL_GPIO_Init+0x2e2>
 800285e:	bf00      	nop
 8002860:	10320000 	.word	0x10320000
 8002864:	10310000 	.word	0x10310000
 8002868:	10220000 	.word	0x10220000
 800286c:	10210000 	.word	0x10210000
 8002870:	10120000 	.word	0x10120000
 8002874:	10110000 	.word	0x10110000
 8002878:	40021000 	.word	0x40021000
 800287c:	40010000 	.word	0x40010000
 8002880:	40010800 	.word	0x40010800
 8002884:	40010c00 	.word	0x40010c00
 8002888:	40011000 	.word	0x40011000
 800288c:	40011400 	.word	0x40011400
 8002890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_GPIO_Init+0x304>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	43db      	mvns	r3, r3
 800289c:	4909      	ldr	r1, [pc, #36]	; (80028c4 <HAL_GPIO_Init+0x304>)
 800289e:	4013      	ands	r3, r2
 80028a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3301      	adds	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f47f ae8e 	bne.w	80025d4 <HAL_GPIO_Init+0x14>
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	372c      	adds	r7, #44	; 0x2c
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	43d9      	mvns	r1, r3
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	400b      	ands	r3, r1
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	611a      	str	r2, [r3, #16]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e12b      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff f846 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	; 0x24
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800297e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800298e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002990:	f001 fb6e 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a81      	ldr	r2, [pc, #516]	; (8002ba0 <HAL_I2C_Init+0x274>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d807      	bhi.n	80029b0 <HAL_I2C_Init+0x84>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a80      	ldr	r2, [pc, #512]	; (8002ba4 <HAL_I2C_Init+0x278>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e006      	b.n	80029be <HAL_I2C_Init+0x92>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a7d      	ldr	r2, [pc, #500]	; (8002ba8 <HAL_I2C_Init+0x27c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0e7      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a78      	ldr	r2, [pc, #480]	; (8002bac <HAL_I2C_Init+0x280>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a6a      	ldr	r2, [pc, #424]	; (8002ba0 <HAL_I2C_Init+0x274>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d802      	bhi.n	8002a00 <HAL_I2C_Init+0xd4>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	e009      	b.n	8002a14 <HAL_I2C_Init+0xe8>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <HAL_I2C_Init+0x284>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	3301      	adds	r3, #1
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	495c      	ldr	r1, [pc, #368]	; (8002ba0 <HAL_I2C_Init+0x274>)
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d819      	bhi.n	8002a68 <HAL_I2C_Init+0x13c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e59      	subs	r1, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a48:	400b      	ands	r3, r1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_I2C_Init+0x138>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e59      	subs	r1, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	e051      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e04f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <HAL_I2C_Init+0x168>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e012      	b.n	8002aba <HAL_I2C_Init+0x18e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Init+0x196>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e022      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_I2C_Init+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e58      	subs	r0, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	440b      	add	r3, r1
 8002ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	e00f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6809      	ldr	r1, [r1, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6911      	ldr	r1, [r2, #16]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	000186a0 	.word	0x000186a0
 8002ba4:	001e847f 	.word	0x001e847f
 8002ba8:	003d08ff 	.word	0x003d08ff
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	817b      	strh	r3, [r7, #10]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff f9d6 	bl	8001f78 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	f040 80e0 	bne.w	8002d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2319      	movs	r3, #25
 8002be2:	2201      	movs	r2, #1
 8002be4:	4970      	ldr	r1, [pc, #448]	; (8002da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fc92 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e0d3      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2C_Master_Transmit+0x50>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0cc      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d007      	beq.n	8002c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2210      	movs	r2, #16
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	893a      	ldrh	r2, [r7, #8]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_I2C_Master_Transmit+0x1f8>)
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6a3a      	ldr	r2, [r7, #32]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fafc 	bl	8003270 <I2C_MasterRequestWrite>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e08d      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c98:	e066      	b.n	8002d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fd0c 	bl	80036bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06b      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d11b      	bne.n	8002d3c <HAL_I2C_Master_Transmit+0x188>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	6a39      	ldr	r1, [r7, #32]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fcfc 	bl	800373e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d107      	bne.n	8002d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01a      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d194      	bne.n	8002c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	00100002 	.word	0x00100002
 8002dac:	ffff0000 	.word	0xffff0000

08002db0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	817b      	strh	r3, [r7, #10]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff f8d6 	bl	8001f78 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 823f 	bne.w	800325a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2319      	movs	r3, #25
 8002de2:	2201      	movs	r2, #1
 8002de4:	497f      	ldr	r1, [pc, #508]	; (8002fe4 <HAL_I2C_Master_Receive+0x234>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fb92 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e232      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Receive+0x54>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e22b      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2222      	movs	r2, #34	; 0x22
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2210      	movs	r2, #16
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_I2C_Master_Receive+0x238>)
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fa7e 	bl	8003374 <I2C_MasterRequestRead>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1ec      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e1c0      	b.n	8003234 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d11e      	bne.n	8002ef8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eca:	b672      	cpsid	i
}
 8002ecc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef4:	b662      	cpsie	i
}
 8002ef6:	e035      	b.n	8002f64 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d11e      	bne.n	8002f3e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3a:	b662      	cpsie	i
}
 8002f3c:	e012      	b.n	8002f64 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f64:	e166      	b.n	8003234 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	f200 811f 	bhi.w	80031ae <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d123      	bne.n	8002fc0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fc1f 	bl	80037c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e167      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fbe:	e139      	b.n	8003234 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d152      	bne.n	800306e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4906      	ldr	r1, [pc, #24]	; (8002fec <HAL_I2C_Master_Receive+0x23c>)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa9c 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e13c      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
 8002fe2:	bf00      	nop
 8002fe4:	00100002 	.word	0x00100002
 8002fe8:	ffff0000 	.word	0xffff0000
 8002fec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff0:	b672      	cpsid	i
}
 8002ff2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003036:	b662      	cpsie	i
}
 8003038:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800306c:	e0e2      	b.n	8003234 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	2200      	movs	r2, #0
 8003076:	497b      	ldr	r1, [pc, #492]	; (8003264 <HAL_I2C_Master_Receive+0x4b4>)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fa49 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0e9      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_I2C_Master_Receive+0x4b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_I2C_Master_Receive+0x4bc>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0a1a      	lsrs	r2, r3, #8
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00da      	lsls	r2, r3, #3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d118      	bne.n	8003126 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003116:	b662      	cpsie	i
}
 8003118:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e09a      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d1d9      	bne.n	80030e8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003176:	b662      	cpsie	i
}
 8003178:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ac:	e042      	b.n	8003234 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fb04 	bl	80037c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e04c      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d118      	bne.n	8003234 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f ae94 	bne.w	8002f66 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	00010004 	.word	0x00010004
 8003268:	20000000 	.word	0x20000000
 800326c:	14f8b589 	.word	0x14f8b589

08003270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d006      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d107      	bne.n	80032c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f91d 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e035      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e01b      	b.n	800334c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <I2C_MasterRequestWrite+0xfc>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f943 	bl	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e010      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <I2C_MasterRequestWrite+0x100>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f933 	bl	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010008 	.word	0x00010008
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003398:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d006      	beq.n	80033ae <I2C_MasterRequestRead+0x3a>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <I2C_MasterRequestRead+0x3a>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e00b      	b.n	80033d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d107      	bne.n	80033d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f893 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d103      	bne.n	8003408 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e079      	b.n	8003500 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e05f      	b.n	80034e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003428:	897b      	ldrh	r3, [r7, #10]
 800342a:	11db      	asrs	r3, r3, #7
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f063 030f 	orn	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4930      	ldr	r1, [pc, #192]	; (8003508 <I2C_MasterRequestRead+0x194>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f8b9 	bl	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e054      	b.n	8003500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4929      	ldr	r1, [pc, #164]	; (800350c <I2C_MasterRequestRead+0x198>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f8a9 	bl	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e044      	b.n	8003500 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f831 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c2:	d103      	bne.n	80034cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e017      	b.n	8003500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	11db      	asrs	r3, r3, #7
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f063 030e 	orn	r3, r3, #14
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <I2C_MasterRequestRead+0x198>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f865 	bl	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	00010008 	.word	0x00010008
 800350c:	00010002 	.word	0x00010002

08003510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003520:	e025      	b.n	800356e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d021      	beq.n	800356e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fd25 	bl	8001f78 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d116      	bne.n	800356e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e023      	b.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10d      	bne.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	43da      	mvns	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	e00c      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d0b6      	beq.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035cc:	e051      	b.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035dc:	d123      	bne.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e046      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362c:	d021      	beq.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fca3 	bl	8001f78 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d116      	bne.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e020      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10c      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e00b      	b.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d18d      	bne.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c8:	e02d      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8ce 	bl	800386c <I2C_IsAcknowledgeFailed>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e02d      	b.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e0:	d021      	beq.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fe fc49 	bl	8001f78 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d1ca      	bne.n	80036ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800374a:	e02d      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f88d 	bl	800386c <I2C_IsAcknowledgeFailed>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e02d      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003762:	d021      	beq.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003764:	f7fe fc08 	bl	8001f78 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d302      	bcc.n	800377a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e007      	b.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d1ca      	bne.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037cc:	e042      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d119      	bne.n	8003810 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0210 	mvn.w	r2, #16
 80037e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e029      	b.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003810:	f7fe fbb2 	bl	8001f78 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d302      	bcc.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d116      	bne.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e007      	b.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d1b5      	bne.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d11b      	bne.n	80038bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0204 	orr.w	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e26c      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8087 	beq.w	80039f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e8:	4b92      	ldr	r3, [pc, #584]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d00c      	beq.n	800390e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f4:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d112      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d10b      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390e:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x12c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d168      	bne.n	80039f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e246      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x76>
 8003930:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7f      	ldr	r2, [pc, #508]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e02e      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7a      	ldr	r2, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b78      	ldr	r3, [pc, #480]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0xbc>
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a71      	ldr	r2, [pc, #452]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003984:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fae8 	bl	8001f78 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe fae4 	bl	8001f78 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1fa      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xe4>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fad4 	bl	8001f78 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe fad0 	bl	8001f78 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1e6      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x10c>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1ba      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4939      	ldr	r1, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa89 	bl	8001f78 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fa85 	bl	8001f78 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e19b      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4927      	ldr	r1, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fa68 	bl	8001f78 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fe fa64 	bl	8001f78 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e17a      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fa48 	bl	8001f78 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fe fa44 	bl	8001f78 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e15a      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f000 fad8 	bl	80040c0 <RCC_Delay>
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa2e 	bl	8001f78 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fe fa2a 	bl	8001f78 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d908      	bls.n	8003b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e140      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	42420000 	.word	0x42420000
 8003b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b9e      	ldr	r3, [pc, #632]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e9      	bne.n	8003b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a6 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b97      	ldr	r3, [pc, #604]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b94      	ldr	r3, [pc, #592]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a93      	ldr	r2, [pc, #588]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	61d3      	str	r3, [r2, #28]
 8003b76:	4b91      	ldr	r3, [pc, #580]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b8e      	ldr	r3, [pc, #568]	; (8003dc0 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <HAL_RCC_OscConfig+0x4f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a8a      	ldr	r2, [pc, #552]	; (8003dc0 <HAL_RCC_OscConfig+0x4f8>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe f9eb 	bl	8001f78 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fe f9e7 	bl	8001f78 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0fd      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b81      	ldr	r3, [pc, #516]	; (8003dc0 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x312>
 8003bcc:	4b7b      	ldr	r3, [pc, #492]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a7a      	ldr	r2, [pc, #488]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	e02d      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a75      	ldr	r2, [pc, #468]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b73      	ldr	r3, [pc, #460]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a72      	ldr	r2, [pc, #456]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	e01c      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x356>
 8003c04:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a69      	ldr	r2, [pc, #420]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	e00b      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003c1e:	4b67      	ldr	r3, [pc, #412]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a66      	ldr	r2, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6213      	str	r3, [r2, #32]
 8003c2a:	4b64      	ldr	r3, [pc, #400]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a63      	ldr	r2, [pc, #396]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe f99b 	bl	8001f78 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe f997 	bl	8001f78 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0ab      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <HAL_RCC_OscConfig+0x37e>
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fe f985 	bl	8001f78 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fe f981 	bl	8001f78 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e095      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4b4c      	ldr	r3, [pc, #304]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ee      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8081 	beq.w	8003db2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb0:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d061      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d146      	bne.n	8003d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_OscConfig+0x4fc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe f955 	bl	8001f78 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe f951 	bl	8001f78 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e067      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	492d      	ldr	r1, [pc, #180]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a19      	ldr	r1, [r3, #32]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	4927      	ldr	r1, [pc, #156]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x4fc>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f925 	bl	8001f78 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fe f921 	bl	8001f78 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e037      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x46a>
 8003d50:	e02f      	b.n	8003db2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <HAL_RCC_OscConfig+0x4fc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe f90e 	bl	8001f78 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe f90a 	bl	8001f78 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e020      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x498>
 8003d7e:	e018      	b.n	8003db2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e013      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42420060 	.word	0x42420060

08003dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0d0      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d910      	bls.n	8003e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 0207 	bic.w	r2, r3, #7
 8003df2:	4965      	ldr	r1, [pc, #404]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0b8      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e48:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	494d      	ldr	r1, [pc, #308]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d040      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d115      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07f      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e073      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e06b      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4936      	ldr	r1, [pc, #216]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe f85e 	bl	8001f78 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec0:	f7fe f85a 	bl	8001f78 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e053      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 020c 	and.w	r2, r3, #12
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1eb      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d210      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0207 	bic.w	r2, r3, #7
 8003efe:	4922      	ldr	r1, [pc, #136]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e032      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4916      	ldr	r1, [pc, #88]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	490e      	ldr	r1, [pc, #56]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f56:	f000 f821 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	490a      	ldr	r1, [pc, #40]	; (8003f90 <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1cc>)
 8003f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd ffbc 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	08007f08 	.word	0x08007f08
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000004 	.word	0x20000004

08003f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f9c:	b490      	push	{r4, r7}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fa4:	1d3c      	adds	r4, r7, #4
 8003fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fac:	f240 2301 	movw	r3, #513	; 0x201
 8003fb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x40>
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x46>
 8003fda:	e02d      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fde:	623b      	str	r3, [r7, #32]
      break;
 8003fe0:	e02d      	b.n	800403e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	0c9b      	lsrs	r3, r3, #18
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fee:	4413      	add	r3, r2
 8003ff0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ff4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	0c5b      	lsrs	r3, r3, #17
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800400e:	4413      	add	r3, r2
 8004010:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004014:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	fb02 f203 	mul.w	r2, r2, r3
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e004      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	623b      	str	r3, [r7, #32]
      break;
 8004036:	e002      	b.n	800403e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800403a:	623b      	str	r3, [r7, #32]
      break;
 800403c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403e:	6a3b      	ldr	r3, [r7, #32]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bc90      	pop	{r4, r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	08007ef8 	.word	0x08007ef8
 8004050:	40021000 	.word	0x40021000
 8004054:	007a1200 	.word	0x007a1200
 8004058:	003d0900 	.word	0x003d0900

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b02      	ldr	r3, [pc, #8]	; (800406c <HAL_RCC_GetHCLKFreq+0x10>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	20000000 	.word	0x20000000

08004070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004074:	f7ff fff2 	bl	800405c <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	08007f18 	.word	0x08007f18

08004098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800409c:	f7ff ffde 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0adb      	lsrs	r3, r3, #11
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08007f18 	.word	0x08007f18

080040c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <RCC_Delay+0x34>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <RCC_Delay+0x38>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0a5b      	lsrs	r3, r3, #9
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040dc:	bf00      	nop
  }
  while (Delay --);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1e5a      	subs	r2, r3, #1
 80040e2:	60fa      	str	r2, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f9      	bne.n	80040dc <RCC_Delay+0x1c>
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000000 	.word	0x20000000
 80040f8:	10624dd3 	.word	0x10624dd3

080040fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07d      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411c:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b4c      	ldr	r3, [pc, #304]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4a4b      	ldr	r2, [pc, #300]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004132:	61d3      	str	r3, [r2, #28]
 8004134:	4b49      	ldr	r3, [pc, #292]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004140:	2301      	movs	r3, #1
 8004142:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004144:	4b46      	ldr	r3, [pc, #280]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d118      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415c:	f7fd ff0c 	bl	8001f78 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004164:	f7fd ff08 	bl	8001f78 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e06d      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b3a      	ldr	r3, [pc, #232]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02e      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	429a      	cmp	r2, r3
 800419e:	d027      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041aa:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d014      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fd fed7 	bl	8001f78 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fed3 	bl	8001f78 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e036      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ee      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4917      	ldr	r1, [pc, #92]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	490b      	ldr	r1, [pc, #44]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4904      	ldr	r1, [pc, #16]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
 8004264:	42420440 	.word	0x42420440

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e076      	b.n	8004368 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428a:	d009      	beq.n	80042a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
 8004292:	e005      	b.n	80042a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fc0e 	bl	8001adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	0c1a      	lsrs	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f002 0204 	and.w	r2, r2, #4
 8004346:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004356:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e041      	b.n	8004406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fbec 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f000 fa08 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e041      	b.n	80044a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f839 	bl	80044ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f000 f9b9 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e0ac      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x174>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	f200 809f 	bhi.w	8004628 <HAL_TIM_PWM_ConfigChannel+0x168>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004525 	.word	0x08004525
 80044f4:	08004629 	.word	0x08004629
 80044f8:	08004629 	.word	0x08004629
 80044fc:	08004629 	.word	0x08004629
 8004500:	08004565 	.word	0x08004565
 8004504:	08004629 	.word	0x08004629
 8004508:	08004629 	.word	0x08004629
 800450c:	08004629 	.word	0x08004629
 8004510:	080045a7 	.word	0x080045a7
 8004514:	08004629 	.word	0x08004629
 8004518:	08004629 	.word	0x08004629
 800451c:	08004629 	.word	0x08004629
 8004520:	080045e7 	.word	0x080045e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f9ac 	bl	8004888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0208 	orr.w	r2, r2, #8
 800453e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0204 	bic.w	r2, r2, #4
 800454e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6999      	ldr	r1, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	619a      	str	r2, [r3, #24]
      break;
 8004562:	e062      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f9f2 	bl	8004954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6999      	ldr	r1, [r3, #24]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	021a      	lsls	r2, r3, #8
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	619a      	str	r2, [r3, #24]
      break;
 80045a4:	e041      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fa3b 	bl	8004a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0208 	orr.w	r2, r2, #8
 80045c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0204 	bic.w	r2, r2, #4
 80045d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69d9      	ldr	r1, [r3, #28]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	61da      	str	r2, [r3, #28]
      break;
 80045e4:	e021      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fa85 	bl	8004afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	021a      	lsls	r2, r3, #8
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	61da      	str	r2, [r3, #28]
      break;
 8004626:	e000      	b.n	800462a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIM_ConfigClockSource+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e0b3      	b.n	80047bc <HAL_TIM_ConfigClockSource+0x180>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d03e      	beq.n	800470c <HAL_TIM_ConfigClockSource+0xd0>
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	f200 8087 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	f000 8085 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x16c>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d87f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d01a      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xa2>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d87b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d050      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x116>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d877      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d03c      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0xf6>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d873      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d058      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x136>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d86f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d064      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d86b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d060      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d867      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d05a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046dc:	e062      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f000 faca 	bl	8004c86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004700:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
      break;
 800470a:	e04e      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6899      	ldr	r1, [r3, #8]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f000 fab3 	bl	8004c86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e03b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 fa2a 	bl	8004b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2150      	movs	r1, #80	; 0x50
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fa81 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004750:	e02b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 fa48 	bl	8004bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2160      	movs	r1, #96	; 0x60
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fa71 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004770:	e01b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 fa0a 	bl	8004b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fa61 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004790:	e00b      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 fa58 	bl	8004c52 <TIM_ITRx_SetConfig>
        break;
 80047a2:	e002      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a29      	ldr	r2, [pc, #164]	; (800487c <TIM_Base_SetConfig+0xb8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <TIM_Base_SetConfig+0xbc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a25      	ldr	r2, [pc, #148]	; (8004884 <TIM_Base_SetConfig+0xc0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <TIM_Base_SetConfig+0xb8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <TIM_Base_SetConfig+0xbc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <TIM_Base_SetConfig+0xc0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <TIM_Base_SetConfig+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800

08004888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0302 	bic.w	r3, r3, #2
 80048d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <TIM_OC1_SetConfig+0xc8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d10c      	bne.n	80048fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0308 	bic.w	r3, r3, #8
 80048ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0304 	bic.w	r3, r3, #4
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <TIM_OC1_SetConfig+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d111      	bne.n	800492a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00

08004954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0210 	bic.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0320 	bic.w	r3, r3, #32
 800499e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <TIM_OC2_SetConfig+0xd0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d10d      	bne.n	80049d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <TIM_OC2_SetConfig+0xd0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d113      	bne.n	8004a00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	40012c00 	.word	0x40012c00

08004a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <TIM_OC3_SetConfig+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <TIM_OC3_SetConfig+0xd0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d113      	bne.n	8004ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00

08004afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	031b      	lsls	r3, r3, #12
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <TIM_OC4_SetConfig+0x98>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00

08004b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 030a 	bic.w	r3, r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f023 0210 	bic.w	r2, r3, #16
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	621a      	str	r2, [r3, #32]
}
 8004c48:	bf00      	nop
 8004c4a:	371c      	adds	r7, #28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f043 0307 	orr.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	021a      	lsls	r2, r3, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	609a      	str	r2, [r3, #8]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e046      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800

08004d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e03f      	b.n	8004e12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc ff30 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f905 	bl	8004fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b08a      	sub	sp, #40	; 0x28
 8004e1e:	af02      	add	r7, sp, #8
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d17c      	bne.n	8004f34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_Transmit+0x2c>
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e075      	b.n	8004f36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Transmit+0x3e>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e06e      	b.n	8004f36 <HAL_UART_Transmit+0x11c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6e:	f7fd f883 	bl	8001f78 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d108      	bne.n	8004e9c <HAL_UART_Transmit+0x82>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e003      	b.n	8004ea4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eac:	e02a      	b.n	8004f04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f840 	bl	8004f3e <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e036      	b.n	8004f36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e007      	b.n	8004ef6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1cf      	bne.n	8004eae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2140      	movs	r1, #64	; 0x40
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f810 	bl	8004f3e <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	e02c      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f56:	d028      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	f7fd f80b 	bl	8001f78 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d21d      	bcs.n	8004faa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0c3      	beq.n	8004f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800500e:	f023 030c 	bic.w	r3, r3, #12
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	430b      	orrs	r3, r1
 800501a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <UART_SetConfig+0x114>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7ff f82c 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	e002      	b.n	800504a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005044:	f7ff f814 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8005048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <UART_SetConfig+0x118>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	0119      	lsls	r1, r3, #4
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009a      	lsls	r2, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <UART_SetConfig+0x118>)
 8005082:	fba3 0302 	umull	r0, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2064      	movs	r0, #100	; 0x64
 800508a:	fb00 f303 	mul.w	r3, r0, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	3332      	adds	r3, #50	; 0x32
 8005094:	4a15      	ldr	r2, [pc, #84]	; (80050ec <UART_SetConfig+0x118>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a0:	4419      	add	r1, r3
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <UART_SetConfig+0x118>)
 80050ba:	fba3 0302 	umull	r0, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2064      	movs	r0, #100	; 0x64
 80050c2:	fb00 f303 	mul.w	r3, r0, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a07      	ldr	r2, [pc, #28]	; (80050ec <UART_SetConfig+0x118>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	440a      	add	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40013800 	.word	0x40013800
 80050ec:	51eb851f 	.word	0x51eb851f

080050f0 <__errno>:
 80050f0:	4b01      	ldr	r3, [pc, #4]	; (80050f8 <__errno+0x8>)
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	2000000c 	.word	0x2000000c

080050fc <__libc_init_array>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	2600      	movs	r6, #0
 8005100:	4d0c      	ldr	r5, [pc, #48]	; (8005134 <__libc_init_array+0x38>)
 8005102:	4c0d      	ldr	r4, [pc, #52]	; (8005138 <__libc_init_array+0x3c>)
 8005104:	1b64      	subs	r4, r4, r5
 8005106:	10a4      	asrs	r4, r4, #2
 8005108:	42a6      	cmp	r6, r4
 800510a:	d109      	bne.n	8005120 <__libc_init_array+0x24>
 800510c:	f002 feba 	bl	8007e84 <_init>
 8005110:	2600      	movs	r6, #0
 8005112:	4d0a      	ldr	r5, [pc, #40]	; (800513c <__libc_init_array+0x40>)
 8005114:	4c0a      	ldr	r4, [pc, #40]	; (8005140 <__libc_init_array+0x44>)
 8005116:	1b64      	subs	r4, r4, r5
 8005118:	10a4      	asrs	r4, r4, #2
 800511a:	42a6      	cmp	r6, r4
 800511c:	d105      	bne.n	800512a <__libc_init_array+0x2e>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	f855 3b04 	ldr.w	r3, [r5], #4
 8005124:	4798      	blx	r3
 8005126:	3601      	adds	r6, #1
 8005128:	e7ee      	b.n	8005108 <__libc_init_array+0xc>
 800512a:	f855 3b04 	ldr.w	r3, [r5], #4
 800512e:	4798      	blx	r3
 8005130:	3601      	adds	r6, #1
 8005132:	e7f2      	b.n	800511a <__libc_init_array+0x1e>
 8005134:	08008304 	.word	0x08008304
 8005138:	08008304 	.word	0x08008304
 800513c:	08008304 	.word	0x08008304
 8005140:	08008308 	.word	0x08008308

08005144 <memset>:
 8005144:	4603      	mov	r3, r0
 8005146:	4402      	add	r2, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	d100      	bne.n	800514e <memset+0xa>
 800514c:	4770      	bx	lr
 800514e:	f803 1b01 	strb.w	r1, [r3], #1
 8005152:	e7f9      	b.n	8005148 <memset+0x4>

08005154 <__cvt>:
 8005154:	2b00      	cmp	r3, #0
 8005156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515a:	461f      	mov	r7, r3
 800515c:	bfbb      	ittet	lt
 800515e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005162:	461f      	movlt	r7, r3
 8005164:	2300      	movge	r3, #0
 8005166:	232d      	movlt	r3, #45	; 0x2d
 8005168:	b088      	sub	sp, #32
 800516a:	4614      	mov	r4, r2
 800516c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800516e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005170:	7013      	strb	r3, [r2, #0]
 8005172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005174:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005178:	f023 0820 	bic.w	r8, r3, #32
 800517c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005180:	d005      	beq.n	800518e <__cvt+0x3a>
 8005182:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005186:	d100      	bne.n	800518a <__cvt+0x36>
 8005188:	3501      	adds	r5, #1
 800518a:	2302      	movs	r3, #2
 800518c:	e000      	b.n	8005190 <__cvt+0x3c>
 800518e:	2303      	movs	r3, #3
 8005190:	aa07      	add	r2, sp, #28
 8005192:	9204      	str	r2, [sp, #16]
 8005194:	aa06      	add	r2, sp, #24
 8005196:	e9cd a202 	strd	sl, r2, [sp, #8]
 800519a:	e9cd 3500 	strd	r3, r5, [sp]
 800519e:	4622      	mov	r2, r4
 80051a0:	463b      	mov	r3, r7
 80051a2:	f000 fce5 	bl	8005b70 <_dtoa_r>
 80051a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051aa:	4606      	mov	r6, r0
 80051ac:	d102      	bne.n	80051b4 <__cvt+0x60>
 80051ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051b0:	07db      	lsls	r3, r3, #31
 80051b2:	d522      	bpl.n	80051fa <__cvt+0xa6>
 80051b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051b8:	eb06 0905 	add.w	r9, r6, r5
 80051bc:	d110      	bne.n	80051e0 <__cvt+0x8c>
 80051be:	7833      	ldrb	r3, [r6, #0]
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	d10a      	bne.n	80051da <__cvt+0x86>
 80051c4:	2200      	movs	r2, #0
 80051c6:	2300      	movs	r3, #0
 80051c8:	4620      	mov	r0, r4
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fb fbec 	bl	80009a8 <__aeabi_dcmpeq>
 80051d0:	b918      	cbnz	r0, 80051da <__cvt+0x86>
 80051d2:	f1c5 0501 	rsb	r5, r5, #1
 80051d6:	f8ca 5000 	str.w	r5, [sl]
 80051da:	f8da 3000 	ldr.w	r3, [sl]
 80051de:	4499      	add	r9, r3
 80051e0:	2200      	movs	r2, #0
 80051e2:	2300      	movs	r3, #0
 80051e4:	4620      	mov	r0, r4
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80051ec:	b108      	cbz	r0, 80051f2 <__cvt+0x9e>
 80051ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80051f2:	2230      	movs	r2, #48	; 0x30
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	454b      	cmp	r3, r9
 80051f8:	d307      	bcc.n	800520a <__cvt+0xb6>
 80051fa:	4630      	mov	r0, r6
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005200:	1b9b      	subs	r3, r3, r6
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	b008      	add	sp, #32
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	9107      	str	r1, [sp, #28]
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e7f0      	b.n	80051f4 <__cvt+0xa0>

08005212 <__exponent>:
 8005212:	4603      	mov	r3, r0
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	2900      	cmp	r1, #0
 8005218:	f803 2b02 	strb.w	r2, [r3], #2
 800521c:	bfb6      	itet	lt
 800521e:	222d      	movlt	r2, #45	; 0x2d
 8005220:	222b      	movge	r2, #43	; 0x2b
 8005222:	4249      	neglt	r1, r1
 8005224:	2909      	cmp	r1, #9
 8005226:	7042      	strb	r2, [r0, #1]
 8005228:	dd2b      	ble.n	8005282 <__exponent+0x70>
 800522a:	f10d 0407 	add.w	r4, sp, #7
 800522e:	46a4      	mov	ip, r4
 8005230:	270a      	movs	r7, #10
 8005232:	fb91 f6f7 	sdiv	r6, r1, r7
 8005236:	460a      	mov	r2, r1
 8005238:	46a6      	mov	lr, r4
 800523a:	fb07 1516 	mls	r5, r7, r6, r1
 800523e:	2a63      	cmp	r2, #99	; 0x63
 8005240:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005244:	4631      	mov	r1, r6
 8005246:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800524a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800524e:	dcf0      	bgt.n	8005232 <__exponent+0x20>
 8005250:	3130      	adds	r1, #48	; 0x30
 8005252:	f1ae 0502 	sub.w	r5, lr, #2
 8005256:	f804 1c01 	strb.w	r1, [r4, #-1]
 800525a:	4629      	mov	r1, r5
 800525c:	1c44      	adds	r4, r0, #1
 800525e:	4561      	cmp	r1, ip
 8005260:	d30a      	bcc.n	8005278 <__exponent+0x66>
 8005262:	f10d 0209 	add.w	r2, sp, #9
 8005266:	eba2 020e 	sub.w	r2, r2, lr
 800526a:	4565      	cmp	r5, ip
 800526c:	bf88      	it	hi
 800526e:	2200      	movhi	r2, #0
 8005270:	4413      	add	r3, r2
 8005272:	1a18      	subs	r0, r3, r0
 8005274:	b003      	add	sp, #12
 8005276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005278:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005280:	e7ed      	b.n	800525e <__exponent+0x4c>
 8005282:	2330      	movs	r3, #48	; 0x30
 8005284:	3130      	adds	r1, #48	; 0x30
 8005286:	7083      	strb	r3, [r0, #2]
 8005288:	70c1      	strb	r1, [r0, #3]
 800528a:	1d03      	adds	r3, r0, #4
 800528c:	e7f1      	b.n	8005272 <__exponent+0x60>
	...

08005290 <_printf_float>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	b091      	sub	sp, #68	; 0x44
 8005296:	460c      	mov	r4, r1
 8005298:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800529c:	4616      	mov	r6, r2
 800529e:	461f      	mov	r7, r3
 80052a0:	4605      	mov	r5, r0
 80052a2:	f001 fa53 	bl	800674c <_localeconv_r>
 80052a6:	6803      	ldr	r3, [r0, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	9309      	str	r3, [sp, #36]	; 0x24
 80052ac:	f7fa ff50 	bl	8000150 <strlen>
 80052b0:	2300      	movs	r3, #0
 80052b2:	930e      	str	r3, [sp, #56]	; 0x38
 80052b4:	f8d8 3000 	ldr.w	r3, [r8]
 80052b8:	900a      	str	r0, [sp, #40]	; 0x28
 80052ba:	3307      	adds	r3, #7
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	f103 0208 	add.w	r2, r3, #8
 80052c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052c8:	f8d4 b000 	ldr.w	fp, [r4]
 80052cc:	f8c8 2000 	str.w	r2, [r8]
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052d8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80052dc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80052e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e6:	4640      	mov	r0, r8
 80052e8:	4b9c      	ldr	r3, [pc, #624]	; (800555c <_printf_float+0x2cc>)
 80052ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ec:	f7fb fb8e 	bl	8000a0c <__aeabi_dcmpun>
 80052f0:	bb70      	cbnz	r0, 8005350 <_printf_float+0xc0>
 80052f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052f6:	4640      	mov	r0, r8
 80052f8:	4b98      	ldr	r3, [pc, #608]	; (800555c <_printf_float+0x2cc>)
 80052fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052fc:	f7fb fb68 	bl	80009d0 <__aeabi_dcmple>
 8005300:	bb30      	cbnz	r0, 8005350 <_printf_float+0xc0>
 8005302:	2200      	movs	r2, #0
 8005304:	2300      	movs	r3, #0
 8005306:	4640      	mov	r0, r8
 8005308:	4651      	mov	r1, sl
 800530a:	f7fb fb57 	bl	80009bc <__aeabi_dcmplt>
 800530e:	b110      	cbz	r0, 8005316 <_printf_float+0x86>
 8005310:	232d      	movs	r3, #45	; 0x2d
 8005312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005316:	4b92      	ldr	r3, [pc, #584]	; (8005560 <_printf_float+0x2d0>)
 8005318:	4892      	ldr	r0, [pc, #584]	; (8005564 <_printf_float+0x2d4>)
 800531a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800531e:	bf94      	ite	ls
 8005320:	4698      	movls	r8, r3
 8005322:	4680      	movhi	r8, r0
 8005324:	2303      	movs	r3, #3
 8005326:	f04f 0a00 	mov.w	sl, #0
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	f02b 0304 	bic.w	r3, fp, #4
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	4633      	mov	r3, r6
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	9700      	str	r7, [sp, #0]
 800533a:	aa0f      	add	r2, sp, #60	; 0x3c
 800533c:	f000 f9d4 	bl	80056e8 <_printf_common>
 8005340:	3001      	adds	r0, #1
 8005342:	f040 8090 	bne.w	8005466 <_printf_float+0x1d6>
 8005346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534a:	b011      	add	sp, #68	; 0x44
 800534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005350:	4642      	mov	r2, r8
 8005352:	4653      	mov	r3, sl
 8005354:	4640      	mov	r0, r8
 8005356:	4651      	mov	r1, sl
 8005358:	f7fb fb58 	bl	8000a0c <__aeabi_dcmpun>
 800535c:	b148      	cbz	r0, 8005372 <_printf_float+0xe2>
 800535e:	f1ba 0f00 	cmp.w	sl, #0
 8005362:	bfb8      	it	lt
 8005364:	232d      	movlt	r3, #45	; 0x2d
 8005366:	4880      	ldr	r0, [pc, #512]	; (8005568 <_printf_float+0x2d8>)
 8005368:	bfb8      	it	lt
 800536a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800536e:	4b7f      	ldr	r3, [pc, #508]	; (800556c <_printf_float+0x2dc>)
 8005370:	e7d3      	b.n	800531a <_printf_float+0x8a>
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	d142      	bne.n	8005402 <_printf_float+0x172>
 800537c:	2306      	movs	r3, #6
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	9206      	str	r2, [sp, #24]
 8005384:	aa0e      	add	r2, sp, #56	; 0x38
 8005386:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800538a:	aa0d      	add	r2, sp, #52	; 0x34
 800538c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005390:	9203      	str	r2, [sp, #12]
 8005392:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005396:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	4642      	mov	r2, r8
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4628      	mov	r0, r5
 80053a4:	4653      	mov	r3, sl
 80053a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80053a8:	f7ff fed4 	bl	8005154 <__cvt>
 80053ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ae:	4680      	mov	r8, r0
 80053b0:	2947      	cmp	r1, #71	; 0x47
 80053b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053b4:	d108      	bne.n	80053c8 <_printf_float+0x138>
 80053b6:	1cc8      	adds	r0, r1, #3
 80053b8:	db02      	blt.n	80053c0 <_printf_float+0x130>
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	4299      	cmp	r1, r3
 80053be:	dd40      	ble.n	8005442 <_printf_float+0x1b2>
 80053c0:	f1a9 0902 	sub.w	r9, r9, #2
 80053c4:	fa5f f989 	uxtb.w	r9, r9
 80053c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053cc:	d81f      	bhi.n	800540e <_printf_float+0x17e>
 80053ce:	464a      	mov	r2, r9
 80053d0:	3901      	subs	r1, #1
 80053d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053d6:	910d      	str	r1, [sp, #52]	; 0x34
 80053d8:	f7ff ff1b 	bl	8005212 <__exponent>
 80053dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053de:	4682      	mov	sl, r0
 80053e0:	1813      	adds	r3, r2, r0
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	dc02      	bgt.n	80053ee <_printf_float+0x15e>
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	07d2      	lsls	r2, r2, #31
 80053ec:	d501      	bpl.n	80053f2 <_printf_float+0x162>
 80053ee:	3301      	adds	r3, #1
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d09b      	beq.n	8005332 <_printf_float+0xa2>
 80053fa:	232d      	movs	r3, #45	; 0x2d
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	e797      	b.n	8005332 <_printf_float+0xa2>
 8005402:	2947      	cmp	r1, #71	; 0x47
 8005404:	d1bc      	bne.n	8005380 <_printf_float+0xf0>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ba      	bne.n	8005380 <_printf_float+0xf0>
 800540a:	2301      	movs	r3, #1
 800540c:	e7b7      	b.n	800537e <_printf_float+0xee>
 800540e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005412:	d118      	bne.n	8005446 <_printf_float+0x1b6>
 8005414:	2900      	cmp	r1, #0
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	dd0b      	ble.n	8005432 <_printf_float+0x1a2>
 800541a:	6121      	str	r1, [r4, #16]
 800541c:	b913      	cbnz	r3, 8005424 <_printf_float+0x194>
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	07d0      	lsls	r0, r2, #31
 8005422:	d502      	bpl.n	800542a <_printf_float+0x19a>
 8005424:	3301      	adds	r3, #1
 8005426:	440b      	add	r3, r1
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	f04f 0a00 	mov.w	sl, #0
 800542e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005430:	e7df      	b.n	80053f2 <_printf_float+0x162>
 8005432:	b913      	cbnz	r3, 800543a <_printf_float+0x1aa>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	07d2      	lsls	r2, r2, #31
 8005438:	d501      	bpl.n	800543e <_printf_float+0x1ae>
 800543a:	3302      	adds	r3, #2
 800543c:	e7f4      	b.n	8005428 <_printf_float+0x198>
 800543e:	2301      	movs	r3, #1
 8005440:	e7f2      	b.n	8005428 <_printf_float+0x198>
 8005442:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005448:	4299      	cmp	r1, r3
 800544a:	db05      	blt.n	8005458 <_printf_float+0x1c8>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	6121      	str	r1, [r4, #16]
 8005450:	07d8      	lsls	r0, r3, #31
 8005452:	d5ea      	bpl.n	800542a <_printf_float+0x19a>
 8005454:	1c4b      	adds	r3, r1, #1
 8005456:	e7e7      	b.n	8005428 <_printf_float+0x198>
 8005458:	2900      	cmp	r1, #0
 800545a:	bfcc      	ite	gt
 800545c:	2201      	movgt	r2, #1
 800545e:	f1c1 0202 	rsble	r2, r1, #2
 8005462:	4413      	add	r3, r2
 8005464:	e7e0      	b.n	8005428 <_printf_float+0x198>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	055a      	lsls	r2, r3, #21
 800546a:	d407      	bmi.n	800547c <_printf_float+0x1ec>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	4642      	mov	r2, r8
 8005470:	4631      	mov	r1, r6
 8005472:	4628      	mov	r0, r5
 8005474:	47b8      	blx	r7
 8005476:	3001      	adds	r0, #1
 8005478:	d12b      	bne.n	80054d2 <_printf_float+0x242>
 800547a:	e764      	b.n	8005346 <_printf_float+0xb6>
 800547c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005480:	f240 80dd 	bls.w	800563e <_printf_float+0x3ae>
 8005484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	f7fb fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005490:	2800      	cmp	r0, #0
 8005492:	d033      	beq.n	80054fc <_printf_float+0x26c>
 8005494:	2301      	movs	r3, #1
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <_printf_float+0x2e0>)
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af51 	beq.w	8005346 <_printf_float+0xb6>
 80054a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054a8:	429a      	cmp	r2, r3
 80054aa:	db02      	blt.n	80054b2 <_printf_float+0x222>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	07d8      	lsls	r0, r3, #31
 80054b0:	d50f      	bpl.n	80054d2 <_printf_float+0x242>
 80054b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b6:	4631      	mov	r1, r6
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b8      	blx	r7
 80054bc:	3001      	adds	r0, #1
 80054be:	f43f af42 	beq.w	8005346 <_printf_float+0xb6>
 80054c2:	f04f 0800 	mov.w	r8, #0
 80054c6:	f104 091a 	add.w	r9, r4, #26
 80054ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4543      	cmp	r3, r8
 80054d0:	dc09      	bgt.n	80054e6 <_printf_float+0x256>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	079b      	lsls	r3, r3, #30
 80054d6:	f100 8102 	bmi.w	80056de <_printf_float+0x44e>
 80054da:	68e0      	ldr	r0, [r4, #12]
 80054dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054de:	4298      	cmp	r0, r3
 80054e0:	bfb8      	it	lt
 80054e2:	4618      	movlt	r0, r3
 80054e4:	e731      	b.n	800534a <_printf_float+0xba>
 80054e6:	2301      	movs	r3, #1
 80054e8:	464a      	mov	r2, r9
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f af28 	beq.w	8005346 <_printf_float+0xb6>
 80054f6:	f108 0801 	add.w	r8, r8, #1
 80054fa:	e7e6      	b.n	80054ca <_printf_float+0x23a>
 80054fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dc38      	bgt.n	8005574 <_printf_float+0x2e4>
 8005502:	2301      	movs	r3, #1
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <_printf_float+0x2e0>)
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f af1a 	beq.w	8005346 <_printf_float+0xb6>
 8005512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005516:	4313      	orrs	r3, r2
 8005518:	d102      	bne.n	8005520 <_printf_float+0x290>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	07d9      	lsls	r1, r3, #31
 800551e:	d5d8      	bpl.n	80054d2 <_printf_float+0x242>
 8005520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af0b 	beq.w	8005346 <_printf_float+0xb6>
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	f104 0a1a 	add.w	sl, r4, #26
 8005538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553a:	425b      	negs	r3, r3
 800553c:	454b      	cmp	r3, r9
 800553e:	dc01      	bgt.n	8005544 <_printf_float+0x2b4>
 8005540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005542:	e794      	b.n	800546e <_printf_float+0x1de>
 8005544:	2301      	movs	r3, #1
 8005546:	4652      	mov	r2, sl
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f aef9 	beq.w	8005346 <_printf_float+0xb6>
 8005554:	f109 0901 	add.w	r9, r9, #1
 8005558:	e7ee      	b.n	8005538 <_printf_float+0x2a8>
 800555a:	bf00      	nop
 800555c:	7fefffff 	.word	0x7fefffff
 8005560:	08007f24 	.word	0x08007f24
 8005564:	08007f28 	.word	0x08007f28
 8005568:	08007f30 	.word	0x08007f30
 800556c:	08007f2c 	.word	0x08007f2c
 8005570:	08007f34 	.word	0x08007f34
 8005574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005578:	429a      	cmp	r2, r3
 800557a:	bfa8      	it	ge
 800557c:	461a      	movge	r2, r3
 800557e:	2a00      	cmp	r2, #0
 8005580:	4691      	mov	r9, r2
 8005582:	dc37      	bgt.n	80055f4 <_printf_float+0x364>
 8005584:	f04f 0b00 	mov.w	fp, #0
 8005588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800558c:	f104 021a 	add.w	r2, r4, #26
 8005590:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005594:	ebaa 0309 	sub.w	r3, sl, r9
 8005598:	455b      	cmp	r3, fp
 800559a:	dc33      	bgt.n	8005604 <_printf_float+0x374>
 800559c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055a0:	429a      	cmp	r2, r3
 80055a2:	db3b      	blt.n	800561c <_printf_float+0x38c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07da      	lsls	r2, r3, #31
 80055a8:	d438      	bmi.n	800561c <_printf_float+0x38c>
 80055aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055ae:	eba2 030a 	sub.w	r3, r2, sl
 80055b2:	eba2 0901 	sub.w	r9, r2, r1
 80055b6:	4599      	cmp	r9, r3
 80055b8:	bfa8      	it	ge
 80055ba:	4699      	movge	r9, r3
 80055bc:	f1b9 0f00 	cmp.w	r9, #0
 80055c0:	dc34      	bgt.n	800562c <_printf_float+0x39c>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ca:	f104 0a1a 	add.w	sl, r4, #26
 80055ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	eba3 0309 	sub.w	r3, r3, r9
 80055d8:	4543      	cmp	r3, r8
 80055da:	f77f af7a 	ble.w	80054d2 <_printf_float+0x242>
 80055de:	2301      	movs	r3, #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f aeac 	beq.w	8005346 <_printf_float+0xb6>
 80055ee:	f108 0801 	add.w	r8, r8, #1
 80055f2:	e7ec      	b.n	80055ce <_printf_float+0x33e>
 80055f4:	4613      	mov	r3, r2
 80055f6:	4631      	mov	r1, r6
 80055f8:	4642      	mov	r2, r8
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d1c0      	bne.n	8005584 <_printf_float+0x2f4>
 8005602:	e6a0      	b.n	8005346 <_printf_float+0xb6>
 8005604:	2301      	movs	r3, #1
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	920b      	str	r2, [sp, #44]	; 0x2c
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f ae99 	beq.w	8005346 <_printf_float+0xb6>
 8005614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005616:	f10b 0b01 	add.w	fp, fp, #1
 800561a:	e7b9      	b.n	8005590 <_printf_float+0x300>
 800561c:	4631      	mov	r1, r6
 800561e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	d1bf      	bne.n	80055aa <_printf_float+0x31a>
 800562a:	e68c      	b.n	8005346 <_printf_float+0xb6>
 800562c:	464b      	mov	r3, r9
 800562e:	4631      	mov	r1, r6
 8005630:	4628      	mov	r0, r5
 8005632:	eb08 020a 	add.w	r2, r8, sl
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	d1c2      	bne.n	80055c2 <_printf_float+0x332>
 800563c:	e683      	b.n	8005346 <_printf_float+0xb6>
 800563e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005640:	2a01      	cmp	r2, #1
 8005642:	dc01      	bgt.n	8005648 <_printf_float+0x3b8>
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d537      	bpl.n	80056b8 <_printf_float+0x428>
 8005648:	2301      	movs	r3, #1
 800564a:	4642      	mov	r2, r8
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f ae77 	beq.w	8005346 <_printf_float+0xb6>
 8005658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f ae6f 	beq.w	8005346 <_printf_float+0xb6>
 8005668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800566c:	2200      	movs	r2, #0
 800566e:	2300      	movs	r3, #0
 8005670:	f7fb f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8005674:	b9d8      	cbnz	r0, 80056ae <_printf_float+0x41e>
 8005676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005678:	f108 0201 	add.w	r2, r8, #1
 800567c:	3b01      	subs	r3, #1
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	d10e      	bne.n	80056a6 <_printf_float+0x416>
 8005688:	e65d      	b.n	8005346 <_printf_float+0xb6>
 800568a:	2301      	movs	r3, #1
 800568c:	464a      	mov	r2, r9
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f ae56 	beq.w	8005346 <_printf_float+0xb6>
 800569a:	f108 0801 	add.w	r8, r8, #1
 800569e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4543      	cmp	r3, r8
 80056a4:	dcf1      	bgt.n	800568a <_printf_float+0x3fa>
 80056a6:	4653      	mov	r3, sl
 80056a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056ac:	e6e0      	b.n	8005470 <_printf_float+0x1e0>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	f104 091a 	add.w	r9, r4, #26
 80056b6:	e7f2      	b.n	800569e <_printf_float+0x40e>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4642      	mov	r2, r8
 80056bc:	e7df      	b.n	800567e <_printf_float+0x3ee>
 80056be:	2301      	movs	r3, #1
 80056c0:	464a      	mov	r2, r9
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f ae3c 	beq.w	8005346 <_printf_float+0xb6>
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	68e3      	ldr	r3, [r4, #12]
 80056d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	4543      	cmp	r3, r8
 80056da:	dcf0      	bgt.n	80056be <_printf_float+0x42e>
 80056dc:	e6fd      	b.n	80054da <_printf_float+0x24a>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	f104 0919 	add.w	r9, r4, #25
 80056e6:	e7f4      	b.n	80056d2 <_printf_float+0x442>

080056e8 <_printf_common>:
 80056e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	4616      	mov	r6, r2
 80056ee:	4699      	mov	r9, r3
 80056f0:	688a      	ldr	r2, [r1, #8]
 80056f2:	690b      	ldr	r3, [r1, #16]
 80056f4:	4607      	mov	r7, r0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bfb8      	it	lt
 80056fa:	4613      	movlt	r3, r2
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005702:	460c      	mov	r4, r1
 8005704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005708:	b10a      	cbz	r2, 800570e <_printf_common+0x26>
 800570a:	3301      	adds	r3, #1
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	0699      	lsls	r1, r3, #26
 8005712:	bf42      	ittt	mi
 8005714:	6833      	ldrmi	r3, [r6, #0]
 8005716:	3302      	addmi	r3, #2
 8005718:	6033      	strmi	r3, [r6, #0]
 800571a:	6825      	ldr	r5, [r4, #0]
 800571c:	f015 0506 	ands.w	r5, r5, #6
 8005720:	d106      	bne.n	8005730 <_printf_common+0x48>
 8005722:	f104 0a19 	add.w	sl, r4, #25
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	6832      	ldr	r2, [r6, #0]
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	42ab      	cmp	r3, r5
 800572e:	dc28      	bgt.n	8005782 <_printf_common+0x9a>
 8005730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005734:	1e13      	subs	r3, r2, #0
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	bf18      	it	ne
 800573a:	2301      	movne	r3, #1
 800573c:	0692      	lsls	r2, r2, #26
 800573e:	d42d      	bmi.n	800579c <_printf_common+0xb4>
 8005740:	4649      	mov	r1, r9
 8005742:	4638      	mov	r0, r7
 8005744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005748:	47c0      	blx	r8
 800574a:	3001      	adds	r0, #1
 800574c:	d020      	beq.n	8005790 <_printf_common+0xa8>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	68e5      	ldr	r5, [r4, #12]
 8005752:	f003 0306 	and.w	r3, r3, #6
 8005756:	2b04      	cmp	r3, #4
 8005758:	bf18      	it	ne
 800575a:	2500      	movne	r5, #0
 800575c:	6832      	ldr	r2, [r6, #0]
 800575e:	f04f 0600 	mov.w	r6, #0
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	bf08      	it	eq
 8005766:	1aad      	subeq	r5, r5, r2
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	bf08      	it	eq
 800576c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005770:	4293      	cmp	r3, r2
 8005772:	bfc4      	itt	gt
 8005774:	1a9b      	subgt	r3, r3, r2
 8005776:	18ed      	addgt	r5, r5, r3
 8005778:	341a      	adds	r4, #26
 800577a:	42b5      	cmp	r5, r6
 800577c:	d11a      	bne.n	80057b4 <_printf_common+0xcc>
 800577e:	2000      	movs	r0, #0
 8005780:	e008      	b.n	8005794 <_printf_common+0xac>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4649      	mov	r1, r9
 8005788:	4638      	mov	r0, r7
 800578a:	47c0      	blx	r8
 800578c:	3001      	adds	r0, #1
 800578e:	d103      	bne.n	8005798 <_printf_common+0xb0>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	3501      	adds	r5, #1
 800579a:	e7c4      	b.n	8005726 <_printf_common+0x3e>
 800579c:	2030      	movs	r0, #48	; 0x30
 800579e:	18e1      	adds	r1, r4, r3
 80057a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057aa:	4422      	add	r2, r4
 80057ac:	3302      	adds	r3, #2
 80057ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057b2:	e7c5      	b.n	8005740 <_printf_common+0x58>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4622      	mov	r2, r4
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d0e6      	beq.n	8005790 <_printf_common+0xa8>
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7d9      	b.n	800577a <_printf_common+0x92>
	...

080057c8 <_printf_i>:
 80057c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	460c      	mov	r4, r1
 80057ce:	7e27      	ldrb	r7, [r4, #24]
 80057d0:	4691      	mov	r9, r2
 80057d2:	2f78      	cmp	r7, #120	; 0x78
 80057d4:	4680      	mov	r8, r0
 80057d6:	469a      	mov	sl, r3
 80057d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057de:	d807      	bhi.n	80057f0 <_printf_i+0x28>
 80057e0:	2f62      	cmp	r7, #98	; 0x62
 80057e2:	d80a      	bhi.n	80057fa <_printf_i+0x32>
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f000 80d9 	beq.w	800599c <_printf_i+0x1d4>
 80057ea:	2f58      	cmp	r7, #88	; 0x58
 80057ec:	f000 80a4 	beq.w	8005938 <_printf_i+0x170>
 80057f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f8:	e03a      	b.n	8005870 <_printf_i+0xa8>
 80057fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fe:	2b15      	cmp	r3, #21
 8005800:	d8f6      	bhi.n	80057f0 <_printf_i+0x28>
 8005802:	a001      	add	r0, pc, #4	; (adr r0, 8005808 <_printf_i+0x40>)
 8005804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005808:	08005861 	.word	0x08005861
 800580c:	08005875 	.word	0x08005875
 8005810:	080057f1 	.word	0x080057f1
 8005814:	080057f1 	.word	0x080057f1
 8005818:	080057f1 	.word	0x080057f1
 800581c:	080057f1 	.word	0x080057f1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057f1 	.word	0x080057f1
 8005828:	080057f1 	.word	0x080057f1
 800582c:	080057f1 	.word	0x080057f1
 8005830:	080057f1 	.word	0x080057f1
 8005834:	08005983 	.word	0x08005983
 8005838:	080058a5 	.word	0x080058a5
 800583c:	08005965 	.word	0x08005965
 8005840:	080057f1 	.word	0x080057f1
 8005844:	080057f1 	.word	0x080057f1
 8005848:	080059a5 	.word	0x080059a5
 800584c:	080057f1 	.word	0x080057f1
 8005850:	080058a5 	.word	0x080058a5
 8005854:	080057f1 	.word	0x080057f1
 8005858:	080057f1 	.word	0x080057f1
 800585c:	0800596d 	.word	0x0800596d
 8005860:	680b      	ldr	r3, [r1, #0]
 8005862:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	600a      	str	r2, [r1, #0]
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005870:	2301      	movs	r3, #1
 8005872:	e0a4      	b.n	80059be <_printf_i+0x1f6>
 8005874:	6825      	ldr	r5, [r4, #0]
 8005876:	6808      	ldr	r0, [r1, #0]
 8005878:	062e      	lsls	r6, r5, #24
 800587a:	f100 0304 	add.w	r3, r0, #4
 800587e:	d50a      	bpl.n	8005896 <_printf_i+0xce>
 8005880:	6805      	ldr	r5, [r0, #0]
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	2d00      	cmp	r5, #0
 8005886:	da03      	bge.n	8005890 <_printf_i+0xc8>
 8005888:	232d      	movs	r3, #45	; 0x2d
 800588a:	426d      	negs	r5, r5
 800588c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005890:	230a      	movs	r3, #10
 8005892:	485e      	ldr	r0, [pc, #376]	; (8005a0c <_printf_i+0x244>)
 8005894:	e019      	b.n	80058ca <_printf_i+0x102>
 8005896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800589a:	6805      	ldr	r5, [r0, #0]
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	bf18      	it	ne
 80058a0:	b22d      	sxthne	r5, r5
 80058a2:	e7ef      	b.n	8005884 <_printf_i+0xbc>
 80058a4:	680b      	ldr	r3, [r1, #0]
 80058a6:	6825      	ldr	r5, [r4, #0]
 80058a8:	1d18      	adds	r0, r3, #4
 80058aa:	6008      	str	r0, [r1, #0]
 80058ac:	0628      	lsls	r0, r5, #24
 80058ae:	d501      	bpl.n	80058b4 <_printf_i+0xec>
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	e002      	b.n	80058ba <_printf_i+0xf2>
 80058b4:	0669      	lsls	r1, r5, #25
 80058b6:	d5fb      	bpl.n	80058b0 <_printf_i+0xe8>
 80058b8:	881d      	ldrh	r5, [r3, #0]
 80058ba:	2f6f      	cmp	r7, #111	; 0x6f
 80058bc:	bf0c      	ite	eq
 80058be:	2308      	moveq	r3, #8
 80058c0:	230a      	movne	r3, #10
 80058c2:	4852      	ldr	r0, [pc, #328]	; (8005a0c <_printf_i+0x244>)
 80058c4:	2100      	movs	r1, #0
 80058c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ca:	6866      	ldr	r6, [r4, #4]
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	bfa8      	it	ge
 80058d0:	6821      	ldrge	r1, [r4, #0]
 80058d2:	60a6      	str	r6, [r4, #8]
 80058d4:	bfa4      	itt	ge
 80058d6:	f021 0104 	bicge.w	r1, r1, #4
 80058da:	6021      	strge	r1, [r4, #0]
 80058dc:	b90d      	cbnz	r5, 80058e2 <_printf_i+0x11a>
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d04d      	beq.n	800597e <_printf_i+0x1b6>
 80058e2:	4616      	mov	r6, r2
 80058e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80058e8:	fb03 5711 	mls	r7, r3, r1, r5
 80058ec:	5dc7      	ldrb	r7, [r0, r7]
 80058ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058f2:	462f      	mov	r7, r5
 80058f4:	42bb      	cmp	r3, r7
 80058f6:	460d      	mov	r5, r1
 80058f8:	d9f4      	bls.n	80058e4 <_printf_i+0x11c>
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d10b      	bne.n	8005916 <_printf_i+0x14e>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	07df      	lsls	r7, r3, #31
 8005902:	d508      	bpl.n	8005916 <_printf_i+0x14e>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6861      	ldr	r1, [r4, #4]
 8005908:	4299      	cmp	r1, r3
 800590a:	bfde      	ittt	le
 800590c:	2330      	movle	r3, #48	; 0x30
 800590e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005912:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005916:	1b92      	subs	r2, r2, r6
 8005918:	6122      	str	r2, [r4, #16]
 800591a:	464b      	mov	r3, r9
 800591c:	4621      	mov	r1, r4
 800591e:	4640      	mov	r0, r8
 8005920:	f8cd a000 	str.w	sl, [sp]
 8005924:	aa03      	add	r2, sp, #12
 8005926:	f7ff fedf 	bl	80056e8 <_printf_common>
 800592a:	3001      	adds	r0, #1
 800592c:	d14c      	bne.n	80059c8 <_printf_i+0x200>
 800592e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005932:	b004      	add	sp, #16
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	4834      	ldr	r0, [pc, #208]	; (8005a0c <_printf_i+0x244>)
 800593a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800593e:	680e      	ldr	r6, [r1, #0]
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	f856 5b04 	ldr.w	r5, [r6], #4
 8005946:	061f      	lsls	r7, r3, #24
 8005948:	600e      	str	r6, [r1, #0]
 800594a:	d514      	bpl.n	8005976 <_printf_i+0x1ae>
 800594c:	07d9      	lsls	r1, r3, #31
 800594e:	bf44      	itt	mi
 8005950:	f043 0320 	orrmi.w	r3, r3, #32
 8005954:	6023      	strmi	r3, [r4, #0]
 8005956:	b91d      	cbnz	r5, 8005960 <_printf_i+0x198>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	f023 0320 	bic.w	r3, r3, #32
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	2310      	movs	r3, #16
 8005962:	e7af      	b.n	80058c4 <_printf_i+0xfc>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	f043 0320 	orr.w	r3, r3, #32
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	2378      	movs	r3, #120	; 0x78
 800596e:	4828      	ldr	r0, [pc, #160]	; (8005a10 <_printf_i+0x248>)
 8005970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005974:	e7e3      	b.n	800593e <_printf_i+0x176>
 8005976:	065e      	lsls	r6, r3, #25
 8005978:	bf48      	it	mi
 800597a:	b2ad      	uxthmi	r5, r5
 800597c:	e7e6      	b.n	800594c <_printf_i+0x184>
 800597e:	4616      	mov	r6, r2
 8005980:	e7bb      	b.n	80058fa <_printf_i+0x132>
 8005982:	680b      	ldr	r3, [r1, #0]
 8005984:	6826      	ldr	r6, [r4, #0]
 8005986:	1d1d      	adds	r5, r3, #4
 8005988:	6960      	ldr	r0, [r4, #20]
 800598a:	600d      	str	r5, [r1, #0]
 800598c:	0635      	lsls	r5, r6, #24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	d501      	bpl.n	8005996 <_printf_i+0x1ce>
 8005992:	6018      	str	r0, [r3, #0]
 8005994:	e002      	b.n	800599c <_printf_i+0x1d4>
 8005996:	0671      	lsls	r1, r6, #25
 8005998:	d5fb      	bpl.n	8005992 <_printf_i+0x1ca>
 800599a:	8018      	strh	r0, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	4616      	mov	r6, r2
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	e7ba      	b.n	800591a <_printf_i+0x152>
 80059a4:	680b      	ldr	r3, [r1, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	600a      	str	r2, [r1, #0]
 80059aa:	681e      	ldr	r6, [r3, #0]
 80059ac:	2100      	movs	r1, #0
 80059ae:	4630      	mov	r0, r6
 80059b0:	6862      	ldr	r2, [r4, #4]
 80059b2:	f000 fed7 	bl	8006764 <memchr>
 80059b6:	b108      	cbz	r0, 80059bc <_printf_i+0x1f4>
 80059b8:	1b80      	subs	r0, r0, r6
 80059ba:	6060      	str	r0, [r4, #4]
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	2300      	movs	r3, #0
 80059c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c6:	e7a8      	b.n	800591a <_printf_i+0x152>
 80059c8:	4632      	mov	r2, r6
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	47d0      	blx	sl
 80059d2:	3001      	adds	r0, #1
 80059d4:	d0ab      	beq.n	800592e <_printf_i+0x166>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	079b      	lsls	r3, r3, #30
 80059da:	d413      	bmi.n	8005a04 <_printf_i+0x23c>
 80059dc:	68e0      	ldr	r0, [r4, #12]
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	4298      	cmp	r0, r3
 80059e2:	bfb8      	it	lt
 80059e4:	4618      	movlt	r0, r3
 80059e6:	e7a4      	b.n	8005932 <_printf_i+0x16a>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4632      	mov	r2, r6
 80059ec:	4649      	mov	r1, r9
 80059ee:	4640      	mov	r0, r8
 80059f0:	47d0      	blx	sl
 80059f2:	3001      	adds	r0, #1
 80059f4:	d09b      	beq.n	800592e <_printf_i+0x166>
 80059f6:	3501      	adds	r5, #1
 80059f8:	68e3      	ldr	r3, [r4, #12]
 80059fa:	9903      	ldr	r1, [sp, #12]
 80059fc:	1a5b      	subs	r3, r3, r1
 80059fe:	42ab      	cmp	r3, r5
 8005a00:	dcf2      	bgt.n	80059e8 <_printf_i+0x220>
 8005a02:	e7eb      	b.n	80059dc <_printf_i+0x214>
 8005a04:	2500      	movs	r5, #0
 8005a06:	f104 0619 	add.w	r6, r4, #25
 8005a0a:	e7f5      	b.n	80059f8 <_printf_i+0x230>
 8005a0c:	08007f36 	.word	0x08007f36
 8005a10:	08007f47 	.word	0x08007f47

08005a14 <siprintf>:
 8005a14:	b40e      	push	{r1, r2, r3}
 8005a16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a1a:	b500      	push	{lr}
 8005a1c:	b09c      	sub	sp, #112	; 0x70
 8005a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	9006      	str	r0, [sp, #24]
 8005a24:	9107      	str	r1, [sp, #28]
 8005a26:	9104      	str	r1, [sp, #16]
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <siprintf+0x38>)
 8005a2a:	4909      	ldr	r1, [pc, #36]	; (8005a50 <siprintf+0x3c>)
 8005a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a30:	9105      	str	r1, [sp, #20]
 8005a32:	6800      	ldr	r0, [r0, #0]
 8005a34:	a902      	add	r1, sp, #8
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	f001 fb42 	bl	80070c0 <_svfiprintf_r>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	9b02      	ldr	r3, [sp, #8]
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	b01c      	add	sp, #112	; 0x70
 8005a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a48:	b003      	add	sp, #12
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	ffff0208 	.word	0xffff0208

08005a54 <quorem>:
 8005a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	6903      	ldr	r3, [r0, #16]
 8005a5a:	690c      	ldr	r4, [r1, #16]
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	f2c0 8083 	blt.w	8005b6a <quorem+0x116>
 8005a64:	3c01      	subs	r4, #1
 8005a66:	f100 0514 	add.w	r5, r0, #20
 8005a6a:	f101 0814 	add.w	r8, r1, #20
 8005a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a8c:	d332      	bcc.n	8005af4 <quorem+0xa0>
 8005a8e:	f04f 0e00 	mov.w	lr, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	46ac      	mov	ip, r5
 8005a96:	46f2      	mov	sl, lr
 8005a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a9c:	b293      	uxth	r3, r2
 8005a9e:	fb06 e303 	mla	r3, r6, r3, lr
 8005aa2:	0c12      	lsrs	r2, r2, #16
 8005aa4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005aa8:	fb06 e202 	mla	r2, r6, r2, lr
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ebaa 0303 	sub.w	r3, sl, r3
 8005ab2:	f8dc a000 	ldr.w	sl, [ip]
 8005ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aba:	fa1f fa8a 	uxth.w	sl, sl
 8005abe:	4453      	add	r3, sl
 8005ac0:	fa1f fa82 	uxth.w	sl, r2
 8005ac4:	f8dc 2000 	ldr.w	r2, [ip]
 8005ac8:	4581      	cmp	r9, r0
 8005aca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005ace:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ad8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005adc:	f84c 3b04 	str.w	r3, [ip], #4
 8005ae0:	d2da      	bcs.n	8005a98 <quorem+0x44>
 8005ae2:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ae6:	b92b      	cbnz	r3, 8005af4 <quorem+0xa0>
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	3b04      	subs	r3, #4
 8005aec:	429d      	cmp	r5, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	d32f      	bcc.n	8005b52 <quorem+0xfe>
 8005af2:	613c      	str	r4, [r7, #16]
 8005af4:	4638      	mov	r0, r7
 8005af6:	f001 f8cb 	bl	8006c90 <__mcmp>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	db25      	blt.n	8005b4a <quorem+0xf6>
 8005afe:	4628      	mov	r0, r5
 8005b00:	f04f 0c00 	mov.w	ip, #0
 8005b04:	3601      	adds	r6, #1
 8005b06:	f858 1b04 	ldr.w	r1, [r8], #4
 8005b0a:	f8d0 e000 	ldr.w	lr, [r0]
 8005b0e:	b28b      	uxth	r3, r1
 8005b10:	ebac 0303 	sub.w	r3, ip, r3
 8005b14:	fa1f f28e 	uxth.w	r2, lr
 8005b18:	4413      	add	r3, r2
 8005b1a:	0c0a      	lsrs	r2, r1, #16
 8005b1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b2a:	45c1      	cmp	r9, r8
 8005b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b30:	f840 3b04 	str.w	r3, [r0], #4
 8005b34:	d2e7      	bcs.n	8005b06 <quorem+0xb2>
 8005b36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3e:	b922      	cbnz	r2, 8005b4a <quorem+0xf6>
 8005b40:	3b04      	subs	r3, #4
 8005b42:	429d      	cmp	r5, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	d30a      	bcc.n	8005b5e <quorem+0x10a>
 8005b48:	613c      	str	r4, [r7, #16]
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	b003      	add	sp, #12
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	3b04      	subs	r3, #4
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d1cb      	bne.n	8005af2 <quorem+0x9e>
 8005b5a:	3c01      	subs	r4, #1
 8005b5c:	e7c6      	b.n	8005aec <quorem+0x98>
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d1f0      	bne.n	8005b48 <quorem+0xf4>
 8005b66:	3c01      	subs	r4, #1
 8005b68:	e7eb      	b.n	8005b42 <quorem+0xee>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7ee      	b.n	8005b4c <quorem+0xf8>
	...

08005b70 <_dtoa_r>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	4616      	mov	r6, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b7a:	b099      	sub	sp, #100	; 0x64
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005b82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005b86:	b974      	cbnz	r4, 8005ba6 <_dtoa_r+0x36>
 8005b88:	2010      	movs	r0, #16
 8005b8a:	f000 fde3 	bl	8006754 <malloc>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6268      	str	r0, [r5, #36]	; 0x24
 8005b92:	b920      	cbnz	r0, 8005b9e <_dtoa_r+0x2e>
 8005b94:	21ea      	movs	r1, #234	; 0xea
 8005b96:	4bae      	ldr	r3, [pc, #696]	; (8005e50 <_dtoa_r+0x2e0>)
 8005b98:	48ae      	ldr	r0, [pc, #696]	; (8005e54 <_dtoa_r+0x2e4>)
 8005b9a:	f001 fba1 	bl	80072e0 <__assert_func>
 8005b9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ba2:	6004      	str	r4, [r0, #0]
 8005ba4:	60c4      	str	r4, [r0, #12]
 8005ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	b151      	cbz	r1, 8005bc2 <_dtoa_r+0x52>
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4093      	lsls	r3, r2
 8005bb2:	604a      	str	r2, [r1, #4]
 8005bb4:	608b      	str	r3, [r1, #8]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 fe30 	bl	800681c <_Bfree>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	1e3b      	subs	r3, r7, #0
 8005bc4:	bfaf      	iteee	ge
 8005bc6:	2300      	movge	r3, #0
 8005bc8:	2201      	movlt	r2, #1
 8005bca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	9305      	strlt	r3, [sp, #20]
 8005bd0:	bfa8      	it	ge
 8005bd2:	f8c8 3000 	strge.w	r3, [r8]
 8005bd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005bda:	4b9f      	ldr	r3, [pc, #636]	; (8005e58 <_dtoa_r+0x2e8>)
 8005bdc:	bfb8      	it	lt
 8005bde:	f8c8 2000 	strlt.w	r2, [r8]
 8005be2:	ea33 0309 	bics.w	r3, r3, r9
 8005be6:	d119      	bne.n	8005c1c <_dtoa_r+0xac>
 8005be8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bf4:	4333      	orrs	r3, r6
 8005bf6:	f000 8580 	beq.w	80066fa <_dtoa_r+0xb8a>
 8005bfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bfc:	b953      	cbnz	r3, 8005c14 <_dtoa_r+0xa4>
 8005bfe:	4b97      	ldr	r3, [pc, #604]	; (8005e5c <_dtoa_r+0x2ec>)
 8005c00:	e022      	b.n	8005c48 <_dtoa_r+0xd8>
 8005c02:	4b97      	ldr	r3, [pc, #604]	; (8005e60 <_dtoa_r+0x2f0>)
 8005c04:	9308      	str	r3, [sp, #32]
 8005c06:	3308      	adds	r3, #8
 8005c08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	9808      	ldr	r0, [sp, #32]
 8005c0e:	b019      	add	sp, #100	; 0x64
 8005c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c14:	4b91      	ldr	r3, [pc, #580]	; (8005e5c <_dtoa_r+0x2ec>)
 8005c16:	9308      	str	r3, [sp, #32]
 8005c18:	3303      	adds	r3, #3
 8005c1a:	e7f5      	b.n	8005c08 <_dtoa_r+0x98>
 8005c1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f7fa febc 	bl	80009a8 <__aeabi_dcmpeq>
 8005c30:	4680      	mov	r8, r0
 8005c32:	b158      	cbz	r0, 8005c4c <_dtoa_r+0xdc>
 8005c34:	2301      	movs	r3, #1
 8005c36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8559 	beq.w	80066f4 <_dtoa_r+0xb84>
 8005c42:	4888      	ldr	r0, [pc, #544]	; (8005e64 <_dtoa_r+0x2f4>)
 8005c44:	6018      	str	r0, [r3, #0]
 8005c46:	1e43      	subs	r3, r0, #1
 8005c48:	9308      	str	r3, [sp, #32]
 8005c4a:	e7df      	b.n	8005c0c <_dtoa_r+0x9c>
 8005c4c:	ab16      	add	r3, sp, #88	; 0x58
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	ab17      	add	r3, sp, #92	; 0x5c
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4628      	mov	r0, r5
 8005c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c5a:	f001 f8c5 	bl	8006de8 <__d2b>
 8005c5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c62:	4682      	mov	sl, r0
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d07e      	beq.n	8005d66 <_dtoa_r+0x1f6>
 8005c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005c7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005c7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005c82:	2200      	movs	r2, #0
 8005c84:	4b78      	ldr	r3, [pc, #480]	; (8005e68 <_dtoa_r+0x2f8>)
 8005c86:	f7fa fa6f 	bl	8000168 <__aeabi_dsub>
 8005c8a:	a36b      	add	r3, pc, #428	; (adr r3, 8005e38 <_dtoa_r+0x2c8>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f7fa fc22 	bl	80004d8 <__aeabi_dmul>
 8005c94:	a36a      	add	r3, pc, #424	; (adr r3, 8005e40 <_dtoa_r+0x2d0>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa fa67 	bl	800016c <__adddf3>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	f7fa fbae 	bl	8000404 <__aeabi_i2d>
 8005ca8:	a367      	add	r3, pc, #412	; (adr r3, 8005e48 <_dtoa_r+0x2d8>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fc13 	bl	80004d8 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	f7fa fa57 	bl	800016c <__adddf3>
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	460f      	mov	r7, r1
 8005cc2:	f7fa feb9 	bl	8000a38 <__aeabi_d2iz>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4681      	mov	r9, r0
 8005cca:	2300      	movs	r3, #0
 8005ccc:	4630      	mov	r0, r6
 8005cce:	4639      	mov	r1, r7
 8005cd0:	f7fa fe74 	bl	80009bc <__aeabi_dcmplt>
 8005cd4:	b148      	cbz	r0, 8005cea <_dtoa_r+0x17a>
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	f7fa fb94 	bl	8000404 <__aeabi_i2d>
 8005cdc:	4632      	mov	r2, r6
 8005cde:	463b      	mov	r3, r7
 8005ce0:	f7fa fe62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce4:	b908      	cbnz	r0, 8005cea <_dtoa_r+0x17a>
 8005ce6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005cea:	f1b9 0f16 	cmp.w	r9, #22
 8005cee:	d857      	bhi.n	8005da0 <_dtoa_r+0x230>
 8005cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cf4:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <_dtoa_r+0x2fc>)
 8005cf6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fe5d 	bl	80009bc <__aeabi_dcmplt>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d04e      	beq.n	8005da4 <_dtoa_r+0x234>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d10:	1b1c      	subs	r4, r3, r4
 8005d12:	1e63      	subs	r3, r4, #1
 8005d14:	9309      	str	r3, [sp, #36]	; 0x24
 8005d16:	bf49      	itett	mi
 8005d18:	f1c4 0301 	rsbmi	r3, r4, #1
 8005d1c:	2300      	movpl	r3, #0
 8005d1e:	9306      	strmi	r3, [sp, #24]
 8005d20:	2300      	movmi	r3, #0
 8005d22:	bf54      	ite	pl
 8005d24:	9306      	strpl	r3, [sp, #24]
 8005d26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005d28:	f1b9 0f00 	cmp.w	r9, #0
 8005d2c:	db3c      	blt.n	8005da8 <_dtoa_r+0x238>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d30:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005d34:	444b      	add	r3, r9
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	2300      	movs	r3, #0
 8005d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3e:	2b09      	cmp	r3, #9
 8005d40:	d86c      	bhi.n	8005e1c <_dtoa_r+0x2ac>
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	bfc4      	itt	gt
 8005d46:	3b04      	subgt	r3, #4
 8005d48:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4c:	bfc8      	it	gt
 8005d4e:	2400      	movgt	r4, #0
 8005d50:	f1a3 0302 	sub.w	r3, r3, #2
 8005d54:	bfd8      	it	le
 8005d56:	2401      	movle	r4, #1
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	f200 808b 	bhi.w	8005e74 <_dtoa_r+0x304>
 8005d5e:	e8df f003 	tbb	[pc, r3]
 8005d62:	4f2d      	.short	0x4f2d
 8005d64:	5b4d      	.short	0x5b4d
 8005d66:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005d6a:	441c      	add	r4, r3
 8005d6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	bfc3      	ittte	gt
 8005d74:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d78:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005d7c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005d80:	f1c3 0320 	rsble	r3, r3, #32
 8005d84:	bfc6      	itte	gt
 8005d86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d8a:	4318      	orrgt	r0, r3
 8005d8c:	fa06 f003 	lslle.w	r0, r6, r3
 8005d90:	f7fa fb28 	bl	80003e4 <__aeabi_ui2d>
 8005d94:	2301      	movs	r3, #1
 8005d96:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005d9a:	3c01      	subs	r4, #1
 8005d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d9e:	e770      	b.n	8005c82 <_dtoa_r+0x112>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e7b3      	b.n	8005d0c <_dtoa_r+0x19c>
 8005da4:	900f      	str	r0, [sp, #60]	; 0x3c
 8005da6:	e7b2      	b.n	8005d0e <_dtoa_r+0x19e>
 8005da8:	9b06      	ldr	r3, [sp, #24]
 8005daa:	eba3 0309 	sub.w	r3, r3, r9
 8005dae:	9306      	str	r3, [sp, #24]
 8005db0:	f1c9 0300 	rsb	r3, r9, #0
 8005db4:	930a      	str	r3, [sp, #40]	; 0x28
 8005db6:	2300      	movs	r3, #0
 8005db8:	930e      	str	r3, [sp, #56]	; 0x38
 8005dba:	e7bf      	b.n	8005d3c <_dtoa_r+0x1cc>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dc59      	bgt.n	8005e7a <_dtoa_r+0x30a>
 8005dc6:	f04f 0b01 	mov.w	fp, #1
 8005dca:	465b      	mov	r3, fp
 8005dcc:	f8cd b008 	str.w	fp, [sp, #8]
 8005dd0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005dd8:	6042      	str	r2, [r0, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f102 0614 	add.w	r6, r2, #20
 8005de0:	429e      	cmp	r6, r3
 8005de2:	6841      	ldr	r1, [r0, #4]
 8005de4:	d94f      	bls.n	8005e86 <_dtoa_r+0x316>
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 fcd8 	bl	800679c <_Balloc>
 8005dec:	9008      	str	r0, [sp, #32]
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d14d      	bne.n	8005e8e <_dtoa_r+0x31e>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <_dtoa_r+0x300>)
 8005dfa:	e6cd      	b.n	8005b98 <_dtoa_r+0x28>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e7de      	b.n	8005dbe <_dtoa_r+0x24e>
 8005e00:	2300      	movs	r3, #0
 8005e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e06:	eb09 0b03 	add.w	fp, r9, r3
 8005e0a:	f10b 0301 	add.w	r3, fp, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	bfb8      	it	lt
 8005e14:	2301      	movlt	r3, #1
 8005e16:	e7dd      	b.n	8005dd4 <_dtoa_r+0x264>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7f2      	b.n	8005e02 <_dtoa_r+0x292>
 8005e1c:	2401      	movs	r4, #1
 8005e1e:	2300      	movs	r3, #0
 8005e20:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e22:	9322      	str	r3, [sp, #136]	; 0x88
 8005e24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2312      	movs	r3, #18
 8005e2c:	f8cd b008 	str.w	fp, [sp, #8]
 8005e30:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e32:	e7cf      	b.n	8005dd4 <_dtoa_r+0x264>
 8005e34:	f3af 8000 	nop.w
 8005e38:	636f4361 	.word	0x636f4361
 8005e3c:	3fd287a7 	.word	0x3fd287a7
 8005e40:	8b60c8b3 	.word	0x8b60c8b3
 8005e44:	3fc68a28 	.word	0x3fc68a28
 8005e48:	509f79fb 	.word	0x509f79fb
 8005e4c:	3fd34413 	.word	0x3fd34413
 8005e50:	08007f65 	.word	0x08007f65
 8005e54:	08007f7c 	.word	0x08007f7c
 8005e58:	7ff00000 	.word	0x7ff00000
 8005e5c:	08007f61 	.word	0x08007f61
 8005e60:	08007f58 	.word	0x08007f58
 8005e64:	08007f35 	.word	0x08007f35
 8005e68:	3ff80000 	.word	0x3ff80000
 8005e6c:	08008078 	.word	0x08008078
 8005e70:	08007fdb 	.word	0x08007fdb
 8005e74:	2301      	movs	r3, #1
 8005e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e78:	e7d4      	b.n	8005e24 <_dtoa_r+0x2b4>
 8005e7a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005e7e:	465b      	mov	r3, fp
 8005e80:	f8cd b008 	str.w	fp, [sp, #8]
 8005e84:	e7a6      	b.n	8005dd4 <_dtoa_r+0x264>
 8005e86:	3101      	adds	r1, #1
 8005e88:	6041      	str	r1, [r0, #4]
 8005e8a:	0052      	lsls	r2, r2, #1
 8005e8c:	e7a6      	b.n	8005ddc <_dtoa_r+0x26c>
 8005e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e90:	9a08      	ldr	r2, [sp, #32]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	2b0e      	cmp	r3, #14
 8005e98:	f200 80a8 	bhi.w	8005fec <_dtoa_r+0x47c>
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	f000 80a5 	beq.w	8005fec <_dtoa_r+0x47c>
 8005ea2:	f1b9 0f00 	cmp.w	r9, #0
 8005ea6:	dd34      	ble.n	8005f12 <_dtoa_r+0x3a2>
 8005ea8:	4a9a      	ldr	r2, [pc, #616]	; (8006114 <_dtoa_r+0x5a4>)
 8005eaa:	f009 030f 	and.w	r3, r9, #15
 8005eae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005eb2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ebe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005ec2:	d016      	beq.n	8005ef2 <_dtoa_r+0x382>
 8005ec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ec8:	4b93      	ldr	r3, [pc, #588]	; (8006118 <_dtoa_r+0x5a8>)
 8005eca:	2703      	movs	r7, #3
 8005ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ed0:	f7fa fc2c 	bl	800072c <__aeabi_ddiv>
 8005ed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ed8:	f004 040f 	and.w	r4, r4, #15
 8005edc:	4e8e      	ldr	r6, [pc, #568]	; (8006118 <_dtoa_r+0x5a8>)
 8005ede:	b954      	cbnz	r4, 8005ef6 <_dtoa_r+0x386>
 8005ee0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee8:	f7fa fc20 	bl	800072c <__aeabi_ddiv>
 8005eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ef0:	e029      	b.n	8005f46 <_dtoa_r+0x3d6>
 8005ef2:	2702      	movs	r7, #2
 8005ef4:	e7f2      	b.n	8005edc <_dtoa_r+0x36c>
 8005ef6:	07e1      	lsls	r1, r4, #31
 8005ef8:	d508      	bpl.n	8005f0c <_dtoa_r+0x39c>
 8005efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005efe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f02:	f7fa fae9 	bl	80004d8 <__aeabi_dmul>
 8005f06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f0a:	3701      	adds	r7, #1
 8005f0c:	1064      	asrs	r4, r4, #1
 8005f0e:	3608      	adds	r6, #8
 8005f10:	e7e5      	b.n	8005ede <_dtoa_r+0x36e>
 8005f12:	f000 80a5 	beq.w	8006060 <_dtoa_r+0x4f0>
 8005f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f1a:	f1c9 0400 	rsb	r4, r9, #0
 8005f1e:	4b7d      	ldr	r3, [pc, #500]	; (8006114 <_dtoa_r+0x5a4>)
 8005f20:	f004 020f 	and.w	r2, r4, #15
 8005f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa fad4 	bl	80004d8 <__aeabi_dmul>
 8005f30:	2702      	movs	r7, #2
 8005f32:	2300      	movs	r3, #0
 8005f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f38:	4e77      	ldr	r6, [pc, #476]	; (8006118 <_dtoa_r+0x5a8>)
 8005f3a:	1124      	asrs	r4, r4, #4
 8005f3c:	2c00      	cmp	r4, #0
 8005f3e:	f040 8084 	bne.w	800604a <_dtoa_r+0x4da>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1d2      	bne.n	8005eec <_dtoa_r+0x37c>
 8005f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 808b 	beq.w	8006064 <_dtoa_r+0x4f4>
 8005f4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4b6f      	ldr	r3, [pc, #444]	; (800611c <_dtoa_r+0x5ac>)
 8005f5e:	f7fa fd2d 	bl	80009bc <__aeabi_dcmplt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d07e      	beq.n	8006064 <_dtoa_r+0x4f4>
 8005f66:	9b02      	ldr	r3, [sp, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d07b      	beq.n	8006064 <_dtoa_r+0x4f4>
 8005f6c:	f1bb 0f00 	cmp.w	fp, #0
 8005f70:	dd38      	ble.n	8005fe4 <_dtoa_r+0x474>
 8005f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f76:	2200      	movs	r2, #0
 8005f78:	4b69      	ldr	r3, [pc, #420]	; (8006120 <_dtoa_r+0x5b0>)
 8005f7a:	f7fa faad 	bl	80004d8 <__aeabi_dmul>
 8005f7e:	465c      	mov	r4, fp
 8005f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f84:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8005f88:	3701      	adds	r7, #1
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	f7fa fa3a 	bl	8000404 <__aeabi_i2d>
 8005f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f94:	f7fa faa0 	bl	80004d8 <__aeabi_dmul>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4b62      	ldr	r3, [pc, #392]	; (8006124 <_dtoa_r+0x5b4>)
 8005f9c:	f7fa f8e6 	bl	800016c <__adddf3>
 8005fa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fa8:	9611      	str	r6, [sp, #68]	; 0x44
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d15d      	bne.n	800606a <_dtoa_r+0x4fa>
 8005fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4b5c      	ldr	r3, [pc, #368]	; (8006128 <_dtoa_r+0x5b8>)
 8005fb6:	f7fa f8d7 	bl	8000168 <__aeabi_dsub>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fc2:	4633      	mov	r3, r6
 8005fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fc6:	f7fa fd17 	bl	80009f8 <__aeabi_dcmpgt>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f040 829e 	bne.w	800650c <_dtoa_r+0x99c>
 8005fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fd6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fda:	f7fa fcef 	bl	80009bc <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f040 8292 	bne.w	8006508 <_dtoa_r+0x998>
 8005fe4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005fe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f2c0 8153 	blt.w	800629a <_dtoa_r+0x72a>
 8005ff4:	f1b9 0f0e 	cmp.w	r9, #14
 8005ff8:	f300 814f 	bgt.w	800629a <_dtoa_r+0x72a>
 8005ffc:	4b45      	ldr	r3, [pc, #276]	; (8006114 <_dtoa_r+0x5a4>)
 8005ffe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006006:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800600a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800600c:	2b00      	cmp	r3, #0
 800600e:	f280 80db 	bge.w	80061c8 <_dtoa_r+0x658>
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f300 80d7 	bgt.w	80061c8 <_dtoa_r+0x658>
 800601a:	f040 8274 	bne.w	8006506 <_dtoa_r+0x996>
 800601e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006022:	2200      	movs	r2, #0
 8006024:	4b40      	ldr	r3, [pc, #256]	; (8006128 <_dtoa_r+0x5b8>)
 8006026:	f7fa fa57 	bl	80004d8 <__aeabi_dmul>
 800602a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602e:	f7fa fcd9 	bl	80009e4 <__aeabi_dcmpge>
 8006032:	9c02      	ldr	r4, [sp, #8]
 8006034:	4626      	mov	r6, r4
 8006036:	2800      	cmp	r0, #0
 8006038:	f040 824a 	bne.w	80064d0 <_dtoa_r+0x960>
 800603c:	2331      	movs	r3, #49	; 0x31
 800603e:	9f08      	ldr	r7, [sp, #32]
 8006040:	f109 0901 	add.w	r9, r9, #1
 8006044:	f807 3b01 	strb.w	r3, [r7], #1
 8006048:	e246      	b.n	80064d8 <_dtoa_r+0x968>
 800604a:	07e2      	lsls	r2, r4, #31
 800604c:	d505      	bpl.n	800605a <_dtoa_r+0x4ea>
 800604e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	2301      	movs	r3, #1
 8006058:	3701      	adds	r7, #1
 800605a:	1064      	asrs	r4, r4, #1
 800605c:	3608      	adds	r6, #8
 800605e:	e76d      	b.n	8005f3c <_dtoa_r+0x3cc>
 8006060:	2702      	movs	r7, #2
 8006062:	e770      	b.n	8005f46 <_dtoa_r+0x3d6>
 8006064:	46c8      	mov	r8, r9
 8006066:	9c02      	ldr	r4, [sp, #8]
 8006068:	e78f      	b.n	8005f8a <_dtoa_r+0x41a>
 800606a:	9908      	ldr	r1, [sp, #32]
 800606c:	4b29      	ldr	r3, [pc, #164]	; (8006114 <_dtoa_r+0x5a4>)
 800606e:	4421      	add	r1, r4
 8006070:	9112      	str	r1, [sp, #72]	; 0x48
 8006072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006078:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800607c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006080:	2900      	cmp	r1, #0
 8006082:	d055      	beq.n	8006130 <_dtoa_r+0x5c0>
 8006084:	2000      	movs	r0, #0
 8006086:	4929      	ldr	r1, [pc, #164]	; (800612c <_dtoa_r+0x5bc>)
 8006088:	f7fa fb50 	bl	800072c <__aeabi_ddiv>
 800608c:	463b      	mov	r3, r7
 800608e:	4632      	mov	r2, r6
 8006090:	f7fa f86a 	bl	8000168 <__aeabi_dsub>
 8006094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006098:	9f08      	ldr	r7, [sp, #32]
 800609a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609e:	f7fa fccb 	bl	8000a38 <__aeabi_d2iz>
 80060a2:	4604      	mov	r4, r0
 80060a4:	f7fa f9ae 	bl	8000404 <__aeabi_i2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	3430      	adds	r4, #48	; 0x30
 80060ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060c2:	f807 4b01 	strb.w	r4, [r7], #1
 80060c6:	f7fa fc79 	bl	80009bc <__aeabi_dcmplt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d174      	bne.n	80061b8 <_dtoa_r+0x648>
 80060ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060d2:	2000      	movs	r0, #0
 80060d4:	4911      	ldr	r1, [pc, #68]	; (800611c <_dtoa_r+0x5ac>)
 80060d6:	f7fa f847 	bl	8000168 <__aeabi_dsub>
 80060da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060de:	f7fa fc6d 	bl	80009bc <__aeabi_dcmplt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 80b6 	bne.w	8006254 <_dtoa_r+0x6e4>
 80060e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ea:	429f      	cmp	r7, r3
 80060ec:	f43f af7a 	beq.w	8005fe4 <_dtoa_r+0x474>
 80060f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060f4:	2200      	movs	r2, #0
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <_dtoa_r+0x5b0>)
 80060f8:	f7fa f9ee 	bl	80004d8 <__aeabi_dmul>
 80060fc:	2200      	movs	r2, #0
 80060fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <_dtoa_r+0x5b0>)
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006110:	e7c3      	b.n	800609a <_dtoa_r+0x52a>
 8006112:	bf00      	nop
 8006114:	08008078 	.word	0x08008078
 8006118:	08008050 	.word	0x08008050
 800611c:	3ff00000 	.word	0x3ff00000
 8006120:	40240000 	.word	0x40240000
 8006124:	401c0000 	.word	0x401c0000
 8006128:	40140000 	.word	0x40140000
 800612c:	3fe00000 	.word	0x3fe00000
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa f9d0 	bl	80004d8 <__aeabi_dmul>
 8006138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800613a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800613e:	9c08      	ldr	r4, [sp, #32]
 8006140:	9314      	str	r3, [sp, #80]	; 0x50
 8006142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006146:	f7fa fc77 	bl	8000a38 <__aeabi_d2iz>
 800614a:	9015      	str	r0, [sp, #84]	; 0x54
 800614c:	f7fa f95a 	bl	8000404 <__aeabi_i2d>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006158:	f7fa f806 	bl	8000168 <__aeabi_dsub>
 800615c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800615e:	4606      	mov	r6, r0
 8006160:	3330      	adds	r3, #48	; 0x30
 8006162:	f804 3b01 	strb.w	r3, [r4], #1
 8006166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006168:	460f      	mov	r7, r1
 800616a:	429c      	cmp	r4, r3
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	d124      	bne.n	80061bc <_dtoa_r+0x64c>
 8006172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006176:	4bb3      	ldr	r3, [pc, #716]	; (8006444 <_dtoa_r+0x8d4>)
 8006178:	f7f9 fff8 	bl	800016c <__adddf3>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8006188:	2800      	cmp	r0, #0
 800618a:	d162      	bne.n	8006252 <_dtoa_r+0x6e2>
 800618c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006190:	2000      	movs	r0, #0
 8006192:	49ac      	ldr	r1, [pc, #688]	; (8006444 <_dtoa_r+0x8d4>)
 8006194:	f7f9 ffe8 	bl	8000168 <__aeabi_dsub>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4630      	mov	r0, r6
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa fc0c 	bl	80009bc <__aeabi_dcmplt>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f43f af1d 	beq.w	8005fe4 <_dtoa_r+0x474>
 80061aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80061ac:	1e7b      	subs	r3, r7, #1
 80061ae:	9314      	str	r3, [sp, #80]	; 0x50
 80061b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80061b4:	2b30      	cmp	r3, #48	; 0x30
 80061b6:	d0f8      	beq.n	80061aa <_dtoa_r+0x63a>
 80061b8:	46c1      	mov	r9, r8
 80061ba:	e03a      	b.n	8006232 <_dtoa_r+0x6c2>
 80061bc:	4ba2      	ldr	r3, [pc, #648]	; (8006448 <_dtoa_r+0x8d8>)
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c6:	e7bc      	b.n	8006142 <_dtoa_r+0x5d2>
 80061c8:	9f08      	ldr	r7, [sp, #32]
 80061ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d2:	f7fa faab 	bl	800072c <__aeabi_ddiv>
 80061d6:	f7fa fc2f 	bl	8000a38 <__aeabi_d2iz>
 80061da:	4604      	mov	r4, r0
 80061dc:	f7fa f912 	bl	8000404 <__aeabi_i2d>
 80061e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061e4:	f7fa f978 	bl	80004d8 <__aeabi_dmul>
 80061e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80061ec:	460b      	mov	r3, r1
 80061ee:	4602      	mov	r2, r0
 80061f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f4:	f7f9 ffb8 	bl	8000168 <__aeabi_dsub>
 80061f8:	f807 6b01 	strb.w	r6, [r7], #1
 80061fc:	9e08      	ldr	r6, [sp, #32]
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	1bbe      	subs	r6, r7, r6
 8006202:	42b3      	cmp	r3, r6
 8006204:	d13a      	bne.n	800627c <_dtoa_r+0x70c>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	f7f9 ffaf 	bl	800016c <__adddf3>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800621a:	f7fa fbed 	bl	80009f8 <__aeabi_dcmpgt>
 800621e:	bb58      	cbnz	r0, 8006278 <_dtoa_r+0x708>
 8006220:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	f7fa fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800622c:	b108      	cbz	r0, 8006232 <_dtoa_r+0x6c2>
 800622e:	07e1      	lsls	r1, r4, #31
 8006230:	d422      	bmi.n	8006278 <_dtoa_r+0x708>
 8006232:	4628      	mov	r0, r5
 8006234:	4651      	mov	r1, sl
 8006236:	f000 faf1 	bl	800681c <_Bfree>
 800623a:	2300      	movs	r3, #0
 800623c:	703b      	strb	r3, [r7, #0]
 800623e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006240:	f109 0001 	add.w	r0, r9, #1
 8006244:	6018      	str	r0, [r3, #0]
 8006246:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006248:	2b00      	cmp	r3, #0
 800624a:	f43f acdf 	beq.w	8005c0c <_dtoa_r+0x9c>
 800624e:	601f      	str	r7, [r3, #0]
 8006250:	e4dc      	b.n	8005c0c <_dtoa_r+0x9c>
 8006252:	4627      	mov	r7, r4
 8006254:	463b      	mov	r3, r7
 8006256:	461f      	mov	r7, r3
 8006258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800625c:	2a39      	cmp	r2, #57	; 0x39
 800625e:	d107      	bne.n	8006270 <_dtoa_r+0x700>
 8006260:	9a08      	ldr	r2, [sp, #32]
 8006262:	429a      	cmp	r2, r3
 8006264:	d1f7      	bne.n	8006256 <_dtoa_r+0x6e6>
 8006266:	2230      	movs	r2, #48	; 0x30
 8006268:	9908      	ldr	r1, [sp, #32]
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	700a      	strb	r2, [r1, #0]
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	3201      	adds	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e79f      	b.n	80061b8 <_dtoa_r+0x648>
 8006278:	46c8      	mov	r8, r9
 800627a:	e7eb      	b.n	8006254 <_dtoa_r+0x6e4>
 800627c:	2200      	movs	r2, #0
 800627e:	4b72      	ldr	r3, [pc, #456]	; (8006448 <_dtoa_r+0x8d8>)
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800628c:	2200      	movs	r2, #0
 800628e:	2300      	movs	r3, #0
 8006290:	f7fa fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 8006294:	2800      	cmp	r0, #0
 8006296:	d098      	beq.n	80061ca <_dtoa_r+0x65a>
 8006298:	e7cb      	b.n	8006232 <_dtoa_r+0x6c2>
 800629a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800629c:	2a00      	cmp	r2, #0
 800629e:	f000 80cd 	beq.w	800643c <_dtoa_r+0x8cc>
 80062a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062a4:	2a01      	cmp	r2, #1
 80062a6:	f300 80af 	bgt.w	8006408 <_dtoa_r+0x898>
 80062aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ac:	2a00      	cmp	r2, #0
 80062ae:	f000 80a7 	beq.w	8006400 <_dtoa_r+0x890>
 80062b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062b8:	9f06      	ldr	r7, [sp, #24]
 80062ba:	9a06      	ldr	r2, [sp, #24]
 80062bc:	2101      	movs	r1, #1
 80062be:	441a      	add	r2, r3
 80062c0:	9206      	str	r2, [sp, #24]
 80062c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c4:	4628      	mov	r0, r5
 80062c6:	441a      	add	r2, r3
 80062c8:	9209      	str	r2, [sp, #36]	; 0x24
 80062ca:	f000 fb61 	bl	8006990 <__i2b>
 80062ce:	4606      	mov	r6, r0
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	dd0c      	ble.n	80062ee <_dtoa_r+0x77e>
 80062d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dd09      	ble.n	80062ee <_dtoa_r+0x77e>
 80062da:	42bb      	cmp	r3, r7
 80062dc:	bfa8      	it	ge
 80062de:	463b      	movge	r3, r7
 80062e0:	9a06      	ldr	r2, [sp, #24]
 80062e2:	1aff      	subs	r7, r7, r3
 80062e4:	1ad2      	subs	r2, r2, r3
 80062e6:	9206      	str	r2, [sp, #24]
 80062e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	b1f3      	cbz	r3, 8006330 <_dtoa_r+0x7c0>
 80062f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a9 	beq.w	800644c <_dtoa_r+0x8dc>
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	dd10      	ble.n	8006320 <_dtoa_r+0x7b0>
 80062fe:	4631      	mov	r1, r6
 8006300:	4622      	mov	r2, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 fbfe 	bl	8006b04 <__pow5mult>
 8006308:	4652      	mov	r2, sl
 800630a:	4601      	mov	r1, r0
 800630c:	4606      	mov	r6, r0
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fb54 	bl	80069bc <__multiply>
 8006314:	4680      	mov	r8, r0
 8006316:	4651      	mov	r1, sl
 8006318:	4628      	mov	r0, r5
 800631a:	f000 fa7f 	bl	800681c <_Bfree>
 800631e:	46c2      	mov	sl, r8
 8006320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006322:	1b1a      	subs	r2, r3, r4
 8006324:	d004      	beq.n	8006330 <_dtoa_r+0x7c0>
 8006326:	4651      	mov	r1, sl
 8006328:	4628      	mov	r0, r5
 800632a:	f000 fbeb 	bl	8006b04 <__pow5mult>
 800632e:	4682      	mov	sl, r0
 8006330:	2101      	movs	r1, #1
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fb2c 	bl	8006990 <__i2b>
 8006338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800633a:	4604      	mov	r4, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	f340 8087 	ble.w	8006450 <_dtoa_r+0x8e0>
 8006342:	461a      	mov	r2, r3
 8006344:	4601      	mov	r1, r0
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fbdc 	bl	8006b04 <__pow5mult>
 800634c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800634e:	4604      	mov	r4, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	f340 8080 	ble.w	8006456 <_dtoa_r+0x8e6>
 8006356:	f04f 0800 	mov.w	r8, #0
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006360:	6918      	ldr	r0, [r3, #16]
 8006362:	f000 fac7 	bl	80068f4 <__hi0bits>
 8006366:	f1c0 0020 	rsb	r0, r0, #32
 800636a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800636c:	4418      	add	r0, r3
 800636e:	f010 001f 	ands.w	r0, r0, #31
 8006372:	f000 8092 	beq.w	800649a <_dtoa_r+0x92a>
 8006376:	f1c0 0320 	rsb	r3, r0, #32
 800637a:	2b04      	cmp	r3, #4
 800637c:	f340 808a 	ble.w	8006494 <_dtoa_r+0x924>
 8006380:	f1c0 001c 	rsb	r0, r0, #28
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	4407      	add	r7, r0
 8006388:	4403      	add	r3, r0
 800638a:	9306      	str	r3, [sp, #24]
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	4403      	add	r3, r0
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	dd05      	ble.n	80063a4 <_dtoa_r+0x834>
 8006398:	4651      	mov	r1, sl
 800639a:	461a      	mov	r2, r3
 800639c:	4628      	mov	r0, r5
 800639e:	f000 fc0b 	bl	8006bb8 <__lshift>
 80063a2:	4682      	mov	sl, r0
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dd05      	ble.n	80063b6 <_dtoa_r+0x846>
 80063aa:	4621      	mov	r1, r4
 80063ac:	461a      	mov	r2, r3
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fc02 	bl	8006bb8 <__lshift>
 80063b4:	4604      	mov	r4, r0
 80063b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d070      	beq.n	800649e <_dtoa_r+0x92e>
 80063bc:	4621      	mov	r1, r4
 80063be:	4650      	mov	r0, sl
 80063c0:	f000 fc66 	bl	8006c90 <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	da6a      	bge.n	800649e <_dtoa_r+0x92e>
 80063c8:	2300      	movs	r3, #0
 80063ca:	4651      	mov	r1, sl
 80063cc:	220a      	movs	r2, #10
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 fa46 	bl	8006860 <__multadd>
 80063d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d6:	4682      	mov	sl, r0
 80063d8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8193 	beq.w	8006708 <_dtoa_r+0xb98>
 80063e2:	4631      	mov	r1, r6
 80063e4:	2300      	movs	r3, #0
 80063e6:	220a      	movs	r2, #10
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 fa39 	bl	8006860 <__multadd>
 80063ee:	f1bb 0f00 	cmp.w	fp, #0
 80063f2:	4606      	mov	r6, r0
 80063f4:	f300 8093 	bgt.w	800651e <_dtoa_r+0x9ae>
 80063f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	dc57      	bgt.n	80064ae <_dtoa_r+0x93e>
 80063fe:	e08e      	b.n	800651e <_dtoa_r+0x9ae>
 8006400:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006402:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006406:	e756      	b.n	80062b6 <_dtoa_r+0x746>
 8006408:	9b02      	ldr	r3, [sp, #8]
 800640a:	1e5c      	subs	r4, r3, #1
 800640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640e:	42a3      	cmp	r3, r4
 8006410:	bfb7      	itett	lt
 8006412:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006414:	1b1c      	subge	r4, r3, r4
 8006416:	1ae2      	sublt	r2, r4, r3
 8006418:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800641a:	bfbe      	ittt	lt
 800641c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800641e:	189b      	addlt	r3, r3, r2
 8006420:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006422:	9b02      	ldr	r3, [sp, #8]
 8006424:	bfb8      	it	lt
 8006426:	2400      	movlt	r4, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfbb      	ittet	lt
 800642c:	9b06      	ldrlt	r3, [sp, #24]
 800642e:	9a02      	ldrlt	r2, [sp, #8]
 8006430:	9f06      	ldrge	r7, [sp, #24]
 8006432:	1a9f      	sublt	r7, r3, r2
 8006434:	bfac      	ite	ge
 8006436:	9b02      	ldrge	r3, [sp, #8]
 8006438:	2300      	movlt	r3, #0
 800643a:	e73e      	b.n	80062ba <_dtoa_r+0x74a>
 800643c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800643e:	9f06      	ldr	r7, [sp, #24]
 8006440:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006442:	e745      	b.n	80062d0 <_dtoa_r+0x760>
 8006444:	3fe00000 	.word	0x3fe00000
 8006448:	40240000 	.word	0x40240000
 800644c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800644e:	e76a      	b.n	8006326 <_dtoa_r+0x7b6>
 8006450:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006452:	2b01      	cmp	r3, #1
 8006454:	dc19      	bgt.n	800648a <_dtoa_r+0x91a>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	b9bb      	cbnz	r3, 800648a <_dtoa_r+0x91a>
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006460:	b99b      	cbnz	r3, 800648a <_dtoa_r+0x91a>
 8006462:	9b05      	ldr	r3, [sp, #20]
 8006464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006468:	0d1b      	lsrs	r3, r3, #20
 800646a:	051b      	lsls	r3, r3, #20
 800646c:	b183      	cbz	r3, 8006490 <_dtoa_r+0x920>
 800646e:	f04f 0801 	mov.w	r8, #1
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	3301      	adds	r3, #1
 8006476:	9306      	str	r3, [sp, #24]
 8006478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647a:	3301      	adds	r3, #1
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f af6a 	bne.w	800635a <_dtoa_r+0x7ea>
 8006486:	2001      	movs	r0, #1
 8006488:	e76f      	b.n	800636a <_dtoa_r+0x7fa>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	e7f6      	b.n	800647e <_dtoa_r+0x90e>
 8006490:	4698      	mov	r8, r3
 8006492:	e7f4      	b.n	800647e <_dtoa_r+0x90e>
 8006494:	f43f af7d 	beq.w	8006392 <_dtoa_r+0x822>
 8006498:	4618      	mov	r0, r3
 800649a:	301c      	adds	r0, #28
 800649c:	e772      	b.n	8006384 <_dtoa_r+0x814>
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dc36      	bgt.n	8006512 <_dtoa_r+0x9a2>
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	dd33      	ble.n	8006512 <_dtoa_r+0x9a2>
 80064aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80064ae:	f1bb 0f00 	cmp.w	fp, #0
 80064b2:	d10d      	bne.n	80064d0 <_dtoa_r+0x960>
 80064b4:	4621      	mov	r1, r4
 80064b6:	465b      	mov	r3, fp
 80064b8:	2205      	movs	r2, #5
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f9d0 	bl	8006860 <__multadd>
 80064c0:	4601      	mov	r1, r0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4650      	mov	r0, sl
 80064c6:	f000 fbe3 	bl	8006c90 <__mcmp>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f73f adb6 	bgt.w	800603c <_dtoa_r+0x4cc>
 80064d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064d2:	9f08      	ldr	r7, [sp, #32]
 80064d4:	ea6f 0903 	mvn.w	r9, r3
 80064d8:	f04f 0800 	mov.w	r8, #0
 80064dc:	4621      	mov	r1, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f99c 	bl	800681c <_Bfree>
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	f43f aea4 	beq.w	8006232 <_dtoa_r+0x6c2>
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	d005      	beq.n	80064fc <_dtoa_r+0x98c>
 80064f0:	45b0      	cmp	r8, r6
 80064f2:	d003      	beq.n	80064fc <_dtoa_r+0x98c>
 80064f4:	4641      	mov	r1, r8
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 f990 	bl	800681c <_Bfree>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 f98c 	bl	800681c <_Bfree>
 8006504:	e695      	b.n	8006232 <_dtoa_r+0x6c2>
 8006506:	2400      	movs	r4, #0
 8006508:	4626      	mov	r6, r4
 800650a:	e7e1      	b.n	80064d0 <_dtoa_r+0x960>
 800650c:	46c1      	mov	r9, r8
 800650e:	4626      	mov	r6, r4
 8006510:	e594      	b.n	800603c <_dtoa_r+0x4cc>
 8006512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006514:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80fc 	beq.w	8006716 <_dtoa_r+0xba6>
 800651e:	2f00      	cmp	r7, #0
 8006520:	dd05      	ble.n	800652e <_dtoa_r+0x9be>
 8006522:	4631      	mov	r1, r6
 8006524:	463a      	mov	r2, r7
 8006526:	4628      	mov	r0, r5
 8006528:	f000 fb46 	bl	8006bb8 <__lshift>
 800652c:	4606      	mov	r6, r0
 800652e:	f1b8 0f00 	cmp.w	r8, #0
 8006532:	d05c      	beq.n	80065ee <_dtoa_r+0xa7e>
 8006534:	4628      	mov	r0, r5
 8006536:	6871      	ldr	r1, [r6, #4]
 8006538:	f000 f930 	bl	800679c <_Balloc>
 800653c:	4607      	mov	r7, r0
 800653e:	b928      	cbnz	r0, 800654c <_dtoa_r+0x9dc>
 8006540:	4602      	mov	r2, r0
 8006542:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006546:	4b7e      	ldr	r3, [pc, #504]	; (8006740 <_dtoa_r+0xbd0>)
 8006548:	f7ff bb26 	b.w	8005b98 <_dtoa_r+0x28>
 800654c:	6932      	ldr	r2, [r6, #16]
 800654e:	f106 010c 	add.w	r1, r6, #12
 8006552:	3202      	adds	r2, #2
 8006554:	0092      	lsls	r2, r2, #2
 8006556:	300c      	adds	r0, #12
 8006558:	f000 f912 	bl	8006780 <memcpy>
 800655c:	2201      	movs	r2, #1
 800655e:	4639      	mov	r1, r7
 8006560:	4628      	mov	r0, r5
 8006562:	f000 fb29 	bl	8006bb8 <__lshift>
 8006566:	46b0      	mov	r8, r6
 8006568:	4606      	mov	r6, r0
 800656a:	9b08      	ldr	r3, [sp, #32]
 800656c:	3301      	adds	r3, #1
 800656e:	9302      	str	r3, [sp, #8]
 8006570:	9b08      	ldr	r3, [sp, #32]
 8006572:	445b      	add	r3, fp
 8006574:	930a      	str	r3, [sp, #40]	; 0x28
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	9309      	str	r3, [sp, #36]	; 0x24
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	4621      	mov	r1, r4
 8006582:	4650      	mov	r0, sl
 8006584:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006588:	f7ff fa64 	bl	8005a54 <quorem>
 800658c:	4603      	mov	r3, r0
 800658e:	4641      	mov	r1, r8
 8006590:	3330      	adds	r3, #48	; 0x30
 8006592:	9004      	str	r0, [sp, #16]
 8006594:	4650      	mov	r0, sl
 8006596:	930b      	str	r3, [sp, #44]	; 0x2c
 8006598:	f000 fb7a 	bl	8006c90 <__mcmp>
 800659c:	4632      	mov	r2, r6
 800659e:	9006      	str	r0, [sp, #24]
 80065a0:	4621      	mov	r1, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 fb90 	bl	8006cc8 <__mdiff>
 80065a8:	68c2      	ldr	r2, [r0, #12]
 80065aa:	4607      	mov	r7, r0
 80065ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ae:	bb02      	cbnz	r2, 80065f2 <_dtoa_r+0xa82>
 80065b0:	4601      	mov	r1, r0
 80065b2:	4650      	mov	r0, sl
 80065b4:	f000 fb6c 	bl	8006c90 <__mcmp>
 80065b8:	4602      	mov	r2, r0
 80065ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065bc:	4639      	mov	r1, r7
 80065be:	4628      	mov	r0, r5
 80065c0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80065c4:	f000 f92a 	bl	800681c <_Bfree>
 80065c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065cc:	9f02      	ldr	r7, [sp, #8]
 80065ce:	ea43 0102 	orr.w	r1, r3, r2
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	430b      	orrs	r3, r1
 80065d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d8:	d10d      	bne.n	80065f6 <_dtoa_r+0xa86>
 80065da:	2b39      	cmp	r3, #57	; 0x39
 80065dc:	d027      	beq.n	800662e <_dtoa_r+0xabe>
 80065de:	9a06      	ldr	r2, [sp, #24]
 80065e0:	2a00      	cmp	r2, #0
 80065e2:	dd01      	ble.n	80065e8 <_dtoa_r+0xa78>
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	3331      	adds	r3, #49	; 0x31
 80065e8:	f88b 3000 	strb.w	r3, [fp]
 80065ec:	e776      	b.n	80064dc <_dtoa_r+0x96c>
 80065ee:	4630      	mov	r0, r6
 80065f0:	e7b9      	b.n	8006566 <_dtoa_r+0x9f6>
 80065f2:	2201      	movs	r2, #1
 80065f4:	e7e2      	b.n	80065bc <_dtoa_r+0xa4c>
 80065f6:	9906      	ldr	r1, [sp, #24]
 80065f8:	2900      	cmp	r1, #0
 80065fa:	db04      	blt.n	8006606 <_dtoa_r+0xa96>
 80065fc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80065fe:	4301      	orrs	r1, r0
 8006600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006602:	4301      	orrs	r1, r0
 8006604:	d120      	bne.n	8006648 <_dtoa_r+0xad8>
 8006606:	2a00      	cmp	r2, #0
 8006608:	ddee      	ble.n	80065e8 <_dtoa_r+0xa78>
 800660a:	4651      	mov	r1, sl
 800660c:	2201      	movs	r2, #1
 800660e:	4628      	mov	r0, r5
 8006610:	9302      	str	r3, [sp, #8]
 8006612:	f000 fad1 	bl	8006bb8 <__lshift>
 8006616:	4621      	mov	r1, r4
 8006618:	4682      	mov	sl, r0
 800661a:	f000 fb39 	bl	8006c90 <__mcmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	dc02      	bgt.n	800662a <_dtoa_r+0xaba>
 8006624:	d1e0      	bne.n	80065e8 <_dtoa_r+0xa78>
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d5de      	bpl.n	80065e8 <_dtoa_r+0xa78>
 800662a:	2b39      	cmp	r3, #57	; 0x39
 800662c:	d1da      	bne.n	80065e4 <_dtoa_r+0xa74>
 800662e:	2339      	movs	r3, #57	; 0x39
 8006630:	f88b 3000 	strb.w	r3, [fp]
 8006634:	463b      	mov	r3, r7
 8006636:	461f      	mov	r7, r3
 8006638:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800663c:	3b01      	subs	r3, #1
 800663e:	2a39      	cmp	r2, #57	; 0x39
 8006640:	d050      	beq.n	80066e4 <_dtoa_r+0xb74>
 8006642:	3201      	adds	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e749      	b.n	80064dc <_dtoa_r+0x96c>
 8006648:	2a00      	cmp	r2, #0
 800664a:	dd03      	ble.n	8006654 <_dtoa_r+0xae4>
 800664c:	2b39      	cmp	r3, #57	; 0x39
 800664e:	d0ee      	beq.n	800662e <_dtoa_r+0xabe>
 8006650:	3301      	adds	r3, #1
 8006652:	e7c9      	b.n	80065e8 <_dtoa_r+0xa78>
 8006654:	9a02      	ldr	r2, [sp, #8]
 8006656:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006658:	f802 3c01 	strb.w	r3, [r2, #-1]
 800665c:	428a      	cmp	r2, r1
 800665e:	d02a      	beq.n	80066b6 <_dtoa_r+0xb46>
 8006660:	4651      	mov	r1, sl
 8006662:	2300      	movs	r3, #0
 8006664:	220a      	movs	r2, #10
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f8fa 	bl	8006860 <__multadd>
 800666c:	45b0      	cmp	r8, r6
 800666e:	4682      	mov	sl, r0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	f04f 020a 	mov.w	r2, #10
 8006678:	4641      	mov	r1, r8
 800667a:	4628      	mov	r0, r5
 800667c:	d107      	bne.n	800668e <_dtoa_r+0xb1e>
 800667e:	f000 f8ef 	bl	8006860 <__multadd>
 8006682:	4680      	mov	r8, r0
 8006684:	4606      	mov	r6, r0
 8006686:	9b02      	ldr	r3, [sp, #8]
 8006688:	3301      	adds	r3, #1
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	e777      	b.n	800657e <_dtoa_r+0xa0e>
 800668e:	f000 f8e7 	bl	8006860 <__multadd>
 8006692:	4631      	mov	r1, r6
 8006694:	4680      	mov	r8, r0
 8006696:	2300      	movs	r3, #0
 8006698:	220a      	movs	r2, #10
 800669a:	4628      	mov	r0, r5
 800669c:	f000 f8e0 	bl	8006860 <__multadd>
 80066a0:	4606      	mov	r6, r0
 80066a2:	e7f0      	b.n	8006686 <_dtoa_r+0xb16>
 80066a4:	f1bb 0f00 	cmp.w	fp, #0
 80066a8:	bfcc      	ite	gt
 80066aa:	465f      	movgt	r7, fp
 80066ac:	2701      	movle	r7, #1
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	9a08      	ldr	r2, [sp, #32]
 80066b4:	4417      	add	r7, r2
 80066b6:	4651      	mov	r1, sl
 80066b8:	2201      	movs	r2, #1
 80066ba:	4628      	mov	r0, r5
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	f000 fa7b 	bl	8006bb8 <__lshift>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4682      	mov	sl, r0
 80066c6:	f000 fae3 	bl	8006c90 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	dcb2      	bgt.n	8006634 <_dtoa_r+0xac4>
 80066ce:	d102      	bne.n	80066d6 <_dtoa_r+0xb66>
 80066d0:	9b02      	ldr	r3, [sp, #8]
 80066d2:	07db      	lsls	r3, r3, #31
 80066d4:	d4ae      	bmi.n	8006634 <_dtoa_r+0xac4>
 80066d6:	463b      	mov	r3, r7
 80066d8:	461f      	mov	r7, r3
 80066da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066de:	2a30      	cmp	r2, #48	; 0x30
 80066e0:	d0fa      	beq.n	80066d8 <_dtoa_r+0xb68>
 80066e2:	e6fb      	b.n	80064dc <_dtoa_r+0x96c>
 80066e4:	9a08      	ldr	r2, [sp, #32]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d1a5      	bne.n	8006636 <_dtoa_r+0xac6>
 80066ea:	2331      	movs	r3, #49	; 0x31
 80066ec:	f109 0901 	add.w	r9, r9, #1
 80066f0:	7013      	strb	r3, [r2, #0]
 80066f2:	e6f3      	b.n	80064dc <_dtoa_r+0x96c>
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <_dtoa_r+0xbd4>)
 80066f6:	f7ff baa7 	b.w	8005c48 <_dtoa_r+0xd8>
 80066fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f47f aa80 	bne.w	8005c02 <_dtoa_r+0x92>
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <_dtoa_r+0xbd8>)
 8006704:	f7ff baa0 	b.w	8005c48 <_dtoa_r+0xd8>
 8006708:	f1bb 0f00 	cmp.w	fp, #0
 800670c:	dc03      	bgt.n	8006716 <_dtoa_r+0xba6>
 800670e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006710:	2b02      	cmp	r3, #2
 8006712:	f73f aecc 	bgt.w	80064ae <_dtoa_r+0x93e>
 8006716:	9f08      	ldr	r7, [sp, #32]
 8006718:	4621      	mov	r1, r4
 800671a:	4650      	mov	r0, sl
 800671c:	f7ff f99a 	bl	8005a54 <quorem>
 8006720:	9a08      	ldr	r2, [sp, #32]
 8006722:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006726:	f807 3b01 	strb.w	r3, [r7], #1
 800672a:	1aba      	subs	r2, r7, r2
 800672c:	4593      	cmp	fp, r2
 800672e:	ddb9      	ble.n	80066a4 <_dtoa_r+0xb34>
 8006730:	4651      	mov	r1, sl
 8006732:	2300      	movs	r3, #0
 8006734:	220a      	movs	r2, #10
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f892 	bl	8006860 <__multadd>
 800673c:	4682      	mov	sl, r0
 800673e:	e7eb      	b.n	8006718 <_dtoa_r+0xba8>
 8006740:	08007fdb 	.word	0x08007fdb
 8006744:	08007f34 	.word	0x08007f34
 8006748:	08007f58 	.word	0x08007f58

0800674c <_localeconv_r>:
 800674c:	4800      	ldr	r0, [pc, #0]	; (8006750 <_localeconv_r+0x4>)
 800674e:	4770      	bx	lr
 8006750:	20000160 	.word	0x20000160

08006754 <malloc>:
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <malloc+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f000 bbfb 	b.w	8006f54 <_malloc_r>
 800675e:	bf00      	nop
 8006760:	2000000c 	.word	0x2000000c

08006764 <memchr>:
 8006764:	4603      	mov	r3, r0
 8006766:	b510      	push	{r4, lr}
 8006768:	b2c9      	uxtb	r1, r1
 800676a:	4402      	add	r2, r0
 800676c:	4293      	cmp	r3, r2
 800676e:	4618      	mov	r0, r3
 8006770:	d101      	bne.n	8006776 <memchr+0x12>
 8006772:	2000      	movs	r0, #0
 8006774:	e003      	b.n	800677e <memchr+0x1a>
 8006776:	7804      	ldrb	r4, [r0, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	428c      	cmp	r4, r1
 800677c:	d1f6      	bne.n	800676c <memchr+0x8>
 800677e:	bd10      	pop	{r4, pc}

08006780 <memcpy>:
 8006780:	440a      	add	r2, r1
 8006782:	4291      	cmp	r1, r2
 8006784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006788:	d100      	bne.n	800678c <memcpy+0xc>
 800678a:	4770      	bx	lr
 800678c:	b510      	push	{r4, lr}
 800678e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006792:	4291      	cmp	r1, r2
 8006794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006798:	d1f9      	bne.n	800678e <memcpy+0xe>
 800679a:	bd10      	pop	{r4, pc}

0800679c <_Balloc>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067a0:	4604      	mov	r4, r0
 80067a2:	460d      	mov	r5, r1
 80067a4:	b976      	cbnz	r6, 80067c4 <_Balloc+0x28>
 80067a6:	2010      	movs	r0, #16
 80067a8:	f7ff ffd4 	bl	8006754 <malloc>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6260      	str	r0, [r4, #36]	; 0x24
 80067b0:	b920      	cbnz	r0, 80067bc <_Balloc+0x20>
 80067b2:	2166      	movs	r1, #102	; 0x66
 80067b4:	4b17      	ldr	r3, [pc, #92]	; (8006814 <_Balloc+0x78>)
 80067b6:	4818      	ldr	r0, [pc, #96]	; (8006818 <_Balloc+0x7c>)
 80067b8:	f000 fd92 	bl	80072e0 <__assert_func>
 80067bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c0:	6006      	str	r6, [r0, #0]
 80067c2:	60c6      	str	r6, [r0, #12]
 80067c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067c6:	68f3      	ldr	r3, [r6, #12]
 80067c8:	b183      	cbz	r3, 80067ec <_Balloc+0x50>
 80067ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067d2:	b9b8      	cbnz	r0, 8006804 <_Balloc+0x68>
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f605 	lsl.w	r6, r1, r5
 80067da:	1d72      	adds	r2, r6, #5
 80067dc:	4620      	mov	r0, r4
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	f000 fb5e 	bl	8006ea0 <_calloc_r>
 80067e4:	b160      	cbz	r0, 8006800 <_Balloc+0x64>
 80067e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ea:	e00e      	b.n	800680a <_Balloc+0x6e>
 80067ec:	2221      	movs	r2, #33	; 0x21
 80067ee:	2104      	movs	r1, #4
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 fb55 	bl	8006ea0 <_calloc_r>
 80067f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f8:	60f0      	str	r0, [r6, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <_Balloc+0x2e>
 8006800:	2000      	movs	r0, #0
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	6802      	ldr	r2, [r0, #0]
 8006806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800680a:	2300      	movs	r3, #0
 800680c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006810:	e7f7      	b.n	8006802 <_Balloc+0x66>
 8006812:	bf00      	nop
 8006814:	08007f65 	.word	0x08007f65
 8006818:	08007fec 	.word	0x08007fec

0800681c <_Bfree>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b976      	cbnz	r6, 8006844 <_Bfree+0x28>
 8006826:	2010      	movs	r0, #16
 8006828:	f7ff ff94 	bl	8006754 <malloc>
 800682c:	4602      	mov	r2, r0
 800682e:	6268      	str	r0, [r5, #36]	; 0x24
 8006830:	b920      	cbnz	r0, 800683c <_Bfree+0x20>
 8006832:	218a      	movs	r1, #138	; 0x8a
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <_Bfree+0x3c>)
 8006836:	4809      	ldr	r0, [pc, #36]	; (800685c <_Bfree+0x40>)
 8006838:	f000 fd52 	bl	80072e0 <__assert_func>
 800683c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006840:	6006      	str	r6, [r0, #0]
 8006842:	60c6      	str	r6, [r0, #12]
 8006844:	b13c      	cbz	r4, 8006856 <_Bfree+0x3a>
 8006846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006848:	6862      	ldr	r2, [r4, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006850:	6021      	str	r1, [r4, #0]
 8006852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	08007f65 	.word	0x08007f65
 800685c:	08007fec 	.word	0x08007fec

08006860 <__multadd>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	4698      	mov	r8, r3
 8006866:	460c      	mov	r4, r1
 8006868:	2300      	movs	r3, #0
 800686a:	690e      	ldr	r6, [r1, #16]
 800686c:	4607      	mov	r7, r0
 800686e:	f101 0014 	add.w	r0, r1, #20
 8006872:	6805      	ldr	r5, [r0, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	b2a9      	uxth	r1, r5
 8006878:	fb02 8101 	mla	r1, r2, r1, r8
 800687c:	0c2d      	lsrs	r5, r5, #16
 800687e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006882:	fb02 c505 	mla	r5, r2, r5, ip
 8006886:	b289      	uxth	r1, r1
 8006888:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800688c:	429e      	cmp	r6, r3
 800688e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006892:	f840 1b04 	str.w	r1, [r0], #4
 8006896:	dcec      	bgt.n	8006872 <__multadd+0x12>
 8006898:	f1b8 0f00 	cmp.w	r8, #0
 800689c:	d022      	beq.n	80068e4 <__multadd+0x84>
 800689e:	68a3      	ldr	r3, [r4, #8]
 80068a0:	42b3      	cmp	r3, r6
 80068a2:	dc19      	bgt.n	80068d8 <__multadd+0x78>
 80068a4:	6861      	ldr	r1, [r4, #4]
 80068a6:	4638      	mov	r0, r7
 80068a8:	3101      	adds	r1, #1
 80068aa:	f7ff ff77 	bl	800679c <_Balloc>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b928      	cbnz	r0, 80068be <__multadd+0x5e>
 80068b2:	4602      	mov	r2, r0
 80068b4:	21b5      	movs	r1, #181	; 0xb5
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <__multadd+0x8c>)
 80068b8:	480d      	ldr	r0, [pc, #52]	; (80068f0 <__multadd+0x90>)
 80068ba:	f000 fd11 	bl	80072e0 <__assert_func>
 80068be:	6922      	ldr	r2, [r4, #16]
 80068c0:	f104 010c 	add.w	r1, r4, #12
 80068c4:	3202      	adds	r2, #2
 80068c6:	0092      	lsls	r2, r2, #2
 80068c8:	300c      	adds	r0, #12
 80068ca:	f7ff ff59 	bl	8006780 <memcpy>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff ffa3 	bl	800681c <_Bfree>
 80068d6:	462c      	mov	r4, r5
 80068d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80068dc:	3601      	adds	r6, #1
 80068de:	f8c3 8014 	str.w	r8, [r3, #20]
 80068e2:	6126      	str	r6, [r4, #16]
 80068e4:	4620      	mov	r0, r4
 80068e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ea:	bf00      	nop
 80068ec:	08007fdb 	.word	0x08007fdb
 80068f0:	08007fec 	.word	0x08007fec

080068f4 <__hi0bits>:
 80068f4:	0c02      	lsrs	r2, r0, #16
 80068f6:	0412      	lsls	r2, r2, #16
 80068f8:	4603      	mov	r3, r0
 80068fa:	b9ca      	cbnz	r2, 8006930 <__hi0bits+0x3c>
 80068fc:	0403      	lsls	r3, r0, #16
 80068fe:	2010      	movs	r0, #16
 8006900:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006904:	bf04      	itt	eq
 8006906:	021b      	lsleq	r3, r3, #8
 8006908:	3008      	addeq	r0, #8
 800690a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800690e:	bf04      	itt	eq
 8006910:	011b      	lsleq	r3, r3, #4
 8006912:	3004      	addeq	r0, #4
 8006914:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006918:	bf04      	itt	eq
 800691a:	009b      	lsleq	r3, r3, #2
 800691c:	3002      	addeq	r0, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	db05      	blt.n	800692e <__hi0bits+0x3a>
 8006922:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006926:	f100 0001 	add.w	r0, r0, #1
 800692a:	bf08      	it	eq
 800692c:	2020      	moveq	r0, #32
 800692e:	4770      	bx	lr
 8006930:	2000      	movs	r0, #0
 8006932:	e7e5      	b.n	8006900 <__hi0bits+0xc>

08006934 <__lo0bits>:
 8006934:	6803      	ldr	r3, [r0, #0]
 8006936:	4602      	mov	r2, r0
 8006938:	f013 0007 	ands.w	r0, r3, #7
 800693c:	d00b      	beq.n	8006956 <__lo0bits+0x22>
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	d422      	bmi.n	8006988 <__lo0bits+0x54>
 8006942:	0798      	lsls	r0, r3, #30
 8006944:	bf49      	itett	mi
 8006946:	085b      	lsrmi	r3, r3, #1
 8006948:	089b      	lsrpl	r3, r3, #2
 800694a:	2001      	movmi	r0, #1
 800694c:	6013      	strmi	r3, [r2, #0]
 800694e:	bf5c      	itt	pl
 8006950:	2002      	movpl	r0, #2
 8006952:	6013      	strpl	r3, [r2, #0]
 8006954:	4770      	bx	lr
 8006956:	b299      	uxth	r1, r3
 8006958:	b909      	cbnz	r1, 800695e <__lo0bits+0x2a>
 800695a:	2010      	movs	r0, #16
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006962:	bf04      	itt	eq
 8006964:	0a1b      	lsreq	r3, r3, #8
 8006966:	3008      	addeq	r0, #8
 8006968:	0719      	lsls	r1, r3, #28
 800696a:	bf04      	itt	eq
 800696c:	091b      	lsreq	r3, r3, #4
 800696e:	3004      	addeq	r0, #4
 8006970:	0799      	lsls	r1, r3, #30
 8006972:	bf04      	itt	eq
 8006974:	089b      	lsreq	r3, r3, #2
 8006976:	3002      	addeq	r0, #2
 8006978:	07d9      	lsls	r1, r3, #31
 800697a:	d403      	bmi.n	8006984 <__lo0bits+0x50>
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	f100 0001 	add.w	r0, r0, #1
 8006982:	d003      	beq.n	800698c <__lo0bits+0x58>
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	4770      	bx	lr
 8006988:	2000      	movs	r0, #0
 800698a:	4770      	bx	lr
 800698c:	2020      	movs	r0, #32
 800698e:	4770      	bx	lr

08006990 <__i2b>:
 8006990:	b510      	push	{r4, lr}
 8006992:	460c      	mov	r4, r1
 8006994:	2101      	movs	r1, #1
 8006996:	f7ff ff01 	bl	800679c <_Balloc>
 800699a:	4602      	mov	r2, r0
 800699c:	b928      	cbnz	r0, 80069aa <__i2b+0x1a>
 800699e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80069a2:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <__i2b+0x24>)
 80069a4:	4804      	ldr	r0, [pc, #16]	; (80069b8 <__i2b+0x28>)
 80069a6:	f000 fc9b 	bl	80072e0 <__assert_func>
 80069aa:	2301      	movs	r3, #1
 80069ac:	6144      	str	r4, [r0, #20]
 80069ae:	6103      	str	r3, [r0, #16]
 80069b0:	bd10      	pop	{r4, pc}
 80069b2:	bf00      	nop
 80069b4:	08007fdb 	.word	0x08007fdb
 80069b8:	08007fec 	.word	0x08007fec

080069bc <__multiply>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	4614      	mov	r4, r2
 80069c2:	690a      	ldr	r2, [r1, #16]
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	460d      	mov	r5, r1
 80069c8:	429a      	cmp	r2, r3
 80069ca:	bfbe      	ittt	lt
 80069cc:	460b      	movlt	r3, r1
 80069ce:	4625      	movlt	r5, r4
 80069d0:	461c      	movlt	r4, r3
 80069d2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80069d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069da:	68ab      	ldr	r3, [r5, #8]
 80069dc:	6869      	ldr	r1, [r5, #4]
 80069de:	eb0a 0709 	add.w	r7, sl, r9
 80069e2:	42bb      	cmp	r3, r7
 80069e4:	b085      	sub	sp, #20
 80069e6:	bfb8      	it	lt
 80069e8:	3101      	addlt	r1, #1
 80069ea:	f7ff fed7 	bl	800679c <_Balloc>
 80069ee:	b930      	cbnz	r0, 80069fe <__multiply+0x42>
 80069f0:	4602      	mov	r2, r0
 80069f2:	f240 115d 	movw	r1, #349	; 0x15d
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <__multiply+0x140>)
 80069f8:	4841      	ldr	r0, [pc, #260]	; (8006b00 <__multiply+0x144>)
 80069fa:	f000 fc71 	bl	80072e0 <__assert_func>
 80069fe:	f100 0614 	add.w	r6, r0, #20
 8006a02:	4633      	mov	r3, r6
 8006a04:	2200      	movs	r2, #0
 8006a06:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006a0a:	4543      	cmp	r3, r8
 8006a0c:	d31e      	bcc.n	8006a4c <__multiply+0x90>
 8006a0e:	f105 0c14 	add.w	ip, r5, #20
 8006a12:	f104 0314 	add.w	r3, r4, #20
 8006a16:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006a1a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006a1e:	9202      	str	r2, [sp, #8]
 8006a20:	ebac 0205 	sub.w	r2, ip, r5
 8006a24:	3a15      	subs	r2, #21
 8006a26:	f022 0203 	bic.w	r2, r2, #3
 8006a2a:	3204      	adds	r2, #4
 8006a2c:	f105 0115 	add.w	r1, r5, #21
 8006a30:	458c      	cmp	ip, r1
 8006a32:	bf38      	it	cc
 8006a34:	2204      	movcc	r2, #4
 8006a36:	9201      	str	r2, [sp, #4]
 8006a38:	9a02      	ldr	r2, [sp, #8]
 8006a3a:	9303      	str	r3, [sp, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d808      	bhi.n	8006a52 <__multiply+0x96>
 8006a40:	2f00      	cmp	r7, #0
 8006a42:	dc55      	bgt.n	8006af0 <__multiply+0x134>
 8006a44:	6107      	str	r7, [r0, #16]
 8006a46:	b005      	add	sp, #20
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	f843 2b04 	str.w	r2, [r3], #4
 8006a50:	e7db      	b.n	8006a0a <__multiply+0x4e>
 8006a52:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a56:	f1ba 0f00 	cmp.w	sl, #0
 8006a5a:	d020      	beq.n	8006a9e <__multiply+0xe2>
 8006a5c:	46b1      	mov	r9, r6
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f105 0e14 	add.w	lr, r5, #20
 8006a64:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006a68:	f8d9 b000 	ldr.w	fp, [r9]
 8006a6c:	b2a1      	uxth	r1, r4
 8006a6e:	fa1f fb8b 	uxth.w	fp, fp
 8006a72:	fb0a b101 	mla	r1, sl, r1, fp
 8006a76:	4411      	add	r1, r2
 8006a78:	f8d9 2000 	ldr.w	r2, [r9]
 8006a7c:	0c24      	lsrs	r4, r4, #16
 8006a7e:	0c12      	lsrs	r2, r2, #16
 8006a80:	fb0a 2404 	mla	r4, sl, r4, r2
 8006a84:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006a88:	b289      	uxth	r1, r1
 8006a8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a8e:	45f4      	cmp	ip, lr
 8006a90:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006a94:	f849 1b04 	str.w	r1, [r9], #4
 8006a98:	d8e4      	bhi.n	8006a64 <__multiply+0xa8>
 8006a9a:	9901      	ldr	r1, [sp, #4]
 8006a9c:	5072      	str	r2, [r6, r1]
 8006a9e:	9a03      	ldr	r2, [sp, #12]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aa6:	f1b9 0f00 	cmp.w	r9, #0
 8006aaa:	d01f      	beq.n	8006aec <__multiply+0x130>
 8006aac:	46b6      	mov	lr, r6
 8006aae:	f04f 0a00 	mov.w	sl, #0
 8006ab2:	6834      	ldr	r4, [r6, #0]
 8006ab4:	f105 0114 	add.w	r1, r5, #20
 8006ab8:	880a      	ldrh	r2, [r1, #0]
 8006aba:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006abe:	b2a4      	uxth	r4, r4
 8006ac0:	fb09 b202 	mla	r2, r9, r2, fp
 8006ac4:	4492      	add	sl, r2
 8006ac6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006aca:	f84e 4b04 	str.w	r4, [lr], #4
 8006ace:	f851 4b04 	ldr.w	r4, [r1], #4
 8006ad2:	f8be 2000 	ldrh.w	r2, [lr]
 8006ad6:	0c24      	lsrs	r4, r4, #16
 8006ad8:	fb09 2404 	mla	r4, r9, r4, r2
 8006adc:	458c      	cmp	ip, r1
 8006ade:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ae2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ae6:	d8e7      	bhi.n	8006ab8 <__multiply+0xfc>
 8006ae8:	9a01      	ldr	r2, [sp, #4]
 8006aea:	50b4      	str	r4, [r6, r2]
 8006aec:	3604      	adds	r6, #4
 8006aee:	e7a3      	b.n	8006a38 <__multiply+0x7c>
 8006af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1a5      	bne.n	8006a44 <__multiply+0x88>
 8006af8:	3f01      	subs	r7, #1
 8006afa:	e7a1      	b.n	8006a40 <__multiply+0x84>
 8006afc:	08007fdb 	.word	0x08007fdb
 8006b00:	08007fec 	.word	0x08007fec

08006b04 <__pow5mult>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4615      	mov	r5, r2
 8006b0a:	f012 0203 	ands.w	r2, r2, #3
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	d007      	beq.n	8006b24 <__pow5mult+0x20>
 8006b14:	4c25      	ldr	r4, [pc, #148]	; (8006bac <__pow5mult+0xa8>)
 8006b16:	3a01      	subs	r2, #1
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b1e:	f7ff fe9f 	bl	8006860 <__multadd>
 8006b22:	4607      	mov	r7, r0
 8006b24:	10ad      	asrs	r5, r5, #2
 8006b26:	d03d      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b2a:	b97c      	cbnz	r4, 8006b4c <__pow5mult+0x48>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f7ff fe11 	bl	8006754 <malloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	6270      	str	r0, [r6, #36]	; 0x24
 8006b36:	b928      	cbnz	r0, 8006b44 <__pow5mult+0x40>
 8006b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <__pow5mult+0xac>)
 8006b3e:	481d      	ldr	r0, [pc, #116]	; (8006bb4 <__pow5mult+0xb0>)
 8006b40:	f000 fbce 	bl	80072e0 <__assert_func>
 8006b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	60c4      	str	r4, [r0, #12]
 8006b4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b54:	b94c      	cbnz	r4, 8006b6a <__pow5mult+0x66>
 8006b56:	f240 2171 	movw	r1, #625	; 0x271
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7ff ff18 	bl	8006990 <__i2b>
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	f04f 0900 	mov.w	r9, #0
 8006b6e:	07eb      	lsls	r3, r5, #31
 8006b70:	d50a      	bpl.n	8006b88 <__pow5mult+0x84>
 8006b72:	4639      	mov	r1, r7
 8006b74:	4622      	mov	r2, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ff20 	bl	80069bc <__multiply>
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	4639      	mov	r1, r7
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fe4b 	bl	800681c <_Bfree>
 8006b86:	4647      	mov	r7, r8
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	d00b      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	b938      	cbnz	r0, 8006ba0 <__pow5mult+0x9c>
 8006b90:	4622      	mov	r2, r4
 8006b92:	4621      	mov	r1, r4
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ff11 	bl	80069bc <__multiply>
 8006b9a:	6020      	str	r0, [r4, #0]
 8006b9c:	f8c0 9000 	str.w	r9, [r0]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e7e4      	b.n	8006b6e <__pow5mult+0x6a>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	bf00      	nop
 8006bac:	08008140 	.word	0x08008140
 8006bb0:	08007f65 	.word	0x08007f65
 8006bb4:	08007fec 	.word	0x08007fec

08006bb8 <__lshift>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	4607      	mov	r7, r0
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	6849      	ldr	r1, [r1, #4]
 8006bc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd0:	f108 0601 	add.w	r6, r8, #1
 8006bd4:	42b3      	cmp	r3, r6
 8006bd6:	db0b      	blt.n	8006bf0 <__lshift+0x38>
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff fddf 	bl	800679c <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b948      	cbnz	r0, 8006bf6 <__lshift+0x3e>
 8006be2:	4602      	mov	r2, r0
 8006be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006be8:	4b27      	ldr	r3, [pc, #156]	; (8006c88 <__lshift+0xd0>)
 8006bea:	4828      	ldr	r0, [pc, #160]	; (8006c8c <__lshift+0xd4>)
 8006bec:	f000 fb78 	bl	80072e0 <__assert_func>
 8006bf0:	3101      	adds	r1, #1
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	e7ee      	b.n	8006bd4 <__lshift+0x1c>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f100 0114 	add.w	r1, r0, #20
 8006bfc:	f100 0210 	add.w	r2, r0, #16
 8006c00:	4618      	mov	r0, r3
 8006c02:	4553      	cmp	r3, sl
 8006c04:	db33      	blt.n	8006c6e <__lshift+0xb6>
 8006c06:	6920      	ldr	r0, [r4, #16]
 8006c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c0c:	f104 0314 	add.w	r3, r4, #20
 8006c10:	f019 091f 	ands.w	r9, r9, #31
 8006c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c1c:	d02b      	beq.n	8006c76 <__lshift+0xbe>
 8006c1e:	468a      	mov	sl, r1
 8006c20:	2200      	movs	r2, #0
 8006c22:	f1c9 0e20 	rsb	lr, r9, #32
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	fa00 f009 	lsl.w	r0, r0, r9
 8006c2c:	4302      	orrs	r2, r0
 8006c2e:	f84a 2b04 	str.w	r2, [sl], #4
 8006c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c36:	459c      	cmp	ip, r3
 8006c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c3c:	d8f3      	bhi.n	8006c26 <__lshift+0x6e>
 8006c3e:	ebac 0304 	sub.w	r3, ip, r4
 8006c42:	3b15      	subs	r3, #21
 8006c44:	f023 0303 	bic.w	r3, r3, #3
 8006c48:	3304      	adds	r3, #4
 8006c4a:	f104 0015 	add.w	r0, r4, #21
 8006c4e:	4584      	cmp	ip, r0
 8006c50:	bf38      	it	cc
 8006c52:	2304      	movcc	r3, #4
 8006c54:	50ca      	str	r2, [r1, r3]
 8006c56:	b10a      	cbz	r2, 8006c5c <__lshift+0xa4>
 8006c58:	f108 0602 	add.w	r6, r8, #2
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	4638      	mov	r0, r7
 8006c60:	4621      	mov	r1, r4
 8006c62:	612e      	str	r6, [r5, #16]
 8006c64:	f7ff fdda 	bl	800681c <_Bfree>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7c5      	b.n	8006c02 <__lshift+0x4a>
 8006c76:	3904      	subs	r1, #4
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	459c      	cmp	ip, r3
 8006c7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c82:	d8f9      	bhi.n	8006c78 <__lshift+0xc0>
 8006c84:	e7ea      	b.n	8006c5c <__lshift+0xa4>
 8006c86:	bf00      	nop
 8006c88:	08007fdb 	.word	0x08007fdb
 8006c8c:	08007fec 	.word	0x08007fec

08006c90 <__mcmp>:
 8006c90:	4603      	mov	r3, r0
 8006c92:	690a      	ldr	r2, [r1, #16]
 8006c94:	6900      	ldr	r0, [r0, #16]
 8006c96:	b530      	push	{r4, r5, lr}
 8006c98:	1a80      	subs	r0, r0, r2
 8006c9a:	d10d      	bne.n	8006cb8 <__mcmp+0x28>
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	3114      	adds	r1, #20
 8006ca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cb0:	4295      	cmp	r5, r2
 8006cb2:	d002      	beq.n	8006cba <__mcmp+0x2a>
 8006cb4:	d304      	bcc.n	8006cc0 <__mcmp+0x30>
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	bd30      	pop	{r4, r5, pc}
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	d3f4      	bcc.n	8006ca8 <__mcmp+0x18>
 8006cbe:	e7fb      	b.n	8006cb8 <__mcmp+0x28>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	e7f8      	b.n	8006cb8 <__mcmp+0x28>
	...

08006cc8 <__mdiff>:
 8006cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	460c      	mov	r4, r1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4692      	mov	sl, r2
 8006cd6:	f7ff ffdb 	bl	8006c90 <__mcmp>
 8006cda:	1e05      	subs	r5, r0, #0
 8006cdc:	d111      	bne.n	8006d02 <__mdiff+0x3a>
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff fd5b 	bl	800679c <_Balloc>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	b928      	cbnz	r0, 8006cf6 <__mdiff+0x2e>
 8006cea:	f240 2132 	movw	r1, #562	; 0x232
 8006cee:	4b3c      	ldr	r3, [pc, #240]	; (8006de0 <__mdiff+0x118>)
 8006cf0:	483c      	ldr	r0, [pc, #240]	; (8006de4 <__mdiff+0x11c>)
 8006cf2:	f000 faf5 	bl	80072e0 <__assert_func>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	bfa4      	itt	ge
 8006d04:	4653      	movge	r3, sl
 8006d06:	46a2      	movge	sl, r4
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006d0e:	bfa6      	itte	ge
 8006d10:	461c      	movge	r4, r3
 8006d12:	2500      	movge	r5, #0
 8006d14:	2501      	movlt	r5, #1
 8006d16:	f7ff fd41 	bl	800679c <_Balloc>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	b918      	cbnz	r0, 8006d26 <__mdiff+0x5e>
 8006d1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d22:	4b2f      	ldr	r3, [pc, #188]	; (8006de0 <__mdiff+0x118>)
 8006d24:	e7e4      	b.n	8006cf0 <__mdiff+0x28>
 8006d26:	f100 0814 	add.w	r8, r0, #20
 8006d2a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006d2e:	60c5      	str	r5, [r0, #12]
 8006d30:	f04f 0c00 	mov.w	ip, #0
 8006d34:	f10a 0514 	add.w	r5, sl, #20
 8006d38:	f10a 0010 	add.w	r0, sl, #16
 8006d3c:	46c2      	mov	sl, r8
 8006d3e:	6926      	ldr	r6, [r4, #16]
 8006d40:	f104 0914 	add.w	r9, r4, #20
 8006d44:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006d48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d4c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006d50:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d54:	fa1f f18b 	uxth.w	r1, fp
 8006d58:	4461      	add	r1, ip
 8006d5a:	fa1f fc83 	uxth.w	ip, r3
 8006d5e:	0c1b      	lsrs	r3, r3, #16
 8006d60:	eba1 010c 	sub.w	r1, r1, ip
 8006d64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d6c:	b289      	uxth	r1, r1
 8006d6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006d72:	454e      	cmp	r6, r9
 8006d74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d78:	f84a 3b04 	str.w	r3, [sl], #4
 8006d7c:	d8e6      	bhi.n	8006d4c <__mdiff+0x84>
 8006d7e:	1b33      	subs	r3, r6, r4
 8006d80:	3b15      	subs	r3, #21
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	3415      	adds	r4, #21
 8006d88:	3304      	adds	r3, #4
 8006d8a:	42a6      	cmp	r6, r4
 8006d8c:	bf38      	it	cc
 8006d8e:	2304      	movcc	r3, #4
 8006d90:	441d      	add	r5, r3
 8006d92:	4443      	add	r3, r8
 8006d94:	461e      	mov	r6, r3
 8006d96:	462c      	mov	r4, r5
 8006d98:	4574      	cmp	r4, lr
 8006d9a:	d30e      	bcc.n	8006dba <__mdiff+0xf2>
 8006d9c:	f10e 0103 	add.w	r1, lr, #3
 8006da0:	1b49      	subs	r1, r1, r5
 8006da2:	f021 0103 	bic.w	r1, r1, #3
 8006da6:	3d03      	subs	r5, #3
 8006da8:	45ae      	cmp	lr, r5
 8006daa:	bf38      	it	cc
 8006dac:	2100      	movcc	r1, #0
 8006dae:	4419      	add	r1, r3
 8006db0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006db4:	b18b      	cbz	r3, 8006dda <__mdiff+0x112>
 8006db6:	6117      	str	r7, [r2, #16]
 8006db8:	e7a0      	b.n	8006cfc <__mdiff+0x34>
 8006dba:	f854 8b04 	ldr.w	r8, [r4], #4
 8006dbe:	fa1f f188 	uxth.w	r1, r8
 8006dc2:	4461      	add	r1, ip
 8006dc4:	1408      	asrs	r0, r1, #16
 8006dc6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006dca:	b289      	uxth	r1, r1
 8006dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006dd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006dd4:	f846 1b04 	str.w	r1, [r6], #4
 8006dd8:	e7de      	b.n	8006d98 <__mdiff+0xd0>
 8006dda:	3f01      	subs	r7, #1
 8006ddc:	e7e8      	b.n	8006db0 <__mdiff+0xe8>
 8006dde:	bf00      	nop
 8006de0:	08007fdb 	.word	0x08007fdb
 8006de4:	08007fec 	.word	0x08007fec

08006de8 <__d2b>:
 8006de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006dec:	2101      	movs	r1, #1
 8006dee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006df2:	4690      	mov	r8, r2
 8006df4:	461d      	mov	r5, r3
 8006df6:	f7ff fcd1 	bl	800679c <_Balloc>
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	b930      	cbnz	r0, 8006e0c <__d2b+0x24>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f240 310a 	movw	r1, #778	; 0x30a
 8006e04:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <__d2b+0xb0>)
 8006e06:	4825      	ldr	r0, [pc, #148]	; (8006e9c <__d2b+0xb4>)
 8006e08:	f000 fa6a 	bl	80072e0 <__assert_func>
 8006e0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e14:	bb2d      	cbnz	r5, 8006e62 <__d2b+0x7a>
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	f1b8 0300 	subs.w	r3, r8, #0
 8006e1c:	d026      	beq.n	8006e6c <__d2b+0x84>
 8006e1e:	4668      	mov	r0, sp
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	f7ff fd87 	bl	8006934 <__lo0bits>
 8006e26:	9900      	ldr	r1, [sp, #0]
 8006e28:	b1f0      	cbz	r0, 8006e68 <__d2b+0x80>
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	f1c0 0320 	rsb	r3, r0, #32
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	430b      	orrs	r3, r1
 8006e36:	40c2      	lsrs	r2, r0
 8006e38:	6163      	str	r3, [r4, #20]
 8006e3a:	9201      	str	r2, [sp, #4]
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bf14      	ite	ne
 8006e42:	2102      	movne	r1, #2
 8006e44:	2101      	moveq	r1, #1
 8006e46:	61a3      	str	r3, [r4, #24]
 8006e48:	6121      	str	r1, [r4, #16]
 8006e4a:	b1c5      	cbz	r5, 8006e7e <__d2b+0x96>
 8006e4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e50:	4405      	add	r5, r0
 8006e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e56:	603d      	str	r5, [r7, #0]
 8006e58:	6030      	str	r0, [r6, #0]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	b002      	add	sp, #8
 8006e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e66:	e7d6      	b.n	8006e16 <__d2b+0x2e>
 8006e68:	6161      	str	r1, [r4, #20]
 8006e6a:	e7e7      	b.n	8006e3c <__d2b+0x54>
 8006e6c:	a801      	add	r0, sp, #4
 8006e6e:	f7ff fd61 	bl	8006934 <__lo0bits>
 8006e72:	2101      	movs	r1, #1
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	6121      	str	r1, [r4, #16]
 8006e78:	6163      	str	r3, [r4, #20]
 8006e7a:	3020      	adds	r0, #32
 8006e7c:	e7e5      	b.n	8006e4a <__d2b+0x62>
 8006e7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e86:	6038      	str	r0, [r7, #0]
 8006e88:	6918      	ldr	r0, [r3, #16]
 8006e8a:	f7ff fd33 	bl	80068f4 <__hi0bits>
 8006e8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e92:	6031      	str	r1, [r6, #0]
 8006e94:	e7e1      	b.n	8006e5a <__d2b+0x72>
 8006e96:	bf00      	nop
 8006e98:	08007fdb 	.word	0x08007fdb
 8006e9c:	08007fec 	.word	0x08007fec

08006ea0 <_calloc_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	fb02 f501 	mul.w	r5, r2, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f000 f854 	bl	8006f54 <_malloc_r>
 8006eac:	4604      	mov	r4, r0
 8006eae:	b118      	cbz	r0, 8006eb8 <_calloc_r+0x18>
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f7fe f946 	bl	8005144 <memset>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	bd38      	pop	{r3, r4, r5, pc}

08006ebc <_free_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d043      	beq.n	8006f4c <_free_r+0x90>
 8006ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec8:	1f0c      	subs	r4, r1, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfb8      	it	lt
 8006ece:	18e4      	addlt	r4, r4, r3
 8006ed0:	f000 fa62 	bl	8007398 <__malloc_lock>
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	; (8006f50 <_free_r+0x94>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	b933      	cbnz	r3, 8006eea <_free_r+0x2e>
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6014      	str	r4, [r2, #0]
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee6:	f000 ba5d 	b.w	80073a4 <__malloc_unlock>
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	d90a      	bls.n	8006f04 <_free_r+0x48>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	1862      	adds	r2, r4, r1
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf01      	itttt	eq
 8006ef6:	681a      	ldreq	r2, [r3, #0]
 8006ef8:	685b      	ldreq	r3, [r3, #4]
 8006efa:	1852      	addeq	r2, r2, r1
 8006efc:	6022      	streq	r2, [r4, #0]
 8006efe:	6063      	str	r3, [r4, #4]
 8006f00:	6004      	str	r4, [r0, #0]
 8006f02:	e7ed      	b.n	8006ee0 <_free_r+0x24>
 8006f04:	461a      	mov	r2, r3
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	b10b      	cbz	r3, 8006f0e <_free_r+0x52>
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	d9fa      	bls.n	8006f04 <_free_r+0x48>
 8006f0e:	6811      	ldr	r1, [r2, #0]
 8006f10:	1850      	adds	r0, r2, r1
 8006f12:	42a0      	cmp	r0, r4
 8006f14:	d10b      	bne.n	8006f2e <_free_r+0x72>
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	4401      	add	r1, r0
 8006f1a:	1850      	adds	r0, r2, r1
 8006f1c:	4283      	cmp	r3, r0
 8006f1e:	6011      	str	r1, [r2, #0]
 8006f20:	d1de      	bne.n	8006ee0 <_free_r+0x24>
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4401      	add	r1, r0
 8006f28:	6011      	str	r1, [r2, #0]
 8006f2a:	6053      	str	r3, [r2, #4]
 8006f2c:	e7d8      	b.n	8006ee0 <_free_r+0x24>
 8006f2e:	d902      	bls.n	8006f36 <_free_r+0x7a>
 8006f30:	230c      	movs	r3, #12
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	e7d4      	b.n	8006ee0 <_free_r+0x24>
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	1821      	adds	r1, r4, r0
 8006f3a:	428b      	cmp	r3, r1
 8006f3c:	bf01      	itttt	eq
 8006f3e:	6819      	ldreq	r1, [r3, #0]
 8006f40:	685b      	ldreq	r3, [r3, #4]
 8006f42:	1809      	addeq	r1, r1, r0
 8006f44:	6021      	streq	r1, [r4, #0]
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	6054      	str	r4, [r2, #4]
 8006f4a:	e7c9      	b.n	8006ee0 <_free_r+0x24>
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop
 8006f50:	200001fc 	.word	0x200001fc

08006f54 <_malloc_r>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	1ccd      	adds	r5, r1, #3
 8006f58:	f025 0503 	bic.w	r5, r5, #3
 8006f5c:	3508      	adds	r5, #8
 8006f5e:	2d0c      	cmp	r5, #12
 8006f60:	bf38      	it	cc
 8006f62:	250c      	movcc	r5, #12
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	4606      	mov	r6, r0
 8006f68:	db01      	blt.n	8006f6e <_malloc_r+0x1a>
 8006f6a:	42a9      	cmp	r1, r5
 8006f6c:	d903      	bls.n	8006f76 <_malloc_r+0x22>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	2000      	movs	r0, #0
 8006f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f76:	f000 fa0f 	bl	8007398 <__malloc_lock>
 8006f7a:	4921      	ldr	r1, [pc, #132]	; (8007000 <_malloc_r+0xac>)
 8006f7c:	680a      	ldr	r2, [r1, #0]
 8006f7e:	4614      	mov	r4, r2
 8006f80:	b99c      	cbnz	r4, 8006faa <_malloc_r+0x56>
 8006f82:	4f20      	ldr	r7, [pc, #128]	; (8007004 <_malloc_r+0xb0>)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	b923      	cbnz	r3, 8006f92 <_malloc_r+0x3e>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 f998 	bl	80072c0 <_sbrk_r>
 8006f90:	6038      	str	r0, [r7, #0]
 8006f92:	4629      	mov	r1, r5
 8006f94:	4630      	mov	r0, r6
 8006f96:	f000 f993 	bl	80072c0 <_sbrk_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d123      	bne.n	8006fe6 <_malloc_r+0x92>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	6033      	str	r3, [r6, #0]
 8006fa4:	f000 f9fe 	bl	80073a4 <__malloc_unlock>
 8006fa8:	e7e3      	b.n	8006f72 <_malloc_r+0x1e>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	1b5b      	subs	r3, r3, r5
 8006fae:	d417      	bmi.n	8006fe0 <_malloc_r+0x8c>
 8006fb0:	2b0b      	cmp	r3, #11
 8006fb2:	d903      	bls.n	8006fbc <_malloc_r+0x68>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	441c      	add	r4, r3
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	e004      	b.n	8006fc6 <_malloc_r+0x72>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	42a2      	cmp	r2, r4
 8006fc0:	bf0c      	ite	eq
 8006fc2:	600b      	streq	r3, [r1, #0]
 8006fc4:	6053      	strne	r3, [r2, #4]
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 f9ec 	bl	80073a4 <__malloc_unlock>
 8006fcc:	f104 000b 	add.w	r0, r4, #11
 8006fd0:	1d23      	adds	r3, r4, #4
 8006fd2:	f020 0007 	bic.w	r0, r0, #7
 8006fd6:	1ac2      	subs	r2, r0, r3
 8006fd8:	d0cc      	beq.n	8006f74 <_malloc_r+0x20>
 8006fda:	1a1b      	subs	r3, r3, r0
 8006fdc:	50a3      	str	r3, [r4, r2]
 8006fde:	e7c9      	b.n	8006f74 <_malloc_r+0x20>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	6864      	ldr	r4, [r4, #4]
 8006fe4:	e7cc      	b.n	8006f80 <_malloc_r+0x2c>
 8006fe6:	1cc4      	adds	r4, r0, #3
 8006fe8:	f024 0403 	bic.w	r4, r4, #3
 8006fec:	42a0      	cmp	r0, r4
 8006fee:	d0e3      	beq.n	8006fb8 <_malloc_r+0x64>
 8006ff0:	1a21      	subs	r1, r4, r0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 f964 	bl	80072c0 <_sbrk_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d1dd      	bne.n	8006fb8 <_malloc_r+0x64>
 8006ffc:	e7cf      	b.n	8006f9e <_malloc_r+0x4a>
 8006ffe:	bf00      	nop
 8007000:	200001fc 	.word	0x200001fc
 8007004:	20000200 	.word	0x20000200

08007008 <__ssputs_r>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	688e      	ldr	r6, [r1, #8]
 800700e:	4682      	mov	sl, r0
 8007010:	429e      	cmp	r6, r3
 8007012:	460c      	mov	r4, r1
 8007014:	4690      	mov	r8, r2
 8007016:	461f      	mov	r7, r3
 8007018:	d838      	bhi.n	800708c <__ssputs_r+0x84>
 800701a:	898a      	ldrh	r2, [r1, #12]
 800701c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007020:	d032      	beq.n	8007088 <__ssputs_r+0x80>
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	6909      	ldr	r1, [r1, #16]
 8007026:	3301      	adds	r3, #1
 8007028:	eba5 0901 	sub.w	r9, r5, r1
 800702c:	6965      	ldr	r5, [r4, #20]
 800702e:	444b      	add	r3, r9
 8007030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007038:	106d      	asrs	r5, r5, #1
 800703a:	429d      	cmp	r5, r3
 800703c:	bf38      	it	cc
 800703e:	461d      	movcc	r5, r3
 8007040:	0553      	lsls	r3, r2, #21
 8007042:	d531      	bpl.n	80070a8 <__ssputs_r+0xa0>
 8007044:	4629      	mov	r1, r5
 8007046:	f7ff ff85 	bl	8006f54 <_malloc_r>
 800704a:	4606      	mov	r6, r0
 800704c:	b950      	cbnz	r0, 8007064 <__ssputs_r+0x5c>
 800704e:	230c      	movs	r3, #12
 8007050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007054:	f8ca 3000 	str.w	r3, [sl]
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	464a      	mov	r2, r9
 8007066:	6921      	ldr	r1, [r4, #16]
 8007068:	f7ff fb8a 	bl	8006780 <memcpy>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	6126      	str	r6, [r4, #16]
 800707a:	444e      	add	r6, r9
 800707c:	6026      	str	r6, [r4, #0]
 800707e:	463e      	mov	r6, r7
 8007080:	6165      	str	r5, [r4, #20]
 8007082:	eba5 0509 	sub.w	r5, r5, r9
 8007086:	60a5      	str	r5, [r4, #8]
 8007088:	42be      	cmp	r6, r7
 800708a:	d900      	bls.n	800708e <__ssputs_r+0x86>
 800708c:	463e      	mov	r6, r7
 800708e:	4632      	mov	r2, r6
 8007090:	4641      	mov	r1, r8
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	f000 f966 	bl	8007364 <memmove>
 8007098:	68a3      	ldr	r3, [r4, #8]
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	1b9b      	subs	r3, r3, r6
 800709e:	4432      	add	r2, r6
 80070a0:	2000      	movs	r0, #0
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	6022      	str	r2, [r4, #0]
 80070a6:	e7db      	b.n	8007060 <__ssputs_r+0x58>
 80070a8:	462a      	mov	r2, r5
 80070aa:	f000 f981 	bl	80073b0 <_realloc_r>
 80070ae:	4606      	mov	r6, r0
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d1e1      	bne.n	8007078 <__ssputs_r+0x70>
 80070b4:	4650      	mov	r0, sl
 80070b6:	6921      	ldr	r1, [r4, #16]
 80070b8:	f7ff ff00 	bl	8006ebc <_free_r>
 80070bc:	e7c7      	b.n	800704e <__ssputs_r+0x46>
	...

080070c0 <_svfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	4698      	mov	r8, r3
 80070c6:	898b      	ldrh	r3, [r1, #12]
 80070c8:	4607      	mov	r7, r0
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	460d      	mov	r5, r1
 80070ce:	4614      	mov	r4, r2
 80070d0:	b09d      	sub	sp, #116	; 0x74
 80070d2:	d50e      	bpl.n	80070f2 <_svfiprintf_r+0x32>
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	b963      	cbnz	r3, 80070f2 <_svfiprintf_r+0x32>
 80070d8:	2140      	movs	r1, #64	; 0x40
 80070da:	f7ff ff3b 	bl	8006f54 <_malloc_r>
 80070de:	6028      	str	r0, [r5, #0]
 80070e0:	6128      	str	r0, [r5, #16]
 80070e2:	b920      	cbnz	r0, 80070ee <_svfiprintf_r+0x2e>
 80070e4:	230c      	movs	r3, #12
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ec:	e0d1      	b.n	8007292 <_svfiprintf_r+0x1d2>
 80070ee:	2340      	movs	r3, #64	; 0x40
 80070f0:	616b      	str	r3, [r5, #20]
 80070f2:	2300      	movs	r3, #0
 80070f4:	9309      	str	r3, [sp, #36]	; 0x24
 80070f6:	2320      	movs	r3, #32
 80070f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fc:	2330      	movs	r3, #48	; 0x30
 80070fe:	f04f 0901 	mov.w	r9, #1
 8007102:	f8cd 800c 	str.w	r8, [sp, #12]
 8007106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072ac <_svfiprintf_r+0x1ec>
 800710a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800710e:	4623      	mov	r3, r4
 8007110:	469a      	mov	sl, r3
 8007112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007116:	b10a      	cbz	r2, 800711c <_svfiprintf_r+0x5c>
 8007118:	2a25      	cmp	r2, #37	; 0x25
 800711a:	d1f9      	bne.n	8007110 <_svfiprintf_r+0x50>
 800711c:	ebba 0b04 	subs.w	fp, sl, r4
 8007120:	d00b      	beq.n	800713a <_svfiprintf_r+0x7a>
 8007122:	465b      	mov	r3, fp
 8007124:	4622      	mov	r2, r4
 8007126:	4629      	mov	r1, r5
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ff6d 	bl	8007008 <__ssputs_r>
 800712e:	3001      	adds	r0, #1
 8007130:	f000 80aa 	beq.w	8007288 <_svfiprintf_r+0x1c8>
 8007134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007136:	445a      	add	r2, fp
 8007138:	9209      	str	r2, [sp, #36]	; 0x24
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 80a2 	beq.w	8007288 <_svfiprintf_r+0x1c8>
 8007144:	2300      	movs	r3, #0
 8007146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800714a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800714e:	f10a 0a01 	add.w	sl, sl, #1
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	9307      	str	r3, [sp, #28]
 8007156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715a:	931a      	str	r3, [sp, #104]	; 0x68
 800715c:	4654      	mov	r4, sl
 800715e:	2205      	movs	r2, #5
 8007160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007164:	4851      	ldr	r0, [pc, #324]	; (80072ac <_svfiprintf_r+0x1ec>)
 8007166:	f7ff fafd 	bl	8006764 <memchr>
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	b9d8      	cbnz	r0, 80071a6 <_svfiprintf_r+0xe6>
 800716e:	06d0      	lsls	r0, r2, #27
 8007170:	bf44      	itt	mi
 8007172:	2320      	movmi	r3, #32
 8007174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007178:	0711      	lsls	r1, r2, #28
 800717a:	bf44      	itt	mi
 800717c:	232b      	movmi	r3, #43	; 0x2b
 800717e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	2b2a      	cmp	r3, #42	; 0x2a
 8007188:	d015      	beq.n	80071b6 <_svfiprintf_r+0xf6>
 800718a:	4654      	mov	r4, sl
 800718c:	2000      	movs	r0, #0
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	9a07      	ldr	r2, [sp, #28]
 8007194:	4621      	mov	r1, r4
 8007196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719a:	3b30      	subs	r3, #48	; 0x30
 800719c:	2b09      	cmp	r3, #9
 800719e:	d94e      	bls.n	800723e <_svfiprintf_r+0x17e>
 80071a0:	b1b0      	cbz	r0, 80071d0 <_svfiprintf_r+0x110>
 80071a2:	9207      	str	r2, [sp, #28]
 80071a4:	e014      	b.n	80071d0 <_svfiprintf_r+0x110>
 80071a6:	eba0 0308 	sub.w	r3, r0, r8
 80071aa:	fa09 f303 	lsl.w	r3, r9, r3
 80071ae:	4313      	orrs	r3, r2
 80071b0:	46a2      	mov	sl, r4
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	e7d2      	b.n	800715c <_svfiprintf_r+0x9c>
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	1d19      	adds	r1, r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	9103      	str	r1, [sp, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfbb      	ittet	lt
 80071c2:	425b      	neglt	r3, r3
 80071c4:	f042 0202 	orrlt.w	r2, r2, #2
 80071c8:	9307      	strge	r3, [sp, #28]
 80071ca:	9307      	strlt	r3, [sp, #28]
 80071cc:	bfb8      	it	lt
 80071ce:	9204      	strlt	r2, [sp, #16]
 80071d0:	7823      	ldrb	r3, [r4, #0]
 80071d2:	2b2e      	cmp	r3, #46	; 0x2e
 80071d4:	d10c      	bne.n	80071f0 <_svfiprintf_r+0x130>
 80071d6:	7863      	ldrb	r3, [r4, #1]
 80071d8:	2b2a      	cmp	r3, #42	; 0x2a
 80071da:	d135      	bne.n	8007248 <_svfiprintf_r+0x188>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	3402      	adds	r4, #2
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072bc <_svfiprintf_r+0x1fc>
 80071f4:	2203      	movs	r2, #3
 80071f6:	4650      	mov	r0, sl
 80071f8:	7821      	ldrb	r1, [r4, #0]
 80071fa:	f7ff fab3 	bl	8006764 <memchr>
 80071fe:	b140      	cbz	r0, 8007212 <_svfiprintf_r+0x152>
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	eba0 000a 	sub.w	r0, r0, sl
 8007206:	fa03 f000 	lsl.w	r0, r3, r0
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	3401      	adds	r4, #1
 800720e:	4303      	orrs	r3, r0
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007216:	2206      	movs	r2, #6
 8007218:	4825      	ldr	r0, [pc, #148]	; (80072b0 <_svfiprintf_r+0x1f0>)
 800721a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721e:	f7ff faa1 	bl	8006764 <memchr>
 8007222:	2800      	cmp	r0, #0
 8007224:	d038      	beq.n	8007298 <_svfiprintf_r+0x1d8>
 8007226:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <_svfiprintf_r+0x1f4>)
 8007228:	bb1b      	cbnz	r3, 8007272 <_svfiprintf_r+0x1b2>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	3307      	adds	r3, #7
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	3308      	adds	r3, #8
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	4433      	add	r3, r6
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	e767      	b.n	800710e <_svfiprintf_r+0x4e>
 800723e:	460c      	mov	r4, r1
 8007240:	2001      	movs	r0, #1
 8007242:	fb0c 3202 	mla	r2, ip, r2, r3
 8007246:	e7a5      	b.n	8007194 <_svfiprintf_r+0xd4>
 8007248:	2300      	movs	r3, #0
 800724a:	f04f 0c0a 	mov.w	ip, #10
 800724e:	4619      	mov	r1, r3
 8007250:	3401      	adds	r4, #1
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	4620      	mov	r0, r4
 8007256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725a:	3a30      	subs	r2, #48	; 0x30
 800725c:	2a09      	cmp	r2, #9
 800725e:	d903      	bls.n	8007268 <_svfiprintf_r+0x1a8>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0c5      	beq.n	80071f0 <_svfiprintf_r+0x130>
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	e7c3      	b.n	80071f0 <_svfiprintf_r+0x130>
 8007268:	4604      	mov	r4, r0
 800726a:	2301      	movs	r3, #1
 800726c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007270:	e7f0      	b.n	8007254 <_svfiprintf_r+0x194>
 8007272:	ab03      	add	r3, sp, #12
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	462a      	mov	r2, r5
 8007278:	4638      	mov	r0, r7
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <_svfiprintf_r+0x1f8>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	f7fe f807 	bl	8005290 <_printf_float>
 8007282:	1c42      	adds	r2, r0, #1
 8007284:	4606      	mov	r6, r0
 8007286:	d1d6      	bne.n	8007236 <_svfiprintf_r+0x176>
 8007288:	89ab      	ldrh	r3, [r5, #12]
 800728a:	065b      	lsls	r3, r3, #25
 800728c:	f53f af2c 	bmi.w	80070e8 <_svfiprintf_r+0x28>
 8007290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007292:	b01d      	add	sp, #116	; 0x74
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	ab03      	add	r3, sp, #12
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	462a      	mov	r2, r5
 800729e:	4638      	mov	r0, r7
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_svfiprintf_r+0x1f8>)
 80072a2:	a904      	add	r1, sp, #16
 80072a4:	f7fe fa90 	bl	80057c8 <_printf_i>
 80072a8:	e7eb      	b.n	8007282 <_svfiprintf_r+0x1c2>
 80072aa:	bf00      	nop
 80072ac:	0800814c 	.word	0x0800814c
 80072b0:	08008156 	.word	0x08008156
 80072b4:	08005291 	.word	0x08005291
 80072b8:	08007009 	.word	0x08007009
 80072bc:	08008152 	.word	0x08008152

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	2300      	movs	r3, #0
 80072c4:	4d05      	ldr	r5, [pc, #20]	; (80072dc <_sbrk_r+0x1c>)
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fa fd9a 	bl	8001e04 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200003fc 	.word	0x200003fc

080072e0 <__assert_func>:
 80072e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072e2:	4614      	mov	r4, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <__assert_func+0x2c>)
 80072e8:	4605      	mov	r5, r0
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68d8      	ldr	r0, [r3, #12]
 80072ee:	b14c      	cbz	r4, 8007304 <__assert_func+0x24>
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <__assert_func+0x30>)
 80072f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072f6:	9100      	str	r1, [sp, #0]
 80072f8:	462b      	mov	r3, r5
 80072fa:	4906      	ldr	r1, [pc, #24]	; (8007314 <__assert_func+0x34>)
 80072fc:	f000 f80e 	bl	800731c <fiprintf>
 8007300:	f000 faa2 	bl	8007848 <abort>
 8007304:	4b04      	ldr	r3, [pc, #16]	; (8007318 <__assert_func+0x38>)
 8007306:	461c      	mov	r4, r3
 8007308:	e7f3      	b.n	80072f2 <__assert_func+0x12>
 800730a:	bf00      	nop
 800730c:	2000000c 	.word	0x2000000c
 8007310:	0800815d 	.word	0x0800815d
 8007314:	0800816a 	.word	0x0800816a
 8007318:	08008198 	.word	0x08008198

0800731c <fiprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	b503      	push	{r0, r1, lr}
 8007320:	4601      	mov	r1, r0
 8007322:	ab03      	add	r3, sp, #12
 8007324:	4805      	ldr	r0, [pc, #20]	; (800733c <fiprintf+0x20>)
 8007326:	f853 2b04 	ldr.w	r2, [r3], #4
 800732a:	6800      	ldr	r0, [r0, #0]
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	f000 f88d 	bl	800744c <_vfiprintf_r>
 8007332:	b002      	add	sp, #8
 8007334:	f85d eb04 	ldr.w	lr, [sp], #4
 8007338:	b003      	add	sp, #12
 800733a:	4770      	bx	lr
 800733c:	2000000c 	.word	0x2000000c

08007340 <__ascii_mbtowc>:
 8007340:	b082      	sub	sp, #8
 8007342:	b901      	cbnz	r1, 8007346 <__ascii_mbtowc+0x6>
 8007344:	a901      	add	r1, sp, #4
 8007346:	b142      	cbz	r2, 800735a <__ascii_mbtowc+0x1a>
 8007348:	b14b      	cbz	r3, 800735e <__ascii_mbtowc+0x1e>
 800734a:	7813      	ldrb	r3, [r2, #0]
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	1e10      	subs	r0, r2, #0
 8007352:	bf18      	it	ne
 8007354:	2001      	movne	r0, #1
 8007356:	b002      	add	sp, #8
 8007358:	4770      	bx	lr
 800735a:	4610      	mov	r0, r2
 800735c:	e7fb      	b.n	8007356 <__ascii_mbtowc+0x16>
 800735e:	f06f 0001 	mvn.w	r0, #1
 8007362:	e7f8      	b.n	8007356 <__ascii_mbtowc+0x16>

08007364 <memmove>:
 8007364:	4288      	cmp	r0, r1
 8007366:	b510      	push	{r4, lr}
 8007368:	eb01 0402 	add.w	r4, r1, r2
 800736c:	d902      	bls.n	8007374 <memmove+0x10>
 800736e:	4284      	cmp	r4, r0
 8007370:	4623      	mov	r3, r4
 8007372:	d807      	bhi.n	8007384 <memmove+0x20>
 8007374:	1e43      	subs	r3, r0, #1
 8007376:	42a1      	cmp	r1, r4
 8007378:	d008      	beq.n	800738c <memmove+0x28>
 800737a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007382:	e7f8      	b.n	8007376 <memmove+0x12>
 8007384:	4601      	mov	r1, r0
 8007386:	4402      	add	r2, r0
 8007388:	428a      	cmp	r2, r1
 800738a:	d100      	bne.n	800738e <memmove+0x2a>
 800738c:	bd10      	pop	{r4, pc}
 800738e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007396:	e7f7      	b.n	8007388 <memmove+0x24>

08007398 <__malloc_lock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_lock+0x8>)
 800739a:	f000 bc15 	b.w	8007bc8 <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20000404 	.word	0x20000404

080073a4 <__malloc_unlock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__malloc_unlock+0x8>)
 80073a6:	f000 bc10 	b.w	8007bca <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20000404 	.word	0x20000404

080073b0 <_realloc_r>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	4607      	mov	r7, r0
 80073b4:	4614      	mov	r4, r2
 80073b6:	460e      	mov	r6, r1
 80073b8:	b921      	cbnz	r1, 80073c4 <_realloc_r+0x14>
 80073ba:	4611      	mov	r1, r2
 80073bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073c0:	f7ff bdc8 	b.w	8006f54 <_malloc_r>
 80073c4:	b922      	cbnz	r2, 80073d0 <_realloc_r+0x20>
 80073c6:	f7ff fd79 	bl	8006ebc <_free_r>
 80073ca:	4625      	mov	r5, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d0:	f000 fc60 	bl	8007c94 <_malloc_usable_size_r>
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d20f      	bcs.n	80073f8 <_realloc_r+0x48>
 80073d8:	4621      	mov	r1, r4
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff fdba 	bl	8006f54 <_malloc_r>
 80073e0:	4605      	mov	r5, r0
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0f2      	beq.n	80073cc <_realloc_r+0x1c>
 80073e6:	4631      	mov	r1, r6
 80073e8:	4622      	mov	r2, r4
 80073ea:	f7ff f9c9 	bl	8006780 <memcpy>
 80073ee:	4631      	mov	r1, r6
 80073f0:	4638      	mov	r0, r7
 80073f2:	f7ff fd63 	bl	8006ebc <_free_r>
 80073f6:	e7e9      	b.n	80073cc <_realloc_r+0x1c>
 80073f8:	4635      	mov	r5, r6
 80073fa:	e7e7      	b.n	80073cc <_realloc_r+0x1c>

080073fc <__sfputc_r>:
 80073fc:	6893      	ldr	r3, [r2, #8]
 80073fe:	b410      	push	{r4}
 8007400:	3b01      	subs	r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	6093      	str	r3, [r2, #8]
 8007406:	da07      	bge.n	8007418 <__sfputc_r+0x1c>
 8007408:	6994      	ldr	r4, [r2, #24]
 800740a:	42a3      	cmp	r3, r4
 800740c:	db01      	blt.n	8007412 <__sfputc_r+0x16>
 800740e:	290a      	cmp	r1, #10
 8007410:	d102      	bne.n	8007418 <__sfputc_r+0x1c>
 8007412:	bc10      	pop	{r4}
 8007414:	f000 b94a 	b.w	80076ac <__swbuf_r>
 8007418:	6813      	ldr	r3, [r2, #0]
 800741a:	1c58      	adds	r0, r3, #1
 800741c:	6010      	str	r0, [r2, #0]
 800741e:	7019      	strb	r1, [r3, #0]
 8007420:	4608      	mov	r0, r1
 8007422:	bc10      	pop	{r4}
 8007424:	4770      	bx	lr

08007426 <__sfputs_r>:
 8007426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007428:	4606      	mov	r6, r0
 800742a:	460f      	mov	r7, r1
 800742c:	4614      	mov	r4, r2
 800742e:	18d5      	adds	r5, r2, r3
 8007430:	42ac      	cmp	r4, r5
 8007432:	d101      	bne.n	8007438 <__sfputs_r+0x12>
 8007434:	2000      	movs	r0, #0
 8007436:	e007      	b.n	8007448 <__sfputs_r+0x22>
 8007438:	463a      	mov	r2, r7
 800743a:	4630      	mov	r0, r6
 800743c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007440:	f7ff ffdc 	bl	80073fc <__sfputc_r>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d1f3      	bne.n	8007430 <__sfputs_r+0xa>
 8007448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800744c <_vfiprintf_r>:
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	460d      	mov	r5, r1
 8007452:	4614      	mov	r4, r2
 8007454:	4698      	mov	r8, r3
 8007456:	4606      	mov	r6, r0
 8007458:	b09d      	sub	sp, #116	; 0x74
 800745a:	b118      	cbz	r0, 8007464 <_vfiprintf_r+0x18>
 800745c:	6983      	ldr	r3, [r0, #24]
 800745e:	b90b      	cbnz	r3, 8007464 <_vfiprintf_r+0x18>
 8007460:	f000 fb14 	bl	8007a8c <__sinit>
 8007464:	4b89      	ldr	r3, [pc, #548]	; (800768c <_vfiprintf_r+0x240>)
 8007466:	429d      	cmp	r5, r3
 8007468:	d11b      	bne.n	80074a2 <_vfiprintf_r+0x56>
 800746a:	6875      	ldr	r5, [r6, #4]
 800746c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d405      	bmi.n	800747e <_vfiprintf_r+0x32>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	059a      	lsls	r2, r3, #22
 8007476:	d402      	bmi.n	800747e <_vfiprintf_r+0x32>
 8007478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800747a:	f000 fba5 	bl	8007bc8 <__retarget_lock_acquire_recursive>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	d501      	bpl.n	8007488 <_vfiprintf_r+0x3c>
 8007484:	692b      	ldr	r3, [r5, #16]
 8007486:	b9eb      	cbnz	r3, 80074c4 <_vfiprintf_r+0x78>
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f000 f96e 	bl	800776c <__swsetup_r>
 8007490:	b1c0      	cbz	r0, 80074c4 <_vfiprintf_r+0x78>
 8007492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007494:	07dc      	lsls	r4, r3, #31
 8007496:	d50e      	bpl.n	80074b6 <_vfiprintf_r+0x6a>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800749c:	b01d      	add	sp, #116	; 0x74
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	4b7b      	ldr	r3, [pc, #492]	; (8007690 <_vfiprintf_r+0x244>)
 80074a4:	429d      	cmp	r5, r3
 80074a6:	d101      	bne.n	80074ac <_vfiprintf_r+0x60>
 80074a8:	68b5      	ldr	r5, [r6, #8]
 80074aa:	e7df      	b.n	800746c <_vfiprintf_r+0x20>
 80074ac:	4b79      	ldr	r3, [pc, #484]	; (8007694 <_vfiprintf_r+0x248>)
 80074ae:	429d      	cmp	r5, r3
 80074b0:	bf08      	it	eq
 80074b2:	68f5      	ldreq	r5, [r6, #12]
 80074b4:	e7da      	b.n	800746c <_vfiprintf_r+0x20>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	0598      	lsls	r0, r3, #22
 80074ba:	d4ed      	bmi.n	8007498 <_vfiprintf_r+0x4c>
 80074bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074be:	f000 fb84 	bl	8007bca <__retarget_lock_release_recursive>
 80074c2:	e7e9      	b.n	8007498 <_vfiprintf_r+0x4c>
 80074c4:	2300      	movs	r3, #0
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	2320      	movs	r3, #32
 80074ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ce:	2330      	movs	r3, #48	; 0x30
 80074d0:	f04f 0901 	mov.w	r9, #1
 80074d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007698 <_vfiprintf_r+0x24c>
 80074dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074e0:	4623      	mov	r3, r4
 80074e2:	469a      	mov	sl, r3
 80074e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e8:	b10a      	cbz	r2, 80074ee <_vfiprintf_r+0xa2>
 80074ea:	2a25      	cmp	r2, #37	; 0x25
 80074ec:	d1f9      	bne.n	80074e2 <_vfiprintf_r+0x96>
 80074ee:	ebba 0b04 	subs.w	fp, sl, r4
 80074f2:	d00b      	beq.n	800750c <_vfiprintf_r+0xc0>
 80074f4:	465b      	mov	r3, fp
 80074f6:	4622      	mov	r2, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff ff93 	bl	8007426 <__sfputs_r>
 8007500:	3001      	adds	r0, #1
 8007502:	f000 80aa 	beq.w	800765a <_vfiprintf_r+0x20e>
 8007506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007508:	445a      	add	r2, fp
 800750a:	9209      	str	r2, [sp, #36]	; 0x24
 800750c:	f89a 3000 	ldrb.w	r3, [sl]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80a2 	beq.w	800765a <_vfiprintf_r+0x20e>
 8007516:	2300      	movs	r3, #0
 8007518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800751c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007520:	f10a 0a01 	add.w	sl, sl, #1
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800752c:	931a      	str	r3, [sp, #104]	; 0x68
 800752e:	4654      	mov	r4, sl
 8007530:	2205      	movs	r2, #5
 8007532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007536:	4858      	ldr	r0, [pc, #352]	; (8007698 <_vfiprintf_r+0x24c>)
 8007538:	f7ff f914 	bl	8006764 <memchr>
 800753c:	9a04      	ldr	r2, [sp, #16]
 800753e:	b9d8      	cbnz	r0, 8007578 <_vfiprintf_r+0x12c>
 8007540:	06d1      	lsls	r1, r2, #27
 8007542:	bf44      	itt	mi
 8007544:	2320      	movmi	r3, #32
 8007546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800754a:	0713      	lsls	r3, r2, #28
 800754c:	bf44      	itt	mi
 800754e:	232b      	movmi	r3, #43	; 0x2b
 8007550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007554:	f89a 3000 	ldrb.w	r3, [sl]
 8007558:	2b2a      	cmp	r3, #42	; 0x2a
 800755a:	d015      	beq.n	8007588 <_vfiprintf_r+0x13c>
 800755c:	4654      	mov	r4, sl
 800755e:	2000      	movs	r0, #0
 8007560:	f04f 0c0a 	mov.w	ip, #10
 8007564:	9a07      	ldr	r2, [sp, #28]
 8007566:	4621      	mov	r1, r4
 8007568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800756c:	3b30      	subs	r3, #48	; 0x30
 800756e:	2b09      	cmp	r3, #9
 8007570:	d94e      	bls.n	8007610 <_vfiprintf_r+0x1c4>
 8007572:	b1b0      	cbz	r0, 80075a2 <_vfiprintf_r+0x156>
 8007574:	9207      	str	r2, [sp, #28]
 8007576:	e014      	b.n	80075a2 <_vfiprintf_r+0x156>
 8007578:	eba0 0308 	sub.w	r3, r0, r8
 800757c:	fa09 f303 	lsl.w	r3, r9, r3
 8007580:	4313      	orrs	r3, r2
 8007582:	46a2      	mov	sl, r4
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	e7d2      	b.n	800752e <_vfiprintf_r+0xe2>
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	1d19      	adds	r1, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	9103      	str	r1, [sp, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	bfbb      	ittet	lt
 8007594:	425b      	neglt	r3, r3
 8007596:	f042 0202 	orrlt.w	r2, r2, #2
 800759a:	9307      	strge	r3, [sp, #28]
 800759c:	9307      	strlt	r3, [sp, #28]
 800759e:	bfb8      	it	lt
 80075a0:	9204      	strlt	r2, [sp, #16]
 80075a2:	7823      	ldrb	r3, [r4, #0]
 80075a4:	2b2e      	cmp	r3, #46	; 0x2e
 80075a6:	d10c      	bne.n	80075c2 <_vfiprintf_r+0x176>
 80075a8:	7863      	ldrb	r3, [r4, #1]
 80075aa:	2b2a      	cmp	r3, #42	; 0x2a
 80075ac:	d135      	bne.n	800761a <_vfiprintf_r+0x1ce>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	3402      	adds	r4, #2
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	9203      	str	r2, [sp, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfb8      	it	lt
 80075bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075c0:	9305      	str	r3, [sp, #20]
 80075c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076a8 <_vfiprintf_r+0x25c>
 80075c6:	2203      	movs	r2, #3
 80075c8:	4650      	mov	r0, sl
 80075ca:	7821      	ldrb	r1, [r4, #0]
 80075cc:	f7ff f8ca 	bl	8006764 <memchr>
 80075d0:	b140      	cbz	r0, 80075e4 <_vfiprintf_r+0x198>
 80075d2:	2340      	movs	r3, #64	; 0x40
 80075d4:	eba0 000a 	sub.w	r0, r0, sl
 80075d8:	fa03 f000 	lsl.w	r0, r3, r0
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	3401      	adds	r4, #1
 80075e0:	4303      	orrs	r3, r0
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e8:	2206      	movs	r2, #6
 80075ea:	482c      	ldr	r0, [pc, #176]	; (800769c <_vfiprintf_r+0x250>)
 80075ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f0:	f7ff f8b8 	bl	8006764 <memchr>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d03f      	beq.n	8007678 <_vfiprintf_r+0x22c>
 80075f8:	4b29      	ldr	r3, [pc, #164]	; (80076a0 <_vfiprintf_r+0x254>)
 80075fa:	bb1b      	cbnz	r3, 8007644 <_vfiprintf_r+0x1f8>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	3307      	adds	r3, #7
 8007600:	f023 0307 	bic.w	r3, r3, #7
 8007604:	3308      	adds	r3, #8
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	443b      	add	r3, r7
 800760c:	9309      	str	r3, [sp, #36]	; 0x24
 800760e:	e767      	b.n	80074e0 <_vfiprintf_r+0x94>
 8007610:	460c      	mov	r4, r1
 8007612:	2001      	movs	r0, #1
 8007614:	fb0c 3202 	mla	r2, ip, r2, r3
 8007618:	e7a5      	b.n	8007566 <_vfiprintf_r+0x11a>
 800761a:	2300      	movs	r3, #0
 800761c:	f04f 0c0a 	mov.w	ip, #10
 8007620:	4619      	mov	r1, r3
 8007622:	3401      	adds	r4, #1
 8007624:	9305      	str	r3, [sp, #20]
 8007626:	4620      	mov	r0, r4
 8007628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800762c:	3a30      	subs	r2, #48	; 0x30
 800762e:	2a09      	cmp	r2, #9
 8007630:	d903      	bls.n	800763a <_vfiprintf_r+0x1ee>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0c5      	beq.n	80075c2 <_vfiprintf_r+0x176>
 8007636:	9105      	str	r1, [sp, #20]
 8007638:	e7c3      	b.n	80075c2 <_vfiprintf_r+0x176>
 800763a:	4604      	mov	r4, r0
 800763c:	2301      	movs	r3, #1
 800763e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007642:	e7f0      	b.n	8007626 <_vfiprintf_r+0x1da>
 8007644:	ab03      	add	r3, sp, #12
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	462a      	mov	r2, r5
 800764a:	4630      	mov	r0, r6
 800764c:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <_vfiprintf_r+0x258>)
 800764e:	a904      	add	r1, sp, #16
 8007650:	f7fd fe1e 	bl	8005290 <_printf_float>
 8007654:	4607      	mov	r7, r0
 8007656:	1c78      	adds	r0, r7, #1
 8007658:	d1d6      	bne.n	8007608 <_vfiprintf_r+0x1bc>
 800765a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765c:	07d9      	lsls	r1, r3, #31
 800765e:	d405      	bmi.n	800766c <_vfiprintf_r+0x220>
 8007660:	89ab      	ldrh	r3, [r5, #12]
 8007662:	059a      	lsls	r2, r3, #22
 8007664:	d402      	bmi.n	800766c <_vfiprintf_r+0x220>
 8007666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007668:	f000 faaf 	bl	8007bca <__retarget_lock_release_recursive>
 800766c:	89ab      	ldrh	r3, [r5, #12]
 800766e:	065b      	lsls	r3, r3, #25
 8007670:	f53f af12 	bmi.w	8007498 <_vfiprintf_r+0x4c>
 8007674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007676:	e711      	b.n	800749c <_vfiprintf_r+0x50>
 8007678:	ab03      	add	r3, sp, #12
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	462a      	mov	r2, r5
 800767e:	4630      	mov	r0, r6
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <_vfiprintf_r+0x258>)
 8007682:	a904      	add	r1, sp, #16
 8007684:	f7fe f8a0 	bl	80057c8 <_printf_i>
 8007688:	e7e4      	b.n	8007654 <_vfiprintf_r+0x208>
 800768a:	bf00      	nop
 800768c:	080082c4 	.word	0x080082c4
 8007690:	080082e4 	.word	0x080082e4
 8007694:	080082a4 	.word	0x080082a4
 8007698:	0800814c 	.word	0x0800814c
 800769c:	08008156 	.word	0x08008156
 80076a0:	08005291 	.word	0x08005291
 80076a4:	08007427 	.word	0x08007427
 80076a8:	08008152 	.word	0x08008152

080076ac <__swbuf_r>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	4605      	mov	r5, r0
 80076b4:	b118      	cbz	r0, 80076be <__swbuf_r+0x12>
 80076b6:	6983      	ldr	r3, [r0, #24]
 80076b8:	b90b      	cbnz	r3, 80076be <__swbuf_r+0x12>
 80076ba:	f000 f9e7 	bl	8007a8c <__sinit>
 80076be:	4b21      	ldr	r3, [pc, #132]	; (8007744 <__swbuf_r+0x98>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d12b      	bne.n	800771c <__swbuf_r+0x70>
 80076c4:	686c      	ldr	r4, [r5, #4]
 80076c6:	69a3      	ldr	r3, [r4, #24]
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	071a      	lsls	r2, r3, #28
 80076ce:	d52f      	bpl.n	8007730 <__swbuf_r+0x84>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	b36b      	cbz	r3, 8007730 <__swbuf_r+0x84>
 80076d4:	6923      	ldr	r3, [r4, #16]
 80076d6:	6820      	ldr	r0, [r4, #0]
 80076d8:	b2f6      	uxtb	r6, r6
 80076da:	1ac0      	subs	r0, r0, r3
 80076dc:	6963      	ldr	r3, [r4, #20]
 80076de:	4637      	mov	r7, r6
 80076e0:	4283      	cmp	r3, r0
 80076e2:	dc04      	bgt.n	80076ee <__swbuf_r+0x42>
 80076e4:	4621      	mov	r1, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f93c 	bl	8007964 <_fflush_r>
 80076ec:	bb30      	cbnz	r0, 800773c <__swbuf_r+0x90>
 80076ee:	68a3      	ldr	r3, [r4, #8]
 80076f0:	3001      	adds	r0, #1
 80076f2:	3b01      	subs	r3, #1
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	6022      	str	r2, [r4, #0]
 80076fc:	701e      	strb	r6, [r3, #0]
 80076fe:	6963      	ldr	r3, [r4, #20]
 8007700:	4283      	cmp	r3, r0
 8007702:	d004      	beq.n	800770e <__swbuf_r+0x62>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	07db      	lsls	r3, r3, #31
 8007708:	d506      	bpl.n	8007718 <__swbuf_r+0x6c>
 800770a:	2e0a      	cmp	r6, #10
 800770c:	d104      	bne.n	8007718 <__swbuf_r+0x6c>
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f927 	bl	8007964 <_fflush_r>
 8007716:	b988      	cbnz	r0, 800773c <__swbuf_r+0x90>
 8007718:	4638      	mov	r0, r7
 800771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <__swbuf_r+0x9c>)
 800771e:	429c      	cmp	r4, r3
 8007720:	d101      	bne.n	8007726 <__swbuf_r+0x7a>
 8007722:	68ac      	ldr	r4, [r5, #8]
 8007724:	e7cf      	b.n	80076c6 <__swbuf_r+0x1a>
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <__swbuf_r+0xa0>)
 8007728:	429c      	cmp	r4, r3
 800772a:	bf08      	it	eq
 800772c:	68ec      	ldreq	r4, [r5, #12]
 800772e:	e7ca      	b.n	80076c6 <__swbuf_r+0x1a>
 8007730:	4621      	mov	r1, r4
 8007732:	4628      	mov	r0, r5
 8007734:	f000 f81a 	bl	800776c <__swsetup_r>
 8007738:	2800      	cmp	r0, #0
 800773a:	d0cb      	beq.n	80076d4 <__swbuf_r+0x28>
 800773c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007740:	e7ea      	b.n	8007718 <__swbuf_r+0x6c>
 8007742:	bf00      	nop
 8007744:	080082c4 	.word	0x080082c4
 8007748:	080082e4 	.word	0x080082e4
 800774c:	080082a4 	.word	0x080082a4

08007750 <__ascii_wctomb>:
 8007750:	4603      	mov	r3, r0
 8007752:	4608      	mov	r0, r1
 8007754:	b141      	cbz	r1, 8007768 <__ascii_wctomb+0x18>
 8007756:	2aff      	cmp	r2, #255	; 0xff
 8007758:	d904      	bls.n	8007764 <__ascii_wctomb+0x14>
 800775a:	228a      	movs	r2, #138	; 0x8a
 800775c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	4770      	bx	lr
 8007764:	2001      	movs	r0, #1
 8007766:	700a      	strb	r2, [r1, #0]
 8007768:	4770      	bx	lr
	...

0800776c <__swsetup_r>:
 800776c:	4b32      	ldr	r3, [pc, #200]	; (8007838 <__swsetup_r+0xcc>)
 800776e:	b570      	push	{r4, r5, r6, lr}
 8007770:	681d      	ldr	r5, [r3, #0]
 8007772:	4606      	mov	r6, r0
 8007774:	460c      	mov	r4, r1
 8007776:	b125      	cbz	r5, 8007782 <__swsetup_r+0x16>
 8007778:	69ab      	ldr	r3, [r5, #24]
 800777a:	b913      	cbnz	r3, 8007782 <__swsetup_r+0x16>
 800777c:	4628      	mov	r0, r5
 800777e:	f000 f985 	bl	8007a8c <__sinit>
 8007782:	4b2e      	ldr	r3, [pc, #184]	; (800783c <__swsetup_r+0xd0>)
 8007784:	429c      	cmp	r4, r3
 8007786:	d10f      	bne.n	80077a8 <__swsetup_r+0x3c>
 8007788:	686c      	ldr	r4, [r5, #4]
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007790:	0719      	lsls	r1, r3, #28
 8007792:	d42c      	bmi.n	80077ee <__swsetup_r+0x82>
 8007794:	06dd      	lsls	r5, r3, #27
 8007796:	d411      	bmi.n	80077bc <__swsetup_r+0x50>
 8007798:	2309      	movs	r3, #9
 800779a:	6033      	str	r3, [r6, #0]
 800779c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	e03e      	b.n	8007826 <__swsetup_r+0xba>
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <__swsetup_r+0xd4>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d101      	bne.n	80077b2 <__swsetup_r+0x46>
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	e7eb      	b.n	800778a <__swsetup_r+0x1e>
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <__swsetup_r+0xd8>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	bf08      	it	eq
 80077b8:	68ec      	ldreq	r4, [r5, #12]
 80077ba:	e7e6      	b.n	800778a <__swsetup_r+0x1e>
 80077bc:	0758      	lsls	r0, r3, #29
 80077be:	d512      	bpl.n	80077e6 <__swsetup_r+0x7a>
 80077c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c2:	b141      	cbz	r1, 80077d6 <__swsetup_r+0x6a>
 80077c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c8:	4299      	cmp	r1, r3
 80077ca:	d002      	beq.n	80077d2 <__swsetup_r+0x66>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff fb75 	bl	8006ebc <_free_r>
 80077d2:	2300      	movs	r3, #0
 80077d4:	6363      	str	r3, [r4, #52]	; 0x34
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	2300      	movs	r3, #0
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f043 0308 	orr.w	r3, r3, #8
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	b94b      	cbnz	r3, 8007806 <__swsetup_r+0x9a>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	d003      	beq.n	8007806 <__swsetup_r+0x9a>
 80077fe:	4621      	mov	r1, r4
 8007800:	4630      	mov	r0, r6
 8007802:	f000 fa07 	bl	8007c14 <__smakebuf_r>
 8007806:	89a0      	ldrh	r0, [r4, #12]
 8007808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800780c:	f010 0301 	ands.w	r3, r0, #1
 8007810:	d00a      	beq.n	8007828 <__swsetup_r+0xbc>
 8007812:	2300      	movs	r3, #0
 8007814:	60a3      	str	r3, [r4, #8]
 8007816:	6963      	ldr	r3, [r4, #20]
 8007818:	425b      	negs	r3, r3
 800781a:	61a3      	str	r3, [r4, #24]
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	b943      	cbnz	r3, 8007832 <__swsetup_r+0xc6>
 8007820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007824:	d1ba      	bne.n	800779c <__swsetup_r+0x30>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	0781      	lsls	r1, r0, #30
 800782a:	bf58      	it	pl
 800782c:	6963      	ldrpl	r3, [r4, #20]
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	e7f4      	b.n	800781c <__swsetup_r+0xb0>
 8007832:	2000      	movs	r0, #0
 8007834:	e7f7      	b.n	8007826 <__swsetup_r+0xba>
 8007836:	bf00      	nop
 8007838:	2000000c 	.word	0x2000000c
 800783c:	080082c4 	.word	0x080082c4
 8007840:	080082e4 	.word	0x080082e4
 8007844:	080082a4 	.word	0x080082a4

08007848 <abort>:
 8007848:	2006      	movs	r0, #6
 800784a:	b508      	push	{r3, lr}
 800784c:	f000 fa52 	bl	8007cf4 <raise>
 8007850:	2001      	movs	r0, #1
 8007852:	f7fa fa63 	bl	8001d1c <_exit>
	...

08007858 <__sflush_r>:
 8007858:	898a      	ldrh	r2, [r1, #12]
 800785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785e:	4605      	mov	r5, r0
 8007860:	0710      	lsls	r0, r2, #28
 8007862:	460c      	mov	r4, r1
 8007864:	d458      	bmi.n	8007918 <__sflush_r+0xc0>
 8007866:	684b      	ldr	r3, [r1, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc05      	bgt.n	8007878 <__sflush_r+0x20>
 800786c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	dc02      	bgt.n	8007878 <__sflush_r+0x20>
 8007872:	2000      	movs	r0, #0
 8007874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800787a:	2e00      	cmp	r6, #0
 800787c:	d0f9      	beq.n	8007872 <__sflush_r+0x1a>
 800787e:	2300      	movs	r3, #0
 8007880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007884:	682f      	ldr	r7, [r5, #0]
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	d032      	beq.n	80078f0 <__sflush_r+0x98>
 800788a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	075a      	lsls	r2, r3, #29
 8007890:	d505      	bpl.n	800789e <__sflush_r+0x46>
 8007892:	6863      	ldr	r3, [r4, #4]
 8007894:	1ac0      	subs	r0, r0, r3
 8007896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007898:	b10b      	cbz	r3, 800789e <__sflush_r+0x46>
 800789a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800789c:	1ac0      	subs	r0, r0, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	4602      	mov	r2, r0
 80078a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078a4:	4628      	mov	r0, r5
 80078a6:	6a21      	ldr	r1, [r4, #32]
 80078a8:	47b0      	blx	r6
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	d106      	bne.n	80078be <__sflush_r+0x66>
 80078b0:	6829      	ldr	r1, [r5, #0]
 80078b2:	291d      	cmp	r1, #29
 80078b4:	d82c      	bhi.n	8007910 <__sflush_r+0xb8>
 80078b6:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <__sflush_r+0x108>)
 80078b8:	40ca      	lsrs	r2, r1
 80078ba:	07d6      	lsls	r6, r2, #31
 80078bc:	d528      	bpl.n	8007910 <__sflush_r+0xb8>
 80078be:	2200      	movs	r2, #0
 80078c0:	6062      	str	r2, [r4, #4]
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	04d9      	lsls	r1, r3, #19
 80078c6:	6022      	str	r2, [r4, #0]
 80078c8:	d504      	bpl.n	80078d4 <__sflush_r+0x7c>
 80078ca:	1c42      	adds	r2, r0, #1
 80078cc:	d101      	bne.n	80078d2 <__sflush_r+0x7a>
 80078ce:	682b      	ldr	r3, [r5, #0]
 80078d0:	b903      	cbnz	r3, 80078d4 <__sflush_r+0x7c>
 80078d2:	6560      	str	r0, [r4, #84]	; 0x54
 80078d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078d6:	602f      	str	r7, [r5, #0]
 80078d8:	2900      	cmp	r1, #0
 80078da:	d0ca      	beq.n	8007872 <__sflush_r+0x1a>
 80078dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d002      	beq.n	80078ea <__sflush_r+0x92>
 80078e4:	4628      	mov	r0, r5
 80078e6:	f7ff fae9 	bl	8006ebc <_free_r>
 80078ea:	2000      	movs	r0, #0
 80078ec:	6360      	str	r0, [r4, #52]	; 0x34
 80078ee:	e7c1      	b.n	8007874 <__sflush_r+0x1c>
 80078f0:	6a21      	ldr	r1, [r4, #32]
 80078f2:	2301      	movs	r3, #1
 80078f4:	4628      	mov	r0, r5
 80078f6:	47b0      	blx	r6
 80078f8:	1c41      	adds	r1, r0, #1
 80078fa:	d1c7      	bne.n	800788c <__sflush_r+0x34>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0c4      	beq.n	800788c <__sflush_r+0x34>
 8007902:	2b1d      	cmp	r3, #29
 8007904:	d001      	beq.n	800790a <__sflush_r+0xb2>
 8007906:	2b16      	cmp	r3, #22
 8007908:	d101      	bne.n	800790e <__sflush_r+0xb6>
 800790a:	602f      	str	r7, [r5, #0]
 800790c:	e7b1      	b.n	8007872 <__sflush_r+0x1a>
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007914:	81a3      	strh	r3, [r4, #12]
 8007916:	e7ad      	b.n	8007874 <__sflush_r+0x1c>
 8007918:	690f      	ldr	r7, [r1, #16]
 800791a:	2f00      	cmp	r7, #0
 800791c:	d0a9      	beq.n	8007872 <__sflush_r+0x1a>
 800791e:	0793      	lsls	r3, r2, #30
 8007920:	bf18      	it	ne
 8007922:	2300      	movne	r3, #0
 8007924:	680e      	ldr	r6, [r1, #0]
 8007926:	bf08      	it	eq
 8007928:	694b      	ldreq	r3, [r1, #20]
 800792a:	eba6 0807 	sub.w	r8, r6, r7
 800792e:	600f      	str	r7, [r1, #0]
 8007930:	608b      	str	r3, [r1, #8]
 8007932:	f1b8 0f00 	cmp.w	r8, #0
 8007936:	dd9c      	ble.n	8007872 <__sflush_r+0x1a>
 8007938:	4643      	mov	r3, r8
 800793a:	463a      	mov	r2, r7
 800793c:	4628      	mov	r0, r5
 800793e:	6a21      	ldr	r1, [r4, #32]
 8007940:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007942:	47b0      	blx	r6
 8007944:	2800      	cmp	r0, #0
 8007946:	dc06      	bgt.n	8007956 <__sflush_r+0xfe>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800794e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	e78e      	b.n	8007874 <__sflush_r+0x1c>
 8007956:	4407      	add	r7, r0
 8007958:	eba8 0800 	sub.w	r8, r8, r0
 800795c:	e7e9      	b.n	8007932 <__sflush_r+0xda>
 800795e:	bf00      	nop
 8007960:	20400001 	.word	0x20400001

08007964 <_fflush_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	690b      	ldr	r3, [r1, #16]
 8007968:	4605      	mov	r5, r0
 800796a:	460c      	mov	r4, r1
 800796c:	b913      	cbnz	r3, 8007974 <_fflush_r+0x10>
 800796e:	2500      	movs	r5, #0
 8007970:	4628      	mov	r0, r5
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	b118      	cbz	r0, 800797e <_fflush_r+0x1a>
 8007976:	6983      	ldr	r3, [r0, #24]
 8007978:	b90b      	cbnz	r3, 800797e <_fflush_r+0x1a>
 800797a:	f000 f887 	bl	8007a8c <__sinit>
 800797e:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <_fflush_r+0x6c>)
 8007980:	429c      	cmp	r4, r3
 8007982:	d11b      	bne.n	80079bc <_fflush_r+0x58>
 8007984:	686c      	ldr	r4, [r5, #4]
 8007986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0ef      	beq.n	800796e <_fflush_r+0xa>
 800798e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007990:	07d0      	lsls	r0, r2, #31
 8007992:	d404      	bmi.n	800799e <_fflush_r+0x3a>
 8007994:	0599      	lsls	r1, r3, #22
 8007996:	d402      	bmi.n	800799e <_fflush_r+0x3a>
 8007998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800799a:	f000 f915 	bl	8007bc8 <__retarget_lock_acquire_recursive>
 800799e:	4628      	mov	r0, r5
 80079a0:	4621      	mov	r1, r4
 80079a2:	f7ff ff59 	bl	8007858 <__sflush_r>
 80079a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079a8:	4605      	mov	r5, r0
 80079aa:	07da      	lsls	r2, r3, #31
 80079ac:	d4e0      	bmi.n	8007970 <_fflush_r+0xc>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	059b      	lsls	r3, r3, #22
 80079b2:	d4dd      	bmi.n	8007970 <_fflush_r+0xc>
 80079b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b6:	f000 f908 	bl	8007bca <__retarget_lock_release_recursive>
 80079ba:	e7d9      	b.n	8007970 <_fflush_r+0xc>
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <_fflush_r+0x70>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	d101      	bne.n	80079c6 <_fflush_r+0x62>
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	e7df      	b.n	8007986 <_fflush_r+0x22>
 80079c6:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <_fflush_r+0x74>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	bf08      	it	eq
 80079cc:	68ec      	ldreq	r4, [r5, #12]
 80079ce:	e7da      	b.n	8007986 <_fflush_r+0x22>
 80079d0:	080082c4 	.word	0x080082c4
 80079d4:	080082e4 	.word	0x080082e4
 80079d8:	080082a4 	.word	0x080082a4

080079dc <std>:
 80079dc:	2300      	movs	r3, #0
 80079de:	b510      	push	{r4, lr}
 80079e0:	4604      	mov	r4, r0
 80079e2:	e9c0 3300 	strd	r3, r3, [r0]
 80079e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ea:	6083      	str	r3, [r0, #8]
 80079ec:	8181      	strh	r1, [r0, #12]
 80079ee:	6643      	str	r3, [r0, #100]	; 0x64
 80079f0:	81c2      	strh	r2, [r0, #14]
 80079f2:	6183      	str	r3, [r0, #24]
 80079f4:	4619      	mov	r1, r3
 80079f6:	2208      	movs	r2, #8
 80079f8:	305c      	adds	r0, #92	; 0x5c
 80079fa:	f7fd fba3 	bl	8005144 <memset>
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <std+0x38>)
 8007a00:	6224      	str	r4, [r4, #32]
 8007a02:	6263      	str	r3, [r4, #36]	; 0x24
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <std+0x3c>)
 8007a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a08:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <std+0x40>)
 8007a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a0c:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <std+0x44>)
 8007a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	bf00      	nop
 8007a14:	08007d2d 	.word	0x08007d2d
 8007a18:	08007d4f 	.word	0x08007d4f
 8007a1c:	08007d87 	.word	0x08007d87
 8007a20:	08007dab 	.word	0x08007dab

08007a24 <_cleanup_r>:
 8007a24:	4901      	ldr	r1, [pc, #4]	; (8007a2c <_cleanup_r+0x8>)
 8007a26:	f000 b8af 	b.w	8007b88 <_fwalk_reent>
 8007a2a:	bf00      	nop
 8007a2c:	08007965 	.word	0x08007965

08007a30 <__sfmoreglue>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	2568      	movs	r5, #104	; 0x68
 8007a34:	1e4a      	subs	r2, r1, #1
 8007a36:	4355      	muls	r5, r2
 8007a38:	460e      	mov	r6, r1
 8007a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a3e:	f7ff fa89 	bl	8006f54 <_malloc_r>
 8007a42:	4604      	mov	r4, r0
 8007a44:	b140      	cbz	r0, 8007a58 <__sfmoreglue+0x28>
 8007a46:	2100      	movs	r1, #0
 8007a48:	e9c0 1600 	strd	r1, r6, [r0]
 8007a4c:	300c      	adds	r0, #12
 8007a4e:	60a0      	str	r0, [r4, #8]
 8007a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a54:	f7fd fb76 	bl	8005144 <memset>
 8007a58:	4620      	mov	r0, r4
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}

08007a5c <__sfp_lock_acquire>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__sfp_lock_acquire+0x8>)
 8007a5e:	f000 b8b3 	b.w	8007bc8 <__retarget_lock_acquire_recursive>
 8007a62:	bf00      	nop
 8007a64:	20000408 	.word	0x20000408

08007a68 <__sfp_lock_release>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__sfp_lock_release+0x8>)
 8007a6a:	f000 b8ae 	b.w	8007bca <__retarget_lock_release_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20000408 	.word	0x20000408

08007a74 <__sinit_lock_acquire>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__sinit_lock_acquire+0x8>)
 8007a76:	f000 b8a7 	b.w	8007bc8 <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20000403 	.word	0x20000403

08007a80 <__sinit_lock_release>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__sinit_lock_release+0x8>)
 8007a82:	f000 b8a2 	b.w	8007bca <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	20000403 	.word	0x20000403

08007a8c <__sinit>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	f7ff fff0 	bl	8007a74 <__sinit_lock_acquire>
 8007a94:	69a3      	ldr	r3, [r4, #24]
 8007a96:	b11b      	cbz	r3, 8007aa0 <__sinit+0x14>
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f7ff bff0 	b.w	8007a80 <__sinit_lock_release>
 8007aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8007aa6:	4b13      	ldr	r3, [pc, #76]	; (8007af4 <__sinit+0x68>)
 8007aa8:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <__sinit+0x6c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8007aae:	42a3      	cmp	r3, r4
 8007ab0:	bf08      	it	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bf08      	it	eq
 8007ab8:	61a3      	streq	r3, [r4, #24]
 8007aba:	f000 f81f 	bl	8007afc <__sfp>
 8007abe:	6060      	str	r0, [r4, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f81b 	bl	8007afc <__sfp>
 8007ac6:	60a0      	str	r0, [r4, #8]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f817 	bl	8007afc <__sfp>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2104      	movs	r1, #4
 8007ad2:	60e0      	str	r0, [r4, #12]
 8007ad4:	6860      	ldr	r0, [r4, #4]
 8007ad6:	f7ff ff81 	bl	80079dc <std>
 8007ada:	2201      	movs	r2, #1
 8007adc:	2109      	movs	r1, #9
 8007ade:	68a0      	ldr	r0, [r4, #8]
 8007ae0:	f7ff ff7c 	bl	80079dc <std>
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	2112      	movs	r1, #18
 8007ae8:	68e0      	ldr	r0, [r4, #12]
 8007aea:	f7ff ff77 	bl	80079dc <std>
 8007aee:	2301      	movs	r3, #1
 8007af0:	61a3      	str	r3, [r4, #24]
 8007af2:	e7d1      	b.n	8007a98 <__sinit+0xc>
 8007af4:	08007f20 	.word	0x08007f20
 8007af8:	08007a25 	.word	0x08007a25

08007afc <__sfp>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	4607      	mov	r7, r0
 8007b00:	f7ff ffac 	bl	8007a5c <__sfp_lock_acquire>
 8007b04:	4b1e      	ldr	r3, [pc, #120]	; (8007b80 <__sfp+0x84>)
 8007b06:	681e      	ldr	r6, [r3, #0]
 8007b08:	69b3      	ldr	r3, [r6, #24]
 8007b0a:	b913      	cbnz	r3, 8007b12 <__sfp+0x16>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff ffbd 	bl	8007a8c <__sinit>
 8007b12:	3648      	adds	r6, #72	; 0x48
 8007b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	d503      	bpl.n	8007b24 <__sfp+0x28>
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	b30b      	cbz	r3, 8007b64 <__sfp+0x68>
 8007b20:	6836      	ldr	r6, [r6, #0]
 8007b22:	e7f7      	b.n	8007b14 <__sfp+0x18>
 8007b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b28:	b9d5      	cbnz	r5, 8007b60 <__sfp+0x64>
 8007b2a:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <__sfp+0x88>)
 8007b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b30:	60e3      	str	r3, [r4, #12]
 8007b32:	6665      	str	r5, [r4, #100]	; 0x64
 8007b34:	f000 f847 	bl	8007bc6 <__retarget_lock_init_recursive>
 8007b38:	f7ff ff96 	bl	8007a68 <__sfp_lock_release>
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	4629      	mov	r1, r5
 8007b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b48:	6025      	str	r5, [r4, #0]
 8007b4a:	61a5      	str	r5, [r4, #24]
 8007b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b50:	f7fd faf8 	bl	8005144 <memset>
 8007b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b60:	3468      	adds	r4, #104	; 0x68
 8007b62:	e7d9      	b.n	8007b18 <__sfp+0x1c>
 8007b64:	2104      	movs	r1, #4
 8007b66:	4638      	mov	r0, r7
 8007b68:	f7ff ff62 	bl	8007a30 <__sfmoreglue>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	6030      	str	r0, [r6, #0]
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1d5      	bne.n	8007b20 <__sfp+0x24>
 8007b74:	f7ff ff78 	bl	8007a68 <__sfp_lock_release>
 8007b78:	230c      	movs	r3, #12
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	e7ee      	b.n	8007b5c <__sfp+0x60>
 8007b7e:	bf00      	nop
 8007b80:	08007f20 	.word	0x08007f20
 8007b84:	ffff0001 	.word	0xffff0001

08007b88 <_fwalk_reent>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	4688      	mov	r8, r1
 8007b90:	2700      	movs	r7, #0
 8007b92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b9e:	d505      	bpl.n	8007bac <_fwalk_reent+0x24>
 8007ba0:	6824      	ldr	r4, [r4, #0]
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	d1f7      	bne.n	8007b96 <_fwalk_reent+0xe>
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bac:	89ab      	ldrh	r3, [r5, #12]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d907      	bls.n	8007bc2 <_fwalk_reent+0x3a>
 8007bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	d003      	beq.n	8007bc2 <_fwalk_reent+0x3a>
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	47c0      	blx	r8
 8007bc0:	4307      	orrs	r7, r0
 8007bc2:	3568      	adds	r5, #104	; 0x68
 8007bc4:	e7e9      	b.n	8007b9a <_fwalk_reent+0x12>

08007bc6 <__retarget_lock_init_recursive>:
 8007bc6:	4770      	bx	lr

08007bc8 <__retarget_lock_acquire_recursive>:
 8007bc8:	4770      	bx	lr

08007bca <__retarget_lock_release_recursive>:
 8007bca:	4770      	bx	lr

08007bcc <__swhatbuf_r>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	460e      	mov	r6, r1
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	461d      	mov	r5, r3
 8007bda:	b096      	sub	sp, #88	; 0x58
 8007bdc:	da07      	bge.n	8007bee <__swhatbuf_r+0x22>
 8007bde:	2300      	movs	r3, #0
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	89b3      	ldrh	r3, [r6, #12]
 8007be4:	061a      	lsls	r2, r3, #24
 8007be6:	d410      	bmi.n	8007c0a <__swhatbuf_r+0x3e>
 8007be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bec:	e00e      	b.n	8007c0c <__swhatbuf_r+0x40>
 8007bee:	466a      	mov	r2, sp
 8007bf0:	f000 f902 	bl	8007df8 <_fstat_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	dbf2      	blt.n	8007bde <__swhatbuf_r+0x12>
 8007bf8:	9a01      	ldr	r2, [sp, #4]
 8007bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c02:	425a      	negs	r2, r3
 8007c04:	415a      	adcs	r2, r3
 8007c06:	602a      	str	r2, [r5, #0]
 8007c08:	e7ee      	b.n	8007be8 <__swhatbuf_r+0x1c>
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	b016      	add	sp, #88	; 0x58
 8007c12:	bd70      	pop	{r4, r5, r6, pc}

08007c14 <__smakebuf_r>:
 8007c14:	898b      	ldrh	r3, [r1, #12]
 8007c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c18:	079d      	lsls	r5, r3, #30
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	d507      	bpl.n	8007c30 <__smakebuf_r+0x1c>
 8007c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	6163      	str	r3, [r4, #20]
 8007c2c:	b002      	add	sp, #8
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	466a      	mov	r2, sp
 8007c32:	ab01      	add	r3, sp, #4
 8007c34:	f7ff ffca 	bl	8007bcc <__swhatbuf_r>
 8007c38:	9900      	ldr	r1, [sp, #0]
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff f989 	bl	8006f54 <_malloc_r>
 8007c42:	b948      	cbnz	r0, 8007c58 <__smakebuf_r+0x44>
 8007c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c48:	059a      	lsls	r2, r3, #22
 8007c4a:	d4ef      	bmi.n	8007c2c <__smakebuf_r+0x18>
 8007c4c:	f023 0303 	bic.w	r3, r3, #3
 8007c50:	f043 0302 	orr.w	r3, r3, #2
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	e7e3      	b.n	8007c20 <__smakebuf_r+0xc>
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <__smakebuf_r+0x7c>)
 8007c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	6020      	str	r0, [r4, #0]
 8007c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	9b00      	ldr	r3, [sp, #0]
 8007c68:	6120      	str	r0, [r4, #16]
 8007c6a:	6163      	str	r3, [r4, #20]
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	b15b      	cbz	r3, 8007c88 <__smakebuf_r+0x74>
 8007c70:	4630      	mov	r0, r6
 8007c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c76:	f000 f8d1 	bl	8007e1c <_isatty_r>
 8007c7a:	b128      	cbz	r0, 8007c88 <__smakebuf_r+0x74>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	89a0      	ldrh	r0, [r4, #12]
 8007c8a:	4305      	orrs	r5, r0
 8007c8c:	81a5      	strh	r5, [r4, #12]
 8007c8e:	e7cd      	b.n	8007c2c <__smakebuf_r+0x18>
 8007c90:	08007a25 	.word	0x08007a25

08007c94 <_malloc_usable_size_r>:
 8007c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c98:	1f18      	subs	r0, r3, #4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfbc      	itt	lt
 8007c9e:	580b      	ldrlt	r3, [r1, r0]
 8007ca0:	18c0      	addlt	r0, r0, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_raise_r>:
 8007ca4:	291f      	cmp	r1, #31
 8007ca6:	b538      	push	{r3, r4, r5, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	d904      	bls.n	8007cb8 <_raise_r+0x14>
 8007cae:	2316      	movs	r3, #22
 8007cb0:	6003      	str	r3, [r0, #0]
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007cba:	b112      	cbz	r2, 8007cc2 <_raise_r+0x1e>
 8007cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cc0:	b94b      	cbnz	r3, 8007cd6 <_raise_r+0x32>
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f830 	bl	8007d28 <_getpid_r>
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd2:	f000 b817 	b.w	8007d04 <_kill_r>
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d00a      	beq.n	8007cf0 <_raise_r+0x4c>
 8007cda:	1c59      	adds	r1, r3, #1
 8007cdc:	d103      	bne.n	8007ce6 <_raise_r+0x42>
 8007cde:	2316      	movs	r3, #22
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	e7e7      	b.n	8007cb6 <_raise_r+0x12>
 8007ce6:	2400      	movs	r4, #0
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cee:	4798      	blx	r3
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7e0      	b.n	8007cb6 <_raise_r+0x12>

08007cf4 <raise>:
 8007cf4:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <raise+0xc>)
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	f7ff bfd3 	b.w	8007ca4 <_raise_r>
 8007cfe:	bf00      	nop
 8007d00:	2000000c 	.word	0x2000000c

08007d04 <_kill_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	2300      	movs	r3, #0
 8007d08:	4d06      	ldr	r5, [pc, #24]	; (8007d24 <_kill_r+0x20>)
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	f7f9 fff3 	bl	8001cfc <_kill>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d102      	bne.n	8007d20 <_kill_r+0x1c>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	b103      	cbz	r3, 8007d20 <_kill_r+0x1c>
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	bf00      	nop
 8007d24:	200003fc 	.word	0x200003fc

08007d28 <_getpid_r>:
 8007d28:	f7f9 bfe1 	b.w	8001cee <_getpid>

08007d2c <__sread>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	f000 f894 	bl	8007e60 <_read_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	bfab      	itete	ge
 8007d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d40:	181b      	addge	r3, r3, r0
 8007d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d46:	bfac      	ite	ge
 8007d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d4a:	81a3      	strhlt	r3, [r4, #12]
 8007d4c:	bd10      	pop	{r4, pc}

08007d4e <__swrite>:
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	461f      	mov	r7, r3
 8007d54:	898b      	ldrh	r3, [r1, #12]
 8007d56:	4605      	mov	r5, r0
 8007d58:	05db      	lsls	r3, r3, #23
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	d505      	bpl.n	8007d6c <__swrite+0x1e>
 8007d60:	2302      	movs	r3, #2
 8007d62:	2200      	movs	r2, #0
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	f000 f868 	bl	8007e3c <_lseek_r>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	4632      	mov	r2, r6
 8007d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	4628      	mov	r0, r5
 8007d78:	463b      	mov	r3, r7
 8007d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	f000 b817 	b.w	8007db4 <_write_r>

08007d86 <__sseek>:
 8007d86:	b510      	push	{r4, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8e:	f000 f855 	bl	8007e3c <_lseek_r>
 8007d92:	1c43      	adds	r3, r0, #1
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	bf15      	itete	ne
 8007d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007da2:	81a3      	strheq	r3, [r4, #12]
 8007da4:	bf18      	it	ne
 8007da6:	81a3      	strhne	r3, [r4, #12]
 8007da8:	bd10      	pop	{r4, pc}

08007daa <__sclose>:
 8007daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dae:	f000 b813 	b.w	8007dd8 <_close_r>
	...

08007db4 <_write_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4d05      	ldr	r5, [pc, #20]	; (8007dd4 <_write_r+0x20>)
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7f9 ffd1 	bl	8001d6a <_write>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_write_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_write_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	200003fc 	.word	0x200003fc

08007dd8 <_close_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4d05      	ldr	r5, [pc, #20]	; (8007df4 <_close_r+0x1c>)
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	602b      	str	r3, [r5, #0]
 8007de4:	f7f9 ffdd 	bl	8001da2 <_close>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_close_r+0x1a>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_close_r+0x1a>
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	200003fc 	.word	0x200003fc

08007df8 <_fstat_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4d06      	ldr	r5, [pc, #24]	; (8007e18 <_fstat_r+0x20>)
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	f7f9 ffd7 	bl	8001db8 <_fstat>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	d102      	bne.n	8007e14 <_fstat_r+0x1c>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	b103      	cbz	r3, 8007e14 <_fstat_r+0x1c>
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	200003fc 	.word	0x200003fc

08007e1c <_isatty_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4d05      	ldr	r5, [pc, #20]	; (8007e38 <_isatty_r+0x1c>)
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	f7f9 ffd5 	bl	8001dd6 <_isatty>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_isatty_r+0x1a>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_isatty_r+0x1a>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	200003fc 	.word	0x200003fc

08007e3c <_lseek_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	4d05      	ldr	r5, [pc, #20]	; (8007e5c <_lseek_r+0x20>)
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7f9 ffcd 	bl	8001dea <_lseek>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_lseek_r+0x1e>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_lseek_r+0x1e>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	200003fc 	.word	0x200003fc

08007e60 <_read_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4d05      	ldr	r5, [pc, #20]	; (8007e80 <_read_r+0x20>)
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7f9 ff5e 	bl	8001d30 <_read>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_read_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_read_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	200003fc 	.word	0x200003fc

08007e84 <_init>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr

08007e90 <_fini>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr
