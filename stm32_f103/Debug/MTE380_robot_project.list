
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c118  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800c228  0800c228  0001c228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c674  0800c674  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800c674  0800c674  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c674  0800c674  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c674  0800c674  0001c674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800c67c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000288  0800c904  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800c904  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014306  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7c  00000000  00000000  000345b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  00038868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b50c  00000000  00000000  00039b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185b3  00000000  00000000  000550a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095cae  00000000  00000000  0006d657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006980  00000000  00000000  00103358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c210 	.word	0x0800c210

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	0800c210 	.word	0x0800c210

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <drive_forward+0x84>)
 80010ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b2:	f7ff fb3b 	bl	800072c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <drive_forward+0x88>)
 80010c4:	f7ff f852 	bl	800016c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <drive_forward+0x8c>)
 80010d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010da:	f7ff fb27 	bl	800072c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <drive_forward+0x90>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f9f4 	bl	80004d8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 80010f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80010fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001100:	f7ff fcc2 	bl	8000a88 <__aeabi_d2uiz>
 8001104:	4603      	mov	r3, r0
 8001106:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 8001108:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800110c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001110:	f7ff fcba 	bl	8000a88 <__aeabi_d2uiz>
 8001114:	4603      	mov	r3, r0
 8001116:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	40590000 	.word	0x40590000
 8001124:	3ff00000 	.word	0x3ff00000
 8001128:	40340000 	.word	0x40340000
 800112c:	20000000 	.word	0x20000000

08001130 <accelerate>:
	TIM2->CCR2 = command;
}

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 800113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f94e 	bl	80003e4 <__aeabi_ui2d>
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <accelerate+0xa8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff faed 	bl	800072c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <accelerate+0xac>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <accelerate+0xb0>)
 8001172:	f7fe fff9 	bl	8000168 <__aeabi_dsub>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <accelerate+0xb4>)
 8001184:	f7ff f9a8 	bl	80004d8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 8001190:	e013      	b.n	80011ba <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 8001192:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff ff80 	bl	800109c <drive_forward>
		speed += 2;
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a8:	f7fe ffe0 	bl	800016c <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 80011b4:	200a      	movs	r0, #10
 80011b6:	f003 fdf5 	bl	8004da4 <HAL_Delay>
	while (speed < final_speed)
 80011ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c2:	f7ff fbfb 	bl	80009bc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e2      	bne.n	8001192 <accelerate+0x62>
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000
 80011dc:	40340000 	.word	0x40340000
 80011e0:	3ff00000 	.word	0x3ff00000
 80011e4:	40590000 	.word	0x40590000

080011e8 <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 80011f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f8f4 	bl	80003e4 <__aeabi_ui2d>
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <decelerate+0xa8>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa93 	bl	800072c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <decelerate+0xac>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <decelerate+0xb0>)
 8001226:	f7fe ff9f 	bl	8000168 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <decelerate+0xb4>)
 8001238:	f7ff f94e 	bl	80004d8 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8001244:	e013      	b.n	800126e <decelerate+0x86>
	{
		drive_forward(htim, speed);
 8001246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff26 	bl	800109c <drive_forward>
		speed -= 2;
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800125c:	f7fe ff84 	bl	8000168 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f003 fd9b 	bl	8004da4 <HAL_Delay>
	while (speed > 0)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800127a:	f7ff fbbd 	bl	80009f8 <__aeabi_dcmpgt>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e0      	bne.n	8001246 <decelerate+0x5e>
	}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	40340000 	.word	0x40340000
 8001298:	3ff00000 	.word	0x3ff00000
 800129c:	40590000 	.word	0x40590000

080012a0 <invSqrt>:
// Functions

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80012a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fd19 	bl	8000ce4 <__aeabi_fmul>
 80012b2:	4603      	mov	r3, r0
 80012b4:	617b      	str	r3, [r7, #20]
	float y = x;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	105a      	asrs	r2, r3, #1
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <invSqrt+0x74>)
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fd03 	bl	8000ce4 <__aeabi_fmul>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f7ff fcfc 	bl	8000ce4 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80012f4:	f7ff fbec 	bl	8000ad0 <__aeabi_fsub>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fcef 	bl	8000ce4 <__aeabi_fmul>
 8001306:	4603      	mov	r3, r0
 8001308:	613b      	str	r3, [r7, #16]
	return y;
 800130a:	693b      	ldr	r3, [r7, #16]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	5f3759df 	.word	0x5f3759df

08001318 <MadgwickAHRSupdate>:

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b0ab      	sub	sp, #172	; 0xac
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800132e:	f7ff fe6d 	bl	800100c <__aeabi_fcmpeq>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01f      	beq.n	8001378 <MadgwickAHRSupdate+0x60>
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001340:	f7ff fe64 	bl	800100c <__aeabi_fcmpeq>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <MadgwickAHRSupdate+0x60>
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001352:	f7ff fe5b 	bl	800100c <__aeabi_fcmpeq>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00d      	beq.n	8001378 <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800135c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f001 f948 	bl	8002604 <MadgwickAHRSupdateIMU>
		return;
 8001374:	f001 b938 	b.w	80025e8 <MadgwickAHRSupdate+0x12d0>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8001378:	49ae      	ldr	r1, [pc, #696]	; (8001634 <MadgwickAHRSupdate+0x31c>)
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff fcb2 	bl	8000ce4 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 8001384:	49ab      	ldr	r1, [pc, #684]	; (8001634 <MadgwickAHRSupdate+0x31c>)
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f7ff fcac 	bl	8000ce4 <__aeabi_fmul>
 800138c:	4603      	mov	r3, r0
 800138e:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 8001390:	49a8      	ldr	r1, [pc, #672]	; (8001634 <MadgwickAHRSupdate+0x31c>)
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fca6 	bl	8000ce4 <__aeabi_fmul>
 8001398:	4603      	mov	r3, r0
 800139a:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800139c:	4ba6      	ldr	r3, [pc, #664]	; (8001638 <MadgwickAHRSupdate+0x320>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013a4:	68f9      	ldr	r1, [r7, #12]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc9c 	bl	8000ce4 <__aeabi_fmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461c      	mov	r4, r3
 80013b0:	4ba2      	ldr	r3, [pc, #648]	; (800163c <MadgwickAHRSupdate+0x324>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc94 	bl	8000ce4 <__aeabi_fmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fb85 	bl	8000ad0 <__aeabi_fsub>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461c      	mov	r4, r3
 80013ca:	4b9d      	ldr	r3, [pc, #628]	; (8001640 <MadgwickAHRSupdate+0x328>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc87 	bl	8000ce4 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fb78 	bl	8000ad0 <__aeabi_fsub>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc7c 	bl	8000ce4 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80013f2:	4b94      	ldr	r3, [pc, #592]	; (8001644 <MadgwickAHRSupdate+0x32c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc73 	bl	8000ce4 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	461c      	mov	r4, r3
 8001402:	4b8e      	ldr	r3, [pc, #568]	; (800163c <MadgwickAHRSupdate+0x324>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fc6b 	bl	8000ce4 <__aeabi_fmul>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff fb5e 	bl	8000ad4 <__addsf3>
 8001418:	4603      	mov	r3, r0
 800141a:	461c      	mov	r4, r3
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <MadgwickAHRSupdate+0x328>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc5e 	bl	8000ce4 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fb4f 	bl	8000ad0 <__aeabi_fsub>
 8001432:	4603      	mov	r3, r0
 8001434:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc53 	bl	8000ce4 <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001444:	4b7f      	ldr	r3, [pc, #508]	; (8001644 <MadgwickAHRSupdate+0x32c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc4a 	bl	8000ce4 <__aeabi_fmul>
 8001450:	4603      	mov	r3, r0
 8001452:	461c      	mov	r4, r3
 8001454:	4b78      	ldr	r3, [pc, #480]	; (8001638 <MadgwickAHRSupdate+0x320>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc42 	bl	8000ce4 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff fb33 	bl	8000ad0 <__aeabi_fsub>
 800146a:	4603      	mov	r3, r0
 800146c:	461c      	mov	r4, r3
 800146e:	4b74      	ldr	r3, [pc, #464]	; (8001640 <MadgwickAHRSupdate+0x328>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc35 	bl	8000ce4 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fb28 	bl	8000ad4 <__addsf3>
 8001484:	4603      	mov	r3, r0
 8001486:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc2a 	bl	8000ce4 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <MadgwickAHRSupdate+0x32c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc21 	bl	8000ce4 <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461c      	mov	r4, r3
 80014a6:	4b64      	ldr	r3, [pc, #400]	; (8001638 <MadgwickAHRSupdate+0x320>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc19 	bl	8000ce4 <__aeabi_fmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fb0c 	bl	8000ad4 <__addsf3>
 80014bc:	4603      	mov	r3, r0
 80014be:	461c      	mov	r4, r3
 80014c0:	4b5e      	ldr	r3, [pc, #376]	; (800163c <MadgwickAHRSupdate+0x324>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc0c 	bl	8000ce4 <__aeabi_fmul>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff fafd 	bl	8000ad0 <__aeabi_fsub>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc01 	bl	8000ce4 <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f7ff fd8d 	bl	800100c <__aeabi_fcmpeq>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d012      	beq.n	800151e <MadgwickAHRSupdate+0x206>
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001500:	f7ff fd84 	bl	800100c <__aeabi_fcmpeq>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <MadgwickAHRSupdate+0x206>
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001512:	f7ff fd7b 	bl	800100c <__aeabi_fcmpeq>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	f040 87b6 	bne.w	800248a <MadgwickAHRSupdate+0x1172>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f7ff fbdf 	bl	8000ce4 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	461c      	mov	r4, r3
 800152a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800152e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001532:	f7ff fbd7 	bl	8000ce4 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff faca 	bl	8000ad4 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	461c      	mov	r4, r3
 8001544:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001548:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800154c:	f7ff fbca 	bl	8000ce4 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fabd 	bl	8000ad4 <__addsf3>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe9f 	bl	80012a0 <invSqrt>
 8001562:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8001566:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f7ff fbba 	bl	8000ce4 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8001574:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001578:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800157c:	f7ff fbb2 	bl	8000ce4 <__aeabi_fmul>
 8001580:	4603      	mov	r3, r0
 8001582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;
 8001586:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800158a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800158e:	f7ff fba9 	bl	8000ce4 <__aeabi_fmul>
 8001592:	4603      	mov	r3, r0
 8001594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001598:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800159c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80015a0:	f7ff fba0 	bl	8000ce4 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461c      	mov	r4, r3
 80015a8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80015ac:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80015b0:	f7ff fb98 	bl	8000ce4 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fa8b 	bl	8000ad4 <__addsf3>
 80015be:	4603      	mov	r3, r0
 80015c0:	461c      	mov	r4, r3
 80015c2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80015c6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80015ca:	f7ff fb8b 	bl	8000ce4 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fa7e 	bl	8000ad4 <__addsf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fe60 	bl	80012a0 <invSqrt>
 80015e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 80015e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015e8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80015ec:	f7ff fb7a 	bl	8000ce4 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 80015f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015fa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80015fe:	f7ff fb71 	bl	8000ce4 <__aeabi_fmul>
 8001602:	4603      	mov	r3, r0
 8001604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 8001608:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800160c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001610:	f7ff fb68 	bl	8000ce4 <__aeabi_fmul>
 8001614:	4603      	mov	r3, r0
 8001616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MadgwickAHRSupdate+0x32c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fa57 	bl	8000ad4 <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800162e:	f7ff fb59 	bl	8000ce4 <__aeabi_fmul>
 8001632:	e009      	b.n	8001648 <MadgwickAHRSupdate+0x330>
 8001634:	3c8efa39 	.word	0x3c8efa39
 8001638:	200002a4 	.word	0x200002a4
 800163c:	200002a8 	.word	0x200002a8
 8001640:	200002ac 	.word	0x200002ac
 8001644:	2000000c 	.word	0x2000000c
 8001648:	4603      	mov	r3, r0
 800164a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 800164e:	4b99      	ldr	r3, [pc, #612]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fa3d 	bl	8000ad4 <__addsf3>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001662:	f7ff fb3f 	bl	8000ce4 <__aeabi_fmul>
 8001666:	4603      	mov	r3, r0
 8001668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 800166c:	4b91      	ldr	r3, [pc, #580]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fa2e 	bl	8000ad4 <__addsf3>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001680:	f7ff fb30 	bl	8000ce4 <__aeabi_fmul>
 8001684:	4603      	mov	r3, r0
 8001686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fa1f 	bl	8000ad4 <__addsf3>
 8001696:	4603      	mov	r3, r0
 8001698:	4619      	mov	r1, r3
 800169a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800169e:	f7ff fb21 	bl	8000ce4 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 80016a6:	4b83      	ldr	r3, [pc, #524]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa11 	bl	8000ad4 <__addsf3>
 80016b2:	4603      	mov	r3, r0
 80016b4:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fa09 	bl	8000ad4 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 80016c6:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa01 	bl	8000ad4 <__addsf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 80016d6:	4b7a      	ldr	r3, [pc, #488]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff f9f9 	bl	8000ad4 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f9f1 	bl	8000ad4 <__addsf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b71      	ldr	r3, [pc, #452]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff faf1 	bl	8000ce4 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 8001706:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f9e1 	bl	8000ad4 <__addsf3>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f7ff fae1 	bl	8000ce4 <__aeabi_fmul>
 8001722:	4603      	mov	r3, r0
 8001724:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fad7 	bl	8000ce4 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 800173a:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5e      	ldr	r2, [pc, #376]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff facd 	bl	8000ce4 <__aeabi_fmul>
 800174a:	4603      	mov	r3, r0
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a5a      	ldr	r2, [pc, #360]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fac3 	bl	8000ce4 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 8001762:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <MadgwickAHRSupdate+0x59c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fab9 	bl	8000ce4 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff faaf 	bl	8000ce4 <__aeabi_fmul>
 8001786:	4603      	mov	r3, r0
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff faa5 	bl	8000ce4 <__aeabi_fmul>
 800179a:	4603      	mov	r3, r0
 800179c:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MadgwickAHRSupdate+0x5a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa9b 	bl	8000ce4 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 80017b2:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a41      	ldr	r2, [pc, #260]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa91 	bl	8000ce4 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a3d      	ldr	r2, [pc, #244]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa87 	bl	8000ce4 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa7d 	bl	8000ce4 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80017ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80017f4:	f7ff fa76 	bl	8000ce4 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461c      	mov	r4, r3
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa6d 	bl	8000ce4 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f95e 	bl	8000ad0 <__aeabi_fsub>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa5f 	bl	8000ce4 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	4619      	mov	r1, r3
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff f952 	bl	8000ad4 <__addsf3>
 8001830:	4603      	mov	r3, r0
 8001832:	461c      	mov	r4, r3
 8001834:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001836:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800183a:	f7ff fa53 	bl	8000ce4 <__aeabi_fmul>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff f946 	bl	8000ad4 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	461c      	mov	r4, r3
 800184c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001850:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001852:	f7ff fa47 	bl	8000ce4 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MadgwickAHRSupdate+0x5a4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fa3f 	bl	8000ce4 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff f932 	bl	8000ad4 <__addsf3>
 8001870:	4603      	mov	r3, r0
 8001872:	461c      	mov	r4, r3
 8001874:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001878:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800187a:	f7ff fa33 	bl	8000ce4 <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MadgwickAHRSupdate+0x5a8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7ff fa2b 	bl	8000ce4 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff f91e 	bl	8000ad4 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	461c      	mov	r4, r3
 800189c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800189e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018a2:	f7ff fa1f 	bl	8000ce4 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff f910 	bl	8000ad0 <__aeabi_fsub>
 80018b0:	e008      	b.n	80018c4 <MadgwickAHRSupdate+0x5ac>
 80018b2:	bf00      	nop
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	200002a4 	.word	0x200002a4
 80018bc:	200002a8 	.word	0x200002a8
 80018c0:	200002ac 	.word	0x200002ac
 80018c4:	4603      	mov	r3, r0
 80018c6:	461c      	mov	r4, r3
 80018c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ca:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018ce:	f7ff fa09 	bl	8000ce4 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff f8fa 	bl	8000ad0 <__aeabi_fsub>
 80018dc:	4603      	mov	r3, r0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80018e0:	4ba1      	ldr	r3, [pc, #644]	; (8001b68 <MadgwickAHRSupdate+0x850>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9fb 	bl	8000ce4 <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461c      	mov	r4, r3
 80018f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018f4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80018f8:	f7ff f9f4 	bl	8000ce4 <__aeabi_fmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff f8e7 	bl	8000ad4 <__addsf3>
 8001906:	4603      	mov	r3, r0
 8001908:	461c      	mov	r4, r3
 800190a:	4b98      	ldr	r3, [pc, #608]	; (8001b6c <MadgwickAHRSupdate+0x854>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f9e6 	bl	8000ce4 <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4619      	mov	r1, r3
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff f8d7 	bl	8000ad0 <__aeabi_fsub>
 8001922:	4603      	mov	r3, r0
 8001924:	461c      	mov	r4, r3
 8001926:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <MadgwickAHRSupdate+0x858>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f9d9 	bl	8000ce4 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	4619      	mov	r1, r3
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff f8cc 	bl	8000ad4 <__addsf3>
 800193c:	4603      	mov	r3, r0
 800193e:	461c      	mov	r4, r3
 8001940:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001942:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001946:	f7ff f9cd 	bl	8000ce4 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff f8be 	bl	8000ad0 <__aeabi_fsub>
 8001954:	4603      	mov	r3, r0
 8001956:	461c      	mov	r4, r3
 8001958:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800195a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800195e:	f7ff f9c1 	bl	8000ce4 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	4619      	mov	r1, r3
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff f8b4 	bl	8000ad4 <__addsf3>
 800196c:	4603      	mov	r3, r0
 800196e:	461c      	mov	r4, r3
 8001970:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001974:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001976:	f7ff f9b5 	bl	8000ce4 <__aeabi_fmul>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <MadgwickAHRSupdate+0x850>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f7ff f9ad 	bl	8000ce4 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff f8a0 	bl	8000ad4 <__addsf3>
 8001994:	4603      	mov	r3, r0
 8001996:	461c      	mov	r4, r3
 8001998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800199a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800199e:	f7ff f9a1 	bl	8000ce4 <__aeabi_fmul>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff f892 	bl	8000ad0 <__aeabi_fsub>
 80019ac:	4603      	mov	r3, r0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrtf(hx * hx + hy * hy);
 80019b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019b4:	f7ff f996 	bl	8000ce4 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461c      	mov	r4, r3
 80019bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019c0:	f7ff f990 	bl	8000ce4 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f883 	bl	8000ad4 <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00a f8d3 	bl	800bb7c <sqrtf>
 80019d6:	6338      	str	r0, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80019d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019e0:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <MadgwickAHRSupdate+0x858>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f97c 	bl	8000ce4 <__aeabi_fmul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461c      	mov	r4, r3
 80019f0:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <MadgwickAHRSupdate+0x854>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f973 	bl	8000ce4 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff f866 	bl	8000ad4 <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a0e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a12:	f7ff f967 	bl	8000ce4 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff f85a 	bl	8000ad4 <__addsf3>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461c      	mov	r4, r3
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <MadgwickAHRSupdate+0x850>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f95a 	bl	8000ce4 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff f84d 	bl	8000ad4 <__addsf3>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a40:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a44:	f7ff f94e 	bl	8000ce4 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f83f 	bl	8000ad0 <__aeabi_fsub>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461c      	mov	r4, r3
 8001a56:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001a5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001a5c:	f7ff f942 	bl	8000ce4 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <MadgwickAHRSupdate+0x850>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff f93a 	bl	8000ce4 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff f82d 	bl	8000ad4 <__addsf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a80:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a84:	f7ff f92e 	bl	8000ce4 <__aeabi_fmul>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff f81f 	bl	8000ad0 <__aeabi_fsub>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461c      	mov	r4, r3
 8001a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a98:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a9c:	f7ff f922 	bl	8000ce4 <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff f815 	bl	8000ad4 <__addsf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f80e 	bl	8000ad4 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f807 	bl	8000ad4 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001acc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fffd 	bl	8000ad4 <__addsf3>
 8001ada:	4603      	mov	r3, r0
 8001adc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fff6 	bl	8000ad0 <__aeabi_fsub>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fff1 	bl	8000ad0 <__aeabi_fsub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff f8f6 	bl	8000ce4 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461c      	mov	r4, r3
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe ffe7 	bl	8000ad4 <__addsf3>
 8001b06:	4603      	mov	r3, r0
 8001b08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ffe2 	bl	8000ad4 <__addsf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe ffda 	bl	8000ad0 <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f8df 	bl	8000ce4 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7fe ffd2 	bl	8000ad4 <__addsf3>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461c      	mov	r4, r3
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MadgwickAHRSupdate+0x858>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f8d2 	bl	8000ce4 <__aeabi_fmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461d      	mov	r5, r3
 8001b44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b46:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001b4a:	f7fe ffc1 	bl	8000ad0 <__aeabi_fsub>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ffbc 	bl	8000ad0 <__aeabi_fsub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f8c1 	bl	8000ce4 <__aeabi_fmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461e      	mov	r6, r3
 8001b66:	e005      	b.n	8001b74 <MadgwickAHRSupdate+0x85c>
 8001b68:	200002ac 	.word	0x200002ac
 8001b6c:	200002a4 	.word	0x200002a4
 8001b70:	200002a8 	.word	0x200002a8
 8001b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b78:	f7fe ffaa 	bl	8000ad0 <__aeabi_fsub>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8af 	bl	8000ce4 <__aeabi_fmul>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	f7fe ffa2 	bl	8000ad4 <__addsf3>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ff9a 	bl	8000ad0 <__aeabi_fsub>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f7ff f89f 	bl	8000ce4 <__aeabi_fmul>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7fe ff90 	bl	8000ad0 <__aeabi_fsub>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	4a9f      	ldr	r2, [pc, #636]	; (8001e38 <MadgwickAHRSupdate+0xb20>)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f88f 	bl	8000ce4 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461d      	mov	r5, r3
 8001bca:	4b9c      	ldr	r3, [pc, #624]	; (8001e3c <MadgwickAHRSupdate+0xb24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f887 	bl	8000ce4 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f7fe ff7a 	bl	8000ad4 <__addsf3>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461d      	mov	r5, r3
 8001be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001be6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001be8:	f7fe ff72 	bl	8000ad0 <__aeabi_fsub>
 8001bec:	4603      	mov	r3, r0
 8001bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f877 	bl	8000ce4 <__aeabi_fmul>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461e      	mov	r6, r3
 8001bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001bfe:	f7fe ff69 	bl	8000ad4 <__addsf3>
 8001c02:	4603      	mov	r3, r0
 8001c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f86c 	bl	8000ce4 <__aeabi_fmul>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4630      	mov	r0, r6
 8001c12:	f7fe ff5f 	bl	8000ad4 <__addsf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe ff57 	bl	8000ad0 <__aeabi_fsub>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7ff f85c 	bl	8000ce4 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7fe ff4f 	bl	8000ad4 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461c      	mov	r4, r3
 8001c3a:	4b81      	ldr	r3, [pc, #516]	; (8001e40 <MadgwickAHRSupdate+0xb28>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f84f 	bl	8000ce4 <__aeabi_fmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461d      	mov	r5, r3
 8001c4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c4c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c4e:	f7fe ff41 	bl	8000ad4 <__addsf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f844 	bl	8000ce4 <__aeabi_fmul>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461e      	mov	r6, r3
 8001c60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c62:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c66:	f7fe ff33 	bl	8000ad0 <__aeabi_fsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ff2e 	bl	8000ad0 <__aeabi_fsub>
 8001c74:	4603      	mov	r3, r0
 8001c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f833 	bl	8000ce4 <__aeabi_fmul>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4630      	mov	r0, r6
 8001c84:	f7fe ff26 	bl	8000ad4 <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff1e 	bl	8000ad0 <__aeabi_fsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f7ff f823 	bl	8000ce4 <__aeabi_fmul>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7fe ff16 	bl	8000ad4 <__addsf3>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe ff0f 	bl	8000ad4 <__addsf3>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe ff08 	bl	8000ad0 <__aeabi_fsub>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe ff03 	bl	8000ad0 <__aeabi_fsub>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f808 	bl	8000ce4 <__aeabi_fmul>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fef9 	bl	8000ad4 <__addsf3>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fef4 	bl	8000ad4 <__addsf3>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe feec 	bl	8000ad0 <__aeabi_fsub>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fff1 	bl	8000ce4 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7fe fee4 	bl	8000ad4 <__addsf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461c      	mov	r4, r3
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <MadgwickAHRSupdate+0xb24>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ffe3 	bl	8000ce4 <__aeabi_fmul>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461d      	mov	r5, r3
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	4619      	mov	r1, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fed4 	bl	8000ad4 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d34:	f7fe fecc 	bl	8000ad0 <__aeabi_fsub>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461e      	mov	r6, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fec7 	bl	8000ad4 <__addsf3>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7fe fec0 	bl	8000ad0 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe feba 	bl	8000ad0 <__aeabi_fsub>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7fe ffbf 	bl	8000ce4 <__aeabi_fmul>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7fe feb0 	bl	8000ad0 <__aeabi_fsub>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461c      	mov	r4, r3
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <MadgwickAHRSupdate+0xb20>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ffb2 	bl	8000ce4 <__aeabi_fmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461d      	mov	r5, r3
 8001d84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d86:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001d8a:	f7fe fea1 	bl	8000ad0 <__aeabi_fsub>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fe9c 	bl	8000ad0 <__aeabi_fsub>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ffa1 	bl	8000ce4 <__aeabi_fmul>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461e      	mov	r6, r3
 8001da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001da8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001daa:	f7fe fe91 	bl	8000ad0 <__aeabi_fsub>
 8001dae:	4603      	mov	r3, r0
 8001db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff96 	bl	8000ce4 <__aeabi_fmul>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f7fe fe89 	bl	8000ad4 <__addsf3>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fe81 	bl	8000ad0 <__aeabi_fsub>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7fe ff86 	bl	8000ce4 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fe79 	bl	8000ad4 <__addsf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461c      	mov	r4, r3
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MadgwickAHRSupdate+0xb28>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff79 	bl	8000ce4 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461d      	mov	r5, r3
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MadgwickAHRSupdate+0xb2c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ff71 	bl	8000ce4 <__aeabi_fmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4619      	mov	r1, r3
 8001e06:	4628      	mov	r0, r5
 8001e08:	f7fe fe64 	bl	8000ad4 <__addsf3>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461d      	mov	r5, r3
 8001e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e14:	f7fe fe5c 	bl	8000ad0 <__aeabi_fsub>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff61 	bl	8000ce4 <__aeabi_fmul>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461e      	mov	r6, r3
 8001e26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e2a:	f7fe fe53 	bl	8000ad4 <__addsf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e32:	4618      	mov	r0, r3
 8001e34:	e008      	b.n	8001e48 <MadgwickAHRSupdate+0xb30>
 8001e36:	bf00      	nop
 8001e38:	200002ac 	.word	0x200002ac
 8001e3c:	200002a4 	.word	0x200002a4
 8001e40:	200002a8 	.word	0x200002a8
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	f7fe ff4c 	bl	8000ce4 <__aeabi_fmul>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7fe fe3f 	bl	8000ad4 <__addsf3>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fe37 	bl	8000ad0 <__aeabi_fsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4628      	mov	r0, r5
 8001e68:	f7fe ff3c 	bl	8000ce4 <__aeabi_fmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7fe fe2f 	bl	8000ad4 <__addsf3>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461c      	mov	r4, r3
 8001e7a:	4b9f      	ldr	r3, [pc, #636]	; (80020f8 <MadgwickAHRSupdate+0xde0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff2f 	bl	8000ce4 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461d      	mov	r5, r3
 8001e8a:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <MadgwickAHRSupdate+0xde4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff27 	bl	8000ce4 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f7fe fe18 	bl	8000ad0 <__aeabi_fsub>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ea6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ea8:	f7fe fe14 	bl	8000ad4 <__addsf3>
 8001eac:	4603      	mov	r3, r0
 8001eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff17 	bl	8000ce4 <__aeabi_fmul>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461e      	mov	r6, r3
 8001eba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ebc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ec0:	f7fe fe06 	bl	8000ad0 <__aeabi_fsub>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fe01 	bl	8000ad0 <__aeabi_fsub>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe ff06 	bl	8000ce4 <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4619      	mov	r1, r3
 8001edc:	4630      	mov	r0, r6
 8001ede:	f7fe fdf9 	bl	8000ad4 <__addsf3>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fdf1 	bl	8000ad0 <__aeabi_fsub>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	f7fe fef6 	bl	8000ce4 <__aeabi_fmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4620      	mov	r0, r4
 8001efe:	f7fe fde9 	bl	8000ad4 <__addsf3>
 8001f02:	4603      	mov	r3, r0
 8001f04:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f08:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fddf 	bl	8000ad4 <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fdd8 	bl	8000ad0 <__aeabi_fsub>
 8001f20:	4603      	mov	r3, r0
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fdd3 	bl	8000ad0 <__aeabi_fsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7fe fed8 	bl	8000ce4 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461c      	mov	r4, r3
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fdc9 	bl	8000ad4 <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fdc4 	bl	8000ad4 <__addsf3>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fdbc 	bl	8000ad0 <__aeabi_fsub>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fec1 	bl	8000ce4 <__aeabi_fmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7fe fdb4 	bl	8000ad4 <__addsf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461c      	mov	r4, r3
 8001f70:	4b63      	ldr	r3, [pc, #396]	; (8002100 <MadgwickAHRSupdate+0xde8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe feb3 	bl	8000ce4 <__aeabi_fmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461d      	mov	r5, r3
 8001f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f84:	4619      	mov	r1, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fda4 	bl	8000ad4 <__addsf3>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f94:	f7fe fd9c 	bl	8000ad0 <__aeabi_fsub>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461e      	mov	r6, r3
 8001f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fd97 	bl	8000ad4 <__addsf3>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4630      	mov	r0, r6
 8001fac:	f7fe fd90 	bl	8000ad0 <__aeabi_fsub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fd8a 	bl	8000ad0 <__aeabi_fsub>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f7fe fe8f 	bl	8000ce4 <__aeabi_fmul>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7fe fd80 	bl	8000ad0 <__aeabi_fsub>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fda:	4a49      	ldr	r2, [pc, #292]	; (8002100 <MadgwickAHRSupdate+0xde8>)
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fe7f 	bl	8000ce4 <__aeabi_fmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461d      	mov	r5, r3
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <MadgwickAHRSupdate+0xdec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fe77 	bl	8000ce4 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f7fe fd68 	bl	8000ad0 <__aeabi_fsub>
 8002000:	4603      	mov	r3, r0
 8002002:	461d      	mov	r5, r3
 8002004:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002006:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800200a:	f7fe fd61 	bl	8000ad0 <__aeabi_fsub>
 800200e:	4603      	mov	r3, r0
 8002010:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fd5c 	bl	8000ad0 <__aeabi_fsub>
 8002018:	4603      	mov	r3, r0
 800201a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fe61 	bl	8000ce4 <__aeabi_fmul>
 8002022:	4603      	mov	r3, r0
 8002024:	461e      	mov	r6, r3
 8002026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002028:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800202a:	f7fe fd51 	bl	8000ad0 <__aeabi_fsub>
 800202e:	4603      	mov	r3, r0
 8002030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe56 	bl	8000ce4 <__aeabi_fmul>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	4630      	mov	r0, r6
 800203e:	f7fe fd49 	bl	8000ad4 <__addsf3>
 8002042:	4603      	mov	r3, r0
 8002044:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd41 	bl	8000ad0 <__aeabi_fsub>
 800204e:	4603      	mov	r3, r0
 8002050:	4619      	mov	r1, r3
 8002052:	4628      	mov	r0, r5
 8002054:	f7fe fe46 	bl	8000ce4 <__aeabi_fmul>
 8002058:	4603      	mov	r3, r0
 800205a:	4619      	mov	r1, r3
 800205c:	4620      	mov	r0, r4
 800205e:	f7fe fd39 	bl	8000ad4 <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	461c      	mov	r4, r3
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <MadgwickAHRSupdate+0xde4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fe39 	bl	8000ce4 <__aeabi_fmul>
 8002072:	4603      	mov	r3, r0
 8002074:	461d      	mov	r5, r3
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MadgwickAHRSupdate+0xde0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fe31 	bl	8000ce4 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	4619      	mov	r1, r3
 8002086:	4628      	mov	r0, r5
 8002088:	f7fe fd24 	bl	8000ad4 <__addsf3>
 800208c:	4603      	mov	r3, r0
 800208e:	461d      	mov	r5, r3
 8002090:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002092:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002094:	f7fe fd1c 	bl	8000ad0 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe21 	bl	8000ce4 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461e      	mov	r6, r3
 80020a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020aa:	f7fe fd13 	bl	8000ad4 <__addsf3>
 80020ae:	4603      	mov	r3, r0
 80020b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe16 	bl	8000ce4 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	4630      	mov	r0, r6
 80020be:	f7fe fd09 	bl	8000ad4 <__addsf3>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fd01 	bl	8000ad0 <__aeabi_fsub>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7fe fe06 	bl	8000ce4 <__aeabi_fmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	4620      	mov	r0, r4
 80020de:	f7fe fcf9 	bl	8000ad4 <__addsf3>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461c      	mov	r4, r3
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <MadgwickAHRSupdate+0xdec>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fdf9 	bl	8000ce4 <__aeabi_fmul>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461d      	mov	r5, r3
 80020f6:	e007      	b.n	8002108 <MadgwickAHRSupdate+0xdf0>
 80020f8:	200002ac 	.word	0x200002ac
 80020fc:	200002a4 	.word	0x200002a4
 8002100:	200002a8 	.word	0x200002a8
 8002104:	2000000c 	.word	0x2000000c
 8002108:	4b9f      	ldr	r3, [pc, #636]	; (8002388 <MadgwickAHRSupdate+0x1070>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fde8 	bl	8000ce4 <__aeabi_fmul>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	4628      	mov	r0, r5
 800211a:	f7fe fcd9 	bl	8000ad0 <__aeabi_fsub>
 800211e:	4603      	mov	r3, r0
 8002120:	461d      	mov	r5, r3
 8002122:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002124:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002126:	f7fe fcd5 	bl	8000ad4 <__addsf3>
 800212a:	4603      	mov	r3, r0
 800212c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fdd8 	bl	8000ce4 <__aeabi_fmul>
 8002134:	4603      	mov	r3, r0
 8002136:	461e      	mov	r6, r3
 8002138:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800213a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800213e:	f7fe fcc7 	bl	8000ad0 <__aeabi_fsub>
 8002142:	4603      	mov	r3, r0
 8002144:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fcc2 	bl	8000ad0 <__aeabi_fsub>
 800214c:	4603      	mov	r3, r0
 800214e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fdc7 	bl	8000ce4 <__aeabi_fmul>
 8002156:	4603      	mov	r3, r0
 8002158:	4619      	mov	r1, r3
 800215a:	4630      	mov	r0, r6
 800215c:	f7fe fcba 	bl	8000ad4 <__addsf3>
 8002160:	4603      	mov	r3, r0
 8002162:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fcb2 	bl	8000ad0 <__aeabi_fsub>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	4628      	mov	r0, r5
 8002172:	f7fe fdb7 	bl	8000ce4 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4620      	mov	r0, r4
 800217c:	f7fe fcaa 	bl	8000ad4 <__addsf3>
 8002180:	4603      	mov	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002186:	4619      	mov	r1, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fca3 	bl	8000ad4 <__addsf3>
 800218e:	4603      	mov	r3, r0
 8002190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fc9c 	bl	8000ad0 <__aeabi_fsub>
 8002198:	4603      	mov	r3, r0
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fc97 	bl	8000ad0 <__aeabi_fsub>
 80021a2:	4603      	mov	r3, r0
 80021a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fd9c 	bl	8000ce4 <__aeabi_fmul>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461c      	mov	r4, r3
 80021b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b2:	4619      	mov	r1, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fc8d 	bl	8000ad4 <__addsf3>
 80021ba:	4603      	mov	r3, r0
 80021bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fc88 	bl	8000ad4 <__addsf3>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc80 	bl	8000ad0 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd85 	bl	8000ce4 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	4619      	mov	r1, r3
 80021de:	4620      	mov	r0, r4
 80021e0:	f7fe fc78 	bl	8000ad4 <__addsf3>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461c      	mov	r4, r3
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021ee:	4a67      	ldr	r2, [pc, #412]	; (800238c <MadgwickAHRSupdate+0x1074>)
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd75 	bl	8000ce4 <__aeabi_fmul>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461d      	mov	r5, r3
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <MadgwickAHRSupdate+0x1078>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fd6d 	bl	8000ce4 <__aeabi_fmul>
 800220a:	4603      	mov	r3, r0
 800220c:	4619      	mov	r1, r3
 800220e:	4628      	mov	r0, r5
 8002210:	f7fe fc60 	bl	8000ad4 <__addsf3>
 8002214:	4603      	mov	r3, r0
 8002216:	461d      	mov	r5, r3
 8002218:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800221a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800221e:	f7fe fc57 	bl	8000ad0 <__aeabi_fsub>
 8002222:	4603      	mov	r3, r0
 8002224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fc52 	bl	8000ad0 <__aeabi_fsub>
 800222c:	4603      	mov	r3, r0
 800222e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fd57 	bl	8000ce4 <__aeabi_fmul>
 8002236:	4603      	mov	r3, r0
 8002238:	461e      	mov	r6, r3
 800223a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800223c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800223e:	f7fe fc47 	bl	8000ad0 <__aeabi_fsub>
 8002242:	4603      	mov	r3, r0
 8002244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fd4c 	bl	8000ce4 <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4630      	mov	r0, r6
 8002252:	f7fe fc3f 	bl	8000ad4 <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fc37 	bl	8000ad0 <__aeabi_fsub>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
 8002266:	4628      	mov	r0, r5
 8002268:	f7fe fd3c 	bl	8000ce4 <__aeabi_fmul>
 800226c:	4603      	mov	r3, r0
 800226e:	4619      	mov	r1, r3
 8002270:	4620      	mov	r0, r4
 8002272:	f7fe fc2f 	bl	8000ad4 <__addsf3>
 8002276:	4603      	mov	r3, r0
 8002278:	461c      	mov	r4, r3
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002280:	4a44      	ldr	r2, [pc, #272]	; (8002394 <MadgwickAHRSupdate+0x107c>)
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fd2c 	bl	8000ce4 <__aeabi_fmul>
 800228c:	4603      	mov	r3, r0
 800228e:	461d      	mov	r5, r3
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <MadgwickAHRSupdate+0x1070>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd24 	bl	8000ce4 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	4628      	mov	r0, r5
 80022a2:	f7fe fc17 	bl	8000ad4 <__addsf3>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461d      	mov	r5, r3
 80022aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80022ae:	f7fe fc0f 	bl	8000ad0 <__aeabi_fsub>
 80022b2:	4603      	mov	r3, r0
 80022b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd14 	bl	8000ce4 <__aeabi_fmul>
 80022bc:	4603      	mov	r3, r0
 80022be:	461e      	mov	r6, r3
 80022c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022c4:	f7fe fc06 	bl	8000ad4 <__addsf3>
 80022c8:	4603      	mov	r3, r0
 80022ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fd09 	bl	8000ce4 <__aeabi_fmul>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4619      	mov	r1, r3
 80022d6:	4630      	mov	r0, r6
 80022d8:	f7fe fbfc 	bl	8000ad4 <__addsf3>
 80022dc:	4603      	mov	r3, r0
 80022de:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fbf4 	bl	8000ad0 <__aeabi_fsub>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4619      	mov	r1, r3
 80022ec:	4628      	mov	r0, r5
 80022ee:	f7fe fcf9 	bl	8000ce4 <__aeabi_fmul>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7fe fbec 	bl	8000ad4 <__addsf3>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461c      	mov	r4, r3
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <MadgwickAHRSupdate+0x1078>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fcec 	bl	8000ce4 <__aeabi_fmul>
 800230c:	4603      	mov	r3, r0
 800230e:	461d      	mov	r5, r3
 8002310:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002312:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002314:	f7fe fbde 	bl	8000ad4 <__addsf3>
 8002318:	4603      	mov	r3, r0
 800231a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fce1 	bl	8000ce4 <__aeabi_fmul>
 8002322:	4603      	mov	r3, r0
 8002324:	461e      	mov	r6, r3
 8002326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002328:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800232c:	f7fe fbd0 	bl	8000ad0 <__aeabi_fsub>
 8002330:	4603      	mov	r3, r0
 8002332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fbcb 	bl	8000ad0 <__aeabi_fsub>
 800233a:	4603      	mov	r3, r0
 800233c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fcd0 	bl	8000ce4 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4630      	mov	r0, r6
 800234a:	f7fe fbc3 	bl	8000ad4 <__addsf3>
 800234e:	4603      	mov	r3, r0
 8002350:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fbbb 	bl	8000ad0 <__aeabi_fsub>
 800235a:	4603      	mov	r3, r0
 800235c:	4619      	mov	r1, r3
 800235e:	4628      	mov	r0, r5
 8002360:	f7fe fcc0 	bl	8000ce4 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	4619      	mov	r1, r3
 8002368:	4620      	mov	r0, r4
 800236a:	f7fe fbb3 	bl	8000ad4 <__addsf3>
 800236e:	4603      	mov	r3, r0
 8002370:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f7fe fcb5 	bl	8000ce4 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	69f9      	ldr	r1, [r7, #28]
 8002380:	69f8      	ldr	r0, [r7, #28]
 8002382:	f7fe fcaf 	bl	8000ce4 <__aeabi_fmul>
 8002386:	e007      	b.n	8002398 <MadgwickAHRSupdate+0x1080>
 8002388:	200002a8 	.word	0x200002a8
 800238c:	200002ac 	.word	0x200002ac
 8002390:	200002a4 	.word	0x200002a4
 8002394:	2000000c 	.word	0x2000000c
 8002398:	4603      	mov	r3, r0
 800239a:	4619      	mov	r1, r3
 800239c:	4620      	mov	r0, r4
 800239e:	f7fe fb99 	bl	8000ad4 <__addsf3>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	69b8      	ldr	r0, [r7, #24]
 80023aa:	f7fe fc9b 	bl	8000ce4 <__aeabi_fmul>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4619      	mov	r1, r3
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7fe fb8e 	bl	8000ad4 <__addsf3>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461c      	mov	r4, r3
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7fe fc90 	bl	8000ce4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7fe fb83 	bl	8000ad4 <__addsf3>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ff65 	bl	80012a0 <invSqrt>
 80023d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 80023da:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80023de:	6a38      	ldr	r0, [r7, #32]
 80023e0:	f7fe fc80 	bl	8000ce4 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 80023e8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80023ec:	69f8      	ldr	r0, [r7, #28]
 80023ee:	f7fe fc79 	bl	8000ce4 <__aeabi_fmul>
 80023f2:	4603      	mov	r3, r0
 80023f4:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 80023f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80023fa:	69b8      	ldr	r0, [r7, #24]
 80023fc:	f7fe fc72 	bl	8000ce4 <__aeabi_fmul>
 8002400:	4603      	mov	r3, r0
 8002402:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002404:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f7fe fc6b 	bl	8000ce4 <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002412:	4b77      	ldr	r3, [pc, #476]	; (80025f0 <MadgwickAHRSupdate+0x12d8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fc63 	bl	8000ce4 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	4619      	mov	r1, r3
 8002422:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002426:	f7fe fb53 	bl	8000ad0 <__aeabi_fsub>
 800242a:	4603      	mov	r3, r0
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <MadgwickAHRSupdate+0x12d8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69f9      	ldr	r1, [r7, #28]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fc54 	bl	8000ce4 <__aeabi_fmul>
 800243c:	4603      	mov	r3, r0
 800243e:	4619      	mov	r1, r3
 8002440:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002444:	f7fe fb44 	bl	8000ad0 <__aeabi_fsub>
 8002448:	4603      	mov	r3, r0
 800244a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 800244e:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <MadgwickAHRSupdate+0x12d8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc45 	bl	8000ce4 <__aeabi_fmul>
 800245a:	4603      	mov	r3, r0
 800245c:	4619      	mov	r1, r3
 800245e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002462:	f7fe fb35 	bl	8000ad0 <__aeabi_fsub>
 8002466:	4603      	mov	r3, r0
 8002468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 800246c:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <MadgwickAHRSupdate+0x12d8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6979      	ldr	r1, [r7, #20]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fc36 	bl	8000ce4 <__aeabi_fmul>
 8002478:	4603      	mov	r3, r0
 800247a:	4619      	mov	r1, r3
 800247c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002480:	f7fe fb26 	bl	8000ad0 <__aeabi_fsub>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800248a:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 800248e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002492:	f7fe fc27 	bl	8000ce4 <__aeabi_fmul>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7fe fb17 	bl	8000ad4 <__addsf3>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 80024ac:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80024ae:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024b2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80024b6:	f7fe fc15 	bl	8000ce4 <__aeabi_fmul>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f7fe fb05 	bl	8000ad4 <__addsf3>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 80024d0:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80024d2:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80024da:	f7fe fc03 	bl	8000ce4 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7fe faf3 	bl	8000ad4 <__addsf3>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b42      	ldr	r3, [pc, #264]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 80024f4:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 80024f6:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80024fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80024fe:	f7fe fbf1 	bl	8000ce4 <__aeabi_fmul>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4619      	mov	r1, r3
 800250c:	4610      	mov	r0, r2
 800250e:	f7fe fae1 	bl	8000ad4 <__addsf3>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 8002518:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a35      	ldr	r2, [pc, #212]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fbdd 	bl	8000ce4 <__aeabi_fmul>
 800252a:	4603      	mov	r3, r0
 800252c:	461c      	mov	r4, r3
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fbd3 	bl	8000ce4 <__aeabi_fmul>
 800253e:	4603      	mov	r3, r0
 8002540:	4619      	mov	r1, r3
 8002542:	4620      	mov	r0, r4
 8002544:	f7fe fac6 	bl	8000ad4 <__addsf3>
 8002548:	4603      	mov	r3, r0
 800254a:	461c      	mov	r4, r3
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbc4 	bl	8000ce4 <__aeabi_fmul>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	4620      	mov	r0, r4
 8002562:	f7fe fab7 	bl	8000ad4 <__addsf3>
 8002566:	4603      	mov	r3, r0
 8002568:	461c      	mov	r4, r3
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fbb5 	bl	8000ce4 <__aeabi_fmul>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f7fe faa8 	bl	8000ad4 <__addsf3>
 8002584:	4603      	mov	r3, r0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fe8a 	bl	80012a0 <invSqrt>
 800258c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fba3 	bl	8000ce4 <__aeabi_fmul>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MadgwickAHRSupdate+0x12dc>)
 80025a4:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fb98 	bl	8000ce4 <__aeabi_fmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MadgwickAHRSupdate+0x12e0>)
 80025ba:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fb8d 	bl	8000ce4 <__aeabi_fmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MadgwickAHRSupdate+0x12e4>)
 80025d0:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fb82 	bl	8000ce4 <__aeabi_fmul>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MadgwickAHRSupdate+0x12e8>)
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	37a4      	adds	r7, #164	; 0xa4
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000008 	.word	0x20000008
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	200002a4 	.word	0x200002a4
 80025fc:	200002a8 	.word	0x200002a8
 8002600:	200002ac 	.word	0x200002ac

08002604 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b09b      	sub	sp, #108	; 0x6c
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002612:	4b9d      	ldr	r3, [pc, #628]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fb61 	bl	8000ce4 <__aeabi_fmul>
 8002622:	4603      	mov	r3, r0
 8002624:	461c      	mov	r4, r3
 8002626:	4b99      	ldr	r3, [pc, #612]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fb59 	bl	8000ce4 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	4619      	mov	r1, r3
 8002636:	4620      	mov	r0, r4
 8002638:	f7fe fa4a 	bl	8000ad0 <__aeabi_fsub>
 800263c:	4603      	mov	r3, r0
 800263e:	461c      	mov	r4, r3
 8002640:	4b93      	ldr	r3, [pc, #588]	; (8002890 <MadgwickAHRSupdateIMU+0x28c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb4c 	bl	8000ce4 <__aeabi_fmul>
 800264c:	4603      	mov	r3, r0
 800264e:	4619      	mov	r1, r3
 8002650:	4620      	mov	r0, r4
 8002652:	f7fe fa3d 	bl	8000ad0 <__aeabi_fsub>
 8002656:	4603      	mov	r3, r0
 8002658:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb41 	bl	8000ce4 <__aeabi_fmul>
 8002662:	4603      	mov	r3, r0
 8002664:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <MadgwickAHRSupdateIMU+0x290>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fb39 	bl	8000ce4 <__aeabi_fmul>
 8002672:	4603      	mov	r3, r0
 8002674:	461c      	mov	r4, r3
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fb31 	bl	8000ce4 <__aeabi_fmul>
 8002682:	4603      	mov	r3, r0
 8002684:	4619      	mov	r1, r3
 8002686:	4620      	mov	r0, r4
 8002688:	f7fe fa24 	bl	8000ad4 <__addsf3>
 800268c:	4603      	mov	r3, r0
 800268e:	461c      	mov	r4, r3
 8002690:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <MadgwickAHRSupdateIMU+0x28c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fb24 	bl	8000ce4 <__aeabi_fmul>
 800269c:	4603      	mov	r3, r0
 800269e:	4619      	mov	r1, r3
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7fe fa15 	bl	8000ad0 <__aeabi_fsub>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fb19 	bl	8000ce4 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80026b6:	4b77      	ldr	r3, [pc, #476]	; (8002894 <MadgwickAHRSupdateIMU+0x290>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fb11 	bl	8000ce4 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461c      	mov	r4, r3
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fb09 	bl	8000ce4 <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4619      	mov	r1, r3
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7fe f9fa 	bl	8000ad0 <__aeabi_fsub>
 80026dc:	4603      	mov	r3, r0
 80026de:	461c      	mov	r4, r3
 80026e0:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <MadgwickAHRSupdateIMU+0x28c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fafc 	bl	8000ce4 <__aeabi_fmul>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7fe f9ef 	bl	8000ad4 <__addsf3>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe faf1 	bl	8000ce4 <__aeabi_fmul>
 8002702:	4603      	mov	r3, r0
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <MadgwickAHRSupdateIMU+0x290>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fae9 	bl	8000ce4 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	461c      	mov	r4, r3
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fae1 	bl	8000ce4 <__aeabi_fmul>
 8002722:	4603      	mov	r3, r0
 8002724:	4619      	mov	r1, r3
 8002726:	4620      	mov	r0, r4
 8002728:	f7fe f9d4 	bl	8000ad4 <__addsf3>
 800272c:	4603      	mov	r3, r0
 800272e:	461c      	mov	r4, r3
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fad4 	bl	8000ce4 <__aeabi_fmul>
 800273c:	4603      	mov	r3, r0
 800273e:	4619      	mov	r1, r3
 8002740:	4620      	mov	r0, r4
 8002742:	f7fe f9c5 	bl	8000ad0 <__aeabi_fsub>
 8002746:	4603      	mov	r3, r0
 8002748:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fac9 	bl	8000ce4 <__aeabi_fmul>
 8002752:	4603      	mov	r3, r0
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f7fe fc56 	bl	800100c <__aeabi_fcmpeq>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <MadgwickAHRSupdateIMU+0x184>
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800276c:	f7fe fc4e 	bl	800100c <__aeabi_fcmpeq>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <MadgwickAHRSupdateIMU+0x184>
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800277c:	f7fe fc46 	bl	800100c <__aeabi_fcmpeq>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 823c 	bne.w	8002c00 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	f7fe faaa 	bl	8000ce4 <__aeabi_fmul>
 8002790:	4603      	mov	r3, r0
 8002792:	461c      	mov	r4, r3
 8002794:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002796:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002798:	f7fe faa4 	bl	8000ce4 <__aeabi_fmul>
 800279c:	4603      	mov	r3, r0
 800279e:	4619      	mov	r1, r3
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7fe f997 	bl	8000ad4 <__addsf3>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461c      	mov	r4, r3
 80027aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027ac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80027ae:	f7fe fa99 	bl	8000ce4 <__aeabi_fmul>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4619      	mov	r1, r3
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7fe f98c 	bl	8000ad4 <__addsf3>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fd6e 	bl	80012a0 <invSqrt>
 80027c4:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 80027c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f7fe fa8b 	bl	8000ce4 <__aeabi_fmul>
 80027ce:	4603      	mov	r3, r0
 80027d0:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80027d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027d6:	f7fe fa85 	bl	8000ce4 <__aeabi_fmul>
 80027da:	4603      	mov	r3, r0
 80027dc:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 80027de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80027e2:	f7fe fa7f 	bl	8000ce4 <__aeabi_fmul>
 80027e6:	4603      	mov	r3, r0
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <MadgwickAHRSupdateIMU+0x290>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f96f 	bl	8000ad4 <__addsf3>
 80027f6:	4603      	mov	r3, r0
 80027f8:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe f967 	bl	8000ad4 <__addsf3>
 8002806:	4603      	mov	r3, r0
 8002808:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe f95f 	bl	8000ad4 <__addsf3>
 8002816:	4603      	mov	r3, r0
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <MadgwickAHRSupdateIMU+0x28c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f957 	bl	8000ad4 <__addsf3>
 8002826:	4603      	mov	r3, r0
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MadgwickAHRSupdateIMU+0x290>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa56 	bl	8000ce4 <__aeabi_fmul>
 8002838:	4603      	mov	r3, r0
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fa4d 	bl	8000ce4 <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fa44 	bl	8000ce4 <__aeabi_fmul>
 800285c:	4603      	mov	r3, r0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MadgwickAHRSupdateIMU+0x284>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fa3b 	bl	8000ce4 <__aeabi_fmul>
 800286e:	4603      	mov	r3, r0
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <MadgwickAHRSupdateIMU+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fa32 	bl	8000ce4 <__aeabi_fmul>
 8002880:	4603      	mov	r3, r0
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
 8002884:	e008      	b.n	8002898 <MadgwickAHRSupdateIMU+0x294>
 8002886:	bf00      	nop
 8002888:	200002a4 	.word	0x200002a4
 800288c:	200002a8 	.word	0x200002a8
 8002890:	200002ac 	.word	0x200002ac
 8002894:	2000000c 	.word	0x2000000c
		q0q0 = q0 * q0;
 8002898:	4b9a      	ldr	r3, [pc, #616]	; (8002b04 <MadgwickAHRSupdateIMU+0x500>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a99      	ldr	r2, [pc, #612]	; (8002b04 <MadgwickAHRSupdateIMU+0x500>)
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fa1e 	bl	8000ce4 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 80028ac:	4b96      	ldr	r3, [pc, #600]	; (8002b08 <MadgwickAHRSupdateIMU+0x504>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a95      	ldr	r2, [pc, #596]	; (8002b08 <MadgwickAHRSupdateIMU+0x504>)
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fa14 	bl	8000ce4 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <MadgwickAHRSupdateIMU+0x508>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a91      	ldr	r2, [pc, #580]	; (8002b0c <MadgwickAHRSupdateIMU+0x508>)
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fa0a 	bl	8000ce4 <__aeabi_fmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 80028d4:	4b8e      	ldr	r3, [pc, #568]	; (8002b10 <MadgwickAHRSupdateIMU+0x50c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a8d      	ldr	r2, [pc, #564]	; (8002b10 <MadgwickAHRSupdateIMU+0x50c>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fa00 	bl	8000ce4 <__aeabi_fmul>
 80028e4:	4603      	mov	r3, r0
 80028e6:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028ec:	f7fe f9fa 	bl	8000ce4 <__aeabi_fmul>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461c      	mov	r4, r3
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028f8:	f7fe f9f4 	bl	8000ce4 <__aeabi_fmul>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4619      	mov	r1, r3
 8002900:	4620      	mov	r0, r4
 8002902:	f7fe f8e7 	bl	8000ad4 <__addsf3>
 8002906:	4603      	mov	r3, r0
 8002908:	461c      	mov	r4, r3
 800290a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800290e:	f7fe f9e9 	bl	8000ce4 <__aeabi_fmul>
 8002912:	4603      	mov	r3, r0
 8002914:	4619      	mov	r1, r3
 8002916:	4620      	mov	r0, r4
 8002918:	f7fe f8dc 	bl	8000ad4 <__addsf3>
 800291c:	4603      	mov	r3, r0
 800291e:	461c      	mov	r4, r3
 8002920:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002922:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002924:	f7fe f9de 	bl	8000ce4 <__aeabi_fmul>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	4620      	mov	r0, r4
 800292e:	f7fe f8cf 	bl	8000ad0 <__aeabi_fsub>
 8002932:	4603      	mov	r3, r0
 8002934:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002936:	6a39      	ldr	r1, [r7, #32]
 8002938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800293a:	f7fe f9d3 	bl	8000ce4 <__aeabi_fmul>
 800293e:	4603      	mov	r3, r0
 8002940:	461c      	mov	r4, r3
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002946:	f7fe f9cd 	bl	8000ce4 <__aeabi_fmul>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	4620      	mov	r0, r4
 8002950:	f7fe f8be 	bl	8000ad0 <__aeabi_fsub>
 8002954:	4603      	mov	r3, r0
 8002956:	461c      	mov	r4, r3
 8002958:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800295c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295e:	f7fe f9c1 	bl	8000ce4 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <MadgwickAHRSupdateIMU+0x504>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f7fe f9b9 	bl	8000ce4 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	4620      	mov	r0, r4
 8002978:	f7fe f8ac 	bl	8000ad4 <__addsf3>
 800297c:	4603      	mov	r3, r0
 800297e:	461c      	mov	r4, r3
 8002980:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002982:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002984:	f7fe f9ae 	bl	8000ce4 <__aeabi_fmul>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f7fe f89f 	bl	8000ad0 <__aeabi_fsub>
 8002992:	4603      	mov	r3, r0
 8002994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f89a 	bl	8000ad0 <__aeabi_fsub>
 800299c:	4603      	mov	r3, r0
 800299e:	461c      	mov	r4, r3
 80029a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029a4:	f7fe f99e 	bl	8000ce4 <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f891 	bl	8000ad4 <__addsf3>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461c      	mov	r4, r3
 80029b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029ba:	f7fe f993 	bl	8000ce4 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7fe f886 	bl	8000ad4 <__addsf3>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461c      	mov	r4, r3
 80029cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029d0:	f7fe f988 	bl	8000ce4 <__aeabi_fmul>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4619      	mov	r1, r3
 80029d8:	4620      	mov	r0, r4
 80029da:	f7fe f87b 	bl	8000ad4 <__addsf3>
 80029de:	4603      	mov	r3, r0
 80029e0:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80029e2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80029e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029e8:	f7fe f97c 	bl	8000ce4 <__aeabi_fmul>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <MadgwickAHRSupdateIMU+0x508>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7fe f974 	bl	8000ce4 <__aeabi_fmul>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461c      	mov	r4, r3
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a04:	f7fe f96e 	bl	8000ce4 <__aeabi_fmul>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fe f861 	bl	8000ad4 <__addsf3>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461c      	mov	r4, r3
 8002a16:	6a39      	ldr	r1, [r7, #32]
 8002a18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a1a:	f7fe f963 	bl	8000ce4 <__aeabi_fmul>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fe f856 	bl	8000ad4 <__addsf3>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a30:	f7fe f958 	bl	8000ce4 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7fe f849 	bl	8000ad0 <__aeabi_fsub>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f844 	bl	8000ad0 <__aeabi_fsub>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461c      	mov	r4, r3
 8002a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a50:	f7fe f948 	bl	8000ce4 <__aeabi_fmul>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7fe f83b 	bl	8000ad4 <__addsf3>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461c      	mov	r4, r3
 8002a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a66:	f7fe f93d 	bl	8000ce4 <__aeabi_fmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7fe f830 	bl	8000ad4 <__addsf3>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461c      	mov	r4, r3
 8002a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a7c:	f7fe f932 	bl	8000ce4 <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4619      	mov	r1, r3
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7fe f825 	bl	8000ad4 <__addsf3>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002a8e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a94:	f7fe f926 	bl	8000ce4 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MadgwickAHRSupdateIMU+0x50c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f7fe f91e 	bl	8000ce4 <__aeabi_fmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461c      	mov	r4, r3
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ab0:	f7fe f918 	bl	8000ce4 <__aeabi_fmul>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7fe f809 	bl	8000ad0 <__aeabi_fsub>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac8:	f7fe f90c 	bl	8000ce4 <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MadgwickAHRSupdateIMU+0x50c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe f904 	bl	8000ce4 <__aeabi_fmul>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7fd fff7 	bl	8000ad4 <__addsf3>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461c      	mov	r4, r3
 8002aea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002aec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002aee:	f7fe f8f9 	bl	8000ce4 <__aeabi_fmul>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7fd ffea 	bl	8000ad0 <__aeabi_fsub>
 8002afc:	4603      	mov	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e008      	b.n	8002b14 <MadgwickAHRSupdateIMU+0x510>
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	200002a4 	.word	0x200002a4
 8002b0c:	200002a8 	.word	0x200002a8
 8002b10:	200002ac 	.word	0x200002ac
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002b14:	69f9      	ldr	r1, [r7, #28]
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f7fe f8e4 	bl	8000ce4 <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461c      	mov	r4, r3
 8002b20:	69b9      	ldr	r1, [r7, #24]
 8002b22:	69b8      	ldr	r0, [r7, #24]
 8002b24:	f7fe f8de 	bl	8000ce4 <__aeabi_fmul>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7fd ffd1 	bl	8000ad4 <__addsf3>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461c      	mov	r4, r3
 8002b36:	6979      	ldr	r1, [r7, #20]
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f7fe f8d3 	bl	8000ce4 <__aeabi_fmul>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7fd ffc6 	bl	8000ad4 <__addsf3>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461c      	mov	r4, r3
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	6938      	ldr	r0, [r7, #16]
 8002b50:	f7fe f8c8 	bl	8000ce4 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7fd ffbb 	bl	8000ad4 <__addsf3>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fb9d 	bl	80012a0 <invSqrt>
 8002b66:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b6a:	69f8      	ldr	r0, [r7, #28]
 8002b6c:	f7fe f8ba 	bl	8000ce4 <__aeabi_fmul>
 8002b70:	4603      	mov	r3, r0
 8002b72:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b76:	69b8      	ldr	r0, [r7, #24]
 8002b78:	f7fe f8b4 	bl	8000ce4 <__aeabi_fmul>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7fe f8ae 	bl	8000ce4 <__aeabi_fmul>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b8e:	6938      	ldr	r0, [r7, #16]
 8002b90:	f7fe f8a8 	bl	8000ce4 <__aeabi_fmul>
 8002b94:	4603      	mov	r3, r0
 8002b96:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002b98:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <MadgwickAHRSupdateIMU+0x750>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f8a0 	bl	8000ce4 <__aeabi_fmul>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002baa:	f7fd ff91 	bl	8000ad0 <__aeabi_fsub>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002bb2:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <MadgwickAHRSupdateIMU+0x750>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f893 	bl	8000ce4 <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002bc4:	f7fd ff84 	bl	8000ad0 <__aeabi_fsub>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <MadgwickAHRSupdateIMU+0x750>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f886 	bl	8000ce4 <__aeabi_fmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002bde:	f7fd ff77 	bl	8000ad0 <__aeabi_fsub>
 8002be2:	4603      	mov	r3, r0
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <MadgwickAHRSupdateIMU+0x750>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6939      	ldr	r1, [r7, #16]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f879 	bl	8000ce4 <__aeabi_fmul>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002bf8:	f7fd ff6a 	bl	8000ad0 <__aeabi_fsub>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002c00:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c04:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c06:	f7fe f86d 	bl	8000ce4 <__aeabi_fmul>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7fd ff5d 	bl	8000ad4 <__addsf3>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002c20:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002c22:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c26:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c28:	f7fe f85c 	bl	8000ce4 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7fd ff4c 	bl	8000ad4 <__addsf3>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002c42:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002c44:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c4a:	f7fe f84b 	bl	8000ce4 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	f7fd ff3b 	bl	8000ad4 <__addsf3>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002c64:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002c66:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c6a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c6c:	f7fe f83a 	bl	8000ce4 <__aeabi_fmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f7fd ff2a 	bl	8000ad4 <__addsf3>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002c86:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002c88:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a32      	ldr	r2, [pc, #200]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe f826 	bl	8000ce4 <__aeabi_fmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f81c 	bl	8000ce4 <__aeabi_fmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7fd ff0f 	bl	8000ad4 <__addsf3>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461c      	mov	r4, r3
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f80d 	bl	8000ce4 <__aeabi_fmul>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7fd ff00 	bl	8000ad4 <__addsf3>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fffe 	bl	8000ce4 <__aeabi_fmul>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4619      	mov	r1, r3
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7fd fef1 	bl	8000ad4 <__addsf3>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe fad3 	bl	80012a0 <invSqrt>
 8002cfa:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd ffee 	bl	8000ce4 <__aeabi_fmul>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <MadgwickAHRSupdateIMU+0x754>)
 8002d0e:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ffe4 	bl	8000ce4 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <MadgwickAHRSupdateIMU+0x758>)
 8002d22:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd ffda 	bl	8000ce4 <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <MadgwickAHRSupdateIMU+0x75c>)
 8002d36:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ffd0 	bl	8000ce4 <__aeabi_fmul>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <MadgwickAHRSupdateIMU+0x760>)
 8002d4a:	601a      	str	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	376c      	adds	r7, #108	; 0x6c
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}
 8002d54:	20000008 	.word	0x20000008
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	200002a4 	.word	0x200002a4
 8002d60:	200002a8 	.word	0x200002a8
 8002d64:	200002ac 	.word	0x200002ac

08002d68 <computeAngles>:

void computeAngles()
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * 57.29578f;
 8002d6c:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <computeAngles+0x174>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5b      	ldr	r2, [pc, #364]	; (8002ee0 <computeAngles+0x178>)
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd ffb4 	bl	8000ce4 <__aeabi_fmul>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461c      	mov	r4, r3
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <computeAngles+0x17c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <computeAngles+0x180>)
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ffaa 	bl	8000ce4 <__aeabi_fmul>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7fd fe9d 	bl	8000ad4 <__addsf3>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <computeAngles+0x178>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <computeAngles+0x178>)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd ff9b 	bl	8000ce4 <__aeabi_fmul>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002db6:	f7fd fe8b 	bl	8000ad0 <__aeabi_fsub>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <computeAngles+0x17c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a48      	ldr	r2, [pc, #288]	; (8002ee4 <computeAngles+0x17c>)
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd ff8b 	bl	8000ce4 <__aeabi_fmul>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f7fd fe7c 	bl	8000ad0 <__aeabi_fsub>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f008 fecb 	bl	800bb78 <atan2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4941      	ldr	r1, [pc, #260]	; (8002eec <computeAngles+0x184>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd ff7c 	bl	8000ce4 <__aeabi_fmul>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <computeAngles+0x188>)
 8002df2:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2)) * 57.29578f;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <computeAngles+0x178>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <computeAngles+0x180>)
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd ff70 	bl	8000ce4 <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461c      	mov	r4, r3
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <computeAngles+0x174>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a35      	ldr	r2, [pc, #212]	; (8002ee4 <computeAngles+0x17c>)
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd ff66 	bl	8000ce4 <__aeabi_fmul>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7fd fe57 	bl	8000ad0 <__aeabi_fsub>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd ff5b 	bl	8000ce4 <__aeabi_fmul>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 fe81 	bl	800bb38 <asinf>
 8002e36:	4603      	mov	r3, r0
 8002e38:	492c      	ldr	r1, [pc, #176]	; (8002eec <computeAngles+0x184>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd ff52 	bl	8000ce4 <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <computeAngles+0x18c>)
 8002e46:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3) * 57.29578f;
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <computeAngles+0x178>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <computeAngles+0x17c>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd ff46 	bl	8000ce4 <__aeabi_fmul>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461c      	mov	r4, r3
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <computeAngles+0x174>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <computeAngles+0x180>)
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff3c 	bl	8000ce4 <__aeabi_fmul>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7fd fe2f 	bl	8000ad4 <__addsf3>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461c      	mov	r4, r3
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <computeAngles+0x17c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <computeAngles+0x17c>)
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd ff2d 	bl	8000ce4 <__aeabi_fmul>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002e92:	f7fd fe1d 	bl	8000ad0 <__aeabi_fsub>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461d      	mov	r5, r3
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <computeAngles+0x180>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <computeAngles+0x180>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff1d 	bl	8000ce4 <__aeabi_fmul>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f7fd fe0e 	bl	8000ad0 <__aeabi_fsub>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f008 fe5d 	bl	800bb78 <atan2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	490a      	ldr	r1, [pc, #40]	; (8002eec <computeAngles+0x184>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ff0e 	bl	8000ce4 <__aeabi_fmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <computeAngles+0x190>)
 8002ece:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <computeAngles+0x194>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	200002a4 	.word	0x200002a4
 8002ee4:	200002a8 	.word	0x200002a8
 8002ee8:	200002ac 	.word	0x200002ac
 8002eec:	42652ee1 	.word	0x42652ee1
 8002ef0:	200002b0 	.word	0x200002b0
 8002ef4:	200002b4 	.word	0x200002b4
 8002ef8:	200002b8 	.word	0x200002b8
 8002efc:	200002bc 	.word	0x200002bc

08002f00 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	72fb      	strb	r3, [r7, #11]
 8002f10:	4613      	mov	r3, r2
 8002f12:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f1a:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002f20:	f107 0214 	add.w	r2, r7, #20
 8002f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	21d2      	movs	r1, #210	; 0xd2
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f002 fd76 	bl	8005a20 <HAL_I2C_Master_Transmit>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8002f38:	893b      	ldrh	r3, [r7, #8]
 8002f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f3e:	9200      	str	r2, [sp, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	21d2      	movs	r1, #210	; 0xd2
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f002 fe69 	bl	8005c1c <HAL_I2C_Master_Receive>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f6a:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002f70:	f107 0214 	add.w	r2, r7, #20
 8002f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	21d2      	movs	r1, #210	; 0xd2
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f002 fd4e 	bl	8005a20 <HAL_I2C_Master_Transmit>
 8002f84:	4603      	mov	r3, r0
 8002f86:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 8002f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	21d2      	movs	r1, #210	; 0xd2
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f002 fe41 	bl	8005c1c <HAL_I2C_Master_Receive>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af02      	add	r7, sp, #8
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fbc:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	733b      	strb	r3, [r7, #12]
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8002fc6:	f107 020c 	add.w	r2, r7, #12
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	21d2      	movs	r1, #210	; 0xd2
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f002 fd23 	bl	8005a20 <HAL_I2C_Master_Transmit>
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	70fb      	strb	r3, [r7, #3]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8002ff2:	2230      	movs	r2, #48	; 0x30
 8002ff4:	217f      	movs	r1, #127	; 0x7f
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffd5 	bl	8002fa6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f001 fed1 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8003002:	220c      	movs	r2, #12
 8003004:	2103      	movs	r1, #3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffcd 	bl	8002fa6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800300c:	2001      	movs	r0, #1
 800300e:	f001 fec9 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	461a      	mov	r2, r3
 8003016:	2104      	movs	r1, #4
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffc4 	bl	8002fa6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800301e:	2001      	movs	r0, #1
 8003020:	f001 fec0 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8003024:	78bb      	ldrb	r3, [r7, #2]
 8003026:	461a      	mov	r2, r3
 8003028:	2106      	movs	r1, #6
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffbb 	bl	8002fa6 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003030:	2001      	movs	r0, #1
 8003032:	f001 feb7 	bl	8004da4 <HAL_Delay>
  }
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 800304a:	2230      	movs	r2, #48	; 0x30
 800304c:	217f      	movs	r1, #127	; 0x7f
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffa9 	bl	8002fa6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003054:	2001      	movs	r0, #1
 8003056:	f001 fea5 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 800305a:	228c      	movs	r2, #140	; 0x8c
 800305c:	2103      	movs	r1, #3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa1 	bl	8002fa6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003064:	2001      	movs	r0, #1
 8003066:	f001 fe9d 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	461a      	mov	r2, r3
 800306e:	2104      	movs	r1, #4
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff98 	bl	8002fa6 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003076:	2001      	movs	r0, #1
 8003078:	f001 fe94 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 800307c:	22ff      	movs	r2, #255	; 0xff
 800307e:	2106      	movs	r1, #6
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff90 	bl	8002fa6 <ICM_WriteOneByte>
  	HAL_Delay(1);
 8003086:	2001      	movs	r0, #1
 8003088:	f001 fe8c 	bl	8004da4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 800308c:	2200      	movs	r2, #0
 800308e:	217f      	movs	r1, #127	; 0x7f
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff88 	bl	8002fa6 <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 8003096:	f107 030f 	add.w	r3, r7, #15
 800309a:	461a      	mov	r2, r3
 800309c:	213b      	movs	r1, #59	; 0x3b
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff59 	bl	8002f56 <ICM_ReadOneByte>
    HAL_Delay(1);
 80030a4:	2001      	movs	r0, #1
 80030a6:	f001 fe7d 	bl	8004da4 <HAL_Delay>
  	return Data;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
  }
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 80030be:	2101      	movs	r1, #1
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffbc 	bl	800303e <ICM_Mag_Read>
 80030c6:	4603      	mov	r3, r0
 80030c8:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 80030ca:	2111      	movs	r1, #17
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffb6 	bl	800303e <ICM_Mag_Read>
 80030d2:	4603      	mov	r3, r0
 80030d4:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 80030d6:	2112      	movs	r1, #18
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ffb0 	bl	800303e <ICM_Mag_Read>
 80030de:	4603      	mov	r3, r0
 80030e0:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 80030f4:	2113      	movs	r1, #19
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa1 	bl	800303e <ICM_Mag_Read>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8003100:	2114      	movs	r1, #20
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff9b 	bl	800303e <ICM_Mag_Read>
 8003108:	4603      	mov	r3, r0
 800310a:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	b219      	sxth	r1, r3
 8003110:	7c3b      	ldrb	r3, [r7, #16]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b21a      	sxth	r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3302      	adds	r3, #2
 800311a:	430a      	orrs	r2, r1
 800311c:	b212      	sxth	r2, r2
 800311e:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 8003120:	2115      	movs	r1, #21
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff8b 	bl	800303e <ICM_Mag_Read>
 8003128:	4603      	mov	r3, r0
 800312a:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 800312c:	2116      	movs	r1, #22
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff85 	bl	800303e <ICM_Mag_Read>
 8003134:	4603      	mov	r3, r0
 8003136:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003138:	7c7b      	ldrb	r3, [r7, #17]
 800313a:	b219      	sxth	r1, r3
 800313c:	7cbb      	ldrb	r3, [r7, #18]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	b21a      	sxth	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3304      	adds	r3, #4
 8003146:	430a      	orrs	r2, r1
 8003148:	b212      	sxth	r2, r2
 800314a:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 800314c:	2201      	movs	r2, #1
 800314e:	2131      	movs	r1, #49	; 0x31
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff46 	bl	8002fe2 <i2c_Mag_write>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8003166:	200a      	movs	r0, #10
 8003168:	f001 fe1c 	bl	8004da4 <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 800316c:	2100      	movs	r1, #0
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f9c0 	bl	80034f4 <ICM_SelectBank>
	HAL_Delay(10);
 8003174:	200a      	movs	r0, #10
 8003176:	f001 fe15 	bl	8004da4 <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9ca 	bl	8003514 <ICM_Enable_I2C>
	HAL_Delay(10);
 8003180:	200a      	movs	r0, #10
 8003182:	f001 fe0f 	bl	8004da4 <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8003186:	2101      	movs	r1, #1
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9d0 	bl	800352e <ICM_SetClock>
	HAL_Delay(10);
 800318e:	200a      	movs	r0, #10
 8003190:	f001 fe08 	bl	8004da4 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9da 	bl	800354e <ICM_AccelGyroOff>
	HAL_Delay(20);
 800319a:	2014      	movs	r0, #20
 800319c:	f001 fe02 	bl	8004da4 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9e1 	bl	8003568 <ICM_AccelGyroOn>
	HAL_Delay(10);
 80031a6:	200a      	movs	r0, #10
 80031a8:	f001 fdfc 	bl	8004da4 <HAL_Delay>
	ICM_Initialize(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f804 	bl	80031ba <ICM_Initialize>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 80031c2:	2120      	movs	r1, #32
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f995 	bl	80034f4 <ICM_SelectBank>
	HAL_Delay(20);
 80031ca:	2014      	movs	r0, #20
 80031cc:	f001 fdea 	bl	8004da4 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 80031d0:	2229      	movs	r2, #41	; 0x29
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9d4 	bl	8003582 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80031da:	200a      	movs	r0, #10
 80031dc:	f001 fde2 	bl	8004da4 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 80031e0:	220a      	movs	r2, #10
 80031e2:	2100      	movs	r1, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fede 	bl	8002fa6 <ICM_WriteOneByte>
	HAL_Delay(10);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f001 fdda 	bl	8004da4 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 80031f0:	2215      	movs	r2, #21
 80031f2:	2114      	movs	r1, #20
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fed6 	bl	8002fa6 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2110      	movs	r1, #16
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fed1 	bl	8002fa6 <ICM_WriteOneByte>
	HAL_Delay(10);
 8003204:	200a      	movs	r0, #10
 8003206:	f001 fdcd 	bl	8004da4 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 800320a:	220a      	movs	r2, #10
 800320c:	2111      	movs	r1, #17
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fec9 	bl	8002fa6 <ICM_WriteOneByte>
	HAL_Delay(10);
 8003214:	200a      	movs	r0, #10
 8003216:	f001 fdc5 	bl	8004da4 <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 800321a:	2120      	movs	r1, #32
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f969 	bl	80034f4 <ICM_SelectBank>
	HAL_Delay(20);
 8003222:	2014      	movs	r0, #20
 8003224:	f001 fdbe 	bl	8004da4 <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 8003228:	2200      	movs	r2, #0
 800322a:	217f      	movs	r1, #127	; 0x7f
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff feba 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8003232:	2230      	movs	r2, #48	; 0x30
 8003234:	210f      	movs	r1, #15
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff feb5 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 800323c:	2220      	movs	r2, #32
 800323e:	2103      	movs	r1, #3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff feb0 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 8003246:	2230      	movs	r2, #48	; 0x30
 8003248:	217f      	movs	r1, #127	; 0x7f
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff feab 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8003250:	224d      	movs	r2, #77	; 0x4d
 8003252:	2101      	movs	r1, #1
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fea6 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 800325a:	2201      	movs	r2, #1
 800325c:	2102      	movs	r1, #2
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fea1 	bl	8002fa6 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8003264:	2281      	movs	r2, #129	; 0x81
 8003266:	2105      	movs	r1, #5
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fe9c 	bl	8002fa6 <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 800326e:	2201      	movs	r2, #1
 8003270:	2132      	movs	r1, #50	; 0x32
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff feb5 	bl	8002fe2 <i2c_Mag_write>
	HAL_Delay(1000);
 8003278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800327c:	f001 fd92 	bl	8004da4 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8003280:	2202      	movs	r2, #2
 8003282:	2131      	movs	r1, #49	; 0x31
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff feac 	bl	8002fe2 <i2c_Mag_write>

	return 1337;
 800328a:	f240 5339 	movw	r3, #1337	; 0x539
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 80032a0:	f107 020c 	add.w	r2, r7, #12
 80032a4:	230c      	movs	r3, #12
 80032a6:	212d      	movs	r1, #45	; 0x2d
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fe29 	bl	8002f00 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 80032ae:	7b3b      	ldrb	r3, [r7, #12]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	7b7b      	ldrb	r3, [r7, #13]
 80032b6:	b21b      	sxth	r3, r3
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <ICM_ReadAccelGyro+0x98>)
 80032c0:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 80032c2:	7bbb      	ldrb	r3, [r7, #14]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	b21b      	sxth	r3, r3
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <ICM_ReadAccelGyro+0x98>)
 80032d4:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 80032d6:	7c3b      	ldrb	r3, [r7, #16]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	b21a      	sxth	r2, r3
 80032dc:	7c7b      	ldrb	r3, [r7, #17]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <ICM_ReadAccelGyro+0x98>)
 80032e8:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 80032ea:	7cbb      	ldrb	r3, [r7, #18]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <ICM_ReadAccelGyro+0x9c>)
 80032fc:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 80032fe:	7d3b      	ldrb	r3, [r7, #20]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21a      	sxth	r2, r3
 8003304:	7d7b      	ldrb	r3, [r7, #21]
 8003306:	b21b      	sxth	r3, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	b21b      	sxth	r3, r3
 800330c:	b29a      	uxth	r2, r3
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <ICM_ReadAccelGyro+0x9c>)
 8003310:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8003312:	7dbb      	ldrb	r3, [r7, #22]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	b21a      	sxth	r2, r3
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <ICM_ReadAccelGyro+0x9c>)
 8003324:	809a      	strh	r2, [r3, #4]
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200002c0 	.word	0x200002c0
 8003334:	200002c8 	.word	0x200002c8

08003338 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <ICM_CorrectAccelGyro+0x1a0>)
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da00      	bge.n	8003356 <ICM_CorrectAccelGyro+0x1e>
 8003354:	330f      	adds	r3, #15
 8003356:	111b      	asrs	r3, r3, #4
 8003358:	b21b      	sxth	r3, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f850 	bl	8000404 <__aeabi_i2d>
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <ICM_CorrectAccelGyro+0x1a4>)
 800336a:	f7fd f9df 	bl	800072c <__aeabi_ddiv>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fb87 	bl	8000a88 <__aeabi_d2uiz>
 800337a:	4603      	mov	r3, r0
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <ICM_CorrectAccelGyro+0x1a8>)
 8003380:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3302      	adds	r3, #2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <ICM_CorrectAccelGyro+0x1a0>)
 800338c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003390:	2b00      	cmp	r3, #0
 8003392:	da00      	bge.n	8003396 <ICM_CorrectAccelGyro+0x5e>
 8003394:	330f      	adds	r3, #15
 8003396:	111b      	asrs	r3, r3, #4
 8003398:	b21b      	sxth	r3, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f830 	bl	8000404 <__aeabi_i2d>
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <ICM_CorrectAccelGyro+0x1a4>)
 80033aa:	f7fd f9bf 	bl	800072c <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fd fb67 	bl	8000a88 <__aeabi_d2uiz>
 80033ba:	4603      	mov	r3, r0
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <ICM_CorrectAccelGyro+0x1a8>)
 80033c0:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3304      	adds	r3, #4
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <ICM_CorrectAccelGyro+0x1a0>)
 80033cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da00      	bge.n	80033d6 <ICM_CorrectAccelGyro+0x9e>
 80033d4:	330f      	adds	r3, #15
 80033d6:	111b      	asrs	r3, r3, #4
 80033d8:	b21b      	sxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f810 	bl	8000404 <__aeabi_i2d>
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <ICM_CorrectAccelGyro+0x1a4>)
 80033ea:	f7fd f99f 	bl	800072c <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7fd fb47 	bl	8000a88 <__aeabi_d2uiz>
 80033fa:	4603      	mov	r3, r0
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <ICM_CorrectAccelGyro+0x1a8>)
 8003400:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <ICM_CorrectAccelGyro+0x1ac>)
 800340a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	4618      	mov	r0, r3
 8003412:	f7fc fff7 	bl	8000404 <__aeabi_i2d>
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <ICM_CorrectAccelGyro+0x1b0>)
 800341c:	f7fd f85c 	bl	80004d8 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	4b2f      	ldr	r3, [pc, #188]	; (80034ec <ICM_CorrectAccelGyro+0x1b4>)
 800342e:	f7fd f97d 	bl	800072c <__aeabi_ddiv>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fb25 	bl	8000a88 <__aeabi_d2uiz>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <ICM_CorrectAccelGyro+0x1b8>)
 8003444:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <ICM_CorrectAccelGyro+0x1ac>)
 800344e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	4618      	mov	r0, r3
 8003456:	f7fc ffd5 	bl	8000404 <__aeabi_i2d>
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <ICM_CorrectAccelGyro+0x1b0>)
 8003460:	f7fd f83a 	bl	80004d8 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <ICM_CorrectAccelGyro+0x1b4>)
 8003472:	f7fd f95b 	bl	800072c <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f7fd fb03 	bl	8000a88 <__aeabi_d2uiz>
 8003482:	4603      	mov	r3, r0
 8003484:	b29a      	uxth	r2, r3
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <ICM_CorrectAccelGyro+0x1b8>)
 8003488:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <ICM_CorrectAccelGyro+0x1ac>)
 8003492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	4618      	mov	r0, r3
 800349a:	f7fc ffb3 	bl	8000404 <__aeabi_i2d>
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <ICM_CorrectAccelGyro+0x1b0>)
 80034a4:	f7fd f818 	bl	80004d8 <__aeabi_dmul>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <ICM_CorrectAccelGyro+0x1b4>)
 80034b6:	f7fd f939 	bl	800072c <__aeabi_ddiv>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7fd fae1 	bl	8000a88 <__aeabi_d2uiz>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <ICM_CorrectAccelGyro+0x1b8>)
 80034cc:	809a      	strh	r2, [r3, #4]
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200002e8 	.word	0x200002e8
 80034dc:	40d00000 	.word	0x40d00000
 80034e0:	200002d0 	.word	0x200002d0
 80034e4:	200002e0 	.word	0x200002e0
 80034e8:	406f4000 	.word	0x406f4000
 80034ec:	40fffb80 	.word	0x40fffb80
 80034f0:	200002d8 	.word	0x200002d8

080034f4 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	461a      	mov	r2, r3
 8003504:	217f      	movs	r1, #127	; 0x7f
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fd4d 	bl	8002fa6 <ICM_WriteOneByte>
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 800351c:	2220      	movs	r2, #32
 800351e:	2103      	movs	r1, #3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fd40 	bl	8002fa6 <ICM_WriteOneByte>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	461a      	mov	r2, r3
 800353e:	2106      	movs	r1, #6
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fd30 	bl	8002fa6 <ICM_WriteOneByte>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	2107      	movs	r1, #7
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fd23 	bl	8002fa6 <ICM_WriteOneByte>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8003570:	2200      	movs	r2, #0
 8003572:	2107      	movs	r1, #7
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fd16 	bl	8002fa6 <ICM_WriteOneByte>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	70fb      	strb	r3, [r7, #3]
 800358e:	4613      	mov	r3, r2
 8003590:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	78bb      	ldrb	r3, [r7, #2]
 8003596:	4313      	orrs	r3, r2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	2101      	movs	r1, #1
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fd01 	bl	8002fa6 <ICM_WriteOneByte>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e029      	b.n	800360e <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fe6c 	bl	8003298 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 80035c0:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <ICM20948_Calibrate+0x18c>)
 80035c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <ICM20948_Calibrate+0x190>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	4b59      	ldr	r3, [pc, #356]	; (8003738 <ICM20948_Calibrate+0x18c>)
 80035d4:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 80035d6:	4b58      	ldr	r3, [pc, #352]	; (8003738 <ICM20948_Calibrate+0x18c>)
 80035d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <ICM20948_Calibrate+0x190>)
 80035e0:	885b      	ldrh	r3, [r3, #2]
 80035e2:	4413      	add	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b21a      	sxth	r2, r3
 80035e8:	4b53      	ldr	r3, [pc, #332]	; (8003738 <ICM20948_Calibrate+0x18c>)
 80035ea:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80035ec:	4b52      	ldr	r3, [pc, #328]	; (8003738 <ICM20948_Calibrate+0x18c>)
 80035ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b51      	ldr	r3, [pc, #324]	; (800373c <ICM20948_Calibrate+0x190>)
 80035f6:	889b      	ldrh	r3, [r3, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <ICM20948_Calibrate+0x18c>)
 8003600:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8003602:	200a      	movs	r0, #10
 8003604:	f001 fbce 	bl	8004da4 <HAL_Delay>
	for(int i=0; i<50; i++){
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b31      	cmp	r3, #49	; 0x31
 8003612:	ddd2      	ble.n	80035ba <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <ICM20948_Calibrate+0x18c>)
 8003616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361a:	4a49      	ldr	r2, [pc, #292]	; (8003740 <ICM20948_Calibrate+0x194>)
 800361c:	fb82 1203 	smull	r1, r2, r2, r3
 8003620:	1112      	asrs	r2, r2, #4
 8003622:	17db      	asrs	r3, r3, #31
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	b21a      	sxth	r2, r3
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <ICM20948_Calibrate+0x18c>)
 800362a:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <ICM20948_Calibrate+0x18c>)
 800362e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003632:	4a43      	ldr	r2, [pc, #268]	; (8003740 <ICM20948_Calibrate+0x194>)
 8003634:	fb82 1203 	smull	r1, r2, r2, r3
 8003638:	1112      	asrs	r2, r2, #4
 800363a:	17db      	asrs	r3, r3, #31
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	b21a      	sxth	r2, r3
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <ICM20948_Calibrate+0x18c>)
 8003642:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <ICM20948_Calibrate+0x18c>)
 8003646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800364a:	4a3d      	ldr	r2, [pc, #244]	; (8003740 <ICM20948_Calibrate+0x194>)
 800364c:	fb82 1203 	smull	r1, r2, r2, r3
 8003650:	1112      	asrs	r2, r2, #4
 8003652:	17db      	asrs	r3, r3, #31
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <ICM20948_Calibrate+0x18c>)
 800365a:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <ICM20948_Calibrate+0x18c>)
 800365e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc fece 	bl	8000404 <__aeabi_i2d>
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <ICM20948_Calibrate+0x198>)
 800366e:	f7fc fd7b 	bl	8000168 <__aeabi_dsub>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f7fd f9dd 	bl	8000a38 <__aeabi_d2iz>
 800367e:	4603      	mov	r3, r0
 8003680:	b21a      	sxth	r2, r3
 8003682:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <ICM20948_Calibrate+0x18c>)
 8003684:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	e029      	b.n	80036e0 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fe03 	bl	8003298 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <ICM20948_Calibrate+0x19c>)
 8003694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003698:	b29a      	uxth	r2, r3
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <ICM20948_Calibrate+0x1a0>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036a6:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <ICM20948_Calibrate+0x1a0>)
 80036b2:	885b      	ldrh	r3, [r3, #2]
 80036b4:	4413      	add	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	b21a      	sxth	r2, r3
 80036ba:	4b23      	ldr	r3, [pc, #140]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036bc:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <ICM20948_Calibrate+0x1a0>)
 80036c8:	889b      	ldrh	r3, [r3, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b21a      	sxth	r2, r3
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036d2:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f001 fb65 	bl	8004da4 <HAL_Delay>
	for(int i=0; i<50; i++){
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3301      	adds	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b31      	cmp	r3, #49	; 0x31
 80036e4:	ddd2      	ble.n	800368c <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <ICM20948_Calibrate+0x194>)
 80036ee:	fb82 1203 	smull	r1, r2, r2, r3
 80036f2:	1112      	asrs	r2, r2, #4
 80036f4:	17db      	asrs	r3, r3, #31
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	b21a      	sxth	r2, r3
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <ICM20948_Calibrate+0x19c>)
 80036fc:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <ICM20948_Calibrate+0x19c>)
 8003700:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <ICM20948_Calibrate+0x194>)
 8003706:	fb82 1203 	smull	r1, r2, r2, r3
 800370a:	1112      	asrs	r2, r2, #4
 800370c:	17db      	asrs	r3, r3, #31
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b21a      	sxth	r2, r3
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <ICM20948_Calibrate+0x19c>)
 8003714:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <ICM20948_Calibrate+0x19c>)
 8003718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <ICM20948_Calibrate+0x194>)
 800371e:	fb82 1203 	smull	r1, r2, r2, r3
 8003722:	1112      	asrs	r2, r2, #4
 8003724:	17db      	asrs	r3, r3, #31
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b21a      	sxth	r2, r3
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <ICM20948_Calibrate+0x19c>)
 800372c:	809a      	strh	r2, [r3, #4]
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200002e8 	.word	0x200002e8
 800373c:	200002c0 	.word	0x200002c0
 8003740:	51eb851f 	.word	0x51eb851f
 8003744:	40b00000 	.word	0x40b00000
 8003748:	200002e0 	.word	0x200002e0
 800374c:	200002c8 	.word	0x200002c8

08003750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800375c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800376c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003778:	e000      	b.n	800377c <ITM_SendChar+0x2c>
    {
      __NOP();
 800377a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800377c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f9      	beq.n	800377a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e009      	b.n	80037c6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	60ba      	str	r2, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ffc8 	bl	8003750 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3301      	adds	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	dbf1      	blt.n	80037b2 <_write+0x16>
  return len;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	b099      	sub	sp, #100	; 0x64
 80037de:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	221f      	movs	r2, #31
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f005 fac1 	bl	8008d74 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f2:	f001 fa75 	bl	8004ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f6:	f000 f8f9 	bl	80039ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fa:	f000 fb6b 	bl	8003ed4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80037fe:	f000 fb3f 	bl	8003e80 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003802:	f000 f983 	bl	8003b0c <MX_I2C2_Init>
  MX_ADC1_Init();
 8003806:	f000 f943 	bl	8003a90 <MX_ADC1_Init>
  MX_SPI2_Init();
 800380a:	f000 f9ad 	bl	8003b68 <MX_SPI2_Init>
  MX_TIM2_Init();
 800380e:	f000 fa39 	bl	8003c84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003812:	f000 fab9 	bl	8003d88 <MX_TIM3_Init>
  MX_TIM1_Init();
 8003816:	f000 f9dd 	bl	8003bd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800381a:	213c      	movs	r1, #60	; 0x3c
 800381c:	4863      	ldr	r0, [pc, #396]	; (80039ac <main+0x1d4>)
 800381e:	f004 f871 	bl	8007904 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 8003822:	4863      	ldr	r0, [pc, #396]	; (80039b0 <main+0x1d8>)
 8003824:	f003 fd2a 	bl	800727c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 8003828:	2104      	movs	r1, #4
 800382a:	4861      	ldr	r0, [pc, #388]	; (80039b0 <main+0x1d8>)
 800382c:	f003 fec2 	bl	80075b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8003830:	2108      	movs	r1, #8
 8003832:	485f      	ldr	r0, [pc, #380]	; (80039b0 <main+0x1d8>)
 8003834:	f003 febe 	bl	80075b4 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 8003838:	485e      	ldr	r0, [pc, #376]	; (80039b4 <main+0x1dc>)
 800383a:	f003 fd1f 	bl	800727c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 800383e:	2104      	movs	r1, #4
 8003840:	485c      	ldr	r0, [pc, #368]	; (80039b4 <main+0x1dc>)
 8003842:	f003 fdbd 	bl	80073c0 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 8003846:	f241 3088 	movw	r0, #5000	; 0x1388
 800384a:	f001 faab 	bl	8004da4 <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800384e:	2100      	movs	r1, #0
 8003850:	4859      	ldr	r0, [pc, #356]	; (80039b8 <main+0x1e0>)
 8003852:	f7ff fe4f 	bl	80034f4 <ICM_SelectBank>
  HAL_Delay(10);
 8003856:	200a      	movs	r0, #10
 8003858:	f001 faa4 	bl	8004da4 <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 800385c:	4856      	ldr	r0, [pc, #344]	; (80039b8 <main+0x1e0>)
 800385e:	f7ff fc7e 	bl	800315e <ICM_PowerOn>
  HAL_Delay(10);
 8003862:	200a      	movs	r0, #10
 8003864:	f001 fa9e 	bl	8004da4 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8003868:	4853      	ldr	r0, [pc, #332]	; (80039b8 <main+0x1e0>)
 800386a:	f7ff fe9f 	bl	80035ac <ICM20948_Calibrate>
  HAL_Delay(100);
 800386e:	2064      	movs	r0, #100	; 0x64
 8003870:	f001 fa98 	bl	8004da4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  // ultrasonic testing
	  HCSR04_Read_Front(&htim3);
 8003874:	484e      	ldr	r0, [pc, #312]	; (80039b0 <main+0x1d8>)
 8003876:	f001 f9b3 	bl	8004be0 <HCSR04_Read_Front>
	  sprintf(MSG, "Distance: %d\n", Front_US.DISTANCE);
 800387a:	4b50      	ldr	r3, [pc, #320]	; (80039bc <main+0x1e4>)
 800387c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003880:	f107 0010 	add.w	r0, r7, #16
 8003884:	494e      	ldr	r1, [pc, #312]	; (80039c0 <main+0x1e8>)
 8003886:	f005 fedd 	bl	8009644 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800388a:	f107 0110 	add.w	r1, r7, #16
 800388e:	2364      	movs	r3, #100	; 0x64
 8003890:	2223      	movs	r2, #35	; 0x23
 8003892:	484c      	ldr	r0, [pc, #304]	; (80039c4 <main+0x1ec>)
 8003894:	f005 f8d9 	bl	8008a4a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389c:	484a      	ldr	r0, [pc, #296]	; (80039c8 <main+0x1f0>)
 800389e:	f001 ff61 	bl	8005764 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 80038a2:	2019      	movs	r0, #25
 80038a4:	f001 fa7e 	bl	8004da4 <HAL_Delay>

  // ESC testing
	  double speed = 50;
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <main+0x1f4>)
 80038ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  accelerate(&htim2, speed);
 80038b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b6:	483f      	ldr	r0, [pc, #252]	; (80039b4 <main+0x1dc>)
 80038b8:	f7fd fc3a 	bl	8001130 <accelerate>
//	  drive_forward(&htim2, speed);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80038bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c0:	4841      	ldr	r0, [pc, #260]	; (80039c8 <main+0x1f0>)
 80038c2:	f001 ff4f 	bl	8005764 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 80038c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038ca:	f001 fa6b 	bl	8004da4 <HAL_Delay>
	  decelerate(&htim2);
 80038ce:	4839      	ldr	r0, [pc, #228]	; (80039b4 <main+0x1dc>)
 80038d0:	f7fd fc8a 	bl	80011e8 <decelerate>
//	  stop(&htim2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80038d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d8:	483b      	ldr	r0, [pc, #236]	; (80039c8 <main+0x1f0>)
 80038da:	f001 ff43 	bl	8005764 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 80038de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038e2:	f001 fa5f 	bl	8004da4 <HAL_Delay>

    // imu testing

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 80038e6:	2100      	movs	r1, #0
 80038e8:	4833      	ldr	r0, [pc, #204]	; (80039b8 <main+0x1e0>)
 80038ea:	f7ff fe03 	bl	80034f4 <ICM_SelectBank>
	  HAL_Delay(10);
 80038ee:	200a      	movs	r0, #10
 80038f0:	f001 fa58 	bl	8004da4 <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 80038f4:	4830      	ldr	r0, [pc, #192]	; (80039b8 <main+0x1e0>)
 80038f6:	f7ff fccf 	bl	8003298 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	4619      	mov	r1, r3
 8003900:	482d      	ldr	r0, [pc, #180]	; (80039b8 <main+0x1e0>)
 8003902:	f7ff fbd7 	bl	80030b4 <ICM_ReadMag>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003906:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <main+0x1f8>)
 8003908:	4932      	ldr	r1, [pc, #200]	; (80039d4 <main+0x1fc>)
 800390a:	482b      	ldr	r0, [pc, #172]	; (80039b8 <main+0x1e0>)
 800390c:	f7ff fd14 	bl	8003338 <ICM_CorrectAccelGyro>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <main+0x200>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd f98d 	bl	8000c34 <__aeabi_ui2f>
 800391a:	4681      	mov	r9, r0
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <main+0x200>)
 800391e:	885b      	ldrh	r3, [r3, #2]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd f987 	bl	8000c34 <__aeabi_ui2f>
 8003926:	4682      	mov	sl, r0
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <main+0x200>)
 800392a:	889b      	ldrh	r3, [r3, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd f981 	bl	8000c34 <__aeabi_ui2f>
 8003932:	4683      	mov	fp, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <main+0x204>)
 8003936:	881b      	ldrh	r3, [r3, #0]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f97b 	bl	8000c34 <__aeabi_ui2f>
 800393e:	6078      	str	r0, [r7, #4]
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <main+0x204>)
 8003942:	885b      	ldrh	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd f975 	bl	8000c34 <__aeabi_ui2f>
 800394a:	4604      	mov	r4, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 800394c:	4b23      	ldr	r3, [pc, #140]	; (80039dc <main+0x204>)
 800394e:	889b      	ldrh	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd f96f 	bl	8000c34 <__aeabi_ui2f>
 8003956:	4605      	mov	r5, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003958:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd f96d 	bl	8000c3c <__aeabi_i2f>
 8003962:	4606      	mov	r6, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd f967 	bl	8000c3c <__aeabi_i2f>
 800396e:	4680      	mov	r8, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd f961 	bl	8000c3c <__aeabi_i2f>
 800397a:	4603      	mov	r3, r0
 800397c:	9304      	str	r3, [sp, #16]
 800397e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003982:	9602      	str	r6, [sp, #8]
 8003984:	9501      	str	r5, [sp, #4]
 8003986:	9400      	str	r4, [sp, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	465a      	mov	r2, fp
 800398c:	4651      	mov	r1, sl
 800398e:	4648      	mov	r0, r9
 8003990:	f7fd fcc2 	bl	8001318 <MadgwickAHRSupdate>

	  computeAngles();
 8003994:	f7ff f9e8 	bl	8002d68 <computeAngles>

	  float roll_main = roll;
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <main+0x208>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float pitch_main = pitch;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <main+0x20c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
	  float yaw_main = yaw;
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <main+0x210>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
  {
 80039aa:	e763      	b.n	8003874 <main+0x9c>
 80039ac:	200003cc 	.word	0x200003cc
 80039b0:	2000045c 	.word	0x2000045c
 80039b4:	20000414 	.word	0x20000414
 80039b8:	20000320 	.word	0x20000320
 80039bc:	20000040 	.word	0x20000040
 80039c0:	0800c228 	.word	0x0800c228
 80039c4:	200004a4 	.word	0x200004a4
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40490000 	.word	0x40490000
 80039d0:	200002c8 	.word	0x200002c8
 80039d4:	200002c0 	.word	0x200002c0
 80039d8:	200002d8 	.word	0x200002d8
 80039dc:	200002d0 	.word	0x200002d0
 80039e0:	200002b0 	.word	0x200002b0
 80039e4:	200002b4 	.word	0x200002b4
 80039e8:	200002b8 	.word	0x200002b8

080039ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b094      	sub	sp, #80	; 0x50
 80039f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f6:	2228      	movs	r2, #40	; 0x28
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 f9ba 	bl	8008d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a20:	2301      	movs	r3, #1
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a24:	2310      	movs	r3, #16
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fe7f 	bl	8006734 <HAL_RCC_OscConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003a3c:	f000 fb28 	bl	8004090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a40:	230f      	movs	r3, #15
 8003a42:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 f8eb 	bl	8006c38 <HAL_RCC_ClockConfig>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003a68:	f000 fb12 	bl	8004090 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a74:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 fa75 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003a84:	f000 fb04 	bl	8004090 <Error_Handler>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3750      	adds	r7, #80	; 0x50
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003aa2:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <MX_ADC1_Init+0x78>)
 8003aa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003aba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003ace:	f001 f98d 	bl	8004dec <HAL_ADC_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003ad8:	f000 fada 	bl	8004090 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003adc:	2304      	movs	r3, #4
 8003ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4805      	ldr	r0, [pc, #20]	; (8003b04 <MX_ADC1_Init+0x74>)
 8003aee:	f001 fa55 	bl	8004f9c <HAL_ADC_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003af8:	f000 faca 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200002f0 	.word	0x200002f0
 8003b08:	40012400 	.word	0x40012400

08003b0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <MX_I2C2_Init+0x54>)
 8003b14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <MX_I2C2_Init+0x58>)
 8003b1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b24:	22d2      	movs	r2, #210	; 0xd2
 8003b26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b48:	4804      	ldr	r0, [pc, #16]	; (8003b5c <MX_I2C2_Init+0x50>)
 8003b4a:	f001 fe25 	bl	8005798 <HAL_I2C_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b54:	f000 fa9c 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000320 	.word	0x20000320
 8003b60:	40005800 	.word	0x40005800
 8003b64:	00061a80 	.word	0x00061a80

08003b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <MX_SPI2_Init+0x68>)
 8003b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003bb4:	220a      	movs	r2, #10
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bb8:	4804      	ldr	r0, [pc, #16]	; (8003bcc <MX_SPI2_Init+0x64>)
 8003bba:	f003 fa8b 	bl	80070d4 <HAL_SPI_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003bc4:	f000 fa64 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000374 	.word	0x20000374
 8003bd0:	40003800 	.word	0x40003800

08003bd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 f8c6 	bl	8008d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <MX_TIM1_Init+0xac>)
 8003bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c34:	2301      	movs	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4619      	mov	r1, r3
 8003c46:	480d      	ldr	r0, [pc, #52]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c48:	f003 fdba 	bl	80077c0 <HAL_TIM_Encoder_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003c52:	f000 fa1d 	bl	8004090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4806      	ldr	r0, [pc, #24]	; (8003c7c <MX_TIM1_Init+0xa8>)
 8003c64:	f004 fe34 	bl	80088d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003c6e:	f000 fa0f 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c72:	bf00      	nop
 8003c74:	3730      	adds	r7, #48	; 0x30
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200003cc 	.word	0x200003cc
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	; 0x38
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c98:	f107 0320 	add.w	r3, r7, #32
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
 8003cb0:	615a      	str	r2, [r3, #20]
 8003cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cb4:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cca:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003cdc:	4829      	ldr	r0, [pc, #164]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cde:	f003 fa7d 	bl	80071dc <HAL_TIM_Base_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003ce8:	f000 f9d2 	bl	8004090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4822      	ldr	r0, [pc, #136]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003cfa:	f004 f90b 	bl	8007f14 <HAL_TIM_ConfigClockSource>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003d04:	f000 f9c4 	bl	8004090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d08:	481e      	ldr	r0, [pc, #120]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003d0a:	f003 fb01 	bl	8007310 <HAL_TIM_PWM_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003d14:	f000 f9bc 	bl	8004090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d20:	f107 0320 	add.w	r3, r7, #32
 8003d24:	4619      	mov	r1, r3
 8003d26:	4817      	ldr	r0, [pc, #92]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003d28:	f004 fdd2 	bl	80088d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003d32:	f000 f9ad 	bl	8004090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d36:	2360      	movs	r3, #96	; 0x60
 8003d38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003d3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	480d      	ldr	r0, [pc, #52]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003d50:	f004 f822 	bl	8007d98 <HAL_TIM_PWM_ConfigChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003d5a:	f000 f999 	bl	8004090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2204      	movs	r2, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4807      	ldr	r0, [pc, #28]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003d66:	f004 f817 	bl	8007d98 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003d70:	f000 f98e 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <MX_TIM2_Init+0x100>)
 8003d76:	f000 fb5d 	bl	8004434 <HAL_TIM_MspPostInit>

}
 8003d7a:	bf00      	nop
 8003d7c:	3738      	adds	r7, #56	; 0x38
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000414 	.word	0x20000414

08003d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d8e:	f107 0318 	add.w	r3, r7, #24
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d9c:	f107 0310 	add.w	r3, r7, #16
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003da6:	463b      	mov	r3, r7
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003db4:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <MX_TIM3_Init+0xf4>)
 8003db6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dba:	2207      	movs	r2, #7
 8003dbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003dc4:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dd8:	4827      	ldr	r0, [pc, #156]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003dda:	f003 f9ff 	bl	80071dc <HAL_TIM_Base_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003de4:	f000 f954 	bl	8004090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dee:	f107 0318 	add.w	r3, r7, #24
 8003df2:	4619      	mov	r1, r3
 8003df4:	4820      	ldr	r0, [pc, #128]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003df6:	f004 f88d 	bl	8007f14 <HAL_TIM_ConfigClockSource>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e00:	f000 f946 	bl	8004090 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003e04:	481c      	ldr	r0, [pc, #112]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003e06:	f003 fb7d 	bl	8007504 <HAL_TIM_IC_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003e10:	f000 f93e 	bl	8004090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	4619      	mov	r1, r3
 8003e22:	4815      	ldr	r0, [pc, #84]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003e24:	f004 fd54 	bl	80088d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003e2e:	f000 f92f 	bl	8004090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e32:	2300      	movs	r3, #0
 8003e34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e36:	2301      	movs	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e42:	463b      	mov	r3, r7
 8003e44:	2204      	movs	r2, #4
 8003e46:	4619      	mov	r1, r3
 8003e48:	480b      	ldr	r0, [pc, #44]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003e4a:	f003 ff11 	bl	8007c70 <HAL_TIM_IC_ConfigChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003e54:	f000 f91c 	bl	8004090 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4806      	ldr	r0, [pc, #24]	; (8003e78 <MX_TIM3_Init+0xf0>)
 8003e60:	f003 ff06 	bl	8007c70 <HAL_TIM_IC_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003e6a:	f000 f911 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000045c 	.word	0x2000045c
 8003e7c:	40000400 	.word	0x40000400

08003e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <MX_USART2_UART_Init+0x50>)
 8003e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003eb6:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eb8:	f004 fd7a 	bl	80089b0 <HAL_UART_Init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ec2:	f000 f8e5 	bl	8004090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200004a4 	.word	0x200004a4
 8003ed0:	40004400 	.word	0x40004400

08003ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee8:	4b57      	ldr	r3, [pc, #348]	; (8004048 <MX_GPIO_Init+0x174>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4a56      	ldr	r2, [pc, #344]	; (8004048 <MX_GPIO_Init+0x174>)
 8003eee:	f043 0310 	orr.w	r3, r3, #16
 8003ef2:	6193      	str	r3, [r2, #24]
 8003ef4:	4b54      	ldr	r3, [pc, #336]	; (8004048 <MX_GPIO_Init+0x174>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f00:	4b51      	ldr	r3, [pc, #324]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a50      	ldr	r2, [pc, #320]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f18:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	6193      	str	r3, [r2, #24]
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f30:	4b45      	ldr	r3, [pc, #276]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4a44      	ldr	r2, [pc, #272]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	6193      	str	r3, [r2, #24]
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <MX_GPIO_Init+0x174>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f4e:	483f      	ldr	r0, [pc, #252]	; (800404c <MX_GPIO_Init+0x178>)
 8003f50:	f001 fbf0 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2140      	movs	r1, #64	; 0x40
 8003f58:	483d      	ldr	r0, [pc, #244]	; (8004050 <MX_GPIO_Init+0x17c>)
 8003f5a:	f001 fbeb 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2158      	movs	r1, #88	; 0x58
 8003f62:	483c      	ldr	r0, [pc, #240]	; (8004054 <MX_GPIO_Init+0x180>)
 8003f64:	f001 fbe6 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2302      	movs	r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4832      	ldr	r0, [pc, #200]	; (800404c <MX_GPIO_Init+0x178>)
 8003f82:	f001 fa53 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8003f86:	2320      	movs	r3, #32
 8003f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	4619      	mov	r1, r3
 8003f98:	482d      	ldr	r0, [pc, #180]	; (8004050 <MX_GPIO_Init+0x17c>)
 8003f9a:	f001 fa47 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2302      	movs	r3, #2
 8003fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4826      	ldr	r0, [pc, #152]	; (8004050 <MX_GPIO_Init+0x17c>)
 8003fb6:	f001 fa39 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003fc6:	f107 0314 	add.w	r3, r7, #20
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4821      	ldr	r0, [pc, #132]	; (8004054 <MX_GPIO_Init+0x180>)
 8003fce:	f001 fa2d 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8003fd2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <MX_GPIO_Init+0x184>)
 8003fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	481a      	ldr	r0, [pc, #104]	; (8004050 <MX_GPIO_Init+0x17c>)
 8003fe8:	f001 fa20 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8003fec:	2358      	movs	r3, #88	; 0x58
 8003fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	4814      	ldr	r0, [pc, #80]	; (8004054 <MX_GPIO_Init+0x180>)
 8004004:	f001 fa12 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ESP_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_ESP_SDA_Pin;
 8004008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800400c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400e:	2312      	movs	r3, #18
 8004010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_ESP_SDA_GPIO_Port, &GPIO_InitStruct);
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	4619      	mov	r1, r3
 800401c:	480d      	ldr	r0, [pc, #52]	; (8004054 <MX_GPIO_Init+0x180>)
 800401e:	f001 fa05 	bl	800542c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <MX_GPIO_Init+0x188>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <MX_GPIO_Init+0x188>)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	6053      	str	r3, [r2, #4]

}
 800403e:	bf00      	nop
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	40011000 	.word	0x40011000
 8004050:	40010800 	.word	0x40010800
 8004054:	40010c00 	.word	0x40010c00
 8004058:	10110000 	.word	0x10110000
 800405c:	40010000 	.word	0x40010000

08004060 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us (uint32_t us)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <delay_us+0x2c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8004070:	bf00      	nop
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <delay_us+0x2c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d8f9      	bhi.n	8004072 <delay_us+0x12>
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	2000045c 	.word	0x2000045c

08004090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004094:	b672      	cpsid	i
}
 8004096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004098:	e7fe      	b.n	8004098 <Error_Handler+0x8>
	...

0800409c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_MspInit+0x5c>)
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_MspInit+0x5c>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6193      	str	r3, [r2, #24]
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_MspInit+0x5c>)
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_MspInit+0x5c>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <HAL_MspInit+0x5c>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_MspInit+0x5c>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_MspInit+0x60>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_MspInit+0x60>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40010000 	.word	0x40010000

08004100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	f107 0310 	add.w	r3, r7, #16
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a14      	ldr	r2, [pc, #80]	; (800416c <HAL_ADC_MspInit+0x6c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d121      	bne.n	8004164 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_ADC_MspInit+0x70>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	4a12      	ldr	r2, [pc, #72]	; (8004170 <HAL_ADC_MspInit+0x70>)
 8004126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800412a:	6193      	str	r3, [r2, #24]
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_ADC_MspInit+0x70>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_ADC_MspInit+0x70>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <HAL_ADC_MspInit+0x70>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6193      	str	r3, [r2, #24]
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_ADC_MspInit+0x70>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8004150:	2310      	movs	r3, #16
 8004152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004154:	2303      	movs	r3, #3
 8004156:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	4619      	mov	r1, r3
 800415e:	4805      	ldr	r0, [pc, #20]	; (8004174 <HAL_ADC_MspInit+0x74>)
 8004160:	f001 f964 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004164:	bf00      	nop
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40012400 	.word	0x40012400
 8004170:	40021000 	.word	0x40021000
 8004174:	40010800 	.word	0x40010800

08004178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_I2C_MspInit+0x74>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d124      	bne.n	80041e2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 800419e:	f043 0308 	orr.w	r3, r3, #8
 80041a2:	6193      	str	r3, [r2, #24]
 80041a4:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 80041b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b6:	2312      	movs	r3, #18
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ba:	2303      	movs	r3, #3
 80041bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	f107 0310 	add.w	r3, r7, #16
 80041c2:	4619      	mov	r1, r3
 80041c4:	480b      	ldr	r0, [pc, #44]	; (80041f4 <HAL_I2C_MspInit+0x7c>)
 80041c6:	f001 f931 	bl	800542c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 80041d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041d4:	61d3      	str	r3, [r2, #28]
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_I2C_MspInit+0x78>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40005800 	.word	0x40005800
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40010c00 	.word	0x40010c00

080041f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_SPI_MspInit+0x8c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d131      	bne.n	800427c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_SPI_MspInit+0x90>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_SPI_MspInit+0x90>)
 800421e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004222:	61d3      	str	r3, [r2, #28]
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_SPI_MspInit+0x90>)
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_SPI_MspInit+0x90>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <HAL_SPI_MspInit+0x90>)
 8004236:	f043 0308 	orr.w	r3, r3, #8
 800423a:	6193      	str	r3, [r2, #24]
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_SPI_MspInit+0x90>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004248:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800424c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004252:	2303      	movs	r3, #3
 8004254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	f107 0310 	add.w	r3, r7, #16
 800425a:	4619      	mov	r1, r3
 800425c:	480b      	ldr	r0, [pc, #44]	; (800428c <HAL_SPI_MspInit+0x94>)
 800425e:	f001 f8e5 	bl	800542c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	4619      	mov	r1, r3
 8004276:	4805      	ldr	r0, [pc, #20]	; (800428c <HAL_SPI_MspInit+0x94>)
 8004278:	f001 f8d8 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40003800 	.word	0x40003800
 8004288:	40021000 	.word	0x40021000
 800428c:	40010c00 	.word	0x40010c00

08004290 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a26      	ldr	r2, [pc, #152]	; (8004344 <HAL_TIM_Encoder_MspInit+0xb4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d144      	bne.n	800433a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042ba:	6193      	str	r3, [r2, #24]
 80042bc:	4b22      	ldr	r3, [pc, #136]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c8:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	6193      	str	r3, [r2, #24]
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <HAL_TIM_Encoder_MspInit+0xb8>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|RIGHT_ENCODER_A_Pin;
 80042e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ee:	f107 0310 	add.w	r3, r7, #16
 80042f2:	4619      	mov	r1, r3
 80042f4:	4815      	ldr	r0, [pc, #84]	; (800434c <HAL_TIM_Encoder_MspInit+0xbc>)
 80042f6:	f001 f899 	bl	800542c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80042fa:	2200      	movs	r2, #0
 80042fc:	2100      	movs	r1, #0
 80042fe:	2018      	movs	r0, #24
 8004300:	f001 f85d 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004304:	2018      	movs	r0, #24
 8004306:	f001 f876 	bl	80053f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	2019      	movs	r0, #25
 8004310:	f001 f855 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004314:	2019      	movs	r0, #25
 8004316:	f001 f86e 	bl	80053f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	201a      	movs	r0, #26
 8004320:	f001 f84d 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004324:	201a      	movs	r0, #26
 8004326:	f001 f866 	bl	80053f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	201b      	movs	r0, #27
 8004330:	f001 f845 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004334:	201b      	movs	r0, #27
 8004336:	f001 f85e 	bl	80053f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800433a:	bf00      	nop
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40010800 	.word	0x40010800

08004350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d10c      	bne.n	800438a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	61d3      	str	r3, [r2, #28]
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004388:	e048      	b.n	800441c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_TIM_Base_MspInit+0xd8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d143      	bne.n	800441c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004394:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	61d3      	str	r3, [r2, #28]
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043ca:	f043 0308 	orr.w	r3, r3, #8
 80043ce:	6193      	str	r3, [r2, #24]
 80043d0:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_TIM_Base_MspInit+0xd4>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 80043e8:	f107 0318 	add.w	r3, r7, #24
 80043ec:	4619      	mov	r1, r3
 80043ee:	480f      	ldr	r0, [pc, #60]	; (800442c <HAL_TIM_Base_MspInit+0xdc>)
 80043f0:	f001 f81c 	bl	800542c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 80043f4:	2301      	movs	r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004400:	f107 0318 	add.w	r3, r7, #24
 8004404:	4619      	mov	r1, r3
 8004406:	480a      	ldr	r0, [pc, #40]	; (8004430 <HAL_TIM_Base_MspInit+0xe0>)
 8004408:	f001 f810 	bl	800542c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	201d      	movs	r0, #29
 8004412:	f000 ffd4 	bl	80053be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004416:	201d      	movs	r0, #29
 8004418:	f000 ffed 	bl	80053f6 <HAL_NVIC_EnableIRQ>
}
 800441c:	bf00      	nop
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40000400 	.word	0x40000400
 800442c:	40010800 	.word	0x40010800
 8004430:	40010c00 	.word	0x40010c00

08004434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 0310 	add.w	r3, r7, #16
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d117      	bne.n	8004484 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_TIM_MspPostInit+0x58>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <HAL_TIM_MspPostInit+0x58>)
 800445a:	f043 0304 	orr.w	r3, r3, #4
 800445e:	6193      	str	r3, [r2, #24]
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_TIM_MspPostInit+0x58>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 800446c:	2303      	movs	r3, #3
 800446e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2302      	movs	r3, #2
 8004476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	4619      	mov	r1, r3
 800447e:	4804      	ldr	r0, [pc, #16]	; (8004490 <HAL_TIM_MspPostInit+0x5c>)
 8004480:	f000 ffd4 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004484:	bf00      	nop
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40010800 	.word	0x40010800

08004494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 0310 	add.w	r3, r7, #16
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_UART_MspInit+0x88>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d12f      	bne.n	8004514 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	61d3      	str	r3, [r2, #28]
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6193      	str	r3, [r2, #24]
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_UART_MspInit+0x8c>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044e4:	2304      	movs	r3, #4
 80044e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	2302      	movs	r3, #2
 80044ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	4619      	mov	r1, r3
 80044f6:	480b      	ldr	r0, [pc, #44]	; (8004524 <HAL_UART_MspInit+0x90>)
 80044f8:	f000 ff98 	bl	800542c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044fc:	2308      	movs	r3, #8
 80044fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f107 0310 	add.w	r3, r7, #16
 800450c:	4619      	mov	r1, r3
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <HAL_UART_MspInit+0x90>)
 8004510:	f000 ff8c 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40004400 	.word	0x40004400
 8004520:	40021000 	.word	0x40021000
 8004524:	40010800 	.word	0x40010800

08004528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800452c:	e7fe      	b.n	800452c <NMI_Handler+0x4>

0800452e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004532:	e7fe      	b.n	8004532 <HardFault_Handler+0x4>

08004534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004538:	e7fe      	b.n	8004538 <MemManage_Handler+0x4>

0800453a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800453e:	e7fe      	b.n	800453e <BusFault_Handler+0x4>

08004540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004544:	e7fe      	b.n	8004544 <UsageFault_Handler+0x4>

08004546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	0000      	movs	r0, r0
 800456c:	0000      	movs	r0, r0
	...

08004570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <SysTick_Handler+0xe0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a35      	ldr	r2, [pc, #212]	; (8004650 <SysTick_Handler+0xe0>)
 800457c:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 800457e:	4b34      	ldr	r3, [pc, #208]	; (8004650 <SysTick_Handler+0xe0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004586:	d159      	bne.n	800463c <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <SysTick_Handler+0xe4>)
 800458a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800458e:	461a      	mov	r2, r3
 8004590:	4b31      	ldr	r3, [pc, #196]	; (8004658 <SysTick_Handler+0xe8>)
 8004592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f7fb ff32 	bl	8000404 <__aeabi_i2d>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	492d      	ldr	r1, [pc, #180]	; (800465c <SysTick_Handler+0xec>)
 80045a6:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <SysTick_Handler+0xec>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	492b      	ldr	r1, [pc, #172]	; (8004660 <SysTick_Handler+0xf0>)
 80045b2:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <SysTick_Handler+0xe4>)
 80045b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ff21 	bl	8000404 <__aeabi_i2d>
 80045c2:	a321      	add	r3, pc, #132	; (adr r3, 8004648 <SysTick_Handler+0xd8>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fb ff86 	bl	80004d8 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4924      	ldr	r1, [pc, #144]	; (8004664 <SysTick_Handler+0xf4>)
 80045d2:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <SysTick_Handler+0xe8>)
 80045d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fb ff11 	bl	8000404 <__aeabi_i2d>
 80045e2:	a319      	add	r3, pc, #100	; (adr r3, 8004648 <SysTick_Handler+0xd8>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb ff76 	bl	80004d8 <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	491d      	ldr	r1, [pc, #116]	; (8004668 <SysTick_Handler+0xf8>)
 80045f2:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <SysTick_Handler+0xf4>)
 80045f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <SysTick_Handler+0xf8>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fdb1 	bl	8000168 <__aeabi_dsub>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	f7fb fdab 	bl	800016c <__adddf3>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4914      	ldr	r1, [pc, #80]	; (800466c <SysTick_Handler+0xfc>)
 800461c:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <SysTick_Handler+0xfc>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	490e      	ldr	r1, [pc, #56]	; (8004660 <SysTick_Handler+0xf0>)
 8004628:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <SysTick_Handler+0xe4>)
 800462e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <SysTick_Handler+0xe8>)
 8004634:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <SysTick_Handler+0xe0>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800463c:	f000 fb96 	bl	8004d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	f3af 8000 	nop.w
 8004648:	05f68f13 	.word	0x05f68f13
 800464c:	3fdc5115 	.word	0x3fdc5115
 8004650:	2000050c 	.word	0x2000050c
 8004654:	200004ee 	.word	0x200004ee
 8004658:	20000508 	.word	0x20000508
 800465c:	200004f0 	.word	0x200004f0
 8004660:	20000010 	.word	0x20000010
 8004664:	20000510 	.word	0x20000510
 8004668:	20000518 	.word	0x20000518
 800466c:	200004f8 	.word	0x200004f8

08004670 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <TIM1_BRK_IRQHandler+0x10>)
 8004676:	f003 f9f3 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200003cc 	.word	0x200003cc

08004684 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <TIM1_UP_IRQHandler+0x10>)
 800468a:	f003 f9e9 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200003cc 	.word	0x200003cc

08004698 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <TIM1_TRG_COM_IRQHandler+0x10>)
 800469e:	f003 f9df 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200003cc 	.word	0x200003cc

080046ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <TIM1_CC_IRQHandler+0x10>)
 80046b2:	f003 f9d5 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200003cc 	.word	0x200003cc

080046c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <TIM3_IRQHandler+0x10>)
 80046c6:	f003 f9cb 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	2000045c 	.word	0x2000045c

080046d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
	return 1;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <_kill>:

int _kill(int pid, int sig)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046ec:	f004 fb18 	bl	8008d20 <__errno>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2216      	movs	r2, #22
 80046f4:	601a      	str	r2, [r3, #0]
	return -1;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_exit>:

void _exit (int status)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800470a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ffe7 	bl	80046e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004714:	e7fe      	b.n	8004714 <_exit+0x12>

08004716 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b086      	sub	sp, #24
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e00a      	b.n	800473e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004728:	f3af 8000 	nop.w
 800472c:	4601      	mov	r1, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	60ba      	str	r2, [r7, #8]
 8004734:	b2ca      	uxtb	r2, r1
 8004736:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3301      	adds	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	dbf0      	blt.n	8004728 <_read+0x12>
	}

return len;
 8004746:	687b      	ldr	r3, [r7, #4]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	return -1;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004776:	605a      	str	r2, [r3, #4]
	return 0;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <_isatty>:

int _isatty(int file)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	return 1;
 800478c:	2301      	movs	r3, #1
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
	return 0;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <_sbrk+0x5c>)
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <_sbrk+0x60>)
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <_sbrk+0x64>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <_sbrk+0x64>)
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <_sbrk+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <_sbrk+0x64>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d207      	bcs.n	80047f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047e0:	f004 fa9e 	bl	8008d20 <__errno>
 80047e4:	4603      	mov	r3, r0
 80047e6:	220c      	movs	r2, #12
 80047e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047ee:	e009      	b.n	8004804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <_sbrk+0x64>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <_sbrk+0x64>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <_sbrk+0x64>)
 8004800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20005000 	.word	0x20005000
 8004810:	00000400 	.word	0x00000400
 8004814:	20000520 	.word	0x20000520
 8004818:	20000538 	.word	0x20000538

0800481c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a86      	ldr	r2, [pc, #536]	; (8004a50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d147      	bne.n	80048ca <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 800483a:	4b86      	ldr	r3, [pc, #536]	; (8004a54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800483c:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	4a84      	ldr	r2, [pc, #528]	; (8004a58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004846:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8004848:	4b83      	ldr	r3, [pc, #524]	; (8004a58 <HAL_TIM_IC_CaptureCallback+0x230>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8004850:	4b81      	ldr	r3, [pc, #516]	; (8004a58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	b21a      	sxth	r2, r3
 8004856:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8004858:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 800485a:	4b80      	ldr	r3, [pc, #512]	; (8004a5c <HAL_TIM_IC_CaptureCallback+0x234>)
 800485c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 8004864:	4b7d      	ldr	r3, [pc, #500]	; (8004a5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8004866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da00      	bge.n	8004870 <HAL_TIM_IC_CaptureCallback+0x48>
 800486e:	3303      	adds	r3, #3
 8004870:	109b      	asrs	r3, r3, #2
 8004872:	b21a      	sxth	r2, r3
 8004874:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004876:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 8004878:	4b79      	ldr	r3, [pc, #484]	; (8004a60 <HAL_TIM_IC_CaptureCallback+0x238>)
 800487a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004888:	a36f      	add	r3, pc, #444	; (adr r3, 8004a48 <HAL_TIM_IC_CaptureCallback+0x220>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb fe23 	bl	80004d8 <__aeabi_dmul>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4614      	mov	r4, r2
 8004898:	461d      	mov	r5, r3
 800489a:	4b71      	ldr	r3, [pc, #452]	; (8004a60 <HAL_TIM_IC_CaptureCallback+0x238>)
 800489c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fdaf 	bl	8000404 <__aeabi_i2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4620      	mov	r0, r4
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7fb fe13 	bl	80004d8 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	496b      	ldr	r1, [pc, #428]	; (8004a64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80048b8:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 80048c8:	e17c      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a66      	ldr	r2, [pc, #408]	; (8004a68 <HAL_TIM_IC_CaptureCallback+0x240>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	f040 8177 	bne.w	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7f1b      	ldrb	r3, [r3, #28]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d102      	bne.n	80048e4 <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_TIM_IC_CaptureCallback+0x244>)
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7f1b      	ldrb	r3, [r3, #28]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 80048ec:	4b60      	ldr	r3, [pc, #384]	; (8004a70 <HAL_TIM_IC_CaptureCallback+0x248>)
 80048ee:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d171      	bne.n	80049de <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f003 fbcb 	bl	800809c <HAL_TIM_ReadCapturedValue>
 8004906:	4603      	mov	r3, r0
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fd6b 	bl	80003e4 <__aeabi_ui2d>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	69f9      	ldr	r1, [r7, #28]
 8004914:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <HAL_TIM_IC_CaptureCallback+0x112>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 020a 	bic.w	r2, r2, #10
 8004936:	621a      	str	r2, [r3, #32]
 8004938:	e021      	b.n	800497e <HAL_TIM_IC_CaptureCallback+0x156>
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d108      	bne.n	8004954 <HAL_TIM_IC_CaptureCallback+0x12c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004950:	6213      	str	r3, [r2, #32]
 8004952:	e014      	b.n	800497e <HAL_TIM_IC_CaptureCallback+0x156>
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d108      	bne.n	800496e <HAL_TIM_IC_CaptureCallback+0x146>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800496a:	6213      	str	r3, [r2, #32]
 800496c:	e007      	b.n	800497e <HAL_TIM_IC_CaptureCallback+0x156>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497c:	6213      	str	r3, [r2, #32]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <HAL_TIM_IC_CaptureCallback+0x170>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0202 	orr.w	r2, r2, #2
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	e115      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d108      	bne.n	80049b2 <HAL_TIM_IC_CaptureCallback+0x18a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	6213      	str	r3, [r2, #32]
 80049b0:	e108      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d108      	bne.n	80049cc <HAL_TIM_IC_CaptureCallback+0x1a4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c8:	6213      	str	r3, [r2, #32]
 80049ca:	e0fb      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049da:	6213      	str	r3, [r2, #32]
}
 80049dc:	e0f2      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f040 80ed 	bne.w	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f003 fb53 	bl	800809c <HAL_TIM_ReadCapturedValue>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fb fcf3 	bl	80003e4 <__aeabi_ui2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a1c:	f7fb ffec 	bl	80009f8 <__aeabi_dcmpgt>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d026      	beq.n	8004a74 <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a32:	f7fb fb99 	bl	8000168 <__aeabi_dsub>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	69f9      	ldr	r1, [r7, #28]
 8004a3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004a40:	e039      	b.n	8004ab6 <HAL_TIM_IC_CaptureCallback+0x28e>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	c083126f 	.word	0xc083126f
 8004a4c:	401921ca 	.word	0x401921ca
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	20000010 	.word	0x20000010
 8004a58:	200004e8 	.word	0x200004e8
 8004a5c:	200004ec 	.word	0x200004ec
 8004a60:	200004ee 	.word	0x200004ee
 8004a64:	20000500 	.word	0x20000500
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	20000040 	.word	0x20000040
 8004a70:	20000078 	.word	0x20000078
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a80:	f7fb ffba 	bl	80009f8 <__aeabi_dcmpgt>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d015      	beq.n	8004ab6 <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a90:	a14f      	add	r1, pc, #316	; (adr r1, 8004bd0 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8004a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a96:	f7fb fb67 	bl	8000168 <__aeabi_dsub>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004aa8:	f7fb fb60 	bl	800016c <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	69f9      	ldr	r1, [r7, #28]
 8004ab2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004abc:	a346      	add	r3, pc, #280	; (adr r3, 8004bd8 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f7fb fd09 	bl	80004d8 <__aeabi_dmul>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ad6:	f7fb fe29 	bl	800072c <__aeabi_ddiv>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004ae8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004aec:	f000 f898 	bl	8004c20 <filter>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_TIM_IC_CaptureCallback+0x2f4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 020a 	bic.w	r2, r2, #10
 8004b18:	621a      	str	r2, [r3, #32]
 8004b1a:	e021      	b.n	8004b60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d108      	bne.n	8004b36 <HAL_TIM_IC_CaptureCallback+0x30e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b32:	6213      	str	r3, [r2, #32]
 8004b34:	e014      	b.n	8004b60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d108      	bne.n	8004b50 <HAL_TIM_IC_CaptureCallback+0x328>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	6213      	str	r3, [r2, #32]
 8004b4e:	e007      	b.n	8004b60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b5e:	6213      	str	r3, [r2, #32]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_TIM_IC_CaptureCallback+0x34e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a12      	ldr	r2, [r2, #32]
 8004b72:	621a      	str	r2, [r3, #32]
 8004b74:	e01b      	b.n	8004bae <HAL_TIM_IC_CaptureCallback+0x386>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d106      	bne.n	8004b8c <HAL_TIM_IC_CaptureCallback+0x364>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	6213      	str	r3, [r2, #32]
 8004b8a:	e010      	b.n	8004bae <HAL_TIM_IC_CaptureCallback+0x386>
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d106      	bne.n	8004ba2 <HAL_TIM_IC_CaptureCallback+0x37a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	6213      	str	r3, [r2, #32]
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IC_CaptureCallback+0x386>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68d9      	ldr	r1, [r3, #12]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	43da      	mvns	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	60da      	str	r2, [r3, #12]
}
 8004bc2:	e7ff      	b.n	8004bc4 <HAL_TIM_IC_CaptureCallback+0x39c>
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	40efffe0 	.word	0x40efffe0
 8004bd8:	b020c49c 	.word	0xb020c49c
 8004bdc:	3fa16872 	.word	0x3fa16872

08004be0 <HCSR04_Read_Front>:
	0,
	0
};

void HCSR04_Read_Front (TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004be8:	2201      	movs	r2, #1
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <HCSR04_Read_Front+0x3c>)
 8004bee:	f000 fda1 	bl	8005734 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8004bf2:	200a      	movs	r0, #10
 8004bf4:	f7ff fa34 	bl	8004060 <delay_us>
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	; 0x40
 8004bfc:	4807      	ldr	r0, [pc, #28]	; (8004c1c <HCSR04_Read_Front+0x3c>)
 8004bfe:	f000 fd99 	bl	8005734 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0204 	orr.w	r2, r2, #4
 8004c10:	60da      	str	r2, [r3, #12]

}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40010800 	.word	0x40010800

08004c20 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c2a:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8004c2e:	a116      	add	r1, pc, #88	; (adr r1, 8004c88 <filter+0x68>)
 8004c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c38:	f7fb fc4e 	bl	80004d8 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	461d      	mov	r5, r3
 8004c44:	a310      	add	r3, pc, #64	; (adr r3, 8004c88 <filter+0x68>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	4910      	ldr	r1, [pc, #64]	; (8004c90 <filter+0x70>)
 8004c50:	f7fb fa8a 	bl	8000168 <__aeabi_dsub>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	f7fb fc3a 	bl	80004d8 <__aeabi_dmul>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f7fb fa7e 	bl	800016c <__adddf3>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8004c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bdb0      	pop	{r4, r5, r7, pc}
 8004c86:	bf00      	nop
 8004c88:	47ae147b 	.word	0x47ae147b
 8004c8c:	3f847ae1 	.word	0x3f847ae1
 8004c90:	3ff00000 	.word	0x3ff00000

08004c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004c94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c96:	e003      	b.n	8004ca0 <LoopCopyDataInit>

08004c98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c9e:	3104      	adds	r1, #4

08004ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004ca0:	480a      	ldr	r0, [pc, #40]	; (8004ccc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ca4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004ca6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004ca8:	d3f6      	bcc.n	8004c98 <CopyDataInit>
  ldr r2, =_sbss
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004cac:	e002      	b.n	8004cb4 <LoopFillZerobss>

08004cae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004cae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004cb0:	f842 3b04 	str.w	r3, [r2], #4

08004cb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004cb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004cb8:	d3f9      	bcc.n	8004cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cba:	f7ff fdaf 	bl	800481c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cbe:	f004 f835 	bl	8008d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004cc2:	f7fe fd89 	bl	80037d8 <main>
  bx lr
 8004cc6:	4770      	bx	lr
  ldr r3, =_sidata
 8004cc8:	0800c67c 	.word	0x0800c67c
  ldr r0, =_sdata
 8004ccc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004cd0:	20000288 	.word	0x20000288
  ldr r2, =_sbss
 8004cd4:	20000288 	.word	0x20000288
  ldr r3, = _ebss
 8004cd8:	20000538 	.word	0x20000538

08004cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cdc:	e7fe      	b.n	8004cdc <ADC1_2_IRQHandler>
	...

08004ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ce4:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_Init+0x28>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_Init+0x28>)
 8004cea:	f043 0310 	orr.w	r3, r3, #16
 8004cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf0:	2003      	movs	r0, #3
 8004cf2:	f000 fb59 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f000 f808 	bl	8004d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cfc:	f7ff f9ce 	bl	800409c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40022000 	.word	0x40022000

08004d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_InitTick+0x54>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_InitTick+0x58>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fb71 	bl	8005412 <HAL_SYSTICK_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00e      	b.n	8004d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d80a      	bhi.n	8004d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d40:	2200      	movs	r2, #0
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d48:	f000 fb39 	bl	80053be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d4c:	4a06      	ldr	r2, [pc, #24]	; (8004d68 <HAL_InitTick+0x5c>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000038 	.word	0x20000038
 8004d64:	200000b4 	.word	0x200000b4
 8004d68:	200000b0 	.word	0x200000b0

08004d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_IncTick+0x1c>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_IncTick+0x20>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <HAL_IncTick+0x20>)
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	200000b4 	.word	0x200000b4
 8004d8c:	20000524 	.word	0x20000524

08004d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return uwTick;
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <HAL_GetTick+0x10>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	20000524 	.word	0x20000524

08004da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_GetTick>
 8004db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dbc:	d005      	beq.n	8004dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <HAL_Delay+0x44>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dca:	bf00      	nop
 8004dcc:	f7ff ffe0 	bl	8004d90 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d8f7      	bhi.n	8004dcc <HAL_Delay+0x28>
  {
  }
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200000b4 	.word	0x200000b4

08004dec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0be      	b.n	8004f8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff f968 	bl	8004100 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9ab 	bl	800518c <ADC_ConversionStop_Disable>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 8099 	bne.w	8004f7a <HAL_ADC_Init+0x18e>
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 8095 	bne.w	8004f7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e58:	f023 0302 	bic.w	r3, r3, #2
 8004e5c:	f043 0202 	orr.w	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7b1b      	ldrb	r3, [r3, #12]
 8004e72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d003      	beq.n	8004e8e <HAL_ADC_Init+0xa2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d102      	bne.n	8004e94 <HAL_ADC_Init+0xa8>
 8004e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e92:	e000      	b.n	8004e96 <HAL_ADC_Init+0xaa>
 8004e94:	2300      	movs	r3, #0
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7d1b      	ldrb	r3, [r3, #20]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d119      	bne.n	8004ed8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7b1b      	ldrb	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	035a      	lsls	r2, r3, #13
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <HAL_ADC_Init+0x1a8>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f08:	d003      	beq.n	8004f12 <HAL_ADC_Init+0x126>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d104      	bne.n	8004f1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	051b      	lsls	r3, r3, #20
 8004f1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <HAL_ADC_Init+0x1ac>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d10b      	bne.n	8004f58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f56:	e018      	b.n	8004f8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	f023 0312 	bic.w	r3, r3, #18
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f78:	e007      	b.n	8004f8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f043 0210 	orr.w	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffe1f7fd 	.word	0xffe1f7fd
 8004f98:	ff1f0efe 	.word	0xff1f0efe

08004f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x20>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0dc      	b.n	8005176 <HAL_ADC_ConfigChannel+0x1da>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d81c      	bhi.n	8005006 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b05      	subs	r3, #5
 8004fde:	221f      	movs	r2, #31
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	4019      	ands	r1, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3b05      	subs	r3, #5
 8004ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	635a      	str	r2, [r3, #52]	; 0x34
 8005004:	e03c      	b.n	8005080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b0c      	cmp	r3, #12
 800500c:	d81c      	bhi.n	8005048 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	3b23      	subs	r3, #35	; 0x23
 8005020:	221f      	movs	r2, #31
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	4019      	ands	r1, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	3b23      	subs	r3, #35	; 0x23
 800503a:	fa00 f203 	lsl.w	r2, r0, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
 8005046:	e01b      	b.n	8005080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	3b41      	subs	r3, #65	; 0x41
 800505a:	221f      	movs	r2, #31
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	4019      	ands	r1, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	3b41      	subs	r3, #65	; 0x41
 8005074:	fa00 f203 	lsl.w	r2, r0, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b09      	cmp	r3, #9
 8005086:	d91c      	bls.n	80050c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68d9      	ldr	r1, [r3, #12]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	3b1e      	subs	r3, #30
 800509a:	2207      	movs	r2, #7
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	4019      	ands	r1, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6898      	ldr	r0, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	3b1e      	subs	r3, #30
 80050b4:	fa00 f203 	lsl.w	r2, r0, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e019      	b.n	80050f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6919      	ldr	r1, [r3, #16]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	2207      	movs	r2, #7
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	4019      	ands	r1, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6898      	ldr	r0, [r3, #8]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	fa00 f203 	lsl.w	r2, r0, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d003      	beq.n	8005106 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005102:	2b11      	cmp	r3, #17
 8005104:	d132      	bne.n	800516c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_ADC_ConfigChannel+0x1e4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d125      	bne.n	800515c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d126      	bne.n	800516c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800512c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b10      	cmp	r3, #16
 8005134:	d11a      	bne.n	800516c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <HAL_ADC_ConfigChannel+0x1e8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <HAL_ADC_ConfigChannel+0x1ec>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	0c9a      	lsrs	r2, r3, #18
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800514c:	e002      	b.n	8005154 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3b01      	subs	r3, #1
 8005152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f9      	bne.n	800514e <HAL_ADC_ConfigChannel+0x1b2>
 800515a:	e007      	b.n	800516c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40012400 	.word	0x40012400
 8005184:	20000038 	.word	0x20000038
 8005188:	431bde83 	.word	0x431bde83

0800518c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d12e      	bne.n	8005204 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051b6:	f7ff fdeb 	bl	8004d90 <HAL_GetTick>
 80051ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80051bc:	e01b      	b.n	80051f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051be:	f7ff fde7 	bl	8004d90 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d914      	bls.n	80051f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10d      	bne.n	80051f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f043 0210 	orr.w	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f043 0201 	orr.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e007      	b.n	8005206 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d0dc      	beq.n	80051be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <__NVIC_SetPriorityGrouping>:
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005242:	4a04      	ldr	r2, [pc, #16]	; (8005254 <__NVIC_SetPriorityGrouping+0x44>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	60d3      	str	r3, [r2, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <__NVIC_GetPriorityGrouping>:
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <__NVIC_GetPriorityGrouping+0x18>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0307 	and.w	r3, r3, #7
}
 8005266:	4618      	mov	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <__NVIC_EnableIRQ>:
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db0b      	blt.n	800529e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	4906      	ldr	r1, [pc, #24]	; (80052a8 <__NVIC_EnableIRQ+0x34>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2001      	movs	r0, #1
 8005296:	fa00 f202 	lsl.w	r2, r0, r2
 800529a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	e000e100 	.word	0xe000e100

080052ac <__NVIC_SetPriority>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db0a      	blt.n	80052d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	490c      	ldr	r1, [pc, #48]	; (80052f8 <__NVIC_SetPriority+0x4c>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	440b      	add	r3, r1
 80052d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052d4:	e00a      	b.n	80052ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <__NVIC_SetPriority+0x50>)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	3b04      	subs	r3, #4
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	761a      	strb	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <NVIC_EncodePriority>:
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0307 	rsb	r3, r3, #7
 800531a:	2b04      	cmp	r3, #4
 800531c:	bf28      	it	cs
 800531e:	2304      	movcs	r3, #4
 8005320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3304      	adds	r3, #4
 8005326:	2b06      	cmp	r3, #6
 8005328:	d902      	bls.n	8005330 <NVIC_EncodePriority+0x30>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3b03      	subs	r3, #3
 800532e:	e000      	b.n	8005332 <NVIC_EncodePriority+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	401a      	ands	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43d9      	mvns	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	4313      	orrs	r3, r2
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <SysTick_Config>:
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	d301      	bcc.n	800537a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005376:	2301      	movs	r3, #1
 8005378:	e00f      	b.n	800539a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <SysTick_Config+0x40>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005382:	210f      	movs	r1, #15
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005388:	f7ff ff90 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Config+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Config+0x40>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff2d 	bl	8005210 <__NVIC_SetPriorityGrouping>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff42 	bl	8005258 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff90 	bl	8005300 <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5f 	bl	80052ac <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	4603      	mov	r3, r0
 80053fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff35 	bl	8005274 <__NVIC_EnableIRQ>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffa2 	bl	8005364 <SysTick_Config>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	b480      	push	{r7}
 800542e:	b08b      	sub	sp, #44	; 0x2c
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800543a:	2300      	movs	r3, #0
 800543c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543e:	e169      	b.n	8005714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005440:	2201      	movs	r2, #1
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	4013      	ands	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	429a      	cmp	r2, r3
 800545a:	f040 8158 	bne.w	800570e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a9a      	ldr	r2, [pc, #616]	; (80056cc <HAL_GPIO_Init+0x2a0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d05e      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005468:	4a98      	ldr	r2, [pc, #608]	; (80056cc <HAL_GPIO_Init+0x2a0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d875      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800546e:	4a98      	ldr	r2, [pc, #608]	; (80056d0 <HAL_GPIO_Init+0x2a4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d058      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005474:	4a96      	ldr	r2, [pc, #600]	; (80056d0 <HAL_GPIO_Init+0x2a4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d86f      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800547a:	4a96      	ldr	r2, [pc, #600]	; (80056d4 <HAL_GPIO_Init+0x2a8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d052      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005480:	4a94      	ldr	r2, [pc, #592]	; (80056d4 <HAL_GPIO_Init+0x2a8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d869      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 8005486:	4a94      	ldr	r2, [pc, #592]	; (80056d8 <HAL_GPIO_Init+0x2ac>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04c      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 800548c:	4a92      	ldr	r2, [pc, #584]	; (80056d8 <HAL_GPIO_Init+0x2ac>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d863      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 8005492:	4a92      	ldr	r2, [pc, #584]	; (80056dc <HAL_GPIO_Init+0x2b0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d046      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
 8005498:	4a90      	ldr	r2, [pc, #576]	; (80056dc <HAL_GPIO_Init+0x2b0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d85d      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d82a      	bhi.n	80054f8 <HAL_GPIO_Init+0xcc>
 80054a2:	2b12      	cmp	r3, #18
 80054a4:	d859      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <HAL_GPIO_Init+0x80>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	08005527 	.word	0x08005527
 80054b0:	08005501 	.word	0x08005501
 80054b4:	08005513 	.word	0x08005513
 80054b8:	08005555 	.word	0x08005555
 80054bc:	0800555b 	.word	0x0800555b
 80054c0:	0800555b 	.word	0x0800555b
 80054c4:	0800555b 	.word	0x0800555b
 80054c8:	0800555b 	.word	0x0800555b
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800555b 	.word	0x0800555b
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	0800555b 	.word	0x0800555b
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	0800555b 	.word	0x0800555b
 80054e8:	0800555b 	.word	0x0800555b
 80054ec:	0800555b 	.word	0x0800555b
 80054f0:	08005509 	.word	0x08005509
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	4a79      	ldr	r2, [pc, #484]	; (80056e0 <HAL_GPIO_Init+0x2b4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054fe:	e02c      	b.n	800555a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	623b      	str	r3, [r7, #32]
          break;
 8005506:	e029      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	623b      	str	r3, [r7, #32]
          break;
 8005510:	e024      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	3308      	adds	r3, #8
 8005518:	623b      	str	r3, [r7, #32]
          break;
 800551a:	e01f      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	330c      	adds	r3, #12
 8005522:	623b      	str	r3, [r7, #32]
          break;
 8005524:	e01a      	b.n	800555c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800552e:	2304      	movs	r3, #4
 8005530:	623b      	str	r3, [r7, #32]
          break;
 8005532:	e013      	b.n	800555c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800553c:	2308      	movs	r3, #8
 800553e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	611a      	str	r2, [r3, #16]
          break;
 8005546:	e009      	b.n	800555c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005548:	2308      	movs	r3, #8
 800554a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	615a      	str	r2, [r3, #20]
          break;
 8005552:	e003      	b.n	800555c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
          break;
 8005558:	e000      	b.n	800555c <HAL_GPIO_Init+0x130>
          break;
 800555a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2bff      	cmp	r3, #255	; 0xff
 8005560:	d801      	bhi.n	8005566 <HAL_GPIO_Init+0x13a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	e001      	b.n	800556a <HAL_GPIO_Init+0x13e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2bff      	cmp	r3, #255	; 0xff
 8005570:	d802      	bhi.n	8005578 <HAL_GPIO_Init+0x14c>
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	e002      	b.n	800557e <HAL_GPIO_Init+0x152>
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	3b08      	subs	r3, #8
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	210f      	movs	r1, #15
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	431a      	orrs	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80b1 	beq.w	800570e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80055ac:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_GPIO_Init+0x2b8>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4a4c      	ldr	r2, [pc, #304]	; (80056e4 <HAL_GPIO_Init+0x2b8>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6193      	str	r3, [r2, #24]
 80055b8:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <HAL_GPIO_Init+0x2b8>)
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80055c4:	4a48      	ldr	r2, [pc, #288]	; (80056e8 <HAL_GPIO_Init+0x2bc>)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	089b      	lsrs	r3, r3, #2
 80055ca:	3302      	adds	r3, #2
 80055cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	220f      	movs	r2, #15
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a40      	ldr	r2, [pc, #256]	; (80056ec <HAL_GPIO_Init+0x2c0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <HAL_GPIO_Init+0x1ec>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00d      	beq.n	8005614 <HAL_GPIO_Init+0x1e8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <HAL_GPIO_Init+0x1e4>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3d      	ldr	r2, [pc, #244]	; (80056f8 <HAL_GPIO_Init+0x2cc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <HAL_GPIO_Init+0x1e0>
 8005608:	2303      	movs	r3, #3
 800560a:	e006      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 800560c:	2304      	movs	r3, #4
 800560e:	e004      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005610:	2302      	movs	r3, #2
 8005612:	e002      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005618:	2300      	movs	r3, #0
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	f002 0203 	and.w	r2, r2, #3
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	4093      	lsls	r3, r2
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800562a:	492f      	ldr	r1, [pc, #188]	; (80056e8 <HAL_GPIO_Init+0x2bc>)
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	089b      	lsrs	r3, r3, #2
 8005630:	3302      	adds	r3, #2
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d006      	beq.n	8005652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	492c      	ldr	r1, [pc, #176]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]
 8005650:	e006      	b.n	8005660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	43db      	mvns	r3, r3
 800565a:	4928      	ldr	r1, [pc, #160]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 800565c:	4013      	ands	r3, r2
 800565e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800566c:	4b23      	ldr	r3, [pc, #140]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	4922      	ldr	r1, [pc, #136]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
 8005678:	e006      	b.n	8005688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	43db      	mvns	r3, r3
 8005682:	491e      	ldr	r1, [pc, #120]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 8005684:	4013      	ands	r3, r2
 8005686:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4918      	ldr	r1, [pc, #96]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
 80056a0:	e006      	b.n	80056b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	4914      	ldr	r1, [pc, #80]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d021      	beq.n	8005700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	490e      	ldr	r1, [pc, #56]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60cb      	str	r3, [r1, #12]
 80056c8:	e021      	b.n	800570e <HAL_GPIO_Init+0x2e2>
 80056ca:	bf00      	nop
 80056cc:	10320000 	.word	0x10320000
 80056d0:	10310000 	.word	0x10310000
 80056d4:	10220000 	.word	0x10220000
 80056d8:	10210000 	.word	0x10210000
 80056dc:	10120000 	.word	0x10120000
 80056e0:	10110000 	.word	0x10110000
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010800 	.word	0x40010800
 80056f0:	40010c00 	.word	0x40010c00
 80056f4:	40011000 	.word	0x40011000
 80056f8:	40011400 	.word	0x40011400
 80056fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_GPIO_Init+0x304>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	43db      	mvns	r3, r3
 8005708:	4909      	ldr	r1, [pc, #36]	; (8005730 <HAL_GPIO_Init+0x304>)
 800570a:	4013      	ands	r3, r2
 800570c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	3301      	adds	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	fa22 f303 	lsr.w	r3, r2, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	f47f ae8e 	bne.w	8005440 <HAL_GPIO_Init+0x14>
  }
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	372c      	adds	r7, #44	; 0x2c
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	40010400 	.word	0x40010400

08005734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
 8005740:	4613      	mov	r3, r2
 8005742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005744:	787b      	ldrb	r3, [r7, #1]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005750:	e003      	b.n	800575a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	041a      	lsls	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005776:	887a      	ldrh	r2, [r7, #2]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4013      	ands	r3, r2
 800577c:	041a      	lsls	r2, r3, #16
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	43d9      	mvns	r1, r3
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	400b      	ands	r3, r1
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr
	...

08005798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e12b      	b.n	8005a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fe fcda 	bl	8004178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	; 0x24
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057fc:	f001 fb6e 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8005800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a81      	ldr	r2, [pc, #516]	; (8005a0c <HAL_I2C_Init+0x274>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d807      	bhi.n	800581c <HAL_I2C_Init+0x84>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a80      	ldr	r2, [pc, #512]	; (8005a10 <HAL_I2C_Init+0x278>)
 8005810:	4293      	cmp	r3, r2
 8005812:	bf94      	ite	ls
 8005814:	2301      	movls	r3, #1
 8005816:	2300      	movhi	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e006      	b.n	800582a <HAL_I2C_Init+0x92>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a7d      	ldr	r2, [pc, #500]	; (8005a14 <HAL_I2C_Init+0x27c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	bf94      	ite	ls
 8005824:	2301      	movls	r3, #1
 8005826:	2300      	movhi	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0e7      	b.n	8005a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a78      	ldr	r2, [pc, #480]	; (8005a18 <HAL_I2C_Init+0x280>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	0c9b      	lsrs	r3, r3, #18
 800583c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <HAL_I2C_Init+0x274>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d802      	bhi.n	800586c <HAL_I2C_Init+0xd4>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3301      	adds	r3, #1
 800586a:	e009      	b.n	8005880 <HAL_I2C_Init+0xe8>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	4a69      	ldr	r2, [pc, #420]	; (8005a1c <HAL_I2C_Init+0x284>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	3301      	adds	r3, #1
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	430b      	orrs	r3, r1
 8005886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005892:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	495c      	ldr	r1, [pc, #368]	; (8005a0c <HAL_I2C_Init+0x274>)
 800589c:	428b      	cmp	r3, r1
 800589e:	d819      	bhi.n	80058d4 <HAL_I2C_Init+0x13c>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	1e59      	subs	r1, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ae:	1c59      	adds	r1, r3, #1
 80058b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058b4:	400b      	ands	r3, r1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_I2C_Init+0x138>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1e59      	subs	r1, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058c8:	3301      	adds	r3, #1
 80058ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ce:	e051      	b.n	8005974 <HAL_I2C_Init+0x1dc>
 80058d0:	2304      	movs	r3, #4
 80058d2:	e04f      	b.n	8005974 <HAL_I2C_Init+0x1dc>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d111      	bne.n	8005900 <HAL_I2C_Init+0x168>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1e58      	subs	r0, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	440b      	add	r3, r1
 80058ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ee:	3301      	adds	r3, #1
 80058f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf0c      	ite	eq
 80058f8:	2301      	moveq	r3, #1
 80058fa:	2300      	movne	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e012      	b.n	8005926 <HAL_I2C_Init+0x18e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1e58      	subs	r0, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	0099      	lsls	r1, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	fbb0 f3f3 	udiv	r3, r0, r3
 8005916:	3301      	adds	r3, #1
 8005918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Init+0x196>
 800592a:	2301      	movs	r3, #1
 800592c:	e022      	b.n	8005974 <HAL_I2C_Init+0x1dc>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10e      	bne.n	8005954 <HAL_I2C_Init+0x1bc>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1e58      	subs	r0, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	440b      	add	r3, r1
 8005944:	fbb0 f3f3 	udiv	r3, r0, r3
 8005948:	3301      	adds	r3, #1
 800594a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005952:	e00f      	b.n	8005974 <HAL_I2C_Init+0x1dc>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1e58      	subs	r0, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	0099      	lsls	r1, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	fbb0 f3f3 	udiv	r3, r0, r3
 800596a:	3301      	adds	r3, #1
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	6809      	ldr	r1, [r1, #0]
 8005978:	4313      	orrs	r3, r2
 800597a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6911      	ldr	r1, [r2, #16]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68d2      	ldr	r2, [r2, #12]
 80059ae:	4311      	orrs	r1, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	000186a0 	.word	0x000186a0
 8005a10:	001e847f 	.word	0x001e847f
 8005a14:	003d08ff 	.word	0x003d08ff
 8005a18:	431bde83 	.word	0x431bde83
 8005a1c:	10624dd3 	.word	0x10624dd3

08005a20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	817b      	strh	r3, [r7, #10]
 8005a30:	4613      	mov	r3, r2
 8005a32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a34:	f7ff f9ac 	bl	8004d90 <HAL_GetTick>
 8005a38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	f040 80e0 	bne.w	8005c08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2319      	movs	r3, #25
 8005a4e:	2201      	movs	r2, #1
 8005a50:	4970      	ldr	r1, [pc, #448]	; (8005c14 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fc92 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0d3      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_I2C_Master_Transmit+0x50>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e0cc      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d007      	beq.n	8005a96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2221      	movs	r2, #33	; 0x21
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	893a      	ldrh	r2, [r7, #8]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a50      	ldr	r2, [pc, #320]	; (8005c18 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ad8:	8979      	ldrh	r1, [r7, #10]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fafc 	bl	80060dc <I2C_MasterRequestWrite>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e08d      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b04:	e066      	b.n	8005bd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fd0c 	bl	8006528 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d107      	bne.n	8005b2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e06b      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	781a      	ldrb	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_I2C_Master_Transmit+0x188>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	6a39      	ldr	r1, [r7, #32]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fcfc 	bl	80065aa <I2C_WaitOnBTFFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e01a      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d194      	bne.n	8005b06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	00100002 	.word	0x00100002
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	461a      	mov	r2, r3
 8005c28:	460b      	mov	r3, r1
 8005c2a:	817b      	strh	r3, [r7, #10]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c34:	f7ff f8ac 	bl	8004d90 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	f040 823f 	bne.w	80060c6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2319      	movs	r3, #25
 8005c4e:	2201      	movs	r2, #1
 8005c50:	497f      	ldr	r1, [pc, #508]	; (8005e50 <HAL_I2C_Master_Receive+0x234>)
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fb92 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e232      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_I2C_Master_Receive+0x54>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e22b      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d007      	beq.n	8005c96 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2222      	movs	r2, #34	; 0x22
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	893a      	ldrh	r2, [r7, #8]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a5f      	ldr	r2, [pc, #380]	; (8005e54 <HAL_I2C_Master_Receive+0x238>)
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cd8:	8979      	ldrh	r1, [r7, #10]
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa7e 	bl	80061e0 <I2C_MasterRequestRead>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e1ec      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d113      	bne.n	8005d1e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e1c0      	b.n	80060a0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d11e      	bne.n	8005d64 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d36:	b672      	cpsid	i
}
 8005d38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d60:	b662      	cpsie	i
}
 8005d62:	e035      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d11e      	bne.n	8005daa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d7c:	b672      	cpsid	i
}
 8005d7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005da6:	b662      	cpsie	i
}
 8005da8:	e012      	b.n	8005dd0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005dd0:	e166      	b.n	80060a0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	f200 811f 	bhi.w	800601a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d123      	bne.n	8005e2c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fc1f 	bl	800662c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e167      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e2a:	e139      	b.n	80060a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d152      	bne.n	8005eda <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4906      	ldr	r1, [pc, #24]	; (8005e58 <HAL_I2C_Master_Receive+0x23c>)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fa9c 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e13c      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
 8005e4e:	bf00      	nop
 8005e50:	00100002 	.word	0x00100002
 8005e54:	ffff0000 	.word	0xffff0000
 8005e58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005e5c:	b672      	cpsid	i
}
 8005e5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ea2:	b662      	cpsie	i
}
 8005ea4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ed8:	e0e2      	b.n	80060a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	497b      	ldr	r1, [pc, #492]	; (80060d0 <HAL_I2C_Master_Receive+0x4b4>)
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fa49 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0e9      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f04:	b672      	cpsid	i
}
 8005f06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f3a:	4b66      	ldr	r3, [pc, #408]	; (80060d4 <HAL_I2C_Master_Receive+0x4b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	08db      	lsrs	r3, r3, #3
 8005f40:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <HAL_I2C_Master_Receive+0x4bc>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	0a1a      	lsrs	r2, r3, #8
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	00da      	lsls	r2, r3, #3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d118      	bne.n	8005f92 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f82:	b662      	cpsie	i
}
 8005f84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e09a      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d1d9      	bne.n	8005f54 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005fe2:	b662      	cpsie	i
}
 8005fe4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006018:	e042      	b.n	80060a0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fb04 	bl	800662c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e04c      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b04      	cmp	r3, #4
 800606c:	d118      	bne.n	80060a0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f47f ae94 	bne.w	8005dd2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	; 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	00010004 	.word	0x00010004
 80060d4:	20000038 	.word	0x20000038
 80060d8:	14f8b589 	.word	0x14f8b589

080060dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	460b      	mov	r3, r1
 80060ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d006      	beq.n	8006106 <I2C_MasterRequestWrite+0x2a>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d003      	beq.n	8006106 <I2C_MasterRequestWrite+0x2a>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006104:	d108      	bne.n	8006118 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e00b      	b.n	8006130 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b12      	cmp	r3, #18
 800611e:	d107      	bne.n	8006130 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f91d 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d103      	bne.n	8006160 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e035      	b.n	80061d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d108      	bne.n	8006180 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800616e:	897b      	ldrh	r3, [r7, #10]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800617c:	611a      	str	r2, [r3, #16]
 800617e:	e01b      	b.n	80061b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006180:	897b      	ldrh	r3, [r7, #10]
 8006182:	11db      	asrs	r3, r3, #7
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0306 	and.w	r3, r3, #6
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f063 030f 	orn	r3, r3, #15
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	490e      	ldr	r1, [pc, #56]	; (80061d8 <I2C_MasterRequestWrite+0xfc>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f943 	bl	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e010      	b.n	80061d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061ae:	897b      	ldrh	r3, [r7, #10]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4907      	ldr	r1, [pc, #28]	; (80061dc <I2C_MasterRequestWrite+0x100>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f933 	bl	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	00010008 	.word	0x00010008
 80061dc:	00010002 	.word	0x00010002

080061e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	460b      	mov	r3, r1
 80061ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006204:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d006      	beq.n	800621a <I2C_MasterRequestRead+0x3a>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d003      	beq.n	800621a <I2C_MasterRequestRead+0x3a>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006218:	d108      	bne.n	800622c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e00b      	b.n	8006244 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	2b11      	cmp	r3, #17
 8006232:	d107      	bne.n	8006244 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f893 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00d      	beq.n	8006278 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626a:	d103      	bne.n	8006274 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e079      	b.n	800636c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006280:	d108      	bne.n	8006294 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006282:	897b      	ldrh	r3, [r7, #10]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e05f      	b.n	8006354 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006294:	897b      	ldrh	r3, [r7, #10]
 8006296:	11db      	asrs	r3, r3, #7
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 0306 	and.w	r3, r3, #6
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f063 030f 	orn	r3, r3, #15
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4930      	ldr	r1, [pc, #192]	; (8006374 <I2C_MasterRequestRead+0x194>)
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f8b9 	bl	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e054      	b.n	800636c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062c2:	897b      	ldrh	r3, [r7, #10]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4929      	ldr	r1, [pc, #164]	; (8006378 <I2C_MasterRequestRead+0x198>)
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f8a9 	bl	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e044      	b.n	800636c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006306:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f831 	bl	800637c <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d103      	bne.n	8006338 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e017      	b.n	800636c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800633c:	897b      	ldrh	r3, [r7, #10]
 800633e:	11db      	asrs	r3, r3, #7
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0306 	and.w	r3, r3, #6
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f063 030e 	orn	r3, r3, #14
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4907      	ldr	r1, [pc, #28]	; (8006378 <I2C_MasterRequestRead+0x198>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f865 	bl	800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	00010008 	.word	0x00010008
 8006378:	00010002 	.word	0x00010002

0800637c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800638c:	e025      	b.n	80063da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006394:	d021      	beq.n	80063da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fe fcfb 	bl	8004d90 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d116      	bne.n	80063da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e023      	b.n	8006422 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10d      	bne.n	8006400 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	e00c      	b.n	800641a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	43da      	mvns	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	429a      	cmp	r2, r3
 800641e:	d0b6      	beq.n	800638e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006438:	e051      	b.n	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d123      	bne.n	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006458:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006462:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0204 	orr.w	r2, r3, #4
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e046      	b.n	8006520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006498:	d021      	beq.n	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649a:	f7fe fc79 	bl	8004d90 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d302      	bcc.n	80064b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d116      	bne.n	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f043 0220 	orr.w	r2, r3, #32
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e020      	b.n	8006520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10c      	bne.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	43da      	mvns	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4013      	ands	r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	e00b      	b.n	800651a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	43da      	mvns	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d18d      	bne.n	800643a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006534:	e02d      	b.n	8006592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f8ce 	bl	80066d8 <I2C_IsAcknowledgeFailed>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e02d      	b.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800654c:	d021      	beq.n	8006592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654e:	f7fe fc1f 	bl	8004d90 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	d302      	bcc.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e007      	b.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b80      	cmp	r3, #128	; 0x80
 800659e:	d1ca      	bne.n	8006536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065b6:	e02d      	b.n	8006614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f88d 	bl	80066d8 <I2C_IsAcknowledgeFailed>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e02d      	b.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ce:	d021      	beq.n	8006614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d0:	f7fe fbde 	bl	8004d90 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d116      	bne.n	8006614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e007      	b.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b04      	cmp	r3, #4
 8006620:	d1ca      	bne.n	80065b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006638:	e042      	b.n	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b10      	cmp	r3, #16
 8006646:	d119      	bne.n	800667c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0210 	mvn.w	r2, #16
 8006650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e029      	b.n	80066d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667c:	f7fe fb88 	bl	8004d90 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d116      	bne.n	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e007      	b.n	80066d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d1b5      	bne.n	800663a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ee:	d11b      	bne.n	8006728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	f043 0204 	orr.w	r2, r3, #4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e272      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8087 	beq.w	8006862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006754:	4b92      	ldr	r3, [pc, #584]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 030c 	and.w	r3, r3, #12
 800675c:	2b04      	cmp	r3, #4
 800675e:	d00c      	beq.n	800677a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006760:	4b8f      	ldr	r3, [pc, #572]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b08      	cmp	r3, #8
 800676a:	d112      	bne.n	8006792 <HAL_RCC_OscConfig+0x5e>
 800676c:	4b8c      	ldr	r3, [pc, #560]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d10b      	bne.n	8006792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677a:	4b89      	ldr	r3, [pc, #548]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d06c      	beq.n	8006860 <HAL_RCC_OscConfig+0x12c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d168      	bne.n	8006860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e24c      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679a:	d106      	bne.n	80067aa <HAL_RCC_OscConfig+0x76>
 800679c:	4b80      	ldr	r3, [pc, #512]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7f      	ldr	r2, [pc, #508]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e02e      	b.n	8006808 <HAL_RCC_OscConfig+0xd4>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10c      	bne.n	80067cc <HAL_RCC_OscConfig+0x98>
 80067b2:	4b7b      	ldr	r3, [pc, #492]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a7a      	ldr	r2, [pc, #488]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4b78      	ldr	r3, [pc, #480]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a77      	ldr	r2, [pc, #476]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e01d      	b.n	8006808 <HAL_RCC_OscConfig+0xd4>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCC_OscConfig+0xbc>
 80067d6:	4b72      	ldr	r3, [pc, #456]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a71      	ldr	r2, [pc, #452]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b6f      	ldr	r3, [pc, #444]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6e      	ldr	r2, [pc, #440]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e00b      	b.n	8006808 <HAL_RCC_OscConfig+0xd4>
 80067f0:	4b6b      	ldr	r3, [pc, #428]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6a      	ldr	r2, [pc, #424]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	4b68      	ldr	r3, [pc, #416]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a67      	ldr	r2, [pc, #412]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006810:	f7fe fabe 	bl	8004d90 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006818:	f7fe faba 	bl	8004d90 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b64      	cmp	r3, #100	; 0x64
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e200      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682a:	4b5d      	ldr	r3, [pc, #372]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCC_OscConfig+0xe4>
 8006836:	e014      	b.n	8006862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe faaa 	bl	8004d90 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006840:	f7fe faa6 	bl	8004d90 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e1ec      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006852:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x10c>
 800685e:	e000      	b.n	8006862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d063      	beq.n	8006936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800686e:	4b4c      	ldr	r3, [pc, #304]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800687a:	4b49      	ldr	r3, [pc, #292]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	2b08      	cmp	r3, #8
 8006884:	d11c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x18c>
 8006886:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d116      	bne.n	80068c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006892:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_RCC_OscConfig+0x176>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e1c0      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068aa:	4b3d      	ldr	r3, [pc, #244]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4939      	ldr	r1, [pc, #228]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068be:	e03a      	b.n	8006936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c8:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <HAL_RCC_OscConfig+0x270>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ce:	f7fe fa5f 	bl	8004d90 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d6:	f7fe fa5b 	bl	8004d90 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e1a1      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e8:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4927      	ldr	r1, [pc, #156]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	e015      	b.n	8006936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800690a:	4b26      	ldr	r3, [pc, #152]	; (80069a4 <HAL_RCC_OscConfig+0x270>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006910:	f7fe fa3e 	bl	8004d90 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006918:	f7fe fa3a 	bl	8004d90 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e180      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d03a      	beq.n	80069b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d019      	beq.n	800697e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800694a:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <HAL_RCC_OscConfig+0x274>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006950:	f7fe fa1e 	bl	8004d90 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006958:	f7fe fa1a 	bl	8004d90 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e160      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <HAL_RCC_OscConfig+0x26c>)
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006976:	2001      	movs	r0, #1
 8006978:	f000 fad8 	bl	8006f2c <RCC_Delay>
 800697c:	e01c      	b.n	80069b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <HAL_RCC_OscConfig+0x274>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006984:	f7fe fa04 	bl	8004d90 <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800698a:	e00f      	b.n	80069ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698c:	f7fe fa00 	bl	8004d90 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d908      	bls.n	80069ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e146      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
 800699e:	bf00      	nop
 80069a0:	40021000 	.word	0x40021000
 80069a4:	42420000 	.word	0x42420000
 80069a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ac:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e9      	bne.n	800698c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80a6 	beq.w	8006b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ca:	4b8b      	ldr	r3, [pc, #556]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10d      	bne.n	80069f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d6:	4b88      	ldr	r3, [pc, #544]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	4a87      	ldr	r2, [pc, #540]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e0:	61d3      	str	r3, [r2, #28]
 80069e2:	4b85      	ldr	r3, [pc, #532]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f2:	4b82      	ldr	r3, [pc, #520]	; (8006bfc <HAL_RCC_OscConfig+0x4c8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d118      	bne.n	8006a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069fe:	4b7f      	ldr	r3, [pc, #508]	; (8006bfc <HAL_RCC_OscConfig+0x4c8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a7e      	ldr	r2, [pc, #504]	; (8006bfc <HAL_RCC_OscConfig+0x4c8>)
 8006a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0a:	f7fe f9c1 	bl	8004d90 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a12:	f7fe f9bd 	bl	8004d90 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b64      	cmp	r3, #100	; 0x64
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e103      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a24:	4b75      	ldr	r3, [pc, #468]	; (8006bfc <HAL_RCC_OscConfig+0x4c8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d106      	bne.n	8006a46 <HAL_RCC_OscConfig+0x312>
 8006a38:	4b6f      	ldr	r3, [pc, #444]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	4a6e      	ldr	r2, [pc, #440]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	6213      	str	r3, [r2, #32]
 8006a44:	e02d      	b.n	8006aa2 <HAL_RCC_OscConfig+0x36e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x334>
 8006a4e:	4b6a      	ldr	r3, [pc, #424]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	4a69      	ldr	r2, [pc, #420]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	6213      	str	r3, [r2, #32]
 8006a5a:	4b67      	ldr	r3, [pc, #412]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	4a66      	ldr	r2, [pc, #408]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	f023 0304 	bic.w	r3, r3, #4
 8006a64:	6213      	str	r3, [r2, #32]
 8006a66:	e01c      	b.n	8006aa2 <HAL_RCC_OscConfig+0x36e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d10c      	bne.n	8006a8a <HAL_RCC_OscConfig+0x356>
 8006a70:	4b61      	ldr	r3, [pc, #388]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	4a60      	ldr	r2, [pc, #384]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a76:	f043 0304 	orr.w	r3, r3, #4
 8006a7a:	6213      	str	r3, [r2, #32]
 8006a7c:	4b5e      	ldr	r3, [pc, #376]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	4a5d      	ldr	r2, [pc, #372]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6213      	str	r3, [r2, #32]
 8006a88:	e00b      	b.n	8006aa2 <HAL_RCC_OscConfig+0x36e>
 8006a8a:	4b5b      	ldr	r3, [pc, #364]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	4a5a      	ldr	r2, [pc, #360]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	6213      	str	r3, [r2, #32]
 8006a96:	4b58      	ldr	r3, [pc, #352]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	4a57      	ldr	r2, [pc, #348]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	f023 0304 	bic.w	r3, r3, #4
 8006aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d015      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aaa:	f7fe f971 	bl	8004d90 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fe f96d 	bl	8004d90 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e0b1      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac8:	4b4b      	ldr	r3, [pc, #300]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0ee      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x37e>
 8006ad4:	e014      	b.n	8006b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad6:	f7fe f95b 	bl	8004d90 <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006adc:	e00a      	b.n	8006af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ade:	f7fe f957 	bl	8004d90 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e09b      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af4:	4b40      	ldr	r3, [pc, #256]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ee      	bne.n	8006ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b06:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4a3b      	ldr	r2, [pc, #236]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8087 	beq.w	8006c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b1c:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 030c 	and.w	r3, r3, #12
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d061      	beq.n	8006bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d146      	bne.n	8006bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b30:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fe f92b 	bl	8004d90 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fe f927 	bl	8004d90 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e06d      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b50:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d108      	bne.n	8006b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b66:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4921      	ldr	r1, [pc, #132]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b78:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a19      	ldr	r1, [r3, #32]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	491b      	ldr	r1, [pc, #108]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b90:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fe f8fb 	bl	8004d90 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b9e:	f7fe f8f7 	bl	8004d90 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e03d      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x46a>
 8006bbc:	e035      	b.n	8006c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbe:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <HAL_RCC_OscConfig+0x4cc>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc4:	f7fe f8e4 	bl	8004d90 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bcc:	f7fe f8e0 	bl	8004d90 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e026      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCC_OscConfig+0x4c4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0x498>
 8006bea:	e01e      	b.n	8006c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e019      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40007000 	.word	0x40007000
 8006c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_OscConfig+0x500>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d106      	bne.n	8006c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d001      	beq.n	8006c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40021000 	.word	0x40021000

08006c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0d0      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c4c:	4b6a      	ldr	r3, [pc, #424]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d910      	bls.n	8006c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5a:	4b67      	ldr	r3, [pc, #412]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 0207 	bic.w	r2, r3, #7
 8006c62:	4965      	ldr	r1, [pc, #404]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b63      	ldr	r3, [pc, #396]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d001      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0b8      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d020      	beq.n	8006cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c94:	4b59      	ldr	r3, [pc, #356]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a58      	ldr	r2, [pc, #352]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cac:	4b53      	ldr	r3, [pc, #332]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a52      	ldr	r2, [pc, #328]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006cb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb8:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	494d      	ldr	r1, [pc, #308]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d040      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d107      	bne.n	8006cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cde:	4b47      	ldr	r3, [pc, #284]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d115      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e07f      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d107      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf6:	4b41      	ldr	r3, [pc, #260]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e073      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d06:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e06b      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d16:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f023 0203 	bic.w	r2, r3, #3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	4936      	ldr	r1, [pc, #216]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d28:	f7fe f832 	bl	8004d90 <HAL_GetTick>
 8006d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d2e:	e00a      	b.n	8006d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d30:	f7fe f82e 	bl	8004d90 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e053      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d46:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f003 020c 	and.w	r2, r3, #12
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d1eb      	bne.n	8006d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d58:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d210      	bcs.n	8006d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 0207 	bic.w	r2, r3, #7
 8006d6e:	4922      	ldr	r1, [pc, #136]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b20      	ldr	r3, [pc, #128]	; (8006df8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e032      	b.n	8006dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4916      	ldr	r1, [pc, #88]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	490e      	ldr	r1, [pc, #56]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dc6:	f000 f821 	bl	8006e0c <HAL_RCC_GetSysClockFreq>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCC_ClockConfig+0x1c4>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	091b      	lsrs	r3, r3, #4
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	490a      	ldr	r1, [pc, #40]	; (8006e00 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd8:	5ccb      	ldrb	r3, [r1, r3]
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <HAL_RCC_ClockConfig+0x1cc>)
 8006de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <HAL_RCC_ClockConfig+0x1d0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fd ff90 	bl	8004d0c <HAL_InitTick>

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40022000 	.word	0x40022000
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	0800c248 	.word	0x0800c248
 8006e04:	20000038 	.word	0x20000038
 8006e08:	200000b0 	.word	0x200000b0

08006e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e0c:	b490      	push	{r4, r7}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e12:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0xac>)
 8006e14:	1d3c      	adds	r4, r7, #4
 8006e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e1c:	f240 2301 	movw	r3, #513	; 0x201
 8006e20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e36:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d002      	beq.n	8006e4c <HAL_RCC_GetSysClockFreq+0x40>
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d003      	beq.n	8006e52 <HAL_RCC_GetSysClockFreq+0x46>
 8006e4a:	e02b      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e4c:	4b1c      	ldr	r3, [pc, #112]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e4e:	623b      	str	r3, [r7, #32]
      break;
 8006e50:	e02b      	b.n	8006eaa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	0c9b      	lsrs	r3, r3, #18
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	3328      	adds	r3, #40	; 0x28
 8006e5c:	443b      	add	r3, r7
 8006e5e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e62:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	0c5b      	lsrs	r3, r3, #17
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	3328      	adds	r3, #40	; 0x28
 8006e7a:	443b      	add	r3, r7
 8006e7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006e80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	4a0e      	ldr	r2, [pc, #56]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e86:	fb03 f202 	mul.w	r2, r3, r2
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
 8006e92:	e004      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	623b      	str	r3, [r7, #32]
      break;
 8006ea2:	e002      	b.n	8006eaa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ea6:	623b      	str	r3, [r7, #32]
      break;
 8006ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3728      	adds	r7, #40	; 0x28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc90      	pop	{r4, r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	0800c238 	.word	0x0800c238
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	007a1200 	.word	0x007a1200
 8006ec4:	003d0900 	.word	0x003d0900

08006ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ece:	681b      	ldr	r3, [r3, #0]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr
 8006ed8:	20000038 	.word	0x20000038

08006edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ee0:	f7ff fff2 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	4903      	ldr	r1, [pc, #12]	; (8006f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000
 8006f00:	0800c258 	.word	0x0800c258

08006f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f08:	f7ff ffde 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	0adb      	lsrs	r3, r3, #11
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	; (8006f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40021000 	.word	0x40021000
 8006f28:	0800c258 	.word	0x0800c258

08006f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <RCC_Delay+0x34>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <RCC_Delay+0x38>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	0a5b      	lsrs	r3, r3, #9
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f48:	bf00      	nop
  }
  while (Delay --);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1e5a      	subs	r2, r3, #1
 8006f4e:	60fa      	str	r2, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f9      	bne.n	8006f48 <RCC_Delay+0x1c>
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr
 8006f60:	20000038 	.word	0x20000038
 8006f64:	10624dd3 	.word	0x10624dd3

08006f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d07d      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f88:	4b4f      	ldr	r3, [pc, #316]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f94:	4b4c      	ldr	r3, [pc, #304]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	61d3      	str	r3, [r2, #28]
 8006fa0:	4b49      	ldr	r3, [pc, #292]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fac:	2301      	movs	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb0:	4b46      	ldr	r3, [pc, #280]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d118      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fbc:	4b43      	ldr	r3, [pc, #268]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a42      	ldr	r2, [pc, #264]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc8:	f7fd fee2 	bl	8004d90 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	e008      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd0:	f7fd fede 	bl	8004d90 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b64      	cmp	r3, #100	; 0x64
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e06d      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe2:	4b3a      	ldr	r3, [pc, #232]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fee:	4b36      	ldr	r3, [pc, #216]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02e      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	429a      	cmp	r2, r3
 800700a:	d027      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800700c:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007014:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007016:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007018:	2201      	movs	r2, #1
 800701a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800701c:	4b2c      	ldr	r3, [pc, #176]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007022:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d014      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007032:	f7fd fead 	bl	8004d90 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007038:	e00a      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703a:	f7fd fea9 	bl	8004d90 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	f241 3288 	movw	r2, #5000	; 0x1388
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e036      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0ee      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800705c:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4917      	ldr	r1, [pc, #92]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706a:	4313      	orrs	r3, r2
 800706c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d105      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007074:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800707e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800708c:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	490b      	ldr	r1, [pc, #44]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	4904      	ldr	r1, [pc, #16]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40021000 	.word	0x40021000
 80070cc:	40007000 	.word	0x40007000
 80070d0:	42420440 	.word	0x42420440

080070d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e076      	b.n	80071d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d108      	bne.n	8007100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d009      	beq.n	800710c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	61da      	str	r2, [r3, #28]
 80070fe:	e005      	b.n	800710c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fd f866 	bl	80041f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007190:	ea42 0103 	orr.w	r1, r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	0c1a      	lsrs	r2, r3, #16
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f002 0204 	and.w	r2, r2, #4
 80071b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e041      	b.n	8007272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fd f8a4 	bl	8004350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f000 ffa6 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d001      	beq.n	8007294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e032      	b.n	80072fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a18      	ldr	r2, [pc, #96]	; (8007304 <HAL_TIM_Base_Start+0x88>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_TIM_Base_Start+0x48>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ae:	d009      	beq.n	80072c4 <HAL_TIM_Base_Start+0x48>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a14      	ldr	r2, [pc, #80]	; (8007308 <HAL_TIM_Base_Start+0x8c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_Base_Start+0x48>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a13      	ldr	r2, [pc, #76]	; (800730c <HAL_TIM_Base_Start+0x90>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d111      	bne.n	80072e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d010      	beq.n	80072f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0201 	orr.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e6:	e007      	b.n	80072f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800

08007310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e041      	b.n	80073a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f839 	bl	80073ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f000 ff0c 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_TIM_PWM_Start+0x24>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e022      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d109      	bne.n	80073fe <HAL_TIM_PWM_Start+0x3e>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	bf14      	ite	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	2300      	moveq	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	e015      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b08      	cmp	r3, #8
 8007402:	d109      	bne.n	8007418 <HAL_TIM_PWM_Start+0x58>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	e008      	b.n	800742a <HAL_TIM_PWM_Start+0x6a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e05e      	b.n	80074f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_TIM_PWM_Start+0x82>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007440:	e013      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d104      	bne.n	8007452 <HAL_TIM_PWM_Start+0x92>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007450:	e00b      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d104      	bne.n	8007462 <HAL_TIM_PWM_Start+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007460:	e003      	b.n	800746a <HAL_TIM_PWM_Start+0xaa>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f001 fa07 	bl	8008886 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1e      	ldr	r2, [pc, #120]	; (80074f8 <HAL_TIM_PWM_Start+0x138>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d107      	bne.n	8007492 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_TIM_PWM_Start+0x138>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_TIM_PWM_Start+0xfa>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a4:	d009      	beq.n	80074ba <HAL_TIM_PWM_Start+0xfa>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a14      	ldr	r2, [pc, #80]	; (80074fc <HAL_TIM_PWM_Start+0x13c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_TIM_PWM_Start+0xfa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a12      	ldr	r2, [pc, #72]	; (8007500 <HAL_TIM_PWM_Start+0x140>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d111      	bne.n	80074de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	d010      	beq.n	80074ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074dc:	e007      	b.n	80074ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0201 	orr.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800

08007504 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e041      	b.n	800759a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f839 	bl	80075a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f000 fe12 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_IC_Start_IT+0x1a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	e013      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x42>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d104      	bne.n	80075de <HAL_TIM_IC_Start_IT+0x2a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	e00b      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x42>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_IC_Start_IT+0x3a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e003      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x42>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <HAL_TIM_IC_Start_IT+0x54>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e013      	b.n	8007630 <HAL_TIM_IC_Start_IT+0x7c>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d104      	bne.n	8007618 <HAL_TIM_IC_Start_IT+0x64>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007614:	b2db      	uxtb	r3, r3
 8007616:	e00b      	b.n	8007630 <HAL_TIM_IC_Start_IT+0x7c>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b08      	cmp	r3, #8
 800761c:	d104      	bne.n	8007628 <HAL_TIM_IC_Start_IT+0x74>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007624:	b2db      	uxtb	r3, r3
 8007626:	e003      	b.n	8007630 <HAL_TIM_IC_Start_IT+0x7c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762e:	b2db      	uxtb	r3, r3
 8007630:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e0b3      	b.n	80077aa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_TIM_IC_Start_IT+0x9e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007650:	e013      	b.n	800767a <HAL_TIM_IC_Start_IT+0xc6>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d104      	bne.n	8007662 <HAL_TIM_IC_Start_IT+0xae>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007660:	e00b      	b.n	800767a <HAL_TIM_IC_Start_IT+0xc6>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d104      	bne.n	8007672 <HAL_TIM_IC_Start_IT+0xbe>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007670:	e003      	b.n	800767a <HAL_TIM_IC_Start_IT+0xc6>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <HAL_TIM_IC_Start_IT+0xd6>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007688:	e013      	b.n	80076b2 <HAL_TIM_IC_Start_IT+0xfe>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d104      	bne.n	800769a <HAL_TIM_IC_Start_IT+0xe6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007698:	e00b      	b.n	80076b2 <HAL_TIM_IC_Start_IT+0xfe>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d104      	bne.n	80076aa <HAL_TIM_IC_Start_IT+0xf6>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a8:	e003      	b.n	80076b2 <HAL_TIM_IC_Start_IT+0xfe>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b0c      	cmp	r3, #12
 80076b6:	d841      	bhi.n	800773c <HAL_TIM_IC_Start_IT+0x188>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <HAL_TIM_IC_Start_IT+0x10c>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076f5 	.word	0x080076f5
 80076c4:	0800773d 	.word	0x0800773d
 80076c8:	0800773d 	.word	0x0800773d
 80076cc:	0800773d 	.word	0x0800773d
 80076d0:	08007707 	.word	0x08007707
 80076d4:	0800773d 	.word	0x0800773d
 80076d8:	0800773d 	.word	0x0800773d
 80076dc:	0800773d 	.word	0x0800773d
 80076e0:	08007719 	.word	0x08007719
 80076e4:	0800773d 	.word	0x0800773d
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	0800773d 	.word	0x0800773d
 80076f0:	0800772b 	.word	0x0800772b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0202 	orr.w	r2, r2, #2
 8007702:	60da      	str	r2, [r3, #12]
      break;
 8007704:	e01b      	b.n	800773e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0204 	orr.w	r2, r2, #4
 8007714:	60da      	str	r2, [r3, #12]
      break;
 8007716:	e012      	b.n	800773e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0208 	orr.w	r2, r2, #8
 8007726:	60da      	str	r2, [r3, #12]
      break;
 8007728:	e009      	b.n	800773e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0210 	orr.w	r2, r2, #16
 8007738:	60da      	str	r2, [r3, #12]
      break;
 800773a:	e000      	b.n	800773e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800773c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2201      	movs	r2, #1
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f89d 	bl	8008886 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_TIM_IC_Start_IT+0x200>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00e      	beq.n	8007774 <HAL_TIM_IC_Start_IT+0x1c0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d009      	beq.n	8007774 <HAL_TIM_IC_Start_IT+0x1c0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a14      	ldr	r2, [pc, #80]	; (80077b8 <HAL_TIM_IC_Start_IT+0x204>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_TIM_IC_Start_IT+0x1c0>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a13      	ldr	r2, [pc, #76]	; (80077bc <HAL_TIM_IC_Start_IT+0x208>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d111      	bne.n	8007798 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b06      	cmp	r3, #6
 8007784:	d010      	beq.n	80077a8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0201 	orr.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007796:	e007      	b.n	80077a8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800

080077c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e093      	b.n	80078fc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fc fd51 	bl	8004290 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f000 fca9 	bl	800816c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	4313      	orrs	r3, r2
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007860:	f023 030c 	bic.w	r3, r3, #12
 8007864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800786c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	4313      	orrs	r3, r2
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	011a      	lsls	r2, r3, #4
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	031b      	lsls	r3, r3, #12
 8007890:	4313      	orrs	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800789e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	4313      	orrs	r3, r2
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007914:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800791c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007924:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800792c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d110      	bne.n	8007956 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d102      	bne.n	8007940 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800793a:	7b7b      	ldrb	r3, [r7, #13]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d001      	beq.n	8007944 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e089      	b.n	8007a58 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007954:	e031      	b.n	80079ba <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b04      	cmp	r3, #4
 800795a:	d110      	bne.n	800797e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d102      	bne.n	8007968 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007962:	7b3b      	ldrb	r3, [r7, #12]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d001      	beq.n	800796c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e075      	b.n	8007a58 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800797c:	e01d      	b.n	80079ba <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d108      	bne.n	8007996 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d105      	bne.n	8007996 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800798a:	7b7b      	ldrb	r3, [r7, #13]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d102      	bne.n	8007996 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007990:	7b3b      	ldrb	r3, [r7, #12]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d001      	beq.n	800799a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e05e      	b.n	8007a58 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d010      	beq.n	80079e8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80079c6:	e01f      	b.n	8007a08 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2201      	movs	r2, #1
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 ff58 	bl	8008886 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0202 	orr.w	r2, r2, #2
 80079e4:	60da      	str	r2, [r3, #12]
      break;
 80079e6:	e02e      	b.n	8007a46 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2201      	movs	r2, #1
 80079ee:	2104      	movs	r1, #4
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 ff48 	bl	8008886 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0204 	orr.w	r2, r2, #4
 8007a04:	60da      	str	r2, [r3, #12]
      break;
 8007a06:	e01e      	b.n	8007a46 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 ff38 	bl	8008886 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	2104      	movs	r1, #4
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 ff31 	bl	8008886 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0202 	orr.w	r2, r2, #2
 8007a32:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0204 	orr.w	r2, r2, #4
 8007a42:	60da      	str	r2, [r3, #12]
      break;
 8007a44:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0201 	orr.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d122      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d11b      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0202 	mvn.w	r2, #2
 8007a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fc fec0 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8007aa8:	e005      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb43 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb49 	bl	8008148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d122      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d11b      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0204 	mvn.w	r2, #4
 8007ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fc fe96 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb19 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb1f 	bl	8008148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d122      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d11b      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0208 	mvn.w	r2, #8
 8007b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2204      	movs	r2, #4
 8007b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fc fe6c 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 faef 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 faf5 	bl	8008148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	d122      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0210 	mvn.w	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fc fe42 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fac5 	bl	8008136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 facb 	bl	8008148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10e      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0201 	mvn.w	r2, #1
 8007bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 faa0 	bl	8008124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d10e      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfc:	2b80      	cmp	r3, #128	; 0x80
 8007bfe:	d107      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fec7 	bl	800899e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa8f 	bl	800815a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0220 	mvn.w	r2, #32
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fe92 	bl	800898c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e082      	b.n	8007d90 <HAL_TIM_IC_ConfigChannel+0x120>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11b      	bne.n	8007cd0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f000 fc4a 	bl	8008540 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 020c 	bic.w	r2, r2, #12
 8007cba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6999      	ldr	r1, [r3, #24]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	619a      	str	r2, [r3, #24]
 8007cce:	e05a      	b.n	8007d86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d11c      	bne.n	8007d10 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f000 fcb3 	bl	8008650 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	699a      	ldr	r2, [r3, #24]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6999      	ldr	r1, [r3, #24]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	021a      	lsls	r2, r3, #8
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	619a      	str	r2, [r3, #24]
 8007d0e:	e03a      	b.n	8007d86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d11b      	bne.n	8007d4e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f000 fcfe 	bl	8008726 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 020c 	bic.w	r2, r2, #12
 8007d38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69d9      	ldr	r1, [r3, #28]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	61da      	str	r2, [r3, #28]
 8007d4c:	e01b      	b.n	8007d86 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f000 fd1d 	bl	800879c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69d9      	ldr	r1, [r3, #28]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	021a      	lsls	r2, r3, #8
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e0ac      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	f200 809f 	bhi.w	8007f00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dfd 	.word	0x08007dfd
 8007dcc:	08007f01 	.word	0x08007f01
 8007dd0:	08007f01 	.word	0x08007f01
 8007dd4:	08007f01 	.word	0x08007f01
 8007dd8:	08007e3d 	.word	0x08007e3d
 8007ddc:	08007f01 	.word	0x08007f01
 8007de0:	08007f01 	.word	0x08007f01
 8007de4:	08007f01 	.word	0x08007f01
 8007de8:	08007e7f 	.word	0x08007e7f
 8007dec:	08007f01 	.word	0x08007f01
 8007df0:	08007f01 	.word	0x08007f01
 8007df4:	08007f01 	.word	0x08007f01
 8007df8:	08007ebf 	.word	0x08007ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fa14 	bl	8008230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0208 	orr.w	r2, r2, #8
 8007e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0204 	bic.w	r2, r2, #4
 8007e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6999      	ldr	r1, [r3, #24]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	619a      	str	r2, [r3, #24]
      break;
 8007e3a:	e062      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fa5a 	bl	80082fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6999      	ldr	r1, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	021a      	lsls	r2, r3, #8
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	619a      	str	r2, [r3, #24]
      break;
 8007e7c:	e041      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 faa3 	bl	80083d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0208 	orr.w	r2, r2, #8
 8007e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0204 	bic.w	r2, r2, #4
 8007ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69d9      	ldr	r1, [r3, #28]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	61da      	str	r2, [r3, #28]
      break;
 8007ebc:	e021      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 faed 	bl	80084a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69d9      	ldr	r1, [r3, #28]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	021a      	lsls	r2, r3, #8
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	61da      	str	r2, [r3, #28]
      break;
 8007efe:	e000      	b.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_TIM_ConfigClockSource+0x18>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e0b3      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x180>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f64:	d03e      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0xd0>
 8007f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f6a:	f200 8087 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	f000 8085 	beq.w	8008080 <HAL_TIM_ConfigClockSource+0x16c>
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d87f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f7c:	2b70      	cmp	r3, #112	; 0x70
 8007f7e:	d01a      	beq.n	8007fb6 <HAL_TIM_ConfigClockSource+0xa2>
 8007f80:	2b70      	cmp	r3, #112	; 0x70
 8007f82:	d87b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f84:	2b60      	cmp	r3, #96	; 0x60
 8007f86:	d050      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x116>
 8007f88:	2b60      	cmp	r3, #96	; 0x60
 8007f8a:	d877      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f8c:	2b50      	cmp	r3, #80	; 0x50
 8007f8e:	d03c      	beq.n	800800a <HAL_TIM_ConfigClockSource+0xf6>
 8007f90:	2b50      	cmp	r3, #80	; 0x50
 8007f92:	d873      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f94:	2b40      	cmp	r3, #64	; 0x40
 8007f96:	d058      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x136>
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d86f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007f9c:	2b30      	cmp	r3, #48	; 0x30
 8007f9e:	d064      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x156>
 8007fa0:	2b30      	cmp	r3, #48	; 0x30
 8007fa2:	d86b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d060      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x156>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d867      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x168>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05c      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x156>
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d05a      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fb4:	e062      	b.n	800807c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6899      	ldr	r1, [r3, #8]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f000 fc3f 	bl	8008848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	609a      	str	r2, [r3, #8]
      break;
 8007fe2:	e04e      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f000 fc28 	bl	8008848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008006:	609a      	str	r2, [r3, #8]
      break;
 8008008:	e03b      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6859      	ldr	r1, [r3, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	461a      	mov	r2, r3
 8008018:	f000 faec 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2150      	movs	r1, #80	; 0x50
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fbf6 	bl	8008814 <TIM_ITRx_SetConfig>
      break;
 8008028:	e02b      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fb46 	bl	80086c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2160      	movs	r1, #96	; 0x60
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fbe6 	bl	8008814 <TIM_ITRx_SetConfig>
      break;
 8008048:	e01b      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	461a      	mov	r2, r3
 8008058:	f000 facc 	bl	80085f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2140      	movs	r1, #64	; 0x40
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fbd6 	bl	8008814 <TIM_ITRx_SetConfig>
      break;
 8008068:	e00b      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 fbcd 	bl	8008814 <TIM_ITRx_SetConfig>
        break;
 800807a:	e002      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008080:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d831      	bhi.n	8008114 <HAL_TIM_ReadCapturedValue+0x78>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	08008115 	.word	0x08008115
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008115 	.word	0x08008115
 80080c8:	080080f7 	.word	0x080080f7
 80080cc:	08008115 	.word	0x08008115
 80080d0:	08008115 	.word	0x08008115
 80080d4:	08008115 	.word	0x08008115
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008115 	.word	0x08008115
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008115 	.word	0x08008115
 80080e8:	0800810b 	.word	0x0800810b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	60fb      	str	r3, [r7, #12]

      break;
 80080f4:	e00f      	b.n	8008116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	60fb      	str	r3, [r7, #12]

      break;
 80080fe:	e00a      	b.n	8008116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	60fb      	str	r3, [r7, #12]

      break;
 8008108:	e005      	b.n	8008116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	60fb      	str	r3, [r7, #12]

      break;
 8008112:	e000      	b.n	8008116 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008114:	bf00      	nop
  }

  return tmpreg;
 8008116:	68fb      	ldr	r3, [r7, #12]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr

0800815a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a29      	ldr	r2, [pc, #164]	; (8008224 <TIM_Base_SetConfig+0xb8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00b      	beq.n	800819c <TIM_Base_SetConfig+0x30>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d007      	beq.n	800819c <TIM_Base_SetConfig+0x30>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a26      	ldr	r2, [pc, #152]	; (8008228 <TIM_Base_SetConfig+0xbc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <TIM_Base_SetConfig+0x30>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a25      	ldr	r2, [pc, #148]	; (800822c <TIM_Base_SetConfig+0xc0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <TIM_Base_SetConfig+0xb8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00b      	beq.n	80081ce <TIM_Base_SetConfig+0x62>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d007      	beq.n	80081ce <TIM_Base_SetConfig+0x62>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a19      	ldr	r2, [pc, #100]	; (8008228 <TIM_Base_SetConfig+0xbc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_Base_SetConfig+0x62>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a18      	ldr	r2, [pc, #96]	; (800822c <TIM_Base_SetConfig+0xc0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d108      	bne.n	80081e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a07      	ldr	r2, [pc, #28]	; (8008224 <TIM_Base_SetConfig+0xb8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d103      	bne.n	8008214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	615a      	str	r2, [r3, #20]
}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800

08008230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f023 0302 	bic.w	r3, r3, #2
 8008278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <TIM_OC1_SetConfig+0xc8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d10c      	bne.n	80082a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f023 0308 	bic.w	r3, r3, #8
 8008292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 0304 	bic.w	r3, r3, #4
 80082a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a13      	ldr	r2, [pc, #76]	; (80082f8 <TIM_OC1_SetConfig+0xc8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d111      	bne.n	80082d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	621a      	str	r2, [r3, #32]
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40012c00 	.word	0x40012c00

080082fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	f023 0210 	bic.w	r2, r3, #16
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0320 	bic.w	r3, r3, #32
 8008346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <TIM_OC2_SetConfig+0xd0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d10d      	bne.n	8008378 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a14      	ldr	r2, [pc, #80]	; (80083cc <TIM_OC2_SetConfig+0xd0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d113      	bne.n	80083a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800838e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	621a      	str	r2, [r3, #32]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr
 80083cc:	40012c00 	.word	0x40012c00

080083d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <TIM_OC3_SetConfig+0xd0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d10d      	bne.n	800844a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a14      	ldr	r2, [pc, #80]	; (80084a0 <TIM_OC3_SetConfig+0xd0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d113      	bne.n	800847a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4313      	orrs	r3, r2
 8008478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	621a      	str	r2, [r3, #32]
}
 8008494:	bf00      	nop
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40012c00 	.word	0x40012c00

080084a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	031b      	lsls	r3, r3, #12
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a0f      	ldr	r2, [pc, #60]	; (800853c <TIM_OC4_SetConfig+0x98>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d109      	bne.n	8008518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800850a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr
 800853c:	40012c00 	.word	0x40012c00

08008540 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f023 0201 	bic.w	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <TIM_TI1_SetConfig+0xa8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00b      	beq.n	8008586 <TIM_TI1_SetConfig+0x46>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008574:	d007      	beq.n	8008586 <TIM_TI1_SetConfig+0x46>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <TIM_TI1_SetConfig+0xac>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d003      	beq.n	8008586 <TIM_TI1_SetConfig+0x46>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <TIM_TI1_SetConfig+0xb0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d101      	bne.n	800858a <TIM_TI1_SetConfig+0x4a>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <TIM_TI1_SetConfig+0x4c>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e003      	b.n	80085aa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f023 030a 	bic.w	r3, r3, #10
 80085c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f003 030a 	and.w	r3, r3, #10
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr
 80085e8:	40012c00 	.word	0x40012c00
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800

080085f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0201 	bic.w	r2, r3, #1
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800861e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f023 030a 	bic.w	r3, r3, #10
 8008630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	621a      	str	r2, [r3, #32]
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0210 	bic.w	r2, r3, #16
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800867c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	031b      	lsls	r3, r3, #12
 8008694:	b29b      	uxth	r3, r3
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	4313      	orrs	r3, r2
 800869a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f023 0210 	bic.w	r2, r3, #16
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	031b      	lsls	r3, r3, #12
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	621a      	str	r2, [r3, #32]
}
 800871c:	bf00      	nop
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr

08008726 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008726:	b480      	push	{r7}
 8008728:	b087      	sub	sp, #28
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008762:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	b2db      	uxtb	r3, r3
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008776:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	031b      	lsls	r3, r3, #12
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	031b      	lsls	r3, r3, #12
 80087f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr

08008814 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	f043 0307 	orr.w	r3, r3, #7
 8008836:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	609a      	str	r2, [r3, #8]
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	021a      	lsls	r2, r3, #8
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	431a      	orrs	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	4313      	orrs	r3, r2
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	609a      	str	r2, [r3, #8]
}
 800887c:	bf00      	nop
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr

08008886 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	2201      	movs	r2, #1
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1a      	ldr	r2, [r3, #32]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	43db      	mvns	r3, r3
 80088a8:	401a      	ands	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f003 031f 	and.w	r3, r3, #31
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	fa01 f303 	lsl.w	r3, r1, r3
 80088be:	431a      	orrs	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	621a      	str	r2, [r3, #32]
}
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr
	...

080088d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d101      	bne.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088e4:	2302      	movs	r3, #2
 80088e6:	e046      	b.n	8008976 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a16      	ldr	r2, [pc, #88]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00e      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008934:	d009      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a12      	ldr	r2, [pc, #72]	; (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a10      	ldr	r2, [pc, #64]	; (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10c      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4313      	orrs	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr
 8008980:	40012c00 	.word	0x40012c00
 8008984:	40000400 	.word	0x40000400
 8008988:	40000800 	.word	0x40000800

0800898c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e03f      	b.n	8008a42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fb fd5c 	bl	8004494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2224      	movs	r2, #36	; 0x24
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f905 	bl	8008c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b08a      	sub	sp, #40	; 0x28
 8008a4e:	af02      	add	r7, sp, #8
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	603b      	str	r3, [r7, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d17c      	bne.n	8008b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_UART_Transmit+0x2c>
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e075      	b.n	8008b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_UART_Transmit+0x3e>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e06e      	b.n	8008b66 <HAL_UART_Transmit+0x11c>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2221      	movs	r2, #33	; 0x21
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9e:	f7fc f977 	bl	8004d90 <HAL_GetTick>
 8008aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab8:	d108      	bne.n	8008acc <HAL_UART_Transmit+0x82>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e003      	b.n	8008ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008adc:	e02a      	b.n	8008b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f840 	bl	8008b6e <UART_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e036      	b.n	8008b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	3302      	adds	r3, #2
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	e007      	b.n	8008b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	3301      	adds	r3, #1
 8008b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1cf      	bne.n	8008ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2200      	movs	r2, #0
 8008b46:	2140      	movs	r1, #64	; 0x40
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f810 	bl	8008b6e <UART_WaitOnFlagUntilTimeout>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e006      	b.n	8008b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e000      	b.n	8008b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b64:	2302      	movs	r3, #2
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7e:	e02c      	b.n	8008bda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b86:	d028      	beq.n	8008bda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b8e:	f7fc f8ff 	bl	8004d90 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d21d      	bcs.n	8008bda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	695a      	ldr	r2, [r3, #20]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0201 	bic.w	r2, r2, #1
 8008bbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e00f      	b.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4013      	ands	r3, r2
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	bf0c      	ite	eq
 8008bea:	2301      	moveq	r3, #1
 8008bec:	2300      	movne	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d0c3      	beq.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008c3e:	f023 030c 	bic.w	r3, r3, #12
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699a      	ldr	r2, [r3, #24]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2c      	ldr	r2, [pc, #176]	; (8008d18 <UART_SetConfig+0x114>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d103      	bne.n	8008c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c6c:	f7fe f94a 	bl	8006f04 <HAL_RCC_GetPCLK2Freq>
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	e002      	b.n	8008c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008c74:	f7fe f932 	bl	8006edc <HAL_RCC_GetPCLK1Freq>
 8008c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009a      	lsls	r2, r3, #2
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c90:	4a22      	ldr	r2, [pc, #136]	; (8008d1c <UART_SetConfig+0x118>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	0119      	lsls	r1, r3, #4
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009a      	lsls	r2, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <UART_SetConfig+0x118>)
 8008cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	2064      	movs	r0, #100	; 0x64
 8008cba:	fb00 f303 	mul.w	r3, r0, r3
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	3332      	adds	r3, #50	; 0x32
 8008cc4:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <UART_SetConfig+0x118>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	095b      	lsrs	r3, r3, #5
 8008ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd0:	4419      	add	r1, r3
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009a      	lsls	r2, r3, #2
 8008cdc:	441a      	add	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <UART_SetConfig+0x118>)
 8008cea:	fba3 0302 	umull	r0, r3, r3, r2
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	2064      	movs	r0, #100	; 0x64
 8008cf2:	fb00 f303 	mul.w	r3, r0, r3
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	3332      	adds	r3, #50	; 0x32
 8008cfc:	4a07      	ldr	r2, [pc, #28]	; (8008d1c <UART_SetConfig+0x118>)
 8008cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	f003 020f 	and.w	r2, r3, #15
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40013800 	.word	0x40013800
 8008d1c:	51eb851f 	.word	0x51eb851f

08008d20 <__errno>:
 8008d20:	4b01      	ldr	r3, [pc, #4]	; (8008d28 <__errno+0x8>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	200000b8 	.word	0x200000b8

08008d2c <__libc_init_array>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	2600      	movs	r6, #0
 8008d30:	4d0c      	ldr	r5, [pc, #48]	; (8008d64 <__libc_init_array+0x38>)
 8008d32:	4c0d      	ldr	r4, [pc, #52]	; (8008d68 <__libc_init_array+0x3c>)
 8008d34:	1b64      	subs	r4, r4, r5
 8008d36:	10a4      	asrs	r4, r4, #2
 8008d38:	42a6      	cmp	r6, r4
 8008d3a:	d109      	bne.n	8008d50 <__libc_init_array+0x24>
 8008d3c:	f003 fa68 	bl	800c210 <_init>
 8008d40:	2600      	movs	r6, #0
 8008d42:	4d0a      	ldr	r5, [pc, #40]	; (8008d6c <__libc_init_array+0x40>)
 8008d44:	4c0a      	ldr	r4, [pc, #40]	; (8008d70 <__libc_init_array+0x44>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	42a6      	cmp	r6, r4
 8008d4c:	d105      	bne.n	8008d5a <__libc_init_array+0x2e>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d54:	4798      	blx	r3
 8008d56:	3601      	adds	r6, #1
 8008d58:	e7ee      	b.n	8008d38 <__libc_init_array+0xc>
 8008d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d5e:	4798      	blx	r3
 8008d60:	3601      	adds	r6, #1
 8008d62:	e7f2      	b.n	8008d4a <__libc_init_array+0x1e>
 8008d64:	0800c674 	.word	0x0800c674
 8008d68:	0800c674 	.word	0x0800c674
 8008d6c:	0800c674 	.word	0x0800c674
 8008d70:	0800c678 	.word	0x0800c678

08008d74 <memset>:
 8008d74:	4603      	mov	r3, r0
 8008d76:	4402      	add	r2, r0
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d100      	bne.n	8008d7e <memset+0xa>
 8008d7c:	4770      	bx	lr
 8008d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d82:	e7f9      	b.n	8008d78 <memset+0x4>

08008d84 <__cvt>:
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	bfbb      	ittet	lt
 8008d8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d92:	461f      	movlt	r7, r3
 8008d94:	2300      	movge	r3, #0
 8008d96:	232d      	movlt	r3, #45	; 0x2d
 8008d98:	b088      	sub	sp, #32
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008da0:	7013      	strb	r3, [r2, #0]
 8008da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008da4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008da8:	f023 0820 	bic.w	r8, r3, #32
 8008dac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008db0:	d005      	beq.n	8008dbe <__cvt+0x3a>
 8008db2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008db6:	d100      	bne.n	8008dba <__cvt+0x36>
 8008db8:	3501      	adds	r5, #1
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e000      	b.n	8008dc0 <__cvt+0x3c>
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	aa07      	add	r2, sp, #28
 8008dc2:	9204      	str	r2, [sp, #16]
 8008dc4:	aa06      	add	r2, sp, #24
 8008dc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dca:	e9cd 3500 	strd	r3, r5, [sp]
 8008dce:	4622      	mov	r2, r4
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	f000 fce5 	bl	80097a0 <_dtoa_r>
 8008dd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dda:	4606      	mov	r6, r0
 8008ddc:	d102      	bne.n	8008de4 <__cvt+0x60>
 8008dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de0:	07db      	lsls	r3, r3, #31
 8008de2:	d522      	bpl.n	8008e2a <__cvt+0xa6>
 8008de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008de8:	eb06 0905 	add.w	r9, r6, r5
 8008dec:	d110      	bne.n	8008e10 <__cvt+0x8c>
 8008dee:	7833      	ldrb	r3, [r6, #0]
 8008df0:	2b30      	cmp	r3, #48	; 0x30
 8008df2:	d10a      	bne.n	8008e0a <__cvt+0x86>
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8008e00:	b918      	cbnz	r0, 8008e0a <__cvt+0x86>
 8008e02:	f1c5 0501 	rsb	r5, r5, #1
 8008e06:	f8ca 5000 	str.w	r5, [sl]
 8008e0a:	f8da 3000 	ldr.w	r3, [sl]
 8008e0e:	4499      	add	r9, r3
 8008e10:	2200      	movs	r2, #0
 8008e12:	2300      	movs	r3, #0
 8008e14:	4620      	mov	r0, r4
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fdc6 	bl	80009a8 <__aeabi_dcmpeq>
 8008e1c:	b108      	cbz	r0, 8008e22 <__cvt+0x9e>
 8008e1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e22:	2230      	movs	r2, #48	; 0x30
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	454b      	cmp	r3, r9
 8008e28:	d307      	bcc.n	8008e3a <__cvt+0xb6>
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e30:	1b9b      	subs	r3, r3, r6
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	b008      	add	sp, #32
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	1c59      	adds	r1, r3, #1
 8008e3c:	9107      	str	r1, [sp, #28]
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	e7f0      	b.n	8008e24 <__cvt+0xa0>

08008e42 <__exponent>:
 8008e42:	4603      	mov	r3, r0
 8008e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e46:	2900      	cmp	r1, #0
 8008e48:	f803 2b02 	strb.w	r2, [r3], #2
 8008e4c:	bfb6      	itet	lt
 8008e4e:	222d      	movlt	r2, #45	; 0x2d
 8008e50:	222b      	movge	r2, #43	; 0x2b
 8008e52:	4249      	neglt	r1, r1
 8008e54:	2909      	cmp	r1, #9
 8008e56:	7042      	strb	r2, [r0, #1]
 8008e58:	dd2b      	ble.n	8008eb2 <__exponent+0x70>
 8008e5a:	f10d 0407 	add.w	r4, sp, #7
 8008e5e:	46a4      	mov	ip, r4
 8008e60:	270a      	movs	r7, #10
 8008e62:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e66:	460a      	mov	r2, r1
 8008e68:	46a6      	mov	lr, r4
 8008e6a:	fb07 1516 	mls	r5, r7, r6, r1
 8008e6e:	2a63      	cmp	r2, #99	; 0x63
 8008e70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008e74:	4631      	mov	r1, r6
 8008e76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008e7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e7e:	dcf0      	bgt.n	8008e62 <__exponent+0x20>
 8008e80:	3130      	adds	r1, #48	; 0x30
 8008e82:	f1ae 0502 	sub.w	r5, lr, #2
 8008e86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	1c44      	adds	r4, r0, #1
 8008e8e:	4561      	cmp	r1, ip
 8008e90:	d30a      	bcc.n	8008ea8 <__exponent+0x66>
 8008e92:	f10d 0209 	add.w	r2, sp, #9
 8008e96:	eba2 020e 	sub.w	r2, r2, lr
 8008e9a:	4565      	cmp	r5, ip
 8008e9c:	bf88      	it	hi
 8008e9e:	2200      	movhi	r2, #0
 8008ea0:	4413      	add	r3, r2
 8008ea2:	1a18      	subs	r0, r3, r0
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008eb0:	e7ed      	b.n	8008e8e <__exponent+0x4c>
 8008eb2:	2330      	movs	r3, #48	; 0x30
 8008eb4:	3130      	adds	r1, #48	; 0x30
 8008eb6:	7083      	strb	r3, [r0, #2]
 8008eb8:	70c1      	strb	r1, [r0, #3]
 8008eba:	1d03      	adds	r3, r0, #4
 8008ebc:	e7f1      	b.n	8008ea2 <__exponent+0x60>
	...

08008ec0 <_printf_float>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	b091      	sub	sp, #68	; 0x44
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008ecc:	4616      	mov	r6, r2
 8008ece:	461f      	mov	r7, r3
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	f001 fa53 	bl	800a37c <_localeconv_r>
 8008ed6:	6803      	ldr	r3, [r0, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	9309      	str	r3, [sp, #36]	; 0x24
 8008edc:	f7f7 f938 	bl	8000150 <strlen>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8008ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee8:	900a      	str	r0, [sp, #40]	; 0x28
 8008eea:	3307      	adds	r3, #7
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	f103 0208 	add.w	r2, r3, #8
 8008ef4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8008efc:	f8c8 2000 	str.w	r2, [r8]
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008f0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f16:	4640      	mov	r0, r8
 8008f18:	4b9c      	ldr	r3, [pc, #624]	; (800918c <_printf_float+0x2cc>)
 8008f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1c:	f7f7 fd76 	bl	8000a0c <__aeabi_dcmpun>
 8008f20:	bb70      	cbnz	r0, 8008f80 <_printf_float+0xc0>
 8008f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f26:	4640      	mov	r0, r8
 8008f28:	4b98      	ldr	r3, [pc, #608]	; (800918c <_printf_float+0x2cc>)
 8008f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f2c:	f7f7 fd50 	bl	80009d0 <__aeabi_dcmple>
 8008f30:	bb30      	cbnz	r0, 8008f80 <_printf_float+0xc0>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	4651      	mov	r1, sl
 8008f3a:	f7f7 fd3f 	bl	80009bc <__aeabi_dcmplt>
 8008f3e:	b110      	cbz	r0, 8008f46 <_printf_float+0x86>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f46:	4b92      	ldr	r3, [pc, #584]	; (8009190 <_printf_float+0x2d0>)
 8008f48:	4892      	ldr	r0, [pc, #584]	; (8009194 <_printf_float+0x2d4>)
 8008f4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f4e:	bf94      	ite	ls
 8008f50:	4698      	movls	r8, r3
 8008f52:	4680      	movhi	r8, r0
 8008f54:	2303      	movs	r3, #3
 8008f56:	f04f 0a00 	mov.w	sl, #0
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	f02b 0304 	bic.w	r3, fp, #4
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	4633      	mov	r3, r6
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	9700      	str	r7, [sp, #0]
 8008f6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f6c:	f000 f9d4 	bl	8009318 <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	f040 8090 	bne.w	8009096 <_printf_float+0x1d6>
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f7a:	b011      	add	sp, #68	; 0x44
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	4642      	mov	r2, r8
 8008f82:	4653      	mov	r3, sl
 8008f84:	4640      	mov	r0, r8
 8008f86:	4651      	mov	r1, sl
 8008f88:	f7f7 fd40 	bl	8000a0c <__aeabi_dcmpun>
 8008f8c:	b148      	cbz	r0, 8008fa2 <_printf_float+0xe2>
 8008f8e:	f1ba 0f00 	cmp.w	sl, #0
 8008f92:	bfb8      	it	lt
 8008f94:	232d      	movlt	r3, #45	; 0x2d
 8008f96:	4880      	ldr	r0, [pc, #512]	; (8009198 <_printf_float+0x2d8>)
 8008f98:	bfb8      	it	lt
 8008f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f9e:	4b7f      	ldr	r3, [pc, #508]	; (800919c <_printf_float+0x2dc>)
 8008fa0:	e7d3      	b.n	8008f4a <_printf_float+0x8a>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	d142      	bne.n	8009032 <_printf_float+0x172>
 8008fac:	2306      	movs	r3, #6
 8008fae:	6063      	str	r3, [r4, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	9206      	str	r2, [sp, #24]
 8008fb4:	aa0e      	add	r2, sp, #56	; 0x38
 8008fb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008fba:	aa0d      	add	r2, sp, #52	; 0x34
 8008fbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008fc0:	9203      	str	r2, [sp, #12]
 8008fc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008fc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	6863      	ldr	r3, [r4, #4]
 8008fce:	4642      	mov	r2, r8
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	4653      	mov	r3, sl
 8008fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fd8:	f7ff fed4 	bl	8008d84 <__cvt>
 8008fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fde:	4680      	mov	r8, r0
 8008fe0:	2947      	cmp	r1, #71	; 0x47
 8008fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fe4:	d108      	bne.n	8008ff8 <_printf_float+0x138>
 8008fe6:	1cc8      	adds	r0, r1, #3
 8008fe8:	db02      	blt.n	8008ff0 <_printf_float+0x130>
 8008fea:	6863      	ldr	r3, [r4, #4]
 8008fec:	4299      	cmp	r1, r3
 8008fee:	dd40      	ble.n	8009072 <_printf_float+0x1b2>
 8008ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8008ff4:	fa5f f989 	uxtb.w	r9, r9
 8008ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ffc:	d81f      	bhi.n	800903e <_printf_float+0x17e>
 8008ffe:	464a      	mov	r2, r9
 8009000:	3901      	subs	r1, #1
 8009002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009006:	910d      	str	r1, [sp, #52]	; 0x34
 8009008:	f7ff ff1b 	bl	8008e42 <__exponent>
 800900c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800900e:	4682      	mov	sl, r0
 8009010:	1813      	adds	r3, r2, r0
 8009012:	2a01      	cmp	r2, #1
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	dc02      	bgt.n	800901e <_printf_float+0x15e>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	07d2      	lsls	r2, r2, #31
 800901c:	d501      	bpl.n	8009022 <_printf_float+0x162>
 800901e:	3301      	adds	r3, #1
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009026:	2b00      	cmp	r3, #0
 8009028:	d09b      	beq.n	8008f62 <_printf_float+0xa2>
 800902a:	232d      	movs	r3, #45	; 0x2d
 800902c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009030:	e797      	b.n	8008f62 <_printf_float+0xa2>
 8009032:	2947      	cmp	r1, #71	; 0x47
 8009034:	d1bc      	bne.n	8008fb0 <_printf_float+0xf0>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1ba      	bne.n	8008fb0 <_printf_float+0xf0>
 800903a:	2301      	movs	r3, #1
 800903c:	e7b7      	b.n	8008fae <_printf_float+0xee>
 800903e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009042:	d118      	bne.n	8009076 <_printf_float+0x1b6>
 8009044:	2900      	cmp	r1, #0
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	dd0b      	ble.n	8009062 <_printf_float+0x1a2>
 800904a:	6121      	str	r1, [r4, #16]
 800904c:	b913      	cbnz	r3, 8009054 <_printf_float+0x194>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	07d0      	lsls	r0, r2, #31
 8009052:	d502      	bpl.n	800905a <_printf_float+0x19a>
 8009054:	3301      	adds	r3, #1
 8009056:	440b      	add	r3, r1
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	f04f 0a00 	mov.w	sl, #0
 800905e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009060:	e7df      	b.n	8009022 <_printf_float+0x162>
 8009062:	b913      	cbnz	r3, 800906a <_printf_float+0x1aa>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	07d2      	lsls	r2, r2, #31
 8009068:	d501      	bpl.n	800906e <_printf_float+0x1ae>
 800906a:	3302      	adds	r3, #2
 800906c:	e7f4      	b.n	8009058 <_printf_float+0x198>
 800906e:	2301      	movs	r3, #1
 8009070:	e7f2      	b.n	8009058 <_printf_float+0x198>
 8009072:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009078:	4299      	cmp	r1, r3
 800907a:	db05      	blt.n	8009088 <_printf_float+0x1c8>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6121      	str	r1, [r4, #16]
 8009080:	07d8      	lsls	r0, r3, #31
 8009082:	d5ea      	bpl.n	800905a <_printf_float+0x19a>
 8009084:	1c4b      	adds	r3, r1, #1
 8009086:	e7e7      	b.n	8009058 <_printf_float+0x198>
 8009088:	2900      	cmp	r1, #0
 800908a:	bfcc      	ite	gt
 800908c:	2201      	movgt	r2, #1
 800908e:	f1c1 0202 	rsble	r2, r1, #2
 8009092:	4413      	add	r3, r2
 8009094:	e7e0      	b.n	8009058 <_printf_float+0x198>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	055a      	lsls	r2, r3, #21
 800909a:	d407      	bmi.n	80090ac <_printf_float+0x1ec>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	4642      	mov	r2, r8
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	d12b      	bne.n	8009102 <_printf_float+0x242>
 80090aa:	e764      	b.n	8008f76 <_printf_float+0xb6>
 80090ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80090b0:	f240 80dd 	bls.w	800926e <_printf_float+0x3ae>
 80090b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	f7f7 fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d033      	beq.n	800912c <_printf_float+0x26c>
 80090c4:	2301      	movs	r3, #1
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	4a35      	ldr	r2, [pc, #212]	; (80091a0 <_printf_float+0x2e0>)
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f af51 	beq.w	8008f76 <_printf_float+0xb6>
 80090d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090d8:	429a      	cmp	r2, r3
 80090da:	db02      	blt.n	80090e2 <_printf_float+0x222>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	07d8      	lsls	r0, r3, #31
 80090e0:	d50f      	bpl.n	8009102 <_printf_float+0x242>
 80090e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f af42 	beq.w	8008f76 <_printf_float+0xb6>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 091a 	add.w	r9, r4, #26
 80090fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4543      	cmp	r3, r8
 8009100:	dc09      	bgt.n	8009116 <_printf_float+0x256>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	079b      	lsls	r3, r3, #30
 8009106:	f100 8102 	bmi.w	800930e <_printf_float+0x44e>
 800910a:	68e0      	ldr	r0, [r4, #12]
 800910c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800910e:	4298      	cmp	r0, r3
 8009110:	bfb8      	it	lt
 8009112:	4618      	movlt	r0, r3
 8009114:	e731      	b.n	8008f7a <_printf_float+0xba>
 8009116:	2301      	movs	r3, #1
 8009118:	464a      	mov	r2, r9
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f af28 	beq.w	8008f76 <_printf_float+0xb6>
 8009126:	f108 0801 	add.w	r8, r8, #1
 800912a:	e7e6      	b.n	80090fa <_printf_float+0x23a>
 800912c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800912e:	2b00      	cmp	r3, #0
 8009130:	dc38      	bgt.n	80091a4 <_printf_float+0x2e4>
 8009132:	2301      	movs	r3, #1
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	4a19      	ldr	r2, [pc, #100]	; (80091a0 <_printf_float+0x2e0>)
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	f43f af1a 	beq.w	8008f76 <_printf_float+0xb6>
 8009142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009146:	4313      	orrs	r3, r2
 8009148:	d102      	bne.n	8009150 <_printf_float+0x290>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	07d9      	lsls	r1, r3, #31
 800914e:	d5d8      	bpl.n	8009102 <_printf_float+0x242>
 8009150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009154:	4631      	mov	r1, r6
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	f43f af0b 	beq.w	8008f76 <_printf_float+0xb6>
 8009160:	f04f 0900 	mov.w	r9, #0
 8009164:	f104 0a1a 	add.w	sl, r4, #26
 8009168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916a:	425b      	negs	r3, r3
 800916c:	454b      	cmp	r3, r9
 800916e:	dc01      	bgt.n	8009174 <_printf_float+0x2b4>
 8009170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009172:	e794      	b.n	800909e <_printf_float+0x1de>
 8009174:	2301      	movs	r3, #1
 8009176:	4652      	mov	r2, sl
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f aef9 	beq.w	8008f76 <_printf_float+0xb6>
 8009184:	f109 0901 	add.w	r9, r9, #1
 8009188:	e7ee      	b.n	8009168 <_printf_float+0x2a8>
 800918a:	bf00      	nop
 800918c:	7fefffff 	.word	0x7fefffff
 8009190:	0800c264 	.word	0x0800c264
 8009194:	0800c268 	.word	0x0800c268
 8009198:	0800c270 	.word	0x0800c270
 800919c:	0800c26c 	.word	0x0800c26c
 80091a0:	0800c274 	.word	0x0800c274
 80091a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091a8:	429a      	cmp	r2, r3
 80091aa:	bfa8      	it	ge
 80091ac:	461a      	movge	r2, r3
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	4691      	mov	r9, r2
 80091b2:	dc37      	bgt.n	8009224 <_printf_float+0x364>
 80091b4:	f04f 0b00 	mov.w	fp, #0
 80091b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091bc:	f104 021a 	add.w	r2, r4, #26
 80091c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091c4:	ebaa 0309 	sub.w	r3, sl, r9
 80091c8:	455b      	cmp	r3, fp
 80091ca:	dc33      	bgt.n	8009234 <_printf_float+0x374>
 80091cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091d0:	429a      	cmp	r2, r3
 80091d2:	db3b      	blt.n	800924c <_printf_float+0x38c>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	07da      	lsls	r2, r3, #31
 80091d8:	d438      	bmi.n	800924c <_printf_float+0x38c>
 80091da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091de:	eba3 020a 	sub.w	r2, r3, sl
 80091e2:	eba3 0901 	sub.w	r9, r3, r1
 80091e6:	4591      	cmp	r9, r2
 80091e8:	bfa8      	it	ge
 80091ea:	4691      	movge	r9, r2
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	dc34      	bgt.n	800925c <_printf_float+0x39c>
 80091f2:	f04f 0800 	mov.w	r8, #0
 80091f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091fa:	f104 0a1a 	add.w	sl, r4, #26
 80091fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	eba3 0309 	sub.w	r3, r3, r9
 8009208:	4543      	cmp	r3, r8
 800920a:	f77f af7a 	ble.w	8009102 <_printf_float+0x242>
 800920e:	2301      	movs	r3, #1
 8009210:	4652      	mov	r2, sl
 8009212:	4631      	mov	r1, r6
 8009214:	4628      	mov	r0, r5
 8009216:	47b8      	blx	r7
 8009218:	3001      	adds	r0, #1
 800921a:	f43f aeac 	beq.w	8008f76 <_printf_float+0xb6>
 800921e:	f108 0801 	add.w	r8, r8, #1
 8009222:	e7ec      	b.n	80091fe <_printf_float+0x33e>
 8009224:	4613      	mov	r3, r2
 8009226:	4631      	mov	r1, r6
 8009228:	4642      	mov	r2, r8
 800922a:	4628      	mov	r0, r5
 800922c:	47b8      	blx	r7
 800922e:	3001      	adds	r0, #1
 8009230:	d1c0      	bne.n	80091b4 <_printf_float+0x2f4>
 8009232:	e6a0      	b.n	8008f76 <_printf_float+0xb6>
 8009234:	2301      	movs	r3, #1
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	920b      	str	r2, [sp, #44]	; 0x2c
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f ae99 	beq.w	8008f76 <_printf_float+0xb6>
 8009244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009246:	f10b 0b01 	add.w	fp, fp, #1
 800924a:	e7b9      	b.n	80091c0 <_printf_float+0x300>
 800924c:	4631      	mov	r1, r6
 800924e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	d1bf      	bne.n	80091da <_printf_float+0x31a>
 800925a:	e68c      	b.n	8008f76 <_printf_float+0xb6>
 800925c:	464b      	mov	r3, r9
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	eb08 020a 	add.w	r2, r8, sl
 8009266:	47b8      	blx	r7
 8009268:	3001      	adds	r0, #1
 800926a:	d1c2      	bne.n	80091f2 <_printf_float+0x332>
 800926c:	e683      	b.n	8008f76 <_printf_float+0xb6>
 800926e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009270:	2a01      	cmp	r2, #1
 8009272:	dc01      	bgt.n	8009278 <_printf_float+0x3b8>
 8009274:	07db      	lsls	r3, r3, #31
 8009276:	d537      	bpl.n	80092e8 <_printf_float+0x428>
 8009278:	2301      	movs	r3, #1
 800927a:	4642      	mov	r2, r8
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f ae77 	beq.w	8008f76 <_printf_float+0xb6>
 8009288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	f43f ae6f 	beq.w	8008f76 <_printf_float+0xb6>
 8009298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800929c:	2200      	movs	r2, #0
 800929e:	2300      	movs	r3, #0
 80092a0:	f7f7 fb82 	bl	80009a8 <__aeabi_dcmpeq>
 80092a4:	b9d8      	cbnz	r0, 80092de <_printf_float+0x41e>
 80092a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092a8:	f108 0201 	add.w	r2, r8, #1
 80092ac:	3b01      	subs	r3, #1
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	d10e      	bne.n	80092d6 <_printf_float+0x416>
 80092b8:	e65d      	b.n	8008f76 <_printf_float+0xb6>
 80092ba:	2301      	movs	r3, #1
 80092bc:	464a      	mov	r2, r9
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f ae56 	beq.w	8008f76 <_printf_float+0xb6>
 80092ca:	f108 0801 	add.w	r8, r8, #1
 80092ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d0:	3b01      	subs	r3, #1
 80092d2:	4543      	cmp	r3, r8
 80092d4:	dcf1      	bgt.n	80092ba <_printf_float+0x3fa>
 80092d6:	4653      	mov	r3, sl
 80092d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092dc:	e6e0      	b.n	80090a0 <_printf_float+0x1e0>
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	f104 091a 	add.w	r9, r4, #26
 80092e6:	e7f2      	b.n	80092ce <_printf_float+0x40e>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4642      	mov	r2, r8
 80092ec:	e7df      	b.n	80092ae <_printf_float+0x3ee>
 80092ee:	2301      	movs	r3, #1
 80092f0:	464a      	mov	r2, r9
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	f43f ae3c 	beq.w	8008f76 <_printf_float+0xb6>
 80092fe:	f108 0801 	add.w	r8, r8, #1
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009306:	1a5b      	subs	r3, r3, r1
 8009308:	4543      	cmp	r3, r8
 800930a:	dcf0      	bgt.n	80092ee <_printf_float+0x42e>
 800930c:	e6fd      	b.n	800910a <_printf_float+0x24a>
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	f104 0919 	add.w	r9, r4, #25
 8009316:	e7f4      	b.n	8009302 <_printf_float+0x442>

08009318 <_printf_common>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	4616      	mov	r6, r2
 800931e:	4699      	mov	r9, r3
 8009320:	688a      	ldr	r2, [r1, #8]
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	4607      	mov	r7, r0
 8009326:	4293      	cmp	r3, r2
 8009328:	bfb8      	it	lt
 800932a:	4613      	movlt	r3, r2
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009332:	460c      	mov	r4, r1
 8009334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009338:	b10a      	cbz	r2, 800933e <_printf_common+0x26>
 800933a:	3301      	adds	r3, #1
 800933c:	6033      	str	r3, [r6, #0]
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	0699      	lsls	r1, r3, #26
 8009342:	bf42      	ittt	mi
 8009344:	6833      	ldrmi	r3, [r6, #0]
 8009346:	3302      	addmi	r3, #2
 8009348:	6033      	strmi	r3, [r6, #0]
 800934a:	6825      	ldr	r5, [r4, #0]
 800934c:	f015 0506 	ands.w	r5, r5, #6
 8009350:	d106      	bne.n	8009360 <_printf_common+0x48>
 8009352:	f104 0a19 	add.w	sl, r4, #25
 8009356:	68e3      	ldr	r3, [r4, #12]
 8009358:	6832      	ldr	r2, [r6, #0]
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	42ab      	cmp	r3, r5
 800935e:	dc28      	bgt.n	80093b2 <_printf_common+0x9a>
 8009360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009364:	1e13      	subs	r3, r2, #0
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	bf18      	it	ne
 800936a:	2301      	movne	r3, #1
 800936c:	0692      	lsls	r2, r2, #26
 800936e:	d42d      	bmi.n	80093cc <_printf_common+0xb4>
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d020      	beq.n	80093c0 <_printf_common+0xa8>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	68e5      	ldr	r5, [r4, #12]
 8009382:	f003 0306 	and.w	r3, r3, #6
 8009386:	2b04      	cmp	r3, #4
 8009388:	bf18      	it	ne
 800938a:	2500      	movne	r5, #0
 800938c:	6832      	ldr	r2, [r6, #0]
 800938e:	f04f 0600 	mov.w	r6, #0
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	bf08      	it	eq
 8009396:	1aad      	subeq	r5, r5, r2
 8009398:	6922      	ldr	r2, [r4, #16]
 800939a:	bf08      	it	eq
 800939c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfc4      	itt	gt
 80093a4:	1a9b      	subgt	r3, r3, r2
 80093a6:	18ed      	addgt	r5, r5, r3
 80093a8:	341a      	adds	r4, #26
 80093aa:	42b5      	cmp	r5, r6
 80093ac:	d11a      	bne.n	80093e4 <_printf_common+0xcc>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e008      	b.n	80093c4 <_printf_common+0xac>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4649      	mov	r1, r9
 80093b8:	4638      	mov	r0, r7
 80093ba:	47c0      	blx	r8
 80093bc:	3001      	adds	r0, #1
 80093be:	d103      	bne.n	80093c8 <_printf_common+0xb0>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7c4      	b.n	8009356 <_printf_common+0x3e>
 80093cc:	2030      	movs	r0, #48	; 0x30
 80093ce:	18e1      	adds	r1, r4, r3
 80093d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093da:	4422      	add	r2, r4
 80093dc:	3302      	adds	r3, #2
 80093de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e2:	e7c5      	b.n	8009370 <_printf_common+0x58>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4622      	mov	r2, r4
 80093e8:	4649      	mov	r1, r9
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c0      	blx	r8
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0e6      	beq.n	80093c0 <_printf_common+0xa8>
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7d9      	b.n	80093aa <_printf_common+0x92>
	...

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	7e0f      	ldrb	r7, [r1, #24]
 80093fe:	4691      	mov	r9, r2
 8009400:	2f78      	cmp	r7, #120	; 0x78
 8009402:	4680      	mov	r8, r0
 8009404:	460c      	mov	r4, r1
 8009406:	469a      	mov	sl, r3
 8009408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800940a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	; 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d9 	beq.w	80095cc <_printf_i+0x1d4>
 800941a:	2f58      	cmp	r7, #88	; 0x58
 800941c:	f000 80a4 	beq.w	8009568 <_printf_i+0x170>
 8009420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a101      	add	r1, pc, #4	; (adr r1, 8009438 <_printf_i+0x40>)
 8009434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095b3 	.word	0x080095b3
 8009468:	080094d5 	.word	0x080094d5
 800946c:	08009595 	.word	0x08009595
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095d5 	.word	0x080095d5
 800947c:	08009421 	.word	0x08009421
 8009480:	080094d5 	.word	0x080094d5
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	0800959d 	.word	0x0800959d
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	602a      	str	r2, [r5, #0]
 8009498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0a4      	b.n	80095ee <_printf_i+0x1f6>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	6829      	ldr	r1, [r5, #0]
 80094a8:	0606      	lsls	r6, r0, #24
 80094aa:	f101 0304 	add.w	r3, r1, #4
 80094ae:	d50a      	bpl.n	80094c6 <_printf_i+0xce>
 80094b0:	680e      	ldr	r6, [r1, #0]
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xc8>
 80094b8:	232d      	movs	r3, #45	; 0x2d
 80094ba:	4276      	negs	r6, r6
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	230a      	movs	r3, #10
 80094c2:	485e      	ldr	r0, [pc, #376]	; (800963c <_printf_i+0x244>)
 80094c4:	e019      	b.n	80094fa <_printf_i+0x102>
 80094c6:	680e      	ldr	r6, [r1, #0]
 80094c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	bf18      	it	ne
 80094d0:	b236      	sxthne	r6, r6
 80094d2:	e7ef      	b.n	80094b4 <_printf_i+0xbc>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	6820      	ldr	r0, [r4, #0]
 80094d8:	1d19      	adds	r1, r3, #4
 80094da:	6029      	str	r1, [r5, #0]
 80094dc:	0601      	lsls	r1, r0, #24
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0xec>
 80094e0:	681e      	ldr	r6, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0xf2>
 80094e4:	0646      	lsls	r6, r0, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0xe8>
 80094e8:	881e      	ldrh	r6, [r3, #0]
 80094ea:	2f6f      	cmp	r7, #111	; 0x6f
 80094ec:	bf0c      	ite	eq
 80094ee:	2308      	moveq	r3, #8
 80094f0:	230a      	movne	r3, #10
 80094f2:	4852      	ldr	r0, [pc, #328]	; (800963c <_printf_i+0x244>)
 80094f4:	2100      	movs	r1, #0
 80094f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094fa:	6865      	ldr	r5, [r4, #4]
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	bfa8      	it	ge
 8009500:	6821      	ldrge	r1, [r4, #0]
 8009502:	60a5      	str	r5, [r4, #8]
 8009504:	bfa4      	itt	ge
 8009506:	f021 0104 	bicge.w	r1, r1, #4
 800950a:	6021      	strge	r1, [r4, #0]
 800950c:	b90e      	cbnz	r6, 8009512 <_printf_i+0x11a>
 800950e:	2d00      	cmp	r5, #0
 8009510:	d04d      	beq.n	80095ae <_printf_i+0x1b6>
 8009512:	4615      	mov	r5, r2
 8009514:	fbb6 f1f3 	udiv	r1, r6, r3
 8009518:	fb03 6711 	mls	r7, r3, r1, r6
 800951c:	5dc7      	ldrb	r7, [r0, r7]
 800951e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009522:	4637      	mov	r7, r6
 8009524:	42bb      	cmp	r3, r7
 8009526:	460e      	mov	r6, r1
 8009528:	d9f4      	bls.n	8009514 <_printf_i+0x11c>
 800952a:	2b08      	cmp	r3, #8
 800952c:	d10b      	bne.n	8009546 <_printf_i+0x14e>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	07de      	lsls	r6, r3, #31
 8009532:	d508      	bpl.n	8009546 <_printf_i+0x14e>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	6861      	ldr	r1, [r4, #4]
 8009538:	4299      	cmp	r1, r3
 800953a:	bfde      	ittt	le
 800953c:	2330      	movle	r3, #48	; 0x30
 800953e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009542:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009546:	1b52      	subs	r2, r2, r5
 8009548:	6122      	str	r2, [r4, #16]
 800954a:	464b      	mov	r3, r9
 800954c:	4621      	mov	r1, r4
 800954e:	4640      	mov	r0, r8
 8009550:	f8cd a000 	str.w	sl, [sp]
 8009554:	aa03      	add	r2, sp, #12
 8009556:	f7ff fedf 	bl	8009318 <_printf_common>
 800955a:	3001      	adds	r0, #1
 800955c:	d14c      	bne.n	80095f8 <_printf_i+0x200>
 800955e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009562:	b004      	add	sp, #16
 8009564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009568:	4834      	ldr	r0, [pc, #208]	; (800963c <_printf_i+0x244>)
 800956a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800956e:	6829      	ldr	r1, [r5, #0]
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	f851 6b04 	ldr.w	r6, [r1], #4
 8009576:	6029      	str	r1, [r5, #0]
 8009578:	061d      	lsls	r5, r3, #24
 800957a:	d514      	bpl.n	80095a6 <_printf_i+0x1ae>
 800957c:	07df      	lsls	r7, r3, #31
 800957e:	bf44      	itt	mi
 8009580:	f043 0320 	orrmi.w	r3, r3, #32
 8009584:	6023      	strmi	r3, [r4, #0]
 8009586:	b91e      	cbnz	r6, 8009590 <_printf_i+0x198>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	f023 0320 	bic.w	r3, r3, #32
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	2310      	movs	r3, #16
 8009592:	e7af      	b.n	80094f4 <_printf_i+0xfc>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	f043 0320 	orr.w	r3, r3, #32
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	2378      	movs	r3, #120	; 0x78
 800959e:	4828      	ldr	r0, [pc, #160]	; (8009640 <_printf_i+0x248>)
 80095a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a4:	e7e3      	b.n	800956e <_printf_i+0x176>
 80095a6:	0659      	lsls	r1, r3, #25
 80095a8:	bf48      	it	mi
 80095aa:	b2b6      	uxthmi	r6, r6
 80095ac:	e7e6      	b.n	800957c <_printf_i+0x184>
 80095ae:	4615      	mov	r5, r2
 80095b0:	e7bb      	b.n	800952a <_printf_i+0x132>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	6826      	ldr	r6, [r4, #0]
 80095b6:	1d18      	adds	r0, r3, #4
 80095b8:	6961      	ldr	r1, [r4, #20]
 80095ba:	6028      	str	r0, [r5, #0]
 80095bc:	0635      	lsls	r5, r6, #24
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	d501      	bpl.n	80095c6 <_printf_i+0x1ce>
 80095c2:	6019      	str	r1, [r3, #0]
 80095c4:	e002      	b.n	80095cc <_printf_i+0x1d4>
 80095c6:	0670      	lsls	r0, r6, #25
 80095c8:	d5fb      	bpl.n	80095c2 <_printf_i+0x1ca>
 80095ca:	8019      	strh	r1, [r3, #0]
 80095cc:	2300      	movs	r3, #0
 80095ce:	4615      	mov	r5, r2
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	e7ba      	b.n	800954a <_printf_i+0x152>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	2100      	movs	r1, #0
 80095d8:	1d1a      	adds	r2, r3, #4
 80095da:	602a      	str	r2, [r5, #0]
 80095dc:	681d      	ldr	r5, [r3, #0]
 80095de:	6862      	ldr	r2, [r4, #4]
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 fed7 	bl	800a394 <memchr>
 80095e6:	b108      	cbz	r0, 80095ec <_printf_i+0x1f4>
 80095e8:	1b40      	subs	r0, r0, r5
 80095ea:	6060      	str	r0, [r4, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	2300      	movs	r3, #0
 80095f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f6:	e7a8      	b.n	800954a <_printf_i+0x152>
 80095f8:	462a      	mov	r2, r5
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	47d0      	blx	sl
 8009602:	3001      	adds	r0, #1
 8009604:	d0ab      	beq.n	800955e <_printf_i+0x166>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	079b      	lsls	r3, r3, #30
 800960a:	d413      	bmi.n	8009634 <_printf_i+0x23c>
 800960c:	68e0      	ldr	r0, [r4, #12]
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	4298      	cmp	r0, r3
 8009612:	bfb8      	it	lt
 8009614:	4618      	movlt	r0, r3
 8009616:	e7a4      	b.n	8009562 <_printf_i+0x16a>
 8009618:	2301      	movs	r3, #1
 800961a:	4632      	mov	r2, r6
 800961c:	4649      	mov	r1, r9
 800961e:	4640      	mov	r0, r8
 8009620:	47d0      	blx	sl
 8009622:	3001      	adds	r0, #1
 8009624:	d09b      	beq.n	800955e <_printf_i+0x166>
 8009626:	3501      	adds	r5, #1
 8009628:	68e3      	ldr	r3, [r4, #12]
 800962a:	9903      	ldr	r1, [sp, #12]
 800962c:	1a5b      	subs	r3, r3, r1
 800962e:	42ab      	cmp	r3, r5
 8009630:	dcf2      	bgt.n	8009618 <_printf_i+0x220>
 8009632:	e7eb      	b.n	800960c <_printf_i+0x214>
 8009634:	2500      	movs	r5, #0
 8009636:	f104 0619 	add.w	r6, r4, #25
 800963a:	e7f5      	b.n	8009628 <_printf_i+0x230>
 800963c:	0800c276 	.word	0x0800c276
 8009640:	0800c287 	.word	0x0800c287

08009644 <siprintf>:
 8009644:	b40e      	push	{r1, r2, r3}
 8009646:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800964a:	b500      	push	{lr}
 800964c:	b09c      	sub	sp, #112	; 0x70
 800964e:	ab1d      	add	r3, sp, #116	; 0x74
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	9107      	str	r1, [sp, #28]
 8009656:	9104      	str	r1, [sp, #16]
 8009658:	4808      	ldr	r0, [pc, #32]	; (800967c <siprintf+0x38>)
 800965a:	4909      	ldr	r1, [pc, #36]	; (8009680 <siprintf+0x3c>)
 800965c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009660:	9105      	str	r1, [sp, #20]
 8009662:	6800      	ldr	r0, [r0, #0]
 8009664:	a902      	add	r1, sp, #8
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	f001 fb7e 	bl	800ad68 <_svfiprintf_r>
 800966c:	2200      	movs	r2, #0
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	b01c      	add	sp, #112	; 0x70
 8009674:	f85d eb04 	ldr.w	lr, [sp], #4
 8009678:	b003      	add	sp, #12
 800967a:	4770      	bx	lr
 800967c:	200000b8 	.word	0x200000b8
 8009680:	ffff0208 	.word	0xffff0208

08009684 <quorem>:
 8009684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	6903      	ldr	r3, [r0, #16]
 800968a:	690c      	ldr	r4, [r1, #16]
 800968c:	4607      	mov	r7, r0
 800968e:	42a3      	cmp	r3, r4
 8009690:	f2c0 8082 	blt.w	8009798 <quorem+0x114>
 8009694:	3c01      	subs	r4, #1
 8009696:	f100 0514 	add.w	r5, r0, #20
 800969a:	f101 0814 	add.w	r8, r1, #20
 800969e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ac:	3301      	adds	r3, #1
 80096ae:	429a      	cmp	r2, r3
 80096b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80096b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096bc:	d331      	bcc.n	8009722 <quorem+0x9e>
 80096be:	f04f 0e00 	mov.w	lr, #0
 80096c2:	4640      	mov	r0, r8
 80096c4:	46ac      	mov	ip, r5
 80096c6:	46f2      	mov	sl, lr
 80096c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80096cc:	b293      	uxth	r3, r2
 80096ce:	fb06 e303 	mla	r3, r6, r3, lr
 80096d2:	0c12      	lsrs	r2, r2, #16
 80096d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096d8:	b29b      	uxth	r3, r3
 80096da:	fb06 e202 	mla	r2, r6, r2, lr
 80096de:	ebaa 0303 	sub.w	r3, sl, r3
 80096e2:	f8dc a000 	ldr.w	sl, [ip]
 80096e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096ea:	fa1f fa8a 	uxth.w	sl, sl
 80096ee:	4453      	add	r3, sl
 80096f0:	f8dc a000 	ldr.w	sl, [ip]
 80096f4:	b292      	uxth	r2, r2
 80096f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80096fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009704:	4581      	cmp	r9, r0
 8009706:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800970a:	f84c 3b04 	str.w	r3, [ip], #4
 800970e:	d2db      	bcs.n	80096c8 <quorem+0x44>
 8009710:	f855 300b 	ldr.w	r3, [r5, fp]
 8009714:	b92b      	cbnz	r3, 8009722 <quorem+0x9e>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	3b04      	subs	r3, #4
 800971a:	429d      	cmp	r5, r3
 800971c:	461a      	mov	r2, r3
 800971e:	d32f      	bcc.n	8009780 <quorem+0xfc>
 8009720:	613c      	str	r4, [r7, #16]
 8009722:	4638      	mov	r0, r7
 8009724:	f001 f8d0 	bl	800a8c8 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	db25      	blt.n	8009778 <quorem+0xf4>
 800972c:	4628      	mov	r0, r5
 800972e:	f04f 0c00 	mov.w	ip, #0
 8009732:	3601      	adds	r6, #1
 8009734:	f858 1b04 	ldr.w	r1, [r8], #4
 8009738:	f8d0 e000 	ldr.w	lr, [r0]
 800973c:	b28b      	uxth	r3, r1
 800973e:	ebac 0303 	sub.w	r3, ip, r3
 8009742:	fa1f f28e 	uxth.w	r2, lr
 8009746:	4413      	add	r3, r2
 8009748:	0c0a      	lsrs	r2, r1, #16
 800974a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800974e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009752:	b29b      	uxth	r3, r3
 8009754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009758:	45c1      	cmp	r9, r8
 800975a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800975e:	f840 3b04 	str.w	r3, [r0], #4
 8009762:	d2e7      	bcs.n	8009734 <quorem+0xb0>
 8009764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976c:	b922      	cbnz	r2, 8009778 <quorem+0xf4>
 800976e:	3b04      	subs	r3, #4
 8009770:	429d      	cmp	r5, r3
 8009772:	461a      	mov	r2, r3
 8009774:	d30a      	bcc.n	800978c <quorem+0x108>
 8009776:	613c      	str	r4, [r7, #16]
 8009778:	4630      	mov	r0, r6
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	3b04      	subs	r3, #4
 8009784:	2a00      	cmp	r2, #0
 8009786:	d1cb      	bne.n	8009720 <quorem+0x9c>
 8009788:	3c01      	subs	r4, #1
 800978a:	e7c6      	b.n	800971a <quorem+0x96>
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	3b04      	subs	r3, #4
 8009790:	2a00      	cmp	r2, #0
 8009792:	d1f0      	bne.n	8009776 <quorem+0xf2>
 8009794:	3c01      	subs	r4, #1
 8009796:	e7eb      	b.n	8009770 <quorem+0xec>
 8009798:	2000      	movs	r0, #0
 800979a:	e7ee      	b.n	800977a <quorem+0xf6>
 800979c:	0000      	movs	r0, r0
	...

080097a0 <_dtoa_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	4616      	mov	r6, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097aa:	b099      	sub	sp, #100	; 0x64
 80097ac:	4605      	mov	r5, r0
 80097ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097b6:	b974      	cbnz	r4, 80097d6 <_dtoa_r+0x36>
 80097b8:	2010      	movs	r0, #16
 80097ba:	f000 fde3 	bl	800a384 <malloc>
 80097be:	4602      	mov	r2, r0
 80097c0:	6268      	str	r0, [r5, #36]	; 0x24
 80097c2:	b920      	cbnz	r0, 80097ce <_dtoa_r+0x2e>
 80097c4:	21ea      	movs	r1, #234	; 0xea
 80097c6:	4ba8      	ldr	r3, [pc, #672]	; (8009a68 <_dtoa_r+0x2c8>)
 80097c8:	48a8      	ldr	r0, [pc, #672]	; (8009a6c <_dtoa_r+0x2cc>)
 80097ca:	f001 fbdd 	bl	800af88 <__assert_func>
 80097ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097d2:	6004      	str	r4, [r0, #0]
 80097d4:	60c4      	str	r4, [r0, #12]
 80097d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097d8:	6819      	ldr	r1, [r3, #0]
 80097da:	b151      	cbz	r1, 80097f2 <_dtoa_r+0x52>
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	2301      	movs	r3, #1
 80097e0:	4093      	lsls	r3, r2
 80097e2:	604a      	str	r2, [r1, #4]
 80097e4:	608b      	str	r3, [r1, #8]
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 fe30 	bl	800a44c <_Bfree>
 80097ec:	2200      	movs	r2, #0
 80097ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	1e3b      	subs	r3, r7, #0
 80097f4:	bfaf      	iteee	ge
 80097f6:	2300      	movge	r3, #0
 80097f8:	2201      	movlt	r2, #1
 80097fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097fe:	9305      	strlt	r3, [sp, #20]
 8009800:	bfa8      	it	ge
 8009802:	f8c8 3000 	strge.w	r3, [r8]
 8009806:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800980a:	4b99      	ldr	r3, [pc, #612]	; (8009a70 <_dtoa_r+0x2d0>)
 800980c:	bfb8      	it	lt
 800980e:	f8c8 2000 	strlt.w	r2, [r8]
 8009812:	ea33 0309 	bics.w	r3, r3, r9
 8009816:	d119      	bne.n	800984c <_dtoa_r+0xac>
 8009818:	f242 730f 	movw	r3, #9999	; 0x270f
 800981c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009824:	4333      	orrs	r3, r6
 8009826:	f000 857f 	beq.w	800a328 <_dtoa_r+0xb88>
 800982a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800982c:	b953      	cbnz	r3, 8009844 <_dtoa_r+0xa4>
 800982e:	4b91      	ldr	r3, [pc, #580]	; (8009a74 <_dtoa_r+0x2d4>)
 8009830:	e022      	b.n	8009878 <_dtoa_r+0xd8>
 8009832:	4b91      	ldr	r3, [pc, #580]	; (8009a78 <_dtoa_r+0x2d8>)
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	3308      	adds	r3, #8
 8009838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	9803      	ldr	r0, [sp, #12]
 800983e:	b019      	add	sp, #100	; 0x64
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	4b8b      	ldr	r3, [pc, #556]	; (8009a74 <_dtoa_r+0x2d4>)
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	3303      	adds	r3, #3
 800984a:	e7f5      	b.n	8009838 <_dtoa_r+0x98>
 800984c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009850:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	f7f7 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8009860:	4680      	mov	r8, r0
 8009862:	b158      	cbz	r0, 800987c <_dtoa_r+0xdc>
 8009864:	2301      	movs	r3, #1
 8009866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8558 	beq.w	800a322 <_dtoa_r+0xb82>
 8009872:	4882      	ldr	r0, [pc, #520]	; (8009a7c <_dtoa_r+0x2dc>)
 8009874:	6018      	str	r0, [r3, #0]
 8009876:	1e43      	subs	r3, r0, #1
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	e7df      	b.n	800983c <_dtoa_r+0x9c>
 800987c:	ab16      	add	r3, sp, #88	; 0x58
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	ab17      	add	r3, sp, #92	; 0x5c
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4628      	mov	r0, r5
 8009886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800988a:	f001 f8c5 	bl	800aa18 <__d2b>
 800988e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009892:	4683      	mov	fp, r0
 8009894:	2c00      	cmp	r4, #0
 8009896:	d07f      	beq.n	8009998 <_dtoa_r+0x1f8>
 8009898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800989c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098b2:	2200      	movs	r2, #0
 80098b4:	4b72      	ldr	r3, [pc, #456]	; (8009a80 <_dtoa_r+0x2e0>)
 80098b6:	f7f6 fc57 	bl	8000168 <__aeabi_dsub>
 80098ba:	a365      	add	r3, pc, #404	; (adr r3, 8009a50 <_dtoa_r+0x2b0>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	a364      	add	r3, pc, #400	; (adr r3, 8009a58 <_dtoa_r+0x2b8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fc4f 	bl	800016c <__adddf3>
 80098ce:	4606      	mov	r6, r0
 80098d0:	4620      	mov	r0, r4
 80098d2:	460f      	mov	r7, r1
 80098d4:	f7f6 fd96 	bl	8000404 <__aeabi_i2d>
 80098d8:	a361      	add	r3, pc, #388	; (adr r3, 8009a60 <_dtoa_r+0x2c0>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f6 fdfb 	bl	80004d8 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f6 fc3f 	bl	800016c <__adddf3>
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	f7f7 f8a1 	bl	8000a38 <__aeabi_d2iz>
 80098f6:	2200      	movs	r2, #0
 80098f8:	4682      	mov	sl, r0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f7 f85c 	bl	80009bc <__aeabi_dcmplt>
 8009904:	b148      	cbz	r0, 800991a <_dtoa_r+0x17a>
 8009906:	4650      	mov	r0, sl
 8009908:	f7f6 fd7c 	bl	8000404 <__aeabi_i2d>
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	f7f7 f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8009914:	b908      	cbnz	r0, 800991a <_dtoa_r+0x17a>
 8009916:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800991a:	f1ba 0f16 	cmp.w	sl, #22
 800991e:	d858      	bhi.n	80099d2 <_dtoa_r+0x232>
 8009920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009924:	4b57      	ldr	r3, [pc, #348]	; (8009a84 <_dtoa_r+0x2e4>)
 8009926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f7 f845 	bl	80009bc <__aeabi_dcmplt>
 8009932:	2800      	cmp	r0, #0
 8009934:	d04f      	beq.n	80099d6 <_dtoa_r+0x236>
 8009936:	2300      	movs	r3, #0
 8009938:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800993c:	930f      	str	r3, [sp, #60]	; 0x3c
 800993e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009940:	1b1c      	subs	r4, r3, r4
 8009942:	1e63      	subs	r3, r4, #1
 8009944:	9309      	str	r3, [sp, #36]	; 0x24
 8009946:	bf49      	itett	mi
 8009948:	f1c4 0301 	rsbmi	r3, r4, #1
 800994c:	2300      	movpl	r3, #0
 800994e:	9306      	strmi	r3, [sp, #24]
 8009950:	2300      	movmi	r3, #0
 8009952:	bf54      	ite	pl
 8009954:	9306      	strpl	r3, [sp, #24]
 8009956:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	db3d      	blt.n	80099da <_dtoa_r+0x23a>
 800995e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009960:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009964:	4453      	add	r3, sl
 8009966:	9309      	str	r3, [sp, #36]	; 0x24
 8009968:	2300      	movs	r3, #0
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800996e:	2b09      	cmp	r3, #9
 8009970:	f200 808c 	bhi.w	8009a8c <_dtoa_r+0x2ec>
 8009974:	2b05      	cmp	r3, #5
 8009976:	bfc4      	itt	gt
 8009978:	3b04      	subgt	r3, #4
 800997a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800997c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800997e:	bfc8      	it	gt
 8009980:	2400      	movgt	r4, #0
 8009982:	f1a3 0302 	sub.w	r3, r3, #2
 8009986:	bfd8      	it	le
 8009988:	2401      	movle	r4, #1
 800998a:	2b03      	cmp	r3, #3
 800998c:	f200 808a 	bhi.w	8009aa4 <_dtoa_r+0x304>
 8009990:	e8df f003 	tbb	[pc, r3]
 8009994:	5b4d4f2d 	.word	0x5b4d4f2d
 8009998:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800999c:	441c      	add	r4, r3
 800999e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	bfc3      	ittte	gt
 80099a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80099b2:	f1c3 0320 	rsble	r3, r3, #32
 80099b6:	bfc6      	itte	gt
 80099b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099bc:	4318      	orrgt	r0, r3
 80099be:	fa06 f003 	lslle.w	r0, r6, r3
 80099c2:	f7f6 fd0f 	bl	80003e4 <__aeabi_ui2d>
 80099c6:	2301      	movs	r3, #1
 80099c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80099cc:	3c01      	subs	r4, #1
 80099ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80099d0:	e76f      	b.n	80098b2 <_dtoa_r+0x112>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e7b2      	b.n	800993c <_dtoa_r+0x19c>
 80099d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80099d8:	e7b1      	b.n	800993e <_dtoa_r+0x19e>
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	eba3 030a 	sub.w	r3, r3, sl
 80099e0:	9306      	str	r3, [sp, #24]
 80099e2:	f1ca 0300 	rsb	r3, sl, #0
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
 80099e8:	2300      	movs	r3, #0
 80099ea:	930e      	str	r3, [sp, #56]	; 0x38
 80099ec:	e7be      	b.n	800996c <_dtoa_r+0x1cc>
 80099ee:	2300      	movs	r3, #0
 80099f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dc58      	bgt.n	8009aaa <_dtoa_r+0x30a>
 80099f8:	f04f 0901 	mov.w	r9, #1
 80099fc:	464b      	mov	r3, r9
 80099fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a02:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009a06:	2200      	movs	r2, #0
 8009a08:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a0a:	6042      	str	r2, [r0, #4]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	f102 0614 	add.w	r6, r2, #20
 8009a12:	429e      	cmp	r6, r3
 8009a14:	6841      	ldr	r1, [r0, #4]
 8009a16:	d94e      	bls.n	8009ab6 <_dtoa_r+0x316>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f000 fcd7 	bl	800a3cc <_Balloc>
 8009a1e:	9003      	str	r0, [sp, #12]
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d14c      	bne.n	8009abe <_dtoa_r+0x31e>
 8009a24:	4602      	mov	r2, r0
 8009a26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a2a:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <_dtoa_r+0x2e8>)
 8009a2c:	e6cc      	b.n	80097c8 <_dtoa_r+0x28>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e7de      	b.n	80099f0 <_dtoa_r+0x250>
 8009a32:	2300      	movs	r3, #0
 8009a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a38:	eb0a 0903 	add.w	r9, sl, r3
 8009a3c:	f109 0301 	add.w	r3, r9, #1
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	9308      	str	r3, [sp, #32]
 8009a44:	bfb8      	it	lt
 8009a46:	2301      	movlt	r3, #1
 8009a48:	e7dd      	b.n	8009a06 <_dtoa_r+0x266>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e7f2      	b.n	8009a34 <_dtoa_r+0x294>
 8009a4e:	bf00      	nop
 8009a50:	636f4361 	.word	0x636f4361
 8009a54:	3fd287a7 	.word	0x3fd287a7
 8009a58:	8b60c8b3 	.word	0x8b60c8b3
 8009a5c:	3fc68a28 	.word	0x3fc68a28
 8009a60:	509f79fb 	.word	0x509f79fb
 8009a64:	3fd34413 	.word	0x3fd34413
 8009a68:	0800c2a5 	.word	0x0800c2a5
 8009a6c:	0800c2bc 	.word	0x0800c2bc
 8009a70:	7ff00000 	.word	0x7ff00000
 8009a74:	0800c2a1 	.word	0x0800c2a1
 8009a78:	0800c298 	.word	0x0800c298
 8009a7c:	0800c275 	.word	0x0800c275
 8009a80:	3ff80000 	.word	0x3ff80000
 8009a84:	0800c3b0 	.word	0x0800c3b0
 8009a88:	0800c317 	.word	0x0800c317
 8009a8c:	2401      	movs	r4, #1
 8009a8e:	2300      	movs	r3, #0
 8009a90:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a92:	9322      	str	r3, [sp, #136]	; 0x88
 8009a94:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2312      	movs	r3, #18
 8009a9c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009aa0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009aa2:	e7b0      	b.n	8009a06 <_dtoa_r+0x266>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa8:	e7f4      	b.n	8009a94 <_dtoa_r+0x2f4>
 8009aaa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009aae:	464b      	mov	r3, r9
 8009ab0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009ab4:	e7a7      	b.n	8009a06 <_dtoa_r+0x266>
 8009ab6:	3101      	adds	r1, #1
 8009ab8:	6041      	str	r1, [r0, #4]
 8009aba:	0052      	lsls	r2, r2, #1
 8009abc:	e7a7      	b.n	8009a0e <_dtoa_r+0x26e>
 8009abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ac0:	9a03      	ldr	r2, [sp, #12]
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	2b0e      	cmp	r3, #14
 8009ac8:	f200 80a8 	bhi.w	8009c1c <_dtoa_r+0x47c>
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	f000 80a5 	beq.w	8009c1c <_dtoa_r+0x47c>
 8009ad2:	f1ba 0f00 	cmp.w	sl, #0
 8009ad6:	dd34      	ble.n	8009b42 <_dtoa_r+0x3a2>
 8009ad8:	4a9a      	ldr	r2, [pc, #616]	; (8009d44 <_dtoa_r+0x5a4>)
 8009ada:	f00a 030f 	and.w	r3, sl, #15
 8009ade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ae2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009aea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009aee:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009af2:	d016      	beq.n	8009b22 <_dtoa_r+0x382>
 8009af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009af8:	4b93      	ldr	r3, [pc, #588]	; (8009d48 <_dtoa_r+0x5a8>)
 8009afa:	2703      	movs	r7, #3
 8009afc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b00:	f7f6 fe14 	bl	800072c <__aeabi_ddiv>
 8009b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b08:	f004 040f 	and.w	r4, r4, #15
 8009b0c:	4e8e      	ldr	r6, [pc, #568]	; (8009d48 <_dtoa_r+0x5a8>)
 8009b0e:	b954      	cbnz	r4, 8009b26 <_dtoa_r+0x386>
 8009b10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b18:	f7f6 fe08 	bl	800072c <__aeabi_ddiv>
 8009b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b20:	e029      	b.n	8009b76 <_dtoa_r+0x3d6>
 8009b22:	2702      	movs	r7, #2
 8009b24:	e7f2      	b.n	8009b0c <_dtoa_r+0x36c>
 8009b26:	07e1      	lsls	r1, r4, #31
 8009b28:	d508      	bpl.n	8009b3c <_dtoa_r+0x39c>
 8009b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b32:	f7f6 fcd1 	bl	80004d8 <__aeabi_dmul>
 8009b36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b3a:	3701      	adds	r7, #1
 8009b3c:	1064      	asrs	r4, r4, #1
 8009b3e:	3608      	adds	r6, #8
 8009b40:	e7e5      	b.n	8009b0e <_dtoa_r+0x36e>
 8009b42:	f000 80a5 	beq.w	8009c90 <_dtoa_r+0x4f0>
 8009b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b4a:	f1ca 0400 	rsb	r4, sl, #0
 8009b4e:	4b7d      	ldr	r3, [pc, #500]	; (8009d44 <_dtoa_r+0x5a4>)
 8009b50:	f004 020f 	and.w	r2, r4, #15
 8009b54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fcbc 	bl	80004d8 <__aeabi_dmul>
 8009b60:	2702      	movs	r7, #2
 8009b62:	2300      	movs	r3, #0
 8009b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b68:	4e77      	ldr	r6, [pc, #476]	; (8009d48 <_dtoa_r+0x5a8>)
 8009b6a:	1124      	asrs	r4, r4, #4
 8009b6c:	2c00      	cmp	r4, #0
 8009b6e:	f040 8084 	bne.w	8009c7a <_dtoa_r+0x4da>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1d2      	bne.n	8009b1c <_dtoa_r+0x37c>
 8009b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 808b 	beq.w	8009c94 <_dtoa_r+0x4f4>
 8009b7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	4b6f      	ldr	r3, [pc, #444]	; (8009d4c <_dtoa_r+0x5ac>)
 8009b8e:	f7f6 ff15 	bl	80009bc <__aeabi_dcmplt>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d07e      	beq.n	8009c94 <_dtoa_r+0x4f4>
 8009b96:	9b08      	ldr	r3, [sp, #32]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d07b      	beq.n	8009c94 <_dtoa_r+0x4f4>
 8009b9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ba0:	dd38      	ble.n	8009c14 <_dtoa_r+0x474>
 8009ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4b69      	ldr	r3, [pc, #420]	; (8009d50 <_dtoa_r+0x5b0>)
 8009baa:	f7f6 fc95 	bl	80004d8 <__aeabi_dmul>
 8009bae:	464c      	mov	r4, r9
 8009bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8009bb8:	3701      	adds	r7, #1
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f7f6 fc22 	bl	8000404 <__aeabi_i2d>
 8009bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bc4:	f7f6 fc88 	bl	80004d8 <__aeabi_dmul>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <_dtoa_r+0x5b4>)
 8009bcc:	f7f6 face 	bl	800016c <__adddf3>
 8009bd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bd8:	9611      	str	r6, [sp, #68]	; 0x44
 8009bda:	2c00      	cmp	r4, #0
 8009bdc:	d15d      	bne.n	8009c9a <_dtoa_r+0x4fa>
 8009bde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be2:	2200      	movs	r2, #0
 8009be4:	4b5c      	ldr	r3, [pc, #368]	; (8009d58 <_dtoa_r+0x5b8>)
 8009be6:	f7f6 fabf 	bl	8000168 <__aeabi_dsub>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bf2:	4633      	mov	r3, r6
 8009bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bf6:	f7f6 feff 	bl	80009f8 <__aeabi_dcmpgt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f040 829c 	bne.w	800a138 <_dtoa_r+0x998>
 8009c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c0a:	f7f6 fed7 	bl	80009bc <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f040 8290 	bne.w	800a134 <_dtoa_r+0x994>
 8009c14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f2c0 8152 	blt.w	8009ec8 <_dtoa_r+0x728>
 8009c24:	f1ba 0f0e 	cmp.w	sl, #14
 8009c28:	f300 814e 	bgt.w	8009ec8 <_dtoa_r+0x728>
 8009c2c:	4b45      	ldr	r3, [pc, #276]	; (8009d44 <_dtoa_r+0x5a4>)
 8009c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f280 80db 	bge.w	8009df8 <_dtoa_r+0x658>
 8009c42:	9b08      	ldr	r3, [sp, #32]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f300 80d7 	bgt.w	8009df8 <_dtoa_r+0x658>
 8009c4a:	f040 8272 	bne.w	800a132 <_dtoa_r+0x992>
 8009c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c52:	2200      	movs	r2, #0
 8009c54:	4b40      	ldr	r3, [pc, #256]	; (8009d58 <_dtoa_r+0x5b8>)
 8009c56:	f7f6 fc3f 	bl	80004d8 <__aeabi_dmul>
 8009c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5e:	f7f6 fec1 	bl	80009e4 <__aeabi_dcmpge>
 8009c62:	9c08      	ldr	r4, [sp, #32]
 8009c64:	4626      	mov	r6, r4
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f040 8248 	bne.w	800a0fc <_dtoa_r+0x95c>
 8009c6c:	2331      	movs	r3, #49	; 0x31
 8009c6e:	9f03      	ldr	r7, [sp, #12]
 8009c70:	f10a 0a01 	add.w	sl, sl, #1
 8009c74:	f807 3b01 	strb.w	r3, [r7], #1
 8009c78:	e244      	b.n	800a104 <_dtoa_r+0x964>
 8009c7a:	07e2      	lsls	r2, r4, #31
 8009c7c:	d505      	bpl.n	8009c8a <_dtoa_r+0x4ea>
 8009c7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c82:	f7f6 fc29 	bl	80004d8 <__aeabi_dmul>
 8009c86:	2301      	movs	r3, #1
 8009c88:	3701      	adds	r7, #1
 8009c8a:	1064      	asrs	r4, r4, #1
 8009c8c:	3608      	adds	r6, #8
 8009c8e:	e76d      	b.n	8009b6c <_dtoa_r+0x3cc>
 8009c90:	2702      	movs	r7, #2
 8009c92:	e770      	b.n	8009b76 <_dtoa_r+0x3d6>
 8009c94:	46d0      	mov	r8, sl
 8009c96:	9c08      	ldr	r4, [sp, #32]
 8009c98:	e78f      	b.n	8009bba <_dtoa_r+0x41a>
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <_dtoa_r+0x5a4>)
 8009c9e:	4421      	add	r1, r4
 8009ca0:	9112      	str	r1, [sp, #72]	; 0x48
 8009ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ca8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009cac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	d055      	beq.n	8009d60 <_dtoa_r+0x5c0>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4929      	ldr	r1, [pc, #164]	; (8009d5c <_dtoa_r+0x5bc>)
 8009cb8:	f7f6 fd38 	bl	800072c <__aeabi_ddiv>
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cc8:	9f03      	ldr	r7, [sp, #12]
 8009cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cce:	f7f6 feb3 	bl	8000a38 <__aeabi_d2iz>
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	f7f6 fb96 	bl	8000404 <__aeabi_i2d>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce0:	f7f6 fa42 	bl	8000168 <__aeabi_dsub>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	3430      	adds	r4, #48	; 0x30
 8009cea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cf2:	f807 4b01 	strb.w	r4, [r7], #1
 8009cf6:	f7f6 fe61 	bl	80009bc <__aeabi_dcmplt>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d174      	bne.n	8009de8 <_dtoa_r+0x648>
 8009cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d02:	2000      	movs	r0, #0
 8009d04:	4911      	ldr	r1, [pc, #68]	; (8009d4c <_dtoa_r+0x5ac>)
 8009d06:	f7f6 fa2f 	bl	8000168 <__aeabi_dsub>
 8009d0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d0e:	f7f6 fe55 	bl	80009bc <__aeabi_dcmplt>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f040 80b7 	bne.w	8009e86 <_dtoa_r+0x6e6>
 8009d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d1a:	429f      	cmp	r7, r3
 8009d1c:	f43f af7a 	beq.w	8009c14 <_dtoa_r+0x474>
 8009d20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d24:	2200      	movs	r2, #0
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <_dtoa_r+0x5b0>)
 8009d28:	f7f6 fbd6 	bl	80004d8 <__aeabi_dmul>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d36:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <_dtoa_r+0x5b0>)
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d40:	e7c3      	b.n	8009cca <_dtoa_r+0x52a>
 8009d42:	bf00      	nop
 8009d44:	0800c3b0 	.word	0x0800c3b0
 8009d48:	0800c388 	.word	0x0800c388
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	40240000 	.word	0x40240000
 8009d54:	401c0000 	.word	0x401c0000
 8009d58:	40140000 	.word	0x40140000
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	4630      	mov	r0, r6
 8009d62:	4639      	mov	r1, r7
 8009d64:	f7f6 fbb8 	bl	80004d8 <__aeabi_dmul>
 8009d68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d6e:	9c03      	ldr	r4, [sp, #12]
 8009d70:	9314      	str	r3, [sp, #80]	; 0x50
 8009d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d76:	f7f6 fe5f 	bl	8000a38 <__aeabi_d2iz>
 8009d7a:	9015      	str	r0, [sp, #84]	; 0x54
 8009d7c:	f7f6 fb42 	bl	8000404 <__aeabi_i2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d88:	f7f6 f9ee 	bl	8000168 <__aeabi_dsub>
 8009d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d8e:	4606      	mov	r6, r0
 8009d90:	3330      	adds	r3, #48	; 0x30
 8009d92:	f804 3b01 	strb.w	r3, [r4], #1
 8009d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d98:	460f      	mov	r7, r1
 8009d9a:	429c      	cmp	r4, r3
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	d124      	bne.n	8009dec <_dtoa_r+0x64c>
 8009da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009da6:	4bb0      	ldr	r3, [pc, #704]	; (800a068 <_dtoa_r+0x8c8>)
 8009da8:	f7f6 f9e0 	bl	800016c <__adddf3>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4630      	mov	r0, r6
 8009db2:	4639      	mov	r1, r7
 8009db4:	f7f6 fe20 	bl	80009f8 <__aeabi_dcmpgt>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d163      	bne.n	8009e84 <_dtoa_r+0x6e4>
 8009dbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	49a9      	ldr	r1, [pc, #676]	; (800a068 <_dtoa_r+0x8c8>)
 8009dc4:	f7f6 f9d0 	bl	8000168 <__aeabi_dsub>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4630      	mov	r0, r6
 8009dce:	4639      	mov	r1, r7
 8009dd0:	f7f6 fdf4 	bl	80009bc <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f af1d 	beq.w	8009c14 <_dtoa_r+0x474>
 8009dda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009ddc:	1e7b      	subs	r3, r7, #1
 8009dde:	9314      	str	r3, [sp, #80]	; 0x50
 8009de0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d0f8      	beq.n	8009dda <_dtoa_r+0x63a>
 8009de8:	46c2      	mov	sl, r8
 8009dea:	e03b      	b.n	8009e64 <_dtoa_r+0x6c4>
 8009dec:	4b9f      	ldr	r3, [pc, #636]	; (800a06c <_dtoa_r+0x8cc>)
 8009dee:	f7f6 fb73 	bl	80004d8 <__aeabi_dmul>
 8009df2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009df6:	e7bc      	b.n	8009d72 <_dtoa_r+0x5d2>
 8009df8:	9f03      	ldr	r7, [sp, #12]
 8009dfa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fc91 	bl	800072c <__aeabi_ddiv>
 8009e0a:	f7f6 fe15 	bl	8000a38 <__aeabi_d2iz>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	f7f6 faf8 	bl	8000404 <__aeabi_i2d>
 8009e14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e18:	f7f6 fb5e 	bl	80004d8 <__aeabi_dmul>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4640      	mov	r0, r8
 8009e22:	4649      	mov	r1, r9
 8009e24:	f7f6 f9a0 	bl	8000168 <__aeabi_dsub>
 8009e28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e2c:	f807 6b01 	strb.w	r6, [r7], #1
 8009e30:	9e03      	ldr	r6, [sp, #12]
 8009e32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e36:	1bbe      	subs	r6, r7, r6
 8009e38:	45b4      	cmp	ip, r6
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	d136      	bne.n	8009eae <_dtoa_r+0x70e>
 8009e40:	f7f6 f994 	bl	800016c <__adddf3>
 8009e44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e48:	4680      	mov	r8, r0
 8009e4a:	4689      	mov	r9, r1
 8009e4c:	f7f6 fdd4 	bl	80009f8 <__aeabi_dcmpgt>
 8009e50:	bb58      	cbnz	r0, 8009eaa <_dtoa_r+0x70a>
 8009e52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e56:	4640      	mov	r0, r8
 8009e58:	4649      	mov	r1, r9
 8009e5a:	f7f6 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8009e5e:	b108      	cbz	r0, 8009e64 <_dtoa_r+0x6c4>
 8009e60:	07e1      	lsls	r1, r4, #31
 8009e62:	d422      	bmi.n	8009eaa <_dtoa_r+0x70a>
 8009e64:	4628      	mov	r0, r5
 8009e66:	4659      	mov	r1, fp
 8009e68:	f000 faf0 	bl	800a44c <_Bfree>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	703b      	strb	r3, [r7, #0]
 8009e70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e72:	f10a 0001 	add.w	r0, sl, #1
 8009e76:	6018      	str	r0, [r3, #0]
 8009e78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f acde 	beq.w	800983c <_dtoa_r+0x9c>
 8009e80:	601f      	str	r7, [r3, #0]
 8009e82:	e4db      	b.n	800983c <_dtoa_r+0x9c>
 8009e84:	4627      	mov	r7, r4
 8009e86:	463b      	mov	r3, r7
 8009e88:	461f      	mov	r7, r3
 8009e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e8e:	2a39      	cmp	r2, #57	; 0x39
 8009e90:	d107      	bne.n	8009ea2 <_dtoa_r+0x702>
 8009e92:	9a03      	ldr	r2, [sp, #12]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d1f7      	bne.n	8009e88 <_dtoa_r+0x6e8>
 8009e98:	2230      	movs	r2, #48	; 0x30
 8009e9a:	9903      	ldr	r1, [sp, #12]
 8009e9c:	f108 0801 	add.w	r8, r8, #1
 8009ea0:	700a      	strb	r2, [r1, #0]
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	3201      	adds	r2, #1
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	e79e      	b.n	8009de8 <_dtoa_r+0x648>
 8009eaa:	46d0      	mov	r8, sl
 8009eac:	e7eb      	b.n	8009e86 <_dtoa_r+0x6e6>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4b6e      	ldr	r3, [pc, #440]	; (800a06c <_dtoa_r+0x8cc>)
 8009eb2:	f7f6 fb11 	bl	80004d8 <__aeabi_dmul>
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4680      	mov	r8, r0
 8009ebc:	4689      	mov	r9, r1
 8009ebe:	f7f6 fd73 	bl	80009a8 <__aeabi_dcmpeq>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d09b      	beq.n	8009dfe <_dtoa_r+0x65e>
 8009ec6:	e7cd      	b.n	8009e64 <_dtoa_r+0x6c4>
 8009ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	f000 80d0 	beq.w	800a070 <_dtoa_r+0x8d0>
 8009ed0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ed2:	2a01      	cmp	r2, #1
 8009ed4:	f300 80ae 	bgt.w	800a034 <_dtoa_r+0x894>
 8009ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	f000 80a6 	beq.w	800a02c <_dtoa_r+0x88c>
 8009ee0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ee4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ee6:	9f06      	ldr	r7, [sp, #24]
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	2101      	movs	r1, #1
 8009eec:	441a      	add	r2, r3
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	441a      	add	r2, r3
 8009ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef8:	f000 fb5e 	bl	800a5b8 <__i2b>
 8009efc:	4606      	mov	r6, r0
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	dd0c      	ble.n	8009f1c <_dtoa_r+0x77c>
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd09      	ble.n	8009f1c <_dtoa_r+0x77c>
 8009f08:	42bb      	cmp	r3, r7
 8009f0a:	bfa8      	it	ge
 8009f0c:	463b      	movge	r3, r7
 8009f0e:	9a06      	ldr	r2, [sp, #24]
 8009f10:	1aff      	subs	r7, r7, r3
 8009f12:	1ad2      	subs	r2, r2, r3
 8009f14:	9206      	str	r2, [sp, #24]
 8009f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1e:	b1f3      	cbz	r3, 8009f5e <_dtoa_r+0x7be>
 8009f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80a8 	beq.w	800a078 <_dtoa_r+0x8d8>
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	dd10      	ble.n	8009f4e <_dtoa_r+0x7ae>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 fbff 	bl	800a734 <__pow5mult>
 8009f36:	465a      	mov	r2, fp
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 fb51 	bl	800a5e4 <__multiply>
 8009f42:	4680      	mov	r8, r0
 8009f44:	4659      	mov	r1, fp
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 fa80 	bl	800a44c <_Bfree>
 8009f4c:	46c3      	mov	fp, r8
 8009f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f50:	1b1a      	subs	r2, r3, r4
 8009f52:	d004      	beq.n	8009f5e <_dtoa_r+0x7be>
 8009f54:	4659      	mov	r1, fp
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fbec 	bl	800a734 <__pow5mult>
 8009f5c:	4683      	mov	fp, r0
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 fb29 	bl	800a5b8 <__i2b>
 8009f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f68:	4604      	mov	r4, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f340 8086 	ble.w	800a07c <_dtoa_r+0x8dc>
 8009f70:	461a      	mov	r2, r3
 8009f72:	4601      	mov	r1, r0
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 fbdd 	bl	800a734 <__pow5mult>
 8009f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	dd7f      	ble.n	800a082 <_dtoa_r+0x8e2>
 8009f82:	f04f 0800 	mov.w	r8, #0
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f8c:	6918      	ldr	r0, [r3, #16]
 8009f8e:	f000 fac5 	bl	800a51c <__hi0bits>
 8009f92:	f1c0 0020 	rsb	r0, r0, #32
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	4418      	add	r0, r3
 8009f9a:	f010 001f 	ands.w	r0, r0, #31
 8009f9e:	f000 8092 	beq.w	800a0c6 <_dtoa_r+0x926>
 8009fa2:	f1c0 0320 	rsb	r3, r0, #32
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	f340 808a 	ble.w	800a0c0 <_dtoa_r+0x920>
 8009fac:	f1c0 001c 	rsb	r0, r0, #28
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	4407      	add	r7, r0
 8009fb4:	4403      	add	r3, r0
 8009fb6:	9306      	str	r3, [sp, #24]
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	4403      	add	r3, r0
 8009fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd05      	ble.n	8009fd0 <_dtoa_r+0x830>
 8009fc4:	4659      	mov	r1, fp
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f000 fc0d 	bl	800a7e8 <__lshift>
 8009fce:	4683      	mov	fp, r0
 8009fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dd05      	ble.n	8009fe2 <_dtoa_r+0x842>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fc04 	bl	800a7e8 <__lshift>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d070      	beq.n	800a0ca <_dtoa_r+0x92a>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4658      	mov	r0, fp
 8009fec:	f000 fc6c 	bl	800a8c8 <__mcmp>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	da6a      	bge.n	800a0ca <_dtoa_r+0x92a>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 fa48 	bl	800a490 <__multadd>
 800a000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a002:	4683      	mov	fp, r0
 800a004:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8194 	beq.w	800a336 <_dtoa_r+0xb96>
 800a00e:	4631      	mov	r1, r6
 800a010:	2300      	movs	r3, #0
 800a012:	220a      	movs	r2, #10
 800a014:	4628      	mov	r0, r5
 800a016:	f000 fa3b 	bl	800a490 <__multadd>
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	4606      	mov	r6, r0
 800a020:	f300 8093 	bgt.w	800a14a <_dtoa_r+0x9aa>
 800a024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a026:	2b02      	cmp	r3, #2
 800a028:	dc57      	bgt.n	800a0da <_dtoa_r+0x93a>
 800a02a:	e08e      	b.n	800a14a <_dtoa_r+0x9aa>
 800a02c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a02e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a032:	e757      	b.n	8009ee4 <_dtoa_r+0x744>
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	1e5c      	subs	r4, r3, #1
 800a038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	bfb7      	itett	lt
 800a03e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a040:	1b1c      	subge	r4, r3, r4
 800a042:	1ae2      	sublt	r2, r4, r3
 800a044:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a046:	bfbe      	ittt	lt
 800a048:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a04a:	189b      	addlt	r3, r3, r2
 800a04c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a04e:	9b08      	ldr	r3, [sp, #32]
 800a050:	bfb8      	it	lt
 800a052:	2400      	movlt	r4, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfbb      	ittet	lt
 800a058:	9b06      	ldrlt	r3, [sp, #24]
 800a05a:	9a08      	ldrlt	r2, [sp, #32]
 800a05c:	9f06      	ldrge	r7, [sp, #24]
 800a05e:	1a9f      	sublt	r7, r3, r2
 800a060:	bfac      	ite	ge
 800a062:	9b08      	ldrge	r3, [sp, #32]
 800a064:	2300      	movlt	r3, #0
 800a066:	e73f      	b.n	8009ee8 <_dtoa_r+0x748>
 800a068:	3fe00000 	.word	0x3fe00000
 800a06c:	40240000 	.word	0x40240000
 800a070:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a072:	9f06      	ldr	r7, [sp, #24]
 800a074:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a076:	e742      	b.n	8009efe <_dtoa_r+0x75e>
 800a078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a07a:	e76b      	b.n	8009f54 <_dtoa_r+0x7b4>
 800a07c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a07e:	2b01      	cmp	r3, #1
 800a080:	dc19      	bgt.n	800a0b6 <_dtoa_r+0x916>
 800a082:	9b04      	ldr	r3, [sp, #16]
 800a084:	b9bb      	cbnz	r3, 800a0b6 <_dtoa_r+0x916>
 800a086:	9b05      	ldr	r3, [sp, #20]
 800a088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a08c:	b99b      	cbnz	r3, 800a0b6 <_dtoa_r+0x916>
 800a08e:	9b05      	ldr	r3, [sp, #20]
 800a090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a094:	0d1b      	lsrs	r3, r3, #20
 800a096:	051b      	lsls	r3, r3, #20
 800a098:	b183      	cbz	r3, 800a0bc <_dtoa_r+0x91c>
 800a09a:	f04f 0801 	mov.w	r8, #1
 800a09e:	9b06      	ldr	r3, [sp, #24]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	9306      	str	r3, [sp, #24]
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f47f af6a 	bne.w	8009f86 <_dtoa_r+0x7e6>
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	e76f      	b.n	8009f96 <_dtoa_r+0x7f6>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	e7f6      	b.n	800a0aa <_dtoa_r+0x90a>
 800a0bc:	4698      	mov	r8, r3
 800a0be:	e7f4      	b.n	800a0aa <_dtoa_r+0x90a>
 800a0c0:	f43f af7d 	beq.w	8009fbe <_dtoa_r+0x81e>
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	301c      	adds	r0, #28
 800a0c8:	e772      	b.n	8009fb0 <_dtoa_r+0x810>
 800a0ca:	9b08      	ldr	r3, [sp, #32]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dc36      	bgt.n	800a13e <_dtoa_r+0x99e>
 800a0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	dd33      	ble.n	800a13e <_dtoa_r+0x99e>
 800a0d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	d10d      	bne.n	800a0fc <_dtoa_r+0x95c>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	2205      	movs	r2, #5
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 f9d2 	bl	800a490 <__multadd>
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4658      	mov	r0, fp
 800a0f2:	f000 fbe9 	bl	800a8c8 <__mcmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f73f adb8 	bgt.w	8009c6c <_dtoa_r+0x4cc>
 800a0fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0fe:	9f03      	ldr	r7, [sp, #12]
 800a100:	ea6f 0a03 	mvn.w	sl, r3
 800a104:	f04f 0800 	mov.w	r8, #0
 800a108:	4621      	mov	r1, r4
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f99e 	bl	800a44c <_Bfree>
 800a110:	2e00      	cmp	r6, #0
 800a112:	f43f aea7 	beq.w	8009e64 <_dtoa_r+0x6c4>
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	d005      	beq.n	800a128 <_dtoa_r+0x988>
 800a11c:	45b0      	cmp	r8, r6
 800a11e:	d003      	beq.n	800a128 <_dtoa_r+0x988>
 800a120:	4641      	mov	r1, r8
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f992 	bl	800a44c <_Bfree>
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 f98e 	bl	800a44c <_Bfree>
 800a130:	e698      	b.n	8009e64 <_dtoa_r+0x6c4>
 800a132:	2400      	movs	r4, #0
 800a134:	4626      	mov	r6, r4
 800a136:	e7e1      	b.n	800a0fc <_dtoa_r+0x95c>
 800a138:	46c2      	mov	sl, r8
 800a13a:	4626      	mov	r6, r4
 800a13c:	e596      	b.n	8009c6c <_dtoa_r+0x4cc>
 800a13e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 80fd 	beq.w	800a344 <_dtoa_r+0xba4>
 800a14a:	2f00      	cmp	r7, #0
 800a14c:	dd05      	ble.n	800a15a <_dtoa_r+0x9ba>
 800a14e:	4631      	mov	r1, r6
 800a150:	463a      	mov	r2, r7
 800a152:	4628      	mov	r0, r5
 800a154:	f000 fb48 	bl	800a7e8 <__lshift>
 800a158:	4606      	mov	r6, r0
 800a15a:	f1b8 0f00 	cmp.w	r8, #0
 800a15e:	d05c      	beq.n	800a21a <_dtoa_r+0xa7a>
 800a160:	4628      	mov	r0, r5
 800a162:	6871      	ldr	r1, [r6, #4]
 800a164:	f000 f932 	bl	800a3cc <_Balloc>
 800a168:	4607      	mov	r7, r0
 800a16a:	b928      	cbnz	r0, 800a178 <_dtoa_r+0x9d8>
 800a16c:	4602      	mov	r2, r0
 800a16e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a172:	4b7f      	ldr	r3, [pc, #508]	; (800a370 <_dtoa_r+0xbd0>)
 800a174:	f7ff bb28 	b.w	80097c8 <_dtoa_r+0x28>
 800a178:	6932      	ldr	r2, [r6, #16]
 800a17a:	f106 010c 	add.w	r1, r6, #12
 800a17e:	3202      	adds	r2, #2
 800a180:	0092      	lsls	r2, r2, #2
 800a182:	300c      	adds	r0, #12
 800a184:	f000 f914 	bl	800a3b0 <memcpy>
 800a188:	2201      	movs	r2, #1
 800a18a:	4639      	mov	r1, r7
 800a18c:	4628      	mov	r0, r5
 800a18e:	f000 fb2b 	bl	800a7e8 <__lshift>
 800a192:	46b0      	mov	r8, r6
 800a194:	4606      	mov	r6, r0
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	9308      	str	r3, [sp, #32]
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	444b      	add	r3, r9
 800a1a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	f7ff fa66 	bl	8009684 <quorem>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4641      	mov	r1, r8
 800a1bc:	3330      	adds	r3, #48	; 0x30
 800a1be:	9006      	str	r0, [sp, #24]
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1c4:	f000 fb80 	bl	800a8c8 <__mcmp>
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fb96 	bl	800a900 <__mdiff>
 800a1d4:	68c2      	ldr	r2, [r0, #12]
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1da:	bb02      	cbnz	r2, 800a21e <_dtoa_r+0xa7e>
 800a1dc:	4601      	mov	r1, r0
 800a1de:	4658      	mov	r0, fp
 800a1e0:	f000 fb72 	bl	800a8c8 <__mcmp>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a1f0:	f000 f92c 	bl	800a44c <_Bfree>
 800a1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1f8:	9f08      	ldr	r7, [sp, #32]
 800a1fa:	ea43 0102 	orr.w	r1, r3, r2
 800a1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a200:	430b      	orrs	r3, r1
 800a202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a204:	d10d      	bne.n	800a222 <_dtoa_r+0xa82>
 800a206:	2b39      	cmp	r3, #57	; 0x39
 800a208:	d029      	beq.n	800a25e <_dtoa_r+0xabe>
 800a20a:	f1b9 0f00 	cmp.w	r9, #0
 800a20e:	dd01      	ble.n	800a214 <_dtoa_r+0xa74>
 800a210:	9b06      	ldr	r3, [sp, #24]
 800a212:	3331      	adds	r3, #49	; 0x31
 800a214:	9a04      	ldr	r2, [sp, #16]
 800a216:	7013      	strb	r3, [r2, #0]
 800a218:	e776      	b.n	800a108 <_dtoa_r+0x968>
 800a21a:	4630      	mov	r0, r6
 800a21c:	e7b9      	b.n	800a192 <_dtoa_r+0x9f2>
 800a21e:	2201      	movs	r2, #1
 800a220:	e7e2      	b.n	800a1e8 <_dtoa_r+0xa48>
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	db06      	blt.n	800a236 <_dtoa_r+0xa96>
 800a228:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a22a:	ea41 0909 	orr.w	r9, r1, r9
 800a22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a230:	ea59 0101 	orrs.w	r1, r9, r1
 800a234:	d120      	bne.n	800a278 <_dtoa_r+0xad8>
 800a236:	2a00      	cmp	r2, #0
 800a238:	ddec      	ble.n	800a214 <_dtoa_r+0xa74>
 800a23a:	4659      	mov	r1, fp
 800a23c:	2201      	movs	r2, #1
 800a23e:	4628      	mov	r0, r5
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	f000 fad1 	bl	800a7e8 <__lshift>
 800a246:	4621      	mov	r1, r4
 800a248:	4683      	mov	fp, r0
 800a24a:	f000 fb3d 	bl	800a8c8 <__mcmp>
 800a24e:	2800      	cmp	r0, #0
 800a250:	9b08      	ldr	r3, [sp, #32]
 800a252:	dc02      	bgt.n	800a25a <_dtoa_r+0xaba>
 800a254:	d1de      	bne.n	800a214 <_dtoa_r+0xa74>
 800a256:	07da      	lsls	r2, r3, #31
 800a258:	d5dc      	bpl.n	800a214 <_dtoa_r+0xa74>
 800a25a:	2b39      	cmp	r3, #57	; 0x39
 800a25c:	d1d8      	bne.n	800a210 <_dtoa_r+0xa70>
 800a25e:	2339      	movs	r3, #57	; 0x39
 800a260:	9a04      	ldr	r2, [sp, #16]
 800a262:	7013      	strb	r3, [r2, #0]
 800a264:	463b      	mov	r3, r7
 800a266:	461f      	mov	r7, r3
 800a268:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	2a39      	cmp	r2, #57	; 0x39
 800a270:	d050      	beq.n	800a314 <_dtoa_r+0xb74>
 800a272:	3201      	adds	r2, #1
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	e747      	b.n	800a108 <_dtoa_r+0x968>
 800a278:	2a00      	cmp	r2, #0
 800a27a:	dd03      	ble.n	800a284 <_dtoa_r+0xae4>
 800a27c:	2b39      	cmp	r3, #57	; 0x39
 800a27e:	d0ee      	beq.n	800a25e <_dtoa_r+0xabe>
 800a280:	3301      	adds	r3, #1
 800a282:	e7c7      	b.n	800a214 <_dtoa_r+0xa74>
 800a284:	9a08      	ldr	r2, [sp, #32]
 800a286:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a288:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d02a      	beq.n	800a2e6 <_dtoa_r+0xb46>
 800a290:	4659      	mov	r1, fp
 800a292:	2300      	movs	r3, #0
 800a294:	220a      	movs	r2, #10
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f8fa 	bl	800a490 <__multadd>
 800a29c:	45b0      	cmp	r8, r6
 800a29e:	4683      	mov	fp, r0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	f04f 020a 	mov.w	r2, #10
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	d107      	bne.n	800a2be <_dtoa_r+0xb1e>
 800a2ae:	f000 f8ef 	bl	800a490 <__multadd>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	9b08      	ldr	r3, [sp, #32]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	9308      	str	r3, [sp, #32]
 800a2bc:	e775      	b.n	800a1aa <_dtoa_r+0xa0a>
 800a2be:	f000 f8e7 	bl	800a490 <__multadd>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	220a      	movs	r2, #10
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f000 f8e0 	bl	800a490 <__multadd>
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	e7f0      	b.n	800a2b6 <_dtoa_r+0xb16>
 800a2d4:	f1b9 0f00 	cmp.w	r9, #0
 800a2d8:	bfcc      	ite	gt
 800a2da:	464f      	movgt	r7, r9
 800a2dc:	2701      	movle	r7, #1
 800a2de:	f04f 0800 	mov.w	r8, #0
 800a2e2:	9a03      	ldr	r2, [sp, #12]
 800a2e4:	4417      	add	r7, r2
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	9308      	str	r3, [sp, #32]
 800a2ee:	f000 fa7b 	bl	800a7e8 <__lshift>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4683      	mov	fp, r0
 800a2f6:	f000 fae7 	bl	800a8c8 <__mcmp>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	dcb2      	bgt.n	800a264 <_dtoa_r+0xac4>
 800a2fe:	d102      	bne.n	800a306 <_dtoa_r+0xb66>
 800a300:	9b08      	ldr	r3, [sp, #32]
 800a302:	07db      	lsls	r3, r3, #31
 800a304:	d4ae      	bmi.n	800a264 <_dtoa_r+0xac4>
 800a306:	463b      	mov	r3, r7
 800a308:	461f      	mov	r7, r3
 800a30a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a30e:	2a30      	cmp	r2, #48	; 0x30
 800a310:	d0fa      	beq.n	800a308 <_dtoa_r+0xb68>
 800a312:	e6f9      	b.n	800a108 <_dtoa_r+0x968>
 800a314:	9a03      	ldr	r2, [sp, #12]
 800a316:	429a      	cmp	r2, r3
 800a318:	d1a5      	bne.n	800a266 <_dtoa_r+0xac6>
 800a31a:	2331      	movs	r3, #49	; 0x31
 800a31c:	f10a 0a01 	add.w	sl, sl, #1
 800a320:	e779      	b.n	800a216 <_dtoa_r+0xa76>
 800a322:	4b14      	ldr	r3, [pc, #80]	; (800a374 <_dtoa_r+0xbd4>)
 800a324:	f7ff baa8 	b.w	8009878 <_dtoa_r+0xd8>
 800a328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f47f aa81 	bne.w	8009832 <_dtoa_r+0x92>
 800a330:	4b11      	ldr	r3, [pc, #68]	; (800a378 <_dtoa_r+0xbd8>)
 800a332:	f7ff baa1 	b.w	8009878 <_dtoa_r+0xd8>
 800a336:	f1b9 0f00 	cmp.w	r9, #0
 800a33a:	dc03      	bgt.n	800a344 <_dtoa_r+0xba4>
 800a33c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a33e:	2b02      	cmp	r3, #2
 800a340:	f73f aecb 	bgt.w	800a0da <_dtoa_r+0x93a>
 800a344:	9f03      	ldr	r7, [sp, #12]
 800a346:	4621      	mov	r1, r4
 800a348:	4658      	mov	r0, fp
 800a34a:	f7ff f99b 	bl	8009684 <quorem>
 800a34e:	9a03      	ldr	r2, [sp, #12]
 800a350:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a354:	f807 3b01 	strb.w	r3, [r7], #1
 800a358:	1aba      	subs	r2, r7, r2
 800a35a:	4591      	cmp	r9, r2
 800a35c:	ddba      	ble.n	800a2d4 <_dtoa_r+0xb34>
 800a35e:	4659      	mov	r1, fp
 800a360:	2300      	movs	r3, #0
 800a362:	220a      	movs	r2, #10
 800a364:	4628      	mov	r0, r5
 800a366:	f000 f893 	bl	800a490 <__multadd>
 800a36a:	4683      	mov	fp, r0
 800a36c:	e7eb      	b.n	800a346 <_dtoa_r+0xba6>
 800a36e:	bf00      	nop
 800a370:	0800c317 	.word	0x0800c317
 800a374:	0800c274 	.word	0x0800c274
 800a378:	0800c298 	.word	0x0800c298

0800a37c <_localeconv_r>:
 800a37c:	4800      	ldr	r0, [pc, #0]	; (800a380 <_localeconv_r+0x4>)
 800a37e:	4770      	bx	lr
 800a380:	2000020c 	.word	0x2000020c

0800a384 <malloc>:
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <malloc+0xc>)
 800a386:	4601      	mov	r1, r0
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f000 bc1d 	b.w	800abc8 <_malloc_r>
 800a38e:	bf00      	nop
 800a390:	200000b8 	.word	0x200000b8

0800a394 <memchr>:
 800a394:	4603      	mov	r3, r0
 800a396:	b510      	push	{r4, lr}
 800a398:	b2c9      	uxtb	r1, r1
 800a39a:	4402      	add	r2, r0
 800a39c:	4293      	cmp	r3, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	d101      	bne.n	800a3a6 <memchr+0x12>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	e003      	b.n	800a3ae <memchr+0x1a>
 800a3a6:	7804      	ldrb	r4, [r0, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	428c      	cmp	r4, r1
 800a3ac:	d1f6      	bne.n	800a39c <memchr+0x8>
 800a3ae:	bd10      	pop	{r4, pc}

0800a3b0 <memcpy>:
 800a3b0:	440a      	add	r2, r1
 800a3b2:	4291      	cmp	r1, r2
 800a3b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a3b8:	d100      	bne.n	800a3bc <memcpy+0xc>
 800a3ba:	4770      	bx	lr
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c8:	d1f9      	bne.n	800a3be <memcpy+0xe>
 800a3ca:	bd10      	pop	{r4, pc}

0800a3cc <_Balloc>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	b976      	cbnz	r6, 800a3f4 <_Balloc+0x28>
 800a3d6:	2010      	movs	r0, #16
 800a3d8:	f7ff ffd4 	bl	800a384 <malloc>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	6260      	str	r0, [r4, #36]	; 0x24
 800a3e0:	b920      	cbnz	r0, 800a3ec <_Balloc+0x20>
 800a3e2:	2166      	movs	r1, #102	; 0x66
 800a3e4:	4b17      	ldr	r3, [pc, #92]	; (800a444 <_Balloc+0x78>)
 800a3e6:	4818      	ldr	r0, [pc, #96]	; (800a448 <_Balloc+0x7c>)
 800a3e8:	f000 fdce 	bl	800af88 <__assert_func>
 800a3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f0:	6006      	str	r6, [r0, #0]
 800a3f2:	60c6      	str	r6, [r0, #12]
 800a3f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3f6:	68f3      	ldr	r3, [r6, #12]
 800a3f8:	b183      	cbz	r3, 800a41c <_Balloc+0x50>
 800a3fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a402:	b9b8      	cbnz	r0, 800a434 <_Balloc+0x68>
 800a404:	2101      	movs	r1, #1
 800a406:	fa01 f605 	lsl.w	r6, r1, r5
 800a40a:	1d72      	adds	r2, r6, #5
 800a40c:	4620      	mov	r0, r4
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	f000 fb5e 	bl	800aad0 <_calloc_r>
 800a414:	b160      	cbz	r0, 800a430 <_Balloc+0x64>
 800a416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a41a:	e00e      	b.n	800a43a <_Balloc+0x6e>
 800a41c:	2221      	movs	r2, #33	; 0x21
 800a41e:	2104      	movs	r1, #4
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fb55 	bl	800aad0 <_calloc_r>
 800a426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a428:	60f0      	str	r0, [r6, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e4      	bne.n	800a3fa <_Balloc+0x2e>
 800a430:	2000      	movs	r0, #0
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	6802      	ldr	r2, [r0, #0]
 800a436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a43a:	2300      	movs	r3, #0
 800a43c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a440:	e7f7      	b.n	800a432 <_Balloc+0x66>
 800a442:	bf00      	nop
 800a444:	0800c2a5 	.word	0x0800c2a5
 800a448:	0800c328 	.word	0x0800c328

0800a44c <_Bfree>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	b976      	cbnz	r6, 800a474 <_Bfree+0x28>
 800a456:	2010      	movs	r0, #16
 800a458:	f7ff ff94 	bl	800a384 <malloc>
 800a45c:	4602      	mov	r2, r0
 800a45e:	6268      	str	r0, [r5, #36]	; 0x24
 800a460:	b920      	cbnz	r0, 800a46c <_Bfree+0x20>
 800a462:	218a      	movs	r1, #138	; 0x8a
 800a464:	4b08      	ldr	r3, [pc, #32]	; (800a488 <_Bfree+0x3c>)
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <_Bfree+0x40>)
 800a468:	f000 fd8e 	bl	800af88 <__assert_func>
 800a46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a470:	6006      	str	r6, [r0, #0]
 800a472:	60c6      	str	r6, [r0, #12]
 800a474:	b13c      	cbz	r4, 800a486 <_Bfree+0x3a>
 800a476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a478:	6862      	ldr	r2, [r4, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a480:	6021      	str	r1, [r4, #0]
 800a482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	0800c2a5 	.word	0x0800c2a5
 800a48c:	0800c328 	.word	0x0800c328

0800a490 <__multadd>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	4607      	mov	r7, r0
 800a496:	460c      	mov	r4, r1
 800a498:	461e      	mov	r6, r3
 800a49a:	2000      	movs	r0, #0
 800a49c:	690d      	ldr	r5, [r1, #16]
 800a49e:	f101 0c14 	add.w	ip, r1, #20
 800a4a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	b299      	uxth	r1, r3
 800a4aa:	fb02 6101 	mla	r1, r2, r1, r6
 800a4ae:	0c1e      	lsrs	r6, r3, #16
 800a4b0:	0c0b      	lsrs	r3, r1, #16
 800a4b2:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b6:	b289      	uxth	r1, r1
 800a4b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4bc:	4285      	cmp	r5, r0
 800a4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4c6:	dcec      	bgt.n	800a4a2 <__multadd+0x12>
 800a4c8:	b30e      	cbz	r6, 800a50e <__multadd+0x7e>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	42ab      	cmp	r3, r5
 800a4ce:	dc19      	bgt.n	800a504 <__multadd+0x74>
 800a4d0:	6861      	ldr	r1, [r4, #4]
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	f7ff ff79 	bl	800a3cc <_Balloc>
 800a4da:	4680      	mov	r8, r0
 800a4dc:	b928      	cbnz	r0, 800a4ea <__multadd+0x5a>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	21b5      	movs	r1, #181	; 0xb5
 800a4e2:	4b0c      	ldr	r3, [pc, #48]	; (800a514 <__multadd+0x84>)
 800a4e4:	480c      	ldr	r0, [pc, #48]	; (800a518 <__multadd+0x88>)
 800a4e6:	f000 fd4f 	bl	800af88 <__assert_func>
 800a4ea:	6922      	ldr	r2, [r4, #16]
 800a4ec:	f104 010c 	add.w	r1, r4, #12
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	300c      	adds	r0, #12
 800a4f6:	f7ff ff5b 	bl	800a3b0 <memcpy>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	f7ff ffa5 	bl	800a44c <_Bfree>
 800a502:	4644      	mov	r4, r8
 800a504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a508:	3501      	adds	r5, #1
 800a50a:	615e      	str	r6, [r3, #20]
 800a50c:	6125      	str	r5, [r4, #16]
 800a50e:	4620      	mov	r0, r4
 800a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a514:	0800c317 	.word	0x0800c317
 800a518:	0800c328 	.word	0x0800c328

0800a51c <__hi0bits>:
 800a51c:	0c02      	lsrs	r2, r0, #16
 800a51e:	0412      	lsls	r2, r2, #16
 800a520:	4603      	mov	r3, r0
 800a522:	b9ca      	cbnz	r2, 800a558 <__hi0bits+0x3c>
 800a524:	0403      	lsls	r3, r0, #16
 800a526:	2010      	movs	r0, #16
 800a528:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a52c:	bf04      	itt	eq
 800a52e:	021b      	lsleq	r3, r3, #8
 800a530:	3008      	addeq	r0, #8
 800a532:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a536:	bf04      	itt	eq
 800a538:	011b      	lsleq	r3, r3, #4
 800a53a:	3004      	addeq	r0, #4
 800a53c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a540:	bf04      	itt	eq
 800a542:	009b      	lsleq	r3, r3, #2
 800a544:	3002      	addeq	r0, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	db05      	blt.n	800a556 <__hi0bits+0x3a>
 800a54a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a54e:	f100 0001 	add.w	r0, r0, #1
 800a552:	bf08      	it	eq
 800a554:	2020      	moveq	r0, #32
 800a556:	4770      	bx	lr
 800a558:	2000      	movs	r0, #0
 800a55a:	e7e5      	b.n	800a528 <__hi0bits+0xc>

0800a55c <__lo0bits>:
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	4602      	mov	r2, r0
 800a560:	f013 0007 	ands.w	r0, r3, #7
 800a564:	d00b      	beq.n	800a57e <__lo0bits+0x22>
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d421      	bmi.n	800a5ae <__lo0bits+0x52>
 800a56a:	0798      	lsls	r0, r3, #30
 800a56c:	bf49      	itett	mi
 800a56e:	085b      	lsrmi	r3, r3, #1
 800a570:	089b      	lsrpl	r3, r3, #2
 800a572:	2001      	movmi	r0, #1
 800a574:	6013      	strmi	r3, [r2, #0]
 800a576:	bf5c      	itt	pl
 800a578:	2002      	movpl	r0, #2
 800a57a:	6013      	strpl	r3, [r2, #0]
 800a57c:	4770      	bx	lr
 800a57e:	b299      	uxth	r1, r3
 800a580:	b909      	cbnz	r1, 800a586 <__lo0bits+0x2a>
 800a582:	2010      	movs	r0, #16
 800a584:	0c1b      	lsrs	r3, r3, #16
 800a586:	b2d9      	uxtb	r1, r3
 800a588:	b909      	cbnz	r1, 800a58e <__lo0bits+0x32>
 800a58a:	3008      	adds	r0, #8
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	0719      	lsls	r1, r3, #28
 800a590:	bf04      	itt	eq
 800a592:	091b      	lsreq	r3, r3, #4
 800a594:	3004      	addeq	r0, #4
 800a596:	0799      	lsls	r1, r3, #30
 800a598:	bf04      	itt	eq
 800a59a:	089b      	lsreq	r3, r3, #2
 800a59c:	3002      	addeq	r0, #2
 800a59e:	07d9      	lsls	r1, r3, #31
 800a5a0:	d403      	bmi.n	800a5aa <__lo0bits+0x4e>
 800a5a2:	085b      	lsrs	r3, r3, #1
 800a5a4:	f100 0001 	add.w	r0, r0, #1
 800a5a8:	d003      	beq.n	800a5b2 <__lo0bits+0x56>
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	4770      	bx	lr
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	4770      	bx	lr
 800a5b2:	2020      	movs	r0, #32
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <__i2b>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	2101      	movs	r1, #1
 800a5be:	f7ff ff05 	bl	800a3cc <_Balloc>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <__i2b+0x1a>
 800a5c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5ca:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <__i2b+0x24>)
 800a5cc:	4804      	ldr	r0, [pc, #16]	; (800a5e0 <__i2b+0x28>)
 800a5ce:	f000 fcdb 	bl	800af88 <__assert_func>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	6144      	str	r4, [r0, #20]
 800a5d6:	6103      	str	r3, [r0, #16]
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800c317 	.word	0x0800c317
 800a5e0:	0800c328 	.word	0x0800c328

0800a5e4 <__multiply>:
 800a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e8:	4691      	mov	r9, r2
 800a5ea:	690a      	ldr	r2, [r1, #16]
 800a5ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	bfbe      	ittt	lt
 800a5f6:	460b      	movlt	r3, r1
 800a5f8:	464c      	movlt	r4, r9
 800a5fa:	4699      	movlt	r9, r3
 800a5fc:	6927      	ldr	r7, [r4, #16]
 800a5fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	6861      	ldr	r1, [r4, #4]
 800a606:	eb07 060a 	add.w	r6, r7, sl
 800a60a:	42b3      	cmp	r3, r6
 800a60c:	b085      	sub	sp, #20
 800a60e:	bfb8      	it	lt
 800a610:	3101      	addlt	r1, #1
 800a612:	f7ff fedb 	bl	800a3cc <_Balloc>
 800a616:	b930      	cbnz	r0, 800a626 <__multiply+0x42>
 800a618:	4602      	mov	r2, r0
 800a61a:	f240 115d 	movw	r1, #349	; 0x15d
 800a61e:	4b43      	ldr	r3, [pc, #268]	; (800a72c <__multiply+0x148>)
 800a620:	4843      	ldr	r0, [pc, #268]	; (800a730 <__multiply+0x14c>)
 800a622:	f000 fcb1 	bl	800af88 <__assert_func>
 800a626:	f100 0514 	add.w	r5, r0, #20
 800a62a:	462b      	mov	r3, r5
 800a62c:	2200      	movs	r2, #0
 800a62e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a632:	4543      	cmp	r3, r8
 800a634:	d321      	bcc.n	800a67a <__multiply+0x96>
 800a636:	f104 0314 	add.w	r3, r4, #20
 800a63a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a63e:	f109 0314 	add.w	r3, r9, #20
 800a642:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a646:	9202      	str	r2, [sp, #8]
 800a648:	1b3a      	subs	r2, r7, r4
 800a64a:	3a15      	subs	r2, #21
 800a64c:	f022 0203 	bic.w	r2, r2, #3
 800a650:	3204      	adds	r2, #4
 800a652:	f104 0115 	add.w	r1, r4, #21
 800a656:	428f      	cmp	r7, r1
 800a658:	bf38      	it	cc
 800a65a:	2204      	movcc	r2, #4
 800a65c:	9201      	str	r2, [sp, #4]
 800a65e:	9a02      	ldr	r2, [sp, #8]
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	429a      	cmp	r2, r3
 800a664:	d80c      	bhi.n	800a680 <__multiply+0x9c>
 800a666:	2e00      	cmp	r6, #0
 800a668:	dd03      	ble.n	800a672 <__multiply+0x8e>
 800a66a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d059      	beq.n	800a726 <__multiply+0x142>
 800a672:	6106      	str	r6, [r0, #16]
 800a674:	b005      	add	sp, #20
 800a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67a:	f843 2b04 	str.w	r2, [r3], #4
 800a67e:	e7d8      	b.n	800a632 <__multiply+0x4e>
 800a680:	f8b3 a000 	ldrh.w	sl, [r3]
 800a684:	f1ba 0f00 	cmp.w	sl, #0
 800a688:	d023      	beq.n	800a6d2 <__multiply+0xee>
 800a68a:	46a9      	mov	r9, r5
 800a68c:	f04f 0c00 	mov.w	ip, #0
 800a690:	f104 0e14 	add.w	lr, r4, #20
 800a694:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a698:	f8d9 1000 	ldr.w	r1, [r9]
 800a69c:	fa1f fb82 	uxth.w	fp, r2
 800a6a0:	b289      	uxth	r1, r1
 800a6a2:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6a6:	4461      	add	r1, ip
 800a6a8:	f8d9 c000 	ldr.w	ip, [r9]
 800a6ac:	0c12      	lsrs	r2, r2, #16
 800a6ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a6b2:	fb0a c202 	mla	r2, sl, r2, ip
 800a6b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ba:	b289      	uxth	r1, r1
 800a6bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6c0:	4577      	cmp	r7, lr
 800a6c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6c6:	f849 1b04 	str.w	r1, [r9], #4
 800a6ca:	d8e3      	bhi.n	800a694 <__multiply+0xb0>
 800a6cc:	9a01      	ldr	r2, [sp, #4]
 800a6ce:	f845 c002 	str.w	ip, [r5, r2]
 800a6d2:	9a03      	ldr	r2, [sp, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6da:	f1b9 0f00 	cmp.w	r9, #0
 800a6de:	d020      	beq.n	800a722 <__multiply+0x13e>
 800a6e0:	46ae      	mov	lr, r5
 800a6e2:	f04f 0a00 	mov.w	sl, #0
 800a6e6:	6829      	ldr	r1, [r5, #0]
 800a6e8:	f104 0c14 	add.w	ip, r4, #20
 800a6ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a6f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6f4:	b289      	uxth	r1, r1
 800a6f6:	fb09 220b 	mla	r2, r9, fp, r2
 800a6fa:	4492      	add	sl, r2
 800a6fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a700:	f84e 1b04 	str.w	r1, [lr], #4
 800a704:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a708:	f8be 1000 	ldrh.w	r1, [lr]
 800a70c:	0c12      	lsrs	r2, r2, #16
 800a70e:	fb09 1102 	mla	r1, r9, r2, r1
 800a712:	4567      	cmp	r7, ip
 800a714:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a718:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a71c:	d8e6      	bhi.n	800a6ec <__multiply+0x108>
 800a71e:	9a01      	ldr	r2, [sp, #4]
 800a720:	50a9      	str	r1, [r5, r2]
 800a722:	3504      	adds	r5, #4
 800a724:	e79b      	b.n	800a65e <__multiply+0x7a>
 800a726:	3e01      	subs	r6, #1
 800a728:	e79d      	b.n	800a666 <__multiply+0x82>
 800a72a:	bf00      	nop
 800a72c:	0800c317 	.word	0x0800c317
 800a730:	0800c328 	.word	0x0800c328

0800a734 <__pow5mult>:
 800a734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a738:	4615      	mov	r5, r2
 800a73a:	f012 0203 	ands.w	r2, r2, #3
 800a73e:	4606      	mov	r6, r0
 800a740:	460f      	mov	r7, r1
 800a742:	d007      	beq.n	800a754 <__pow5mult+0x20>
 800a744:	4c25      	ldr	r4, [pc, #148]	; (800a7dc <__pow5mult+0xa8>)
 800a746:	3a01      	subs	r2, #1
 800a748:	2300      	movs	r3, #0
 800a74a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a74e:	f7ff fe9f 	bl	800a490 <__multadd>
 800a752:	4607      	mov	r7, r0
 800a754:	10ad      	asrs	r5, r5, #2
 800a756:	d03d      	beq.n	800a7d4 <__pow5mult+0xa0>
 800a758:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a75a:	b97c      	cbnz	r4, 800a77c <__pow5mult+0x48>
 800a75c:	2010      	movs	r0, #16
 800a75e:	f7ff fe11 	bl	800a384 <malloc>
 800a762:	4602      	mov	r2, r0
 800a764:	6270      	str	r0, [r6, #36]	; 0x24
 800a766:	b928      	cbnz	r0, 800a774 <__pow5mult+0x40>
 800a768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a76c:	4b1c      	ldr	r3, [pc, #112]	; (800a7e0 <__pow5mult+0xac>)
 800a76e:	481d      	ldr	r0, [pc, #116]	; (800a7e4 <__pow5mult+0xb0>)
 800a770:	f000 fc0a 	bl	800af88 <__assert_func>
 800a774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a778:	6004      	str	r4, [r0, #0]
 800a77a:	60c4      	str	r4, [r0, #12]
 800a77c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a784:	b94c      	cbnz	r4, 800a79a <__pow5mult+0x66>
 800a786:	f240 2171 	movw	r1, #625	; 0x271
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ff14 	bl	800a5b8 <__i2b>
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	f8c8 0008 	str.w	r0, [r8, #8]
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	f04f 0900 	mov.w	r9, #0
 800a79e:	07eb      	lsls	r3, r5, #31
 800a7a0:	d50a      	bpl.n	800a7b8 <__pow5mult+0x84>
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f7ff ff1c 	bl	800a5e4 <__multiply>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7ff fe4b 	bl	800a44c <_Bfree>
 800a7b6:	4647      	mov	r7, r8
 800a7b8:	106d      	asrs	r5, r5, #1
 800a7ba:	d00b      	beq.n	800a7d4 <__pow5mult+0xa0>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	b938      	cbnz	r0, 800a7d0 <__pow5mult+0x9c>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff ff0d 	bl	800a5e4 <__multiply>
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	f8c0 9000 	str.w	r9, [r0]
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	e7e4      	b.n	800a79e <__pow5mult+0x6a>
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800c478 	.word	0x0800c478
 800a7e0:	0800c2a5 	.word	0x0800c2a5
 800a7e4:	0800c328 	.word	0x0800c328

0800a7e8 <__lshift>:
 800a7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	4691      	mov	r9, r2
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	6849      	ldr	r1, [r1, #4]
 800a7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a800:	f108 0601 	add.w	r6, r8, #1
 800a804:	42b3      	cmp	r3, r6
 800a806:	db0b      	blt.n	800a820 <__lshift+0x38>
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff fddf 	bl	800a3cc <_Balloc>
 800a80e:	4605      	mov	r5, r0
 800a810:	b948      	cbnz	r0, 800a826 <__lshift+0x3e>
 800a812:	4602      	mov	r2, r0
 800a814:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a818:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <__lshift+0xd8>)
 800a81a:	482a      	ldr	r0, [pc, #168]	; (800a8c4 <__lshift+0xdc>)
 800a81c:	f000 fbb4 	bl	800af88 <__assert_func>
 800a820:	3101      	adds	r1, #1
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	e7ee      	b.n	800a804 <__lshift+0x1c>
 800a826:	2300      	movs	r3, #0
 800a828:	f100 0114 	add.w	r1, r0, #20
 800a82c:	f100 0210 	add.w	r2, r0, #16
 800a830:	4618      	mov	r0, r3
 800a832:	4553      	cmp	r3, sl
 800a834:	db37      	blt.n	800a8a6 <__lshift+0xbe>
 800a836:	6920      	ldr	r0, [r4, #16]
 800a838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a83c:	f104 0314 	add.w	r3, r4, #20
 800a840:	f019 091f 	ands.w	r9, r9, #31
 800a844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a848:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a84c:	d02f      	beq.n	800a8ae <__lshift+0xc6>
 800a84e:	468a      	mov	sl, r1
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	f1c9 0e20 	rsb	lr, r9, #32
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	fa02 f209 	lsl.w	r2, r2, r9
 800a85e:	ea42 020c 	orr.w	r2, r2, ip
 800a862:	f84a 2b04 	str.w	r2, [sl], #4
 800a866:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86a:	4298      	cmp	r0, r3
 800a86c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a870:	d8f2      	bhi.n	800a858 <__lshift+0x70>
 800a872:	1b03      	subs	r3, r0, r4
 800a874:	3b15      	subs	r3, #21
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	3304      	adds	r3, #4
 800a87c:	f104 0215 	add.w	r2, r4, #21
 800a880:	4290      	cmp	r0, r2
 800a882:	bf38      	it	cc
 800a884:	2304      	movcc	r3, #4
 800a886:	f841 c003 	str.w	ip, [r1, r3]
 800a88a:	f1bc 0f00 	cmp.w	ip, #0
 800a88e:	d001      	beq.n	800a894 <__lshift+0xac>
 800a890:	f108 0602 	add.w	r6, r8, #2
 800a894:	3e01      	subs	r6, #1
 800a896:	4638      	mov	r0, r7
 800a898:	4621      	mov	r1, r4
 800a89a:	612e      	str	r6, [r5, #16]
 800a89c:	f7ff fdd6 	bl	800a44c <_Bfree>
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	e7c1      	b.n	800a832 <__lshift+0x4a>
 800a8ae:	3904      	subs	r1, #4
 800a8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b4:	4298      	cmp	r0, r3
 800a8b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8ba:	d8f9      	bhi.n	800a8b0 <__lshift+0xc8>
 800a8bc:	e7ea      	b.n	800a894 <__lshift+0xac>
 800a8be:	bf00      	nop
 800a8c0:	0800c317 	.word	0x0800c317
 800a8c4:	0800c328 	.word	0x0800c328

0800a8c8 <__mcmp>:
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	690a      	ldr	r2, [r1, #16]
 800a8cc:	6900      	ldr	r0, [r0, #16]
 800a8ce:	b530      	push	{r4, r5, lr}
 800a8d0:	1a80      	subs	r0, r0, r2
 800a8d2:	d10d      	bne.n	800a8f0 <__mcmp+0x28>
 800a8d4:	3314      	adds	r3, #20
 800a8d6:	3114      	adds	r1, #20
 800a8d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8e8:	4295      	cmp	r5, r2
 800a8ea:	d002      	beq.n	800a8f2 <__mcmp+0x2a>
 800a8ec:	d304      	bcc.n	800a8f8 <__mcmp+0x30>
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	bd30      	pop	{r4, r5, pc}
 800a8f2:	42a3      	cmp	r3, r4
 800a8f4:	d3f4      	bcc.n	800a8e0 <__mcmp+0x18>
 800a8f6:	e7fb      	b.n	800a8f0 <__mcmp+0x28>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fc:	e7f8      	b.n	800a8f0 <__mcmp+0x28>
	...

0800a900 <__mdiff>:
 800a900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	460d      	mov	r5, r1
 800a906:	4607      	mov	r7, r0
 800a908:	4611      	mov	r1, r2
 800a90a:	4628      	mov	r0, r5
 800a90c:	4614      	mov	r4, r2
 800a90e:	f7ff ffdb 	bl	800a8c8 <__mcmp>
 800a912:	1e06      	subs	r6, r0, #0
 800a914:	d111      	bne.n	800a93a <__mdiff+0x3a>
 800a916:	4631      	mov	r1, r6
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff fd57 	bl	800a3cc <_Balloc>
 800a91e:	4602      	mov	r2, r0
 800a920:	b928      	cbnz	r0, 800a92e <__mdiff+0x2e>
 800a922:	f240 2132 	movw	r1, #562	; 0x232
 800a926:	4b3a      	ldr	r3, [pc, #232]	; (800aa10 <__mdiff+0x110>)
 800a928:	483a      	ldr	r0, [pc, #232]	; (800aa14 <__mdiff+0x114>)
 800a92a:	f000 fb2d 	bl	800af88 <__assert_func>
 800a92e:	2301      	movs	r3, #1
 800a930:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a934:	4610      	mov	r0, r2
 800a936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	bfa4      	itt	ge
 800a93c:	4623      	movge	r3, r4
 800a93e:	462c      	movge	r4, r5
 800a940:	4638      	mov	r0, r7
 800a942:	6861      	ldr	r1, [r4, #4]
 800a944:	bfa6      	itte	ge
 800a946:	461d      	movge	r5, r3
 800a948:	2600      	movge	r6, #0
 800a94a:	2601      	movlt	r6, #1
 800a94c:	f7ff fd3e 	bl	800a3cc <_Balloc>
 800a950:	4602      	mov	r2, r0
 800a952:	b918      	cbnz	r0, 800a95c <__mdiff+0x5c>
 800a954:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a958:	4b2d      	ldr	r3, [pc, #180]	; (800aa10 <__mdiff+0x110>)
 800a95a:	e7e5      	b.n	800a928 <__mdiff+0x28>
 800a95c:	f102 0814 	add.w	r8, r2, #20
 800a960:	46c2      	mov	sl, r8
 800a962:	f04f 0c00 	mov.w	ip, #0
 800a966:	6927      	ldr	r7, [r4, #16]
 800a968:	60c6      	str	r6, [r0, #12]
 800a96a:	692e      	ldr	r6, [r5, #16]
 800a96c:	f104 0014 	add.w	r0, r4, #20
 800a970:	f105 0914 	add.w	r9, r5, #20
 800a974:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a97c:	3410      	adds	r4, #16
 800a97e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a982:	f859 3b04 	ldr.w	r3, [r9], #4
 800a986:	fa1f f18b 	uxth.w	r1, fp
 800a98a:	448c      	add	ip, r1
 800a98c:	b299      	uxth	r1, r3
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	ebac 0101 	sub.w	r1, ip, r1
 800a994:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a998:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a99c:	b289      	uxth	r1, r1
 800a99e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a9a2:	454e      	cmp	r6, r9
 800a9a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a9a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ac:	d8e7      	bhi.n	800a97e <__mdiff+0x7e>
 800a9ae:	1b73      	subs	r3, r6, r5
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3515      	adds	r5, #21
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	42ae      	cmp	r6, r5
 800a9bc:	bf38      	it	cc
 800a9be:	2304      	movcc	r3, #4
 800a9c0:	4418      	add	r0, r3
 800a9c2:	4443      	add	r3, r8
 800a9c4:	461e      	mov	r6, r3
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	4575      	cmp	r5, lr
 800a9ca:	d30e      	bcc.n	800a9ea <__mdiff+0xea>
 800a9cc:	f10e 0103 	add.w	r1, lr, #3
 800a9d0:	1a09      	subs	r1, r1, r0
 800a9d2:	f021 0103 	bic.w	r1, r1, #3
 800a9d6:	3803      	subs	r0, #3
 800a9d8:	4586      	cmp	lr, r0
 800a9da:	bf38      	it	cc
 800a9dc:	2100      	movcc	r1, #0
 800a9de:	4419      	add	r1, r3
 800a9e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a9e4:	b18b      	cbz	r3, 800aa0a <__mdiff+0x10a>
 800a9e6:	6117      	str	r7, [r2, #16]
 800a9e8:	e7a4      	b.n	800a934 <__mdiff+0x34>
 800a9ea:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9ee:	fa1f f188 	uxth.w	r1, r8
 800a9f2:	4461      	add	r1, ip
 800a9f4:	140c      	asrs	r4, r1, #16
 800a9f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9fa:	b289      	uxth	r1, r1
 800a9fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800aa04:	f846 1b04 	str.w	r1, [r6], #4
 800aa08:	e7de      	b.n	800a9c8 <__mdiff+0xc8>
 800aa0a:	3f01      	subs	r7, #1
 800aa0c:	e7e8      	b.n	800a9e0 <__mdiff+0xe0>
 800aa0e:	bf00      	nop
 800aa10:	0800c317 	.word	0x0800c317
 800aa14:	0800c328 	.word	0x0800c328

0800aa18 <__d2b>:
 800aa18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aa22:	4690      	mov	r8, r2
 800aa24:	461d      	mov	r5, r3
 800aa26:	f7ff fcd1 	bl	800a3cc <_Balloc>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	b930      	cbnz	r0, 800aa3c <__d2b+0x24>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	f240 310a 	movw	r1, #778	; 0x30a
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <__d2b+0xb0>)
 800aa36:	4825      	ldr	r0, [pc, #148]	; (800aacc <__d2b+0xb4>)
 800aa38:	f000 faa6 	bl	800af88 <__assert_func>
 800aa3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aa44:	bb2d      	cbnz	r5, 800aa92 <__d2b+0x7a>
 800aa46:	9301      	str	r3, [sp, #4]
 800aa48:	f1b8 0300 	subs.w	r3, r8, #0
 800aa4c:	d026      	beq.n	800aa9c <__d2b+0x84>
 800aa4e:	4668      	mov	r0, sp
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	f7ff fd83 	bl	800a55c <__lo0bits>
 800aa56:	9900      	ldr	r1, [sp, #0]
 800aa58:	b1f0      	cbz	r0, 800aa98 <__d2b+0x80>
 800aa5a:	9a01      	ldr	r2, [sp, #4]
 800aa5c:	f1c0 0320 	rsb	r3, r0, #32
 800aa60:	fa02 f303 	lsl.w	r3, r2, r3
 800aa64:	430b      	orrs	r3, r1
 800aa66:	40c2      	lsrs	r2, r0
 800aa68:	6163      	str	r3, [r4, #20]
 800aa6a:	9201      	str	r2, [sp, #4]
 800aa6c:	9b01      	ldr	r3, [sp, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bf14      	ite	ne
 800aa72:	2102      	movne	r1, #2
 800aa74:	2101      	moveq	r1, #1
 800aa76:	61a3      	str	r3, [r4, #24]
 800aa78:	6121      	str	r1, [r4, #16]
 800aa7a:	b1c5      	cbz	r5, 800aaae <__d2b+0x96>
 800aa7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa80:	4405      	add	r5, r0
 800aa82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa86:	603d      	str	r5, [r7, #0]
 800aa88:	6030      	str	r0, [r6, #0]
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	b002      	add	sp, #8
 800aa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa96:	e7d6      	b.n	800aa46 <__d2b+0x2e>
 800aa98:	6161      	str	r1, [r4, #20]
 800aa9a:	e7e7      	b.n	800aa6c <__d2b+0x54>
 800aa9c:	a801      	add	r0, sp, #4
 800aa9e:	f7ff fd5d 	bl	800a55c <__lo0bits>
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	9b01      	ldr	r3, [sp, #4]
 800aaa6:	6121      	str	r1, [r4, #16]
 800aaa8:	6163      	str	r3, [r4, #20]
 800aaaa:	3020      	adds	r0, #32
 800aaac:	e7e5      	b.n	800aa7a <__d2b+0x62>
 800aaae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aab2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aab6:	6038      	str	r0, [r7, #0]
 800aab8:	6918      	ldr	r0, [r3, #16]
 800aaba:	f7ff fd2f 	bl	800a51c <__hi0bits>
 800aabe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800aac2:	6031      	str	r1, [r6, #0]
 800aac4:	e7e1      	b.n	800aa8a <__d2b+0x72>
 800aac6:	bf00      	nop
 800aac8:	0800c317 	.word	0x0800c317
 800aacc:	0800c328 	.word	0x0800c328

0800aad0 <_calloc_r>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	fba1 5402 	umull	r5, r4, r1, r2
 800aad6:	b934      	cbnz	r4, 800aae6 <_calloc_r+0x16>
 800aad8:	4629      	mov	r1, r5
 800aada:	f000 f875 	bl	800abc8 <_malloc_r>
 800aade:	4606      	mov	r6, r0
 800aae0:	b928      	cbnz	r0, 800aaee <_calloc_r+0x1e>
 800aae2:	4630      	mov	r0, r6
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	220c      	movs	r2, #12
 800aae8:	2600      	movs	r6, #0
 800aaea:	6002      	str	r2, [r0, #0]
 800aaec:	e7f9      	b.n	800aae2 <_calloc_r+0x12>
 800aaee:	462a      	mov	r2, r5
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	f7fe f93f 	bl	8008d74 <memset>
 800aaf6:	e7f4      	b.n	800aae2 <_calloc_r+0x12>

0800aaf8 <_free_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4605      	mov	r5, r0
 800aafc:	2900      	cmp	r1, #0
 800aafe:	d040      	beq.n	800ab82 <_free_r+0x8a>
 800ab00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab04:	1f0c      	subs	r4, r1, #4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfb8      	it	lt
 800ab0a:	18e4      	addlt	r4, r4, r3
 800ab0c:	f000 fa98 	bl	800b040 <__malloc_lock>
 800ab10:	4a1c      	ldr	r2, [pc, #112]	; (800ab84 <_free_r+0x8c>)
 800ab12:	6813      	ldr	r3, [r2, #0]
 800ab14:	b933      	cbnz	r3, 800ab24 <_free_r+0x2c>
 800ab16:	6063      	str	r3, [r4, #4]
 800ab18:	6014      	str	r4, [r2, #0]
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab20:	f000 ba94 	b.w	800b04c <__malloc_unlock>
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	d908      	bls.n	800ab3a <_free_r+0x42>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	1821      	adds	r1, r4, r0
 800ab2c:	428b      	cmp	r3, r1
 800ab2e:	bf01      	itttt	eq
 800ab30:	6819      	ldreq	r1, [r3, #0]
 800ab32:	685b      	ldreq	r3, [r3, #4]
 800ab34:	1809      	addeq	r1, r1, r0
 800ab36:	6021      	streq	r1, [r4, #0]
 800ab38:	e7ed      	b.n	800ab16 <_free_r+0x1e>
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	b10b      	cbz	r3, 800ab44 <_free_r+0x4c>
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d9fa      	bls.n	800ab3a <_free_r+0x42>
 800ab44:	6811      	ldr	r1, [r2, #0]
 800ab46:	1850      	adds	r0, r2, r1
 800ab48:	42a0      	cmp	r0, r4
 800ab4a:	d10b      	bne.n	800ab64 <_free_r+0x6c>
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	4401      	add	r1, r0
 800ab50:	1850      	adds	r0, r2, r1
 800ab52:	4283      	cmp	r3, r0
 800ab54:	6011      	str	r1, [r2, #0]
 800ab56:	d1e0      	bne.n	800ab1a <_free_r+0x22>
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	4401      	add	r1, r0
 800ab5e:	6011      	str	r1, [r2, #0]
 800ab60:	6053      	str	r3, [r2, #4]
 800ab62:	e7da      	b.n	800ab1a <_free_r+0x22>
 800ab64:	d902      	bls.n	800ab6c <_free_r+0x74>
 800ab66:	230c      	movs	r3, #12
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	e7d6      	b.n	800ab1a <_free_r+0x22>
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	1821      	adds	r1, r4, r0
 800ab70:	428b      	cmp	r3, r1
 800ab72:	bf01      	itttt	eq
 800ab74:	6819      	ldreq	r1, [r3, #0]
 800ab76:	685b      	ldreq	r3, [r3, #4]
 800ab78:	1809      	addeq	r1, r1, r0
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	6054      	str	r4, [r2, #4]
 800ab80:	e7cb      	b.n	800ab1a <_free_r+0x22>
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	20000528 	.word	0x20000528

0800ab88 <sbrk_aligned>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4e0e      	ldr	r6, [pc, #56]	; (800abc4 <sbrk_aligned+0x3c>)
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	6831      	ldr	r1, [r6, #0]
 800ab90:	4605      	mov	r5, r0
 800ab92:	b911      	cbnz	r1, 800ab9a <sbrk_aligned+0x12>
 800ab94:	f000 f9e8 	bl	800af68 <_sbrk_r>
 800ab98:	6030      	str	r0, [r6, #0]
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 f9e3 	bl	800af68 <_sbrk_r>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d00a      	beq.n	800abbc <sbrk_aligned+0x34>
 800aba6:	1cc4      	adds	r4, r0, #3
 800aba8:	f024 0403 	bic.w	r4, r4, #3
 800abac:	42a0      	cmp	r0, r4
 800abae:	d007      	beq.n	800abc0 <sbrk_aligned+0x38>
 800abb0:	1a21      	subs	r1, r4, r0
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 f9d8 	bl	800af68 <_sbrk_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	d101      	bne.n	800abc0 <sbrk_aligned+0x38>
 800abbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800abc0:	4620      	mov	r0, r4
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	2000052c 	.word	0x2000052c

0800abc8 <_malloc_r>:
 800abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abcc:	1ccd      	adds	r5, r1, #3
 800abce:	f025 0503 	bic.w	r5, r5, #3
 800abd2:	3508      	adds	r5, #8
 800abd4:	2d0c      	cmp	r5, #12
 800abd6:	bf38      	it	cc
 800abd8:	250c      	movcc	r5, #12
 800abda:	2d00      	cmp	r5, #0
 800abdc:	4607      	mov	r7, r0
 800abde:	db01      	blt.n	800abe4 <_malloc_r+0x1c>
 800abe0:	42a9      	cmp	r1, r5
 800abe2:	d905      	bls.n	800abf0 <_malloc_r+0x28>
 800abe4:	230c      	movs	r3, #12
 800abe6:	2600      	movs	r6, #0
 800abe8:	603b      	str	r3, [r7, #0]
 800abea:	4630      	mov	r0, r6
 800abec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf0:	4e2e      	ldr	r6, [pc, #184]	; (800acac <_malloc_r+0xe4>)
 800abf2:	f000 fa25 	bl	800b040 <__malloc_lock>
 800abf6:	6833      	ldr	r3, [r6, #0]
 800abf8:	461c      	mov	r4, r3
 800abfa:	bb34      	cbnz	r4, 800ac4a <_malloc_r+0x82>
 800abfc:	4629      	mov	r1, r5
 800abfe:	4638      	mov	r0, r7
 800ac00:	f7ff ffc2 	bl	800ab88 <sbrk_aligned>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	4604      	mov	r4, r0
 800ac08:	d14d      	bne.n	800aca6 <_malloc_r+0xde>
 800ac0a:	6834      	ldr	r4, [r6, #0]
 800ac0c:	4626      	mov	r6, r4
 800ac0e:	2e00      	cmp	r6, #0
 800ac10:	d140      	bne.n	800ac94 <_malloc_r+0xcc>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	4631      	mov	r1, r6
 800ac16:	4638      	mov	r0, r7
 800ac18:	eb04 0803 	add.w	r8, r4, r3
 800ac1c:	f000 f9a4 	bl	800af68 <_sbrk_r>
 800ac20:	4580      	cmp	r8, r0
 800ac22:	d13a      	bne.n	800ac9a <_malloc_r+0xd2>
 800ac24:	6821      	ldr	r1, [r4, #0]
 800ac26:	3503      	adds	r5, #3
 800ac28:	1a6d      	subs	r5, r5, r1
 800ac2a:	f025 0503 	bic.w	r5, r5, #3
 800ac2e:	3508      	adds	r5, #8
 800ac30:	2d0c      	cmp	r5, #12
 800ac32:	bf38      	it	cc
 800ac34:	250c      	movcc	r5, #12
 800ac36:	4638      	mov	r0, r7
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7ff ffa5 	bl	800ab88 <sbrk_aligned>
 800ac3e:	3001      	adds	r0, #1
 800ac40:	d02b      	beq.n	800ac9a <_malloc_r+0xd2>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	442b      	add	r3, r5
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	e00e      	b.n	800ac68 <_malloc_r+0xa0>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	1b52      	subs	r2, r2, r5
 800ac4e:	d41e      	bmi.n	800ac8e <_malloc_r+0xc6>
 800ac50:	2a0b      	cmp	r2, #11
 800ac52:	d916      	bls.n	800ac82 <_malloc_r+0xba>
 800ac54:	1961      	adds	r1, r4, r5
 800ac56:	42a3      	cmp	r3, r4
 800ac58:	6025      	str	r5, [r4, #0]
 800ac5a:	bf18      	it	ne
 800ac5c:	6059      	strne	r1, [r3, #4]
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	bf08      	it	eq
 800ac62:	6031      	streq	r1, [r6, #0]
 800ac64:	5162      	str	r2, [r4, r5]
 800ac66:	604b      	str	r3, [r1, #4]
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f104 060b 	add.w	r6, r4, #11
 800ac6e:	f000 f9ed 	bl	800b04c <__malloc_unlock>
 800ac72:	f026 0607 	bic.w	r6, r6, #7
 800ac76:	1d23      	adds	r3, r4, #4
 800ac78:	1af2      	subs	r2, r6, r3
 800ac7a:	d0b6      	beq.n	800abea <_malloc_r+0x22>
 800ac7c:	1b9b      	subs	r3, r3, r6
 800ac7e:	50a3      	str	r3, [r4, r2]
 800ac80:	e7b3      	b.n	800abea <_malloc_r+0x22>
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	bf0c      	ite	eq
 800ac88:	6032      	streq	r2, [r6, #0]
 800ac8a:	605a      	strne	r2, [r3, #4]
 800ac8c:	e7ec      	b.n	800ac68 <_malloc_r+0xa0>
 800ac8e:	4623      	mov	r3, r4
 800ac90:	6864      	ldr	r4, [r4, #4]
 800ac92:	e7b2      	b.n	800abfa <_malloc_r+0x32>
 800ac94:	4634      	mov	r4, r6
 800ac96:	6876      	ldr	r6, [r6, #4]
 800ac98:	e7b9      	b.n	800ac0e <_malloc_r+0x46>
 800ac9a:	230c      	movs	r3, #12
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	603b      	str	r3, [r7, #0]
 800aca0:	f000 f9d4 	bl	800b04c <__malloc_unlock>
 800aca4:	e7a1      	b.n	800abea <_malloc_r+0x22>
 800aca6:	6025      	str	r5, [r4, #0]
 800aca8:	e7de      	b.n	800ac68 <_malloc_r+0xa0>
 800acaa:	bf00      	nop
 800acac:	20000528 	.word	0x20000528

0800acb0 <__ssputs_r>:
 800acb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	688e      	ldr	r6, [r1, #8]
 800acb6:	4682      	mov	sl, r0
 800acb8:	429e      	cmp	r6, r3
 800acba:	460c      	mov	r4, r1
 800acbc:	4690      	mov	r8, r2
 800acbe:	461f      	mov	r7, r3
 800acc0:	d838      	bhi.n	800ad34 <__ssputs_r+0x84>
 800acc2:	898a      	ldrh	r2, [r1, #12]
 800acc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acc8:	d032      	beq.n	800ad30 <__ssputs_r+0x80>
 800acca:	6825      	ldr	r5, [r4, #0]
 800accc:	6909      	ldr	r1, [r1, #16]
 800acce:	3301      	adds	r3, #1
 800acd0:	eba5 0901 	sub.w	r9, r5, r1
 800acd4:	6965      	ldr	r5, [r4, #20]
 800acd6:	444b      	add	r3, r9
 800acd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace0:	106d      	asrs	r5, r5, #1
 800ace2:	429d      	cmp	r5, r3
 800ace4:	bf38      	it	cc
 800ace6:	461d      	movcc	r5, r3
 800ace8:	0553      	lsls	r3, r2, #21
 800acea:	d531      	bpl.n	800ad50 <__ssputs_r+0xa0>
 800acec:	4629      	mov	r1, r5
 800acee:	f7ff ff6b 	bl	800abc8 <_malloc_r>
 800acf2:	4606      	mov	r6, r0
 800acf4:	b950      	cbnz	r0, 800ad0c <__ssputs_r+0x5c>
 800acf6:	230c      	movs	r3, #12
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acfc:	f8ca 3000 	str.w	r3, [sl]
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0c:	464a      	mov	r2, r9
 800ad0e:	6921      	ldr	r1, [r4, #16]
 800ad10:	f7ff fb4e 	bl	800a3b0 <memcpy>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	6126      	str	r6, [r4, #16]
 800ad22:	444e      	add	r6, r9
 800ad24:	6026      	str	r6, [r4, #0]
 800ad26:	463e      	mov	r6, r7
 800ad28:	6165      	str	r5, [r4, #20]
 800ad2a:	eba5 0509 	sub.w	r5, r5, r9
 800ad2e:	60a5      	str	r5, [r4, #8]
 800ad30:	42be      	cmp	r6, r7
 800ad32:	d900      	bls.n	800ad36 <__ssputs_r+0x86>
 800ad34:	463e      	mov	r6, r7
 800ad36:	4632      	mov	r2, r6
 800ad38:	4641      	mov	r1, r8
 800ad3a:	6820      	ldr	r0, [r4, #0]
 800ad3c:	f000 f966 	bl	800b00c <memmove>
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	2000      	movs	r0, #0
 800ad44:	1b9b      	subs	r3, r3, r6
 800ad46:	60a3      	str	r3, [r4, #8]
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	4433      	add	r3, r6
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	e7db      	b.n	800ad08 <__ssputs_r+0x58>
 800ad50:	462a      	mov	r2, r5
 800ad52:	f000 f981 	bl	800b058 <_realloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1e1      	bne.n	800ad20 <__ssputs_r+0x70>
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	6921      	ldr	r1, [r4, #16]
 800ad60:	f7ff feca 	bl	800aaf8 <_free_r>
 800ad64:	e7c7      	b.n	800acf6 <__ssputs_r+0x46>
	...

0800ad68 <_svfiprintf_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4698      	mov	r8, r3
 800ad6e:	898b      	ldrh	r3, [r1, #12]
 800ad70:	4607      	mov	r7, r0
 800ad72:	061b      	lsls	r3, r3, #24
 800ad74:	460d      	mov	r5, r1
 800ad76:	4614      	mov	r4, r2
 800ad78:	b09d      	sub	sp, #116	; 0x74
 800ad7a:	d50e      	bpl.n	800ad9a <_svfiprintf_r+0x32>
 800ad7c:	690b      	ldr	r3, [r1, #16]
 800ad7e:	b963      	cbnz	r3, 800ad9a <_svfiprintf_r+0x32>
 800ad80:	2140      	movs	r1, #64	; 0x40
 800ad82:	f7ff ff21 	bl	800abc8 <_malloc_r>
 800ad86:	6028      	str	r0, [r5, #0]
 800ad88:	6128      	str	r0, [r5, #16]
 800ad8a:	b920      	cbnz	r0, 800ad96 <_svfiprintf_r+0x2e>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad94:	e0d1      	b.n	800af3a <_svfiprintf_r+0x1d2>
 800ad96:	2340      	movs	r3, #64	; 0x40
 800ad98:	616b      	str	r3, [r5, #20]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9e:	2320      	movs	r3, #32
 800ada0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ada4:	2330      	movs	r3, #48	; 0x30
 800ada6:	f04f 0901 	mov.w	r9, #1
 800adaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800adae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af54 <_svfiprintf_r+0x1ec>
 800adb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adb6:	4623      	mov	r3, r4
 800adb8:	469a      	mov	sl, r3
 800adba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adbe:	b10a      	cbz	r2, 800adc4 <_svfiprintf_r+0x5c>
 800adc0:	2a25      	cmp	r2, #37	; 0x25
 800adc2:	d1f9      	bne.n	800adb8 <_svfiprintf_r+0x50>
 800adc4:	ebba 0b04 	subs.w	fp, sl, r4
 800adc8:	d00b      	beq.n	800ade2 <_svfiprintf_r+0x7a>
 800adca:	465b      	mov	r3, fp
 800adcc:	4622      	mov	r2, r4
 800adce:	4629      	mov	r1, r5
 800add0:	4638      	mov	r0, r7
 800add2:	f7ff ff6d 	bl	800acb0 <__ssputs_r>
 800add6:	3001      	adds	r0, #1
 800add8:	f000 80aa 	beq.w	800af30 <_svfiprintf_r+0x1c8>
 800addc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adde:	445a      	add	r2, fp
 800ade0:	9209      	str	r2, [sp, #36]	; 0x24
 800ade2:	f89a 3000 	ldrb.w	r3, [sl]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80a2 	beq.w	800af30 <_svfiprintf_r+0x1c8>
 800adec:	2300      	movs	r3, #0
 800adee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf6:	f10a 0a01 	add.w	sl, sl, #1
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae02:	931a      	str	r3, [sp, #104]	; 0x68
 800ae04:	4654      	mov	r4, sl
 800ae06:	2205      	movs	r2, #5
 800ae08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0c:	4851      	ldr	r0, [pc, #324]	; (800af54 <_svfiprintf_r+0x1ec>)
 800ae0e:	f7ff fac1 	bl	800a394 <memchr>
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	b9d8      	cbnz	r0, 800ae4e <_svfiprintf_r+0xe6>
 800ae16:	06d0      	lsls	r0, r2, #27
 800ae18:	bf44      	itt	mi
 800ae1a:	2320      	movmi	r3, #32
 800ae1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae20:	0711      	lsls	r1, r2, #28
 800ae22:	bf44      	itt	mi
 800ae24:	232b      	movmi	r3, #43	; 0x2b
 800ae26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae30:	d015      	beq.n	800ae5e <_svfiprintf_r+0xf6>
 800ae32:	4654      	mov	r4, sl
 800ae34:	2000      	movs	r0, #0
 800ae36:	f04f 0c0a 	mov.w	ip, #10
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae42:	3b30      	subs	r3, #48	; 0x30
 800ae44:	2b09      	cmp	r3, #9
 800ae46:	d94e      	bls.n	800aee6 <_svfiprintf_r+0x17e>
 800ae48:	b1b0      	cbz	r0, 800ae78 <_svfiprintf_r+0x110>
 800ae4a:	9207      	str	r2, [sp, #28]
 800ae4c:	e014      	b.n	800ae78 <_svfiprintf_r+0x110>
 800ae4e:	eba0 0308 	sub.w	r3, r0, r8
 800ae52:	fa09 f303 	lsl.w	r3, r9, r3
 800ae56:	4313      	orrs	r3, r2
 800ae58:	46a2      	mov	sl, r4
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	e7d2      	b.n	800ae04 <_svfiprintf_r+0x9c>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	1d19      	adds	r1, r3, #4
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	9103      	str	r1, [sp, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bfbb      	ittet	lt
 800ae6a:	425b      	neglt	r3, r3
 800ae6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae70:	9307      	strge	r3, [sp, #28]
 800ae72:	9307      	strlt	r3, [sp, #28]
 800ae74:	bfb8      	it	lt
 800ae76:	9204      	strlt	r2, [sp, #16]
 800ae78:	7823      	ldrb	r3, [r4, #0]
 800ae7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae7c:	d10c      	bne.n	800ae98 <_svfiprintf_r+0x130>
 800ae7e:	7863      	ldrb	r3, [r4, #1]
 800ae80:	2b2a      	cmp	r3, #42	; 0x2a
 800ae82:	d135      	bne.n	800aef0 <_svfiprintf_r+0x188>
 800ae84:	9b03      	ldr	r3, [sp, #12]
 800ae86:	3402      	adds	r4, #2
 800ae88:	1d1a      	adds	r2, r3, #4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	9203      	str	r2, [sp, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	bfb8      	it	lt
 800ae92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae96:	9305      	str	r3, [sp, #20]
 800ae98:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af58 <_svfiprintf_r+0x1f0>
 800ae9c:	2203      	movs	r2, #3
 800ae9e:	4650      	mov	r0, sl
 800aea0:	7821      	ldrb	r1, [r4, #0]
 800aea2:	f7ff fa77 	bl	800a394 <memchr>
 800aea6:	b140      	cbz	r0, 800aeba <_svfiprintf_r+0x152>
 800aea8:	2340      	movs	r3, #64	; 0x40
 800aeaa:	eba0 000a 	sub.w	r0, r0, sl
 800aeae:	fa03 f000 	lsl.w	r0, r3, r0
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	4303      	orrs	r3, r0
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebe:	2206      	movs	r2, #6
 800aec0:	4826      	ldr	r0, [pc, #152]	; (800af5c <_svfiprintf_r+0x1f4>)
 800aec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aec6:	f7ff fa65 	bl	800a394 <memchr>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d038      	beq.n	800af40 <_svfiprintf_r+0x1d8>
 800aece:	4b24      	ldr	r3, [pc, #144]	; (800af60 <_svfiprintf_r+0x1f8>)
 800aed0:	bb1b      	cbnz	r3, 800af1a <_svfiprintf_r+0x1b2>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	3307      	adds	r3, #7
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	3308      	adds	r3, #8
 800aedc:	9303      	str	r3, [sp, #12]
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	4433      	add	r3, r6
 800aee2:	9309      	str	r3, [sp, #36]	; 0x24
 800aee4:	e767      	b.n	800adb6 <_svfiprintf_r+0x4e>
 800aee6:	460c      	mov	r4, r1
 800aee8:	2001      	movs	r0, #1
 800aeea:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeee:	e7a5      	b.n	800ae3c <_svfiprintf_r+0xd4>
 800aef0:	2300      	movs	r3, #0
 800aef2:	f04f 0c0a 	mov.w	ip, #10
 800aef6:	4619      	mov	r1, r3
 800aef8:	3401      	adds	r4, #1
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	4620      	mov	r0, r4
 800aefe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af02:	3a30      	subs	r2, #48	; 0x30
 800af04:	2a09      	cmp	r2, #9
 800af06:	d903      	bls.n	800af10 <_svfiprintf_r+0x1a8>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0c5      	beq.n	800ae98 <_svfiprintf_r+0x130>
 800af0c:	9105      	str	r1, [sp, #20]
 800af0e:	e7c3      	b.n	800ae98 <_svfiprintf_r+0x130>
 800af10:	4604      	mov	r4, r0
 800af12:	2301      	movs	r3, #1
 800af14:	fb0c 2101 	mla	r1, ip, r1, r2
 800af18:	e7f0      	b.n	800aefc <_svfiprintf_r+0x194>
 800af1a:	ab03      	add	r3, sp, #12
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	462a      	mov	r2, r5
 800af20:	4638      	mov	r0, r7
 800af22:	4b10      	ldr	r3, [pc, #64]	; (800af64 <_svfiprintf_r+0x1fc>)
 800af24:	a904      	add	r1, sp, #16
 800af26:	f7fd ffcb 	bl	8008ec0 <_printf_float>
 800af2a:	1c42      	adds	r2, r0, #1
 800af2c:	4606      	mov	r6, r0
 800af2e:	d1d6      	bne.n	800aede <_svfiprintf_r+0x176>
 800af30:	89ab      	ldrh	r3, [r5, #12]
 800af32:	065b      	lsls	r3, r3, #25
 800af34:	f53f af2c 	bmi.w	800ad90 <_svfiprintf_r+0x28>
 800af38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af3a:	b01d      	add	sp, #116	; 0x74
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4638      	mov	r0, r7
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <_svfiprintf_r+0x1fc>)
 800af4a:	a904      	add	r1, sp, #16
 800af4c:	f7fe fa54 	bl	80093f8 <_printf_i>
 800af50:	e7eb      	b.n	800af2a <_svfiprintf_r+0x1c2>
 800af52:	bf00      	nop
 800af54:	0800c484 	.word	0x0800c484
 800af58:	0800c48a 	.word	0x0800c48a
 800af5c:	0800c48e 	.word	0x0800c48e
 800af60:	08008ec1 	.word	0x08008ec1
 800af64:	0800acb1 	.word	0x0800acb1

0800af68 <_sbrk_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	2300      	movs	r3, #0
 800af6c:	4d05      	ldr	r5, [pc, #20]	; (800af84 <_sbrk_r+0x1c>)
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f9 fc1c 	bl	80047b0 <_sbrk>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_sbrk_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_sbrk_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	20000530 	.word	0x20000530

0800af88 <__assert_func>:
 800af88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af8a:	4614      	mov	r4, r2
 800af8c:	461a      	mov	r2, r3
 800af8e:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <__assert_func+0x2c>)
 800af90:	4605      	mov	r5, r0
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68d8      	ldr	r0, [r3, #12]
 800af96:	b14c      	cbz	r4, 800afac <__assert_func+0x24>
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <__assert_func+0x30>)
 800af9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af9e:	9100      	str	r1, [sp, #0]
 800afa0:	462b      	mov	r3, r5
 800afa2:	4906      	ldr	r1, [pc, #24]	; (800afbc <__assert_func+0x34>)
 800afa4:	f000 f80e 	bl	800afc4 <fiprintf>
 800afa8:	f000 faaa 	bl	800b500 <abort>
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <__assert_func+0x38>)
 800afae:	461c      	mov	r4, r3
 800afb0:	e7f3      	b.n	800af9a <__assert_func+0x12>
 800afb2:	bf00      	nop
 800afb4:	200000b8 	.word	0x200000b8
 800afb8:	0800c495 	.word	0x0800c495
 800afbc:	0800c4a2 	.word	0x0800c4a2
 800afc0:	0800c4d0 	.word	0x0800c4d0

0800afc4 <fiprintf>:
 800afc4:	b40e      	push	{r1, r2, r3}
 800afc6:	b503      	push	{r0, r1, lr}
 800afc8:	4601      	mov	r1, r0
 800afca:	ab03      	add	r3, sp, #12
 800afcc:	4805      	ldr	r0, [pc, #20]	; (800afe4 <fiprintf+0x20>)
 800afce:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd2:	6800      	ldr	r0, [r0, #0]
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	f000 f895 	bl	800b104 <_vfiprintf_r>
 800afda:	b002      	add	sp, #8
 800afdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe0:	b003      	add	sp, #12
 800afe2:	4770      	bx	lr
 800afe4:	200000b8 	.word	0x200000b8

0800afe8 <__ascii_mbtowc>:
 800afe8:	b082      	sub	sp, #8
 800afea:	b901      	cbnz	r1, 800afee <__ascii_mbtowc+0x6>
 800afec:	a901      	add	r1, sp, #4
 800afee:	b142      	cbz	r2, 800b002 <__ascii_mbtowc+0x1a>
 800aff0:	b14b      	cbz	r3, 800b006 <__ascii_mbtowc+0x1e>
 800aff2:	7813      	ldrb	r3, [r2, #0]
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	1e10      	subs	r0, r2, #0
 800affa:	bf18      	it	ne
 800affc:	2001      	movne	r0, #1
 800affe:	b002      	add	sp, #8
 800b000:	4770      	bx	lr
 800b002:	4610      	mov	r0, r2
 800b004:	e7fb      	b.n	800affe <__ascii_mbtowc+0x16>
 800b006:	f06f 0001 	mvn.w	r0, #1
 800b00a:	e7f8      	b.n	800affe <__ascii_mbtowc+0x16>

0800b00c <memmove>:
 800b00c:	4288      	cmp	r0, r1
 800b00e:	b510      	push	{r4, lr}
 800b010:	eb01 0402 	add.w	r4, r1, r2
 800b014:	d902      	bls.n	800b01c <memmove+0x10>
 800b016:	4284      	cmp	r4, r0
 800b018:	4623      	mov	r3, r4
 800b01a:	d807      	bhi.n	800b02c <memmove+0x20>
 800b01c:	1e43      	subs	r3, r0, #1
 800b01e:	42a1      	cmp	r1, r4
 800b020:	d008      	beq.n	800b034 <memmove+0x28>
 800b022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02a:	e7f8      	b.n	800b01e <memmove+0x12>
 800b02c:	4601      	mov	r1, r0
 800b02e:	4402      	add	r2, r0
 800b030:	428a      	cmp	r2, r1
 800b032:	d100      	bne.n	800b036 <memmove+0x2a>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b03e:	e7f7      	b.n	800b030 <memmove+0x24>

0800b040 <__malloc_lock>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__malloc_lock+0x8>)
 800b042:	f000 bc19 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	20000534 	.word	0x20000534

0800b04c <__malloc_unlock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__malloc_unlock+0x8>)
 800b04e:	f000 bc14 	b.w	800b87a <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	20000534 	.word	0x20000534

0800b058 <_realloc_r>:
 800b058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05c:	4680      	mov	r8, r0
 800b05e:	4614      	mov	r4, r2
 800b060:	460e      	mov	r6, r1
 800b062:	b921      	cbnz	r1, 800b06e <_realloc_r+0x16>
 800b064:	4611      	mov	r1, r2
 800b066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b06a:	f7ff bdad 	b.w	800abc8 <_malloc_r>
 800b06e:	b92a      	cbnz	r2, 800b07c <_realloc_r+0x24>
 800b070:	f7ff fd42 	bl	800aaf8 <_free_r>
 800b074:	4625      	mov	r5, r4
 800b076:	4628      	mov	r0, r5
 800b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07c:	f000 fc64 	bl	800b948 <_malloc_usable_size_r>
 800b080:	4284      	cmp	r4, r0
 800b082:	4607      	mov	r7, r0
 800b084:	d802      	bhi.n	800b08c <_realloc_r+0x34>
 800b086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b08a:	d812      	bhi.n	800b0b2 <_realloc_r+0x5a>
 800b08c:	4621      	mov	r1, r4
 800b08e:	4640      	mov	r0, r8
 800b090:	f7ff fd9a 	bl	800abc8 <_malloc_r>
 800b094:	4605      	mov	r5, r0
 800b096:	2800      	cmp	r0, #0
 800b098:	d0ed      	beq.n	800b076 <_realloc_r+0x1e>
 800b09a:	42bc      	cmp	r4, r7
 800b09c:	4622      	mov	r2, r4
 800b09e:	4631      	mov	r1, r6
 800b0a0:	bf28      	it	cs
 800b0a2:	463a      	movcs	r2, r7
 800b0a4:	f7ff f984 	bl	800a3b0 <memcpy>
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f7ff fd24 	bl	800aaf8 <_free_r>
 800b0b0:	e7e1      	b.n	800b076 <_realloc_r+0x1e>
 800b0b2:	4635      	mov	r5, r6
 800b0b4:	e7df      	b.n	800b076 <_realloc_r+0x1e>

0800b0b6 <__sfputc_r>:
 800b0b6:	6893      	ldr	r3, [r2, #8]
 800b0b8:	b410      	push	{r4}
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	6093      	str	r3, [r2, #8]
 800b0c0:	da07      	bge.n	800b0d2 <__sfputc_r+0x1c>
 800b0c2:	6994      	ldr	r4, [r2, #24]
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	db01      	blt.n	800b0cc <__sfputc_r+0x16>
 800b0c8:	290a      	cmp	r1, #10
 800b0ca:	d102      	bne.n	800b0d2 <__sfputc_r+0x1c>
 800b0cc:	bc10      	pop	{r4}
 800b0ce:	f000 b949 	b.w	800b364 <__swbuf_r>
 800b0d2:	6813      	ldr	r3, [r2, #0]
 800b0d4:	1c58      	adds	r0, r3, #1
 800b0d6:	6010      	str	r0, [r2, #0]
 800b0d8:	7019      	strb	r1, [r3, #0]
 800b0da:	4608      	mov	r0, r1
 800b0dc:	bc10      	pop	{r4}
 800b0de:	4770      	bx	lr

0800b0e0 <__sfputs_r>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	460f      	mov	r7, r1
 800b0e6:	4614      	mov	r4, r2
 800b0e8:	18d5      	adds	r5, r2, r3
 800b0ea:	42ac      	cmp	r4, r5
 800b0ec:	d101      	bne.n	800b0f2 <__sfputs_r+0x12>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	e007      	b.n	800b102 <__sfputs_r+0x22>
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fa:	f7ff ffdc 	bl	800b0b6 <__sfputc_r>
 800b0fe:	1c43      	adds	r3, r0, #1
 800b100:	d1f3      	bne.n	800b0ea <__sfputs_r+0xa>
 800b102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b104 <_vfiprintf_r>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	460d      	mov	r5, r1
 800b10a:	4614      	mov	r4, r2
 800b10c:	4698      	mov	r8, r3
 800b10e:	4606      	mov	r6, r0
 800b110:	b09d      	sub	sp, #116	; 0x74
 800b112:	b118      	cbz	r0, 800b11c <_vfiprintf_r+0x18>
 800b114:	6983      	ldr	r3, [r0, #24]
 800b116:	b90b      	cbnz	r3, 800b11c <_vfiprintf_r+0x18>
 800b118:	f000 fb10 	bl	800b73c <__sinit>
 800b11c:	4b89      	ldr	r3, [pc, #548]	; (800b344 <_vfiprintf_r+0x240>)
 800b11e:	429d      	cmp	r5, r3
 800b120:	d11b      	bne.n	800b15a <_vfiprintf_r+0x56>
 800b122:	6875      	ldr	r5, [r6, #4]
 800b124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b126:	07d9      	lsls	r1, r3, #31
 800b128:	d405      	bmi.n	800b136 <_vfiprintf_r+0x32>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	059a      	lsls	r2, r3, #22
 800b12e:	d402      	bmi.n	800b136 <_vfiprintf_r+0x32>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f000 fba1 	bl	800b878 <__retarget_lock_acquire_recursive>
 800b136:	89ab      	ldrh	r3, [r5, #12]
 800b138:	071b      	lsls	r3, r3, #28
 800b13a:	d501      	bpl.n	800b140 <_vfiprintf_r+0x3c>
 800b13c:	692b      	ldr	r3, [r5, #16]
 800b13e:	b9eb      	cbnz	r3, 800b17c <_vfiprintf_r+0x78>
 800b140:	4629      	mov	r1, r5
 800b142:	4630      	mov	r0, r6
 800b144:	f000 f96e 	bl	800b424 <__swsetup_r>
 800b148:	b1c0      	cbz	r0, 800b17c <_vfiprintf_r+0x78>
 800b14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b14c:	07dc      	lsls	r4, r3, #31
 800b14e:	d50e      	bpl.n	800b16e <_vfiprintf_r+0x6a>
 800b150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b154:	b01d      	add	sp, #116	; 0x74
 800b156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15a:	4b7b      	ldr	r3, [pc, #492]	; (800b348 <_vfiprintf_r+0x244>)
 800b15c:	429d      	cmp	r5, r3
 800b15e:	d101      	bne.n	800b164 <_vfiprintf_r+0x60>
 800b160:	68b5      	ldr	r5, [r6, #8]
 800b162:	e7df      	b.n	800b124 <_vfiprintf_r+0x20>
 800b164:	4b79      	ldr	r3, [pc, #484]	; (800b34c <_vfiprintf_r+0x248>)
 800b166:	429d      	cmp	r5, r3
 800b168:	bf08      	it	eq
 800b16a:	68f5      	ldreq	r5, [r6, #12]
 800b16c:	e7da      	b.n	800b124 <_vfiprintf_r+0x20>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	0598      	lsls	r0, r3, #22
 800b172:	d4ed      	bmi.n	800b150 <_vfiprintf_r+0x4c>
 800b174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b176:	f000 fb80 	bl	800b87a <__retarget_lock_release_recursive>
 800b17a:	e7e9      	b.n	800b150 <_vfiprintf_r+0x4c>
 800b17c:	2300      	movs	r3, #0
 800b17e:	9309      	str	r3, [sp, #36]	; 0x24
 800b180:	2320      	movs	r3, #32
 800b182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b186:	2330      	movs	r3, #48	; 0x30
 800b188:	f04f 0901 	mov.w	r9, #1
 800b18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b190:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b350 <_vfiprintf_r+0x24c>
 800b194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b198:	4623      	mov	r3, r4
 800b19a:	469a      	mov	sl, r3
 800b19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a0:	b10a      	cbz	r2, 800b1a6 <_vfiprintf_r+0xa2>
 800b1a2:	2a25      	cmp	r2, #37	; 0x25
 800b1a4:	d1f9      	bne.n	800b19a <_vfiprintf_r+0x96>
 800b1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b1aa:	d00b      	beq.n	800b1c4 <_vfiprintf_r+0xc0>
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff ff94 	bl	800b0e0 <__sfputs_r>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	f000 80aa 	beq.w	800b312 <_vfiprintf_r+0x20e>
 800b1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c0:	445a      	add	r2, fp
 800b1c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 80a2 	beq.w	800b312 <_vfiprintf_r+0x20e>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1d8:	f10a 0a01 	add.w	sl, sl, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	9307      	str	r3, [sp, #28]
 800b1e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1e6:	4654      	mov	r4, sl
 800b1e8:	2205      	movs	r2, #5
 800b1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ee:	4858      	ldr	r0, [pc, #352]	; (800b350 <_vfiprintf_r+0x24c>)
 800b1f0:	f7ff f8d0 	bl	800a394 <memchr>
 800b1f4:	9a04      	ldr	r2, [sp, #16]
 800b1f6:	b9d8      	cbnz	r0, 800b230 <_vfiprintf_r+0x12c>
 800b1f8:	06d1      	lsls	r1, r2, #27
 800b1fa:	bf44      	itt	mi
 800b1fc:	2320      	movmi	r3, #32
 800b1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b202:	0713      	lsls	r3, r2, #28
 800b204:	bf44      	itt	mi
 800b206:	232b      	movmi	r3, #43	; 0x2b
 800b208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b20c:	f89a 3000 	ldrb.w	r3, [sl]
 800b210:	2b2a      	cmp	r3, #42	; 0x2a
 800b212:	d015      	beq.n	800b240 <_vfiprintf_r+0x13c>
 800b214:	4654      	mov	r4, sl
 800b216:	2000      	movs	r0, #0
 800b218:	f04f 0c0a 	mov.w	ip, #10
 800b21c:	9a07      	ldr	r2, [sp, #28]
 800b21e:	4621      	mov	r1, r4
 800b220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b224:	3b30      	subs	r3, #48	; 0x30
 800b226:	2b09      	cmp	r3, #9
 800b228:	d94e      	bls.n	800b2c8 <_vfiprintf_r+0x1c4>
 800b22a:	b1b0      	cbz	r0, 800b25a <_vfiprintf_r+0x156>
 800b22c:	9207      	str	r2, [sp, #28]
 800b22e:	e014      	b.n	800b25a <_vfiprintf_r+0x156>
 800b230:	eba0 0308 	sub.w	r3, r0, r8
 800b234:	fa09 f303 	lsl.w	r3, r9, r3
 800b238:	4313      	orrs	r3, r2
 800b23a:	46a2      	mov	sl, r4
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	e7d2      	b.n	800b1e6 <_vfiprintf_r+0xe2>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	1d19      	adds	r1, r3, #4
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	9103      	str	r1, [sp, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	bfbb      	ittet	lt
 800b24c:	425b      	neglt	r3, r3
 800b24e:	f042 0202 	orrlt.w	r2, r2, #2
 800b252:	9307      	strge	r3, [sp, #28]
 800b254:	9307      	strlt	r3, [sp, #28]
 800b256:	bfb8      	it	lt
 800b258:	9204      	strlt	r2, [sp, #16]
 800b25a:	7823      	ldrb	r3, [r4, #0]
 800b25c:	2b2e      	cmp	r3, #46	; 0x2e
 800b25e:	d10c      	bne.n	800b27a <_vfiprintf_r+0x176>
 800b260:	7863      	ldrb	r3, [r4, #1]
 800b262:	2b2a      	cmp	r3, #42	; 0x2a
 800b264:	d135      	bne.n	800b2d2 <_vfiprintf_r+0x1ce>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	3402      	adds	r4, #2
 800b26a:	1d1a      	adds	r2, r3, #4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	9203      	str	r2, [sp, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfb8      	it	lt
 800b274:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b278:	9305      	str	r3, [sp, #20]
 800b27a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b354 <_vfiprintf_r+0x250>
 800b27e:	2203      	movs	r2, #3
 800b280:	4650      	mov	r0, sl
 800b282:	7821      	ldrb	r1, [r4, #0]
 800b284:	f7ff f886 	bl	800a394 <memchr>
 800b288:	b140      	cbz	r0, 800b29c <_vfiprintf_r+0x198>
 800b28a:	2340      	movs	r3, #64	; 0x40
 800b28c:	eba0 000a 	sub.w	r0, r0, sl
 800b290:	fa03 f000 	lsl.w	r0, r3, r0
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	3401      	adds	r4, #1
 800b298:	4303      	orrs	r3, r0
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a0:	2206      	movs	r2, #6
 800b2a2:	482d      	ldr	r0, [pc, #180]	; (800b358 <_vfiprintf_r+0x254>)
 800b2a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2a8:	f7ff f874 	bl	800a394 <memchr>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d03f      	beq.n	800b330 <_vfiprintf_r+0x22c>
 800b2b0:	4b2a      	ldr	r3, [pc, #168]	; (800b35c <_vfiprintf_r+0x258>)
 800b2b2:	bb1b      	cbnz	r3, 800b2fc <_vfiprintf_r+0x1f8>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	3307      	adds	r3, #7
 800b2b8:	f023 0307 	bic.w	r3, r3, #7
 800b2bc:	3308      	adds	r3, #8
 800b2be:	9303      	str	r3, [sp, #12]
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	443b      	add	r3, r7
 800b2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c6:	e767      	b.n	800b198 <_vfiprintf_r+0x94>
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2d0:	e7a5      	b.n	800b21e <_vfiprintf_r+0x11a>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f04f 0c0a 	mov.w	ip, #10
 800b2d8:	4619      	mov	r1, r3
 800b2da:	3401      	adds	r4, #1
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e4:	3a30      	subs	r2, #48	; 0x30
 800b2e6:	2a09      	cmp	r2, #9
 800b2e8:	d903      	bls.n	800b2f2 <_vfiprintf_r+0x1ee>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0c5      	beq.n	800b27a <_vfiprintf_r+0x176>
 800b2ee:	9105      	str	r1, [sp, #20]
 800b2f0:	e7c3      	b.n	800b27a <_vfiprintf_r+0x176>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2fa:	e7f0      	b.n	800b2de <_vfiprintf_r+0x1da>
 800b2fc:	ab03      	add	r3, sp, #12
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	462a      	mov	r2, r5
 800b302:	4630      	mov	r0, r6
 800b304:	4b16      	ldr	r3, [pc, #88]	; (800b360 <_vfiprintf_r+0x25c>)
 800b306:	a904      	add	r1, sp, #16
 800b308:	f7fd fdda 	bl	8008ec0 <_printf_float>
 800b30c:	4607      	mov	r7, r0
 800b30e:	1c78      	adds	r0, r7, #1
 800b310:	d1d6      	bne.n	800b2c0 <_vfiprintf_r+0x1bc>
 800b312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b314:	07d9      	lsls	r1, r3, #31
 800b316:	d405      	bmi.n	800b324 <_vfiprintf_r+0x220>
 800b318:	89ab      	ldrh	r3, [r5, #12]
 800b31a:	059a      	lsls	r2, r3, #22
 800b31c:	d402      	bmi.n	800b324 <_vfiprintf_r+0x220>
 800b31e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b320:	f000 faab 	bl	800b87a <__retarget_lock_release_recursive>
 800b324:	89ab      	ldrh	r3, [r5, #12]
 800b326:	065b      	lsls	r3, r3, #25
 800b328:	f53f af12 	bmi.w	800b150 <_vfiprintf_r+0x4c>
 800b32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b32e:	e711      	b.n	800b154 <_vfiprintf_r+0x50>
 800b330:	ab03      	add	r3, sp, #12
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	462a      	mov	r2, r5
 800b336:	4630      	mov	r0, r6
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <_vfiprintf_r+0x25c>)
 800b33a:	a904      	add	r1, sp, #16
 800b33c:	f7fe f85c 	bl	80093f8 <_printf_i>
 800b340:	e7e4      	b.n	800b30c <_vfiprintf_r+0x208>
 800b342:	bf00      	nop
 800b344:	0800c5fc 	.word	0x0800c5fc
 800b348:	0800c61c 	.word	0x0800c61c
 800b34c:	0800c5dc 	.word	0x0800c5dc
 800b350:	0800c484 	.word	0x0800c484
 800b354:	0800c48a 	.word	0x0800c48a
 800b358:	0800c48e 	.word	0x0800c48e
 800b35c:	08008ec1 	.word	0x08008ec1
 800b360:	0800b0e1 	.word	0x0800b0e1

0800b364 <__swbuf_r>:
 800b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b366:	460e      	mov	r6, r1
 800b368:	4614      	mov	r4, r2
 800b36a:	4605      	mov	r5, r0
 800b36c:	b118      	cbz	r0, 800b376 <__swbuf_r+0x12>
 800b36e:	6983      	ldr	r3, [r0, #24]
 800b370:	b90b      	cbnz	r3, 800b376 <__swbuf_r+0x12>
 800b372:	f000 f9e3 	bl	800b73c <__sinit>
 800b376:	4b21      	ldr	r3, [pc, #132]	; (800b3fc <__swbuf_r+0x98>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	d12b      	bne.n	800b3d4 <__swbuf_r+0x70>
 800b37c:	686c      	ldr	r4, [r5, #4]
 800b37e:	69a3      	ldr	r3, [r4, #24]
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	071a      	lsls	r2, r3, #28
 800b386:	d52f      	bpl.n	800b3e8 <__swbuf_r+0x84>
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	b36b      	cbz	r3, 800b3e8 <__swbuf_r+0x84>
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	b2f6      	uxtb	r6, r6
 800b392:	1ac0      	subs	r0, r0, r3
 800b394:	6963      	ldr	r3, [r4, #20]
 800b396:	4637      	mov	r7, r6
 800b398:	4283      	cmp	r3, r0
 800b39a:	dc04      	bgt.n	800b3a6 <__swbuf_r+0x42>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f938 	bl	800b614 <_fflush_r>
 800b3a4:	bb30      	cbnz	r0, 800b3f4 <__swbuf_r+0x90>
 800b3a6:	68a3      	ldr	r3, [r4, #8]
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	6022      	str	r2, [r4, #0]
 800b3b4:	701e      	strb	r6, [r3, #0]
 800b3b6:	6963      	ldr	r3, [r4, #20]
 800b3b8:	4283      	cmp	r3, r0
 800b3ba:	d004      	beq.n	800b3c6 <__swbuf_r+0x62>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	07db      	lsls	r3, r3, #31
 800b3c0:	d506      	bpl.n	800b3d0 <__swbuf_r+0x6c>
 800b3c2:	2e0a      	cmp	r6, #10
 800b3c4:	d104      	bne.n	800b3d0 <__swbuf_r+0x6c>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 f923 	bl	800b614 <_fflush_r>
 800b3ce:	b988      	cbnz	r0, 800b3f4 <__swbuf_r+0x90>
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	; (800b400 <__swbuf_r+0x9c>)
 800b3d6:	429c      	cmp	r4, r3
 800b3d8:	d101      	bne.n	800b3de <__swbuf_r+0x7a>
 800b3da:	68ac      	ldr	r4, [r5, #8]
 800b3dc:	e7cf      	b.n	800b37e <__swbuf_r+0x1a>
 800b3de:	4b09      	ldr	r3, [pc, #36]	; (800b404 <__swbuf_r+0xa0>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	bf08      	it	eq
 800b3e4:	68ec      	ldreq	r4, [r5, #12]
 800b3e6:	e7ca      	b.n	800b37e <__swbuf_r+0x1a>
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 f81a 	bl	800b424 <__swsetup_r>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d0cb      	beq.n	800b38c <__swbuf_r+0x28>
 800b3f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b3f8:	e7ea      	b.n	800b3d0 <__swbuf_r+0x6c>
 800b3fa:	bf00      	nop
 800b3fc:	0800c5fc 	.word	0x0800c5fc
 800b400:	0800c61c 	.word	0x0800c61c
 800b404:	0800c5dc 	.word	0x0800c5dc

0800b408 <__ascii_wctomb>:
 800b408:	4603      	mov	r3, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	b141      	cbz	r1, 800b420 <__ascii_wctomb+0x18>
 800b40e:	2aff      	cmp	r2, #255	; 0xff
 800b410:	d904      	bls.n	800b41c <__ascii_wctomb+0x14>
 800b412:	228a      	movs	r2, #138	; 0x8a
 800b414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	4770      	bx	lr
 800b41c:	2001      	movs	r0, #1
 800b41e:	700a      	strb	r2, [r1, #0]
 800b420:	4770      	bx	lr
	...

0800b424 <__swsetup_r>:
 800b424:	4b32      	ldr	r3, [pc, #200]	; (800b4f0 <__swsetup_r+0xcc>)
 800b426:	b570      	push	{r4, r5, r6, lr}
 800b428:	681d      	ldr	r5, [r3, #0]
 800b42a:	4606      	mov	r6, r0
 800b42c:	460c      	mov	r4, r1
 800b42e:	b125      	cbz	r5, 800b43a <__swsetup_r+0x16>
 800b430:	69ab      	ldr	r3, [r5, #24]
 800b432:	b913      	cbnz	r3, 800b43a <__swsetup_r+0x16>
 800b434:	4628      	mov	r0, r5
 800b436:	f000 f981 	bl	800b73c <__sinit>
 800b43a:	4b2e      	ldr	r3, [pc, #184]	; (800b4f4 <__swsetup_r+0xd0>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	d10f      	bne.n	800b460 <__swsetup_r+0x3c>
 800b440:	686c      	ldr	r4, [r5, #4]
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b448:	0719      	lsls	r1, r3, #28
 800b44a:	d42c      	bmi.n	800b4a6 <__swsetup_r+0x82>
 800b44c:	06dd      	lsls	r5, r3, #27
 800b44e:	d411      	bmi.n	800b474 <__swsetup_r+0x50>
 800b450:	2309      	movs	r3, #9
 800b452:	6033      	str	r3, [r6, #0]
 800b454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	e03e      	b.n	800b4de <__swsetup_r+0xba>
 800b460:	4b25      	ldr	r3, [pc, #148]	; (800b4f8 <__swsetup_r+0xd4>)
 800b462:	429c      	cmp	r4, r3
 800b464:	d101      	bne.n	800b46a <__swsetup_r+0x46>
 800b466:	68ac      	ldr	r4, [r5, #8]
 800b468:	e7eb      	b.n	800b442 <__swsetup_r+0x1e>
 800b46a:	4b24      	ldr	r3, [pc, #144]	; (800b4fc <__swsetup_r+0xd8>)
 800b46c:	429c      	cmp	r4, r3
 800b46e:	bf08      	it	eq
 800b470:	68ec      	ldreq	r4, [r5, #12]
 800b472:	e7e6      	b.n	800b442 <__swsetup_r+0x1e>
 800b474:	0758      	lsls	r0, r3, #29
 800b476:	d512      	bpl.n	800b49e <__swsetup_r+0x7a>
 800b478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47a:	b141      	cbz	r1, 800b48e <__swsetup_r+0x6a>
 800b47c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b480:	4299      	cmp	r1, r3
 800b482:	d002      	beq.n	800b48a <__swsetup_r+0x66>
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff fb37 	bl	800aaf8 <_free_r>
 800b48a:	2300      	movs	r3, #0
 800b48c:	6363      	str	r3, [r4, #52]	; 0x34
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	2300      	movs	r3, #0
 800b498:	6063      	str	r3, [r4, #4]
 800b49a:	6923      	ldr	r3, [r4, #16]
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	f043 0308 	orr.w	r3, r3, #8
 800b4a4:	81a3      	strh	r3, [r4, #12]
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	b94b      	cbnz	r3, 800b4be <__swsetup_r+0x9a>
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b4:	d003      	beq.n	800b4be <__swsetup_r+0x9a>
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f000 fa05 	bl	800b8c8 <__smakebuf_r>
 800b4be:	89a0      	ldrh	r0, [r4, #12]
 800b4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4c4:	f010 0301 	ands.w	r3, r0, #1
 800b4c8:	d00a      	beq.n	800b4e0 <__swsetup_r+0xbc>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60a3      	str	r3, [r4, #8]
 800b4ce:	6963      	ldr	r3, [r4, #20]
 800b4d0:	425b      	negs	r3, r3
 800b4d2:	61a3      	str	r3, [r4, #24]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	b943      	cbnz	r3, 800b4ea <__swsetup_r+0xc6>
 800b4d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4dc:	d1ba      	bne.n	800b454 <__swsetup_r+0x30>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	0781      	lsls	r1, r0, #30
 800b4e2:	bf58      	it	pl
 800b4e4:	6963      	ldrpl	r3, [r4, #20]
 800b4e6:	60a3      	str	r3, [r4, #8]
 800b4e8:	e7f4      	b.n	800b4d4 <__swsetup_r+0xb0>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e7f7      	b.n	800b4de <__swsetup_r+0xba>
 800b4ee:	bf00      	nop
 800b4f0:	200000b8 	.word	0x200000b8
 800b4f4:	0800c5fc 	.word	0x0800c5fc
 800b4f8:	0800c61c 	.word	0x0800c61c
 800b4fc:	0800c5dc 	.word	0x0800c5dc

0800b500 <abort>:
 800b500:	2006      	movs	r0, #6
 800b502:	b508      	push	{r3, lr}
 800b504:	f000 fa50 	bl	800b9a8 <raise>
 800b508:	2001      	movs	r0, #1
 800b50a:	f7f9 f8fa 	bl	8004702 <_exit>
	...

0800b510 <__sflush_r>:
 800b510:	898a      	ldrh	r2, [r1, #12]
 800b512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b514:	4605      	mov	r5, r0
 800b516:	0710      	lsls	r0, r2, #28
 800b518:	460c      	mov	r4, r1
 800b51a:	d457      	bmi.n	800b5cc <__sflush_r+0xbc>
 800b51c:	684b      	ldr	r3, [r1, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dc04      	bgt.n	800b52c <__sflush_r+0x1c>
 800b522:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc01      	bgt.n	800b52c <__sflush_r+0x1c>
 800b528:	2000      	movs	r0, #0
 800b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b52e:	2e00      	cmp	r6, #0
 800b530:	d0fa      	beq.n	800b528 <__sflush_r+0x18>
 800b532:	2300      	movs	r3, #0
 800b534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b538:	682f      	ldr	r7, [r5, #0]
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	d032      	beq.n	800b5a4 <__sflush_r+0x94>
 800b53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	075a      	lsls	r2, r3, #29
 800b544:	d505      	bpl.n	800b552 <__sflush_r+0x42>
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	1ac0      	subs	r0, r0, r3
 800b54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b54c:	b10b      	cbz	r3, 800b552 <__sflush_r+0x42>
 800b54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b550:	1ac0      	subs	r0, r0, r3
 800b552:	2300      	movs	r3, #0
 800b554:	4602      	mov	r2, r0
 800b556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b558:	4628      	mov	r0, r5
 800b55a:	6a21      	ldr	r1, [r4, #32]
 800b55c:	47b0      	blx	r6
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	d106      	bne.n	800b572 <__sflush_r+0x62>
 800b564:	6829      	ldr	r1, [r5, #0]
 800b566:	291d      	cmp	r1, #29
 800b568:	d82c      	bhi.n	800b5c4 <__sflush_r+0xb4>
 800b56a:	4a29      	ldr	r2, [pc, #164]	; (800b610 <__sflush_r+0x100>)
 800b56c:	40ca      	lsrs	r2, r1
 800b56e:	07d6      	lsls	r6, r2, #31
 800b570:	d528      	bpl.n	800b5c4 <__sflush_r+0xb4>
 800b572:	2200      	movs	r2, #0
 800b574:	6062      	str	r2, [r4, #4]
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	04d9      	lsls	r1, r3, #19
 800b57a:	6022      	str	r2, [r4, #0]
 800b57c:	d504      	bpl.n	800b588 <__sflush_r+0x78>
 800b57e:	1c42      	adds	r2, r0, #1
 800b580:	d101      	bne.n	800b586 <__sflush_r+0x76>
 800b582:	682b      	ldr	r3, [r5, #0]
 800b584:	b903      	cbnz	r3, 800b588 <__sflush_r+0x78>
 800b586:	6560      	str	r0, [r4, #84]	; 0x54
 800b588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58a:	602f      	str	r7, [r5, #0]
 800b58c:	2900      	cmp	r1, #0
 800b58e:	d0cb      	beq.n	800b528 <__sflush_r+0x18>
 800b590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b594:	4299      	cmp	r1, r3
 800b596:	d002      	beq.n	800b59e <__sflush_r+0x8e>
 800b598:	4628      	mov	r0, r5
 800b59a:	f7ff faad 	bl	800aaf8 <_free_r>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b5a2:	e7c2      	b.n	800b52a <__sflush_r+0x1a>
 800b5a4:	6a21      	ldr	r1, [r4, #32]
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	47b0      	blx	r6
 800b5ac:	1c41      	adds	r1, r0, #1
 800b5ae:	d1c7      	bne.n	800b540 <__sflush_r+0x30>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c4      	beq.n	800b540 <__sflush_r+0x30>
 800b5b6:	2b1d      	cmp	r3, #29
 800b5b8:	d001      	beq.n	800b5be <__sflush_r+0xae>
 800b5ba:	2b16      	cmp	r3, #22
 800b5bc:	d101      	bne.n	800b5c2 <__sflush_r+0xb2>
 800b5be:	602f      	str	r7, [r5, #0]
 800b5c0:	e7b2      	b.n	800b528 <__sflush_r+0x18>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	e7ae      	b.n	800b52a <__sflush_r+0x1a>
 800b5cc:	690f      	ldr	r7, [r1, #16]
 800b5ce:	2f00      	cmp	r7, #0
 800b5d0:	d0aa      	beq.n	800b528 <__sflush_r+0x18>
 800b5d2:	0793      	lsls	r3, r2, #30
 800b5d4:	bf18      	it	ne
 800b5d6:	2300      	movne	r3, #0
 800b5d8:	680e      	ldr	r6, [r1, #0]
 800b5da:	bf08      	it	eq
 800b5dc:	694b      	ldreq	r3, [r1, #20]
 800b5de:	1bf6      	subs	r6, r6, r7
 800b5e0:	600f      	str	r7, [r1, #0]
 800b5e2:	608b      	str	r3, [r1, #8]
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	dd9f      	ble.n	800b528 <__sflush_r+0x18>
 800b5e8:	4633      	mov	r3, r6
 800b5ea:	463a      	mov	r2, r7
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	6a21      	ldr	r1, [r4, #32]
 800b5f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b5f4:	47e0      	blx	ip
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	dc06      	bgt.n	800b608 <__sflush_r+0xf8>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	e790      	b.n	800b52a <__sflush_r+0x1a>
 800b608:	4407      	add	r7, r0
 800b60a:	1a36      	subs	r6, r6, r0
 800b60c:	e7ea      	b.n	800b5e4 <__sflush_r+0xd4>
 800b60e:	bf00      	nop
 800b610:	20400001 	.word	0x20400001

0800b614 <_fflush_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	690b      	ldr	r3, [r1, #16]
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b913      	cbnz	r3, 800b624 <_fflush_r+0x10>
 800b61e:	2500      	movs	r5, #0
 800b620:	4628      	mov	r0, r5
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	b118      	cbz	r0, 800b62e <_fflush_r+0x1a>
 800b626:	6983      	ldr	r3, [r0, #24]
 800b628:	b90b      	cbnz	r3, 800b62e <_fflush_r+0x1a>
 800b62a:	f000 f887 	bl	800b73c <__sinit>
 800b62e:	4b14      	ldr	r3, [pc, #80]	; (800b680 <_fflush_r+0x6c>)
 800b630:	429c      	cmp	r4, r3
 800b632:	d11b      	bne.n	800b66c <_fflush_r+0x58>
 800b634:	686c      	ldr	r4, [r5, #4]
 800b636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0ef      	beq.n	800b61e <_fflush_r+0xa>
 800b63e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b640:	07d0      	lsls	r0, r2, #31
 800b642:	d404      	bmi.n	800b64e <_fflush_r+0x3a>
 800b644:	0599      	lsls	r1, r3, #22
 800b646:	d402      	bmi.n	800b64e <_fflush_r+0x3a>
 800b648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b64a:	f000 f915 	bl	800b878 <__retarget_lock_acquire_recursive>
 800b64e:	4628      	mov	r0, r5
 800b650:	4621      	mov	r1, r4
 800b652:	f7ff ff5d 	bl	800b510 <__sflush_r>
 800b656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b658:	4605      	mov	r5, r0
 800b65a:	07da      	lsls	r2, r3, #31
 800b65c:	d4e0      	bmi.n	800b620 <_fflush_r+0xc>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	059b      	lsls	r3, r3, #22
 800b662:	d4dd      	bmi.n	800b620 <_fflush_r+0xc>
 800b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b666:	f000 f908 	bl	800b87a <__retarget_lock_release_recursive>
 800b66a:	e7d9      	b.n	800b620 <_fflush_r+0xc>
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <_fflush_r+0x70>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	d101      	bne.n	800b676 <_fflush_r+0x62>
 800b672:	68ac      	ldr	r4, [r5, #8]
 800b674:	e7df      	b.n	800b636 <_fflush_r+0x22>
 800b676:	4b04      	ldr	r3, [pc, #16]	; (800b688 <_fflush_r+0x74>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	bf08      	it	eq
 800b67c:	68ec      	ldreq	r4, [r5, #12]
 800b67e:	e7da      	b.n	800b636 <_fflush_r+0x22>
 800b680:	0800c5fc 	.word	0x0800c5fc
 800b684:	0800c61c 	.word	0x0800c61c
 800b688:	0800c5dc 	.word	0x0800c5dc

0800b68c <std>:
 800b68c:	2300      	movs	r3, #0
 800b68e:	b510      	push	{r4, lr}
 800b690:	4604      	mov	r4, r0
 800b692:	e9c0 3300 	strd	r3, r3, [r0]
 800b696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b69a:	6083      	str	r3, [r0, #8]
 800b69c:	8181      	strh	r1, [r0, #12]
 800b69e:	6643      	str	r3, [r0, #100]	; 0x64
 800b6a0:	81c2      	strh	r2, [r0, #14]
 800b6a2:	6183      	str	r3, [r0, #24]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	2208      	movs	r2, #8
 800b6a8:	305c      	adds	r0, #92	; 0x5c
 800b6aa:	f7fd fb63 	bl	8008d74 <memset>
 800b6ae:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <std+0x38>)
 800b6b0:	6224      	str	r4, [r4, #32]
 800b6b2:	6263      	str	r3, [r4, #36]	; 0x24
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <std+0x3c>)
 800b6b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <std+0x40>)
 800b6ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <std+0x44>)
 800b6be:	6323      	str	r3, [r4, #48]	; 0x30
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0800b9e1 	.word	0x0800b9e1
 800b6c8:	0800ba03 	.word	0x0800ba03
 800b6cc:	0800ba3b 	.word	0x0800ba3b
 800b6d0:	0800ba5f 	.word	0x0800ba5f

0800b6d4 <_cleanup_r>:
 800b6d4:	4901      	ldr	r1, [pc, #4]	; (800b6dc <_cleanup_r+0x8>)
 800b6d6:	f000 b8af 	b.w	800b838 <_fwalk_reent>
 800b6da:	bf00      	nop
 800b6dc:	0800b615 	.word	0x0800b615

0800b6e0 <__sfmoreglue>:
 800b6e0:	2268      	movs	r2, #104	; 0x68
 800b6e2:	b570      	push	{r4, r5, r6, lr}
 800b6e4:	1e4d      	subs	r5, r1, #1
 800b6e6:	4355      	muls	r5, r2
 800b6e8:	460e      	mov	r6, r1
 800b6ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6ee:	f7ff fa6b 	bl	800abc8 <_malloc_r>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	b140      	cbz	r0, 800b708 <__sfmoreglue+0x28>
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b6fc:	300c      	adds	r0, #12
 800b6fe:	60a0      	str	r0, [r4, #8]
 800b700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b704:	f7fd fb36 	bl	8008d74 <memset>
 800b708:	4620      	mov	r0, r4
 800b70a:	bd70      	pop	{r4, r5, r6, pc}

0800b70c <__sfp_lock_acquire>:
 800b70c:	4801      	ldr	r0, [pc, #4]	; (800b714 <__sfp_lock_acquire+0x8>)
 800b70e:	f000 b8b3 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	20000535 	.word	0x20000535

0800b718 <__sfp_lock_release>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__sfp_lock_release+0x8>)
 800b71a:	f000 b8ae 	b.w	800b87a <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	20000535 	.word	0x20000535

0800b724 <__sinit_lock_acquire>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sinit_lock_acquire+0x8>)
 800b726:	f000 b8a7 	b.w	800b878 <__retarget_lock_acquire_recursive>
 800b72a:	bf00      	nop
 800b72c:	20000536 	.word	0x20000536

0800b730 <__sinit_lock_release>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sinit_lock_release+0x8>)
 800b732:	f000 b8a2 	b.w	800b87a <__retarget_lock_release_recursive>
 800b736:	bf00      	nop
 800b738:	20000536 	.word	0x20000536

0800b73c <__sinit>:
 800b73c:	b510      	push	{r4, lr}
 800b73e:	4604      	mov	r4, r0
 800b740:	f7ff fff0 	bl	800b724 <__sinit_lock_acquire>
 800b744:	69a3      	ldr	r3, [r4, #24]
 800b746:	b11b      	cbz	r3, 800b750 <__sinit+0x14>
 800b748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74c:	f7ff bff0 	b.w	800b730 <__sinit_lock_release>
 800b750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b754:	6523      	str	r3, [r4, #80]	; 0x50
 800b756:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <__sinit+0x68>)
 800b758:	4a13      	ldr	r2, [pc, #76]	; (800b7a8 <__sinit+0x6c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b75e:	42a3      	cmp	r3, r4
 800b760:	bf08      	it	eq
 800b762:	2301      	moveq	r3, #1
 800b764:	4620      	mov	r0, r4
 800b766:	bf08      	it	eq
 800b768:	61a3      	streq	r3, [r4, #24]
 800b76a:	f000 f81f 	bl	800b7ac <__sfp>
 800b76e:	6060      	str	r0, [r4, #4]
 800b770:	4620      	mov	r0, r4
 800b772:	f000 f81b 	bl	800b7ac <__sfp>
 800b776:	60a0      	str	r0, [r4, #8]
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 f817 	bl	800b7ac <__sfp>
 800b77e:	2200      	movs	r2, #0
 800b780:	2104      	movs	r1, #4
 800b782:	60e0      	str	r0, [r4, #12]
 800b784:	6860      	ldr	r0, [r4, #4]
 800b786:	f7ff ff81 	bl	800b68c <std>
 800b78a:	2201      	movs	r2, #1
 800b78c:	2109      	movs	r1, #9
 800b78e:	68a0      	ldr	r0, [r4, #8]
 800b790:	f7ff ff7c 	bl	800b68c <std>
 800b794:	2202      	movs	r2, #2
 800b796:	2112      	movs	r1, #18
 800b798:	68e0      	ldr	r0, [r4, #12]
 800b79a:	f7ff ff77 	bl	800b68c <std>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	61a3      	str	r3, [r4, #24]
 800b7a2:	e7d1      	b.n	800b748 <__sinit+0xc>
 800b7a4:	0800c260 	.word	0x0800c260
 800b7a8:	0800b6d5 	.word	0x0800b6d5

0800b7ac <__sfp>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	f7ff ffac 	bl	800b70c <__sfp_lock_acquire>
 800b7b4:	4b1e      	ldr	r3, [pc, #120]	; (800b830 <__sfp+0x84>)
 800b7b6:	681e      	ldr	r6, [r3, #0]
 800b7b8:	69b3      	ldr	r3, [r6, #24]
 800b7ba:	b913      	cbnz	r3, 800b7c2 <__sfp+0x16>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff ffbd 	bl	800b73c <__sinit>
 800b7c2:	3648      	adds	r6, #72	; 0x48
 800b7c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	d503      	bpl.n	800b7d4 <__sfp+0x28>
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	b30b      	cbz	r3, 800b814 <__sfp+0x68>
 800b7d0:	6836      	ldr	r6, [r6, #0]
 800b7d2:	e7f7      	b.n	800b7c4 <__sfp+0x18>
 800b7d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7d8:	b9d5      	cbnz	r5, 800b810 <__sfp+0x64>
 800b7da:	4b16      	ldr	r3, [pc, #88]	; (800b834 <__sfp+0x88>)
 800b7dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7e0:	60e3      	str	r3, [r4, #12]
 800b7e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b7e4:	f000 f847 	bl	800b876 <__retarget_lock_init_recursive>
 800b7e8:	f7ff ff96 	bl	800b718 <__sfp_lock_release>
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7f8:	6025      	str	r5, [r4, #0]
 800b7fa:	61a5      	str	r5, [r4, #24]
 800b7fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b800:	f7fd fab8 	bl	8008d74 <memset>
 800b804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b80c:	4620      	mov	r0, r4
 800b80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b810:	3468      	adds	r4, #104	; 0x68
 800b812:	e7d9      	b.n	800b7c8 <__sfp+0x1c>
 800b814:	2104      	movs	r1, #4
 800b816:	4638      	mov	r0, r7
 800b818:	f7ff ff62 	bl	800b6e0 <__sfmoreglue>
 800b81c:	4604      	mov	r4, r0
 800b81e:	6030      	str	r0, [r6, #0]
 800b820:	2800      	cmp	r0, #0
 800b822:	d1d5      	bne.n	800b7d0 <__sfp+0x24>
 800b824:	f7ff ff78 	bl	800b718 <__sfp_lock_release>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	e7ee      	b.n	800b80c <__sfp+0x60>
 800b82e:	bf00      	nop
 800b830:	0800c260 	.word	0x0800c260
 800b834:	ffff0001 	.word	0xffff0001

0800b838 <_fwalk_reent>:
 800b838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b83c:	4606      	mov	r6, r0
 800b83e:	4688      	mov	r8, r1
 800b840:	2700      	movs	r7, #0
 800b842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b84a:	f1b9 0901 	subs.w	r9, r9, #1
 800b84e:	d505      	bpl.n	800b85c <_fwalk_reent+0x24>
 800b850:	6824      	ldr	r4, [r4, #0]
 800b852:	2c00      	cmp	r4, #0
 800b854:	d1f7      	bne.n	800b846 <_fwalk_reent+0xe>
 800b856:	4638      	mov	r0, r7
 800b858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85c:	89ab      	ldrh	r3, [r5, #12]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d907      	bls.n	800b872 <_fwalk_reent+0x3a>
 800b862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b866:	3301      	adds	r3, #1
 800b868:	d003      	beq.n	800b872 <_fwalk_reent+0x3a>
 800b86a:	4629      	mov	r1, r5
 800b86c:	4630      	mov	r0, r6
 800b86e:	47c0      	blx	r8
 800b870:	4307      	orrs	r7, r0
 800b872:	3568      	adds	r5, #104	; 0x68
 800b874:	e7e9      	b.n	800b84a <_fwalk_reent+0x12>

0800b876 <__retarget_lock_init_recursive>:
 800b876:	4770      	bx	lr

0800b878 <__retarget_lock_acquire_recursive>:
 800b878:	4770      	bx	lr

0800b87a <__retarget_lock_release_recursive>:
 800b87a:	4770      	bx	lr

0800b87c <__swhatbuf_r>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	460e      	mov	r6, r1
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	4614      	mov	r4, r2
 800b886:	2900      	cmp	r1, #0
 800b888:	461d      	mov	r5, r3
 800b88a:	b096      	sub	sp, #88	; 0x58
 800b88c:	da08      	bge.n	800b8a0 <__swhatbuf_r+0x24>
 800b88e:	2200      	movs	r2, #0
 800b890:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b894:	602a      	str	r2, [r5, #0]
 800b896:	061a      	lsls	r2, r3, #24
 800b898:	d410      	bmi.n	800b8bc <__swhatbuf_r+0x40>
 800b89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89e:	e00e      	b.n	800b8be <__swhatbuf_r+0x42>
 800b8a0:	466a      	mov	r2, sp
 800b8a2:	f000 f903 	bl	800baac <_fstat_r>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	dbf1      	blt.n	800b88e <__swhatbuf_r+0x12>
 800b8aa:	9a01      	ldr	r2, [sp, #4]
 800b8ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8b4:	425a      	negs	r2, r3
 800b8b6:	415a      	adcs	r2, r3
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	e7ee      	b.n	800b89a <__swhatbuf_r+0x1e>
 800b8bc:	2340      	movs	r3, #64	; 0x40
 800b8be:	2000      	movs	r0, #0
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	b016      	add	sp, #88	; 0x58
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8c8 <__smakebuf_r>:
 800b8c8:	898b      	ldrh	r3, [r1, #12]
 800b8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8cc:	079d      	lsls	r5, r3, #30
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	d507      	bpl.n	800b8e4 <__smakebuf_r+0x1c>
 800b8d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	2301      	movs	r3, #1
 800b8de:	6163      	str	r3, [r4, #20]
 800b8e0:	b002      	add	sp, #8
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	466a      	mov	r2, sp
 800b8e6:	ab01      	add	r3, sp, #4
 800b8e8:	f7ff ffc8 	bl	800b87c <__swhatbuf_r>
 800b8ec:	9900      	ldr	r1, [sp, #0]
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7ff f969 	bl	800abc8 <_malloc_r>
 800b8f6:	b948      	cbnz	r0, 800b90c <__smakebuf_r+0x44>
 800b8f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d4ef      	bmi.n	800b8e0 <__smakebuf_r+0x18>
 800b900:	f023 0303 	bic.w	r3, r3, #3
 800b904:	f043 0302 	orr.w	r3, r3, #2
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	e7e3      	b.n	800b8d4 <__smakebuf_r+0xc>
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <__smakebuf_r+0x7c>)
 800b90e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	6020      	str	r0, [r4, #0]
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	9b00      	ldr	r3, [sp, #0]
 800b91c:	6120      	str	r0, [r4, #16]
 800b91e:	6163      	str	r3, [r4, #20]
 800b920:	9b01      	ldr	r3, [sp, #4]
 800b922:	b15b      	cbz	r3, 800b93c <__smakebuf_r+0x74>
 800b924:	4630      	mov	r0, r6
 800b926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b92a:	f000 f8d1 	bl	800bad0 <_isatty_r>
 800b92e:	b128      	cbz	r0, 800b93c <__smakebuf_r+0x74>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f023 0303 	bic.w	r3, r3, #3
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	89a0      	ldrh	r0, [r4, #12]
 800b93e:	4305      	orrs	r5, r0
 800b940:	81a5      	strh	r5, [r4, #12]
 800b942:	e7cd      	b.n	800b8e0 <__smakebuf_r+0x18>
 800b944:	0800b6d5 	.word	0x0800b6d5

0800b948 <_malloc_usable_size_r>:
 800b948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94c:	1f18      	subs	r0, r3, #4
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbc      	itt	lt
 800b952:	580b      	ldrlt	r3, [r1, r0]
 800b954:	18c0      	addlt	r0, r0, r3
 800b956:	4770      	bx	lr

0800b958 <_raise_r>:
 800b958:	291f      	cmp	r1, #31
 800b95a:	b538      	push	{r3, r4, r5, lr}
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	d904      	bls.n	800b96c <_raise_r+0x14>
 800b962:	2316      	movs	r3, #22
 800b964:	6003      	str	r3, [r0, #0]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b96e:	b112      	cbz	r2, 800b976 <_raise_r+0x1e>
 800b970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b974:	b94b      	cbnz	r3, 800b98a <_raise_r+0x32>
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f830 	bl	800b9dc <_getpid_r>
 800b97c:	462a      	mov	r2, r5
 800b97e:	4601      	mov	r1, r0
 800b980:	4620      	mov	r0, r4
 800b982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b986:	f000 b817 	b.w	800b9b8 <_kill_r>
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d00a      	beq.n	800b9a4 <_raise_r+0x4c>
 800b98e:	1c59      	adds	r1, r3, #1
 800b990:	d103      	bne.n	800b99a <_raise_r+0x42>
 800b992:	2316      	movs	r3, #22
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	2001      	movs	r0, #1
 800b998:	e7e7      	b.n	800b96a <_raise_r+0x12>
 800b99a:	2400      	movs	r4, #0
 800b99c:	4628      	mov	r0, r5
 800b99e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9a2:	4798      	blx	r3
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7e0      	b.n	800b96a <_raise_r+0x12>

0800b9a8 <raise>:
 800b9a8:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <raise+0xc>)
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	f7ff bfd3 	b.w	800b958 <_raise_r>
 800b9b2:	bf00      	nop
 800b9b4:	200000b8 	.word	0x200000b8

0800b9b8 <_kill_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4d06      	ldr	r5, [pc, #24]	; (800b9d8 <_kill_r+0x20>)
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	602b      	str	r3, [r5, #0]
 800b9c6:	f7f8 fe8c 	bl	80046e2 <_kill>
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	d102      	bne.n	800b9d4 <_kill_r+0x1c>
 800b9ce:	682b      	ldr	r3, [r5, #0]
 800b9d0:	b103      	cbz	r3, 800b9d4 <_kill_r+0x1c>
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	bd38      	pop	{r3, r4, r5, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000530 	.word	0x20000530

0800b9dc <_getpid_r>:
 800b9dc:	f7f8 be7a 	b.w	80046d4 <_getpid>

0800b9e0 <__sread>:
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e8:	f000 f894 	bl	800bb14 <_read_r>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	bfab      	itete	ge
 800b9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f4:	181b      	addge	r3, r3, r0
 800b9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9fa:	bfac      	ite	ge
 800b9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9fe:	81a3      	strhlt	r3, [r4, #12]
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <__swrite>:
 800ba02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	461f      	mov	r7, r3
 800ba08:	898b      	ldrh	r3, [r1, #12]
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	05db      	lsls	r3, r3, #23
 800ba0e:	460c      	mov	r4, r1
 800ba10:	4616      	mov	r6, r2
 800ba12:	d505      	bpl.n	800ba20 <__swrite+0x1e>
 800ba14:	2302      	movs	r3, #2
 800ba16:	2200      	movs	r2, #0
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	f000 f868 	bl	800baf0 <_lseek_r>
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	4632      	mov	r2, r6
 800ba24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba28:	81a3      	strh	r3, [r4, #12]
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	463b      	mov	r3, r7
 800ba2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba36:	f000 b817 	b.w	800ba68 <_write_r>

0800ba3a <__sseek>:
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba42:	f000 f855 	bl	800baf0 <_lseek_r>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	bf15      	itete	ne
 800ba4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba56:	81a3      	strheq	r3, [r4, #12]
 800ba58:	bf18      	it	ne
 800ba5a:	81a3      	strhne	r3, [r4, #12]
 800ba5c:	bd10      	pop	{r4, pc}

0800ba5e <__sclose>:
 800ba5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba62:	f000 b813 	b.w	800ba8c <_close_r>
	...

0800ba68 <_write_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	4611      	mov	r1, r2
 800ba70:	2200      	movs	r2, #0
 800ba72:	4d05      	ldr	r5, [pc, #20]	; (800ba88 <_write_r+0x20>)
 800ba74:	602a      	str	r2, [r5, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	f7f7 fe90 	bl	800379c <_write>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_write_r+0x1e>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_write_r+0x1e>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20000530 	.word	0x20000530

0800ba8c <_close_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4d05      	ldr	r5, [pc, #20]	; (800baa8 <_close_r+0x1c>)
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	602b      	str	r3, [r5, #0]
 800ba98:	f7f8 fe5a 	bl	8004750 <_close>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_close_r+0x1a>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_close_r+0x1a>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20000530 	.word	0x20000530

0800baac <_fstat_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	2300      	movs	r3, #0
 800bab0:	4d06      	ldr	r5, [pc, #24]	; (800bacc <_fstat_r+0x20>)
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f8 fe54 	bl	8004766 <_fstat>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_fstat_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_fstat_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20000530 	.word	0x20000530

0800bad0 <_isatty_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	2300      	movs	r3, #0
 800bad4:	4d05      	ldr	r5, [pc, #20]	; (800baec <_isatty_r+0x1c>)
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f8 fe52 	bl	8004784 <_isatty>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_isatty_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_isatty_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20000530 	.word	0x20000530

0800baf0 <_lseek_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	2200      	movs	r2, #0
 800bafa:	4d05      	ldr	r5, [pc, #20]	; (800bb10 <_lseek_r+0x20>)
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f8 fe4a 	bl	8004798 <_lseek>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_lseek_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_lseek_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20000530 	.word	0x20000530

0800bb14 <_read_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4d05      	ldr	r5, [pc, #20]	; (800bb34 <_read_r+0x20>)
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f7f8 fdf7 	bl	8004716 <_read>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_read_r+0x1e>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_read_r+0x1e>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000530 	.word	0x20000530

0800bb38 <asinf>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	f000 f838 	bl	800bbb0 <__ieee754_asinf>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4605      	mov	r5, r0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f7f5 fa93 	bl	8001070 <__aeabi_fcmpun>
 800bb4a:	b980      	cbnz	r0, 800bb6e <asinf+0x36>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 fb57 	bl	800c200 <fabsf>
 800bb52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb56:	f7f5 fa81 	bl	800105c <__aeabi_fcmpgt>
 800bb5a:	b140      	cbz	r0, 800bb6e <asinf+0x36>
 800bb5c:	f7fd f8e0 	bl	8008d20 <__errno>
 800bb60:	2321      	movs	r3, #33	; 0x21
 800bb62:	6003      	str	r3, [r0, #0]
 800bb64:	4803      	ldr	r0, [pc, #12]	; (800bb74 <asinf+0x3c>)
 800bb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb6a:	f000 bb4d 	b.w	800c208 <nanf>
 800bb6e:	4628      	mov	r0, r5
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	bf00      	nop
 800bb74:	0800c4d0 	.word	0x0800c4d0

0800bb78 <atan2f>:
 800bb78:	f000 b95e 	b.w	800be38 <__ieee754_atan2f>

0800bb7c <sqrtf>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4605      	mov	r5, r0
 800bb80:	f000 f9e0 	bl	800bf44 <__ieee754_sqrtf>
 800bb84:	4629      	mov	r1, r5
 800bb86:	4604      	mov	r4, r0
 800bb88:	4628      	mov	r0, r5
 800bb8a:	f7f5 fa71 	bl	8001070 <__aeabi_fcmpun>
 800bb8e:	b968      	cbnz	r0, 800bbac <sqrtf+0x30>
 800bb90:	2100      	movs	r1, #0
 800bb92:	4628      	mov	r0, r5
 800bb94:	f7f5 fa44 	bl	8001020 <__aeabi_fcmplt>
 800bb98:	b140      	cbz	r0, 800bbac <sqrtf+0x30>
 800bb9a:	f7fd f8c1 	bl	8008d20 <__errno>
 800bb9e:	2321      	movs	r3, #33	; 0x21
 800bba0:	2100      	movs	r1, #0
 800bba2:	6003      	str	r3, [r0, #0]
 800bba4:	4608      	mov	r0, r1
 800bba6:	f7f5 f951 	bl	8000e4c <__aeabi_fdiv>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4620      	mov	r0, r4
 800bbae:	bd38      	pop	{r3, r4, r5, pc}

0800bbb0 <__ieee754_asinf>:
 800bbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800bbb8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	d10c      	bne.n	800bbdc <__ieee754_asinf+0x2c>
 800bbc2:	498d      	ldr	r1, [pc, #564]	; (800bdf8 <__ieee754_asinf+0x248>)
 800bbc4:	f7f5 f88e 	bl	8000ce4 <__aeabi_fmul>
 800bbc8:	498c      	ldr	r1, [pc, #560]	; (800bdfc <__ieee754_asinf+0x24c>)
 800bbca:	4605      	mov	r5, r0
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7f5 f889 	bl	8000ce4 <__aeabi_fmul>
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7f4 ff7d 	bl	8000ad4 <__addsf3>
 800bbda:	e006      	b.n	800bbea <__ieee754_asinf+0x3a>
 800bbdc:	dd07      	ble.n	800bbee <__ieee754_asinf+0x3e>
 800bbde:	4601      	mov	r1, r0
 800bbe0:	f7f4 ff76 	bl	8000ad0 <__aeabi_fsub>
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	f7f5 f931 	bl	8000e4c <__aeabi_fdiv>
 800bbea:	4604      	mov	r4, r0
 800bbec:	e00e      	b.n	800bc0c <__ieee754_asinf+0x5c>
 800bbee:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800bbf2:	da58      	bge.n	800bca6 <__ieee754_asinf+0xf6>
 800bbf4:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800bbf8:	da0b      	bge.n	800bc12 <__ieee754_asinf+0x62>
 800bbfa:	4981      	ldr	r1, [pc, #516]	; (800be00 <__ieee754_asinf+0x250>)
 800bbfc:	f7f4 ff6a 	bl	8000ad4 <__addsf3>
 800bc00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc04:	f7f5 fa2a 	bl	800105c <__aeabi_fcmpgt>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d04c      	beq.n	800bca6 <__ieee754_asinf+0xf6>
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc12:	4601      	mov	r1, r0
 800bc14:	f7f5 f866 	bl	8000ce4 <__aeabi_fmul>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	497a      	ldr	r1, [pc, #488]	; (800be04 <__ieee754_asinf+0x254>)
 800bc1c:	f7f5 f862 	bl	8000ce4 <__aeabi_fmul>
 800bc20:	4979      	ldr	r1, [pc, #484]	; (800be08 <__ieee754_asinf+0x258>)
 800bc22:	f7f4 ff57 	bl	8000ad4 <__addsf3>
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f5 f85c 	bl	8000ce4 <__aeabi_fmul>
 800bc2c:	4977      	ldr	r1, [pc, #476]	; (800be0c <__ieee754_asinf+0x25c>)
 800bc2e:	f7f4 ff4f 	bl	8000ad0 <__aeabi_fsub>
 800bc32:	4629      	mov	r1, r5
 800bc34:	f7f5 f856 	bl	8000ce4 <__aeabi_fmul>
 800bc38:	4975      	ldr	r1, [pc, #468]	; (800be10 <__ieee754_asinf+0x260>)
 800bc3a:	f7f4 ff4b 	bl	8000ad4 <__addsf3>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f5 f850 	bl	8000ce4 <__aeabi_fmul>
 800bc44:	4973      	ldr	r1, [pc, #460]	; (800be14 <__ieee754_asinf+0x264>)
 800bc46:	f7f4 ff43 	bl	8000ad0 <__aeabi_fsub>
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f5 f84a 	bl	8000ce4 <__aeabi_fmul>
 800bc50:	4971      	ldr	r1, [pc, #452]	; (800be18 <__ieee754_asinf+0x268>)
 800bc52:	f7f4 ff3f 	bl	8000ad4 <__addsf3>
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f5 f844 	bl	8000ce4 <__aeabi_fmul>
 800bc5c:	496f      	ldr	r1, [pc, #444]	; (800be1c <__ieee754_asinf+0x26c>)
 800bc5e:	4606      	mov	r6, r0
 800bc60:	4628      	mov	r0, r5
 800bc62:	f7f5 f83f 	bl	8000ce4 <__aeabi_fmul>
 800bc66:	496e      	ldr	r1, [pc, #440]	; (800be20 <__ieee754_asinf+0x270>)
 800bc68:	f7f4 ff32 	bl	8000ad0 <__aeabi_fsub>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	f7f5 f839 	bl	8000ce4 <__aeabi_fmul>
 800bc72:	496c      	ldr	r1, [pc, #432]	; (800be24 <__ieee754_asinf+0x274>)
 800bc74:	f7f4 ff2e 	bl	8000ad4 <__addsf3>
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f5 f833 	bl	8000ce4 <__aeabi_fmul>
 800bc7e:	496a      	ldr	r1, [pc, #424]	; (800be28 <__ieee754_asinf+0x278>)
 800bc80:	f7f4 ff26 	bl	8000ad0 <__aeabi_fsub>
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f5 f82d 	bl	8000ce4 <__aeabi_fmul>
 800bc8a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc8e:	f7f4 ff21 	bl	8000ad4 <__addsf3>
 800bc92:	4601      	mov	r1, r0
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7f5 f8d9 	bl	8000e4c <__aeabi_fdiv>
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	f7f5 f822 	bl	8000ce4 <__aeabi_fmul>
 800bca0:	4601      	mov	r1, r0
 800bca2:	4620      	mov	r0, r4
 800bca4:	e797      	b.n	800bbd6 <__ieee754_asinf+0x26>
 800bca6:	4620      	mov	r0, r4
 800bca8:	f000 faaa 	bl	800c200 <fabsf>
 800bcac:	4601      	mov	r1, r0
 800bcae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bcb2:	f7f4 ff0d 	bl	8000ad0 <__aeabi_fsub>
 800bcb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bcba:	f7f5 f813 	bl	8000ce4 <__aeabi_fmul>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	4950      	ldr	r1, [pc, #320]	; (800be04 <__ieee754_asinf+0x254>)
 800bcc2:	f7f5 f80f 	bl	8000ce4 <__aeabi_fmul>
 800bcc6:	4950      	ldr	r1, [pc, #320]	; (800be08 <__ieee754_asinf+0x258>)
 800bcc8:	f7f4 ff04 	bl	8000ad4 <__addsf3>
 800bccc:	4631      	mov	r1, r6
 800bcce:	f7f5 f809 	bl	8000ce4 <__aeabi_fmul>
 800bcd2:	494e      	ldr	r1, [pc, #312]	; (800be0c <__ieee754_asinf+0x25c>)
 800bcd4:	f7f4 fefc 	bl	8000ad0 <__aeabi_fsub>
 800bcd8:	4631      	mov	r1, r6
 800bcda:	f7f5 f803 	bl	8000ce4 <__aeabi_fmul>
 800bcde:	494c      	ldr	r1, [pc, #304]	; (800be10 <__ieee754_asinf+0x260>)
 800bce0:	f7f4 fef8 	bl	8000ad4 <__addsf3>
 800bce4:	4631      	mov	r1, r6
 800bce6:	f7f4 fffd 	bl	8000ce4 <__aeabi_fmul>
 800bcea:	494a      	ldr	r1, [pc, #296]	; (800be14 <__ieee754_asinf+0x264>)
 800bcec:	f7f4 fef0 	bl	8000ad0 <__aeabi_fsub>
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	f7f4 fff7 	bl	8000ce4 <__aeabi_fmul>
 800bcf6:	4948      	ldr	r1, [pc, #288]	; (800be18 <__ieee754_asinf+0x268>)
 800bcf8:	f7f4 feec 	bl	8000ad4 <__addsf3>
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	f7f4 fff1 	bl	8000ce4 <__aeabi_fmul>
 800bd02:	4946      	ldr	r1, [pc, #280]	; (800be1c <__ieee754_asinf+0x26c>)
 800bd04:	4681      	mov	r9, r0
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7f4 ffec 	bl	8000ce4 <__aeabi_fmul>
 800bd0c:	4944      	ldr	r1, [pc, #272]	; (800be20 <__ieee754_asinf+0x270>)
 800bd0e:	f7f4 fedf 	bl	8000ad0 <__aeabi_fsub>
 800bd12:	4631      	mov	r1, r6
 800bd14:	f7f4 ffe6 	bl	8000ce4 <__aeabi_fmul>
 800bd18:	4942      	ldr	r1, [pc, #264]	; (800be24 <__ieee754_asinf+0x274>)
 800bd1a:	f7f4 fedb 	bl	8000ad4 <__addsf3>
 800bd1e:	4631      	mov	r1, r6
 800bd20:	f7f4 ffe0 	bl	8000ce4 <__aeabi_fmul>
 800bd24:	4940      	ldr	r1, [pc, #256]	; (800be28 <__ieee754_asinf+0x278>)
 800bd26:	f7f4 fed3 	bl	8000ad0 <__aeabi_fsub>
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	f7f4 ffda 	bl	8000ce4 <__aeabi_fmul>
 800bd30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bd34:	f7f4 fece 	bl	8000ad4 <__addsf3>
 800bd38:	4682      	mov	sl, r0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f902 	bl	800bf44 <__ieee754_sqrtf>
 800bd40:	4b3a      	ldr	r3, [pc, #232]	; (800be2c <__ieee754_asinf+0x27c>)
 800bd42:	4607      	mov	r7, r0
 800bd44:	4598      	cmp	r8, r3
 800bd46:	dd1a      	ble.n	800bd7e <__ieee754_asinf+0x1ce>
 800bd48:	4651      	mov	r1, sl
 800bd4a:	4648      	mov	r0, r9
 800bd4c:	f7f5 f87e 	bl	8000e4c <__aeabi_fdiv>
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 ffc7 	bl	8000ce4 <__aeabi_fmul>
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 febc 	bl	8000ad4 <__addsf3>
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	f7f4 feb9 	bl	8000ad4 <__addsf3>
 800bd62:	4933      	ldr	r1, [pc, #204]	; (800be30 <__ieee754_asinf+0x280>)
 800bd64:	f7f4 feb6 	bl	8000ad4 <__addsf3>
 800bd68:	4601      	mov	r1, r0
 800bd6a:	4823      	ldr	r0, [pc, #140]	; (800bdf8 <__ieee754_asinf+0x248>)
 800bd6c:	f7f4 feb0 	bl	8000ad0 <__aeabi_fsub>
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	f73f af4a 	bgt.w	800bc0c <__ieee754_asinf+0x5c>
 800bd78:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bd7c:	e735      	b.n	800bbea <__ieee754_asinf+0x3a>
 800bd7e:	4601      	mov	r1, r0
 800bd80:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800bd84:	f7f4 fea6 	bl	8000ad4 <__addsf3>
 800bd88:	4651      	mov	r1, sl
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	f7f5 f85d 	bl	8000e4c <__aeabi_fdiv>
 800bd92:	4601      	mov	r1, r0
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7f4 ffa5 	bl	8000ce4 <__aeabi_fmul>
 800bd9a:	f028 080f 	bic.w	r8, r8, #15
 800bd9e:	4681      	mov	r9, r0
 800bda0:	4641      	mov	r1, r8
 800bda2:	4640      	mov	r0, r8
 800bda4:	f7f4 ff9e 	bl	8000ce4 <__aeabi_fmul>
 800bda8:	4601      	mov	r1, r0
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7f4 fe90 	bl	8000ad0 <__aeabi_fsub>
 800bdb0:	4641      	mov	r1, r8
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	f7f4 fe8d 	bl	8000ad4 <__addsf3>
 800bdba:	4601      	mov	r1, r0
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7f5 f845 	bl	8000e4c <__aeabi_fdiv>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	f7f4 fe86 	bl	8000ad4 <__addsf3>
 800bdc8:	4601      	mov	r1, r0
 800bdca:	480c      	ldr	r0, [pc, #48]	; (800bdfc <__ieee754_asinf+0x24c>)
 800bdcc:	f7f4 fe80 	bl	8000ad0 <__aeabi_fsub>
 800bdd0:	4601      	mov	r1, r0
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f7f4 fe7c 	bl	8000ad0 <__aeabi_fsub>
 800bdd8:	4641      	mov	r1, r8
 800bdda:	4604      	mov	r4, r0
 800bddc:	4640      	mov	r0, r8
 800bdde:	f7f4 fe79 	bl	8000ad4 <__addsf3>
 800bde2:	4601      	mov	r1, r0
 800bde4:	4813      	ldr	r0, [pc, #76]	; (800be34 <__ieee754_asinf+0x284>)
 800bde6:	f7f4 fe73 	bl	8000ad0 <__aeabi_fsub>
 800bdea:	4601      	mov	r1, r0
 800bdec:	4620      	mov	r0, r4
 800bdee:	f7f4 fe6f 	bl	8000ad0 <__aeabi_fsub>
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	480f      	ldr	r0, [pc, #60]	; (800be34 <__ieee754_asinf+0x284>)
 800bdf6:	e7b9      	b.n	800bd6c <__ieee754_asinf+0x1bc>
 800bdf8:	3fc90fdb 	.word	0x3fc90fdb
 800bdfc:	b33bbd2e 	.word	0xb33bbd2e
 800be00:	7149f2ca 	.word	0x7149f2ca
 800be04:	3811ef08 	.word	0x3811ef08
 800be08:	3a4f7f04 	.word	0x3a4f7f04
 800be0c:	3d241146 	.word	0x3d241146
 800be10:	3e4e0aa8 	.word	0x3e4e0aa8
 800be14:	3ea6b090 	.word	0x3ea6b090
 800be18:	3e2aaaab 	.word	0x3e2aaaab
 800be1c:	3d9dc62e 	.word	0x3d9dc62e
 800be20:	3f303361 	.word	0x3f303361
 800be24:	4001572d 	.word	0x4001572d
 800be28:	4019d139 	.word	0x4019d139
 800be2c:	3f799999 	.word	0x3f799999
 800be30:	333bbd2e 	.word	0x333bbd2e
 800be34:	3f490fdb 	.word	0x3f490fdb

0800be38 <__ieee754_atan2f>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800be3e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800be42:	4603      	mov	r3, r0
 800be44:	dc05      	bgt.n	800be52 <__ieee754_atan2f+0x1a>
 800be46:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800be4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be4e:	4607      	mov	r7, r0
 800be50:	dd04      	ble.n	800be5c <__ieee754_atan2f+0x24>
 800be52:	4618      	mov	r0, r3
 800be54:	f7f4 fe3e 	bl	8000ad4 <__addsf3>
 800be58:	4603      	mov	r3, r0
 800be5a:	e011      	b.n	800be80 <__ieee754_atan2f+0x48>
 800be5c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800be60:	d103      	bne.n	800be6a <__ieee754_atan2f+0x32>
 800be62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be66:	f000 b8bf 	b.w	800bfe8 <atanf>
 800be6a:	178c      	asrs	r4, r1, #30
 800be6c:	f004 0402 	and.w	r4, r4, #2
 800be70:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800be74:	b932      	cbnz	r2, 800be84 <__ieee754_atan2f+0x4c>
 800be76:	2c02      	cmp	r4, #2
 800be78:	d04c      	beq.n	800bf14 <__ieee754_atan2f+0xdc>
 800be7a:	2c03      	cmp	r4, #3
 800be7c:	d100      	bne.n	800be80 <__ieee754_atan2f+0x48>
 800be7e:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <__ieee754_atan2f+0xec>)
 800be80:	4618      	mov	r0, r3
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	b91e      	cbnz	r6, 800be8e <__ieee754_atan2f+0x56>
 800be86:	2f00      	cmp	r7, #0
 800be88:	da4a      	bge.n	800bf20 <__ieee754_atan2f+0xe8>
 800be8a:	4b27      	ldr	r3, [pc, #156]	; (800bf28 <__ieee754_atan2f+0xf0>)
 800be8c:	e7f8      	b.n	800be80 <__ieee754_atan2f+0x48>
 800be8e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800be92:	d10e      	bne.n	800beb2 <__ieee754_atan2f+0x7a>
 800be94:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be98:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800be9c:	d105      	bne.n	800beaa <__ieee754_atan2f+0x72>
 800be9e:	2c02      	cmp	r4, #2
 800bea0:	d83a      	bhi.n	800bf18 <__ieee754_atan2f+0xe0>
 800bea2:	4b22      	ldr	r3, [pc, #136]	; (800bf2c <__ieee754_atan2f+0xf4>)
 800bea4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bea8:	e7ea      	b.n	800be80 <__ieee754_atan2f+0x48>
 800beaa:	2c02      	cmp	r4, #2
 800beac:	d836      	bhi.n	800bf1c <__ieee754_atan2f+0xe4>
 800beae:	4b20      	ldr	r3, [pc, #128]	; (800bf30 <__ieee754_atan2f+0xf8>)
 800beb0:	e7f8      	b.n	800bea4 <__ieee754_atan2f+0x6c>
 800beb2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800beb6:	d0e6      	beq.n	800be86 <__ieee754_atan2f+0x4e>
 800beb8:	1b92      	subs	r2, r2, r6
 800beba:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800bebe:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800bec2:	da17      	bge.n	800bef4 <__ieee754_atan2f+0xbc>
 800bec4:	2900      	cmp	r1, #0
 800bec6:	da01      	bge.n	800becc <__ieee754_atan2f+0x94>
 800bec8:	303c      	adds	r0, #60	; 0x3c
 800beca:	db15      	blt.n	800bef8 <__ieee754_atan2f+0xc0>
 800becc:	4618      	mov	r0, r3
 800bece:	f7f4 ffbd 	bl	8000e4c <__aeabi_fdiv>
 800bed2:	f000 f995 	bl	800c200 <fabsf>
 800bed6:	f000 f887 	bl	800bfe8 <atanf>
 800beda:	4603      	mov	r3, r0
 800bedc:	2c01      	cmp	r4, #1
 800bede:	d00d      	beq.n	800befc <__ieee754_atan2f+0xc4>
 800bee0:	2c02      	cmp	r4, #2
 800bee2:	d00e      	beq.n	800bf02 <__ieee754_atan2f+0xca>
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	d0cb      	beq.n	800be80 <__ieee754_atan2f+0x48>
 800bee8:	4912      	ldr	r1, [pc, #72]	; (800bf34 <__ieee754_atan2f+0xfc>)
 800beea:	4618      	mov	r0, r3
 800beec:	f7f4 fdf2 	bl	8000ad4 <__addsf3>
 800bef0:	4911      	ldr	r1, [pc, #68]	; (800bf38 <__ieee754_atan2f+0x100>)
 800bef2:	e00c      	b.n	800bf0e <__ieee754_atan2f+0xd6>
 800bef4:	4b11      	ldr	r3, [pc, #68]	; (800bf3c <__ieee754_atan2f+0x104>)
 800bef6:	e7f1      	b.n	800bedc <__ieee754_atan2f+0xa4>
 800bef8:	2300      	movs	r3, #0
 800befa:	e7ef      	b.n	800bedc <__ieee754_atan2f+0xa4>
 800befc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf00:	e7be      	b.n	800be80 <__ieee754_atan2f+0x48>
 800bf02:	490c      	ldr	r1, [pc, #48]	; (800bf34 <__ieee754_atan2f+0xfc>)
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f4 fde5 	bl	8000ad4 <__addsf3>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	480a      	ldr	r0, [pc, #40]	; (800bf38 <__ieee754_atan2f+0x100>)
 800bf0e:	f7f4 fddf 	bl	8000ad0 <__aeabi_fsub>
 800bf12:	e7a1      	b.n	800be58 <__ieee754_atan2f+0x20>
 800bf14:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <__ieee754_atan2f+0x100>)
 800bf16:	e7b3      	b.n	800be80 <__ieee754_atan2f+0x48>
 800bf18:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <__ieee754_atan2f+0x108>)
 800bf1a:	e7b1      	b.n	800be80 <__ieee754_atan2f+0x48>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	e7af      	b.n	800be80 <__ieee754_atan2f+0x48>
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <__ieee754_atan2f+0x104>)
 800bf22:	e7ad      	b.n	800be80 <__ieee754_atan2f+0x48>
 800bf24:	c0490fdb 	.word	0xc0490fdb
 800bf28:	bfc90fdb 	.word	0xbfc90fdb
 800bf2c:	0800c63c 	.word	0x0800c63c
 800bf30:	0800c648 	.word	0x0800c648
 800bf34:	33bbbd2e 	.word	0x33bbbd2e
 800bf38:	40490fdb 	.word	0x40490fdb
 800bf3c:	3fc90fdb 	.word	0x3fc90fdb
 800bf40:	3f490fdb 	.word	0x3f490fdb

0800bf44 <__ieee754_sqrtf>:
 800bf44:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bf48:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4604      	mov	r4, r0
 800bf52:	d309      	bcc.n	800bf68 <__ieee754_sqrtf+0x24>
 800bf54:	4601      	mov	r1, r0
 800bf56:	f7f4 fec5 	bl	8000ce4 <__aeabi_fmul>
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f7f4 fdb9 	bl	8000ad4 <__addsf3>
 800bf62:	4604      	mov	r4, r0
 800bf64:	4620      	mov	r0, r4
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	d0fb      	beq.n	800bf64 <__ieee754_sqrtf+0x20>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	da06      	bge.n	800bf7e <__ieee754_sqrtf+0x3a>
 800bf70:	4601      	mov	r1, r0
 800bf72:	f7f4 fdad 	bl	8000ad0 <__aeabi_fsub>
 800bf76:	4601      	mov	r1, r0
 800bf78:	f7f4 ff68 	bl	8000e4c <__aeabi_fdiv>
 800bf7c:	e7f1      	b.n	800bf62 <__ieee754_sqrtf+0x1e>
 800bf7e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800bf82:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800bf86:	d029      	beq.n	800bfdc <__ieee754_sqrtf+0x98>
 800bf88:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800bf8c:	07cb      	lsls	r3, r1, #31
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800bf96:	f04f 0419 	mov.w	r4, #25
 800bf9a:	461e      	mov	r6, r3
 800bf9c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800bfa0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800bfa4:	bf58      	it	pl
 800bfa6:	0052      	lslpl	r2, r2, #1
 800bfa8:	1040      	asrs	r0, r0, #1
 800bfaa:	0052      	lsls	r2, r2, #1
 800bfac:	1875      	adds	r5, r6, r1
 800bfae:	4295      	cmp	r5, r2
 800bfb0:	bfde      	ittt	le
 800bfb2:	186e      	addle	r6, r5, r1
 800bfb4:	1b52      	suble	r2, r2, r5
 800bfb6:	185b      	addle	r3, r3, r1
 800bfb8:	3c01      	subs	r4, #1
 800bfba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bfbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bfc2:	d1f3      	bne.n	800bfac <__ieee754_sqrtf+0x68>
 800bfc4:	b112      	cbz	r2, 800bfcc <__ieee754_sqrtf+0x88>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	f023 0301 	bic.w	r3, r3, #1
 800bfcc:	105c      	asrs	r4, r3, #1
 800bfce:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800bfd2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800bfd6:	e7c5      	b.n	800bf64 <__ieee754_sqrtf+0x20>
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	3201      	adds	r2, #1
 800bfdc:	0218      	lsls	r0, r3, #8
 800bfde:	d5fb      	bpl.n	800bfd8 <__ieee754_sqrtf+0x94>
 800bfe0:	3a01      	subs	r2, #1
 800bfe2:	1a89      	subs	r1, r1, r2
 800bfe4:	e7d0      	b.n	800bf88 <__ieee754_sqrtf+0x44>
	...

0800bfe8 <atanf>:
 800bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bff0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bff4:	4604      	mov	r4, r0
 800bff6:	4680      	mov	r8, r0
 800bff8:	db0e      	blt.n	800c018 <atanf+0x30>
 800bffa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bffe:	dd04      	ble.n	800c00a <atanf+0x22>
 800c000:	4601      	mov	r1, r0
 800c002:	f7f4 fd67 	bl	8000ad4 <__addsf3>
 800c006:	4604      	mov	r4, r0
 800c008:	e003      	b.n	800c012 <atanf+0x2a>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f300 80ce 	bgt.w	800c1ac <atanf+0x1c4>
 800c010:	4c67      	ldr	r4, [pc, #412]	; (800c1b0 <atanf+0x1c8>)
 800c012:	4620      	mov	r0, r4
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	4b66      	ldr	r3, [pc, #408]	; (800c1b4 <atanf+0x1cc>)
 800c01a:	429d      	cmp	r5, r3
 800c01c:	dc0e      	bgt.n	800c03c <atanf+0x54>
 800c01e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c022:	da08      	bge.n	800c036 <atanf+0x4e>
 800c024:	4964      	ldr	r1, [pc, #400]	; (800c1b8 <atanf+0x1d0>)
 800c026:	f7f4 fd55 	bl	8000ad4 <__addsf3>
 800c02a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c02e:	f7f5 f815 	bl	800105c <__aeabi_fcmpgt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d1ed      	bne.n	800c012 <atanf+0x2a>
 800c036:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c03a:	e01c      	b.n	800c076 <atanf+0x8e>
 800c03c:	f000 f8e0 	bl	800c200 <fabsf>
 800c040:	4b5e      	ldr	r3, [pc, #376]	; (800c1bc <atanf+0x1d4>)
 800c042:	4604      	mov	r4, r0
 800c044:	429d      	cmp	r5, r3
 800c046:	dc7c      	bgt.n	800c142 <atanf+0x15a>
 800c048:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c04c:	429d      	cmp	r5, r3
 800c04e:	dc67      	bgt.n	800c120 <atanf+0x138>
 800c050:	4601      	mov	r1, r0
 800c052:	f7f4 fd3f 	bl	8000ad4 <__addsf3>
 800c056:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c05a:	f7f4 fd39 	bl	8000ad0 <__aeabi_fsub>
 800c05e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c062:	4605      	mov	r5, r0
 800c064:	4620      	mov	r0, r4
 800c066:	f7f4 fd35 	bl	8000ad4 <__addsf3>
 800c06a:	4601      	mov	r1, r0
 800c06c:	4628      	mov	r0, r5
 800c06e:	f7f4 feed 	bl	8000e4c <__aeabi_fdiv>
 800c072:	2600      	movs	r6, #0
 800c074:	4604      	mov	r4, r0
 800c076:	4621      	mov	r1, r4
 800c078:	4620      	mov	r0, r4
 800c07a:	f7f4 fe33 	bl	8000ce4 <__aeabi_fmul>
 800c07e:	4601      	mov	r1, r0
 800c080:	4607      	mov	r7, r0
 800c082:	f7f4 fe2f 	bl	8000ce4 <__aeabi_fmul>
 800c086:	4605      	mov	r5, r0
 800c088:	494d      	ldr	r1, [pc, #308]	; (800c1c0 <atanf+0x1d8>)
 800c08a:	f7f4 fe2b 	bl	8000ce4 <__aeabi_fmul>
 800c08e:	494d      	ldr	r1, [pc, #308]	; (800c1c4 <atanf+0x1dc>)
 800c090:	f7f4 fd20 	bl	8000ad4 <__addsf3>
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 fe25 	bl	8000ce4 <__aeabi_fmul>
 800c09a:	494b      	ldr	r1, [pc, #300]	; (800c1c8 <atanf+0x1e0>)
 800c09c:	f7f4 fd1a 	bl	8000ad4 <__addsf3>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fe1f 	bl	8000ce4 <__aeabi_fmul>
 800c0a6:	4949      	ldr	r1, [pc, #292]	; (800c1cc <atanf+0x1e4>)
 800c0a8:	f7f4 fd14 	bl	8000ad4 <__addsf3>
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f7f4 fe19 	bl	8000ce4 <__aeabi_fmul>
 800c0b2:	4947      	ldr	r1, [pc, #284]	; (800c1d0 <atanf+0x1e8>)
 800c0b4:	f7f4 fd0e 	bl	8000ad4 <__addsf3>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 fe13 	bl	8000ce4 <__aeabi_fmul>
 800c0be:	4945      	ldr	r1, [pc, #276]	; (800c1d4 <atanf+0x1ec>)
 800c0c0:	f7f4 fd08 	bl	8000ad4 <__addsf3>
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7f4 fe0d 	bl	8000ce4 <__aeabi_fmul>
 800c0ca:	4943      	ldr	r1, [pc, #268]	; (800c1d8 <atanf+0x1f0>)
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f7f4 fe08 	bl	8000ce4 <__aeabi_fmul>
 800c0d4:	4941      	ldr	r1, [pc, #260]	; (800c1dc <atanf+0x1f4>)
 800c0d6:	f7f4 fcfb 	bl	8000ad0 <__aeabi_fsub>
 800c0da:	4629      	mov	r1, r5
 800c0dc:	f7f4 fe02 	bl	8000ce4 <__aeabi_fmul>
 800c0e0:	493f      	ldr	r1, [pc, #252]	; (800c1e0 <atanf+0x1f8>)
 800c0e2:	f7f4 fcf5 	bl	8000ad0 <__aeabi_fsub>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 fdfc 	bl	8000ce4 <__aeabi_fmul>
 800c0ec:	493d      	ldr	r1, [pc, #244]	; (800c1e4 <atanf+0x1fc>)
 800c0ee:	f7f4 fcef 	bl	8000ad0 <__aeabi_fsub>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f7f4 fdf6 	bl	8000ce4 <__aeabi_fmul>
 800c0f8:	493b      	ldr	r1, [pc, #236]	; (800c1e8 <atanf+0x200>)
 800c0fa:	f7f4 fce9 	bl	8000ad0 <__aeabi_fsub>
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fdf0 	bl	8000ce4 <__aeabi_fmul>
 800c104:	4601      	mov	r1, r0
 800c106:	4638      	mov	r0, r7
 800c108:	f7f4 fce4 	bl	8000ad4 <__addsf3>
 800c10c:	4621      	mov	r1, r4
 800c10e:	f7f4 fde9 	bl	8000ce4 <__aeabi_fmul>
 800c112:	1c73      	adds	r3, r6, #1
 800c114:	4601      	mov	r1, r0
 800c116:	d133      	bne.n	800c180 <atanf+0x198>
 800c118:	4620      	mov	r0, r4
 800c11a:	f7f4 fcd9 	bl	8000ad0 <__aeabi_fsub>
 800c11e:	e772      	b.n	800c006 <atanf+0x1e>
 800c120:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c124:	f7f4 fcd4 	bl	8000ad0 <__aeabi_fsub>
 800c128:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c12c:	4605      	mov	r5, r0
 800c12e:	4620      	mov	r0, r4
 800c130:	f7f4 fcd0 	bl	8000ad4 <__addsf3>
 800c134:	4601      	mov	r1, r0
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 fe88 	bl	8000e4c <__aeabi_fdiv>
 800c13c:	2601      	movs	r6, #1
 800c13e:	4604      	mov	r4, r0
 800c140:	e799      	b.n	800c076 <atanf+0x8e>
 800c142:	4b2a      	ldr	r3, [pc, #168]	; (800c1ec <atanf+0x204>)
 800c144:	429d      	cmp	r5, r3
 800c146:	dc14      	bgt.n	800c172 <atanf+0x18a>
 800c148:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c14c:	f7f4 fcc0 	bl	8000ad0 <__aeabi_fsub>
 800c150:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c154:	4605      	mov	r5, r0
 800c156:	4620      	mov	r0, r4
 800c158:	f7f4 fdc4 	bl	8000ce4 <__aeabi_fmul>
 800c15c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c160:	f7f4 fcb8 	bl	8000ad4 <__addsf3>
 800c164:	4601      	mov	r1, r0
 800c166:	4628      	mov	r0, r5
 800c168:	f7f4 fe70 	bl	8000e4c <__aeabi_fdiv>
 800c16c:	2602      	movs	r6, #2
 800c16e:	4604      	mov	r4, r0
 800c170:	e781      	b.n	800c076 <atanf+0x8e>
 800c172:	4601      	mov	r1, r0
 800c174:	481e      	ldr	r0, [pc, #120]	; (800c1f0 <atanf+0x208>)
 800c176:	f7f4 fe69 	bl	8000e4c <__aeabi_fdiv>
 800c17a:	2603      	movs	r6, #3
 800c17c:	4604      	mov	r4, r0
 800c17e:	e77a      	b.n	800c076 <atanf+0x8e>
 800c180:	4b1c      	ldr	r3, [pc, #112]	; (800c1f4 <atanf+0x20c>)
 800c182:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c186:	f7f4 fca3 	bl	8000ad0 <__aeabi_fsub>
 800c18a:	4621      	mov	r1, r4
 800c18c:	f7f4 fca0 	bl	8000ad0 <__aeabi_fsub>
 800c190:	4b19      	ldr	r3, [pc, #100]	; (800c1f8 <atanf+0x210>)
 800c192:	4601      	mov	r1, r0
 800c194:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c198:	f7f4 fc9a 	bl	8000ad0 <__aeabi_fsub>
 800c19c:	f1b8 0f00 	cmp.w	r8, #0
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	f6bf af36 	bge.w	800c012 <atanf+0x2a>
 800c1a6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c1aa:	e72c      	b.n	800c006 <atanf+0x1e>
 800c1ac:	4c13      	ldr	r4, [pc, #76]	; (800c1fc <atanf+0x214>)
 800c1ae:	e730      	b.n	800c012 <atanf+0x2a>
 800c1b0:	bfc90fdb 	.word	0xbfc90fdb
 800c1b4:	3edfffff 	.word	0x3edfffff
 800c1b8:	7149f2ca 	.word	0x7149f2ca
 800c1bc:	3f97ffff 	.word	0x3f97ffff
 800c1c0:	3c8569d7 	.word	0x3c8569d7
 800c1c4:	3d4bda59 	.word	0x3d4bda59
 800c1c8:	3d886b35 	.word	0x3d886b35
 800c1cc:	3dba2e6e 	.word	0x3dba2e6e
 800c1d0:	3e124925 	.word	0x3e124925
 800c1d4:	3eaaaaab 	.word	0x3eaaaaab
 800c1d8:	bd15a221 	.word	0xbd15a221
 800c1dc:	3d6ef16b 	.word	0x3d6ef16b
 800c1e0:	3d9d8795 	.word	0x3d9d8795
 800c1e4:	3de38e38 	.word	0x3de38e38
 800c1e8:	3e4ccccd 	.word	0x3e4ccccd
 800c1ec:	401bffff 	.word	0x401bffff
 800c1f0:	bf800000 	.word	0xbf800000
 800c1f4:	0800c664 	.word	0x0800c664
 800c1f8:	0800c654 	.word	0x0800c654
 800c1fc:	3fc90fdb 	.word	0x3fc90fdb

0800c200 <fabsf>:
 800c200:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c204:	4770      	bx	lr
	...

0800c208 <nanf>:
 800c208:	4800      	ldr	r0, [pc, #0]	; (800c20c <nanf+0x4>)
 800c20a:	4770      	bx	lr
 800c20c:	7fc00000 	.word	0x7fc00000

0800c210 <_init>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr

0800c21c <_fini>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr
