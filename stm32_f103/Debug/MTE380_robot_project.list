
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009938  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009a48  08009a48  00019a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e4c  08009e4c  000202c0  2**0
                  CONTENTS
  4 .ARM          00000000  08009e4c  08009e4c  000202c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e4c  08009e4c  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08009e54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200002c0  0800a114  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800a114  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014907  00000000  00000000  000202e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fe  00000000  00000000  00034bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00037cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00039188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b1  00000000  00000000  0003a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c04  00000000  00000000  00055ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954f5  00000000  00000000  0006e6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000674c  00000000  00000000  00103c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c0 	.word	0x200002c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a30 	.word	0x08009a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002c4 	.word	0x200002c4
 800014c:	08009a30 	.word	0x08009a30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <drive_forward+0x84>)
 8000ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ade:	f7ff fe25 	bl	800072c <__aeabi_ddiv>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <drive_forward+0x88>)
 8000af0:	f7ff fb3c 	bl	800016c <__adddf3>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <drive_forward+0x8c>)
 8000b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b06:	f7ff fe11 	bl	800072c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <drive_forward+0x90>)
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	f7ff fcde 	bl	80004d8 <__aeabi_dmul>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	460b      	mov	r3, r1
 8000b20:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 8000b24:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b2c:	f7ff ffac 	bl	8000a88 <__aeabi_d2uiz>
 8000b30:	4603      	mov	r3, r0
 8000b32:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 8000b34:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b3c:	f7ff ffa4 	bl	8000a88 <__aeabi_d2uiz>
 8000b40:	4603      	mov	r3, r0
 8000b42:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000b44:	bf00      	nop
 8000b46:	3724      	adds	r7, #36	; 0x24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40590000 	.word	0x40590000
 8000b50:	3ff00000 	.word	0x3ff00000
 8000b54:	40340000 	.word	0x40340000
 8000b58:	20000000 	.word	0x20000000

08000b5c <stop>:

void stop (TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	drive_forward (htim, 0);
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffab 	bl	8000ac8 <drive_forward>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <turn_right>:

// turn right
void turn_right (TIM_HandleTypeDef *htim)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	// spin left motor
	double speed = 10;
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <turn_right+0xbc>)
 8000b8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double pulse_width = 1.0 + (speed/100.0);
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <turn_right+0xc0>)
 8000b94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b98:	f7ff fdc8 	bl	800072c <__aeabi_ddiv>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <turn_right+0xc4>)
 8000baa:	f7ff fadf 	bl	800016c <__adddf3>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double command = (pulse_width/20.0)*ARR;
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <turn_right+0xc8>)
 8000bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bc0:	f7ff fdb4 	bl	800072c <__aeabi_ddiv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <turn_right+0xcc>)
 8000bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR1 = command;
 8000bde:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000be6:	f7ff ff4f 	bl	8000a88 <__aeabi_d2uiz>
 8000bea:	4603      	mov	r3, r0
 8000bec:	6363      	str	r3, [r4, #52]	; 0x34

	// hold right motor
	pulse_width = 1.0;
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <turn_right+0xc4>)
 8000bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	command = (pulse_width/20.0)*ARR;
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <turn_right+0xc8>)
 8000bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c02:	f7ff fd93 	bl	800072c <__aeabi_ddiv>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <turn_right+0xcc>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fc60 	bl	80004d8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR2 = command;
 8000c20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c28:	f7ff ff2e 	bl	8000a88 <__aeabi_d2uiz>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000c30:	bf00      	nop
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40240000 	.word	0x40240000
 8000c3c:	40590000 	.word	0x40590000
 8000c40:	3ff00000 	.word	0x3ff00000
 8000c44:	40340000 	.word	0x40340000
 8000c48:	20000000 	.word	0x20000000

08000c4c <accelerate>:

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fbc0 	bl	80003e4 <__aeabi_ui2d>
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <accelerate+0xa8>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fd5f 	bl	800072c <__aeabi_ddiv>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <accelerate+0xac>)
 8000c7c:	f7ff fc2c 	bl	80004d8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <accelerate+0xb0>)
 8000c8e:	f7ff fa6b 	bl	8000168 <__aeabi_dsub>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <accelerate+0xb4>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 8000cac:	e013      	b.n	8000cd6 <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 8000cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f7ff ff08 	bl	8000ac8 <drive_forward>
		speed += 2;
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cc4:	f7ff fa52 	bl	800016c <__adddf3>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 fe67 	bl	80029a4 <HAL_Delay>
	while (speed < final_speed)
 8000cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cde:	f7ff fe6d 	bl	80009bc <__aeabi_dcmplt>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e2      	bne.n	8000cae <accelerate+0x62>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	40340000 	.word	0x40340000
 8000cfc:	3ff00000 	.word	0x3ff00000
 8000d00:	40590000 	.word	0x40590000

08000d04 <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8000d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fb66 	bl	80003e4 <__aeabi_ui2d>
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <decelerate+0xa8>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fd05 	bl	800072c <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <decelerate+0xac>)
 8000d30:	f7ff fbd2 	bl	80004d8 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <decelerate+0xb0>)
 8000d42:	f7ff fa11 	bl	8000168 <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <decelerate+0xb4>)
 8000d54:	f7ff fbc0 	bl	80004d8 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8000d60:	e013      	b.n	8000d8a <decelerate+0x86>
	{
		drive_forward(htim, speed);
 8000d62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff feae 	bl	8000ac8 <drive_forward>
		speed -= 2;
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d78:	f7ff f9f6 	bl	8000168 <__aeabi_dsub>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 8000d84:	200a      	movs	r0, #10
 8000d86:	f001 fe0d 	bl	80029a4 <HAL_Delay>
	while (speed > 0)
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d96:	f7ff fe2f 	bl	80009f8 <__aeabi_dcmpgt>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e0      	bne.n	8000d62 <decelerate+0x5e>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40340000 	.word	0x40340000
 8000db4:	3ff00000 	.word	0x3ff00000
 8000db8:	40590000 	.word	0x40590000

08000dbc <ESP_Receive>:
char turn_right_com[] = "turn_right";
char accelerate_com[] = "accelerate";
char decelerate_com[] = "decelerate";


void ESP_Receive(TIM_HandleTypeDef *htim) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	//esp command: "drive_forward_030 " where 030 is the speed percentage
	if(strncmp((char *)UART2_rxBuffer, drive_forward_com, strlen(drive_forward_com)) == 0) {
 8000dc4:	4833      	ldr	r0, [pc, #204]	; (8000e94 <ESP_Receive+0xd8>)
 8000dc6:	f7ff f9c3 	bl	8000150 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4931      	ldr	r1, [pc, #196]	; (8000e94 <ESP_Receive+0xd8>)
 8000dd0:	4831      	ldr	r0, [pc, #196]	; (8000e98 <ESP_Receive+0xdc>)
 8000dd2:	f006 fce7 	bl	80077a4 <strncmp>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10d      	bne.n	8000df8 <ESP_Receive+0x3c>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, drive_forward_com);
 8000ddc:	492d      	ldr	r1, [pc, #180]	; (8000e94 <ESP_Receive+0xd8>)
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <ESP_Receive+0xdc>)
 8000de0:	f000 f864 	bl	8000eac <get_integer_from_string>
 8000de4:	60b8      	str	r0, [r7, #8]

		drive_forward(htim, speed);
 8000de6:	68b8      	ldr	r0, [r7, #8]
 8000de8:	f7ff fb0c 	bl	8000404 <__aeabi_i2d>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fe69 	bl	8000ac8 <drive_forward>

	//esp command: "decelerate "
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
		decelerate(htim);
	}
}
 8000df6:	e048      	b.n	8000e8a <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, stop_com, strlen(stop_com))== 0) {
 8000df8:	4828      	ldr	r0, [pc, #160]	; (8000e9c <ESP_Receive+0xe0>)
 8000dfa:	f7ff f9a9 	bl	8000150 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4926      	ldr	r1, [pc, #152]	; (8000e9c <ESP_Receive+0xe0>)
 8000e04:	4824      	ldr	r0, [pc, #144]	; (8000e98 <ESP_Receive+0xdc>)
 8000e06:	f006 fccd 	bl	80077a4 <strncmp>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d103      	bne.n	8000e18 <ESP_Receive+0x5c>
		stop(htim);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fea3 	bl	8000b5c <stop>
}
 8000e16:	e038      	b.n	8000e8a <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, turn_right_com, strlen(turn_right_com))== 0) {
 8000e18:	4821      	ldr	r0, [pc, #132]	; (8000ea0 <ESP_Receive+0xe4>)
 8000e1a:	f7ff f999 	bl	8000150 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	491f      	ldr	r1, [pc, #124]	; (8000ea0 <ESP_Receive+0xe4>)
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <ESP_Receive+0xdc>)
 8000e26:	f006 fcbd 	bl	80077a4 <strncmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <ESP_Receive+0x7c>
		turn_right(htim);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fea3 	bl	8000b7c <turn_right>
}
 8000e36:	e028      	b.n	8000e8a <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, accelerate_com, strlen(accelerate_com))== 0) {
 8000e38:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <ESP_Receive+0xe8>)
 8000e3a:	f7ff f989 	bl	8000150 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4918      	ldr	r1, [pc, #96]	; (8000ea4 <ESP_Receive+0xe8>)
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <ESP_Receive+0xdc>)
 8000e46:	f006 fcad 	bl	80077a4 <strncmp>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10d      	bne.n	8000e6c <ESP_Receive+0xb0>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, accelerate_com);
 8000e50:	4914      	ldr	r1, [pc, #80]	; (8000ea4 <ESP_Receive+0xe8>)
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <ESP_Receive+0xdc>)
 8000e54:	f000 f82a 	bl	8000eac <get_integer_from_string>
 8000e58:	60f8      	str	r0, [r7, #12]
		accelerate(htim, speed);
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fad2 	bl	8000404 <__aeabi_i2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fef1 	bl	8000c4c <accelerate>
}
 8000e6a:	e00e      	b.n	8000e8a <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <ESP_Receive+0xec>)
 8000e6e:	f7ff f96f 	bl	8000150 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <ESP_Receive+0xec>)
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <ESP_Receive+0xdc>)
 8000e7a:	f006 fc93 	bl	80077a4 <strncmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <ESP_Receive+0xce>
		decelerate(htim);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff3d 	bl	8000d04 <decelerate>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200002dc 	.word	0x200002dc
 8000e9c:	20000018 	.word	0x20000018
 8000ea0:	20000020 	.word	0x20000020
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	20000038 	.word	0x20000038

08000eac <get_integer_from_string>:

//3 digits numbers currently
int get_integer_from_string(char *buffer_msg, char *string_command){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	char int_substr[4];
	memcpy(int_substr, buffer_msg[strlen(string_command)+1], 4 );
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f7ff f94a 	bl	8000150 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60bb      	str	r3, [r7, #8]
	int_substr[4] = '\0';
 8000eca:	2300      	movs	r3, #0
 8000ecc:	733b      	strb	r3, [r7, #12]

	int int_value = atoi(int_substr);
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 ffd0 	bl	8006e78 <atoi>
 8000ed8:	60f8      	str	r0, [r7, #12]
	return int_value;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	72fb      	strb	r3, [r7, #11]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000ef8:	7afb      	ldrb	r3, [r7, #11]
 8000efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000efe:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8000f04:	f107 0214 	add.w	r2, r7, #20
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	21d2      	movs	r1, #210	; 0xd2
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f002 fd72 	bl	80039fc <HAL_I2C_Master_Transmit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8000f1c:	893b      	ldrh	r3, [r7, #8]
 8000f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	21d2      	movs	r1, #210	; 0xd2
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f002 fe65 	bl	8003bf8 <HAL_I2C_Master_Receive>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	75fb      	strb	r3, [r7, #23]
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <ICM_WriteOneByte>:
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
}

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af02      	add	r7, sp, #8
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
 8000f46:	4613      	mov	r3, r2
 8000f48:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f50:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	733b      	strb	r3, [r7, #12]
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	21d2      	movs	r1, #210	; 0xd2
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f002 fd47 	bl	80039fc <HAL_I2C_Master_Transmit>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
 8000f82:	4613      	mov	r3, r2
 8000f84:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	217f      	movs	r1, #127	; 0x7f
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffd5 	bl	8000f3a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 fd07 	bl	80029a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8000f96:	220c      	movs	r2, #12
 8000f98:	2103      	movs	r1, #3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffcd 	bl	8000f3a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 fcff 	bl	80029a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2104      	movs	r1, #4
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffc4 	bl	8000f3a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f001 fcf6 	bl	80029a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8000fb8:	78bb      	ldrb	r3, [r7, #2]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2106      	movs	r1, #6
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffbb 	bl	8000f3a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 fced 	bl	80029a4 <HAL_Delay>
  }
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f001 fce2 	bl	80029a4 <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f8e2 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 fcdb 	bl	80029a4 <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f8ec 	bl	80011cc <ICM_Enable_I2C>
	HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 fcd5 	bl	80029a4 <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f8f2 	bl	80011e6 <ICM_SetClock>
	HAL_Delay(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f001 fcce 	bl	80029a4 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f8fc 	bl	8001206 <ICM_AccelGyroOff>
	HAL_Delay(20);
 800100e:	2014      	movs	r0, #20
 8001010:	f001 fcc8 	bl	80029a4 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f903 	bl	8001220 <ICM_AccelGyroOn>
	HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f001 fcc2 	bl	80029a4 <HAL_Delay>
	ICM_Initialize(hi2c);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f804 	bl	800102e <ICM_Initialize>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 8001036:	2120      	movs	r1, #32
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f8b7 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(20);
 800103e:	2014      	movs	r0, #20
 8001040:	f001 fcb0 	bl	80029a4 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8001044:	2229      	movs	r2, #41	; 0x29
 8001046:	2100      	movs	r1, #0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f8f6 	bl	800123a <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f001 fca8 	bl	80029a4 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8001054:	220a      	movs	r2, #10
 8001056:	2100      	movs	r1, #0
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff6e 	bl	8000f3a <ICM_WriteOneByte>
	HAL_Delay(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f001 fca0 	bl	80029a4 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8001064:	2215      	movs	r2, #21
 8001066:	2114      	movs	r1, #20
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff66 	bl	8000f3a <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff61 	bl	8000f3a <ICM_WriteOneByte>
	HAL_Delay(10);
 8001078:	200a      	movs	r0, #10
 800107a:	f001 fc93 	bl	80029a4 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 800107e:	220a      	movs	r2, #10
 8001080:	2111      	movs	r1, #17
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff59 	bl	8000f3a <ICM_WriteOneByte>
	HAL_Delay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f001 fc8b 	bl	80029a4 <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 800108e:	2120      	movs	r1, #32
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f88b 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(20);
 8001096:	2014      	movs	r0, #20
 8001098:	f001 fc84 	bl	80029a4 <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 800109c:	2200      	movs	r2, #0
 800109e:	217f      	movs	r1, #127	; 0x7f
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff4a 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	210f      	movs	r1, #15
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff45 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 80010b0:	2220      	movs	r2, #32
 80010b2:	2103      	movs	r1, #3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff40 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	217f      	movs	r1, #127	; 0x7f
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff3b 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80010c4:	224d      	movs	r2, #77	; 0x4d
 80010c6:	2101      	movs	r1, #1
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff36 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80010ce:	2201      	movs	r2, #1
 80010d0:	2102      	movs	r1, #2
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff31 	bl	8000f3a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80010d8:	2281      	movs	r2, #129	; 0x81
 80010da:	2105      	movs	r1, #5
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff2c 	bl	8000f3a <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 80010e2:	2201      	movs	r2, #1
 80010e4:	2132      	movs	r1, #50	; 0x32
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff45 	bl	8000f76 <i2c_Mag_write>
	HAL_Delay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f0:	f001 fc58 	bl	80029a4 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80010f4:	2202      	movs	r2, #2
 80010f6:	2131      	movs	r1, #49	; 0x31
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff3c 	bl	8000f76 <i2c_Mag_write>

	return 1337;
 80010fe:	f240 5339 	movw	r3, #1337	; 0x539
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	230c      	movs	r3, #12
 800111a:	212d      	movs	r1, #45	; 0x2d
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fee1 	bl	8000ee4 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 8001134:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 8001148:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 800114a:	7c3b      	ldrb	r3, [r7, #16]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	7c7b      	ldrb	r3, [r7, #17]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 800115c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800115e:	7cbb      	ldrb	r3, [r7, #18]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001170:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8001172:	7d3b      	ldrb	r3, [r7, #20]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21b      	sxth	r3, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001184:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8001186:	7dbb      	ldrb	r3, [r7, #22]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001198:	809a      	strh	r2, [r3, #4]
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000300 	.word	0x20000300
 80011a8:	20000308 	.word	0x20000308

080011ac <ICM_SelectBank>:
	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
}

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	461a      	mov	r2, r3
 80011bc:	217f      	movs	r1, #127	; 0x7f
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff febb 	bl	8000f3a <ICM_WriteOneByte>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 80011d4:	2220      	movs	r2, #32
 80011d6:	2103      	movs	r1, #3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff feae 	bl	8000f3a <ICM_WriteOneByte>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2106      	movs	r1, #6
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe9e 	bl	8000f3a <ICM_WriteOneByte>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 800120e:	223f      	movs	r2, #63	; 0x3f
 8001210:	2107      	movs	r1, #7
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe91 	bl	8000f3a <ICM_WriteOneByte>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8001228:	2200      	movs	r2, #0
 800122a:	2107      	movs	r1, #7
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fe84 	bl	8000f3a <ICM_WriteOneByte>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
 8001246:	4613      	mov	r3, r2
 8001248:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe6f 	bl	8000f3a <ICM_WriteOneByte>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e029      	b.n	80012c6 <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff4a 	bl	800110c <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <ICM20948_Calibrate+0x190>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800128c:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ICM20948_Calibrate+0x190>)
 8001298:	885b      	ldrh	r3, [r3, #2]
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012a2:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <ICM20948_Calibrate+0x190>)
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012b8:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fb72 	bl	80029a4 <HAL_Delay>
	for(int i=0; i<50; i++){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b31      	cmp	r3, #49	; 0x31
 80012ca:	ddd2      	ble.n	8001272 <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80012d4:	fb82 1203 	smull	r1, r2, r2, r3
 80012d8:	1112      	asrs	r2, r2, #4
 80012da:	17db      	asrs	r3, r3, #31
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012e2:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ea:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1112      	asrs	r2, r2, #4
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012fa:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <ICM20948_Calibrate+0x194>)
 8001304:	fb82 1203 	smull	r1, r2, r2, r3
 8001308:	1112      	asrs	r2, r2, #4
 800130a:	17db      	asrs	r3, r3, #31
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001312:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001316:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f872 	bl	8000404 <__aeabi_i2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <ICM20948_Calibrate+0x198>)
 8001326:	f7fe ff1f 	bl	8000168 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fb81 	bl	8000a38 <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800133c:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	e029      	b.n	8001398 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fee1 	bl	800110c <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800135e:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001362:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001374:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800138a:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f001 fb09 	bl	80029a4 <HAL_Delay>
	for(int i=0; i<50; i++){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b31      	cmp	r3, #49	; 0x31
 800139c:	ddd2      	ble.n	8001344 <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013a6:	fb82 1203 	smull	r1, r2, r2, r3
 80013aa:	1112      	asrs	r2, r2, #4
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013b4:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	1112      	asrs	r2, r2, #4
 80013c4:	17db      	asrs	r3, r3, #31
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013cc:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013d6:	fb82 1203 	smull	r1, r2, r2, r3
 80013da:	1112      	asrs	r2, r2, #4
 80013dc:	17db      	asrs	r3, r3, #31
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013e4:	809a      	strh	r2, [r3, #4]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000318 	.word	0x20000318
 80013f4:	20000300 	.word	0x20000300
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	40b00000 	.word	0x40b00000
 8001400:	20000310 	.word	0x20000310
 8001404:	20000308 	.word	0x20000308

08001408 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001414:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001420:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001424:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001428:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001430:	e000      	b.n	8001434 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001432:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f9      	beq.n	8001432 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800143e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e009      	b.n	800147e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60ba      	str	r2, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffc8 	bl	8001408 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	dbf1      	blt.n	800146a <_write+0x16>
  return len;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	int test=5;
 8001498:	2305      	movs	r3, #5
 800149a:	60fb      	str	r3, [r7, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 4);
 80014b0:	2204      	movs	r2, #4
 80014b2:	4907      	ldr	r1, [pc, #28]	; (80014d0 <HAL_UART_RxCpltCallback+0x28>)
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <HAL_UART_RxCpltCallback+0x2c>)
 80014b6:	f005 fab6 	bl	8006a26 <HAL_UART_Receive_DMA>
//	HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 32);
	 ESP_Receive(&htim2);
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <HAL_UART_RxCpltCallback+0x30>)
 80014bc:	f7ff fc7e 	bl	8000dbc <ESP_Receive>
	 UART2_rxBuffer[0] = '\0';
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_UART_RxCpltCallback+0x28>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002dc 	.word	0x200002dc
 80014d4:	200004d4 	.word	0x200004d4
 80014d8:	20000444 	.word	0x20000444

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	221f      	movs	r2, #31
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fcf0 	bl	8006ed4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f4:	f001 f9f4 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f85c 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fc:	f000 faec 	bl	8001ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001500:	f000 faa2 	bl	8001a48 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001504:	f000 f8e6 	bl	80016d4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001508:	f000 f8a6 	bl	8001658 <MX_ADC1_Init>
  MX_SPI2_Init();
 800150c:	f000 f910 	bl	8001730 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001510:	f000 f99c 	bl	800184c <MX_TIM2_Init>
  MX_DMA_Init();
 8001514:	f000 fac2 	bl	8001a9c <MX_DMA_Init>
  MX_TIM3_Init();
 8001518:	f000 fa1a 	bl	8001950 <MX_TIM3_Init>
  MX_TIM1_Init();
 800151c:	f000 f93e 	bl	800179c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001520:	213c      	movs	r1, #60	; 0x3c
 8001522:	481d      	ldr	r0, [pc, #116]	; (8001598 <main+0xbc>)
 8001524:	f004 f9dc 	bl	80058e0 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 8001528:	481c      	ldr	r0, [pc, #112]	; (800159c <main+0xc0>)
 800152a:	f003 fe95 	bl	8005258 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 800152e:	2104      	movs	r1, #4
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <main+0xc0>)
 8001532:	f004 f82d 	bl	8005590 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8001536:	2108      	movs	r1, #8
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <main+0xc0>)
 800153a:	f004 f829 	bl	8005590 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <main+0xc4>)
 8001540:	f003 fe8a 	bl	8005258 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8001544:	2104      	movs	r1, #4
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <main+0xc4>)
 8001548:	f003 ff28 	bl	800539c <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 800154c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001550:	f001 fa28 	bl	80029a4 <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8001554:	2100      	movs	r1, #0
 8001556:	4813      	ldr	r0, [pc, #76]	; (80015a4 <main+0xc8>)
 8001558:	f7ff fe28 	bl	80011ac <ICM_SelectBank>
  HAL_Delay(10);
 800155c:	200a      	movs	r0, #10
 800155e:	f001 fa21 	bl	80029a4 <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <main+0xc8>)
 8001564:	f7ff fd35 	bl	8000fd2 <ICM_PowerOn>
  HAL_Delay(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f001 fa1b 	bl	80029a4 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <main+0xc8>)
 8001570:	f7ff fe78 	bl	8001264 <ICM20948_Calibrate>
  HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f001 fa15 	bl	80029a4 <HAL_Delay>

//  sprintf(UART2_rxBuffer, "testing hahhaha\n");
//  HAL_UART_Transmit(&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer), 100);

//  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, 32);
  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 4);
 800157a:	2204      	movs	r2, #4
 800157c:	490a      	ldr	r1, [pc, #40]	; (80015a8 <main+0xcc>)
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <main+0xd0>)
 8001580:	f005 fa51 	bl	8006a26 <HAL_UART_Receive_DMA>
//
//  // ESC testing
//	  double speed = 50;
//	  accelerate(&htim2, speed);
////	  drive_forward(&htim2, speed);
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <main+0xd4>)
 800158a:	f002 f8d9 	bl	8003740 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 800158e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001592:	f001 fa07 	bl	80029a4 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001596:	e7f5      	b.n	8001584 <main+0xa8>
 8001598:	200003fc 	.word	0x200003fc
 800159c:	2000048c 	.word	0x2000048c
 80015a0:	20000444 	.word	0x20000444
 80015a4:	20000350 	.word	0x20000350
 80015a8:	200002dc 	.word	0x200002dc
 80015ac:	200004d4 	.word	0x200004d4
 80015b0:	40011000 	.word	0x40011000

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2228      	movs	r2, #40	; 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 fc86 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	2301      	movs	r3, #1
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ec:	2310      	movs	r3, #16
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 f889 	bl	8004710 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001604:	f000 fb2e 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f003 faf5 	bl	8004c14 <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001630:	f000 fb18 	bl	8001c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001634:	2302      	movs	r3, #2
 8001636:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fc7f 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800164c:	f000 fb0a 	bl	8001c64 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3750      	adds	r7, #80	; 0x50
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_ADC1_Init+0x74>)
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <MX_ADC1_Init+0x78>)
 800166c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_ADC1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_ADC1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_ADC1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_ADC1_Init+0x74>)
 8001682:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_ADC1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_ADC1_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_ADC1_Init+0x74>)
 8001696:	f001 f9a9 	bl	80029ec <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 fae0 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016a4:	2304      	movs	r3, #4
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_ADC1_Init+0x74>)
 80016b6:	f001 fa71 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016c0:	f000 fad0 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000320 	.word	0x20000320
 80016d0:	40012400 	.word	0x40012400

080016d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_I2C2_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <MX_I2C2_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_I2C2_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_I2C2_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_I2C2_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_I2C2_Init+0x50>)
 80016ec:	22d2      	movs	r2, #210	; 0xd2
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_I2C2_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_I2C2_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_I2C2_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_I2C2_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_I2C2_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_I2C2_Init+0x50>)
 8001712:	f002 f82f 	bl	8003774 <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800171c:	f000 faa2 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000350 	.word	0x20000350
 8001728:	40005800 	.word	0x40005800
 800172c:	00061a80 	.word	0x00061a80

08001730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_SPI2_Init+0x64>)
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <MX_SPI2_Init+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI2_Init+0x64>)
 800173c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI2_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_SPI2_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI2_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI2_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI2_Init+0x64>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI2_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_SPI2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI2_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_SPI2_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI2_Init+0x64>)
 800177c:	220a      	movs	r2, #10
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_SPI2_Init+0x64>)
 8001782:	f003 fc95 	bl	80050b0 <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800178c:	f000 fa6a 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200003a4 	.word	0x200003a4
 8001798:	40003800 	.word	0x40003800

0800179c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2224      	movs	r2, #36	; 0x24
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fb92 	bl	8006ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017ba:	4a23      	ldr	r2, [pc, #140]	; (8001848 <MX_TIM1_Init+0xac>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <MX_TIM1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017fc:	2301      	movs	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_TIM1_Init+0xa8>)
 8001810:	f003 ffc4 	bl	800579c <HAL_TIM_Encoder_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800181a:	f000 fa23 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_TIM1_Init+0xa8>)
 800182c:	f005 f83e 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001836:	f000 fa15 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003fc 	.word	0x200003fc
 8001848:	40012c00 	.word	0x40012c00

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <MX_TIM2_Init+0x100>)
 800187e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <MX_TIM2_Init+0x100>)
 8001886:	2203      	movs	r2, #3
 8001888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <MX_TIM2_Init+0x100>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_TIM2_Init+0x100>)
 8001892:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <MX_TIM2_Init+0x100>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_TIM2_Init+0x100>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a4:	4829      	ldr	r0, [pc, #164]	; (800194c <MX_TIM2_Init+0x100>)
 80018a6:	f003 fc87 	bl	80051b8 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018b0:	f000 f9d8 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	4619      	mov	r1, r3
 80018c0:	4822      	ldr	r0, [pc, #136]	; (800194c <MX_TIM2_Init+0x100>)
 80018c2:	f004 fb15 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018cc:	f000 f9ca 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d0:	481e      	ldr	r0, [pc, #120]	; (800194c <MX_TIM2_Init+0x100>)
 80018d2:	f003 fd0b 	bl	80052ec <HAL_TIM_PWM_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018dc:	f000 f9c2 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4619      	mov	r1, r3
 80018ee:	4817      	ldr	r0, [pc, #92]	; (800194c <MX_TIM2_Init+0x100>)
 80018f0:	f004 ffdc 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018fa:	f000 f9b3 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8001902:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM2_Init+0x100>)
 8001918:	f004 fa2c 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001922:	f000 f99f 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_TIM2_Init+0x100>)
 800192e:	f004 fa21 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001938:	f000 f994 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <MX_TIM2_Init+0x100>)
 800193e:	f000 fb63 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8001942:	bf00      	nop
 8001944:	3738      	adds	r7, #56	; 0x38
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000444 	.word	0x20000444

08001950 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <MX_TIM3_Init+0xf0>)
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <MX_TIM3_Init+0xf4>)
 800197e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <MX_TIM3_Init+0xf0>)
 8001982:	2207      	movs	r2, #7
 8001984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <MX_TIM3_Init+0xf0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <MX_TIM3_Init+0xf0>)
 800198e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <MX_TIM3_Init+0xf0>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <MX_TIM3_Init+0xf0>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a0:	4827      	ldr	r0, [pc, #156]	; (8001a40 <MX_TIM3_Init+0xf0>)
 80019a2:	f003 fc09 	bl	80051b8 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80019ac:	f000 f95a 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4820      	ldr	r0, [pc, #128]	; (8001a40 <MX_TIM3_Init+0xf0>)
 80019be:	f004 fa97 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019c8:	f000 f94c 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019cc:	481c      	ldr	r0, [pc, #112]	; (8001a40 <MX_TIM3_Init+0xf0>)
 80019ce:	f003 fd87 	bl	80054e0 <HAL_TIM_IC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019d8:	f000 f944 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <MX_TIM3_Init+0xf0>)
 80019ec:	f004 ff5e 	bl	80068ac <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80019f6:	f000 f935 	bl	8001c64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019fe:	2301      	movs	r3, #1
 8001a00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <MX_TIM3_Init+0xf0>)
 8001a12:	f004 f91b 	bl	8005c4c <HAL_TIM_IC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001a1c:	f000 f922 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	2208      	movs	r2, #8
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM3_Init+0xf0>)
 8001a28:	f004 f910 	bl	8005c4c <HAL_TIM_IC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001a32:	f000 f917 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000048c 	.word	0x2000048c
 8001a44:	40000400 	.word	0x40000400

08001a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f004 ff84 	bl	800698c <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f8eb 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200004d4 	.word	0x200004d4
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_DMA_Init+0x38>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <MX_DMA_Init+0x38>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_DMA_Init+0x38>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2010      	movs	r0, #16
 8001ac0:	f001 fa7d 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f001 fa96 	bl	8002ff6 <HAL_NVIC_EnableIRQ>

}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b04:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <MX_GPIO_Init+0x174>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b52:	483f      	ldr	r0, [pc, #252]	; (8001c50 <MX_GPIO_Init+0x178>)
 8001b54:	f001 fddc 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	483d      	ldr	r0, [pc, #244]	; (8001c54 <MX_GPIO_Init+0x17c>)
 8001b5e:	f001 fdd7 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2158      	movs	r1, #88	; 0x58
 8001b66:	483c      	ldr	r0, [pc, #240]	; (8001c58 <MX_GPIO_Init+0x180>)
 8001b68:	f001 fdd2 	bl	8003710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4832      	ldr	r0, [pc, #200]	; (8001c50 <MX_GPIO_Init+0x178>)
 8001b86:	f001 fc3f 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	482d      	ldr	r0, [pc, #180]	; (8001c54 <MX_GPIO_Init+0x17c>)
 8001b9e:	f001 fc33 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4826      	ldr	r0, [pc, #152]	; (8001c54 <MX_GPIO_Init+0x17c>)
 8001bba:	f001 fc25 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4821      	ldr	r0, [pc, #132]	; (8001c58 <MX_GPIO_Init+0x180>)
 8001bd2:	f001 fc19 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8001bd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <MX_GPIO_Init+0x184>)
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	481a      	ldr	r0, [pc, #104]	; (8001c54 <MX_GPIO_Init+0x17c>)
 8001bec:	f001 fc0c 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8001bf0:	2358      	movs	r3, #88	; 0x58
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_GPIO_Init+0x180>)
 8001c08:	f001 fbfe 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ESP_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_ESP_SDA_Pin;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	2312      	movs	r3, #18
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_ESP_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_GPIO_Init+0x180>)
 8001c22:	f001 fbf1 	bl	8003408 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_GPIO_Init+0x188>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <MX_GPIO_Init+0x188>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	6053      	str	r3, [r2, #4]

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40010000 	.word	0x40010000

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_MspInit+0x5c>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_MspInit+0x60>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_MspInit+0x60>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000

08001cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_ADC_MspInit+0x6c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d121      	bne.n	8001d38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8001d24:	2310      	movs	r3, #16
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_ADC_MspInit+0x74>)
 8001d34:	f001 fb68 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40012400 	.word	0x40012400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_I2C_MspInit+0x74>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d124      	bne.n	8001db6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8001d84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8a:	2312      	movs	r3, #18
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <HAL_I2C_MspInit+0x7c>)
 8001d9a:	f001 fb35 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_I2C_MspInit+0x78>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40005800 	.word	0x40005800
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_SPI_MspInit+0x8c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d131      	bne.n	8001e50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	61d3      	str	r3, [r2, #28]
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_SPI_MspInit+0x90>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <HAL_SPI_MspInit+0x94>)
 8001e32:	f001 fae9 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_SPI_MspInit+0x94>)
 8001e4c:	f001 fadc 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40003800 	.word	0x40003800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010c00 	.word	0x40010c00

08001e64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d144      	bne.n	8001f0e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|RIGHT_ENCODER_A_Pin;
 8001eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4815      	ldr	r0, [pc, #84]	; (8001f20 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001eca:	f001 fa9d 	bl	8003408 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2018      	movs	r0, #24
 8001ed4:	f001 f873 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ed8:	2018      	movs	r0, #24
 8001eda:	f001 f88c 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2019      	movs	r0, #25
 8001ee4:	f001 f86b 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ee8:	2019      	movs	r0, #25
 8001eea:	f001 f884 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	201a      	movs	r0, #26
 8001ef4:	f001 f863 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ef8:	201a      	movs	r0, #26
 8001efa:	f001 f87c 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	201b      	movs	r0, #27
 8001f04:	f001 f85b 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f08:	201b      	movs	r0, #27
 8001f0a:	f001 f874 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010800 	.word	0x40010800

08001f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d10c      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f5c:	e048      	b.n	8001ff0 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_TIM_Base_MspInit+0xd8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d143      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	61d3      	str	r3, [r2, #28]
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480f      	ldr	r0, [pc, #60]	; (8002000 <HAL_TIM_Base_MspInit+0xdc>)
 8001fc4:	f001 fa20 	bl	8003408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480a      	ldr	r0, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0xe0>)
 8001fdc:	f001 fa14 	bl	8003408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	201d      	movs	r0, #29
 8001fe6:	f000 ffea 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fea:	201d      	movs	r0, #29
 8001fec:	f001 f803 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00

08002008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d117      	bne.n	8002058 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_TIM_MspPostInit+0x58>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_TIM_MspPostInit+0x58>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_TIM_MspPostInit+0x58>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8002040:	2303      	movs	r3, #3
 8002042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <HAL_TIM_MspPostInit+0x5c>)
 8002054:	f001 f9d8 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	; (800213c <HAL_UART_MspInit+0xd4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d155      	bne.n	8002134 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_UART_MspInit+0xd8>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <HAL_UART_MspInit+0xd8>)
 800208e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_UART_MspInit+0xd8>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_UART_MspInit+0xd8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_UART_MspInit+0xd8>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_UART_MspInit+0xd8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	481e      	ldr	r0, [pc, #120]	; (8002144 <HAL_UART_MspInit+0xdc>)
 80020cc:	f001 f99c 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d0:	2308      	movs	r3, #8
 80020d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4619      	mov	r1, r3
 80020e2:	4818      	ldr	r0, [pc, #96]	; (8002144 <HAL_UART_MspInit+0xdc>)
 80020e4:	f001 f990 	bl	8003408 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_UART_MspInit+0xe4>)
 80020ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_UART_MspInit+0xe0>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <HAL_UART_MspInit+0xe0>)
 800211a:	f000 ff87 	bl	800302c <HAL_DMA_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002124:	f7ff fd9e 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_UART_MspInit+0xe0>)
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002134:	bf00      	nop
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40004400 	.word	0x40004400
 8002140:	40021000 	.word	0x40021000
 8002144:	40010800 	.word	0x40010800
 8002148:	20000518 	.word	0x20000518
 800214c:	4002006c 	.word	0x4002006c

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	0000      	movs	r0, r0
 8002194:	0000      	movs	r0, r0
	...

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <SysTick_Handler+0xe0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	4a35      	ldr	r2, [pc, #212]	; (8002278 <SysTick_Handler+0xe0>)
 80021a4:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <SysTick_Handler+0xe0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021ae:	d159      	bne.n	8002264 <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 80021b0:	4b32      	ldr	r3, [pc, #200]	; (800227c <SysTick_Handler+0xe4>)
 80021b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <SysTick_Handler+0xe8>)
 80021ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f91e 	bl	8000404 <__aeabi_i2d>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	492d      	ldr	r1, [pc, #180]	; (8002284 <SysTick_Handler+0xec>)
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <SysTick_Handler+0xec>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	492b      	ldr	r1, [pc, #172]	; (8002288 <SysTick_Handler+0xf0>)
 80021da:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <SysTick_Handler+0xe4>)
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f90d 	bl	8000404 <__aeabi_i2d>
 80021ea:	a321      	add	r3, pc, #132	; (adr r3, 8002270 <SysTick_Handler+0xd8>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe f972 	bl	80004d8 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4924      	ldr	r1, [pc, #144]	; (800228c <SysTick_Handler+0xf4>)
 80021fa:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <SysTick_Handler+0xe8>)
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f8fd 	bl	8000404 <__aeabi_i2d>
 800220a:	a319      	add	r3, pc, #100	; (adr r3, 8002270 <SysTick_Handler+0xd8>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f7fe f962 	bl	80004d8 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	491d      	ldr	r1, [pc, #116]	; (8002290 <SysTick_Handler+0xf8>)
 800221a:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <SysTick_Handler+0xf4>)
 8002220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <SysTick_Handler+0xf8>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fd ff9d 	bl	8000168 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	f7fd ff97 	bl	800016c <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4914      	ldr	r1, [pc, #80]	; (8002294 <SysTick_Handler+0xfc>)
 8002244:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <SysTick_Handler+0xfc>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <SysTick_Handler+0xf0>)
 8002250:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <SysTick_Handler+0xe4>)
 8002256:	f9b3 2000 	ldrsh.w	r2, [r3]
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <SysTick_Handler+0xe8>)
 800225c:	801a      	strh	r2, [r3, #0]
		indx = 0;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SysTick_Handler+0xe0>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 fb82 	bl	800296c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f3af 8000 	nop.w
 8002270:	05f68f13 	.word	0x05f68f13
 8002274:	3fdc5115 	.word	0x3fdc5115
 8002278:	20000584 	.word	0x20000584
 800227c:	20000562 	.word	0x20000562
 8002280:	20000580 	.word	0x20000580
 8002284:	20000568 	.word	0x20000568
 8002288:	20000048 	.word	0x20000048
 800228c:	20000588 	.word	0x20000588
 8002290:	20000590 	.word	0x20000590
 8002294:	20000570 	.word	0x20000570

08002298 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel6_IRQHandler+0x10>)
 800229e:	f000 ff7f 	bl	80031a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000518 	.word	0x20000518

080022ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_BRK_IRQHandler+0x10>)
 80022b2:	f003 fbc3 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200003fc 	.word	0x200003fc

080022c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM1_UP_IRQHandler+0x10>)
 80022c6:	f003 fbb9 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200003fc 	.word	0x200003fc

080022d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022da:	f003 fbaf 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200003fc 	.word	0x200003fc

080022e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM1_CC_IRQHandler+0x10>)
 80022ee:	f003 fba5 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200003fc 	.word	0x200003fc

080022fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM3_IRQHandler+0x10>)
 8002302:	f003 fb9b 	bl	8005a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000048c 	.word	0x2000048c

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <_kill>:

int _kill(int pid, int sig)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002328:	f004 fdaa 	bl	8006e80 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	2216      	movs	r2, #22
 8002330:	601a      	str	r2, [r3, #0]
	return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_exit>:

void _exit (int status)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002346:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffe7 	bl	800231e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002350:	e7fe      	b.n	8002350 <_exit+0x12>

08002352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e00a      	b.n	800237a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002364:	f3af 8000 	nop.w
 8002368:	4601      	mov	r1, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	60ba      	str	r2, [r7, #8]
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	dbf0      	blt.n	8002364 <_read+0x12>
	}

return len;
 8002382:	687b      	ldr	r3, [r7, #4]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_close>:
	}
	return len;
}

int _close(int file)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b2:	605a      	str	r2, [r3, #4]
	return 0;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <_isatty>:

int _isatty(int file)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	return 1;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f004 fd30 	bl	8006e80 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20005000 	.word	0x20005000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000598 	.word	0x20000598
 8002454:	200005b0 	.word	0x200005b0

08002458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	0000      	movs	r0, r0
	...

08002468 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a86      	ldr	r2, [pc, #536]	; (8002690 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d147      	bne.n	800250a <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800247c:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	4a84      	ldr	r2, [pc, #528]	; (8002698 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002486:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8002488:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_TIM_IC_CaptureCallback+0x230>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b21a      	sxth	r2, r3
 8002496:	4b81      	ldr	r3, [pc, #516]	; (800269c <HAL_TIM_IC_CaptureCallback+0x234>)
 8002498:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 800249a:	4b80      	ldr	r3, [pc, #512]	; (800269c <HAL_TIM_IC_CaptureCallback+0x234>)
 800249c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 80024a4:	4b7d      	ldr	r3, [pc, #500]	; (800269c <HAL_TIM_IC_CaptureCallback+0x234>)
 80024a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da00      	bge.n	80024b0 <HAL_TIM_IC_CaptureCallback+0x48>
 80024ae:	3303      	adds	r3, #3
 80024b0:	109b      	asrs	r3, r3, #2
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80024b6:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 80024b8:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80024ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024c8:	a36f      	add	r3, pc, #444	; (adr r3, 8002688 <HAL_TIM_IC_CaptureCallback+0x220>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fe f803 	bl	80004d8 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4614      	mov	r4, r2
 80024d8:	461d      	mov	r5, r3
 80024da:	4b71      	ldr	r3, [pc, #452]	; (80026a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80024dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ff8f 	bl	8000404 <__aeabi_i2d>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	f7fd fff3 	bl	80004d8 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	496b      	ldr	r1, [pc, #428]	; (80026a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80024f8:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 80024fc:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 8002508:	e17c      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f040 8177 	bne.w	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7f1b      	ldrb	r3, [r3, #28]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d102      	bne.n	8002524 <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 800251e:	4b63      	ldr	r3, [pc, #396]	; (80026ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e005      	b.n	8002530 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7f1b      	ldrb	r3, [r3, #28]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d101      	bne.n	8002530 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 800252c:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800252e:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d171      	bne.n	800261e <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f003 fd99 	bl	8006078 <HAL_TIM_ReadCapturedValue>
 8002546:	4603      	mov	r3, r0
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd ff4b 	bl	80003e4 <__aeabi_ui2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	69f9      	ldr	r1, [r7, #28]
 8002554:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <HAL_TIM_IC_CaptureCallback+0x112>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020a 	bic.w	r2, r2, #10
 8002576:	621a      	str	r2, [r3, #32]
 8002578:	e021      	b.n	80025be <HAL_TIM_IC_CaptureCallback+0x156>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b04      	cmp	r3, #4
 8002580:	d108      	bne.n	8002594 <HAL_TIM_IC_CaptureCallback+0x12c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	e014      	b.n	80025be <HAL_TIM_IC_CaptureCallback+0x156>
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d108      	bne.n	80025ae <HAL_TIM_IC_CaptureCallback+0x146>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e007      	b.n	80025be <HAL_TIM_IC_CaptureCallback+0x156>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_TIM_IC_CaptureCallback+0x170>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0202 	orr.w	r2, r2, #2
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	e115      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d108      	bne.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x18a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f043 0320 	orr.w	r3, r3, #32
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	e108      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d108      	bne.n	800260c <HAL_TIM_IC_CaptureCallback+0x1a4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e0fb      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800261a:	6213      	str	r3, [r2, #32]
}
 800261c:	e0f2      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 80ed 	bne.w	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f003 fd21 	bl	8006078 <HAL_TIM_ReadCapturedValue>
 8002636:	4603      	mov	r3, r0
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fed3 	bl	80003e4 <__aeabi_ui2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	69f9      	ldr	r1, [r7, #28]
 8002644:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800265c:	f7fe f9cc 	bl	80009f8 <__aeabi_dcmpgt>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d026      	beq.n	80026b4 <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002672:	f7fd fd79 	bl	8000168 <__aeabi_dsub>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	69f9      	ldr	r1, [r7, #28]
 800267c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002680:	e039      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0x28e>
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	c083126f 	.word	0xc083126f
 800268c:	401921ca 	.word	0x401921ca
 8002690:	40012c00 	.word	0x40012c00
 8002694:	20000048 	.word	0x20000048
 8002698:	2000055c 	.word	0x2000055c
 800269c:	20000560 	.word	0x20000560
 80026a0:	20000562 	.word	0x20000562
 80026a4:	20000578 	.word	0x20000578
 80026a8:	40000400 	.word	0x40000400
 80026ac:	20000078 	.word	0x20000078
 80026b0:	200000b0 	.word	0x200000b0
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026c0:	f7fe f99a 	bl	80009f8 <__aeabi_dcmpgt>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026d0:	a14f      	add	r1, pc, #316	; (adr r1, 8002810 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 80026d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026d6:	f7fd fd47 	bl	8000168 <__aeabi_dsub>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026e8:	f7fd fd40 	bl	800016c <__adddf3>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	69f9      	ldr	r1, [r7, #28]
 80026f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80026fc:	a346      	add	r3, pc, #280	; (adr r3, 8002818 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd fee9 	bl	80004d8 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002716:	f7fe f809 	bl	800072c <__aeabi_ddiv>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800272c:	f000 f878 	bl	8002820 <filter>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	69f9      	ldr	r1, [r7, #28]
 8002736:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <HAL_TIM_IC_CaptureCallback+0x2f4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020a 	bic.w	r2, r2, #10
 8002758:	621a      	str	r2, [r3, #32]
 800275a:	e021      	b.n	80027a0 <HAL_TIM_IC_CaptureCallback+0x338>
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d108      	bne.n	8002776 <HAL_TIM_IC_CaptureCallback+0x30e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	e014      	b.n	80027a0 <HAL_TIM_IC_CaptureCallback+0x338>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b08      	cmp	r3, #8
 800277c:	d108      	bne.n	8002790 <HAL_TIM_IC_CaptureCallback+0x328>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	e007      	b.n	80027a0 <HAL_TIM_IC_CaptureCallback+0x338>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <HAL_TIM_IC_CaptureCallback+0x34e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a12      	ldr	r2, [r2, #32]
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	e01b      	b.n	80027ee <HAL_TIM_IC_CaptureCallback+0x386>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_IC_CaptureCallback+0x364>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e010      	b.n	80027ee <HAL_TIM_IC_CaptureCallback+0x386>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d106      	bne.n	80027e2 <HAL_TIM_IC_CaptureCallback+0x37a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IC_CaptureCallback+0x386>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
}
 8002802:	e7ff      	b.n	8002804 <HAL_TIM_IC_CaptureCallback+0x39c>
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	f3af 8000 	nop.w
 8002810:	00000000 	.word	0x00000000
 8002814:	40efffe0 	.word	0x40efffe0
 8002818:	b020c49c 	.word	0xb020c49c
 800281c:	3fa16872 	.word	0x3fa16872

08002820 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800282a:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 800282e:	a116      	add	r1, pc, #88	; (adr r1, 8002888 <filter+0x68>)
 8002830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002838:	f7fd fe4e 	bl	80004d8 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	a310      	add	r3, pc, #64	; (adr r3, 8002888 <filter+0x68>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f04f 0000 	mov.w	r0, #0
 800284e:	4910      	ldr	r1, [pc, #64]	; (8002890 <filter+0x70>)
 8002850:	f7fd fc8a 	bl	8000168 <__aeabi_dsub>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002860:	f7fd fe3a 	bl	80004d8 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fc7e 	bl	800016c <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8002878:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bdb0      	pop	{r4, r5, r7, pc}
 8002886:	bf00      	nop
 8002888:	47ae147b 	.word	0x47ae147b
 800288c:	3f847ae1 	.word	0x3f847ae1
 8002890:	3ff00000 	.word	0x3ff00000

08002894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002894:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002896:	e003      	b.n	80028a0 <LoopCopyDataInit>

08002898 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800289a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800289c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800289e:	3104      	adds	r1, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028a8:	d3f6      	bcc.n	8002898 <CopyDataInit>
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028ac:	e002      	b.n	80028b4 <LoopFillZerobss>

080028ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028b0:	f842 3b04 	str.w	r3, [r2], #4

080028b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028b8:	d3f9      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028ba:	f7ff fdcd 	bl	8002458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f004 fae5 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028c2:	f7fe fe0b 	bl	80014dc <main>
  bx lr
 80028c6:	4770      	bx	lr
  ldr r3, =_sidata
 80028c8:	08009e54 	.word	0x08009e54
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028d0:	200002c0 	.word	0x200002c0
  ldr r2, =_sbss
 80028d4:	200002c0 	.word	0x200002c0
  ldr r3, = _ebss
 80028d8:	200005b0 	.word	0x200005b0

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_Init+0x28>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_Init+0x28>)
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f000 fb59 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f808 	bl	800290c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028fc:	f7ff f9b8 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_InitTick+0x54>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x58>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002922:	fbb3 f3f1 	udiv	r3, r3, r1
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fb71 	bl	8003012 <HAL_SYSTICK_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00e      	b.n	8002958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d80a      	bhi.n	8002956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002940:	2200      	movs	r2, #0
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002948:	f000 fb39 	bl	8002fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <HAL_InitTick+0x5c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000070 	.word	0x20000070
 8002964:	200000ec 	.word	0x200000ec
 8002968:	200000e8 	.word	0x200000e8

0800296c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_IncTick+0x1c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_IncTick+0x20>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_IncTick+0x20>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	200000ec 	.word	0x200000ec
 800298c:	2000059c 	.word	0x2000059c

08002990 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return uwTick;
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <HAL_GetTick+0x10>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	2000059c 	.word	0x2000059c

080029a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fff0 	bl	8002990 <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029bc:	d005      	beq.n	80029ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_Delay+0x44>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ca:	bf00      	nop
 80029cc:	f7ff ffe0 	bl	8002990 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d8f7      	bhi.n	80029cc <HAL_Delay+0x28>
  {
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200000ec 	.word	0x200000ec

080029ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0be      	b.n	8002b8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff f952 	bl	8001cd4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f9ab 	bl	8002d8c <ADC_ConversionStop_Disable>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 8099 	bne.w	8002b7a <HAL_ADC_Init+0x18e>
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8095 	bne.w	8002b7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a58:	f023 0302 	bic.w	r3, r3, #2
 8002a5c:	f043 0202 	orr.w	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7b1b      	ldrb	r3, [r3, #12]
 8002a72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a84:	d003      	beq.n	8002a8e <HAL_ADC_Init+0xa2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_ADC_Init+0xa8>
 8002a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_Init+0xaa>
 8002a94:	2300      	movs	r3, #0
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7d1b      	ldrb	r3, [r3, #20]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d119      	bne.n	8002ad8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7b1b      	ldrb	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	035a      	lsls	r2, r3, #13
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	e00b      	b.n	8002ad8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_ADC_Init+0x1a8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b08:	d003      	beq.n	8002b12 <HAL_ADC_Init+0x126>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d104      	bne.n	8002b1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051b      	lsls	r3, r3, #20
 8002b1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_ADC_Init+0x1ac>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10b      	bne.n	8002b58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b56:	e018      	b.n	8002b8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f023 0312 	bic.w	r3, r3, #18
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b78:	e007      	b.n	8002b8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	ffe1f7fd 	.word	0xffe1f7fd
 8002b98:	ff1f0efe 	.word	0xff1f0efe

08002b9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x20>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e0dc      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x1da>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d81c      	bhi.n	8002c06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b05      	subs	r3, #5
 8002bde:	221f      	movs	r2, #31
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b05      	subs	r3, #5
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
 8002c04:	e03c      	b.n	8002c80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d81c      	bhi.n	8002c48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b23      	subs	r3, #35	; 0x23
 8002c20:	221f      	movs	r2, #31
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4019      	ands	r1, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b23      	subs	r3, #35	; 0x23
 8002c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
 8002c46:	e01b      	b.n	8002c80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	3b41      	subs	r3, #65	; 0x41
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4019      	ands	r1, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3b41      	subs	r3, #65	; 0x41
 8002c74:	fa00 f203 	lsl.w	r2, r0, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b09      	cmp	r3, #9
 8002c86:	d91c      	bls.n	8002cc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68d9      	ldr	r1, [r3, #12]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	3b1e      	subs	r3, #30
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4019      	ands	r1, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6898      	ldr	r0, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b1e      	subs	r3, #30
 8002cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e019      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6919      	ldr	r1, [r3, #16]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	4019      	ands	r1, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6898      	ldr	r0, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	fa00 f203 	lsl.w	r2, r0, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d003      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d02:	2b11      	cmp	r3, #17
 8002d04:	d132      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d125      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d126      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d11a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	0c9a      	lsrs	r2, r3, #18
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x1b2>
 8002d5a:	e007      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40012400 	.word	0x40012400
 8002d84:	20000070 	.word	0x20000070
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d12e      	bne.n	8002e04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002db6:	f7ff fdeb 	bl	8002990 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dbc:	e01b      	b.n	8002df6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dbe:	f7ff fde7 	bl	8002990 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d914      	bls.n	8002df6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10d      	bne.n	8002df6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e007      	b.n	8002e06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d0dc      	beq.n	8002dbe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <__NVIC_SetPriorityGrouping>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <__NVIC_EnableIRQ+0x34>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	; (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <SysTick_Config>:
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f88:	f7ff ff90 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff2d 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff42 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff90 	bl	8002f00 <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff5f 	bl	8002eac <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff35 	bl	8002e74 <__NVIC_EnableIRQ>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffa2 	bl	8002f64 <SysTick_Config>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e043      	b.n	80030ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_DMA_Init+0xa8>)
 800304a:	4413      	add	r3, r2
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_DMA_Init+0xac>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMA_Init+0xb0>)
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003076:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800307a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	bffdfff8 	.word	0xbffdfff8
 80030d8:	cccccccd 	.word	0xcccccccd
 80030dc:	40020000 	.word	0x40020000

080030e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Start_IT+0x20>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e04a      	b.n	8003196 <HAL_DMA_Start_IT+0xb6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800310e:	2b01      	cmp	r3, #1
 8003110:	d13a      	bne.n	8003188 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f938 	bl	80033ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 020e 	orr.w	r2, r2, #14
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e00f      	b.n	8003176 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 020a 	orr.w	r2, r2, #10
 8003174:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e005      	b.n	8003194 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2204      	movs	r2, #4
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d04f      	beq.n	8003268 <HAL_DMA_IRQHandler+0xc8>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a66      	ldr	r2, [pc, #408]	; (8003390 <HAL_DMA_IRQHandler+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d029      	beq.n	800324e <HAL_DMA_IRQHandler+0xae>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a65      	ldr	r2, [pc, #404]	; (8003394 <HAL_DMA_IRQHandler+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <HAL_DMA_IRQHandler+0xaa>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_DMA_IRQHandler+0x1f8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01a      	beq.n	8003244 <HAL_DMA_IRQHandler+0xa4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a62      	ldr	r2, [pc, #392]	; (800339c <HAL_DMA_IRQHandler+0x1fc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d012      	beq.n	800323e <HAL_DMA_IRQHandler+0x9e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_DMA_IRQHandler+0x200>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x98>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_DMA_IRQHandler+0x204>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d102      	bne.n	8003232 <HAL_DMA_IRQHandler+0x92>
 800322c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003230:	e00e      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 8003232:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003236:	e00b      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 8003238:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800323c:	e008      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 800323e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003242:	e005      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 8003244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003248:	e002      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 800324a:	2340      	movs	r3, #64	; 0x40
 800324c:	e000      	b.n	8003250 <HAL_DMA_IRQHandler+0xb0>
 800324e:	2304      	movs	r3, #4
 8003250:	4a55      	ldr	r2, [pc, #340]	; (80033a8 <HAL_DMA_IRQHandler+0x208>)
 8003252:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8094 	beq.w	8003386 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003266:	e08e      	b.n	8003386 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2202      	movs	r2, #2
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d056      	beq.n	8003326 <HAL_DMA_IRQHandler+0x186>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d051      	beq.n	8003326 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020a 	bic.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a38      	ldr	r2, [pc, #224]	; (8003390 <HAL_DMA_IRQHandler+0x1f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d029      	beq.n	8003306 <HAL_DMA_IRQHandler+0x166>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a37      	ldr	r2, [pc, #220]	; (8003394 <HAL_DMA_IRQHandler+0x1f4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMA_IRQHandler+0x162>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <HAL_DMA_IRQHandler+0x1f8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01a      	beq.n	80032fc <HAL_DMA_IRQHandler+0x15c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <HAL_DMA_IRQHandler+0x1fc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d012      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x156>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_DMA_IRQHandler+0x200>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x150>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_DMA_IRQHandler+0x204>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d102      	bne.n	80032ea <HAL_DMA_IRQHandler+0x14a>
 80032e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032e8:	e00e      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 80032ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ee:	e00b      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 80032f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f4:	e008      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 80032f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032fa:	e005      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 80032fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003300:	e002      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 8003302:	2320      	movs	r3, #32
 8003304:	e000      	b.n	8003308 <HAL_DMA_IRQHandler+0x168>
 8003306:	2302      	movs	r3, #2
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_DMA_IRQHandler+0x208>)
 800330a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d034      	beq.n	8003386 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003324:	e02f      	b.n	8003386 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2208      	movs	r2, #8
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d028      	beq.n	8003388 <HAL_DMA_IRQHandler+0x1e8>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020e 	bic.w	r2, r2, #14
 800334e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
    }
  }
  return;
 8003386:	bf00      	nop
 8003388:	bf00      	nop
}
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020008 	.word	0x40020008
 8003394:	4002001c 	.word	0x4002001c
 8003398:	40020030 	.word	0x40020030
 800339c:	40020044 	.word	0x40020044
 80033a0:	40020058 	.word	0x40020058
 80033a4:	4002006c 	.word	0x4002006c
 80033a8:	40020000 	.word	0x40020000

080033ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d108      	bne.n	80033ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ea:	e007      	b.n	80033fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b08b      	sub	sp, #44	; 0x2c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341a:	e169      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800341c:	2201      	movs	r2, #1
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8158 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4a9a      	ldr	r2, [pc, #616]	; (80036a8 <HAL_GPIO_Init+0x2a0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d05e      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003444:	4a98      	ldr	r2, [pc, #608]	; (80036a8 <HAL_GPIO_Init+0x2a0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d875      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800344a:	4a98      	ldr	r2, [pc, #608]	; (80036ac <HAL_GPIO_Init+0x2a4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d058      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003450:	4a96      	ldr	r2, [pc, #600]	; (80036ac <HAL_GPIO_Init+0x2a4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d86f      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003456:	4a96      	ldr	r2, [pc, #600]	; (80036b0 <HAL_GPIO_Init+0x2a8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d052      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 800345c:	4a94      	ldr	r2, [pc, #592]	; (80036b0 <HAL_GPIO_Init+0x2a8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d869      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003462:	4a94      	ldr	r2, [pc, #592]	; (80036b4 <HAL_GPIO_Init+0x2ac>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04c      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003468:	4a92      	ldr	r2, [pc, #584]	; (80036b4 <HAL_GPIO_Init+0x2ac>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d863      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800346e:	4a92      	ldr	r2, [pc, #584]	; (80036b8 <HAL_GPIO_Init+0x2b0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d046      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
 8003474:	4a90      	ldr	r2, [pc, #576]	; (80036b8 <HAL_GPIO_Init+0x2b0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d85d      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 800347a:	2b12      	cmp	r3, #18
 800347c:	d82a      	bhi.n	80034d4 <HAL_GPIO_Init+0xcc>
 800347e:	2b12      	cmp	r3, #18
 8003480:	d859      	bhi.n	8003536 <HAL_GPIO_Init+0x12e>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <HAL_GPIO_Init+0x80>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003503 	.word	0x08003503
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034ef 	.word	0x080034ef
 8003494:	08003531 	.word	0x08003531
 8003498:	08003537 	.word	0x08003537
 800349c:	08003537 	.word	0x08003537
 80034a0:	08003537 	.word	0x08003537
 80034a4:	08003537 	.word	0x08003537
 80034a8:	08003537 	.word	0x08003537
 80034ac:	08003537 	.word	0x08003537
 80034b0:	08003537 	.word	0x08003537
 80034b4:	08003537 	.word	0x08003537
 80034b8:	08003537 	.word	0x08003537
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003537 	.word	0x08003537
 80034c4:	08003537 	.word	0x08003537
 80034c8:	08003537 	.word	0x08003537
 80034cc:	080034e5 	.word	0x080034e5
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_GPIO_Init+0x2b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034da:	e02c      	b.n	8003536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e029      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	623b      	str	r3, [r7, #32]
          break;
 80034ec:	e024      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	3308      	adds	r3, #8
 80034f4:	623b      	str	r3, [r7, #32]
          break;
 80034f6:	e01f      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	330c      	adds	r3, #12
 80034fe:	623b      	str	r3, [r7, #32]
          break;
 8003500:	e01a      	b.n	8003538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800350a:	2304      	movs	r3, #4
 800350c:	623b      	str	r3, [r7, #32]
          break;
 800350e:	e013      	b.n	8003538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003518:	2308      	movs	r3, #8
 800351a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	611a      	str	r2, [r3, #16]
          break;
 8003522:	e009      	b.n	8003538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003524:	2308      	movs	r3, #8
 8003526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	615a      	str	r2, [r3, #20]
          break;
 800352e:	e003      	b.n	8003538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e000      	b.n	8003538 <HAL_GPIO_Init+0x130>
          break;
 8003536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2bff      	cmp	r3, #255	; 0xff
 800353c:	d801      	bhi.n	8003542 <HAL_GPIO_Init+0x13a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	e001      	b.n	8003546 <HAL_GPIO_Init+0x13e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2bff      	cmp	r3, #255	; 0xff
 800354c:	d802      	bhi.n	8003554 <HAL_GPIO_Init+0x14c>
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	e002      	b.n	800355a <HAL_GPIO_Init+0x152>
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	3b08      	subs	r3, #8
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	210f      	movs	r1, #15
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	6a39      	ldr	r1, [r7, #32]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	431a      	orrs	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80b1 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_GPIO_Init+0x2b8>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a4c      	ldr	r2, [pc, #304]	; (80036c0 <HAL_GPIO_Init+0x2b8>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_GPIO_Init+0x2b8>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035a0:	4a48      	ldr	r2, [pc, #288]	; (80036c4 <HAL_GPIO_Init+0x2bc>)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <HAL_GPIO_Init+0x2c0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_GPIO_Init+0x1ec>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <HAL_GPIO_Init+0x2c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00d      	beq.n	80035f0 <HAL_GPIO_Init+0x1e8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3e      	ldr	r2, [pc, #248]	; (80036d0 <HAL_GPIO_Init+0x2c8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <HAL_GPIO_Init+0x1e4>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <HAL_GPIO_Init+0x2cc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_GPIO_Init+0x1e0>
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e004      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e002      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_GPIO_Init+0x1ee>
 80035f4:	2300      	movs	r3, #0
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	f002 0203 	and.w	r2, r2, #3
 80035fc:	0092      	lsls	r2, r2, #2
 80035fe:	4093      	lsls	r3, r2
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003606:	492f      	ldr	r1, [pc, #188]	; (80036c4 <HAL_GPIO_Init+0x2bc>)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	3302      	adds	r3, #2
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	492c      	ldr	r1, [pc, #176]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	43db      	mvns	r3, r3
 8003636:	4928      	ldr	r1, [pc, #160]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003638:	4013      	ands	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003648:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4922      	ldr	r1, [pc, #136]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	43db      	mvns	r3, r3
 800365e:	491e      	ldr	r1, [pc, #120]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003660:	4013      	ands	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	4918      	ldr	r1, [pc, #96]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	43db      	mvns	r3, r3
 8003686:	4914      	ldr	r1, [pc, #80]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 8003688:	4013      	ands	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d021      	beq.n	80036dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_GPIO_Init+0x2d0>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60cb      	str	r3, [r1, #12]
 80036a4:	e021      	b.n	80036ea <HAL_GPIO_Init+0x2e2>
 80036a6:	bf00      	nop
 80036a8:	10320000 	.word	0x10320000
 80036ac:	10310000 	.word	0x10310000
 80036b0:	10220000 	.word	0x10220000
 80036b4:	10210000 	.word	0x10210000
 80036b8:	10120000 	.word	0x10120000
 80036bc:	10110000 	.word	0x10110000
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010800 	.word	0x40010800
 80036cc:	40010c00 	.word	0x40010c00
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011400 	.word	0x40011400
 80036d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_GPIO_Init+0x304>)
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	4909      	ldr	r1, [pc, #36]	; (800370c <HAL_GPIO_Init+0x304>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f47f ae8e 	bne.w	800341c <HAL_GPIO_Init+0x14>
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	372c      	adds	r7, #44	; 0x2c
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40010400 	.word	0x40010400

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	43d9      	mvns	r1, r3
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	400b      	ands	r3, r1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	611a      	str	r2, [r3, #16]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
	...

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12b      	b.n	80039de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe fad6 	bl	8001d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f001 fb6e 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	; (80039e8 <HAL_I2C_Init+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_I2C_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x92>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <HAL_I2C_Init+0x27c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	; (80039f4 <HAL_I2C_Init+0x280>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_I2C_Init+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xd4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xe8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_I2C_Init+0x284>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	; (80039e8 <HAL_I2C_Init+0x274>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x13c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x138>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x168>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x18e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x196>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	817b      	strh	r3, [r7, #10]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a10:	f7fe ffbe 	bl	8002990 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	f040 80e0 	bne.w	8003be4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2319      	movs	r3, #25
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4970      	ldr	r1, [pc, #448]	; (8003bf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fc92 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0d3      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_I2C_Master_Transmit+0x50>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0cc      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d007      	beq.n	8003a72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2221      	movs	r2, #33	; 0x21
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a50      	ldr	r2, [pc, #320]	; (8003bf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fafc 	bl	80040b8 <I2C_MasterRequestWrite>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e08d      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ae0:	e066      	b.n	8003bb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fd0c 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d107      	bne.n	8003b0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06b      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x188>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d017      	beq.n	8003b84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6a39      	ldr	r1, [r7, #32]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fcfc 	bl	8004586 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d107      	bne.n	8003bac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e01a      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d194      	bne.n	8003ae2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	00100002 	.word	0x00100002
 8003bf4:	ffff0000 	.word	0xffff0000

08003bf8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	; 0x30
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	460b      	mov	r3, r1
 8003c06:	817b      	strh	r3, [r7, #10]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7fe febe 	bl	8002990 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f040 823f 	bne.w	80040a2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2319      	movs	r3, #25
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	497f      	ldr	r1, [pc, #508]	; (8003e2c <HAL_I2C_Master_Receive+0x234>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fb92 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e232      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_Master_Receive+0x54>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e22b      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d007      	beq.n	8003c72 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2222      	movs	r2, #34	; 0x22
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	; (8003e30 <HAL_I2C_Master_Receive+0x238>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fa7e 	bl	80041bc <I2C_MasterRequestRead>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1ec      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d113      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e1c0      	b.n	800407c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d11e      	bne.n	8003d40 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d12:	b672      	cpsid	i
}
 8003d14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d3c:	b662      	cpsie	i
}
 8003d3e:	e035      	b.n	8003dac <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d11e      	bne.n	8003d86 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d58:	b672      	cpsid	i
}
 8003d5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d82:	b662      	cpsie	i
}
 8003d84:	e012      	b.n	8003dac <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dac:	e166      	b.n	800407c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	f200 811f 	bhi.w	8003ff6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d123      	bne.n	8003e08 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc1f 	bl	8004608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e167      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e06:	e139      	b.n	800407c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d152      	bne.n	8003eb6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2200      	movs	r2, #0
 8003e18:	4906      	ldr	r1, [pc, #24]	; (8003e34 <HAL_I2C_Master_Receive+0x23c>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa9c 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e13c      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
 8003e2a:	bf00      	nop
 8003e2c:	00100002 	.word	0x00100002
 8003e30:	ffff0000 	.word	0xffff0000
 8003e34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e38:	b672      	cpsid	i
}
 8003e3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e7e:	b662      	cpsie	i
}
 8003e80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb4:	e0e2      	b.n	800407c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	497b      	ldr	r1, [pc, #492]	; (80040ac <HAL_I2C_Master_Receive+0x4b4>)
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fa49 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0e9      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f16:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <HAL_I2C_Master_Receive+0x4b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_I2C_Master_Receive+0x4bc>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a1a      	lsrs	r2, r3, #8
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00da      	lsls	r2, r3, #3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d118      	bne.n	8003f6e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f5e:	b662      	cpsie	i
}
 8003f60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e09a      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d1d9      	bne.n	8003f30 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fbe:	b662      	cpsie	i
}
 8003fc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff4:	e042      	b.n	800407c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb04 	bl	8004608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e04c      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d118      	bne.n	800407c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	f47f ae94 	bne.w	8003dae <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	00010004 	.word	0x00010004
 80040b0:	20000070 	.word	0x20000070
 80040b4:	14f8b589 	.word	0x14f8b589

080040b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	460b      	mov	r3, r1
 80040c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d006      	beq.n	80040e2 <I2C_MasterRequestWrite+0x2a>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d003      	beq.n	80040e2 <I2C_MasterRequestWrite+0x2a>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e0:	d108      	bne.n	80040f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e00b      	b.n	800410c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	2b12      	cmp	r3, #18
 80040fa:	d107      	bne.n	800410c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f91d 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004132:	d103      	bne.n	800413c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e035      	b.n	80041ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004148:	d108      	bne.n	800415c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004158:	611a      	str	r2, [r3, #16]
 800415a:	e01b      	b.n	8004194 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	11db      	asrs	r3, r3, #7
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f063 030f 	orn	r3, r3, #15
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	490e      	ldr	r1, [pc, #56]	; (80041b4 <I2C_MasterRequestWrite+0xfc>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f943 	bl	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e010      	b.n	80041ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <I2C_MasterRequestWrite+0x100>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f933 	bl	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	00010008 	.word	0x00010008
 80041b8:	00010002 	.word	0x00010002

080041bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	460b      	mov	r3, r1
 80041ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d006      	beq.n	80041f6 <I2C_MasterRequestRead+0x3a>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d003      	beq.n	80041f6 <I2C_MasterRequestRead+0x3a>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f4:	d108      	bne.n	8004208 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e00b      	b.n	8004220 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b11      	cmp	r3, #17
 800420e:	d107      	bne.n	8004220 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f893 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d103      	bne.n	8004250 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e079      	b.n	8004348 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]
 800426e:	e05f      	b.n	8004330 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	11db      	asrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f063 030f 	orn	r3, r3, #15
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4930      	ldr	r1, [pc, #192]	; (8004350 <I2C_MasterRequestRead+0x194>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f8b9 	bl	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e054      	b.n	8004348 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4929      	ldr	r1, [pc, #164]	; (8004354 <I2C_MasterRequestRead+0x198>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f8a9 	bl	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e044      	b.n	8004348 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f831 	bl	8004358 <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d103      	bne.n	8004314 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e017      	b.n	8004348 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004318:	897b      	ldrh	r3, [r7, #10]
 800431a:	11db      	asrs	r3, r3, #7
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0306 	and.w	r3, r3, #6
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f063 030e 	orn	r3, r3, #14
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4907      	ldr	r1, [pc, #28]	; (8004354 <I2C_MasterRequestRead+0x198>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f865 	bl	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	00010008 	.word	0x00010008
 8004354:	00010002 	.word	0x00010002

08004358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004368:	e025      	b.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe fb0d 	bl	8002990 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e023      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10d      	bne.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	e00c      	b.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d0b6      	beq.n	800436a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004414:	e051      	b.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004424:	d123      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800443e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0204 	orr.w	r2, r3, #4
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e046      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004474:	d021      	beq.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe fa8b 	bl	8002990 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e020      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10c      	bne.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	43da      	mvns	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e00b      	b.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	43da      	mvns	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4013      	ands	r3, r2
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d18d      	bne.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004510:	e02d      	b.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8ce 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e02d      	b.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004528:	d021      	beq.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe fa31 	bl	8002990 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e007      	b.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d1ca      	bne.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004592:	e02d      	b.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f88d 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e02d      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045aa:	d021      	beq.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fe f9f0 	bl	8002990 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d1ca      	bne.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004614:	e042      	b.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d119      	bne.n	8004658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e029      	b.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7fe f99a 	bl	8002990 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d116      	bne.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e007      	b.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d1b5      	bne.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d11b      	bne.n	8004704 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f043 0204 	orr.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e272      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8087 	beq.w	800483e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004730:	4b92      	ldr	r3, [pc, #584]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b04      	cmp	r3, #4
 800473a:	d00c      	beq.n	8004756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800473c:	4b8f      	ldr	r3, [pc, #572]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d112      	bne.n	800476e <HAL_RCC_OscConfig+0x5e>
 8004748:	4b8c      	ldr	r3, [pc, #560]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d10b      	bne.n	800476e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	4b89      	ldr	r3, [pc, #548]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06c      	beq.n	800483c <HAL_RCC_OscConfig+0x12c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d168      	bne.n	800483c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e24c      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x76>
 8004778:	4b80      	ldr	r3, [pc, #512]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a7f      	ldr	r2, [pc, #508]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e02e      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x98>
 800478e:	4b7b      	ldr	r3, [pc, #492]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7a      	ldr	r2, [pc, #488]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b78      	ldr	r3, [pc, #480]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a77      	ldr	r2, [pc, #476]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e01d      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0xbc>
 80047b2:	4b72      	ldr	r3, [pc, #456]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a71      	ldr	r2, [pc, #452]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b6f      	ldr	r3, [pc, #444]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a6e      	ldr	r2, [pc, #440]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 80047cc:	4b6b      	ldr	r3, [pc, #428]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6a      	ldr	r2, [pc, #424]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b68      	ldr	r3, [pc, #416]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a67      	ldr	r2, [pc, #412]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80047de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fe f8d0 	bl	8002990 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fe f8cc 	bl	8002990 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e200      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	4b5d      	ldr	r3, [pc, #372]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xe4>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fe f8bc 	bl	8002990 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fe f8b8 	bl	8002990 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	; 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1ec      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x10c>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d063      	beq.n	8004912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484a:	4b4c      	ldr	r3, [pc, #304]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004856:	4b49      	ldr	r3, [pc, #292]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b08      	cmp	r3, #8
 8004860:	d11c      	bne.n	800489c <HAL_RCC_OscConfig+0x18c>
 8004862:	4b46      	ldr	r3, [pc, #280]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d116      	bne.n	800489c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x176>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d001      	beq.n	8004886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e1c0      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4939      	ldr	r1, [pc, #228]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	e03a      	b.n	8004912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCC_OscConfig+0x270>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fe f871 	bl	8002990 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fe f86d 	bl	8002990 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1a1      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4927      	ldr	r1, [pc, #156]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
 80048e4:	e015      	b.n	8004912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCC_OscConfig+0x270>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fe f850 	bl	8002990 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fe f84c 	bl	8002990 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e180      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	4b1d      	ldr	r3, [pc, #116]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d03a      	beq.n	8004994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d019      	beq.n	800495a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_RCC_OscConfig+0x274>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fe f830 	bl	8002990 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004934:	f7fe f82c 	bl	8002990 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e160      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <HAL_RCC_OscConfig+0x26c>)
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004952:	2001      	movs	r0, #1
 8004954:	f000 fad8 	bl	8004f08 <RCC_Delay>
 8004958:	e01c      	b.n	8004994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_OscConfig+0x274>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004960:	f7fe f816 	bl	8002990 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004966:	e00f      	b.n	8004988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004968:	f7fe f812 	bl	8002990 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d908      	bls.n	8004988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e146      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000
 8004980:	42420000 	.word	0x42420000
 8004984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004988:	4b92      	ldr	r3, [pc, #584]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e9      	bne.n	8004968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a6 	beq.w	8004aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10d      	bne.n	80049ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4a87      	ldr	r2, [pc, #540]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	61d3      	str	r3, [r2, #28]
 80049be:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_OscConfig+0x4c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d118      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049da:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <HAL_RCC_OscConfig+0x4c8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7e      	ldr	r2, [pc, #504]	; (8004bd8 <HAL_RCC_OscConfig+0x4c8>)
 80049e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e6:	f7fd ffd3 	bl	8002990 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ee:	f7fd ffcf 	bl	8002990 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b64      	cmp	r3, #100	; 0x64
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e103      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	4b75      	ldr	r3, [pc, #468]	; (8004bd8 <HAL_RCC_OscConfig+0x4c8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x312>
 8004a14:	4b6f      	ldr	r3, [pc, #444]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4a6e      	ldr	r2, [pc, #440]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6213      	str	r3, [r2, #32]
 8004a20:	e02d      	b.n	8004a7e <HAL_RCC_OscConfig+0x36e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x334>
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a69      	ldr	r2, [pc, #420]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4a66      	ldr	r2, [pc, #408]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	6213      	str	r3, [r2, #32]
 8004a42:	e01c      	b.n	8004a7e <HAL_RCC_OscConfig+0x36e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b05      	cmp	r3, #5
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCC_OscConfig+0x356>
 8004a4c:	4b61      	ldr	r3, [pc, #388]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	4a60      	ldr	r2, [pc, #384]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6213      	str	r3, [r2, #32]
 8004a58:	4b5e      	ldr	r3, [pc, #376]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	4a5d      	ldr	r2, [pc, #372]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6213      	str	r3, [r2, #32]
 8004a64:	e00b      	b.n	8004a7e <HAL_RCC_OscConfig+0x36e>
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4a5a      	ldr	r2, [pc, #360]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	6213      	str	r3, [r2, #32]
 8004a72:	4b58      	ldr	r3, [pc, #352]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	4a57      	ldr	r2, [pc, #348]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	f023 0304 	bic.w	r3, r3, #4
 8004a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d015      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fd ff83 	bl	8002990 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fd ff7f 	bl	8002990 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e0b1      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ee      	beq.n	8004a8e <HAL_RCC_OscConfig+0x37e>
 8004ab0:	e014      	b.n	8004adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fd ff6d 	bl	8002990 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd ff69 	bl	8002990 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e09b      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad0:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ee      	bne.n	8004aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d105      	bne.n	8004aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae2:	4b3c      	ldr	r3, [pc, #240]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8087 	beq.w	8004c06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d061      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d146      	bne.n	8004b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0c:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd ff3d 	bl	8002990 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd ff39 	bl	8002990 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e06d      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2c:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d108      	bne.n	8004b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4921      	ldr	r1, [pc, #132]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b54:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a19      	ldr	r1, [r3, #32]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	430b      	orrs	r3, r1
 8004b66:	491b      	ldr	r1, [pc, #108]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b72:	f7fd ff0d 	bl	8002990 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7a:	f7fd ff09 	bl	8002990 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e03d      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x46a>
 8004b98:	e035      	b.n	8004c06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fef6 	bl	8002990 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fd fef2 	bl	8002990 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e026      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x498>
 8004bc6:	e01e      	b.n	8004c06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e019      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x500>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d001      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d0      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d910      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 0207 	bic.w	r2, r3, #7
 8004c3e:	4965      	ldr	r1, [pc, #404]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d040      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d115      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e073      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e06b      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f023 0203 	bic.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4936      	ldr	r1, [pc, #216]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d04:	f7fd fe44 	bl	8002990 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fd fe40 	bl	8002990 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e053      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 020c 	and.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1eb      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d210      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 0207 	bic.w	r2, r3, #7
 8004d4a:	4922      	ldr	r1, [pc, #136]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f821 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_ClockConfig+0x1d0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd fda2 	bl	800290c <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	08009a58 	.word	0x08009a58
 8004de0:	20000070 	.word	0x20000070
 8004de4:	200000e8 	.word	0x200000e8

08004de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	b490      	push	{r4, r7}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_GetSysClockFreq+0xac>)
 8004df0:	1d3c      	adds	r4, r7, #4
 8004df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004df8:	f240 2301 	movw	r3, #513	; 0x201
 8004dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e12:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x40>
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x46>
 8004e26:	e02b      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e2a:	623b      	str	r3, [r7, #32]
      break;
 8004e2c:	e02b      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	0c9b      	lsrs	r3, r3, #18
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	3328      	adds	r3, #40	; 0x28
 8004e38:	443b      	add	r3, r7
 8004e3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0c5b      	lsrs	r3, r3, #17
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	3328      	adds	r3, #40	; 0x28
 8004e56:	443b      	add	r3, r7
 8004e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e62:	fb03 f202 	mul.w	r2, r3, r2
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	e004      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	623b      	str	r3, [r7, #32]
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e82:	623b      	str	r3, [r7, #32]
      break;
 8004e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e86:	6a3b      	ldr	r3, [r7, #32]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc90      	pop	{r4, r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	08009a48 	.word	0x08009a48
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	007a1200 	.word	0x007a1200
 8004ea0:	003d0900 	.word	0x003d0900

08004ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea8:	4b02      	ldr	r3, [pc, #8]	; (8004eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	20000070 	.word	0x20000070

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	f7ff fff2 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	08009a68 	.word	0x08009a68

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ee4:	f7ff ffde 	bl	8004ea4 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	0adb      	lsrs	r3, r3, #11
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08009a68 	.word	0x08009a68

08004f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <RCC_Delay+0x34>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <RCC_Delay+0x38>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0a5b      	lsrs	r3, r3, #9
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f24:	bf00      	nop
  }
  while (Delay --);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1e5a      	subs	r2, r3, #1
 8004f2a:	60fa      	str	r2, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f9      	bne.n	8004f24 <RCC_Delay+0x1c>
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000070 	.word	0x20000070
 8004f40:	10624dd3 	.word	0x10624dd3

08004f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d07d      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f64:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10d      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f70:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	4a4b      	ldr	r2, [pc, #300]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	61d3      	str	r3, [r2, #28]
 8004f7c:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d118      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f98:	4b43      	ldr	r3, [pc, #268]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a42      	ldr	r2, [pc, #264]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fcf4 	bl	8002990 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fac:	f7fd fcf0 	bl	8002990 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	; 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e06d      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02e      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d027      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ffe:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d014      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500e:	f7fd fcbf 	bl	8002990 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fd fcbb 	bl	8002990 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e036      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ee      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005038:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4917      	ldr	r1, [pc, #92]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	4313      	orrs	r3, r2
 8005048:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	490b      	ldr	r1, [pc, #44]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4904      	ldr	r1, [pc, #16]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40007000 	.word	0x40007000
 80050ac:	42420440 	.word	0x42420440

080050b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e076      	b.n	80051b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d2:	d009      	beq.n	80050e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
 80050da:	e005      	b.n	80050e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc fe62 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	ea42 0103 	orr.w	r1, r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	0c1a      	lsrs	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f002 0204 	and.w	r2, r2, #4
 800518e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fea0 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 ffa6 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d001      	beq.n	8005270 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e032      	b.n	80052d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_Base_Start+0x88>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_TIM_Base_Start+0x48>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d009      	beq.n	80052a0 <HAL_TIM_Base_Start+0x48>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIM_Base_Start+0x8c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_Base_Start+0x48>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_TIM_Base_Start+0x90>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d010      	beq.n	80052d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e007      	b.n	80052d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800

080052ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e041      	b.n	8005382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f839 	bl	800538a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 ff0c 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x24>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e022      	b.n	8005406 <HAL_TIM_PWM_Start+0x6a>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d109      	bne.n	80053da <HAL_TIM_PWM_Start+0x3e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e015      	b.n	8005406 <HAL_TIM_PWM_Start+0x6a>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d109      	bne.n	80053f4 <HAL_TIM_PWM_Start+0x58>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e008      	b.n	8005406 <HAL_TIM_PWM_Start+0x6a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e05e      	b.n	80054cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0x82>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541c:	e013      	b.n	8005446 <HAL_TIM_PWM_Start+0xaa>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start+0x92>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542c:	e00b      	b.n	8005446 <HAL_TIM_PWM_Start+0xaa>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800543c:	e003      	b.n	8005446 <HAL_TIM_PWM_Start+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2201      	movs	r2, #1
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fa07 	bl	8006862 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_TIM_PWM_Start+0x138>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d107      	bne.n	800546e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_TIM_PWM_Start+0x138>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIM_PWM_Start+0xfa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d009      	beq.n	8005496 <HAL_TIM_PWM_Start+0xfa>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_TIM_PWM_Start+0x13c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIM_PWM_Start+0xfa>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a12      	ldr	r2, [pc, #72]	; (80054dc <HAL_TIM_PWM_Start+0x140>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d010      	beq.n	80054ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	e007      	b.n	80054ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800

080054e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e041      	b.n	8005576 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f839 	bl	800557e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f000 fe12 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0x1a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e013      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x42>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x2a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	e00b      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x42>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d104      	bne.n	80055ca <HAL_TIM_IC_Start_IT+0x3a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e003      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x42>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <HAL_TIM_IC_Start_IT+0x54>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e013      	b.n	800560c <HAL_TIM_IC_Start_IT+0x7c>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d104      	bne.n	80055f4 <HAL_TIM_IC_Start_IT+0x64>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e00b      	b.n	800560c <HAL_TIM_IC_Start_IT+0x7c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d104      	bne.n	8005604 <HAL_TIM_IC_Start_IT+0x74>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e003      	b.n	800560c <HAL_TIM_IC_Start_IT+0x7c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800560a:	b2db      	uxtb	r3, r3
 800560c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0b3      	b.n	8005786 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_IT+0x9e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800562c:	e013      	b.n	8005656 <HAL_TIM_IC_Start_IT+0xc6>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d104      	bne.n	800563e <HAL_TIM_IC_Start_IT+0xae>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563c:	e00b      	b.n	8005656 <HAL_TIM_IC_Start_IT+0xc6>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d104      	bne.n	800564e <HAL_TIM_IC_Start_IT+0xbe>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800564c:	e003      	b.n	8005656 <HAL_TIM_IC_Start_IT+0xc6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_TIM_IC_Start_IT+0xd6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005664:	e013      	b.n	800568e <HAL_TIM_IC_Start_IT+0xfe>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IC_Start_IT+0xe6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005674:	e00b      	b.n	800568e <HAL_TIM_IC_Start_IT+0xfe>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d104      	bne.n	8005686 <HAL_TIM_IC_Start_IT+0xf6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005684:	e003      	b.n	800568e <HAL_TIM_IC_Start_IT+0xfe>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d841      	bhi.n	8005718 <HAL_TIM_IC_Start_IT+0x188>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_TIM_IC_Start_IT+0x10c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	08005719 	.word	0x08005719
 80056a4:	08005719 	.word	0x08005719
 80056a8:	08005719 	.word	0x08005719
 80056ac:	080056e3 	.word	0x080056e3
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005719 	.word	0x08005719
 80056b8:	08005719 	.word	0x08005719
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	08005719 	.word	0x08005719
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005719 	.word	0x08005719
 80056cc:	08005707 	.word	0x08005707
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0202 	orr.w	r2, r2, #2
 80056de:	60da      	str	r2, [r3, #12]
      break;
 80056e0:	e01b      	b.n	800571a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0204 	orr.w	r2, r2, #4
 80056f0:	60da      	str	r2, [r3, #12]
      break;
 80056f2:	e012      	b.n	800571a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0208 	orr.w	r2, r2, #8
 8005702:	60da      	str	r2, [r3, #12]
      break;
 8005704:	e009      	b.n	800571a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0210 	orr.w	r2, r2, #16
 8005714:	60da      	str	r2, [r3, #12]
      break;
 8005716:	e000      	b.n	800571a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005718:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f001 f89d 	bl	8006862 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIM_IC_Start_IT+0x200>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_TIM_IC_Start_IT+0x1c0>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d009      	beq.n	8005750 <HAL_TIM_IC_Start_IT+0x1c0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a14      	ldr	r2, [pc, #80]	; (8005794 <HAL_TIM_IC_Start_IT+0x204>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIM_IC_Start_IT+0x1c0>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a13      	ldr	r2, [pc, #76]	; (8005798 <HAL_TIM_IC_Start_IT+0x208>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d111      	bne.n	8005774 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b06      	cmp	r3, #6
 8005760:	d010      	beq.n	8005784 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005772:	e007      	b.n	8005784 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800

0800579c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e093      	b.n	80058d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc fb4d 	bl	8001e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 fca9 	bl	8006148 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4313      	orrs	r3, r2
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800583c:	f023 030c 	bic.w	r3, r3, #12
 8005840:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	4313      	orrs	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	011a      	lsls	r2, r3, #4
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	031b      	lsls	r3, r3, #12
 800586c:	4313      	orrs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	4313      	orrs	r3, r2
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005900:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005908:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e089      	b.n	8005a34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	e031      	b.n	8005996 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d110      	bne.n	800595a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d102      	bne.n	8005944 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800593e:	7b3b      	ldrb	r3, [r7, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e075      	b.n	8005a34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005958:	e01d      	b.n	8005996 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800596c:	7b3b      	ldrb	r3, [r7, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e05e      	b.n	8005a34 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d010      	beq.n	80059c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80059a2:	e01f      	b.n	80059e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ff58 	bl	8006862 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0202 	orr.w	r2, r2, #2
 80059c0:	60da      	str	r2, [r3, #12]
      break;
 80059c2:	e02e      	b.n	8005a22 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	2104      	movs	r1, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ff48 	bl	8006862 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0204 	orr.w	r2, r2, #4
 80059e0:	60da      	str	r2, [r3, #12]
      break;
 80059e2:	e01e      	b.n	8005a22 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 ff38 	bl	8006862 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2201      	movs	r2, #1
 80059f8:	2104      	movs	r1, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ff31 	bl	8006862 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0202 	orr.w	r2, r2, #2
 8005a0e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0204 	orr.w	r2, r2, #4
 8005a1e:	60da      	str	r2, [r3, #12]
      break;
 8005a20:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0202 	mvn.w	r2, #2
 8005a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fcf2 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb43 	bl	8006112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fb49 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0204 	mvn.w	r2, #4
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc fcc8 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb19 	bl	8006112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fb1f 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0208 	mvn.w	r2, #8
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2204      	movs	r2, #4
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fc9e 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 faef 	bl	8006112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 faf5 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0210 	mvn.w	r2, #16
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fc74 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fac5 	bl	8006112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 facb 	bl	8006124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0201 	mvn.w	r2, #1
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 faa0 	bl	8006100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b80      	cmp	r3, #128	; 0x80
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fec7 	bl	800697a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa8f 	bl	8006136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d10e      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0220 	mvn.w	r2, #32
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fe92 	bl	8006968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e082      	b.n	8005d6c <HAL_TIM_IC_ConfigChannel+0x120>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11b      	bne.n	8005cac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f000 fc4a 	bl	800651c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 020c 	bic.w	r2, r2, #12
 8005c96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	619a      	str	r2, [r3, #24]
 8005caa:	e05a      	b.n	8005d62 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d11c      	bne.n	8005cec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fcb3 	bl	800662c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cd4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6999      	ldr	r1, [r3, #24]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	021a      	lsls	r2, r3, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	619a      	str	r2, [r3, #24]
 8005cea:	e03a      	b.n	8005d62 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d11b      	bne.n	8005d2a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f000 fcfe 	bl	8006702 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 020c 	bic.w	r2, r2, #12
 8005d14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69d9      	ldr	r1, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	61da      	str	r2, [r3, #28]
 8005d28:	e01b      	b.n	8005d62 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f000 fd1d 	bl	8006778 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69d9      	ldr	r1, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	021a      	lsls	r2, r3, #8
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0ac      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	f200 809f 	bhi.w	8005edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005edd 	.word	0x08005edd
 8005dac:	08005edd 	.word	0x08005edd
 8005db0:	08005edd 	.word	0x08005edd
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005edd 	.word	0x08005edd
 8005dbc:	08005edd 	.word	0x08005edd
 8005dc0:	08005edd 	.word	0x08005edd
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005edd 	.word	0x08005edd
 8005dcc:	08005edd 	.word	0x08005edd
 8005dd0:	08005edd 	.word	0x08005edd
 8005dd4:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa14 	bl	800620c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e062      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fa5a 	bl	80062d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e041      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 faa3 	bl	80063ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e021      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 faed 	bl	8006480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e000      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_ConfigClockSource+0x18>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e0b3      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x180>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f40:	d03e      	beq.n	8005fc0 <HAL_TIM_ConfigClockSource+0xd0>
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	f200 8087 	bhi.w	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	f000 8085 	beq.w	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f56:	d87f      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f58:	2b70      	cmp	r3, #112	; 0x70
 8005f5a:	d01a      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0xa2>
 8005f5c:	2b70      	cmp	r3, #112	; 0x70
 8005f5e:	d87b      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f60:	2b60      	cmp	r3, #96	; 0x60
 8005f62:	d050      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x116>
 8005f64:	2b60      	cmp	r3, #96	; 0x60
 8005f66:	d877      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f68:	2b50      	cmp	r3, #80	; 0x50
 8005f6a:	d03c      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8005f6c:	2b50      	cmp	r3, #80	; 0x50
 8005f6e:	d873      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d058      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x136>
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d86f      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f78:	2b30      	cmp	r3, #48	; 0x30
 8005f7a:	d064      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x156>
 8005f7c:	2b30      	cmp	r3, #48	; 0x30
 8005f7e:	d86b      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d060      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x156>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d867      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d05c      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x156>
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d05a      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f90:	e062      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6899      	ldr	r1, [r3, #8]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f000 fc3f 	bl	8006824 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	609a      	str	r2, [r3, #8]
      break;
 8005fbe:	e04e      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	6899      	ldr	r1, [r3, #8]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f000 fc28 	bl	8006824 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe2:	609a      	str	r2, [r3, #8]
      break;
 8005fe4:	e03b      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 faec 	bl	80065d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2150      	movs	r1, #80	; 0x50
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fbf6 	bl	80067f0 <TIM_ITRx_SetConfig>
      break;
 8006004:	e02b      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	f000 fb46 	bl	80066a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2160      	movs	r1, #96	; 0x60
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fbe6 	bl	80067f0 <TIM_ITRx_SetConfig>
      break;
 8006024:	e01b      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 facc 	bl	80065d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fbd6 	bl	80067f0 <TIM_ITRx_SetConfig>
      break;
 8006044:	e00b      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f000 fbcd 	bl	80067f0 <TIM_ITRx_SetConfig>
        break;
 8006056:	e002      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800605c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b0c      	cmp	r3, #12
 800608a:	d831      	bhi.n	80060f0 <HAL_TIM_ReadCapturedValue+0x78>
 800608c:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <HAL_TIM_ReadCapturedValue+0x1c>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	080060c9 	.word	0x080060c9
 8006098:	080060f1 	.word	0x080060f1
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	080060d3 	.word	0x080060d3
 80060a8:	080060f1 	.word	0x080060f1
 80060ac:	080060f1 	.word	0x080060f1
 80060b0:	080060f1 	.word	0x080060f1
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060f1 	.word	0x080060f1
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	080060f1 	.word	0x080060f1
 80060c4:	080060e7 	.word	0x080060e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	60fb      	str	r3, [r7, #12]

      break;
 80060d0:	e00f      	b.n	80060f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	60fb      	str	r3, [r7, #12]

      break;
 80060da:	e00a      	b.n	80060f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e2:	60fb      	str	r3, [r7, #12]

      break;
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	60fb      	str	r3, [r7, #12]

      break;
 80060ee:	e000      	b.n	80060f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060f0:	bf00      	nop
  }

  return tmpreg;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a29      	ldr	r2, [pc, #164]	; (8006200 <TIM_Base_SetConfig+0xb8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_Base_SetConfig+0x30>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d007      	beq.n	8006178 <TIM_Base_SetConfig+0x30>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a26      	ldr	r2, [pc, #152]	; (8006204 <TIM_Base_SetConfig+0xbc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_Base_SetConfig+0x30>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a25      	ldr	r2, [pc, #148]	; (8006208 <TIM_Base_SetConfig+0xc0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d108      	bne.n	800618a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <TIM_Base_SetConfig+0xb8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00b      	beq.n	80061aa <TIM_Base_SetConfig+0x62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d007      	beq.n	80061aa <TIM_Base_SetConfig+0x62>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a19      	ldr	r2, [pc, #100]	; (8006204 <TIM_Base_SetConfig+0xbc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_Base_SetConfig+0x62>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a18      	ldr	r2, [pc, #96]	; (8006208 <TIM_Base_SetConfig+0xc0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d108      	bne.n	80061bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a07      	ldr	r2, [pc, #28]	; (8006200 <TIM_Base_SetConfig+0xb8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	615a      	str	r2, [r3, #20]
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800

0800620c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 0302 	bic.w	r3, r3, #2
 8006254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <TIM_OC1_SetConfig+0xc8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d10c      	bne.n	8006282 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0308 	bic.w	r3, r3, #8
 800626e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 0304 	bic.w	r3, r3, #4
 8006280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <TIM_OC1_SetConfig+0xc8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d111      	bne.n	80062ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00

080062d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0210 	bic.w	r2, r3, #16
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0320 	bic.w	r3, r3, #32
 8006322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <TIM_OC2_SetConfig+0xd0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d10d      	bne.n	8006354 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <TIM_OC2_SetConfig+0xd0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d113      	bne.n	8006384 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00

080063ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1d      	ldr	r2, [pc, #116]	; (800647c <TIM_OC3_SetConfig+0xd0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d10d      	bne.n	8006426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <TIM_OC3_SetConfig+0xd0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d113      	bne.n	8006456 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00

08006480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	031b      	lsls	r3, r3, #12
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0f      	ldr	r2, [pc, #60]	; (8006518 <TIM_OC4_SetConfig+0x98>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d109      	bne.n	80064f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	019b      	lsls	r3, r3, #6
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	40012c00 	.word	0x40012c00

0800651c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <TIM_TI1_SetConfig+0xa8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_TI1_SetConfig+0x46>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006550:	d007      	beq.n	8006562 <TIM_TI1_SetConfig+0x46>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <TIM_TI1_SetConfig+0xac>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_TI1_SetConfig+0x46>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <TIM_TI1_SetConfig+0xb0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <TIM_TI1_SetConfig+0x4a>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <TIM_TI1_SetConfig+0x4c>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e003      	b.n	8006586 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800658c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	b2db      	uxtb	r3, r3
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f023 030a 	bic.w	r3, r3, #10
 80065a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f003 030a 	and.w	r3, r3, #10
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800

080065d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f023 0201 	bic.w	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 030a 	bic.w	r3, r3, #10
 800660c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0210 	bic.w	r2, r3, #16
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800666a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	031b      	lsls	r3, r3, #12
 8006670:	b29b      	uxth	r3, r3
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800667e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f023 0210 	bic.w	r2, r3, #16
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	031b      	lsls	r3, r3, #12
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	621a      	str	r2, [r3, #32]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	b2db      	uxtb	r3, r3
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006752:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	031b      	lsls	r3, r3, #12
 80067bc:	b29b      	uxth	r3, r3
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	f043 0307 	orr.w	r3, r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	609a      	str	r2, [r3, #8]
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800683e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	431a      	orrs	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4313      	orrs	r3, r2
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	609a      	str	r2, [r3, #8]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006862:	b480      	push	{r7}
 8006864:	b087      	sub	sp, #28
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	2201      	movs	r2, #1
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1a      	ldr	r2, [r3, #32]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	43db      	mvns	r3, r3
 8006884:	401a      	ands	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	431a      	orrs	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr
	...

080068ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e046      	b.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a16      	ldr	r2, [pc, #88]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d009      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a10      	ldr	r2, [pc, #64]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10c      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800692c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4313      	orrs	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800

08006968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e03f      	b.n	8006a1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb fb58 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2224      	movs	r2, #36	; 0x24
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f9c3 	bl	8006d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	4613      	mov	r3, r2
 8006a32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d11d      	bne.n	8006a7c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_UART_Receive_DMA+0x26>
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e016      	b.n	8006a7e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Receive_DMA+0x38>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e00f      	b.n	8006a7e <HAL_UART_Receive_DMA+0x58>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8cc 	bl	8006c10 <UART_Start_Receive_DMA>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d12a      	bne.n	8006b20 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ade:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006afe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0210 	bic.w	r2, r2, #16
 8006b1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d106      	bne.n	8006b36 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff ffb2 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b34:	e002      	b.n	8006b3c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7fa fcb6 	bl	80014a8 <HAL_UART_RxCpltCallback>
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d108      	bne.n	8006b6c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff97 	bl	8006a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b6a:	e002      	b.n	8006b72 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7fa fc8f 	bl	8001490 <HAL_UART_RxHalfCpltCallback>
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bf14      	ite	ne
 8006b9a:	2301      	movne	r3, #1
 8006b9c:	2300      	moveq	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b21      	cmp	r3, #33	; 0x21
 8006bac:	d108      	bne.n	8006bc0 <UART_DMAError+0x46>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006bba:	68b8      	ldr	r0, [r7, #8]
 8006bbc:	f000 f88c 	bl	8006cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf14      	ite	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	2300      	moveq	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	d108      	bne.n	8006bf4 <UART_DMAError+0x7a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006bee:	68b8      	ldr	r0, [r7, #8]
 8006bf0:	f000 f887 	bl	8006d02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	f043 0210 	orr.w	r2, r3, #16
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f7ff ff40 	bl	8006a86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2222      	movs	r2, #34	; 0x22
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <UART_Start_Receive_DMA+0xbc>)
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <UART_Start_Receive_DMA+0xc0>)
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <UART_Start_Receive_DMA+0xc4>)
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	2200      	movs	r2, #0
 8006c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c58:	f107 0308 	add.w	r3, r7, #8
 8006c5c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	f7fc fa36 	bl	80030e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0201 	orr.w	r2, r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08006aaf 	.word	0x08006aaf
 8006cd0:	08006b45 	.word	0x08006b45
 8006cd4:	08006b7b 	.word	0x08006b7b

08006cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006cee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d18:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695a      	ldr	r2, [r3, #20]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0201 	bic.w	r2, r2, #1
 8006d28:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d107      	bne.n	8006d42 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0210 	bic.w	r2, r2, #16
 8006d40:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
	...

08006d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d96:	f023 030c 	bic.w	r3, r3, #12
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	430b      	orrs	r3, r1
 8006da2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2c      	ldr	r2, [pc, #176]	; (8006e70 <UART_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d103      	bne.n	8006dcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006dc4:	f7fe f88c 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	e002      	b.n	8006dd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fe f874 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8006dd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009a      	lsls	r2, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <UART_SetConfig+0x118>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	0119      	lsls	r1, r3, #4
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009a      	lsls	r2, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <UART_SetConfig+0x118>)
 8006e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2064      	movs	r0, #100	; 0x64
 8006e12:	fb00 f303 	mul.w	r3, r0, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	3332      	adds	r3, #50	; 0x32
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <UART_SetConfig+0x118>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e28:	4419      	add	r1, r3
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009a      	lsls	r2, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <UART_SetConfig+0x118>)
 8006e42:	fba3 0302 	umull	r0, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2064      	movs	r0, #100	; 0x64
 8006e4a:	fb00 f303 	mul.w	r3, r0, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	3332      	adds	r3, #50	; 0x32
 8006e54:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <UART_SetConfig+0x118>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	440a      	add	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40013800 	.word	0x40013800
 8006e74:	51eb851f 	.word	0x51eb851f

08006e78 <atoi>:
 8006e78:	220a      	movs	r2, #10
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f000 bd22 	b.w	80078c4 <strtol>

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	200000f0 	.word	0x200000f0

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	2600      	movs	r6, #0
 8006e90:	4d0c      	ldr	r5, [pc, #48]	; (8006ec4 <__libc_init_array+0x38>)
 8006e92:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	f002 fdc8 	bl	8009a30 <_init>
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	4d0a      	ldr	r5, [pc, #40]	; (8006ecc <__libc_init_array+0x40>)
 8006ea4:	4c0a      	ldr	r4, [pc, #40]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08009e4c 	.word	0x08009e4c
 8006ec8:	08009e4c 	.word	0x08009e4c
 8006ecc:	08009e4c 	.word	0x08009e4c
 8006ed0:	08009e50 	.word	0x08009e50

08006ed4 <memset>:
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4402      	add	r2, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <__cvt>:
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eea:	461f      	mov	r7, r3
 8006eec:	bfbb      	ittet	lt
 8006eee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	461f      	movlt	r7, r3
 8006ef4:	2300      	movge	r3, #0
 8006ef6:	232d      	movlt	r3, #45	; 0x2d
 8006ef8:	b088      	sub	sp, #32
 8006efa:	4614      	mov	r4, r2
 8006efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006efe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f00:	7013      	strb	r3, [r2, #0]
 8006f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f04:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f08:	f023 0820 	bic.w	r8, r3, #32
 8006f0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f10:	d005      	beq.n	8006f1e <__cvt+0x3a>
 8006f12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f16:	d100      	bne.n	8006f1a <__cvt+0x36>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e000      	b.n	8006f20 <__cvt+0x3c>
 8006f1e:	2303      	movs	r3, #3
 8006f20:	aa07      	add	r2, sp, #28
 8006f22:	9204      	str	r2, [sp, #16]
 8006f24:	aa06      	add	r2, sp, #24
 8006f26:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f2a:	e9cd 3500 	strd	r3, r5, [sp]
 8006f2e:	4622      	mov	r2, r4
 8006f30:	463b      	mov	r3, r7
 8006f32:	f000 fd5d 	bl	80079f0 <_dtoa_r>
 8006f36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	d102      	bne.n	8006f44 <__cvt+0x60>
 8006f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f40:	07db      	lsls	r3, r3, #31
 8006f42:	d522      	bpl.n	8006f8a <__cvt+0xa6>
 8006f44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f48:	eb06 0905 	add.w	r9, r6, r5
 8006f4c:	d110      	bne.n	8006f70 <__cvt+0x8c>
 8006f4e:	7833      	ldrb	r3, [r6, #0]
 8006f50:	2b30      	cmp	r3, #48	; 0x30
 8006f52:	d10a      	bne.n	8006f6a <__cvt+0x86>
 8006f54:	2200      	movs	r2, #0
 8006f56:	2300      	movs	r3, #0
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8006f60:	b918      	cbnz	r0, 8006f6a <__cvt+0x86>
 8006f62:	f1c5 0501 	rsb	r5, r5, #1
 8006f66:	f8ca 5000 	str.w	r5, [sl]
 8006f6a:	f8da 3000 	ldr.w	r3, [sl]
 8006f6e:	4499      	add	r9, r3
 8006f70:	2200      	movs	r2, #0
 8006f72:	2300      	movs	r3, #0
 8006f74:	4620      	mov	r0, r4
 8006f76:	4639      	mov	r1, r7
 8006f78:	f7f9 fd16 	bl	80009a8 <__aeabi_dcmpeq>
 8006f7c:	b108      	cbz	r0, 8006f82 <__cvt+0x9e>
 8006f7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f82:	2230      	movs	r2, #48	; 0x30
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	454b      	cmp	r3, r9
 8006f88:	d307      	bcc.n	8006f9a <__cvt+0xb6>
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f90:	1b9b      	subs	r3, r3, r6
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	b008      	add	sp, #32
 8006f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	9107      	str	r1, [sp, #28]
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e7f0      	b.n	8006f84 <__cvt+0xa0>

08006fa2 <__exponent>:
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	f803 2b02 	strb.w	r2, [r3], #2
 8006fac:	bfb6      	itet	lt
 8006fae:	222d      	movlt	r2, #45	; 0x2d
 8006fb0:	222b      	movge	r2, #43	; 0x2b
 8006fb2:	4249      	neglt	r1, r1
 8006fb4:	2909      	cmp	r1, #9
 8006fb6:	7042      	strb	r2, [r0, #1]
 8006fb8:	dd2b      	ble.n	8007012 <__exponent+0x70>
 8006fba:	f10d 0407 	add.w	r4, sp, #7
 8006fbe:	46a4      	mov	ip, r4
 8006fc0:	270a      	movs	r7, #10
 8006fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	46a6      	mov	lr, r4
 8006fca:	fb07 1516 	mls	r5, r7, r6, r1
 8006fce:	2a63      	cmp	r2, #99	; 0x63
 8006fd0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006fda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fde:	dcf0      	bgt.n	8006fc2 <__exponent+0x20>
 8006fe0:	3130      	adds	r1, #48	; 0x30
 8006fe2:	f1ae 0502 	sub.w	r5, lr, #2
 8006fe6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fea:	4629      	mov	r1, r5
 8006fec:	1c44      	adds	r4, r0, #1
 8006fee:	4561      	cmp	r1, ip
 8006ff0:	d30a      	bcc.n	8007008 <__exponent+0x66>
 8006ff2:	f10d 0209 	add.w	r2, sp, #9
 8006ff6:	eba2 020e 	sub.w	r2, r2, lr
 8006ffa:	4565      	cmp	r5, ip
 8006ffc:	bf88      	it	hi
 8006ffe:	2200      	movhi	r2, #0
 8007000:	4413      	add	r3, r2
 8007002:	1a18      	subs	r0, r3, r0
 8007004:	b003      	add	sp, #12
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007008:	f811 2b01 	ldrb.w	r2, [r1], #1
 800700c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007010:	e7ed      	b.n	8006fee <__exponent+0x4c>
 8007012:	2330      	movs	r3, #48	; 0x30
 8007014:	3130      	adds	r1, #48	; 0x30
 8007016:	7083      	strb	r3, [r0, #2]
 8007018:	70c1      	strb	r1, [r0, #3]
 800701a:	1d03      	adds	r3, r0, #4
 800701c:	e7f1      	b.n	8007002 <__exponent+0x60>
	...

08007020 <_printf_float>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	b091      	sub	sp, #68	; 0x44
 8007026:	460c      	mov	r4, r1
 8007028:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800702c:	4616      	mov	r6, r2
 800702e:	461f      	mov	r7, r3
 8007030:	4605      	mov	r5, r0
 8007032:	f001 facb 	bl	80085cc <_localeconv_r>
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	f7f9 f888 	bl	8000150 <strlen>
 8007040:	2300      	movs	r3, #0
 8007042:	930e      	str	r3, [sp, #56]	; 0x38
 8007044:	f8d8 3000 	ldr.w	r3, [r8]
 8007048:	900a      	str	r0, [sp, #40]	; 0x28
 800704a:	3307      	adds	r3, #7
 800704c:	f023 0307 	bic.w	r3, r3, #7
 8007050:	f103 0208 	add.w	r2, r3, #8
 8007054:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007058:	f8d4 b000 	ldr.w	fp, [r4]
 800705c:	f8c8 2000 	str.w	r2, [r8]
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007068:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800706c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007070:	930b      	str	r3, [sp, #44]	; 0x2c
 8007072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007076:	4640      	mov	r0, r8
 8007078:	4b9c      	ldr	r3, [pc, #624]	; (80072ec <_printf_float+0x2cc>)
 800707a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800707c:	f7f9 fcc6 	bl	8000a0c <__aeabi_dcmpun>
 8007080:	bb70      	cbnz	r0, 80070e0 <_printf_float+0xc0>
 8007082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007086:	4640      	mov	r0, r8
 8007088:	4b98      	ldr	r3, [pc, #608]	; (80072ec <_printf_float+0x2cc>)
 800708a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800708c:	f7f9 fca0 	bl	80009d0 <__aeabi_dcmple>
 8007090:	bb30      	cbnz	r0, 80070e0 <_printf_float+0xc0>
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	4640      	mov	r0, r8
 8007098:	4651      	mov	r1, sl
 800709a:	f7f9 fc8f 	bl	80009bc <__aeabi_dcmplt>
 800709e:	b110      	cbz	r0, 80070a6 <_printf_float+0x86>
 80070a0:	232d      	movs	r3, #45	; 0x2d
 80070a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a6:	4b92      	ldr	r3, [pc, #584]	; (80072f0 <_printf_float+0x2d0>)
 80070a8:	4892      	ldr	r0, [pc, #584]	; (80072f4 <_printf_float+0x2d4>)
 80070aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80070ae:	bf94      	ite	ls
 80070b0:	4698      	movls	r8, r3
 80070b2:	4680      	movhi	r8, r0
 80070b4:	2303      	movs	r3, #3
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	f02b 0304 	bic.w	r3, fp, #4
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	4633      	mov	r3, r6
 80070c4:	4621      	mov	r1, r4
 80070c6:	4628      	mov	r0, r5
 80070c8:	9700      	str	r7, [sp, #0]
 80070ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80070cc:	f000 f9d4 	bl	8007478 <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	f040 8090 	bne.w	80071f6 <_printf_float+0x1d6>
 80070d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070da:	b011      	add	sp, #68	; 0x44
 80070dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e0:	4642      	mov	r2, r8
 80070e2:	4653      	mov	r3, sl
 80070e4:	4640      	mov	r0, r8
 80070e6:	4651      	mov	r1, sl
 80070e8:	f7f9 fc90 	bl	8000a0c <__aeabi_dcmpun>
 80070ec:	b148      	cbz	r0, 8007102 <_printf_float+0xe2>
 80070ee:	f1ba 0f00 	cmp.w	sl, #0
 80070f2:	bfb8      	it	lt
 80070f4:	232d      	movlt	r3, #45	; 0x2d
 80070f6:	4880      	ldr	r0, [pc, #512]	; (80072f8 <_printf_float+0x2d8>)
 80070f8:	bfb8      	it	lt
 80070fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070fe:	4b7f      	ldr	r3, [pc, #508]	; (80072fc <_printf_float+0x2dc>)
 8007100:	e7d3      	b.n	80070aa <_printf_float+0x8a>
 8007102:	6863      	ldr	r3, [r4, #4]
 8007104:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	d142      	bne.n	8007192 <_printf_float+0x172>
 800710c:	2306      	movs	r3, #6
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	9206      	str	r2, [sp, #24]
 8007114:	aa0e      	add	r2, sp, #56	; 0x38
 8007116:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800711a:	aa0d      	add	r2, sp, #52	; 0x34
 800711c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007120:	9203      	str	r2, [sp, #12]
 8007122:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007126:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	4642      	mov	r2, r8
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4628      	mov	r0, r5
 8007134:	4653      	mov	r3, sl
 8007136:	910b      	str	r1, [sp, #44]	; 0x2c
 8007138:	f7ff fed4 	bl	8006ee4 <__cvt>
 800713c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800713e:	4680      	mov	r8, r0
 8007140:	2947      	cmp	r1, #71	; 0x47
 8007142:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007144:	d108      	bne.n	8007158 <_printf_float+0x138>
 8007146:	1cc8      	adds	r0, r1, #3
 8007148:	db02      	blt.n	8007150 <_printf_float+0x130>
 800714a:	6863      	ldr	r3, [r4, #4]
 800714c:	4299      	cmp	r1, r3
 800714e:	dd40      	ble.n	80071d2 <_printf_float+0x1b2>
 8007150:	f1a9 0902 	sub.w	r9, r9, #2
 8007154:	fa5f f989 	uxtb.w	r9, r9
 8007158:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800715c:	d81f      	bhi.n	800719e <_printf_float+0x17e>
 800715e:	464a      	mov	r2, r9
 8007160:	3901      	subs	r1, #1
 8007162:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007166:	910d      	str	r1, [sp, #52]	; 0x34
 8007168:	f7ff ff1b 	bl	8006fa2 <__exponent>
 800716c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716e:	4682      	mov	sl, r0
 8007170:	1813      	adds	r3, r2, r0
 8007172:	2a01      	cmp	r2, #1
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	dc02      	bgt.n	800717e <_printf_float+0x15e>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	07d2      	lsls	r2, r2, #31
 800717c:	d501      	bpl.n	8007182 <_printf_float+0x162>
 800717e:	3301      	adds	r3, #1
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007186:	2b00      	cmp	r3, #0
 8007188:	d09b      	beq.n	80070c2 <_printf_float+0xa2>
 800718a:	232d      	movs	r3, #45	; 0x2d
 800718c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007190:	e797      	b.n	80070c2 <_printf_float+0xa2>
 8007192:	2947      	cmp	r1, #71	; 0x47
 8007194:	d1bc      	bne.n	8007110 <_printf_float+0xf0>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1ba      	bne.n	8007110 <_printf_float+0xf0>
 800719a:	2301      	movs	r3, #1
 800719c:	e7b7      	b.n	800710e <_printf_float+0xee>
 800719e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80071a2:	d118      	bne.n	80071d6 <_printf_float+0x1b6>
 80071a4:	2900      	cmp	r1, #0
 80071a6:	6863      	ldr	r3, [r4, #4]
 80071a8:	dd0b      	ble.n	80071c2 <_printf_float+0x1a2>
 80071aa:	6121      	str	r1, [r4, #16]
 80071ac:	b913      	cbnz	r3, 80071b4 <_printf_float+0x194>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	07d0      	lsls	r0, r2, #31
 80071b2:	d502      	bpl.n	80071ba <_printf_float+0x19a>
 80071b4:	3301      	adds	r3, #1
 80071b6:	440b      	add	r3, r1
 80071b8:	6123      	str	r3, [r4, #16]
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	65a1      	str	r1, [r4, #88]	; 0x58
 80071c0:	e7df      	b.n	8007182 <_printf_float+0x162>
 80071c2:	b913      	cbnz	r3, 80071ca <_printf_float+0x1aa>
 80071c4:	6822      	ldr	r2, [r4, #0]
 80071c6:	07d2      	lsls	r2, r2, #31
 80071c8:	d501      	bpl.n	80071ce <_printf_float+0x1ae>
 80071ca:	3302      	adds	r3, #2
 80071cc:	e7f4      	b.n	80071b8 <_printf_float+0x198>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e7f2      	b.n	80071b8 <_printf_float+0x198>
 80071d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80071d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d8:	4299      	cmp	r1, r3
 80071da:	db05      	blt.n	80071e8 <_printf_float+0x1c8>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	6121      	str	r1, [r4, #16]
 80071e0:	07d8      	lsls	r0, r3, #31
 80071e2:	d5ea      	bpl.n	80071ba <_printf_float+0x19a>
 80071e4:	1c4b      	adds	r3, r1, #1
 80071e6:	e7e7      	b.n	80071b8 <_printf_float+0x198>
 80071e8:	2900      	cmp	r1, #0
 80071ea:	bfcc      	ite	gt
 80071ec:	2201      	movgt	r2, #1
 80071ee:	f1c1 0202 	rsble	r2, r1, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	e7e0      	b.n	80071b8 <_printf_float+0x198>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	055a      	lsls	r2, r3, #21
 80071fa:	d407      	bmi.n	800720c <_printf_float+0x1ec>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	4642      	mov	r2, r8
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	d12b      	bne.n	8007262 <_printf_float+0x242>
 800720a:	e764      	b.n	80070d6 <_printf_float+0xb6>
 800720c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007210:	f240 80dd 	bls.w	80073ce <_printf_float+0x3ae>
 8007214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	f7f9 fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8007220:	2800      	cmp	r0, #0
 8007222:	d033      	beq.n	800728c <_printf_float+0x26c>
 8007224:	2301      	movs	r3, #1
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	4a35      	ldr	r2, [pc, #212]	; (8007300 <_printf_float+0x2e0>)
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f af51 	beq.w	80070d6 <_printf_float+0xb6>
 8007234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007238:	429a      	cmp	r2, r3
 800723a:	db02      	blt.n	8007242 <_printf_float+0x222>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	07d8      	lsls	r0, r3, #31
 8007240:	d50f      	bpl.n	8007262 <_printf_float+0x242>
 8007242:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f af42 	beq.w	80070d6 <_printf_float+0xb6>
 8007252:	f04f 0800 	mov.w	r8, #0
 8007256:	f104 091a 	add.w	r9, r4, #26
 800725a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800725c:	3b01      	subs	r3, #1
 800725e:	4543      	cmp	r3, r8
 8007260:	dc09      	bgt.n	8007276 <_printf_float+0x256>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	079b      	lsls	r3, r3, #30
 8007266:	f100 8102 	bmi.w	800746e <_printf_float+0x44e>
 800726a:	68e0      	ldr	r0, [r4, #12]
 800726c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800726e:	4298      	cmp	r0, r3
 8007270:	bfb8      	it	lt
 8007272:	4618      	movlt	r0, r3
 8007274:	e731      	b.n	80070da <_printf_float+0xba>
 8007276:	2301      	movs	r3, #1
 8007278:	464a      	mov	r2, r9
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f af28 	beq.w	80070d6 <_printf_float+0xb6>
 8007286:	f108 0801 	add.w	r8, r8, #1
 800728a:	e7e6      	b.n	800725a <_printf_float+0x23a>
 800728c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	dc38      	bgt.n	8007304 <_printf_float+0x2e4>
 8007292:	2301      	movs	r3, #1
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	4a19      	ldr	r2, [pc, #100]	; (8007300 <_printf_float+0x2e0>)
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f af1a 	beq.w	80070d6 <_printf_float+0xb6>
 80072a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072a6:	4313      	orrs	r3, r2
 80072a8:	d102      	bne.n	80072b0 <_printf_float+0x290>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	07d9      	lsls	r1, r3, #31
 80072ae:	d5d8      	bpl.n	8007262 <_printf_float+0x242>
 80072b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af0b 	beq.w	80070d6 <_printf_float+0xb6>
 80072c0:	f04f 0900 	mov.w	r9, #0
 80072c4:	f104 0a1a 	add.w	sl, r4, #26
 80072c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ca:	425b      	negs	r3, r3
 80072cc:	454b      	cmp	r3, r9
 80072ce:	dc01      	bgt.n	80072d4 <_printf_float+0x2b4>
 80072d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d2:	e794      	b.n	80071fe <_printf_float+0x1de>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4652      	mov	r2, sl
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f aef9 	beq.w	80070d6 <_printf_float+0xb6>
 80072e4:	f109 0901 	add.w	r9, r9, #1
 80072e8:	e7ee      	b.n	80072c8 <_printf_float+0x2a8>
 80072ea:	bf00      	nop
 80072ec:	7fefffff 	.word	0x7fefffff
 80072f0:	08009a74 	.word	0x08009a74
 80072f4:	08009a78 	.word	0x08009a78
 80072f8:	08009a80 	.word	0x08009a80
 80072fc:	08009a7c 	.word	0x08009a7c
 8007300:	08009a84 	.word	0x08009a84
 8007304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007308:	429a      	cmp	r2, r3
 800730a:	bfa8      	it	ge
 800730c:	461a      	movge	r2, r3
 800730e:	2a00      	cmp	r2, #0
 8007310:	4691      	mov	r9, r2
 8007312:	dc37      	bgt.n	8007384 <_printf_float+0x364>
 8007314:	f04f 0b00 	mov.w	fp, #0
 8007318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800731c:	f104 021a 	add.w	r2, r4, #26
 8007320:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007324:	ebaa 0309 	sub.w	r3, sl, r9
 8007328:	455b      	cmp	r3, fp
 800732a:	dc33      	bgt.n	8007394 <_printf_float+0x374>
 800732c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007330:	429a      	cmp	r2, r3
 8007332:	db3b      	blt.n	80073ac <_printf_float+0x38c>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07da      	lsls	r2, r3, #31
 8007338:	d438      	bmi.n	80073ac <_printf_float+0x38c>
 800733a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800733c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800733e:	eba3 020a 	sub.w	r2, r3, sl
 8007342:	eba3 0901 	sub.w	r9, r3, r1
 8007346:	4591      	cmp	r9, r2
 8007348:	bfa8      	it	ge
 800734a:	4691      	movge	r9, r2
 800734c:	f1b9 0f00 	cmp.w	r9, #0
 8007350:	dc34      	bgt.n	80073bc <_printf_float+0x39c>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800735a:	f104 0a1a 	add.w	sl, r4, #26
 800735e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007362:	1a9b      	subs	r3, r3, r2
 8007364:	eba3 0309 	sub.w	r3, r3, r9
 8007368:	4543      	cmp	r3, r8
 800736a:	f77f af7a 	ble.w	8007262 <_printf_float+0x242>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f aeac 	beq.w	80070d6 <_printf_float+0xb6>
 800737e:	f108 0801 	add.w	r8, r8, #1
 8007382:	e7ec      	b.n	800735e <_printf_float+0x33e>
 8007384:	4613      	mov	r3, r2
 8007386:	4631      	mov	r1, r6
 8007388:	4642      	mov	r2, r8
 800738a:	4628      	mov	r0, r5
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	d1c0      	bne.n	8007314 <_printf_float+0x2f4>
 8007392:	e6a0      	b.n	80070d6 <_printf_float+0xb6>
 8007394:	2301      	movs	r3, #1
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	920b      	str	r2, [sp, #44]	; 0x2c
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f ae99 	beq.w	80070d6 <_printf_float+0xb6>
 80073a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073a6:	f10b 0b01 	add.w	fp, fp, #1
 80073aa:	e7b9      	b.n	8007320 <_printf_float+0x300>
 80073ac:	4631      	mov	r1, r6
 80073ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	d1bf      	bne.n	800733a <_printf_float+0x31a>
 80073ba:	e68c      	b.n	80070d6 <_printf_float+0xb6>
 80073bc:	464b      	mov	r3, r9
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	eb08 020a 	add.w	r2, r8, sl
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	d1c2      	bne.n	8007352 <_printf_float+0x332>
 80073cc:	e683      	b.n	80070d6 <_printf_float+0xb6>
 80073ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d0:	2a01      	cmp	r2, #1
 80073d2:	dc01      	bgt.n	80073d8 <_printf_float+0x3b8>
 80073d4:	07db      	lsls	r3, r3, #31
 80073d6:	d537      	bpl.n	8007448 <_printf_float+0x428>
 80073d8:	2301      	movs	r3, #1
 80073da:	4642      	mov	r2, r8
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f ae77 	beq.w	80070d6 <_printf_float+0xb6>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f ae6f 	beq.w	80070d6 <_printf_float+0xb6>
 80073f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	f7f9 fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8007404:	b9d8      	cbnz	r0, 800743e <_printf_float+0x41e>
 8007406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007408:	f108 0201 	add.w	r2, r8, #1
 800740c:	3b01      	subs	r3, #1
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	d10e      	bne.n	8007436 <_printf_float+0x416>
 8007418:	e65d      	b.n	80070d6 <_printf_float+0xb6>
 800741a:	2301      	movs	r3, #1
 800741c:	464a      	mov	r2, r9
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f ae56 	beq.w	80070d6 <_printf_float+0xb6>
 800742a:	f108 0801 	add.w	r8, r8, #1
 800742e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007430:	3b01      	subs	r3, #1
 8007432:	4543      	cmp	r3, r8
 8007434:	dcf1      	bgt.n	800741a <_printf_float+0x3fa>
 8007436:	4653      	mov	r3, sl
 8007438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800743c:	e6e0      	b.n	8007200 <_printf_float+0x1e0>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 091a 	add.w	r9, r4, #26
 8007446:	e7f2      	b.n	800742e <_printf_float+0x40e>
 8007448:	2301      	movs	r3, #1
 800744a:	4642      	mov	r2, r8
 800744c:	e7df      	b.n	800740e <_printf_float+0x3ee>
 800744e:	2301      	movs	r3, #1
 8007450:	464a      	mov	r2, r9
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae3c 	beq.w	80070d6 <_printf_float+0xb6>
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	68e3      	ldr	r3, [r4, #12]
 8007464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007466:	1a5b      	subs	r3, r3, r1
 8007468:	4543      	cmp	r3, r8
 800746a:	dcf0      	bgt.n	800744e <_printf_float+0x42e>
 800746c:	e6fd      	b.n	800726a <_printf_float+0x24a>
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	f104 0919 	add.w	r9, r4, #25
 8007476:	e7f4      	b.n	8007462 <_printf_float+0x442>

08007478 <_printf_common>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	4616      	mov	r6, r2
 800747e:	4699      	mov	r9, r3
 8007480:	688a      	ldr	r2, [r1, #8]
 8007482:	690b      	ldr	r3, [r1, #16]
 8007484:	4607      	mov	r7, r0
 8007486:	4293      	cmp	r3, r2
 8007488:	bfb8      	it	lt
 800748a:	4613      	movlt	r3, r2
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007492:	460c      	mov	r4, r1
 8007494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007498:	b10a      	cbz	r2, 800749e <_printf_common+0x26>
 800749a:	3301      	adds	r3, #1
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	0699      	lsls	r1, r3, #26
 80074a2:	bf42      	ittt	mi
 80074a4:	6833      	ldrmi	r3, [r6, #0]
 80074a6:	3302      	addmi	r3, #2
 80074a8:	6033      	strmi	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	f015 0506 	ands.w	r5, r5, #6
 80074b0:	d106      	bne.n	80074c0 <_printf_common+0x48>
 80074b2:	f104 0a19 	add.w	sl, r4, #25
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	6832      	ldr	r2, [r6, #0]
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	42ab      	cmp	r3, r5
 80074be:	dc28      	bgt.n	8007512 <_printf_common+0x9a>
 80074c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c4:	1e13      	subs	r3, r2, #0
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	bf18      	it	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	0692      	lsls	r2, r2, #26
 80074ce:	d42d      	bmi.n	800752c <_printf_common+0xb4>
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d8:	47c0      	blx	r8
 80074da:	3001      	adds	r0, #1
 80074dc:	d020      	beq.n	8007520 <_printf_common+0xa8>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	68e5      	ldr	r5, [r4, #12]
 80074e2:	f003 0306 	and.w	r3, r3, #6
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	bf18      	it	ne
 80074ea:	2500      	movne	r5, #0
 80074ec:	6832      	ldr	r2, [r6, #0]
 80074ee:	f04f 0600 	mov.w	r6, #0
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	bf08      	it	eq
 80074f6:	1aad      	subeq	r5, r5, r2
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	bf08      	it	eq
 80074fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007500:	4293      	cmp	r3, r2
 8007502:	bfc4      	itt	gt
 8007504:	1a9b      	subgt	r3, r3, r2
 8007506:	18ed      	addgt	r5, r5, r3
 8007508:	341a      	adds	r4, #26
 800750a:	42b5      	cmp	r5, r6
 800750c:	d11a      	bne.n	8007544 <_printf_common+0xcc>
 800750e:	2000      	movs	r0, #0
 8007510:	e008      	b.n	8007524 <_printf_common+0xac>
 8007512:	2301      	movs	r3, #1
 8007514:	4652      	mov	r2, sl
 8007516:	4649      	mov	r1, r9
 8007518:	4638      	mov	r0, r7
 800751a:	47c0      	blx	r8
 800751c:	3001      	adds	r0, #1
 800751e:	d103      	bne.n	8007528 <_printf_common+0xb0>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	3501      	adds	r5, #1
 800752a:	e7c4      	b.n	80074b6 <_printf_common+0x3e>
 800752c:	2030      	movs	r0, #48	; 0x30
 800752e:	18e1      	adds	r1, r4, r3
 8007530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800753a:	4422      	add	r2, r4
 800753c:	3302      	adds	r3, #2
 800753e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007542:	e7c5      	b.n	80074d0 <_printf_common+0x58>
 8007544:	2301      	movs	r3, #1
 8007546:	4622      	mov	r2, r4
 8007548:	4649      	mov	r1, r9
 800754a:	4638      	mov	r0, r7
 800754c:	47c0      	blx	r8
 800754e:	3001      	adds	r0, #1
 8007550:	d0e6      	beq.n	8007520 <_printf_common+0xa8>
 8007552:	3601      	adds	r6, #1
 8007554:	e7d9      	b.n	800750a <_printf_common+0x92>
	...

08007558 <_printf_i>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	7e0f      	ldrb	r7, [r1, #24]
 800755e:	4691      	mov	r9, r2
 8007560:	2f78      	cmp	r7, #120	; 0x78
 8007562:	4680      	mov	r8, r0
 8007564:	460c      	mov	r4, r1
 8007566:	469a      	mov	sl, r3
 8007568:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800756a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800756e:	d807      	bhi.n	8007580 <_printf_i+0x28>
 8007570:	2f62      	cmp	r7, #98	; 0x62
 8007572:	d80a      	bhi.n	800758a <_printf_i+0x32>
 8007574:	2f00      	cmp	r7, #0
 8007576:	f000 80d9 	beq.w	800772c <_printf_i+0x1d4>
 800757a:	2f58      	cmp	r7, #88	; 0x58
 800757c:	f000 80a4 	beq.w	80076c8 <_printf_i+0x170>
 8007580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007588:	e03a      	b.n	8007600 <_printf_i+0xa8>
 800758a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800758e:	2b15      	cmp	r3, #21
 8007590:	d8f6      	bhi.n	8007580 <_printf_i+0x28>
 8007592:	a101      	add	r1, pc, #4	; (adr r1, 8007598 <_printf_i+0x40>)
 8007594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007598:	080075f1 	.word	0x080075f1
 800759c:	08007605 	.word	0x08007605
 80075a0:	08007581 	.word	0x08007581
 80075a4:	08007581 	.word	0x08007581
 80075a8:	08007581 	.word	0x08007581
 80075ac:	08007581 	.word	0x08007581
 80075b0:	08007605 	.word	0x08007605
 80075b4:	08007581 	.word	0x08007581
 80075b8:	08007581 	.word	0x08007581
 80075bc:	08007581 	.word	0x08007581
 80075c0:	08007581 	.word	0x08007581
 80075c4:	08007713 	.word	0x08007713
 80075c8:	08007635 	.word	0x08007635
 80075cc:	080076f5 	.word	0x080076f5
 80075d0:	08007581 	.word	0x08007581
 80075d4:	08007581 	.word	0x08007581
 80075d8:	08007735 	.word	0x08007735
 80075dc:	08007581 	.word	0x08007581
 80075e0:	08007635 	.word	0x08007635
 80075e4:	08007581 	.word	0x08007581
 80075e8:	08007581 	.word	0x08007581
 80075ec:	080076fd 	.word	0x080076fd
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	1d1a      	adds	r2, r3, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	602a      	str	r2, [r5, #0]
 80075f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007600:	2301      	movs	r3, #1
 8007602:	e0a4      	b.n	800774e <_printf_i+0x1f6>
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	6829      	ldr	r1, [r5, #0]
 8007608:	0606      	lsls	r6, r0, #24
 800760a:	f101 0304 	add.w	r3, r1, #4
 800760e:	d50a      	bpl.n	8007626 <_printf_i+0xce>
 8007610:	680e      	ldr	r6, [r1, #0]
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	2e00      	cmp	r6, #0
 8007616:	da03      	bge.n	8007620 <_printf_i+0xc8>
 8007618:	232d      	movs	r3, #45	; 0x2d
 800761a:	4276      	negs	r6, r6
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007620:	230a      	movs	r3, #10
 8007622:	485e      	ldr	r0, [pc, #376]	; (800779c <_printf_i+0x244>)
 8007624:	e019      	b.n	800765a <_printf_i+0x102>
 8007626:	680e      	ldr	r6, [r1, #0]
 8007628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	bf18      	it	ne
 8007630:	b236      	sxthne	r6, r6
 8007632:	e7ef      	b.n	8007614 <_printf_i+0xbc>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	6820      	ldr	r0, [r4, #0]
 8007638:	1d19      	adds	r1, r3, #4
 800763a:	6029      	str	r1, [r5, #0]
 800763c:	0601      	lsls	r1, r0, #24
 800763e:	d501      	bpl.n	8007644 <_printf_i+0xec>
 8007640:	681e      	ldr	r6, [r3, #0]
 8007642:	e002      	b.n	800764a <_printf_i+0xf2>
 8007644:	0646      	lsls	r6, r0, #25
 8007646:	d5fb      	bpl.n	8007640 <_printf_i+0xe8>
 8007648:	881e      	ldrh	r6, [r3, #0]
 800764a:	2f6f      	cmp	r7, #111	; 0x6f
 800764c:	bf0c      	ite	eq
 800764e:	2308      	moveq	r3, #8
 8007650:	230a      	movne	r3, #10
 8007652:	4852      	ldr	r0, [pc, #328]	; (800779c <_printf_i+0x244>)
 8007654:	2100      	movs	r1, #0
 8007656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800765a:	6865      	ldr	r5, [r4, #4]
 800765c:	2d00      	cmp	r5, #0
 800765e:	bfa8      	it	ge
 8007660:	6821      	ldrge	r1, [r4, #0]
 8007662:	60a5      	str	r5, [r4, #8]
 8007664:	bfa4      	itt	ge
 8007666:	f021 0104 	bicge.w	r1, r1, #4
 800766a:	6021      	strge	r1, [r4, #0]
 800766c:	b90e      	cbnz	r6, 8007672 <_printf_i+0x11a>
 800766e:	2d00      	cmp	r5, #0
 8007670:	d04d      	beq.n	800770e <_printf_i+0x1b6>
 8007672:	4615      	mov	r5, r2
 8007674:	fbb6 f1f3 	udiv	r1, r6, r3
 8007678:	fb03 6711 	mls	r7, r3, r1, r6
 800767c:	5dc7      	ldrb	r7, [r0, r7]
 800767e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007682:	4637      	mov	r7, r6
 8007684:	42bb      	cmp	r3, r7
 8007686:	460e      	mov	r6, r1
 8007688:	d9f4      	bls.n	8007674 <_printf_i+0x11c>
 800768a:	2b08      	cmp	r3, #8
 800768c:	d10b      	bne.n	80076a6 <_printf_i+0x14e>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	07de      	lsls	r6, r3, #31
 8007692:	d508      	bpl.n	80076a6 <_printf_i+0x14e>
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	6861      	ldr	r1, [r4, #4]
 8007698:	4299      	cmp	r1, r3
 800769a:	bfde      	ittt	le
 800769c:	2330      	movle	r3, #48	; 0x30
 800769e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80076a6:	1b52      	subs	r2, r2, r5
 80076a8:	6122      	str	r2, [r4, #16]
 80076aa:	464b      	mov	r3, r9
 80076ac:	4621      	mov	r1, r4
 80076ae:	4640      	mov	r0, r8
 80076b0:	f8cd a000 	str.w	sl, [sp]
 80076b4:	aa03      	add	r2, sp, #12
 80076b6:	f7ff fedf 	bl	8007478 <_printf_common>
 80076ba:	3001      	adds	r0, #1
 80076bc:	d14c      	bne.n	8007758 <_printf_i+0x200>
 80076be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c2:	b004      	add	sp, #16
 80076c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c8:	4834      	ldr	r0, [pc, #208]	; (800779c <_printf_i+0x244>)
 80076ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076ce:	6829      	ldr	r1, [r5, #0]
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80076d6:	6029      	str	r1, [r5, #0]
 80076d8:	061d      	lsls	r5, r3, #24
 80076da:	d514      	bpl.n	8007706 <_printf_i+0x1ae>
 80076dc:	07df      	lsls	r7, r3, #31
 80076de:	bf44      	itt	mi
 80076e0:	f043 0320 	orrmi.w	r3, r3, #32
 80076e4:	6023      	strmi	r3, [r4, #0]
 80076e6:	b91e      	cbnz	r6, 80076f0 <_printf_i+0x198>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	f023 0320 	bic.w	r3, r3, #32
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	2310      	movs	r3, #16
 80076f2:	e7af      	b.n	8007654 <_printf_i+0xfc>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	f043 0320 	orr.w	r3, r3, #32
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	2378      	movs	r3, #120	; 0x78
 80076fe:	4828      	ldr	r0, [pc, #160]	; (80077a0 <_printf_i+0x248>)
 8007700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007704:	e7e3      	b.n	80076ce <_printf_i+0x176>
 8007706:	0659      	lsls	r1, r3, #25
 8007708:	bf48      	it	mi
 800770a:	b2b6      	uxthmi	r6, r6
 800770c:	e7e6      	b.n	80076dc <_printf_i+0x184>
 800770e:	4615      	mov	r5, r2
 8007710:	e7bb      	b.n	800768a <_printf_i+0x132>
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	6826      	ldr	r6, [r4, #0]
 8007716:	1d18      	adds	r0, r3, #4
 8007718:	6961      	ldr	r1, [r4, #20]
 800771a:	6028      	str	r0, [r5, #0]
 800771c:	0635      	lsls	r5, r6, #24
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	d501      	bpl.n	8007726 <_printf_i+0x1ce>
 8007722:	6019      	str	r1, [r3, #0]
 8007724:	e002      	b.n	800772c <_printf_i+0x1d4>
 8007726:	0670      	lsls	r0, r6, #25
 8007728:	d5fb      	bpl.n	8007722 <_printf_i+0x1ca>
 800772a:	8019      	strh	r1, [r3, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	4615      	mov	r5, r2
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	e7ba      	b.n	80076aa <_printf_i+0x152>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	2100      	movs	r1, #0
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	602a      	str	r2, [r5, #0]
 800773c:	681d      	ldr	r5, [r3, #0]
 800773e:	6862      	ldr	r2, [r4, #4]
 8007740:	4628      	mov	r0, r5
 8007742:	f000 ff4f 	bl	80085e4 <memchr>
 8007746:	b108      	cbz	r0, 800774c <_printf_i+0x1f4>
 8007748:	1b40      	subs	r0, r0, r5
 800774a:	6060      	str	r0, [r4, #4]
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	2300      	movs	r3, #0
 8007752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007756:	e7a8      	b.n	80076aa <_printf_i+0x152>
 8007758:	462a      	mov	r2, r5
 800775a:	4649      	mov	r1, r9
 800775c:	4640      	mov	r0, r8
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	47d0      	blx	sl
 8007762:	3001      	adds	r0, #1
 8007764:	d0ab      	beq.n	80076be <_printf_i+0x166>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	079b      	lsls	r3, r3, #30
 800776a:	d413      	bmi.n	8007794 <_printf_i+0x23c>
 800776c:	68e0      	ldr	r0, [r4, #12]
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	4298      	cmp	r0, r3
 8007772:	bfb8      	it	lt
 8007774:	4618      	movlt	r0, r3
 8007776:	e7a4      	b.n	80076c2 <_printf_i+0x16a>
 8007778:	2301      	movs	r3, #1
 800777a:	4632      	mov	r2, r6
 800777c:	4649      	mov	r1, r9
 800777e:	4640      	mov	r0, r8
 8007780:	47d0      	blx	sl
 8007782:	3001      	adds	r0, #1
 8007784:	d09b      	beq.n	80076be <_printf_i+0x166>
 8007786:	3501      	adds	r5, #1
 8007788:	68e3      	ldr	r3, [r4, #12]
 800778a:	9903      	ldr	r1, [sp, #12]
 800778c:	1a5b      	subs	r3, r3, r1
 800778e:	42ab      	cmp	r3, r5
 8007790:	dcf2      	bgt.n	8007778 <_printf_i+0x220>
 8007792:	e7eb      	b.n	800776c <_printf_i+0x214>
 8007794:	2500      	movs	r5, #0
 8007796:	f104 0619 	add.w	r6, r4, #25
 800779a:	e7f5      	b.n	8007788 <_printf_i+0x230>
 800779c:	08009a86 	.word	0x08009a86
 80077a0:	08009a97 	.word	0x08009a97

080077a4 <strncmp>:
 80077a4:	4603      	mov	r3, r0
 80077a6:	b510      	push	{r4, lr}
 80077a8:	b172      	cbz	r2, 80077c8 <strncmp+0x24>
 80077aa:	3901      	subs	r1, #1
 80077ac:	1884      	adds	r4, r0, r2
 80077ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077b6:	4290      	cmp	r0, r2
 80077b8:	d101      	bne.n	80077be <strncmp+0x1a>
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d101      	bne.n	80077c2 <strncmp+0x1e>
 80077be:	1a80      	subs	r0, r0, r2
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1f3      	bne.n	80077ae <strncmp+0xa>
 80077c6:	e7fa      	b.n	80077be <strncmp+0x1a>
 80077c8:	4610      	mov	r0, r2
 80077ca:	e7f9      	b.n	80077c0 <strncmp+0x1c>

080077cc <_strtol_l.constprop.0>:
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d2:	4680      	mov	r8, r0
 80077d4:	d001      	beq.n	80077da <_strtol_l.constprop.0+0xe>
 80077d6:	2b24      	cmp	r3, #36	; 0x24
 80077d8:	d906      	bls.n	80077e8 <_strtol_l.constprop.0+0x1c>
 80077da:	f7ff fb51 	bl	8006e80 <__errno>
 80077de:	2316      	movs	r3, #22
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	2000      	movs	r0, #0
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	460d      	mov	r5, r1
 80077ea:	4f35      	ldr	r7, [pc, #212]	; (80078c0 <_strtol_l.constprop.0+0xf4>)
 80077ec:	4628      	mov	r0, r5
 80077ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077f2:	5de6      	ldrb	r6, [r4, r7]
 80077f4:	f016 0608 	ands.w	r6, r6, #8
 80077f8:	d1f8      	bne.n	80077ec <_strtol_l.constprop.0+0x20>
 80077fa:	2c2d      	cmp	r4, #45	; 0x2d
 80077fc:	d12f      	bne.n	800785e <_strtol_l.constprop.0+0x92>
 80077fe:	2601      	movs	r6, #1
 8007800:	782c      	ldrb	r4, [r5, #0]
 8007802:	1c85      	adds	r5, r0, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d057      	beq.n	80078b8 <_strtol_l.constprop.0+0xec>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d109      	bne.n	8007820 <_strtol_l.constprop.0+0x54>
 800780c:	2c30      	cmp	r4, #48	; 0x30
 800780e:	d107      	bne.n	8007820 <_strtol_l.constprop.0+0x54>
 8007810:	7828      	ldrb	r0, [r5, #0]
 8007812:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007816:	2858      	cmp	r0, #88	; 0x58
 8007818:	d149      	bne.n	80078ae <_strtol_l.constprop.0+0xe2>
 800781a:	2310      	movs	r3, #16
 800781c:	786c      	ldrb	r4, [r5, #1]
 800781e:	3502      	adds	r5, #2
 8007820:	2700      	movs	r7, #0
 8007822:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007826:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800782a:	fbbe f9f3 	udiv	r9, lr, r3
 800782e:	4638      	mov	r0, r7
 8007830:	fb03 ea19 	mls	sl, r3, r9, lr
 8007834:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007838:	f1bc 0f09 	cmp.w	ip, #9
 800783c:	d814      	bhi.n	8007868 <_strtol_l.constprop.0+0x9c>
 800783e:	4664      	mov	r4, ip
 8007840:	42a3      	cmp	r3, r4
 8007842:	dd22      	ble.n	800788a <_strtol_l.constprop.0+0xbe>
 8007844:	2f00      	cmp	r7, #0
 8007846:	db1d      	blt.n	8007884 <_strtol_l.constprop.0+0xb8>
 8007848:	4581      	cmp	r9, r0
 800784a:	d31b      	bcc.n	8007884 <_strtol_l.constprop.0+0xb8>
 800784c:	d101      	bne.n	8007852 <_strtol_l.constprop.0+0x86>
 800784e:	45a2      	cmp	sl, r4
 8007850:	db18      	blt.n	8007884 <_strtol_l.constprop.0+0xb8>
 8007852:	2701      	movs	r7, #1
 8007854:	fb00 4003 	mla	r0, r0, r3, r4
 8007858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800785c:	e7ea      	b.n	8007834 <_strtol_l.constprop.0+0x68>
 800785e:	2c2b      	cmp	r4, #43	; 0x2b
 8007860:	bf04      	itt	eq
 8007862:	782c      	ldrbeq	r4, [r5, #0]
 8007864:	1c85      	addeq	r5, r0, #2
 8007866:	e7cd      	b.n	8007804 <_strtol_l.constprop.0+0x38>
 8007868:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800786c:	f1bc 0f19 	cmp.w	ip, #25
 8007870:	d801      	bhi.n	8007876 <_strtol_l.constprop.0+0xaa>
 8007872:	3c37      	subs	r4, #55	; 0x37
 8007874:	e7e4      	b.n	8007840 <_strtol_l.constprop.0+0x74>
 8007876:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800787a:	f1bc 0f19 	cmp.w	ip, #25
 800787e:	d804      	bhi.n	800788a <_strtol_l.constprop.0+0xbe>
 8007880:	3c57      	subs	r4, #87	; 0x57
 8007882:	e7dd      	b.n	8007840 <_strtol_l.constprop.0+0x74>
 8007884:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007888:	e7e6      	b.n	8007858 <_strtol_l.constprop.0+0x8c>
 800788a:	2f00      	cmp	r7, #0
 800788c:	da07      	bge.n	800789e <_strtol_l.constprop.0+0xd2>
 800788e:	2322      	movs	r3, #34	; 0x22
 8007890:	4670      	mov	r0, lr
 8007892:	f8c8 3000 	str.w	r3, [r8]
 8007896:	2a00      	cmp	r2, #0
 8007898:	d0a4      	beq.n	80077e4 <_strtol_l.constprop.0+0x18>
 800789a:	1e69      	subs	r1, r5, #1
 800789c:	e005      	b.n	80078aa <_strtol_l.constprop.0+0xde>
 800789e:	b106      	cbz	r6, 80078a2 <_strtol_l.constprop.0+0xd6>
 80078a0:	4240      	negs	r0, r0
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d09e      	beq.n	80077e4 <_strtol_l.constprop.0+0x18>
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	d1f7      	bne.n	800789a <_strtol_l.constprop.0+0xce>
 80078aa:	6011      	str	r1, [r2, #0]
 80078ac:	e79a      	b.n	80077e4 <_strtol_l.constprop.0+0x18>
 80078ae:	2430      	movs	r4, #48	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1b5      	bne.n	8007820 <_strtol_l.constprop.0+0x54>
 80078b4:	2308      	movs	r3, #8
 80078b6:	e7b3      	b.n	8007820 <_strtol_l.constprop.0+0x54>
 80078b8:	2c30      	cmp	r4, #48	; 0x30
 80078ba:	d0a9      	beq.n	8007810 <_strtol_l.constprop.0+0x44>
 80078bc:	230a      	movs	r3, #10
 80078be:	e7af      	b.n	8007820 <_strtol_l.constprop.0+0x54>
 80078c0:	08009aa9 	.word	0x08009aa9

080078c4 <strtol>:
 80078c4:	4613      	mov	r3, r2
 80078c6:	460a      	mov	r2, r1
 80078c8:	4601      	mov	r1, r0
 80078ca:	4802      	ldr	r0, [pc, #8]	; (80078d4 <strtol+0x10>)
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f7ff bf7d 	b.w	80077cc <_strtol_l.constprop.0>
 80078d2:	bf00      	nop
 80078d4:	200000f0 	.word	0x200000f0

080078d8 <quorem>:
 80078d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	6903      	ldr	r3, [r0, #16]
 80078de:	690c      	ldr	r4, [r1, #16]
 80078e0:	4607      	mov	r7, r0
 80078e2:	42a3      	cmp	r3, r4
 80078e4:	f2c0 8082 	blt.w	80079ec <quorem+0x114>
 80078e8:	3c01      	subs	r4, #1
 80078ea:	f100 0514 	add.w	r5, r0, #20
 80078ee:	f101 0814 	add.w	r8, r1, #20
 80078f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007900:	3301      	adds	r3, #1
 8007902:	429a      	cmp	r2, r3
 8007904:	fbb2 f6f3 	udiv	r6, r2, r3
 8007908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800790c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007910:	d331      	bcc.n	8007976 <quorem+0x9e>
 8007912:	f04f 0e00 	mov.w	lr, #0
 8007916:	4640      	mov	r0, r8
 8007918:	46ac      	mov	ip, r5
 800791a:	46f2      	mov	sl, lr
 800791c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007920:	b293      	uxth	r3, r2
 8007922:	fb06 e303 	mla	r3, r6, r3, lr
 8007926:	0c12      	lsrs	r2, r2, #16
 8007928:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800792c:	b29b      	uxth	r3, r3
 800792e:	fb06 e202 	mla	r2, r6, r2, lr
 8007932:	ebaa 0303 	sub.w	r3, sl, r3
 8007936:	f8dc a000 	ldr.w	sl, [ip]
 800793a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800793e:	fa1f fa8a 	uxth.w	sl, sl
 8007942:	4453      	add	r3, sl
 8007944:	f8dc a000 	ldr.w	sl, [ip]
 8007948:	b292      	uxth	r2, r2
 800794a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800794e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007952:	b29b      	uxth	r3, r3
 8007954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007958:	4581      	cmp	r9, r0
 800795a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800795e:	f84c 3b04 	str.w	r3, [ip], #4
 8007962:	d2db      	bcs.n	800791c <quorem+0x44>
 8007964:	f855 300b 	ldr.w	r3, [r5, fp]
 8007968:	b92b      	cbnz	r3, 8007976 <quorem+0x9e>
 800796a:	9b01      	ldr	r3, [sp, #4]
 800796c:	3b04      	subs	r3, #4
 800796e:	429d      	cmp	r5, r3
 8007970:	461a      	mov	r2, r3
 8007972:	d32f      	bcc.n	80079d4 <quorem+0xfc>
 8007974:	613c      	str	r4, [r7, #16]
 8007976:	4638      	mov	r0, r7
 8007978:	f001 f8ce 	bl	8008b18 <__mcmp>
 800797c:	2800      	cmp	r0, #0
 800797e:	db25      	blt.n	80079cc <quorem+0xf4>
 8007980:	4628      	mov	r0, r5
 8007982:	f04f 0c00 	mov.w	ip, #0
 8007986:	3601      	adds	r6, #1
 8007988:	f858 1b04 	ldr.w	r1, [r8], #4
 800798c:	f8d0 e000 	ldr.w	lr, [r0]
 8007990:	b28b      	uxth	r3, r1
 8007992:	ebac 0303 	sub.w	r3, ip, r3
 8007996:	fa1f f28e 	uxth.w	r2, lr
 800799a:	4413      	add	r3, r2
 800799c:	0c0a      	lsrs	r2, r1, #16
 800799e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ac:	45c1      	cmp	r9, r8
 80079ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079b2:	f840 3b04 	str.w	r3, [r0], #4
 80079b6:	d2e7      	bcs.n	8007988 <quorem+0xb0>
 80079b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c0:	b922      	cbnz	r2, 80079cc <quorem+0xf4>
 80079c2:	3b04      	subs	r3, #4
 80079c4:	429d      	cmp	r5, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	d30a      	bcc.n	80079e0 <quorem+0x108>
 80079ca:	613c      	str	r4, [r7, #16]
 80079cc:	4630      	mov	r0, r6
 80079ce:	b003      	add	sp, #12
 80079d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	3b04      	subs	r3, #4
 80079d8:	2a00      	cmp	r2, #0
 80079da:	d1cb      	bne.n	8007974 <quorem+0x9c>
 80079dc:	3c01      	subs	r4, #1
 80079de:	e7c6      	b.n	800796e <quorem+0x96>
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	3b04      	subs	r3, #4
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d1f0      	bne.n	80079ca <quorem+0xf2>
 80079e8:	3c01      	subs	r4, #1
 80079ea:	e7eb      	b.n	80079c4 <quorem+0xec>
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7ee      	b.n	80079ce <quorem+0xf6>

080079f0 <_dtoa_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	4616      	mov	r6, r2
 80079f6:	461f      	mov	r7, r3
 80079f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079fa:	b099      	sub	sp, #100	; 0x64
 80079fc:	4605      	mov	r5, r0
 80079fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007a06:	b974      	cbnz	r4, 8007a26 <_dtoa_r+0x36>
 8007a08:	2010      	movs	r0, #16
 8007a0a:	f000 fde3 	bl	80085d4 <malloc>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6268      	str	r0, [r5, #36]	; 0x24
 8007a12:	b920      	cbnz	r0, 8007a1e <_dtoa_r+0x2e>
 8007a14:	21ea      	movs	r1, #234	; 0xea
 8007a16:	4ba8      	ldr	r3, [pc, #672]	; (8007cb8 <_dtoa_r+0x2c8>)
 8007a18:	48a8      	ldr	r0, [pc, #672]	; (8007cbc <_dtoa_r+0x2cc>)
 8007a1a:	f001 fa81 	bl	8008f20 <__assert_func>
 8007a1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a22:	6004      	str	r4, [r0, #0]
 8007a24:	60c4      	str	r4, [r0, #12]
 8007a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a28:	6819      	ldr	r1, [r3, #0]
 8007a2a:	b151      	cbz	r1, 8007a42 <_dtoa_r+0x52>
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4093      	lsls	r3, r2
 8007a32:	604a      	str	r2, [r1, #4]
 8007a34:	608b      	str	r3, [r1, #8]
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fe30 	bl	800869c <_Bfree>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	1e3b      	subs	r3, r7, #0
 8007a44:	bfaf      	iteee	ge
 8007a46:	2300      	movge	r3, #0
 8007a48:	2201      	movlt	r2, #1
 8007a4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	9305      	strlt	r3, [sp, #20]
 8007a50:	bfa8      	it	ge
 8007a52:	f8c8 3000 	strge.w	r3, [r8]
 8007a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a5a:	4b99      	ldr	r3, [pc, #612]	; (8007cc0 <_dtoa_r+0x2d0>)
 8007a5c:	bfb8      	it	lt
 8007a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8007a62:	ea33 0309 	bics.w	r3, r3, r9
 8007a66:	d119      	bne.n	8007a9c <_dtoa_r+0xac>
 8007a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a74:	4333      	orrs	r3, r6
 8007a76:	f000 857f 	beq.w	8008578 <_dtoa_r+0xb88>
 8007a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a7c:	b953      	cbnz	r3, 8007a94 <_dtoa_r+0xa4>
 8007a7e:	4b91      	ldr	r3, [pc, #580]	; (8007cc4 <_dtoa_r+0x2d4>)
 8007a80:	e022      	b.n	8007ac8 <_dtoa_r+0xd8>
 8007a82:	4b91      	ldr	r3, [pc, #580]	; (8007cc8 <_dtoa_r+0x2d8>)
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	3308      	adds	r3, #8
 8007a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	9803      	ldr	r0, [sp, #12]
 8007a8e:	b019      	add	sp, #100	; 0x64
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	4b8b      	ldr	r3, [pc, #556]	; (8007cc4 <_dtoa_r+0x2d4>)
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	3303      	adds	r3, #3
 8007a9a:	e7f5      	b.n	8007a88 <_dtoa_r+0x98>
 8007a9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007aa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f7f8 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	b158      	cbz	r0, 8007acc <_dtoa_r+0xdc>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8558 	beq.w	8008572 <_dtoa_r+0xb82>
 8007ac2:	4882      	ldr	r0, [pc, #520]	; (8007ccc <_dtoa_r+0x2dc>)
 8007ac4:	6018      	str	r0, [r3, #0]
 8007ac6:	1e43      	subs	r3, r0, #1
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	e7df      	b.n	8007a8c <_dtoa_r+0x9c>
 8007acc:	ab16      	add	r3, sp, #88	; 0x58
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ada:	f001 f8c5 	bl	8008c68 <__d2b>
 8007ade:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ae2:	4683      	mov	fp, r0
 8007ae4:	2c00      	cmp	r4, #0
 8007ae6:	d07f      	beq.n	8007be8 <_dtoa_r+0x1f8>
 8007ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007afa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007afe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007b02:	2200      	movs	r2, #0
 8007b04:	4b72      	ldr	r3, [pc, #456]	; (8007cd0 <_dtoa_r+0x2e0>)
 8007b06:	f7f8 fb2f 	bl	8000168 <__aeabi_dsub>
 8007b0a:	a365      	add	r3, pc, #404	; (adr r3, 8007ca0 <_dtoa_r+0x2b0>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7f8 fce2 	bl	80004d8 <__aeabi_dmul>
 8007b14:	a364      	add	r3, pc, #400	; (adr r3, 8007ca8 <_dtoa_r+0x2b8>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f7f8 fb27 	bl	800016c <__adddf3>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	4620      	mov	r0, r4
 8007b22:	460f      	mov	r7, r1
 8007b24:	f7f8 fc6e 	bl	8000404 <__aeabi_i2d>
 8007b28:	a361      	add	r3, pc, #388	; (adr r3, 8007cb0 <_dtoa_r+0x2c0>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fcd3 	bl	80004d8 <__aeabi_dmul>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fb17 	bl	800016c <__adddf3>
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460f      	mov	r7, r1
 8007b42:	f7f8 ff79 	bl	8000a38 <__aeabi_d2iz>
 8007b46:	2200      	movs	r2, #0
 8007b48:	4682      	mov	sl, r0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	4639      	mov	r1, r7
 8007b50:	f7f8 ff34 	bl	80009bc <__aeabi_dcmplt>
 8007b54:	b148      	cbz	r0, 8007b6a <_dtoa_r+0x17a>
 8007b56:	4650      	mov	r0, sl
 8007b58:	f7f8 fc54 	bl	8000404 <__aeabi_i2d>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	f7f8 ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8007b64:	b908      	cbnz	r0, 8007b6a <_dtoa_r+0x17a>
 8007b66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b6a:	f1ba 0f16 	cmp.w	sl, #22
 8007b6e:	d858      	bhi.n	8007c22 <_dtoa_r+0x232>
 8007b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b74:	4b57      	ldr	r3, [pc, #348]	; (8007cd4 <_dtoa_r+0x2e4>)
 8007b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 ff1d 	bl	80009bc <__aeabi_dcmplt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d04f      	beq.n	8007c26 <_dtoa_r+0x236>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b90:	1b1c      	subs	r4, r3, r4
 8007b92:	1e63      	subs	r3, r4, #1
 8007b94:	9309      	str	r3, [sp, #36]	; 0x24
 8007b96:	bf49      	itett	mi
 8007b98:	f1c4 0301 	rsbmi	r3, r4, #1
 8007b9c:	2300      	movpl	r3, #0
 8007b9e:	9306      	strmi	r3, [sp, #24]
 8007ba0:	2300      	movmi	r3, #0
 8007ba2:	bf54      	ite	pl
 8007ba4:	9306      	strpl	r3, [sp, #24]
 8007ba6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ba8:	f1ba 0f00 	cmp.w	sl, #0
 8007bac:	db3d      	blt.n	8007c2a <_dtoa_r+0x23a>
 8007bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007bb4:	4453      	add	r3, sl
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	2300      	movs	r3, #0
 8007bba:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bbe:	2b09      	cmp	r3, #9
 8007bc0:	f200 808c 	bhi.w	8007cdc <_dtoa_r+0x2ec>
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	bfc4      	itt	gt
 8007bc8:	3b04      	subgt	r3, #4
 8007bca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bce:	bfc8      	it	gt
 8007bd0:	2400      	movgt	r4, #0
 8007bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bd6:	bfd8      	it	le
 8007bd8:	2401      	movle	r4, #1
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	f200 808a 	bhi.w	8007cf4 <_dtoa_r+0x304>
 8007be0:	e8df f003 	tbb	[pc, r3]
 8007be4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007be8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007bec:	441c      	add	r4, r3
 8007bee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	bfc3      	ittte	gt
 8007bf6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bfa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007bfe:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c02:	f1c3 0320 	rsble	r3, r3, #32
 8007c06:	bfc6      	itte	gt
 8007c08:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c0c:	4318      	orrgt	r0, r3
 8007c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007c12:	f7f8 fbe7 	bl	80003e4 <__aeabi_ui2d>
 8007c16:	2301      	movs	r3, #1
 8007c18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007c1c:	3c01      	subs	r4, #1
 8007c1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c20:	e76f      	b.n	8007b02 <_dtoa_r+0x112>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7b2      	b.n	8007b8c <_dtoa_r+0x19c>
 8007c26:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c28:	e7b1      	b.n	8007b8e <_dtoa_r+0x19e>
 8007c2a:	9b06      	ldr	r3, [sp, #24]
 8007c2c:	eba3 030a 	sub.w	r3, r3, sl
 8007c30:	9306      	str	r3, [sp, #24]
 8007c32:	f1ca 0300 	rsb	r3, sl, #0
 8007c36:	930a      	str	r3, [sp, #40]	; 0x28
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007c3c:	e7be      	b.n	8007bbc <_dtoa_r+0x1cc>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc58      	bgt.n	8007cfa <_dtoa_r+0x30a>
 8007c48:	f04f 0901 	mov.w	r9, #1
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007c56:	2200      	movs	r2, #0
 8007c58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007c5a:	6042      	str	r2, [r0, #4]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f102 0614 	add.w	r6, r2, #20
 8007c62:	429e      	cmp	r6, r3
 8007c64:	6841      	ldr	r1, [r0, #4]
 8007c66:	d94e      	bls.n	8007d06 <_dtoa_r+0x316>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fcd7 	bl	800861c <_Balloc>
 8007c6e:	9003      	str	r0, [sp, #12]
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d14c      	bne.n	8007d0e <_dtoa_r+0x31e>
 8007c74:	4602      	mov	r2, r0
 8007c76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c7a:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <_dtoa_r+0x2e8>)
 8007c7c:	e6cc      	b.n	8007a18 <_dtoa_r+0x28>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7de      	b.n	8007c40 <_dtoa_r+0x250>
 8007c82:	2300      	movs	r3, #0
 8007c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c88:	eb0a 0903 	add.w	r9, sl, r3
 8007c8c:	f109 0301 	add.w	r3, r9, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	9308      	str	r3, [sp, #32]
 8007c94:	bfb8      	it	lt
 8007c96:	2301      	movlt	r3, #1
 8007c98:	e7dd      	b.n	8007c56 <_dtoa_r+0x266>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f2      	b.n	8007c84 <_dtoa_r+0x294>
 8007c9e:	bf00      	nop
 8007ca0:	636f4361 	.word	0x636f4361
 8007ca4:	3fd287a7 	.word	0x3fd287a7
 8007ca8:	8b60c8b3 	.word	0x8b60c8b3
 8007cac:	3fc68a28 	.word	0x3fc68a28
 8007cb0:	509f79fb 	.word	0x509f79fb
 8007cb4:	3fd34413 	.word	0x3fd34413
 8007cb8:	08009bb6 	.word	0x08009bb6
 8007cbc:	08009bcd 	.word	0x08009bcd
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	08009bb2 	.word	0x08009bb2
 8007cc8:	08009ba9 	.word	0x08009ba9
 8007ccc:	08009a85 	.word	0x08009a85
 8007cd0:	3ff80000 	.word	0x3ff80000
 8007cd4:	08009cc0 	.word	0x08009cc0
 8007cd8:	08009c28 	.word	0x08009c28
 8007cdc:	2401      	movs	r4, #1
 8007cde:	2300      	movs	r3, #0
 8007ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ce2:	9322      	str	r3, [sp, #136]	; 0x88
 8007ce4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2312      	movs	r3, #18
 8007cec:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007cf2:	e7b0      	b.n	8007c56 <_dtoa_r+0x266>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf8:	e7f4      	b.n	8007ce4 <_dtoa_r+0x2f4>
 8007cfa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007cfe:	464b      	mov	r3, r9
 8007d00:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d04:	e7a7      	b.n	8007c56 <_dtoa_r+0x266>
 8007d06:	3101      	adds	r1, #1
 8007d08:	6041      	str	r1, [r0, #4]
 8007d0a:	0052      	lsls	r2, r2, #1
 8007d0c:	e7a7      	b.n	8007c5e <_dtoa_r+0x26e>
 8007d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d10:	9a03      	ldr	r2, [sp, #12]
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	2b0e      	cmp	r3, #14
 8007d18:	f200 80a8 	bhi.w	8007e6c <_dtoa_r+0x47c>
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	f000 80a5 	beq.w	8007e6c <_dtoa_r+0x47c>
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	dd34      	ble.n	8007d92 <_dtoa_r+0x3a2>
 8007d28:	4a9a      	ldr	r2, [pc, #616]	; (8007f94 <_dtoa_r+0x5a4>)
 8007d2a:	f00a 030f 	and.w	r3, sl, #15
 8007d2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d32:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d3e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007d42:	d016      	beq.n	8007d72 <_dtoa_r+0x382>
 8007d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d48:	4b93      	ldr	r3, [pc, #588]	; (8007f98 <_dtoa_r+0x5a8>)
 8007d4a:	2703      	movs	r7, #3
 8007d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d50:	f7f8 fcec 	bl	800072c <__aeabi_ddiv>
 8007d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d58:	f004 040f 	and.w	r4, r4, #15
 8007d5c:	4e8e      	ldr	r6, [pc, #568]	; (8007f98 <_dtoa_r+0x5a8>)
 8007d5e:	b954      	cbnz	r4, 8007d76 <_dtoa_r+0x386>
 8007d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d68:	f7f8 fce0 	bl	800072c <__aeabi_ddiv>
 8007d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d70:	e029      	b.n	8007dc6 <_dtoa_r+0x3d6>
 8007d72:	2702      	movs	r7, #2
 8007d74:	e7f2      	b.n	8007d5c <_dtoa_r+0x36c>
 8007d76:	07e1      	lsls	r1, r4, #31
 8007d78:	d508      	bpl.n	8007d8c <_dtoa_r+0x39c>
 8007d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d82:	f7f8 fba9 	bl	80004d8 <__aeabi_dmul>
 8007d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d8a:	3701      	adds	r7, #1
 8007d8c:	1064      	asrs	r4, r4, #1
 8007d8e:	3608      	adds	r6, #8
 8007d90:	e7e5      	b.n	8007d5e <_dtoa_r+0x36e>
 8007d92:	f000 80a5 	beq.w	8007ee0 <_dtoa_r+0x4f0>
 8007d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d9a:	f1ca 0400 	rsb	r4, sl, #0
 8007d9e:	4b7d      	ldr	r3, [pc, #500]	; (8007f94 <_dtoa_r+0x5a4>)
 8007da0:	f004 020f 	and.w	r2, r4, #15
 8007da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fb94 	bl	80004d8 <__aeabi_dmul>
 8007db0:	2702      	movs	r7, #2
 8007db2:	2300      	movs	r3, #0
 8007db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db8:	4e77      	ldr	r6, [pc, #476]	; (8007f98 <_dtoa_r+0x5a8>)
 8007dba:	1124      	asrs	r4, r4, #4
 8007dbc:	2c00      	cmp	r4, #0
 8007dbe:	f040 8084 	bne.w	8007eca <_dtoa_r+0x4da>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1d2      	bne.n	8007d6c <_dtoa_r+0x37c>
 8007dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 808b 	beq.w	8007ee4 <_dtoa_r+0x4f4>
 8007dce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b6f      	ldr	r3, [pc, #444]	; (8007f9c <_dtoa_r+0x5ac>)
 8007dde:	f7f8 fded 	bl	80009bc <__aeabi_dcmplt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d07e      	beq.n	8007ee4 <_dtoa_r+0x4f4>
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d07b      	beq.n	8007ee4 <_dtoa_r+0x4f4>
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	dd38      	ble.n	8007e64 <_dtoa_r+0x474>
 8007df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007df6:	2200      	movs	r2, #0
 8007df8:	4b69      	ldr	r3, [pc, #420]	; (8007fa0 <_dtoa_r+0x5b0>)
 8007dfa:	f7f8 fb6d 	bl	80004d8 <__aeabi_dmul>
 8007dfe:	464c      	mov	r4, r9
 8007e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e04:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007e08:	3701      	adds	r7, #1
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f7f8 fafa 	bl	8000404 <__aeabi_i2d>
 8007e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e14:	f7f8 fb60 	bl	80004d8 <__aeabi_dmul>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4b62      	ldr	r3, [pc, #392]	; (8007fa4 <_dtoa_r+0x5b4>)
 8007e1c:	f7f8 f9a6 	bl	800016c <__adddf3>
 8007e20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e28:	9611      	str	r6, [sp, #68]	; 0x44
 8007e2a:	2c00      	cmp	r4, #0
 8007e2c:	d15d      	bne.n	8007eea <_dtoa_r+0x4fa>
 8007e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b5c      	ldr	r3, [pc, #368]	; (8007fa8 <_dtoa_r+0x5b8>)
 8007e36:	f7f8 f997 	bl	8000168 <__aeabi_dsub>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e42:	4633      	mov	r3, r6
 8007e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e46:	f7f8 fdd7 	bl	80009f8 <__aeabi_dcmpgt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f040 829c 	bne.w	8008388 <_dtoa_r+0x998>
 8007e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e5a:	f7f8 fdaf 	bl	80009bc <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f040 8290 	bne.w	8008384 <_dtoa_r+0x994>
 8007e64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f2c0 8152 	blt.w	8008118 <_dtoa_r+0x728>
 8007e74:	f1ba 0f0e 	cmp.w	sl, #14
 8007e78:	f300 814e 	bgt.w	8008118 <_dtoa_r+0x728>
 8007e7c:	4b45      	ldr	r3, [pc, #276]	; (8007f94 <_dtoa_r+0x5a4>)
 8007e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f280 80db 	bge.w	8008048 <_dtoa_r+0x658>
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f300 80d7 	bgt.w	8008048 <_dtoa_r+0x658>
 8007e9a:	f040 8272 	bne.w	8008382 <_dtoa_r+0x992>
 8007e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4b40      	ldr	r3, [pc, #256]	; (8007fa8 <_dtoa_r+0x5b8>)
 8007ea6:	f7f8 fb17 	bl	80004d8 <__aeabi_dmul>
 8007eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eae:	f7f8 fd99 	bl	80009e4 <__aeabi_dcmpge>
 8007eb2:	9c08      	ldr	r4, [sp, #32]
 8007eb4:	4626      	mov	r6, r4
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8248 	bne.w	800834c <_dtoa_r+0x95c>
 8007ebc:	2331      	movs	r3, #49	; 0x31
 8007ebe:	9f03      	ldr	r7, [sp, #12]
 8007ec0:	f10a 0a01 	add.w	sl, sl, #1
 8007ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8007ec8:	e244      	b.n	8008354 <_dtoa_r+0x964>
 8007eca:	07e2      	lsls	r2, r4, #31
 8007ecc:	d505      	bpl.n	8007eda <_dtoa_r+0x4ea>
 8007ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ed2:	f7f8 fb01 	bl	80004d8 <__aeabi_dmul>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	3701      	adds	r7, #1
 8007eda:	1064      	asrs	r4, r4, #1
 8007edc:	3608      	adds	r6, #8
 8007ede:	e76d      	b.n	8007dbc <_dtoa_r+0x3cc>
 8007ee0:	2702      	movs	r7, #2
 8007ee2:	e770      	b.n	8007dc6 <_dtoa_r+0x3d6>
 8007ee4:	46d0      	mov	r8, sl
 8007ee6:	9c08      	ldr	r4, [sp, #32]
 8007ee8:	e78f      	b.n	8007e0a <_dtoa_r+0x41a>
 8007eea:	9903      	ldr	r1, [sp, #12]
 8007eec:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <_dtoa_r+0x5a4>)
 8007eee:	4421      	add	r1, r4
 8007ef0:	9112      	str	r1, [sp, #72]	; 0x48
 8007ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d055      	beq.n	8007fb0 <_dtoa_r+0x5c0>
 8007f04:	2000      	movs	r0, #0
 8007f06:	4929      	ldr	r1, [pc, #164]	; (8007fac <_dtoa_r+0x5bc>)
 8007f08:	f7f8 fc10 	bl	800072c <__aeabi_ddiv>
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	4632      	mov	r2, r6
 8007f10:	f7f8 f92a 	bl	8000168 <__aeabi_dsub>
 8007f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f18:	9f03      	ldr	r7, [sp, #12]
 8007f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f1e:	f7f8 fd8b 	bl	8000a38 <__aeabi_d2iz>
 8007f22:	4604      	mov	r4, r0
 8007f24:	f7f8 fa6e 	bl	8000404 <__aeabi_i2d>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f30:	f7f8 f91a 	bl	8000168 <__aeabi_dsub>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	3430      	adds	r4, #48	; 0x30
 8007f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f42:	f807 4b01 	strb.w	r4, [r7], #1
 8007f46:	f7f8 fd39 	bl	80009bc <__aeabi_dcmplt>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d174      	bne.n	8008038 <_dtoa_r+0x648>
 8007f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f52:	2000      	movs	r0, #0
 8007f54:	4911      	ldr	r1, [pc, #68]	; (8007f9c <_dtoa_r+0x5ac>)
 8007f56:	f7f8 f907 	bl	8000168 <__aeabi_dsub>
 8007f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f5e:	f7f8 fd2d 	bl	80009bc <__aeabi_dcmplt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f040 80b7 	bne.w	80080d6 <_dtoa_r+0x6e6>
 8007f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f6a:	429f      	cmp	r7, r3
 8007f6c:	f43f af7a 	beq.w	8007e64 <_dtoa_r+0x474>
 8007f70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f74:	2200      	movs	r2, #0
 8007f76:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <_dtoa_r+0x5b0>)
 8007f78:	f7f8 faae 	bl	80004d8 <__aeabi_dmul>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <_dtoa_r+0x5b0>)
 8007f88:	f7f8 faa6 	bl	80004d8 <__aeabi_dmul>
 8007f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f90:	e7c3      	b.n	8007f1a <_dtoa_r+0x52a>
 8007f92:	bf00      	nop
 8007f94:	08009cc0 	.word	0x08009cc0
 8007f98:	08009c98 	.word	0x08009c98
 8007f9c:	3ff00000 	.word	0x3ff00000
 8007fa0:	40240000 	.word	0x40240000
 8007fa4:	401c0000 	.word	0x401c0000
 8007fa8:	40140000 	.word	0x40140000
 8007fac:	3fe00000 	.word	0x3fe00000
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 fa90 	bl	80004d8 <__aeabi_dmul>
 8007fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fbe:	9c03      	ldr	r4, [sp, #12]
 8007fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8007fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc6:	f7f8 fd37 	bl	8000a38 <__aeabi_d2iz>
 8007fca:	9015      	str	r0, [sp, #84]	; 0x54
 8007fcc:	f7f8 fa1a 	bl	8000404 <__aeabi_i2d>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd8:	f7f8 f8c6 	bl	8000168 <__aeabi_dsub>
 8007fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fde:	4606      	mov	r6, r0
 8007fe0:	3330      	adds	r3, #48	; 0x30
 8007fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8007fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe8:	460f      	mov	r7, r1
 8007fea:	429c      	cmp	r4, r3
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	d124      	bne.n	800803c <_dtoa_r+0x64c>
 8007ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ff6:	4bb0      	ldr	r3, [pc, #704]	; (80082b8 <_dtoa_r+0x8c8>)
 8007ff8:	f7f8 f8b8 	bl	800016c <__adddf3>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8008008:	2800      	cmp	r0, #0
 800800a:	d163      	bne.n	80080d4 <_dtoa_r+0x6e4>
 800800c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008010:	2000      	movs	r0, #0
 8008012:	49a9      	ldr	r1, [pc, #676]	; (80082b8 <_dtoa_r+0x8c8>)
 8008014:	f7f8 f8a8 	bl	8000168 <__aeabi_dsub>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4630      	mov	r0, r6
 800801e:	4639      	mov	r1, r7
 8008020:	f7f8 fccc 	bl	80009bc <__aeabi_dcmplt>
 8008024:	2800      	cmp	r0, #0
 8008026:	f43f af1d 	beq.w	8007e64 <_dtoa_r+0x474>
 800802a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800802c:	1e7b      	subs	r3, r7, #1
 800802e:	9314      	str	r3, [sp, #80]	; 0x50
 8008030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d0f8      	beq.n	800802a <_dtoa_r+0x63a>
 8008038:	46c2      	mov	sl, r8
 800803a:	e03b      	b.n	80080b4 <_dtoa_r+0x6c4>
 800803c:	4b9f      	ldr	r3, [pc, #636]	; (80082bc <_dtoa_r+0x8cc>)
 800803e:	f7f8 fa4b 	bl	80004d8 <__aeabi_dmul>
 8008042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008046:	e7bc      	b.n	8007fc2 <_dtoa_r+0x5d2>
 8008048:	9f03      	ldr	r7, [sp, #12]
 800804a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800804e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fb69 	bl	800072c <__aeabi_ddiv>
 800805a:	f7f8 fced 	bl	8000a38 <__aeabi_d2iz>
 800805e:	4604      	mov	r4, r0
 8008060:	f7f8 f9d0 	bl	8000404 <__aeabi_i2d>
 8008064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008068:	f7f8 fa36 	bl	80004d8 <__aeabi_dmul>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 f878 	bl	8000168 <__aeabi_dsub>
 8008078:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800807c:	f807 6b01 	strb.w	r6, [r7], #1
 8008080:	9e03      	ldr	r6, [sp, #12]
 8008082:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008086:	1bbe      	subs	r6, r7, r6
 8008088:	45b4      	cmp	ip, r6
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	d136      	bne.n	80080fe <_dtoa_r+0x70e>
 8008090:	f7f8 f86c 	bl	800016c <__adddf3>
 8008094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008098:	4680      	mov	r8, r0
 800809a:	4689      	mov	r9, r1
 800809c:	f7f8 fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80080a0:	bb58      	cbnz	r0, 80080fa <_dtoa_r+0x70a>
 80080a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80080ae:	b108      	cbz	r0, 80080b4 <_dtoa_r+0x6c4>
 80080b0:	07e1      	lsls	r1, r4, #31
 80080b2:	d422      	bmi.n	80080fa <_dtoa_r+0x70a>
 80080b4:	4628      	mov	r0, r5
 80080b6:	4659      	mov	r1, fp
 80080b8:	f000 faf0 	bl	800869c <_Bfree>
 80080bc:	2300      	movs	r3, #0
 80080be:	703b      	strb	r3, [r7, #0]
 80080c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080c2:	f10a 0001 	add.w	r0, sl, #1
 80080c6:	6018      	str	r0, [r3, #0]
 80080c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f43f acde 	beq.w	8007a8c <_dtoa_r+0x9c>
 80080d0:	601f      	str	r7, [r3, #0]
 80080d2:	e4db      	b.n	8007a8c <_dtoa_r+0x9c>
 80080d4:	4627      	mov	r7, r4
 80080d6:	463b      	mov	r3, r7
 80080d8:	461f      	mov	r7, r3
 80080da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080de:	2a39      	cmp	r2, #57	; 0x39
 80080e0:	d107      	bne.n	80080f2 <_dtoa_r+0x702>
 80080e2:	9a03      	ldr	r2, [sp, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d1f7      	bne.n	80080d8 <_dtoa_r+0x6e8>
 80080e8:	2230      	movs	r2, #48	; 0x30
 80080ea:	9903      	ldr	r1, [sp, #12]
 80080ec:	f108 0801 	add.w	r8, r8, #1
 80080f0:	700a      	strb	r2, [r1, #0]
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	3201      	adds	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e79e      	b.n	8008038 <_dtoa_r+0x648>
 80080fa:	46d0      	mov	r8, sl
 80080fc:	e7eb      	b.n	80080d6 <_dtoa_r+0x6e6>
 80080fe:	2200      	movs	r2, #0
 8008100:	4b6e      	ldr	r3, [pc, #440]	; (80082bc <_dtoa_r+0x8cc>)
 8008102:	f7f8 f9e9 	bl	80004d8 <__aeabi_dmul>
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	4680      	mov	r8, r0
 800810c:	4689      	mov	r9, r1
 800810e:	f7f8 fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8008112:	2800      	cmp	r0, #0
 8008114:	d09b      	beq.n	800804e <_dtoa_r+0x65e>
 8008116:	e7cd      	b.n	80080b4 <_dtoa_r+0x6c4>
 8008118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800811a:	2a00      	cmp	r2, #0
 800811c:	f000 80d0 	beq.w	80082c0 <_dtoa_r+0x8d0>
 8008120:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008122:	2a01      	cmp	r2, #1
 8008124:	f300 80ae 	bgt.w	8008284 <_dtoa_r+0x894>
 8008128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800812a:	2a00      	cmp	r2, #0
 800812c:	f000 80a6 	beq.w	800827c <_dtoa_r+0x88c>
 8008130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008136:	9f06      	ldr	r7, [sp, #24]
 8008138:	9a06      	ldr	r2, [sp, #24]
 800813a:	2101      	movs	r1, #1
 800813c:	441a      	add	r2, r3
 800813e:	9206      	str	r2, [sp, #24]
 8008140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008142:	4628      	mov	r0, r5
 8008144:	441a      	add	r2, r3
 8008146:	9209      	str	r2, [sp, #36]	; 0x24
 8008148:	f000 fb5e 	bl	8008808 <__i2b>
 800814c:	4606      	mov	r6, r0
 800814e:	2f00      	cmp	r7, #0
 8008150:	dd0c      	ble.n	800816c <_dtoa_r+0x77c>
 8008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd09      	ble.n	800816c <_dtoa_r+0x77c>
 8008158:	42bb      	cmp	r3, r7
 800815a:	bfa8      	it	ge
 800815c:	463b      	movge	r3, r7
 800815e:	9a06      	ldr	r2, [sp, #24]
 8008160:	1aff      	subs	r7, r7, r3
 8008162:	1ad2      	subs	r2, r2, r3
 8008164:	9206      	str	r2, [sp, #24]
 8008166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	9309      	str	r3, [sp, #36]	; 0x24
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	b1f3      	cbz	r3, 80081ae <_dtoa_r+0x7be>
 8008170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80a8 	beq.w	80082c8 <_dtoa_r+0x8d8>
 8008178:	2c00      	cmp	r4, #0
 800817a:	dd10      	ble.n	800819e <_dtoa_r+0x7ae>
 800817c:	4631      	mov	r1, r6
 800817e:	4622      	mov	r2, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fbff 	bl	8008984 <__pow5mult>
 8008186:	465a      	mov	r2, fp
 8008188:	4601      	mov	r1, r0
 800818a:	4606      	mov	r6, r0
 800818c:	4628      	mov	r0, r5
 800818e:	f000 fb51 	bl	8008834 <__multiply>
 8008192:	4680      	mov	r8, r0
 8008194:	4659      	mov	r1, fp
 8008196:	4628      	mov	r0, r5
 8008198:	f000 fa80 	bl	800869c <_Bfree>
 800819c:	46c3      	mov	fp, r8
 800819e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a0:	1b1a      	subs	r2, r3, r4
 80081a2:	d004      	beq.n	80081ae <_dtoa_r+0x7be>
 80081a4:	4659      	mov	r1, fp
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 fbec 	bl	8008984 <__pow5mult>
 80081ac:	4683      	mov	fp, r0
 80081ae:	2101      	movs	r1, #1
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 fb29 	bl	8008808 <__i2b>
 80081b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b8:	4604      	mov	r4, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f340 8086 	ble.w	80082cc <_dtoa_r+0x8dc>
 80081c0:	461a      	mov	r2, r3
 80081c2:	4601      	mov	r1, r0
 80081c4:	4628      	mov	r0, r5
 80081c6:	f000 fbdd 	bl	8008984 <__pow5mult>
 80081ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081cc:	4604      	mov	r4, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	dd7f      	ble.n	80082d2 <_dtoa_r+0x8e2>
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081dc:	6918      	ldr	r0, [r3, #16]
 80081de:	f000 fac5 	bl	800876c <__hi0bits>
 80081e2:	f1c0 0020 	rsb	r0, r0, #32
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	4418      	add	r0, r3
 80081ea:	f010 001f 	ands.w	r0, r0, #31
 80081ee:	f000 8092 	beq.w	8008316 <_dtoa_r+0x926>
 80081f2:	f1c0 0320 	rsb	r3, r0, #32
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	f340 808a 	ble.w	8008310 <_dtoa_r+0x920>
 80081fc:	f1c0 001c 	rsb	r0, r0, #28
 8008200:	9b06      	ldr	r3, [sp, #24]
 8008202:	4407      	add	r7, r0
 8008204:	4403      	add	r3, r0
 8008206:	9306      	str	r3, [sp, #24]
 8008208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820a:	4403      	add	r3, r0
 800820c:	9309      	str	r3, [sp, #36]	; 0x24
 800820e:	9b06      	ldr	r3, [sp, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	dd05      	ble.n	8008220 <_dtoa_r+0x830>
 8008214:	4659      	mov	r1, fp
 8008216:	461a      	mov	r2, r3
 8008218:	4628      	mov	r0, r5
 800821a:	f000 fc0d 	bl	8008a38 <__lshift>
 800821e:	4683      	mov	fp, r0
 8008220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008222:	2b00      	cmp	r3, #0
 8008224:	dd05      	ble.n	8008232 <_dtoa_r+0x842>
 8008226:	4621      	mov	r1, r4
 8008228:	461a      	mov	r2, r3
 800822a:	4628      	mov	r0, r5
 800822c:	f000 fc04 	bl	8008a38 <__lshift>
 8008230:	4604      	mov	r4, r0
 8008232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d070      	beq.n	800831a <_dtoa_r+0x92a>
 8008238:	4621      	mov	r1, r4
 800823a:	4658      	mov	r0, fp
 800823c:	f000 fc6c 	bl	8008b18 <__mcmp>
 8008240:	2800      	cmp	r0, #0
 8008242:	da6a      	bge.n	800831a <_dtoa_r+0x92a>
 8008244:	2300      	movs	r3, #0
 8008246:	4659      	mov	r1, fp
 8008248:	220a      	movs	r2, #10
 800824a:	4628      	mov	r0, r5
 800824c:	f000 fa48 	bl	80086e0 <__multadd>
 8008250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008252:	4683      	mov	fp, r0
 8008254:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8194 	beq.w	8008586 <_dtoa_r+0xb96>
 800825e:	4631      	mov	r1, r6
 8008260:	2300      	movs	r3, #0
 8008262:	220a      	movs	r2, #10
 8008264:	4628      	mov	r0, r5
 8008266:	f000 fa3b 	bl	80086e0 <__multadd>
 800826a:	f1b9 0f00 	cmp.w	r9, #0
 800826e:	4606      	mov	r6, r0
 8008270:	f300 8093 	bgt.w	800839a <_dtoa_r+0x9aa>
 8008274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008276:	2b02      	cmp	r3, #2
 8008278:	dc57      	bgt.n	800832a <_dtoa_r+0x93a>
 800827a:	e08e      	b.n	800839a <_dtoa_r+0x9aa>
 800827c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800827e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008282:	e757      	b.n	8008134 <_dtoa_r+0x744>
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	1e5c      	subs	r4, r3, #1
 8008288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828a:	42a3      	cmp	r3, r4
 800828c:	bfb7      	itett	lt
 800828e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008290:	1b1c      	subge	r4, r3, r4
 8008292:	1ae2      	sublt	r2, r4, r3
 8008294:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008296:	bfbe      	ittt	lt
 8008298:	940a      	strlt	r4, [sp, #40]	; 0x28
 800829a:	189b      	addlt	r3, r3, r2
 800829c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800829e:	9b08      	ldr	r3, [sp, #32]
 80082a0:	bfb8      	it	lt
 80082a2:	2400      	movlt	r4, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfbb      	ittet	lt
 80082a8:	9b06      	ldrlt	r3, [sp, #24]
 80082aa:	9a08      	ldrlt	r2, [sp, #32]
 80082ac:	9f06      	ldrge	r7, [sp, #24]
 80082ae:	1a9f      	sublt	r7, r3, r2
 80082b0:	bfac      	ite	ge
 80082b2:	9b08      	ldrge	r3, [sp, #32]
 80082b4:	2300      	movlt	r3, #0
 80082b6:	e73f      	b.n	8008138 <_dtoa_r+0x748>
 80082b8:	3fe00000 	.word	0x3fe00000
 80082bc:	40240000 	.word	0x40240000
 80082c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082c2:	9f06      	ldr	r7, [sp, #24]
 80082c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80082c6:	e742      	b.n	800814e <_dtoa_r+0x75e>
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	e76b      	b.n	80081a4 <_dtoa_r+0x7b4>
 80082cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	dc19      	bgt.n	8008306 <_dtoa_r+0x916>
 80082d2:	9b04      	ldr	r3, [sp, #16]
 80082d4:	b9bb      	cbnz	r3, 8008306 <_dtoa_r+0x916>
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082dc:	b99b      	cbnz	r3, 8008306 <_dtoa_r+0x916>
 80082de:	9b05      	ldr	r3, [sp, #20]
 80082e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	051b      	lsls	r3, r3, #20
 80082e8:	b183      	cbz	r3, 800830c <_dtoa_r+0x91c>
 80082ea:	f04f 0801 	mov.w	r8, #1
 80082ee:	9b06      	ldr	r3, [sp, #24]
 80082f0:	3301      	adds	r3, #1
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	3301      	adds	r3, #1
 80082f8:	9309      	str	r3, [sp, #36]	; 0x24
 80082fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f af6a 	bne.w	80081d6 <_dtoa_r+0x7e6>
 8008302:	2001      	movs	r0, #1
 8008304:	e76f      	b.n	80081e6 <_dtoa_r+0x7f6>
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	e7f6      	b.n	80082fa <_dtoa_r+0x90a>
 800830c:	4698      	mov	r8, r3
 800830e:	e7f4      	b.n	80082fa <_dtoa_r+0x90a>
 8008310:	f43f af7d 	beq.w	800820e <_dtoa_r+0x81e>
 8008314:	4618      	mov	r0, r3
 8008316:	301c      	adds	r0, #28
 8008318:	e772      	b.n	8008200 <_dtoa_r+0x810>
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	2b00      	cmp	r3, #0
 800831e:	dc36      	bgt.n	800838e <_dtoa_r+0x99e>
 8008320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008322:	2b02      	cmp	r3, #2
 8008324:	dd33      	ble.n	800838e <_dtoa_r+0x99e>
 8008326:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	d10d      	bne.n	800834c <_dtoa_r+0x95c>
 8008330:	4621      	mov	r1, r4
 8008332:	464b      	mov	r3, r9
 8008334:	2205      	movs	r2, #5
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f9d2 	bl	80086e0 <__multadd>
 800833c:	4601      	mov	r1, r0
 800833e:	4604      	mov	r4, r0
 8008340:	4658      	mov	r0, fp
 8008342:	f000 fbe9 	bl	8008b18 <__mcmp>
 8008346:	2800      	cmp	r0, #0
 8008348:	f73f adb8 	bgt.w	8007ebc <_dtoa_r+0x4cc>
 800834c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800834e:	9f03      	ldr	r7, [sp, #12]
 8008350:	ea6f 0a03 	mvn.w	sl, r3
 8008354:	f04f 0800 	mov.w	r8, #0
 8008358:	4621      	mov	r1, r4
 800835a:	4628      	mov	r0, r5
 800835c:	f000 f99e 	bl	800869c <_Bfree>
 8008360:	2e00      	cmp	r6, #0
 8008362:	f43f aea7 	beq.w	80080b4 <_dtoa_r+0x6c4>
 8008366:	f1b8 0f00 	cmp.w	r8, #0
 800836a:	d005      	beq.n	8008378 <_dtoa_r+0x988>
 800836c:	45b0      	cmp	r8, r6
 800836e:	d003      	beq.n	8008378 <_dtoa_r+0x988>
 8008370:	4641      	mov	r1, r8
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f992 	bl	800869c <_Bfree>
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f98e 	bl	800869c <_Bfree>
 8008380:	e698      	b.n	80080b4 <_dtoa_r+0x6c4>
 8008382:	2400      	movs	r4, #0
 8008384:	4626      	mov	r6, r4
 8008386:	e7e1      	b.n	800834c <_dtoa_r+0x95c>
 8008388:	46c2      	mov	sl, r8
 800838a:	4626      	mov	r6, r4
 800838c:	e596      	b.n	8007ebc <_dtoa_r+0x4cc>
 800838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80fd 	beq.w	8008594 <_dtoa_r+0xba4>
 800839a:	2f00      	cmp	r7, #0
 800839c:	dd05      	ble.n	80083aa <_dtoa_r+0x9ba>
 800839e:	4631      	mov	r1, r6
 80083a0:	463a      	mov	r2, r7
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 fb48 	bl	8008a38 <__lshift>
 80083a8:	4606      	mov	r6, r0
 80083aa:	f1b8 0f00 	cmp.w	r8, #0
 80083ae:	d05c      	beq.n	800846a <_dtoa_r+0xa7a>
 80083b0:	4628      	mov	r0, r5
 80083b2:	6871      	ldr	r1, [r6, #4]
 80083b4:	f000 f932 	bl	800861c <_Balloc>
 80083b8:	4607      	mov	r7, r0
 80083ba:	b928      	cbnz	r0, 80083c8 <_dtoa_r+0x9d8>
 80083bc:	4602      	mov	r2, r0
 80083be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083c2:	4b7f      	ldr	r3, [pc, #508]	; (80085c0 <_dtoa_r+0xbd0>)
 80083c4:	f7ff bb28 	b.w	8007a18 <_dtoa_r+0x28>
 80083c8:	6932      	ldr	r2, [r6, #16]
 80083ca:	f106 010c 	add.w	r1, r6, #12
 80083ce:	3202      	adds	r2, #2
 80083d0:	0092      	lsls	r2, r2, #2
 80083d2:	300c      	adds	r0, #12
 80083d4:	f000 f914 	bl	8008600 <memcpy>
 80083d8:	2201      	movs	r2, #1
 80083da:	4639      	mov	r1, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 fb2b 	bl	8008a38 <__lshift>
 80083e2:	46b0      	mov	r8, r6
 80083e4:	4606      	mov	r6, r0
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	444b      	add	r3, r9
 80083f0:	930a      	str	r3, [sp, #40]	; 0x28
 80083f2:	9b04      	ldr	r3, [sp, #16]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	9309      	str	r3, [sp, #36]	; 0x24
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	4621      	mov	r1, r4
 80083fe:	3b01      	subs	r3, #1
 8008400:	4658      	mov	r0, fp
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	f7ff fa68 	bl	80078d8 <quorem>
 8008408:	4603      	mov	r3, r0
 800840a:	4641      	mov	r1, r8
 800840c:	3330      	adds	r3, #48	; 0x30
 800840e:	9006      	str	r0, [sp, #24]
 8008410:	4658      	mov	r0, fp
 8008412:	930b      	str	r3, [sp, #44]	; 0x2c
 8008414:	f000 fb80 	bl	8008b18 <__mcmp>
 8008418:	4632      	mov	r2, r6
 800841a:	4681      	mov	r9, r0
 800841c:	4621      	mov	r1, r4
 800841e:	4628      	mov	r0, r5
 8008420:	f000 fb96 	bl	8008b50 <__mdiff>
 8008424:	68c2      	ldr	r2, [r0, #12]
 8008426:	4607      	mov	r7, r0
 8008428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842a:	bb02      	cbnz	r2, 800846e <_dtoa_r+0xa7e>
 800842c:	4601      	mov	r1, r0
 800842e:	4658      	mov	r0, fp
 8008430:	f000 fb72 	bl	8008b18 <__mcmp>
 8008434:	4602      	mov	r2, r0
 8008436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008438:	4639      	mov	r1, r7
 800843a:	4628      	mov	r0, r5
 800843c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008440:	f000 f92c 	bl	800869c <_Bfree>
 8008444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008448:	9f08      	ldr	r7, [sp, #32]
 800844a:	ea43 0102 	orr.w	r1, r3, r2
 800844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008450:	430b      	orrs	r3, r1
 8008452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008454:	d10d      	bne.n	8008472 <_dtoa_r+0xa82>
 8008456:	2b39      	cmp	r3, #57	; 0x39
 8008458:	d029      	beq.n	80084ae <_dtoa_r+0xabe>
 800845a:	f1b9 0f00 	cmp.w	r9, #0
 800845e:	dd01      	ble.n	8008464 <_dtoa_r+0xa74>
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	3331      	adds	r3, #49	; 0x31
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	7013      	strb	r3, [r2, #0]
 8008468:	e776      	b.n	8008358 <_dtoa_r+0x968>
 800846a:	4630      	mov	r0, r6
 800846c:	e7b9      	b.n	80083e2 <_dtoa_r+0x9f2>
 800846e:	2201      	movs	r2, #1
 8008470:	e7e2      	b.n	8008438 <_dtoa_r+0xa48>
 8008472:	f1b9 0f00 	cmp.w	r9, #0
 8008476:	db06      	blt.n	8008486 <_dtoa_r+0xa96>
 8008478:	9922      	ldr	r1, [sp, #136]	; 0x88
 800847a:	ea41 0909 	orr.w	r9, r1, r9
 800847e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008480:	ea59 0101 	orrs.w	r1, r9, r1
 8008484:	d120      	bne.n	80084c8 <_dtoa_r+0xad8>
 8008486:	2a00      	cmp	r2, #0
 8008488:	ddec      	ble.n	8008464 <_dtoa_r+0xa74>
 800848a:	4659      	mov	r1, fp
 800848c:	2201      	movs	r2, #1
 800848e:	4628      	mov	r0, r5
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	f000 fad1 	bl	8008a38 <__lshift>
 8008496:	4621      	mov	r1, r4
 8008498:	4683      	mov	fp, r0
 800849a:	f000 fb3d 	bl	8008b18 <__mcmp>
 800849e:	2800      	cmp	r0, #0
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	dc02      	bgt.n	80084aa <_dtoa_r+0xaba>
 80084a4:	d1de      	bne.n	8008464 <_dtoa_r+0xa74>
 80084a6:	07da      	lsls	r2, r3, #31
 80084a8:	d5dc      	bpl.n	8008464 <_dtoa_r+0xa74>
 80084aa:	2b39      	cmp	r3, #57	; 0x39
 80084ac:	d1d8      	bne.n	8008460 <_dtoa_r+0xa70>
 80084ae:	2339      	movs	r3, #57	; 0x39
 80084b0:	9a04      	ldr	r2, [sp, #16]
 80084b2:	7013      	strb	r3, [r2, #0]
 80084b4:	463b      	mov	r3, r7
 80084b6:	461f      	mov	r7, r3
 80084b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80084bc:	3b01      	subs	r3, #1
 80084be:	2a39      	cmp	r2, #57	; 0x39
 80084c0:	d050      	beq.n	8008564 <_dtoa_r+0xb74>
 80084c2:	3201      	adds	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e747      	b.n	8008358 <_dtoa_r+0x968>
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	dd03      	ble.n	80084d4 <_dtoa_r+0xae4>
 80084cc:	2b39      	cmp	r3, #57	; 0x39
 80084ce:	d0ee      	beq.n	80084ae <_dtoa_r+0xabe>
 80084d0:	3301      	adds	r3, #1
 80084d2:	e7c7      	b.n	8008464 <_dtoa_r+0xa74>
 80084d4:	9a08      	ldr	r2, [sp, #32]
 80084d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084dc:	428a      	cmp	r2, r1
 80084de:	d02a      	beq.n	8008536 <_dtoa_r+0xb46>
 80084e0:	4659      	mov	r1, fp
 80084e2:	2300      	movs	r3, #0
 80084e4:	220a      	movs	r2, #10
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 f8fa 	bl	80086e0 <__multadd>
 80084ec:	45b0      	cmp	r8, r6
 80084ee:	4683      	mov	fp, r0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	f04f 020a 	mov.w	r2, #10
 80084f8:	4641      	mov	r1, r8
 80084fa:	4628      	mov	r0, r5
 80084fc:	d107      	bne.n	800850e <_dtoa_r+0xb1e>
 80084fe:	f000 f8ef 	bl	80086e0 <__multadd>
 8008502:	4680      	mov	r8, r0
 8008504:	4606      	mov	r6, r0
 8008506:	9b08      	ldr	r3, [sp, #32]
 8008508:	3301      	adds	r3, #1
 800850a:	9308      	str	r3, [sp, #32]
 800850c:	e775      	b.n	80083fa <_dtoa_r+0xa0a>
 800850e:	f000 f8e7 	bl	80086e0 <__multadd>
 8008512:	4631      	mov	r1, r6
 8008514:	4680      	mov	r8, r0
 8008516:	2300      	movs	r3, #0
 8008518:	220a      	movs	r2, #10
 800851a:	4628      	mov	r0, r5
 800851c:	f000 f8e0 	bl	80086e0 <__multadd>
 8008520:	4606      	mov	r6, r0
 8008522:	e7f0      	b.n	8008506 <_dtoa_r+0xb16>
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	bfcc      	ite	gt
 800852a:	464f      	movgt	r7, r9
 800852c:	2701      	movle	r7, #1
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	9a03      	ldr	r2, [sp, #12]
 8008534:	4417      	add	r7, r2
 8008536:	4659      	mov	r1, fp
 8008538:	2201      	movs	r2, #1
 800853a:	4628      	mov	r0, r5
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	f000 fa7b 	bl	8008a38 <__lshift>
 8008542:	4621      	mov	r1, r4
 8008544:	4683      	mov	fp, r0
 8008546:	f000 fae7 	bl	8008b18 <__mcmp>
 800854a:	2800      	cmp	r0, #0
 800854c:	dcb2      	bgt.n	80084b4 <_dtoa_r+0xac4>
 800854e:	d102      	bne.n	8008556 <_dtoa_r+0xb66>
 8008550:	9b08      	ldr	r3, [sp, #32]
 8008552:	07db      	lsls	r3, r3, #31
 8008554:	d4ae      	bmi.n	80084b4 <_dtoa_r+0xac4>
 8008556:	463b      	mov	r3, r7
 8008558:	461f      	mov	r7, r3
 800855a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800855e:	2a30      	cmp	r2, #48	; 0x30
 8008560:	d0fa      	beq.n	8008558 <_dtoa_r+0xb68>
 8008562:	e6f9      	b.n	8008358 <_dtoa_r+0x968>
 8008564:	9a03      	ldr	r2, [sp, #12]
 8008566:	429a      	cmp	r2, r3
 8008568:	d1a5      	bne.n	80084b6 <_dtoa_r+0xac6>
 800856a:	2331      	movs	r3, #49	; 0x31
 800856c:	f10a 0a01 	add.w	sl, sl, #1
 8008570:	e779      	b.n	8008466 <_dtoa_r+0xa76>
 8008572:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <_dtoa_r+0xbd4>)
 8008574:	f7ff baa8 	b.w	8007ac8 <_dtoa_r+0xd8>
 8008578:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800857a:	2b00      	cmp	r3, #0
 800857c:	f47f aa81 	bne.w	8007a82 <_dtoa_r+0x92>
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <_dtoa_r+0xbd8>)
 8008582:	f7ff baa1 	b.w	8007ac8 <_dtoa_r+0xd8>
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	dc03      	bgt.n	8008594 <_dtoa_r+0xba4>
 800858c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800858e:	2b02      	cmp	r3, #2
 8008590:	f73f aecb 	bgt.w	800832a <_dtoa_r+0x93a>
 8008594:	9f03      	ldr	r7, [sp, #12]
 8008596:	4621      	mov	r1, r4
 8008598:	4658      	mov	r0, fp
 800859a:	f7ff f99d 	bl	80078d8 <quorem>
 800859e:	9a03      	ldr	r2, [sp, #12]
 80085a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085a4:	f807 3b01 	strb.w	r3, [r7], #1
 80085a8:	1aba      	subs	r2, r7, r2
 80085aa:	4591      	cmp	r9, r2
 80085ac:	ddba      	ble.n	8008524 <_dtoa_r+0xb34>
 80085ae:	4659      	mov	r1, fp
 80085b0:	2300      	movs	r3, #0
 80085b2:	220a      	movs	r2, #10
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f893 	bl	80086e0 <__multadd>
 80085ba:	4683      	mov	fp, r0
 80085bc:	e7eb      	b.n	8008596 <_dtoa_r+0xba6>
 80085be:	bf00      	nop
 80085c0:	08009c28 	.word	0x08009c28
 80085c4:	08009a84 	.word	0x08009a84
 80085c8:	08009ba9 	.word	0x08009ba9

080085cc <_localeconv_r>:
 80085cc:	4800      	ldr	r0, [pc, #0]	; (80085d0 <_localeconv_r+0x4>)
 80085ce:	4770      	bx	lr
 80085d0:	20000244 	.word	0x20000244

080085d4 <malloc>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <malloc+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f000 bc1d 	b.w	8008e18 <_malloc_r>
 80085de:	bf00      	nop
 80085e0:	200000f0 	.word	0x200000f0

080085e4 <memchr>:
 80085e4:	4603      	mov	r3, r0
 80085e6:	b510      	push	{r4, lr}
 80085e8:	b2c9      	uxtb	r1, r1
 80085ea:	4402      	add	r2, r0
 80085ec:	4293      	cmp	r3, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	d101      	bne.n	80085f6 <memchr+0x12>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e003      	b.n	80085fe <memchr+0x1a>
 80085f6:	7804      	ldrb	r4, [r0, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	428c      	cmp	r4, r1
 80085fc:	d1f6      	bne.n	80085ec <memchr+0x8>
 80085fe:	bd10      	pop	{r4, pc}

08008600 <memcpy>:
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008608:	d100      	bne.n	800860c <memcpy+0xc>
 800860a:	4770      	bx	lr
 800860c:	b510      	push	{r4, lr}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	4291      	cmp	r1, r2
 8008614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008618:	d1f9      	bne.n	800860e <memcpy+0xe>
 800861a:	bd10      	pop	{r4, pc}

0800861c <_Balloc>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008620:	4604      	mov	r4, r0
 8008622:	460d      	mov	r5, r1
 8008624:	b976      	cbnz	r6, 8008644 <_Balloc+0x28>
 8008626:	2010      	movs	r0, #16
 8008628:	f7ff ffd4 	bl	80085d4 <malloc>
 800862c:	4602      	mov	r2, r0
 800862e:	6260      	str	r0, [r4, #36]	; 0x24
 8008630:	b920      	cbnz	r0, 800863c <_Balloc+0x20>
 8008632:	2166      	movs	r1, #102	; 0x66
 8008634:	4b17      	ldr	r3, [pc, #92]	; (8008694 <_Balloc+0x78>)
 8008636:	4818      	ldr	r0, [pc, #96]	; (8008698 <_Balloc+0x7c>)
 8008638:	f000 fc72 	bl	8008f20 <__assert_func>
 800863c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008640:	6006      	str	r6, [r0, #0]
 8008642:	60c6      	str	r6, [r0, #12]
 8008644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008646:	68f3      	ldr	r3, [r6, #12]
 8008648:	b183      	cbz	r3, 800866c <_Balloc+0x50>
 800864a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008652:	b9b8      	cbnz	r0, 8008684 <_Balloc+0x68>
 8008654:	2101      	movs	r1, #1
 8008656:	fa01 f605 	lsl.w	r6, r1, r5
 800865a:	1d72      	adds	r2, r6, #5
 800865c:	4620      	mov	r0, r4
 800865e:	0092      	lsls	r2, r2, #2
 8008660:	f000 fb5e 	bl	8008d20 <_calloc_r>
 8008664:	b160      	cbz	r0, 8008680 <_Balloc+0x64>
 8008666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800866a:	e00e      	b.n	800868a <_Balloc+0x6e>
 800866c:	2221      	movs	r2, #33	; 0x21
 800866e:	2104      	movs	r1, #4
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fb55 	bl	8008d20 <_calloc_r>
 8008676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008678:	60f0      	str	r0, [r6, #12]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e4      	bne.n	800864a <_Balloc+0x2e>
 8008680:	2000      	movs	r0, #0
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	6802      	ldr	r2, [r0, #0]
 8008686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800868a:	2300      	movs	r3, #0
 800868c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008690:	e7f7      	b.n	8008682 <_Balloc+0x66>
 8008692:	bf00      	nop
 8008694:	08009bb6 	.word	0x08009bb6
 8008698:	08009c39 	.word	0x08009c39

0800869c <_Bfree>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	b976      	cbnz	r6, 80086c4 <_Bfree+0x28>
 80086a6:	2010      	movs	r0, #16
 80086a8:	f7ff ff94 	bl	80085d4 <malloc>
 80086ac:	4602      	mov	r2, r0
 80086ae:	6268      	str	r0, [r5, #36]	; 0x24
 80086b0:	b920      	cbnz	r0, 80086bc <_Bfree+0x20>
 80086b2:	218a      	movs	r1, #138	; 0x8a
 80086b4:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <_Bfree+0x3c>)
 80086b6:	4809      	ldr	r0, [pc, #36]	; (80086dc <_Bfree+0x40>)
 80086b8:	f000 fc32 	bl	8008f20 <__assert_func>
 80086bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086c0:	6006      	str	r6, [r0, #0]
 80086c2:	60c6      	str	r6, [r0, #12]
 80086c4:	b13c      	cbz	r4, 80086d6 <_Bfree+0x3a>
 80086c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086c8:	6862      	ldr	r2, [r4, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086d0:	6021      	str	r1, [r4, #0]
 80086d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	08009bb6 	.word	0x08009bb6
 80086dc:	08009c39 	.word	0x08009c39

080086e0 <__multadd>:
 80086e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e4:	4607      	mov	r7, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	461e      	mov	r6, r3
 80086ea:	2000      	movs	r0, #0
 80086ec:	690d      	ldr	r5, [r1, #16]
 80086ee:	f101 0c14 	add.w	ip, r1, #20
 80086f2:	f8dc 3000 	ldr.w	r3, [ip]
 80086f6:	3001      	adds	r0, #1
 80086f8:	b299      	uxth	r1, r3
 80086fa:	fb02 6101 	mla	r1, r2, r1, r6
 80086fe:	0c1e      	lsrs	r6, r3, #16
 8008700:	0c0b      	lsrs	r3, r1, #16
 8008702:	fb02 3306 	mla	r3, r2, r6, r3
 8008706:	b289      	uxth	r1, r1
 8008708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800870c:	4285      	cmp	r5, r0
 800870e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008712:	f84c 1b04 	str.w	r1, [ip], #4
 8008716:	dcec      	bgt.n	80086f2 <__multadd+0x12>
 8008718:	b30e      	cbz	r6, 800875e <__multadd+0x7e>
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	42ab      	cmp	r3, r5
 800871e:	dc19      	bgt.n	8008754 <__multadd+0x74>
 8008720:	6861      	ldr	r1, [r4, #4]
 8008722:	4638      	mov	r0, r7
 8008724:	3101      	adds	r1, #1
 8008726:	f7ff ff79 	bl	800861c <_Balloc>
 800872a:	4680      	mov	r8, r0
 800872c:	b928      	cbnz	r0, 800873a <__multadd+0x5a>
 800872e:	4602      	mov	r2, r0
 8008730:	21b5      	movs	r1, #181	; 0xb5
 8008732:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <__multadd+0x84>)
 8008734:	480c      	ldr	r0, [pc, #48]	; (8008768 <__multadd+0x88>)
 8008736:	f000 fbf3 	bl	8008f20 <__assert_func>
 800873a:	6922      	ldr	r2, [r4, #16]
 800873c:	f104 010c 	add.w	r1, r4, #12
 8008740:	3202      	adds	r2, #2
 8008742:	0092      	lsls	r2, r2, #2
 8008744:	300c      	adds	r0, #12
 8008746:	f7ff ff5b 	bl	8008600 <memcpy>
 800874a:	4621      	mov	r1, r4
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff ffa5 	bl	800869c <_Bfree>
 8008752:	4644      	mov	r4, r8
 8008754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008758:	3501      	adds	r5, #1
 800875a:	615e      	str	r6, [r3, #20]
 800875c:	6125      	str	r5, [r4, #16]
 800875e:	4620      	mov	r0, r4
 8008760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008764:	08009c28 	.word	0x08009c28
 8008768:	08009c39 	.word	0x08009c39

0800876c <__hi0bits>:
 800876c:	0c02      	lsrs	r2, r0, #16
 800876e:	0412      	lsls	r2, r2, #16
 8008770:	4603      	mov	r3, r0
 8008772:	b9ca      	cbnz	r2, 80087a8 <__hi0bits+0x3c>
 8008774:	0403      	lsls	r3, r0, #16
 8008776:	2010      	movs	r0, #16
 8008778:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800877c:	bf04      	itt	eq
 800877e:	021b      	lsleq	r3, r3, #8
 8008780:	3008      	addeq	r0, #8
 8008782:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008786:	bf04      	itt	eq
 8008788:	011b      	lsleq	r3, r3, #4
 800878a:	3004      	addeq	r0, #4
 800878c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008790:	bf04      	itt	eq
 8008792:	009b      	lsleq	r3, r3, #2
 8008794:	3002      	addeq	r0, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	db05      	blt.n	80087a6 <__hi0bits+0x3a>
 800879a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800879e:	f100 0001 	add.w	r0, r0, #1
 80087a2:	bf08      	it	eq
 80087a4:	2020      	moveq	r0, #32
 80087a6:	4770      	bx	lr
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7e5      	b.n	8008778 <__hi0bits+0xc>

080087ac <__lo0bits>:
 80087ac:	6803      	ldr	r3, [r0, #0]
 80087ae:	4602      	mov	r2, r0
 80087b0:	f013 0007 	ands.w	r0, r3, #7
 80087b4:	d00b      	beq.n	80087ce <__lo0bits+0x22>
 80087b6:	07d9      	lsls	r1, r3, #31
 80087b8:	d421      	bmi.n	80087fe <__lo0bits+0x52>
 80087ba:	0798      	lsls	r0, r3, #30
 80087bc:	bf49      	itett	mi
 80087be:	085b      	lsrmi	r3, r3, #1
 80087c0:	089b      	lsrpl	r3, r3, #2
 80087c2:	2001      	movmi	r0, #1
 80087c4:	6013      	strmi	r3, [r2, #0]
 80087c6:	bf5c      	itt	pl
 80087c8:	2002      	movpl	r0, #2
 80087ca:	6013      	strpl	r3, [r2, #0]
 80087cc:	4770      	bx	lr
 80087ce:	b299      	uxth	r1, r3
 80087d0:	b909      	cbnz	r1, 80087d6 <__lo0bits+0x2a>
 80087d2:	2010      	movs	r0, #16
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	b2d9      	uxtb	r1, r3
 80087d8:	b909      	cbnz	r1, 80087de <__lo0bits+0x32>
 80087da:	3008      	adds	r0, #8
 80087dc:	0a1b      	lsrs	r3, r3, #8
 80087de:	0719      	lsls	r1, r3, #28
 80087e0:	bf04      	itt	eq
 80087e2:	091b      	lsreq	r3, r3, #4
 80087e4:	3004      	addeq	r0, #4
 80087e6:	0799      	lsls	r1, r3, #30
 80087e8:	bf04      	itt	eq
 80087ea:	089b      	lsreq	r3, r3, #2
 80087ec:	3002      	addeq	r0, #2
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d403      	bmi.n	80087fa <__lo0bits+0x4e>
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	f100 0001 	add.w	r0, r0, #1
 80087f8:	d003      	beq.n	8008802 <__lo0bits+0x56>
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	4770      	bx	lr
 80087fe:	2000      	movs	r0, #0
 8008800:	4770      	bx	lr
 8008802:	2020      	movs	r0, #32
 8008804:	4770      	bx	lr
	...

08008808 <__i2b>:
 8008808:	b510      	push	{r4, lr}
 800880a:	460c      	mov	r4, r1
 800880c:	2101      	movs	r1, #1
 800880e:	f7ff ff05 	bl	800861c <_Balloc>
 8008812:	4602      	mov	r2, r0
 8008814:	b928      	cbnz	r0, 8008822 <__i2b+0x1a>
 8008816:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800881a:	4b04      	ldr	r3, [pc, #16]	; (800882c <__i2b+0x24>)
 800881c:	4804      	ldr	r0, [pc, #16]	; (8008830 <__i2b+0x28>)
 800881e:	f000 fb7f 	bl	8008f20 <__assert_func>
 8008822:	2301      	movs	r3, #1
 8008824:	6144      	str	r4, [r0, #20]
 8008826:	6103      	str	r3, [r0, #16]
 8008828:	bd10      	pop	{r4, pc}
 800882a:	bf00      	nop
 800882c:	08009c28 	.word	0x08009c28
 8008830:	08009c39 	.word	0x08009c39

08008834 <__multiply>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	4691      	mov	r9, r2
 800883a:	690a      	ldr	r2, [r1, #16]
 800883c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008840:	460c      	mov	r4, r1
 8008842:	429a      	cmp	r2, r3
 8008844:	bfbe      	ittt	lt
 8008846:	460b      	movlt	r3, r1
 8008848:	464c      	movlt	r4, r9
 800884a:	4699      	movlt	r9, r3
 800884c:	6927      	ldr	r7, [r4, #16]
 800884e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008852:	68a3      	ldr	r3, [r4, #8]
 8008854:	6861      	ldr	r1, [r4, #4]
 8008856:	eb07 060a 	add.w	r6, r7, sl
 800885a:	42b3      	cmp	r3, r6
 800885c:	b085      	sub	sp, #20
 800885e:	bfb8      	it	lt
 8008860:	3101      	addlt	r1, #1
 8008862:	f7ff fedb 	bl	800861c <_Balloc>
 8008866:	b930      	cbnz	r0, 8008876 <__multiply+0x42>
 8008868:	4602      	mov	r2, r0
 800886a:	f240 115d 	movw	r1, #349	; 0x15d
 800886e:	4b43      	ldr	r3, [pc, #268]	; (800897c <__multiply+0x148>)
 8008870:	4843      	ldr	r0, [pc, #268]	; (8008980 <__multiply+0x14c>)
 8008872:	f000 fb55 	bl	8008f20 <__assert_func>
 8008876:	f100 0514 	add.w	r5, r0, #20
 800887a:	462b      	mov	r3, r5
 800887c:	2200      	movs	r2, #0
 800887e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008882:	4543      	cmp	r3, r8
 8008884:	d321      	bcc.n	80088ca <__multiply+0x96>
 8008886:	f104 0314 	add.w	r3, r4, #20
 800888a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800888e:	f109 0314 	add.w	r3, r9, #20
 8008892:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008896:	9202      	str	r2, [sp, #8]
 8008898:	1b3a      	subs	r2, r7, r4
 800889a:	3a15      	subs	r2, #21
 800889c:	f022 0203 	bic.w	r2, r2, #3
 80088a0:	3204      	adds	r2, #4
 80088a2:	f104 0115 	add.w	r1, r4, #21
 80088a6:	428f      	cmp	r7, r1
 80088a8:	bf38      	it	cc
 80088aa:	2204      	movcc	r2, #4
 80088ac:	9201      	str	r2, [sp, #4]
 80088ae:	9a02      	ldr	r2, [sp, #8]
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d80c      	bhi.n	80088d0 <__multiply+0x9c>
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	dd03      	ble.n	80088c2 <__multiply+0x8e>
 80088ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d059      	beq.n	8008976 <__multiply+0x142>
 80088c2:	6106      	str	r6, [r0, #16]
 80088c4:	b005      	add	sp, #20
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	f843 2b04 	str.w	r2, [r3], #4
 80088ce:	e7d8      	b.n	8008882 <__multiply+0x4e>
 80088d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80088d4:	f1ba 0f00 	cmp.w	sl, #0
 80088d8:	d023      	beq.n	8008922 <__multiply+0xee>
 80088da:	46a9      	mov	r9, r5
 80088dc:	f04f 0c00 	mov.w	ip, #0
 80088e0:	f104 0e14 	add.w	lr, r4, #20
 80088e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088e8:	f8d9 1000 	ldr.w	r1, [r9]
 80088ec:	fa1f fb82 	uxth.w	fp, r2
 80088f0:	b289      	uxth	r1, r1
 80088f2:	fb0a 110b 	mla	r1, sl, fp, r1
 80088f6:	4461      	add	r1, ip
 80088f8:	f8d9 c000 	ldr.w	ip, [r9]
 80088fc:	0c12      	lsrs	r2, r2, #16
 80088fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008902:	fb0a c202 	mla	r2, sl, r2, ip
 8008906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800890a:	b289      	uxth	r1, r1
 800890c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008910:	4577      	cmp	r7, lr
 8008912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008916:	f849 1b04 	str.w	r1, [r9], #4
 800891a:	d8e3      	bhi.n	80088e4 <__multiply+0xb0>
 800891c:	9a01      	ldr	r2, [sp, #4]
 800891e:	f845 c002 	str.w	ip, [r5, r2]
 8008922:	9a03      	ldr	r2, [sp, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800892a:	f1b9 0f00 	cmp.w	r9, #0
 800892e:	d020      	beq.n	8008972 <__multiply+0x13e>
 8008930:	46ae      	mov	lr, r5
 8008932:	f04f 0a00 	mov.w	sl, #0
 8008936:	6829      	ldr	r1, [r5, #0]
 8008938:	f104 0c14 	add.w	ip, r4, #20
 800893c:	f8bc b000 	ldrh.w	fp, [ip]
 8008940:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008944:	b289      	uxth	r1, r1
 8008946:	fb09 220b 	mla	r2, r9, fp, r2
 800894a:	4492      	add	sl, r2
 800894c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008950:	f84e 1b04 	str.w	r1, [lr], #4
 8008954:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008958:	f8be 1000 	ldrh.w	r1, [lr]
 800895c:	0c12      	lsrs	r2, r2, #16
 800895e:	fb09 1102 	mla	r1, r9, r2, r1
 8008962:	4567      	cmp	r7, ip
 8008964:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008968:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800896c:	d8e6      	bhi.n	800893c <__multiply+0x108>
 800896e:	9a01      	ldr	r2, [sp, #4]
 8008970:	50a9      	str	r1, [r5, r2]
 8008972:	3504      	adds	r5, #4
 8008974:	e79b      	b.n	80088ae <__multiply+0x7a>
 8008976:	3e01      	subs	r6, #1
 8008978:	e79d      	b.n	80088b6 <__multiply+0x82>
 800897a:	bf00      	nop
 800897c:	08009c28 	.word	0x08009c28
 8008980:	08009c39 	.word	0x08009c39

08008984 <__pow5mult>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	f012 0203 	ands.w	r2, r2, #3
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	d007      	beq.n	80089a4 <__pow5mult+0x20>
 8008994:	4c25      	ldr	r4, [pc, #148]	; (8008a2c <__pow5mult+0xa8>)
 8008996:	3a01      	subs	r2, #1
 8008998:	2300      	movs	r3, #0
 800899a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899e:	f7ff fe9f 	bl	80086e0 <__multadd>
 80089a2:	4607      	mov	r7, r0
 80089a4:	10ad      	asrs	r5, r5, #2
 80089a6:	d03d      	beq.n	8008a24 <__pow5mult+0xa0>
 80089a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089aa:	b97c      	cbnz	r4, 80089cc <__pow5mult+0x48>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f7ff fe11 	bl	80085d4 <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	6270      	str	r0, [r6, #36]	; 0x24
 80089b6:	b928      	cbnz	r0, 80089c4 <__pow5mult+0x40>
 80089b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <__pow5mult+0xac>)
 80089be:	481d      	ldr	r0, [pc, #116]	; (8008a34 <__pow5mult+0xb0>)
 80089c0:	f000 faae 	bl	8008f20 <__assert_func>
 80089c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c8:	6004      	str	r4, [r0, #0]
 80089ca:	60c4      	str	r4, [r0, #12]
 80089cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d4:	b94c      	cbnz	r4, 80089ea <__pow5mult+0x66>
 80089d6:	f240 2171 	movw	r1, #625	; 0x271
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff14 	bl	8008808 <__i2b>
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	07eb      	lsls	r3, r5, #31
 80089f0:	d50a      	bpl.n	8008a08 <__pow5mult+0x84>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4622      	mov	r2, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff1c 	bl	8008834 <__multiply>
 80089fc:	4680      	mov	r8, r0
 80089fe:	4639      	mov	r1, r7
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fe4b 	bl	800869c <_Bfree>
 8008a06:	4647      	mov	r7, r8
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	d00b      	beq.n	8008a24 <__pow5mult+0xa0>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	b938      	cbnz	r0, 8008a20 <__pow5mult+0x9c>
 8008a10:	4622      	mov	r2, r4
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ff0d 	bl	8008834 <__multiply>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	f8c0 9000 	str.w	r9, [r0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	e7e4      	b.n	80089ee <__pow5mult+0x6a>
 8008a24:	4638      	mov	r0, r7
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08009d88 	.word	0x08009d88
 8008a30:	08009bb6 	.word	0x08009bb6
 8008a34:	08009c39 	.word	0x08009c39

08008a38 <__lshift>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4607      	mov	r7, r0
 8008a40:	4691      	mov	r9, r2
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6849      	ldr	r1, [r1, #4]
 8008a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a50:	f108 0601 	add.w	r6, r8, #1
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	db0b      	blt.n	8008a70 <__lshift+0x38>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fddf 	bl	800861c <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b948      	cbnz	r0, 8008a76 <__lshift+0x3e>
 8008a62:	4602      	mov	r2, r0
 8008a64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <__lshift+0xd8>)
 8008a6a:	482a      	ldr	r0, [pc, #168]	; (8008b14 <__lshift+0xdc>)
 8008a6c:	f000 fa58 	bl	8008f20 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	e7ee      	b.n	8008a54 <__lshift+0x1c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f100 0114 	add.w	r1, r0, #20
 8008a7c:	f100 0210 	add.w	r2, r0, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	4553      	cmp	r3, sl
 8008a84:	db37      	blt.n	8008af6 <__lshift+0xbe>
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	f019 091f 	ands.w	r9, r9, #31
 8008a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a9c:	d02f      	beq.n	8008afe <__lshift+0xc6>
 8008a9e:	468a      	mov	sl, r1
 8008aa0:	f04f 0c00 	mov.w	ip, #0
 8008aa4:	f1c9 0e20 	rsb	lr, r9, #32
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	fa02 f209 	lsl.w	r2, r2, r9
 8008aae:	ea42 020c 	orr.w	r2, r2, ip
 8008ab2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aba:	4298      	cmp	r0, r3
 8008abc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ac0:	d8f2      	bhi.n	8008aa8 <__lshift+0x70>
 8008ac2:	1b03      	subs	r3, r0, r4
 8008ac4:	3b15      	subs	r3, #21
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	3304      	adds	r3, #4
 8008acc:	f104 0215 	add.w	r2, r4, #21
 8008ad0:	4290      	cmp	r0, r2
 8008ad2:	bf38      	it	cc
 8008ad4:	2304      	movcc	r3, #4
 8008ad6:	f841 c003 	str.w	ip, [r1, r3]
 8008ada:	f1bc 0f00 	cmp.w	ip, #0
 8008ade:	d001      	beq.n	8008ae4 <__lshift+0xac>
 8008ae0:	f108 0602 	add.w	r6, r8, #2
 8008ae4:	3e01      	subs	r6, #1
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	4621      	mov	r1, r4
 8008aea:	612e      	str	r6, [r5, #16]
 8008aec:	f7ff fdd6 	bl	800869c <_Bfree>
 8008af0:	4628      	mov	r0, r5
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008afa:	3301      	adds	r3, #1
 8008afc:	e7c1      	b.n	8008a82 <__lshift+0x4a>
 8008afe:	3904      	subs	r1, #4
 8008b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b04:	4298      	cmp	r0, r3
 8008b06:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b0a:	d8f9      	bhi.n	8008b00 <__lshift+0xc8>
 8008b0c:	e7ea      	b.n	8008ae4 <__lshift+0xac>
 8008b0e:	bf00      	nop
 8008b10:	08009c28 	.word	0x08009c28
 8008b14:	08009c39 	.word	0x08009c39

08008b18 <__mcmp>:
 8008b18:	4603      	mov	r3, r0
 8008b1a:	690a      	ldr	r2, [r1, #16]
 8008b1c:	6900      	ldr	r0, [r0, #16]
 8008b1e:	b530      	push	{r4, r5, lr}
 8008b20:	1a80      	subs	r0, r0, r2
 8008b22:	d10d      	bne.n	8008b40 <__mcmp+0x28>
 8008b24:	3314      	adds	r3, #20
 8008b26:	3114      	adds	r1, #20
 8008b28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b38:	4295      	cmp	r5, r2
 8008b3a:	d002      	beq.n	8008b42 <__mcmp+0x2a>
 8008b3c:	d304      	bcc.n	8008b48 <__mcmp+0x30>
 8008b3e:	2001      	movs	r0, #1
 8008b40:	bd30      	pop	{r4, r5, pc}
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	d3f4      	bcc.n	8008b30 <__mcmp+0x18>
 8008b46:	e7fb      	b.n	8008b40 <__mcmp+0x28>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b4c:	e7f8      	b.n	8008b40 <__mcmp+0x28>
	...

08008b50 <__mdiff>:
 8008b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	460d      	mov	r5, r1
 8008b56:	4607      	mov	r7, r0
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	f7ff ffdb 	bl	8008b18 <__mcmp>
 8008b62:	1e06      	subs	r6, r0, #0
 8008b64:	d111      	bne.n	8008b8a <__mdiff+0x3a>
 8008b66:	4631      	mov	r1, r6
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff fd57 	bl	800861c <_Balloc>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	b928      	cbnz	r0, 8008b7e <__mdiff+0x2e>
 8008b72:	f240 2132 	movw	r1, #562	; 0x232
 8008b76:	4b3a      	ldr	r3, [pc, #232]	; (8008c60 <__mdiff+0x110>)
 8008b78:	483a      	ldr	r0, [pc, #232]	; (8008c64 <__mdiff+0x114>)
 8008b7a:	f000 f9d1 	bl	8008f20 <__assert_func>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b84:	4610      	mov	r0, r2
 8008b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	bfa4      	itt	ge
 8008b8c:	4623      	movge	r3, r4
 8008b8e:	462c      	movge	r4, r5
 8008b90:	4638      	mov	r0, r7
 8008b92:	6861      	ldr	r1, [r4, #4]
 8008b94:	bfa6      	itte	ge
 8008b96:	461d      	movge	r5, r3
 8008b98:	2600      	movge	r6, #0
 8008b9a:	2601      	movlt	r6, #1
 8008b9c:	f7ff fd3e 	bl	800861c <_Balloc>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	b918      	cbnz	r0, 8008bac <__mdiff+0x5c>
 8008ba4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ba8:	4b2d      	ldr	r3, [pc, #180]	; (8008c60 <__mdiff+0x110>)
 8008baa:	e7e5      	b.n	8008b78 <__mdiff+0x28>
 8008bac:	f102 0814 	add.w	r8, r2, #20
 8008bb0:	46c2      	mov	sl, r8
 8008bb2:	f04f 0c00 	mov.w	ip, #0
 8008bb6:	6927      	ldr	r7, [r4, #16]
 8008bb8:	60c6      	str	r6, [r0, #12]
 8008bba:	692e      	ldr	r6, [r5, #16]
 8008bbc:	f104 0014 	add.w	r0, r4, #20
 8008bc0:	f105 0914 	add.w	r9, r5, #20
 8008bc4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008bc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bcc:	3410      	adds	r4, #16
 8008bce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008bd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bd6:	fa1f f18b 	uxth.w	r1, fp
 8008bda:	448c      	add	ip, r1
 8008bdc:	b299      	uxth	r1, r3
 8008bde:	0c1b      	lsrs	r3, r3, #16
 8008be0:	ebac 0101 	sub.w	r1, ip, r1
 8008be4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008be8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008bec:	b289      	uxth	r1, r1
 8008bee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008bf2:	454e      	cmp	r6, r9
 8008bf4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bf8:	f84a 3b04 	str.w	r3, [sl], #4
 8008bfc:	d8e7      	bhi.n	8008bce <__mdiff+0x7e>
 8008bfe:	1b73      	subs	r3, r6, r5
 8008c00:	3b15      	subs	r3, #21
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	3515      	adds	r5, #21
 8008c08:	3304      	adds	r3, #4
 8008c0a:	42ae      	cmp	r6, r5
 8008c0c:	bf38      	it	cc
 8008c0e:	2304      	movcc	r3, #4
 8008c10:	4418      	add	r0, r3
 8008c12:	4443      	add	r3, r8
 8008c14:	461e      	mov	r6, r3
 8008c16:	4605      	mov	r5, r0
 8008c18:	4575      	cmp	r5, lr
 8008c1a:	d30e      	bcc.n	8008c3a <__mdiff+0xea>
 8008c1c:	f10e 0103 	add.w	r1, lr, #3
 8008c20:	1a09      	subs	r1, r1, r0
 8008c22:	f021 0103 	bic.w	r1, r1, #3
 8008c26:	3803      	subs	r0, #3
 8008c28:	4586      	cmp	lr, r0
 8008c2a:	bf38      	it	cc
 8008c2c:	2100      	movcc	r1, #0
 8008c2e:	4419      	add	r1, r3
 8008c30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008c34:	b18b      	cbz	r3, 8008c5a <__mdiff+0x10a>
 8008c36:	6117      	str	r7, [r2, #16]
 8008c38:	e7a4      	b.n	8008b84 <__mdiff+0x34>
 8008c3a:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c3e:	fa1f f188 	uxth.w	r1, r8
 8008c42:	4461      	add	r1, ip
 8008c44:	140c      	asrs	r4, r1, #16
 8008c46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c4a:	b289      	uxth	r1, r1
 8008c4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c50:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008c54:	f846 1b04 	str.w	r1, [r6], #4
 8008c58:	e7de      	b.n	8008c18 <__mdiff+0xc8>
 8008c5a:	3f01      	subs	r7, #1
 8008c5c:	e7e8      	b.n	8008c30 <__mdiff+0xe0>
 8008c5e:	bf00      	nop
 8008c60:	08009c28 	.word	0x08009c28
 8008c64:	08009c39 	.word	0x08009c39

08008c68 <__d2b>:
 8008c68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008c72:	4690      	mov	r8, r2
 8008c74:	461d      	mov	r5, r3
 8008c76:	f7ff fcd1 	bl	800861c <_Balloc>
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	b930      	cbnz	r0, 8008c8c <__d2b+0x24>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	f240 310a 	movw	r1, #778	; 0x30a
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <__d2b+0xb0>)
 8008c86:	4825      	ldr	r0, [pc, #148]	; (8008d1c <__d2b+0xb4>)
 8008c88:	f000 f94a 	bl	8008f20 <__assert_func>
 8008c8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008c90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008c94:	bb2d      	cbnz	r5, 8008ce2 <__d2b+0x7a>
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f1b8 0300 	subs.w	r3, r8, #0
 8008c9c:	d026      	beq.n	8008cec <__d2b+0x84>
 8008c9e:	4668      	mov	r0, sp
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	f7ff fd83 	bl	80087ac <__lo0bits>
 8008ca6:	9900      	ldr	r1, [sp, #0]
 8008ca8:	b1f0      	cbz	r0, 8008ce8 <__d2b+0x80>
 8008caa:	9a01      	ldr	r2, [sp, #4]
 8008cac:	f1c0 0320 	rsb	r3, r0, #32
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	40c2      	lsrs	r2, r0
 8008cb8:	6163      	str	r3, [r4, #20]
 8008cba:	9201      	str	r2, [sp, #4]
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2102      	movne	r1, #2
 8008cc4:	2101      	moveq	r1, #1
 8008cc6:	61a3      	str	r3, [r4, #24]
 8008cc8:	6121      	str	r1, [r4, #16]
 8008cca:	b1c5      	cbz	r5, 8008cfe <__d2b+0x96>
 8008ccc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cd0:	4405      	add	r5, r0
 8008cd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cd6:	603d      	str	r5, [r7, #0]
 8008cd8:	6030      	str	r0, [r6, #0]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	b002      	add	sp, #8
 8008cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce6:	e7d6      	b.n	8008c96 <__d2b+0x2e>
 8008ce8:	6161      	str	r1, [r4, #20]
 8008cea:	e7e7      	b.n	8008cbc <__d2b+0x54>
 8008cec:	a801      	add	r0, sp, #4
 8008cee:	f7ff fd5d 	bl	80087ac <__lo0bits>
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	6121      	str	r1, [r4, #16]
 8008cf8:	6163      	str	r3, [r4, #20]
 8008cfa:	3020      	adds	r0, #32
 8008cfc:	e7e5      	b.n	8008cca <__d2b+0x62>
 8008cfe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008d02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d06:	6038      	str	r0, [r7, #0]
 8008d08:	6918      	ldr	r0, [r3, #16]
 8008d0a:	f7ff fd2f 	bl	800876c <__hi0bits>
 8008d0e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008d12:	6031      	str	r1, [r6, #0]
 8008d14:	e7e1      	b.n	8008cda <__d2b+0x72>
 8008d16:	bf00      	nop
 8008d18:	08009c28 	.word	0x08009c28
 8008d1c:	08009c39 	.word	0x08009c39

08008d20 <_calloc_r>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	fba1 5402 	umull	r5, r4, r1, r2
 8008d26:	b934      	cbnz	r4, 8008d36 <_calloc_r+0x16>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f000 f875 	bl	8008e18 <_malloc_r>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_calloc_r+0x1e>
 8008d32:	4630      	mov	r0, r6
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
 8008d36:	220c      	movs	r2, #12
 8008d38:	2600      	movs	r6, #0
 8008d3a:	6002      	str	r2, [r0, #0]
 8008d3c:	e7f9      	b.n	8008d32 <_calloc_r+0x12>
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7fe f8c7 	bl	8006ed4 <memset>
 8008d46:	e7f4      	b.n	8008d32 <_calloc_r+0x12>

08008d48 <_free_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	d040      	beq.n	8008dd2 <_free_r+0x8a>
 8008d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d54:	1f0c      	subs	r4, r1, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bfb8      	it	lt
 8008d5a:	18e4      	addlt	r4, r4, r3
 8008d5c:	f000 f922 	bl	8008fa4 <__malloc_lock>
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <_free_r+0x8c>)
 8008d62:	6813      	ldr	r3, [r2, #0]
 8008d64:	b933      	cbnz	r3, 8008d74 <_free_r+0x2c>
 8008d66:	6063      	str	r3, [r4, #4]
 8008d68:	6014      	str	r4, [r2, #0]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d70:	f000 b91e 	b.w	8008fb0 <__malloc_unlock>
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d908      	bls.n	8008d8a <_free_r+0x42>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf01      	itttt	eq
 8008d80:	6819      	ldreq	r1, [r3, #0]
 8008d82:	685b      	ldreq	r3, [r3, #4]
 8008d84:	1809      	addeq	r1, r1, r0
 8008d86:	6021      	streq	r1, [r4, #0]
 8008d88:	e7ed      	b.n	8008d66 <_free_r+0x1e>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b10b      	cbz	r3, 8008d94 <_free_r+0x4c>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d9fa      	bls.n	8008d8a <_free_r+0x42>
 8008d94:	6811      	ldr	r1, [r2, #0]
 8008d96:	1850      	adds	r0, r2, r1
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d10b      	bne.n	8008db4 <_free_r+0x6c>
 8008d9c:	6820      	ldr	r0, [r4, #0]
 8008d9e:	4401      	add	r1, r0
 8008da0:	1850      	adds	r0, r2, r1
 8008da2:	4283      	cmp	r3, r0
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	d1e0      	bne.n	8008d6a <_free_r+0x22>
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4401      	add	r1, r0
 8008dae:	6011      	str	r1, [r2, #0]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	e7da      	b.n	8008d6a <_free_r+0x22>
 8008db4:	d902      	bls.n	8008dbc <_free_r+0x74>
 8008db6:	230c      	movs	r3, #12
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	e7d6      	b.n	8008d6a <_free_r+0x22>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	1821      	adds	r1, r4, r0
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	bf01      	itttt	eq
 8008dc4:	6819      	ldreq	r1, [r3, #0]
 8008dc6:	685b      	ldreq	r3, [r3, #4]
 8008dc8:	1809      	addeq	r1, r1, r0
 8008dca:	6021      	streq	r1, [r4, #0]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	6054      	str	r4, [r2, #4]
 8008dd0:	e7cb      	b.n	8008d6a <_free_r+0x22>
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	200005a0 	.word	0x200005a0

08008dd8 <sbrk_aligned>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	4e0e      	ldr	r6, [pc, #56]	; (8008e14 <sbrk_aligned+0x3c>)
 8008ddc:	460c      	mov	r4, r1
 8008dde:	6831      	ldr	r1, [r6, #0]
 8008de0:	4605      	mov	r5, r0
 8008de2:	b911      	cbnz	r1, 8008dea <sbrk_aligned+0x12>
 8008de4:	f000 f88c 	bl	8008f00 <_sbrk_r>
 8008de8:	6030      	str	r0, [r6, #0]
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f887 	bl	8008f00 <_sbrk_r>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d00a      	beq.n	8008e0c <sbrk_aligned+0x34>
 8008df6:	1cc4      	adds	r4, r0, #3
 8008df8:	f024 0403 	bic.w	r4, r4, #3
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d007      	beq.n	8008e10 <sbrk_aligned+0x38>
 8008e00:	1a21      	subs	r1, r4, r0
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f87c 	bl	8008f00 <_sbrk_r>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d101      	bne.n	8008e10 <sbrk_aligned+0x38>
 8008e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e10:	4620      	mov	r0, r4
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	200005a4 	.word	0x200005a4

08008e18 <_malloc_r>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	1ccd      	adds	r5, r1, #3
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	db01      	blt.n	8008e34 <_malloc_r+0x1c>
 8008e30:	42a9      	cmp	r1, r5
 8008e32:	d905      	bls.n	8008e40 <_malloc_r+0x28>
 8008e34:	230c      	movs	r3, #12
 8008e36:	2600      	movs	r6, #0
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	4e2e      	ldr	r6, [pc, #184]	; (8008efc <_malloc_r+0xe4>)
 8008e42:	f000 f8af 	bl	8008fa4 <__malloc_lock>
 8008e46:	6833      	ldr	r3, [r6, #0]
 8008e48:	461c      	mov	r4, r3
 8008e4a:	bb34      	cbnz	r4, 8008e9a <_malloc_r+0x82>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f7ff ffc2 	bl	8008dd8 <sbrk_aligned>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	4604      	mov	r4, r0
 8008e58:	d14d      	bne.n	8008ef6 <_malloc_r+0xde>
 8008e5a:	6834      	ldr	r4, [r6, #0]
 8008e5c:	4626      	mov	r6, r4
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d140      	bne.n	8008ee4 <_malloc_r+0xcc>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4631      	mov	r1, r6
 8008e66:	4638      	mov	r0, r7
 8008e68:	eb04 0803 	add.w	r8, r4, r3
 8008e6c:	f000 f848 	bl	8008f00 <_sbrk_r>
 8008e70:	4580      	cmp	r8, r0
 8008e72:	d13a      	bne.n	8008eea <_malloc_r+0xd2>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	3503      	adds	r5, #3
 8008e78:	1a6d      	subs	r5, r5, r1
 8008e7a:	f025 0503 	bic.w	r5, r5, #3
 8008e7e:	3508      	adds	r5, #8
 8008e80:	2d0c      	cmp	r5, #12
 8008e82:	bf38      	it	cc
 8008e84:	250c      	movcc	r5, #12
 8008e86:	4638      	mov	r0, r7
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7ff ffa5 	bl	8008dd8 <sbrk_aligned>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d02b      	beq.n	8008eea <_malloc_r+0xd2>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	442b      	add	r3, r5
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	e00e      	b.n	8008eb8 <_malloc_r+0xa0>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	1b52      	subs	r2, r2, r5
 8008e9e:	d41e      	bmi.n	8008ede <_malloc_r+0xc6>
 8008ea0:	2a0b      	cmp	r2, #11
 8008ea2:	d916      	bls.n	8008ed2 <_malloc_r+0xba>
 8008ea4:	1961      	adds	r1, r4, r5
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	bf18      	it	ne
 8008eac:	6059      	strne	r1, [r3, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	bf08      	it	eq
 8008eb2:	6031      	streq	r1, [r6, #0]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f104 060b 	add.w	r6, r4, #11
 8008ebe:	f000 f877 	bl	8008fb0 <__malloc_unlock>
 8008ec2:	f026 0607 	bic.w	r6, r6, #7
 8008ec6:	1d23      	adds	r3, r4, #4
 8008ec8:	1af2      	subs	r2, r6, r3
 8008eca:	d0b6      	beq.n	8008e3a <_malloc_r+0x22>
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	50a3      	str	r3, [r4, r2]
 8008ed0:	e7b3      	b.n	8008e3a <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	6032      	streq	r2, [r6, #0]
 8008eda:	605a      	strne	r2, [r3, #4]
 8008edc:	e7ec      	b.n	8008eb8 <_malloc_r+0xa0>
 8008ede:	4623      	mov	r3, r4
 8008ee0:	6864      	ldr	r4, [r4, #4]
 8008ee2:	e7b2      	b.n	8008e4a <_malloc_r+0x32>
 8008ee4:	4634      	mov	r4, r6
 8008ee6:	6876      	ldr	r6, [r6, #4]
 8008ee8:	e7b9      	b.n	8008e5e <_malloc_r+0x46>
 8008eea:	230c      	movs	r3, #12
 8008eec:	4638      	mov	r0, r7
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	f000 f85e 	bl	8008fb0 <__malloc_unlock>
 8008ef4:	e7a1      	b.n	8008e3a <_malloc_r+0x22>
 8008ef6:	6025      	str	r5, [r4, #0]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa0>
 8008efa:	bf00      	nop
 8008efc:	200005a0 	.word	0x200005a0

08008f00 <_sbrk_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	2300      	movs	r3, #0
 8008f04:	4d05      	ldr	r5, [pc, #20]	; (8008f1c <_sbrk_r+0x1c>)
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7f9 fa6e 	bl	80023ec <_sbrk>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_sbrk_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_sbrk_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	200005a8 	.word	0x200005a8

08008f20 <__assert_func>:
 8008f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f22:	4614      	mov	r4, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <__assert_func+0x2c>)
 8008f28:	4605      	mov	r5, r0
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68d8      	ldr	r0, [r3, #12]
 8008f2e:	b14c      	cbz	r4, 8008f44 <__assert_func+0x24>
 8008f30:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <__assert_func+0x30>)
 8008f32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f36:	9100      	str	r1, [sp, #0]
 8008f38:	462b      	mov	r3, r5
 8008f3a:	4906      	ldr	r1, [pc, #24]	; (8008f54 <__assert_func+0x34>)
 8008f3c:	f000 f80e 	bl	8008f5c <fiprintf>
 8008f40:	f000 fa62 	bl	8009408 <abort>
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <__assert_func+0x38>)
 8008f46:	461c      	mov	r4, r3
 8008f48:	e7f3      	b.n	8008f32 <__assert_func+0x12>
 8008f4a:	bf00      	nop
 8008f4c:	200000f0 	.word	0x200000f0
 8008f50:	08009d94 	.word	0x08009d94
 8008f54:	08009da1 	.word	0x08009da1
 8008f58:	08009dcf 	.word	0x08009dcf

08008f5c <fiprintf>:
 8008f5c:	b40e      	push	{r1, r2, r3}
 8008f5e:	b503      	push	{r0, r1, lr}
 8008f60:	4601      	mov	r1, r0
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	4805      	ldr	r0, [pc, #20]	; (8008f7c <fiprintf+0x20>)
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f000 f84d 	bl	800900c <_vfiprintf_r>
 8008f72:	b002      	add	sp, #8
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	200000f0 	.word	0x200000f0

08008f80 <__ascii_mbtowc>:
 8008f80:	b082      	sub	sp, #8
 8008f82:	b901      	cbnz	r1, 8008f86 <__ascii_mbtowc+0x6>
 8008f84:	a901      	add	r1, sp, #4
 8008f86:	b142      	cbz	r2, 8008f9a <__ascii_mbtowc+0x1a>
 8008f88:	b14b      	cbz	r3, 8008f9e <__ascii_mbtowc+0x1e>
 8008f8a:	7813      	ldrb	r3, [r2, #0]
 8008f8c:	600b      	str	r3, [r1, #0]
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	1e10      	subs	r0, r2, #0
 8008f92:	bf18      	it	ne
 8008f94:	2001      	movne	r0, #1
 8008f96:	b002      	add	sp, #8
 8008f98:	4770      	bx	lr
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	e7fb      	b.n	8008f96 <__ascii_mbtowc+0x16>
 8008f9e:	f06f 0001 	mvn.w	r0, #1
 8008fa2:	e7f8      	b.n	8008f96 <__ascii_mbtowc+0x16>

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_lock+0x8>)
 8008fa6:	f000 bbeb 	b.w	8009780 <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	200005ac 	.word	0x200005ac

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f000 bbe6 	b.w	8009782 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	200005ac 	.word	0x200005ac

08008fbc <__sfputc_r>:
 8008fbc:	6893      	ldr	r3, [r2, #8]
 8008fbe:	b410      	push	{r4}
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	6093      	str	r3, [r2, #8]
 8008fc6:	da07      	bge.n	8008fd8 <__sfputc_r+0x1c>
 8008fc8:	6994      	ldr	r4, [r2, #24]
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	db01      	blt.n	8008fd2 <__sfputc_r+0x16>
 8008fce:	290a      	cmp	r1, #10
 8008fd0:	d102      	bne.n	8008fd8 <__sfputc_r+0x1c>
 8008fd2:	bc10      	pop	{r4}
 8008fd4:	f000 b94a 	b.w	800926c <__swbuf_r>
 8008fd8:	6813      	ldr	r3, [r2, #0]
 8008fda:	1c58      	adds	r0, r3, #1
 8008fdc:	6010      	str	r0, [r2, #0]
 8008fde:	7019      	strb	r1, [r3, #0]
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	bc10      	pop	{r4}
 8008fe4:	4770      	bx	lr

08008fe6 <__sfputs_r>:
 8008fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe8:	4606      	mov	r6, r0
 8008fea:	460f      	mov	r7, r1
 8008fec:	4614      	mov	r4, r2
 8008fee:	18d5      	adds	r5, r2, r3
 8008ff0:	42ac      	cmp	r4, r5
 8008ff2:	d101      	bne.n	8008ff8 <__sfputs_r+0x12>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e007      	b.n	8009008 <__sfputs_r+0x22>
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	f7ff ffdc 	bl	8008fbc <__sfputc_r>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d1f3      	bne.n	8008ff0 <__sfputs_r+0xa>
 8009008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800900c <_vfiprintf_r>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	460d      	mov	r5, r1
 8009012:	4614      	mov	r4, r2
 8009014:	4698      	mov	r8, r3
 8009016:	4606      	mov	r6, r0
 8009018:	b09d      	sub	sp, #116	; 0x74
 800901a:	b118      	cbz	r0, 8009024 <_vfiprintf_r+0x18>
 800901c:	6983      	ldr	r3, [r0, #24]
 800901e:	b90b      	cbnz	r3, 8009024 <_vfiprintf_r+0x18>
 8009020:	f000 fb10 	bl	8009644 <__sinit>
 8009024:	4b89      	ldr	r3, [pc, #548]	; (800924c <_vfiprintf_r+0x240>)
 8009026:	429d      	cmp	r5, r3
 8009028:	d11b      	bne.n	8009062 <_vfiprintf_r+0x56>
 800902a:	6875      	ldr	r5, [r6, #4]
 800902c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	d405      	bmi.n	800903e <_vfiprintf_r+0x32>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	059a      	lsls	r2, r3, #22
 8009036:	d402      	bmi.n	800903e <_vfiprintf_r+0x32>
 8009038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800903a:	f000 fba1 	bl	8009780 <__retarget_lock_acquire_recursive>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	071b      	lsls	r3, r3, #28
 8009042:	d501      	bpl.n	8009048 <_vfiprintf_r+0x3c>
 8009044:	692b      	ldr	r3, [r5, #16]
 8009046:	b9eb      	cbnz	r3, 8009084 <_vfiprintf_r+0x78>
 8009048:	4629      	mov	r1, r5
 800904a:	4630      	mov	r0, r6
 800904c:	f000 f96e 	bl	800932c <__swsetup_r>
 8009050:	b1c0      	cbz	r0, 8009084 <_vfiprintf_r+0x78>
 8009052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009054:	07dc      	lsls	r4, r3, #31
 8009056:	d50e      	bpl.n	8009076 <_vfiprintf_r+0x6a>
 8009058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800905c:	b01d      	add	sp, #116	; 0x74
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	4b7b      	ldr	r3, [pc, #492]	; (8009250 <_vfiprintf_r+0x244>)
 8009064:	429d      	cmp	r5, r3
 8009066:	d101      	bne.n	800906c <_vfiprintf_r+0x60>
 8009068:	68b5      	ldr	r5, [r6, #8]
 800906a:	e7df      	b.n	800902c <_vfiprintf_r+0x20>
 800906c:	4b79      	ldr	r3, [pc, #484]	; (8009254 <_vfiprintf_r+0x248>)
 800906e:	429d      	cmp	r5, r3
 8009070:	bf08      	it	eq
 8009072:	68f5      	ldreq	r5, [r6, #12]
 8009074:	e7da      	b.n	800902c <_vfiprintf_r+0x20>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	0598      	lsls	r0, r3, #22
 800907a:	d4ed      	bmi.n	8009058 <_vfiprintf_r+0x4c>
 800907c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907e:	f000 fb80 	bl	8009782 <__retarget_lock_release_recursive>
 8009082:	e7e9      	b.n	8009058 <_vfiprintf_r+0x4c>
 8009084:	2300      	movs	r3, #0
 8009086:	9309      	str	r3, [sp, #36]	; 0x24
 8009088:	2320      	movs	r3, #32
 800908a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908e:	2330      	movs	r3, #48	; 0x30
 8009090:	f04f 0901 	mov.w	r9, #1
 8009094:	f8cd 800c 	str.w	r8, [sp, #12]
 8009098:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009258 <_vfiprintf_r+0x24c>
 800909c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a0:	4623      	mov	r3, r4
 80090a2:	469a      	mov	sl, r3
 80090a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a8:	b10a      	cbz	r2, 80090ae <_vfiprintf_r+0xa2>
 80090aa:	2a25      	cmp	r2, #37	; 0x25
 80090ac:	d1f9      	bne.n	80090a2 <_vfiprintf_r+0x96>
 80090ae:	ebba 0b04 	subs.w	fp, sl, r4
 80090b2:	d00b      	beq.n	80090cc <_vfiprintf_r+0xc0>
 80090b4:	465b      	mov	r3, fp
 80090b6:	4622      	mov	r2, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ff93 	bl	8008fe6 <__sfputs_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	f000 80aa 	beq.w	800921a <_vfiprintf_r+0x20e>
 80090c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c8:	445a      	add	r2, fp
 80090ca:	9209      	str	r2, [sp, #36]	; 0x24
 80090cc:	f89a 3000 	ldrb.w	r3, [sl]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 80a2 	beq.w	800921a <_vfiprintf_r+0x20e>
 80090d6:	2300      	movs	r3, #0
 80090d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e0:	f10a 0a01 	add.w	sl, sl, #1
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	9307      	str	r3, [sp, #28]
 80090e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ec:	931a      	str	r3, [sp, #104]	; 0x68
 80090ee:	4654      	mov	r4, sl
 80090f0:	2205      	movs	r2, #5
 80090f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f6:	4858      	ldr	r0, [pc, #352]	; (8009258 <_vfiprintf_r+0x24c>)
 80090f8:	f7ff fa74 	bl	80085e4 <memchr>
 80090fc:	9a04      	ldr	r2, [sp, #16]
 80090fe:	b9d8      	cbnz	r0, 8009138 <_vfiprintf_r+0x12c>
 8009100:	06d1      	lsls	r1, r2, #27
 8009102:	bf44      	itt	mi
 8009104:	2320      	movmi	r3, #32
 8009106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910a:	0713      	lsls	r3, r2, #28
 800910c:	bf44      	itt	mi
 800910e:	232b      	movmi	r3, #43	; 0x2b
 8009110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009114:	f89a 3000 	ldrb.w	r3, [sl]
 8009118:	2b2a      	cmp	r3, #42	; 0x2a
 800911a:	d015      	beq.n	8009148 <_vfiprintf_r+0x13c>
 800911c:	4654      	mov	r4, sl
 800911e:	2000      	movs	r0, #0
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	9a07      	ldr	r2, [sp, #28]
 8009126:	4621      	mov	r1, r4
 8009128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912c:	3b30      	subs	r3, #48	; 0x30
 800912e:	2b09      	cmp	r3, #9
 8009130:	d94e      	bls.n	80091d0 <_vfiprintf_r+0x1c4>
 8009132:	b1b0      	cbz	r0, 8009162 <_vfiprintf_r+0x156>
 8009134:	9207      	str	r2, [sp, #28]
 8009136:	e014      	b.n	8009162 <_vfiprintf_r+0x156>
 8009138:	eba0 0308 	sub.w	r3, r0, r8
 800913c:	fa09 f303 	lsl.w	r3, r9, r3
 8009140:	4313      	orrs	r3, r2
 8009142:	46a2      	mov	sl, r4
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	e7d2      	b.n	80090ee <_vfiprintf_r+0xe2>
 8009148:	9b03      	ldr	r3, [sp, #12]
 800914a:	1d19      	adds	r1, r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	9103      	str	r1, [sp, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbb      	ittet	lt
 8009154:	425b      	neglt	r3, r3
 8009156:	f042 0202 	orrlt.w	r2, r2, #2
 800915a:	9307      	strge	r3, [sp, #28]
 800915c:	9307      	strlt	r3, [sp, #28]
 800915e:	bfb8      	it	lt
 8009160:	9204      	strlt	r2, [sp, #16]
 8009162:	7823      	ldrb	r3, [r4, #0]
 8009164:	2b2e      	cmp	r3, #46	; 0x2e
 8009166:	d10c      	bne.n	8009182 <_vfiprintf_r+0x176>
 8009168:	7863      	ldrb	r3, [r4, #1]
 800916a:	2b2a      	cmp	r3, #42	; 0x2a
 800916c:	d135      	bne.n	80091da <_vfiprintf_r+0x1ce>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	3402      	adds	r4, #2
 8009172:	1d1a      	adds	r2, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9203      	str	r2, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfb8      	it	lt
 800917c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009180:	9305      	str	r3, [sp, #20]
 8009182:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800925c <_vfiprintf_r+0x250>
 8009186:	2203      	movs	r2, #3
 8009188:	4650      	mov	r0, sl
 800918a:	7821      	ldrb	r1, [r4, #0]
 800918c:	f7ff fa2a 	bl	80085e4 <memchr>
 8009190:	b140      	cbz	r0, 80091a4 <_vfiprintf_r+0x198>
 8009192:	2340      	movs	r3, #64	; 0x40
 8009194:	eba0 000a 	sub.w	r0, r0, sl
 8009198:	fa03 f000 	lsl.w	r0, r3, r0
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	3401      	adds	r4, #1
 80091a0:	4303      	orrs	r3, r0
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a8:	2206      	movs	r2, #6
 80091aa:	482d      	ldr	r0, [pc, #180]	; (8009260 <_vfiprintf_r+0x254>)
 80091ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091b0:	f7ff fa18 	bl	80085e4 <memchr>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d03f      	beq.n	8009238 <_vfiprintf_r+0x22c>
 80091b8:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <_vfiprintf_r+0x258>)
 80091ba:	bb1b      	cbnz	r3, 8009204 <_vfiprintf_r+0x1f8>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	3307      	adds	r3, #7
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	3308      	adds	r3, #8
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	443b      	add	r3, r7
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
 80091ce:	e767      	b.n	80090a0 <_vfiprintf_r+0x94>
 80091d0:	460c      	mov	r4, r1
 80091d2:	2001      	movs	r0, #1
 80091d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d8:	e7a5      	b.n	8009126 <_vfiprintf_r+0x11a>
 80091da:	2300      	movs	r3, #0
 80091dc:	f04f 0c0a 	mov.w	ip, #10
 80091e0:	4619      	mov	r1, r3
 80091e2:	3401      	adds	r4, #1
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	; 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_vfiprintf_r+0x1ee>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c5      	beq.n	8009182 <_vfiprintf_r+0x176>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c3      	b.n	8009182 <_vfiprintf_r+0x176>
 80091fa:	4604      	mov	r4, r0
 80091fc:	2301      	movs	r3, #1
 80091fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009202:	e7f0      	b.n	80091e6 <_vfiprintf_r+0x1da>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	462a      	mov	r2, r5
 800920a:	4630      	mov	r0, r6
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <_vfiprintf_r+0x25c>)
 800920e:	a904      	add	r1, sp, #16
 8009210:	f7fd ff06 	bl	8007020 <_printf_float>
 8009214:	4607      	mov	r7, r0
 8009216:	1c78      	adds	r0, r7, #1
 8009218:	d1d6      	bne.n	80091c8 <_vfiprintf_r+0x1bc>
 800921a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800921c:	07d9      	lsls	r1, r3, #31
 800921e:	d405      	bmi.n	800922c <_vfiprintf_r+0x220>
 8009220:	89ab      	ldrh	r3, [r5, #12]
 8009222:	059a      	lsls	r2, r3, #22
 8009224:	d402      	bmi.n	800922c <_vfiprintf_r+0x220>
 8009226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009228:	f000 faab 	bl	8009782 <__retarget_lock_release_recursive>
 800922c:	89ab      	ldrh	r3, [r5, #12]
 800922e:	065b      	lsls	r3, r3, #25
 8009230:	f53f af12 	bmi.w	8009058 <_vfiprintf_r+0x4c>
 8009234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009236:	e711      	b.n	800905c <_vfiprintf_r+0x50>
 8009238:	ab03      	add	r3, sp, #12
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	462a      	mov	r2, r5
 800923e:	4630      	mov	r0, r6
 8009240:	4b09      	ldr	r3, [pc, #36]	; (8009268 <_vfiprintf_r+0x25c>)
 8009242:	a904      	add	r1, sp, #16
 8009244:	f7fe f988 	bl	8007558 <_printf_i>
 8009248:	e7e4      	b.n	8009214 <_vfiprintf_r+0x208>
 800924a:	bf00      	nop
 800924c:	08009e0c 	.word	0x08009e0c
 8009250:	08009e2c 	.word	0x08009e2c
 8009254:	08009dec 	.word	0x08009dec
 8009258:	08009dda 	.word	0x08009dda
 800925c:	08009de0 	.word	0x08009de0
 8009260:	08009de4 	.word	0x08009de4
 8009264:	08007021 	.word	0x08007021
 8009268:	08008fe7 	.word	0x08008fe7

0800926c <__swbuf_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	460e      	mov	r6, r1
 8009270:	4614      	mov	r4, r2
 8009272:	4605      	mov	r5, r0
 8009274:	b118      	cbz	r0, 800927e <__swbuf_r+0x12>
 8009276:	6983      	ldr	r3, [r0, #24]
 8009278:	b90b      	cbnz	r3, 800927e <__swbuf_r+0x12>
 800927a:	f000 f9e3 	bl	8009644 <__sinit>
 800927e:	4b21      	ldr	r3, [pc, #132]	; (8009304 <__swbuf_r+0x98>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d12b      	bne.n	80092dc <__swbuf_r+0x70>
 8009284:	686c      	ldr	r4, [r5, #4]
 8009286:	69a3      	ldr	r3, [r4, #24]
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	071a      	lsls	r2, r3, #28
 800928e:	d52f      	bpl.n	80092f0 <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	b36b      	cbz	r3, 80092f0 <__swbuf_r+0x84>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	b2f6      	uxtb	r6, r6
 800929a:	1ac0      	subs	r0, r0, r3
 800929c:	6963      	ldr	r3, [r4, #20]
 800929e:	4637      	mov	r7, r6
 80092a0:	4283      	cmp	r3, r0
 80092a2:	dc04      	bgt.n	80092ae <__swbuf_r+0x42>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 f938 	bl	800951c <_fflush_r>
 80092ac:	bb30      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	3001      	adds	r0, #1
 80092b2:	3b01      	subs	r3, #1
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	701e      	strb	r6, [r3, #0]
 80092be:	6963      	ldr	r3, [r4, #20]
 80092c0:	4283      	cmp	r3, r0
 80092c2:	d004      	beq.n	80092ce <__swbuf_r+0x62>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	07db      	lsls	r3, r3, #31
 80092c8:	d506      	bpl.n	80092d8 <__swbuf_r+0x6c>
 80092ca:	2e0a      	cmp	r6, #10
 80092cc:	d104      	bne.n	80092d8 <__swbuf_r+0x6c>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f000 f923 	bl	800951c <_fflush_r>
 80092d6:	b988      	cbnz	r0, 80092fc <__swbuf_r+0x90>
 80092d8:	4638      	mov	r0, r7
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <__swbuf_r+0x9c>)
 80092de:	429c      	cmp	r4, r3
 80092e0:	d101      	bne.n	80092e6 <__swbuf_r+0x7a>
 80092e2:	68ac      	ldr	r4, [r5, #8]
 80092e4:	e7cf      	b.n	8009286 <__swbuf_r+0x1a>
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <__swbuf_r+0xa0>)
 80092e8:	429c      	cmp	r4, r3
 80092ea:	bf08      	it	eq
 80092ec:	68ec      	ldreq	r4, [r5, #12]
 80092ee:	e7ca      	b.n	8009286 <__swbuf_r+0x1a>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 f81a 	bl	800932c <__swsetup_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d0cb      	beq.n	8009294 <__swbuf_r+0x28>
 80092fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009300:	e7ea      	b.n	80092d8 <__swbuf_r+0x6c>
 8009302:	bf00      	nop
 8009304:	08009e0c 	.word	0x08009e0c
 8009308:	08009e2c 	.word	0x08009e2c
 800930c:	08009dec 	.word	0x08009dec

08009310 <__ascii_wctomb>:
 8009310:	4603      	mov	r3, r0
 8009312:	4608      	mov	r0, r1
 8009314:	b141      	cbz	r1, 8009328 <__ascii_wctomb+0x18>
 8009316:	2aff      	cmp	r2, #255	; 0xff
 8009318:	d904      	bls.n	8009324 <__ascii_wctomb+0x14>
 800931a:	228a      	movs	r2, #138	; 0x8a
 800931c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	4770      	bx	lr
 8009324:	2001      	movs	r0, #1
 8009326:	700a      	strb	r2, [r1, #0]
 8009328:	4770      	bx	lr
	...

0800932c <__swsetup_r>:
 800932c:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <__swsetup_r+0xcc>)
 800932e:	b570      	push	{r4, r5, r6, lr}
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	4606      	mov	r6, r0
 8009334:	460c      	mov	r4, r1
 8009336:	b125      	cbz	r5, 8009342 <__swsetup_r+0x16>
 8009338:	69ab      	ldr	r3, [r5, #24]
 800933a:	b913      	cbnz	r3, 8009342 <__swsetup_r+0x16>
 800933c:	4628      	mov	r0, r5
 800933e:	f000 f981 	bl	8009644 <__sinit>
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <__swsetup_r+0xd0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d10f      	bne.n	8009368 <__swsetup_r+0x3c>
 8009348:	686c      	ldr	r4, [r5, #4]
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009350:	0719      	lsls	r1, r3, #28
 8009352:	d42c      	bmi.n	80093ae <__swsetup_r+0x82>
 8009354:	06dd      	lsls	r5, r3, #27
 8009356:	d411      	bmi.n	800937c <__swsetup_r+0x50>
 8009358:	2309      	movs	r3, #9
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	e03e      	b.n	80093e6 <__swsetup_r+0xba>
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <__swsetup_r+0xd4>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d101      	bne.n	8009372 <__swsetup_r+0x46>
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	e7eb      	b.n	800934a <__swsetup_r+0x1e>
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <__swsetup_r+0xd8>)
 8009374:	429c      	cmp	r4, r3
 8009376:	bf08      	it	eq
 8009378:	68ec      	ldreq	r4, [r5, #12]
 800937a:	e7e6      	b.n	800934a <__swsetup_r+0x1e>
 800937c:	0758      	lsls	r0, r3, #29
 800937e:	d512      	bpl.n	80093a6 <__swsetup_r+0x7a>
 8009380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009382:	b141      	cbz	r1, 8009396 <__swsetup_r+0x6a>
 8009384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009388:	4299      	cmp	r1, r3
 800938a:	d002      	beq.n	8009392 <__swsetup_r+0x66>
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff fcdb 	bl	8008d48 <_free_r>
 8009392:	2300      	movs	r3, #0
 8009394:	6363      	str	r3, [r4, #52]	; 0x34
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	2300      	movs	r3, #0
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f043 0308 	orr.w	r3, r3, #8
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	b94b      	cbnz	r3, 80093c6 <__swsetup_r+0x9a>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093bc:	d003      	beq.n	80093c6 <__swsetup_r+0x9a>
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 fa05 	bl	80097d0 <__smakebuf_r>
 80093c6:	89a0      	ldrh	r0, [r4, #12]
 80093c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093cc:	f010 0301 	ands.w	r3, r0, #1
 80093d0:	d00a      	beq.n	80093e8 <__swsetup_r+0xbc>
 80093d2:	2300      	movs	r3, #0
 80093d4:	60a3      	str	r3, [r4, #8]
 80093d6:	6963      	ldr	r3, [r4, #20]
 80093d8:	425b      	negs	r3, r3
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	b943      	cbnz	r3, 80093f2 <__swsetup_r+0xc6>
 80093e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093e4:	d1ba      	bne.n	800935c <__swsetup_r+0x30>
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	0781      	lsls	r1, r0, #30
 80093ea:	bf58      	it	pl
 80093ec:	6963      	ldrpl	r3, [r4, #20]
 80093ee:	60a3      	str	r3, [r4, #8]
 80093f0:	e7f4      	b.n	80093dc <__swsetup_r+0xb0>
 80093f2:	2000      	movs	r0, #0
 80093f4:	e7f7      	b.n	80093e6 <__swsetup_r+0xba>
 80093f6:	bf00      	nop
 80093f8:	200000f0 	.word	0x200000f0
 80093fc:	08009e0c 	.word	0x08009e0c
 8009400:	08009e2c 	.word	0x08009e2c
 8009404:	08009dec 	.word	0x08009dec

08009408 <abort>:
 8009408:	2006      	movs	r0, #6
 800940a:	b508      	push	{r3, lr}
 800940c:	f000 fa48 	bl	80098a0 <raise>
 8009410:	2001      	movs	r0, #1
 8009412:	f7f8 ff94 	bl	800233e <_exit>
	...

08009418 <__sflush_r>:
 8009418:	898a      	ldrh	r2, [r1, #12]
 800941a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941c:	4605      	mov	r5, r0
 800941e:	0710      	lsls	r0, r2, #28
 8009420:	460c      	mov	r4, r1
 8009422:	d457      	bmi.n	80094d4 <__sflush_r+0xbc>
 8009424:	684b      	ldr	r3, [r1, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dc04      	bgt.n	8009434 <__sflush_r+0x1c>
 800942a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	dc01      	bgt.n	8009434 <__sflush_r+0x1c>
 8009430:	2000      	movs	r0, #0
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009436:	2e00      	cmp	r6, #0
 8009438:	d0fa      	beq.n	8009430 <__sflush_r+0x18>
 800943a:	2300      	movs	r3, #0
 800943c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009440:	682f      	ldr	r7, [r5, #0]
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	d032      	beq.n	80094ac <__sflush_r+0x94>
 8009446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	075a      	lsls	r2, r3, #29
 800944c:	d505      	bpl.n	800945a <__sflush_r+0x42>
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	1ac0      	subs	r0, r0, r3
 8009452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009454:	b10b      	cbz	r3, 800945a <__sflush_r+0x42>
 8009456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009458:	1ac0      	subs	r0, r0, r3
 800945a:	2300      	movs	r3, #0
 800945c:	4602      	mov	r2, r0
 800945e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009460:	4628      	mov	r0, r5
 8009462:	6a21      	ldr	r1, [r4, #32]
 8009464:	47b0      	blx	r6
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	d106      	bne.n	800947a <__sflush_r+0x62>
 800946c:	6829      	ldr	r1, [r5, #0]
 800946e:	291d      	cmp	r1, #29
 8009470:	d82c      	bhi.n	80094cc <__sflush_r+0xb4>
 8009472:	4a29      	ldr	r2, [pc, #164]	; (8009518 <__sflush_r+0x100>)
 8009474:	40ca      	lsrs	r2, r1
 8009476:	07d6      	lsls	r6, r2, #31
 8009478:	d528      	bpl.n	80094cc <__sflush_r+0xb4>
 800947a:	2200      	movs	r2, #0
 800947c:	6062      	str	r2, [r4, #4]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	04d9      	lsls	r1, r3, #19
 8009482:	6022      	str	r2, [r4, #0]
 8009484:	d504      	bpl.n	8009490 <__sflush_r+0x78>
 8009486:	1c42      	adds	r2, r0, #1
 8009488:	d101      	bne.n	800948e <__sflush_r+0x76>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	b903      	cbnz	r3, 8009490 <__sflush_r+0x78>
 800948e:	6560      	str	r0, [r4, #84]	; 0x54
 8009490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009492:	602f      	str	r7, [r5, #0]
 8009494:	2900      	cmp	r1, #0
 8009496:	d0cb      	beq.n	8009430 <__sflush_r+0x18>
 8009498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800949c:	4299      	cmp	r1, r3
 800949e:	d002      	beq.n	80094a6 <__sflush_r+0x8e>
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fc51 	bl	8008d48 <_free_r>
 80094a6:	2000      	movs	r0, #0
 80094a8:	6360      	str	r0, [r4, #52]	; 0x34
 80094aa:	e7c2      	b.n	8009432 <__sflush_r+0x1a>
 80094ac:	6a21      	ldr	r1, [r4, #32]
 80094ae:	2301      	movs	r3, #1
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b0      	blx	r6
 80094b4:	1c41      	adds	r1, r0, #1
 80094b6:	d1c7      	bne.n	8009448 <__sflush_r+0x30>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0c4      	beq.n	8009448 <__sflush_r+0x30>
 80094be:	2b1d      	cmp	r3, #29
 80094c0:	d001      	beq.n	80094c6 <__sflush_r+0xae>
 80094c2:	2b16      	cmp	r3, #22
 80094c4:	d101      	bne.n	80094ca <__sflush_r+0xb2>
 80094c6:	602f      	str	r7, [r5, #0]
 80094c8:	e7b2      	b.n	8009430 <__sflush_r+0x18>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	e7ae      	b.n	8009432 <__sflush_r+0x1a>
 80094d4:	690f      	ldr	r7, [r1, #16]
 80094d6:	2f00      	cmp	r7, #0
 80094d8:	d0aa      	beq.n	8009430 <__sflush_r+0x18>
 80094da:	0793      	lsls	r3, r2, #30
 80094dc:	bf18      	it	ne
 80094de:	2300      	movne	r3, #0
 80094e0:	680e      	ldr	r6, [r1, #0]
 80094e2:	bf08      	it	eq
 80094e4:	694b      	ldreq	r3, [r1, #20]
 80094e6:	1bf6      	subs	r6, r6, r7
 80094e8:	600f      	str	r7, [r1, #0]
 80094ea:	608b      	str	r3, [r1, #8]
 80094ec:	2e00      	cmp	r6, #0
 80094ee:	dd9f      	ble.n	8009430 <__sflush_r+0x18>
 80094f0:	4633      	mov	r3, r6
 80094f2:	463a      	mov	r2, r7
 80094f4:	4628      	mov	r0, r5
 80094f6:	6a21      	ldr	r1, [r4, #32]
 80094f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80094fc:	47e0      	blx	ip
 80094fe:	2800      	cmp	r0, #0
 8009500:	dc06      	bgt.n	8009510 <__sflush_r+0xf8>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	e790      	b.n	8009432 <__sflush_r+0x1a>
 8009510:	4407      	add	r7, r0
 8009512:	1a36      	subs	r6, r6, r0
 8009514:	e7ea      	b.n	80094ec <__sflush_r+0xd4>
 8009516:	bf00      	nop
 8009518:	20400001 	.word	0x20400001

0800951c <_fflush_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	690b      	ldr	r3, [r1, #16]
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	b913      	cbnz	r3, 800952c <_fflush_r+0x10>
 8009526:	2500      	movs	r5, #0
 8009528:	4628      	mov	r0, r5
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	b118      	cbz	r0, 8009536 <_fflush_r+0x1a>
 800952e:	6983      	ldr	r3, [r0, #24]
 8009530:	b90b      	cbnz	r3, 8009536 <_fflush_r+0x1a>
 8009532:	f000 f887 	bl	8009644 <__sinit>
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <_fflush_r+0x6c>)
 8009538:	429c      	cmp	r4, r3
 800953a:	d11b      	bne.n	8009574 <_fflush_r+0x58>
 800953c:	686c      	ldr	r4, [r5, #4]
 800953e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0ef      	beq.n	8009526 <_fflush_r+0xa>
 8009546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009548:	07d0      	lsls	r0, r2, #31
 800954a:	d404      	bmi.n	8009556 <_fflush_r+0x3a>
 800954c:	0599      	lsls	r1, r3, #22
 800954e:	d402      	bmi.n	8009556 <_fflush_r+0x3a>
 8009550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009552:	f000 f915 	bl	8009780 <__retarget_lock_acquire_recursive>
 8009556:	4628      	mov	r0, r5
 8009558:	4621      	mov	r1, r4
 800955a:	f7ff ff5d 	bl	8009418 <__sflush_r>
 800955e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009560:	4605      	mov	r5, r0
 8009562:	07da      	lsls	r2, r3, #31
 8009564:	d4e0      	bmi.n	8009528 <_fflush_r+0xc>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	059b      	lsls	r3, r3, #22
 800956a:	d4dd      	bmi.n	8009528 <_fflush_r+0xc>
 800956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956e:	f000 f908 	bl	8009782 <__retarget_lock_release_recursive>
 8009572:	e7d9      	b.n	8009528 <_fflush_r+0xc>
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <_fflush_r+0x70>)
 8009576:	429c      	cmp	r4, r3
 8009578:	d101      	bne.n	800957e <_fflush_r+0x62>
 800957a:	68ac      	ldr	r4, [r5, #8]
 800957c:	e7df      	b.n	800953e <_fflush_r+0x22>
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <_fflush_r+0x74>)
 8009580:	429c      	cmp	r4, r3
 8009582:	bf08      	it	eq
 8009584:	68ec      	ldreq	r4, [r5, #12]
 8009586:	e7da      	b.n	800953e <_fflush_r+0x22>
 8009588:	08009e0c 	.word	0x08009e0c
 800958c:	08009e2c 	.word	0x08009e2c
 8009590:	08009dec 	.word	0x08009dec

08009594 <std>:
 8009594:	2300      	movs	r3, #0
 8009596:	b510      	push	{r4, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	e9c0 3300 	strd	r3, r3, [r0]
 800959e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095a2:	6083      	str	r3, [r0, #8]
 80095a4:	8181      	strh	r1, [r0, #12]
 80095a6:	6643      	str	r3, [r0, #100]	; 0x64
 80095a8:	81c2      	strh	r2, [r0, #14]
 80095aa:	6183      	str	r3, [r0, #24]
 80095ac:	4619      	mov	r1, r3
 80095ae:	2208      	movs	r2, #8
 80095b0:	305c      	adds	r0, #92	; 0x5c
 80095b2:	f7fd fc8f 	bl	8006ed4 <memset>
 80095b6:	4b05      	ldr	r3, [pc, #20]	; (80095cc <std+0x38>)
 80095b8:	6224      	str	r4, [r4, #32]
 80095ba:	6263      	str	r3, [r4, #36]	; 0x24
 80095bc:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <std+0x3c>)
 80095be:	62a3      	str	r3, [r4, #40]	; 0x28
 80095c0:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <std+0x40>)
 80095c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095c4:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <std+0x44>)
 80095c6:	6323      	str	r3, [r4, #48]	; 0x30
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	bf00      	nop
 80095cc:	080098d9 	.word	0x080098d9
 80095d0:	080098fb 	.word	0x080098fb
 80095d4:	08009933 	.word	0x08009933
 80095d8:	08009957 	.word	0x08009957

080095dc <_cleanup_r>:
 80095dc:	4901      	ldr	r1, [pc, #4]	; (80095e4 <_cleanup_r+0x8>)
 80095de:	f000 b8af 	b.w	8009740 <_fwalk_reent>
 80095e2:	bf00      	nop
 80095e4:	0800951d 	.word	0x0800951d

080095e8 <__sfmoreglue>:
 80095e8:	2268      	movs	r2, #104	; 0x68
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	1e4d      	subs	r5, r1, #1
 80095ee:	4355      	muls	r5, r2
 80095f0:	460e      	mov	r6, r1
 80095f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095f6:	f7ff fc0f 	bl	8008e18 <_malloc_r>
 80095fa:	4604      	mov	r4, r0
 80095fc:	b140      	cbz	r0, 8009610 <__sfmoreglue+0x28>
 80095fe:	2100      	movs	r1, #0
 8009600:	e9c0 1600 	strd	r1, r6, [r0]
 8009604:	300c      	adds	r0, #12
 8009606:	60a0      	str	r0, [r4, #8]
 8009608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800960c:	f7fd fc62 	bl	8006ed4 <memset>
 8009610:	4620      	mov	r0, r4
 8009612:	bd70      	pop	{r4, r5, r6, pc}

08009614 <__sfp_lock_acquire>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__sfp_lock_acquire+0x8>)
 8009616:	f000 b8b3 	b.w	8009780 <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	200005ad 	.word	0x200005ad

08009620 <__sfp_lock_release>:
 8009620:	4801      	ldr	r0, [pc, #4]	; (8009628 <__sfp_lock_release+0x8>)
 8009622:	f000 b8ae 	b.w	8009782 <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	200005ad 	.word	0x200005ad

0800962c <__sinit_lock_acquire>:
 800962c:	4801      	ldr	r0, [pc, #4]	; (8009634 <__sinit_lock_acquire+0x8>)
 800962e:	f000 b8a7 	b.w	8009780 <__retarget_lock_acquire_recursive>
 8009632:	bf00      	nop
 8009634:	200005ae 	.word	0x200005ae

08009638 <__sinit_lock_release>:
 8009638:	4801      	ldr	r0, [pc, #4]	; (8009640 <__sinit_lock_release+0x8>)
 800963a:	f000 b8a2 	b.w	8009782 <__retarget_lock_release_recursive>
 800963e:	bf00      	nop
 8009640:	200005ae 	.word	0x200005ae

08009644 <__sinit>:
 8009644:	b510      	push	{r4, lr}
 8009646:	4604      	mov	r4, r0
 8009648:	f7ff fff0 	bl	800962c <__sinit_lock_acquire>
 800964c:	69a3      	ldr	r3, [r4, #24]
 800964e:	b11b      	cbz	r3, 8009658 <__sinit+0x14>
 8009650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009654:	f7ff bff0 	b.w	8009638 <__sinit_lock_release>
 8009658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800965c:	6523      	str	r3, [r4, #80]	; 0x50
 800965e:	4b13      	ldr	r3, [pc, #76]	; (80096ac <__sinit+0x68>)
 8009660:	4a13      	ldr	r2, [pc, #76]	; (80096b0 <__sinit+0x6c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	62a2      	str	r2, [r4, #40]	; 0x28
 8009666:	42a3      	cmp	r3, r4
 8009668:	bf08      	it	eq
 800966a:	2301      	moveq	r3, #1
 800966c:	4620      	mov	r0, r4
 800966e:	bf08      	it	eq
 8009670:	61a3      	streq	r3, [r4, #24]
 8009672:	f000 f81f 	bl	80096b4 <__sfp>
 8009676:	6060      	str	r0, [r4, #4]
 8009678:	4620      	mov	r0, r4
 800967a:	f000 f81b 	bl	80096b4 <__sfp>
 800967e:	60a0      	str	r0, [r4, #8]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 f817 	bl	80096b4 <__sfp>
 8009686:	2200      	movs	r2, #0
 8009688:	2104      	movs	r1, #4
 800968a:	60e0      	str	r0, [r4, #12]
 800968c:	6860      	ldr	r0, [r4, #4]
 800968e:	f7ff ff81 	bl	8009594 <std>
 8009692:	2201      	movs	r2, #1
 8009694:	2109      	movs	r1, #9
 8009696:	68a0      	ldr	r0, [r4, #8]
 8009698:	f7ff ff7c 	bl	8009594 <std>
 800969c:	2202      	movs	r2, #2
 800969e:	2112      	movs	r1, #18
 80096a0:	68e0      	ldr	r0, [r4, #12]
 80096a2:	f7ff ff77 	bl	8009594 <std>
 80096a6:	2301      	movs	r3, #1
 80096a8:	61a3      	str	r3, [r4, #24]
 80096aa:	e7d1      	b.n	8009650 <__sinit+0xc>
 80096ac:	08009a70 	.word	0x08009a70
 80096b0:	080095dd 	.word	0x080095dd

080096b4 <__sfp>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	4607      	mov	r7, r0
 80096b8:	f7ff ffac 	bl	8009614 <__sfp_lock_acquire>
 80096bc:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <__sfp+0x84>)
 80096be:	681e      	ldr	r6, [r3, #0]
 80096c0:	69b3      	ldr	r3, [r6, #24]
 80096c2:	b913      	cbnz	r3, 80096ca <__sfp+0x16>
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ffbd 	bl	8009644 <__sinit>
 80096ca:	3648      	adds	r6, #72	; 0x48
 80096cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	d503      	bpl.n	80096dc <__sfp+0x28>
 80096d4:	6833      	ldr	r3, [r6, #0]
 80096d6:	b30b      	cbz	r3, 800971c <__sfp+0x68>
 80096d8:	6836      	ldr	r6, [r6, #0]
 80096da:	e7f7      	b.n	80096cc <__sfp+0x18>
 80096dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096e0:	b9d5      	cbnz	r5, 8009718 <__sfp+0x64>
 80096e2:	4b16      	ldr	r3, [pc, #88]	; (800973c <__sfp+0x88>)
 80096e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096e8:	60e3      	str	r3, [r4, #12]
 80096ea:	6665      	str	r5, [r4, #100]	; 0x64
 80096ec:	f000 f847 	bl	800977e <__retarget_lock_init_recursive>
 80096f0:	f7ff ff96 	bl	8009620 <__sfp_lock_release>
 80096f4:	2208      	movs	r2, #8
 80096f6:	4629      	mov	r1, r5
 80096f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009700:	6025      	str	r5, [r4, #0]
 8009702:	61a5      	str	r5, [r4, #24]
 8009704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009708:	f7fd fbe4 	bl	8006ed4 <memset>
 800970c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009714:	4620      	mov	r0, r4
 8009716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009718:	3468      	adds	r4, #104	; 0x68
 800971a:	e7d9      	b.n	80096d0 <__sfp+0x1c>
 800971c:	2104      	movs	r1, #4
 800971e:	4638      	mov	r0, r7
 8009720:	f7ff ff62 	bl	80095e8 <__sfmoreglue>
 8009724:	4604      	mov	r4, r0
 8009726:	6030      	str	r0, [r6, #0]
 8009728:	2800      	cmp	r0, #0
 800972a:	d1d5      	bne.n	80096d8 <__sfp+0x24>
 800972c:	f7ff ff78 	bl	8009620 <__sfp_lock_release>
 8009730:	230c      	movs	r3, #12
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	e7ee      	b.n	8009714 <__sfp+0x60>
 8009736:	bf00      	nop
 8009738:	08009a70 	.word	0x08009a70
 800973c:	ffff0001 	.word	0xffff0001

08009740 <_fwalk_reent>:
 8009740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009744:	4606      	mov	r6, r0
 8009746:	4688      	mov	r8, r1
 8009748:	2700      	movs	r7, #0
 800974a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800974e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009752:	f1b9 0901 	subs.w	r9, r9, #1
 8009756:	d505      	bpl.n	8009764 <_fwalk_reent+0x24>
 8009758:	6824      	ldr	r4, [r4, #0]
 800975a:	2c00      	cmp	r4, #0
 800975c:	d1f7      	bne.n	800974e <_fwalk_reent+0xe>
 800975e:	4638      	mov	r0, r7
 8009760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009764:	89ab      	ldrh	r3, [r5, #12]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d907      	bls.n	800977a <_fwalk_reent+0x3a>
 800976a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800976e:	3301      	adds	r3, #1
 8009770:	d003      	beq.n	800977a <_fwalk_reent+0x3a>
 8009772:	4629      	mov	r1, r5
 8009774:	4630      	mov	r0, r6
 8009776:	47c0      	blx	r8
 8009778:	4307      	orrs	r7, r0
 800977a:	3568      	adds	r5, #104	; 0x68
 800977c:	e7e9      	b.n	8009752 <_fwalk_reent+0x12>

0800977e <__retarget_lock_init_recursive>:
 800977e:	4770      	bx	lr

08009780 <__retarget_lock_acquire_recursive>:
 8009780:	4770      	bx	lr

08009782 <__retarget_lock_release_recursive>:
 8009782:	4770      	bx	lr

08009784 <__swhatbuf_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	460e      	mov	r6, r1
 8009788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978c:	4614      	mov	r4, r2
 800978e:	2900      	cmp	r1, #0
 8009790:	461d      	mov	r5, r3
 8009792:	b096      	sub	sp, #88	; 0x58
 8009794:	da08      	bge.n	80097a8 <__swhatbuf_r+0x24>
 8009796:	2200      	movs	r2, #0
 8009798:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	061a      	lsls	r2, r3, #24
 80097a0:	d410      	bmi.n	80097c4 <__swhatbuf_r+0x40>
 80097a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a6:	e00e      	b.n	80097c6 <__swhatbuf_r+0x42>
 80097a8:	466a      	mov	r2, sp
 80097aa:	f000 f8fb 	bl	80099a4 <_fstat_r>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dbf1      	blt.n	8009796 <__swhatbuf_r+0x12>
 80097b2:	9a01      	ldr	r2, [sp, #4]
 80097b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097bc:	425a      	negs	r2, r3
 80097be:	415a      	adcs	r2, r3
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	e7ee      	b.n	80097a2 <__swhatbuf_r+0x1e>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	2000      	movs	r0, #0
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	b016      	add	sp, #88	; 0x58
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080097d0 <__smakebuf_r>:
 80097d0:	898b      	ldrh	r3, [r1, #12]
 80097d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d4:	079d      	lsls	r5, r3, #30
 80097d6:	4606      	mov	r6, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	d507      	bpl.n	80097ec <__smakebuf_r+0x1c>
 80097dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	2301      	movs	r3, #1
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	b002      	add	sp, #8
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	466a      	mov	r2, sp
 80097ee:	ab01      	add	r3, sp, #4
 80097f0:	f7ff ffc8 	bl	8009784 <__swhatbuf_r>
 80097f4:	9900      	ldr	r1, [sp, #0]
 80097f6:	4605      	mov	r5, r0
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff fb0d 	bl	8008e18 <_malloc_r>
 80097fe:	b948      	cbnz	r0, 8009814 <__smakebuf_r+0x44>
 8009800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009804:	059a      	lsls	r2, r3, #22
 8009806:	d4ef      	bmi.n	80097e8 <__smakebuf_r+0x18>
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	f043 0302 	orr.w	r3, r3, #2
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	e7e3      	b.n	80097dc <__smakebuf_r+0xc>
 8009814:	4b0d      	ldr	r3, [pc, #52]	; (800984c <__smakebuf_r+0x7c>)
 8009816:	62b3      	str	r3, [r6, #40]	; 0x28
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	6020      	str	r0, [r4, #0]
 800981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	9b00      	ldr	r3, [sp, #0]
 8009824:	6120      	str	r0, [r4, #16]
 8009826:	6163      	str	r3, [r4, #20]
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	b15b      	cbz	r3, 8009844 <__smakebuf_r+0x74>
 800982c:	4630      	mov	r0, r6
 800982e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009832:	f000 f8c9 	bl	80099c8 <_isatty_r>
 8009836:	b128      	cbz	r0, 8009844 <__smakebuf_r+0x74>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	89a0      	ldrh	r0, [r4, #12]
 8009846:	4305      	orrs	r5, r0
 8009848:	81a5      	strh	r5, [r4, #12]
 800984a:	e7cd      	b.n	80097e8 <__smakebuf_r+0x18>
 800984c:	080095dd 	.word	0x080095dd

08009850 <_raise_r>:
 8009850:	291f      	cmp	r1, #31
 8009852:	b538      	push	{r3, r4, r5, lr}
 8009854:	4604      	mov	r4, r0
 8009856:	460d      	mov	r5, r1
 8009858:	d904      	bls.n	8009864 <_raise_r+0x14>
 800985a:	2316      	movs	r3, #22
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009866:	b112      	cbz	r2, 800986e <_raise_r+0x1e>
 8009868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800986c:	b94b      	cbnz	r3, 8009882 <_raise_r+0x32>
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f830 	bl	80098d4 <_getpid_r>
 8009874:	462a      	mov	r2, r5
 8009876:	4601      	mov	r1, r0
 8009878:	4620      	mov	r0, r4
 800987a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800987e:	f000 b817 	b.w	80098b0 <_kill_r>
 8009882:	2b01      	cmp	r3, #1
 8009884:	d00a      	beq.n	800989c <_raise_r+0x4c>
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	d103      	bne.n	8009892 <_raise_r+0x42>
 800988a:	2316      	movs	r3, #22
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	2001      	movs	r0, #1
 8009890:	e7e7      	b.n	8009862 <_raise_r+0x12>
 8009892:	2400      	movs	r4, #0
 8009894:	4628      	mov	r0, r5
 8009896:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800989a:	4798      	blx	r3
 800989c:	2000      	movs	r0, #0
 800989e:	e7e0      	b.n	8009862 <_raise_r+0x12>

080098a0 <raise>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	; (80098ac <raise+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f7ff bfd3 	b.w	8009850 <_raise_r>
 80098aa:	bf00      	nop
 80098ac:	200000f0 	.word	0x200000f0

080098b0 <_kill_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	2300      	movs	r3, #0
 80098b4:	4d06      	ldr	r5, [pc, #24]	; (80098d0 <_kill_r+0x20>)
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	4611      	mov	r1, r2
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	f7f8 fd2e 	bl	800231e <_kill>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d102      	bne.n	80098cc <_kill_r+0x1c>
 80098c6:	682b      	ldr	r3, [r5, #0]
 80098c8:	b103      	cbz	r3, 80098cc <_kill_r+0x1c>
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	bd38      	pop	{r3, r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	200005a8 	.word	0x200005a8

080098d4 <_getpid_r>:
 80098d4:	f7f8 bd1c 	b.w	8002310 <_getpid>

080098d8 <__sread>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 f894 	bl	8009a0c <_read_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	bfab      	itete	ge
 80098e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ea:	89a3      	ldrhlt	r3, [r4, #12]
 80098ec:	181b      	addge	r3, r3, r0
 80098ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098f2:	bfac      	ite	ge
 80098f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098f6:	81a3      	strhlt	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__swrite>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	461f      	mov	r7, r3
 8009900:	898b      	ldrh	r3, [r1, #12]
 8009902:	4605      	mov	r5, r0
 8009904:	05db      	lsls	r3, r3, #23
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	d505      	bpl.n	8009918 <__swrite+0x1e>
 800990c:	2302      	movs	r3, #2
 800990e:	2200      	movs	r2, #0
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	f000 f868 	bl	80099e8 <_lseek_r>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	4632      	mov	r2, r6
 800991c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	4628      	mov	r0, r5
 8009924:	463b      	mov	r3, r7
 8009926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	f000 b817 	b.w	8009960 <_write_r>

08009932 <__sseek>:
 8009932:	b510      	push	{r4, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 f855 	bl	80099e8 <_lseek_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	bf15      	itete	ne
 8009944:	6560      	strne	r0, [r4, #84]	; 0x54
 8009946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800994a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800994e:	81a3      	strheq	r3, [r4, #12]
 8009950:	bf18      	it	ne
 8009952:	81a3      	strhne	r3, [r4, #12]
 8009954:	bd10      	pop	{r4, pc}

08009956 <__sclose>:
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 b813 	b.w	8009984 <_close_r>
	...

08009960 <_write_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	2200      	movs	r2, #0
 800996a:	4d05      	ldr	r5, [pc, #20]	; (8009980 <_write_r+0x20>)
 800996c:	602a      	str	r2, [r5, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	f7f7 fd70 	bl	8001454 <_write>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_write_r+0x1e>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_write_r+0x1e>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	200005a8 	.word	0x200005a8

08009984 <_close_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	2300      	movs	r3, #0
 8009988:	4d05      	ldr	r5, [pc, #20]	; (80099a0 <_close_r+0x1c>)
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f8 fcfc 	bl	800238c <_close>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_close_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_close_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	200005a8 	.word	0x200005a8

080099a4 <_fstat_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	2300      	movs	r3, #0
 80099a8:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_fstat_r+0x20>)
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	f7f8 fcf6 	bl	80023a2 <_fstat>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d102      	bne.n	80099c0 <_fstat_r+0x1c>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b103      	cbz	r3, 80099c0 <_fstat_r+0x1c>
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	bd38      	pop	{r3, r4, r5, pc}
 80099c2:	bf00      	nop
 80099c4:	200005a8 	.word	0x200005a8

080099c8 <_isatty_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	2300      	movs	r3, #0
 80099cc:	4d05      	ldr	r5, [pc, #20]	; (80099e4 <_isatty_r+0x1c>)
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f7f8 fcf4 	bl	80023c0 <_isatty>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_isatty_r+0x1a>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_isatty_r+0x1a>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	200005a8 	.word	0x200005a8

080099e8 <_lseek_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	2200      	movs	r2, #0
 80099f2:	4d05      	ldr	r5, [pc, #20]	; (8009a08 <_lseek_r+0x20>)
 80099f4:	602a      	str	r2, [r5, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f7f8 fcec 	bl	80023d4 <_lseek>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_lseek_r+0x1e>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_lseek_r+0x1e>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	200005a8 	.word	0x200005a8

08009a0c <_read_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	2200      	movs	r2, #0
 8009a16:	4d05      	ldr	r5, [pc, #20]	; (8009a2c <_read_r+0x20>)
 8009a18:	602a      	str	r2, [r5, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f7f8 fc99 	bl	8002352 <_read>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_read_r+0x1e>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_read_r+0x1e>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	200005a8 	.word	0x200005a8

08009a30 <_init>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr

08009a3c <_fini>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr
