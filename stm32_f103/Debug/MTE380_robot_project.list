
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008688  08008688  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000078  08008708  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08008708  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014928  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292f  00000000  00000000  000349c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  000372f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b67  00000000  00000000  000396b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153f2  00000000  00000000  0005321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094963  00000000  00000000  00068611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcf74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  000fcfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08008560 	.word	0x08008560

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08008560 	.word	0x08008560

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	; 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d32:	2afd      	cmp	r2, #253	; 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	; 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	; 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	; 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpun>:
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x14>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d108      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x20>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d102      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	f04f 0001 	mov.w	r0, #1
 8001096:	4770      	bx	lr

08001098 <__aeabi_f2uiz>:
 8001098:	0042      	lsls	r2, r0, #1
 800109a:	d20e      	bcs.n	80010ba <__aeabi_f2uiz+0x22>
 800109c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a0:	d30b      	bcc.n	80010ba <__aeabi_f2uiz+0x22>
 80010a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010aa:	d409      	bmi.n	80010c0 <__aeabi_f2uiz+0x28>
 80010ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	4770      	bx	lr
 80010ba:	f04f 0000 	mov.w	r0, #0
 80010be:	4770      	bx	lr
 80010c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c4:	d101      	bne.n	80010ca <__aeabi_f2uiz+0x32>
 80010c6:	0242      	lsls	r2, r0, #9
 80010c8:	d102      	bne.n	80010d0 <__aeabi_f2uiz+0x38>
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ce:	4770      	bx	lr
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(uint32_t gx, uint32_t gy, uint32_t gz, uint32_t ax, uint32_t ay, uint32_t az, uint32_t mx, uint32_t my, uint32_t mz) {
 80010d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010dc:	b0ab      	sub	sp, #172	; 0xac
 80010de:	af02      	add	r7, sp, #8
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	603b      	str	r3, [r7, #0]
	uint32_t qDot1, qDot2, qDot3, qDot4;
	uint32_t hx, hy;
	uint32_t _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80010e8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80010ec:	f7ff fda0 	bl	8000c30 <__aeabi_ui2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f04f 0100 	mov.w	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff86 	bl	8001008 <__aeabi_fcmpeq>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d027      	beq.n	8001152 <MadgwickAHRSupdate+0x7a>
 8001102:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001106:	f7ff fd93 	bl	8000c30 <__aeabi_ui2f>
 800110a:	4603      	mov	r3, r0
 800110c:	f04f 0100 	mov.w	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff79 	bl	8001008 <__aeabi_fcmpeq>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01a      	beq.n	8001152 <MadgwickAHRSupdate+0x7a>
 800111c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001120:	f7ff fd86 	bl	8000c30 <__aeabi_ui2f>
 8001124:	4603      	mov	r3, r0
 8001126:	f04f 0100 	mov.w	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff6c 	bl	8001008 <__aeabi_fcmpeq>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <MadgwickAHRSupdate+0x7a>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f001 f971 	bl	8002430 <MadgwickAHRSupdateIMU>
		return;
 800114e:	f001 b962 	b.w	8002416 <MadgwickAHRSupdate+0x133e>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fd6c 	bl	8000c30 <__aeabi_ui2f>
 8001158:	4603      	mov	r3, r0
 800115a:	49c0      	ldr	r1, [pc, #768]	; (800145c <MadgwickAHRSupdate+0x384>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fdbf 	bl	8000ce0 <__aeabi_fmul>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff97 	bl	8001098 <__aeabi_f2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff fd5e 	bl	8000c30 <__aeabi_ui2f>
 8001174:	4603      	mov	r3, r0
 8001176:	49b9      	ldr	r1, [pc, #740]	; (800145c <MadgwickAHRSupdate+0x384>)
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fdb1 	bl	8000ce0 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff89 	bl	8001098 <__aeabi_f2uiz>
 8001186:	4603      	mov	r3, r0
 8001188:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fd50 	bl	8000c30 <__aeabi_ui2f>
 8001190:	4603      	mov	r3, r0
 8001192:	49b2      	ldr	r1, [pc, #712]	; (800145c <MadgwickAHRSupdate+0x384>)
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fda3 	bl	8000ce0 <__aeabi_fmul>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7b 	bl	8001098 <__aeabi_f2uiz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011a6:	4bae      	ldr	r3, [pc, #696]	; (8001460 <MadgwickAHRSupdate+0x388>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	425b      	negs	r3, r3
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	fb02 f203 	mul.w	r2, r2, r3
 80011b2:	4bac      	ldr	r3, [pc, #688]	; (8001464 <MadgwickAHRSupdate+0x38c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	1ad2      	subs	r2, r2, r3
 80011be:	4baa      	ldr	r3, [pc, #680]	; (8001468 <MadgwickAHRSupdate+0x390>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	fb01 f303 	mul.w	r3, r1, r3
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fd30 	bl	8000c30 <__aeabi_ui2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fd82 	bl	8000ce0 <__aeabi_fmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff5a 	bl	8001098 <__aeabi_f2uiz>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80011ea:	4ba0      	ldr	r3, [pc, #640]	; (800146c <MadgwickAHRSupdate+0x394>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	fb02 f203 	mul.w	r2, r2, r3
 80011f4:	4b9b      	ldr	r3, [pc, #620]	; (8001464 <MadgwickAHRSupdate+0x38c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	fb01 f303 	mul.w	r3, r1, r3
 80011fe:	441a      	add	r2, r3
 8001200:	4b99      	ldr	r3, [pc, #612]	; (8001468 <MadgwickAHRSupdate+0x390>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd0f 	bl	8000c30 <__aeabi_ui2f>
 8001212:	4603      	mov	r3, r0
 8001214:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd61 	bl	8000ce0 <__aeabi_fmul>
 800121e:	4603      	mov	r3, r0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff39 	bl	8001098 <__aeabi_f2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <MadgwickAHRSupdate+0x394>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	fb02 f203 	mul.w	r2, r2, r3
 8001236:	4b8a      	ldr	r3, [pc, #552]	; (8001460 <MadgwickAHRSupdate+0x388>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	fb01 f303 	mul.w	r3, r1, r3
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <MadgwickAHRSupdate+0x390>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fcee 	bl	8000c30 <__aeabi_ui2f>
 8001254:	4603      	mov	r3, r0
 8001256:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fd40 	bl	8000ce0 <__aeabi_fmul>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff18 	bl	8001098 <__aeabi_f2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800126e:	4b7f      	ldr	r3, [pc, #508]	; (800146c <MadgwickAHRSupdate+0x394>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fb02 f203 	mul.w	r2, r2, r3
 8001278:	4b79      	ldr	r3, [pc, #484]	; (8001460 <MadgwickAHRSupdate+0x388>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	441a      	add	r2, r3
 8001284:	4b77      	ldr	r3, [pc, #476]	; (8001464 <MadgwickAHRSupdate+0x38c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fccd 	bl	8000c30 <__aeabi_ui2f>
 8001296:	4603      	mov	r3, r0
 8001298:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd1f 	bl	8000ce0 <__aeabi_fmul>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fef7 	bl	8001098 <__aeabi_f2uiz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f7ff fcbd 	bl	8000c30 <__aeabi_ui2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fea3 	bl	8001008 <__aeabi_fcmpeq>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01a      	beq.n	80012fe <MadgwickAHRSupdate+0x226>
 80012c8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80012cc:	f7ff fcb0 	bl	8000c30 <__aeabi_ui2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f04f 0100 	mov.w	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe96 	bl	8001008 <__aeabi_fcmpeq>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00d      	beq.n	80012fe <MadgwickAHRSupdate+0x226>
 80012e2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80012e6:	f7ff fca3 	bl	8000c30 <__aeabi_ui2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe89 	bl	8001008 <__aeabi_fcmpeq>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f040 87d0 	bne.w	800229e <MadgwickAHRSupdate+0x11c6>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	fb03 f203 	mul.w	r2, r3, r3
 8001304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001308:	fb03 f303 	mul.w	r3, r3, r3
 800130c:	441a      	add	r2, r3
 800130e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001312:	fb03 f303 	mul.w	r3, r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fc61 	bl	8002be0 <invSqrt>
 800131e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800132e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001332:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		az *= recipNorm;
 800133e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001342:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800134e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001352:	fb03 f203 	mul.w	r2, r3, r3
 8001356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800135a:	fb03 f303 	mul.w	r3, r3, r3
 800135e:	441a      	add	r2, r3
 8001360:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001364:	fb03 f303 	mul.w	r3, r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fc38 	bl	8002be0 <invSqrt>
 8001370:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 8001374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001378:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		my *= recipNorm;
 8001384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001388:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		mz *= recipNorm;
 8001394:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001398:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <MadgwickAHRSupdate+0x394>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fc41 	bl	8000c30 <__aeabi_ui2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb8c 	bl	8000ad0 <__addsf3>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461c      	mov	r4, r3
 80013bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80013c0:	f7ff fc36 	bl	8000c30 <__aeabi_ui2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fc89 	bl	8000ce0 <__aeabi_fmul>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fe61 	bl	8001098 <__aeabi_f2uiz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <MadgwickAHRSupdate+0x394>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fc25 	bl	8000c30 <__aeabi_ui2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb70 	bl	8000ad0 <__addsf3>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461c      	mov	r4, r3
 80013f4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80013f8:	f7ff fc1a 	bl	8000c30 <__aeabi_ui2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fc6d 	bl	8000ce0 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe45 	bl	8001098 <__aeabi_f2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MadgwickAHRSupdate+0x394>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc09 	bl	8000c30 <__aeabi_ui2f>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb54 	bl	8000ad0 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	461c      	mov	r4, r3
 800142c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001430:	f7ff fbfe 	bl	8000c30 <__aeabi_ui2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4619      	mov	r1, r3
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fc51 	bl	8000ce0 <__aeabi_fmul>
 800143e:	4603      	mov	r3, r0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe29 	bl	8001098 <__aeabi_f2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <MadgwickAHRSupdate+0x388>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fbed 	bl	8000c30 <__aeabi_ui2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	e009      	b.n	8001470 <MadgwickAHRSupdate+0x398>
 800145c:	3c8efa39 	.word	0x3c8efa39
 8001460:	20000098 	.word	0x20000098
 8001464:	2000009c 	.word	0x2000009c
 8001468:	200000a0 	.word	0x200000a0
 800146c:	20000000 	.word	0x20000000
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fb2d 	bl	8000ad0 <__addsf3>
 8001476:	4603      	mov	r3, r0
 8001478:	461c      	mov	r4, r3
 800147a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800147e:	f7ff fbd7 	bl	8000c30 <__aeabi_ui2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff fc2a 	bl	8000ce0 <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe02 	bl	8001098 <__aeabi_f2uiz>
 8001494:	4603      	mov	r3, r0
 8001496:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 8001498:	4bb0      	ldr	r3, [pc, #704]	; (800175c <MadgwickAHRSupdate+0x684>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fbc7 	bl	8000c30 <__aeabi_ui2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb12 	bl	8000ad0 <__addsf3>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fdf2 	bl	8001098 <__aeabi_f2uiz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 80014b8:	4ba9      	ldr	r3, [pc, #676]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fbb7 	bl	8000c30 <__aeabi_ui2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb02 	bl	8000ad0 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fde2 	bl	8001098 <__aeabi_f2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 80014d8:	4ba2      	ldr	r3, [pc, #648]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fba7 	bl	8000c30 <__aeabi_ui2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff faf2 	bl	8000ad0 <__addsf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fdd2 	bl	8001098 <__aeabi_f2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 80014f8:	4b9b      	ldr	r3, [pc, #620]	; (8001768 <MadgwickAHRSupdate+0x690>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fb97 	bl	8000c30 <__aeabi_ui2f>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fae2 	bl	8000ad0 <__addsf3>
 800150c:	4603      	mov	r3, r0
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdc2 	bl	8001098 <__aeabi_f2uiz>
 8001514:	4603      	mov	r3, r0
 8001516:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 8001518:	4b90      	ldr	r3, [pc, #576]	; (800175c <MadgwickAHRSupdate+0x684>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fb87 	bl	8000c30 <__aeabi_ui2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4619      	mov	r1, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fad2 	bl	8000ad0 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461c      	mov	r4, r3
 8001530:	4b8c      	ldr	r3, [pc, #560]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb7b 	bl	8000c30 <__aeabi_ui2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4619      	mov	r1, r3
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fbce 	bl	8000ce0 <__aeabi_fmul>
 8001544:	4603      	mov	r3, r0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fda6 	bl	8001098 <__aeabi_f2uiz>
 800154c:	4603      	mov	r3, r0
 800154e:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 8001550:	4b84      	ldr	r3, [pc, #528]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fb6b 	bl	8000c30 <__aeabi_ui2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4619      	mov	r1, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fab6 	bl	8000ad0 <__addsf3>
 8001564:	4603      	mov	r3, r0
 8001566:	461c      	mov	r4, r3
 8001568:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <MadgwickAHRSupdate+0x690>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fb5f 	bl	8000c30 <__aeabi_ui2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4619      	mov	r1, r3
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff fbb2 	bl	8000ce0 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd8a 	bl	8001098 <__aeabi_f2uiz>
 8001584:	4603      	mov	r3, r0
 8001586:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 8001588:	4b74      	ldr	r3, [pc, #464]	; (800175c <MadgwickAHRSupdate+0x684>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a73      	ldr	r2, [pc, #460]	; (800175c <MadgwickAHRSupdate+0x684>)
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 8001596:	4b71      	ldr	r3, [pc, #452]	; (800175c <MadgwickAHRSupdate+0x684>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a71      	ldr	r2, [pc, #452]	; (8001760 <MadgwickAHRSupdate+0x688>)
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 80015a4:	4b6d      	ldr	r3, [pc, #436]	; (800175c <MadgwickAHRSupdate+0x684>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 80015b2:	4b6a      	ldr	r3, [pc, #424]	; (800175c <MadgwickAHRSupdate+0x684>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6c      	ldr	r2, [pc, #432]	; (8001768 <MadgwickAHRSupdate+0x690>)
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a66      	ldr	r2, [pc, #408]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a64      	ldr	r2, [pc, #400]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a61      	ldr	r2, [pc, #388]	; (8001768 <MadgwickAHRSupdate+0x690>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 80015f8:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a5a      	ldr	r2, [pc, #360]	; (8001768 <MadgwickAHRSupdate+0x690>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 8001606:	4b58      	ldr	r3, [pc, #352]	; (8001768 <MadgwickAHRSupdate+0x690>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <MadgwickAHRSupdate+0x690>)
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800161a:	fb02 f203 	mul.w	r2, r2, r3
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <MadgwickAHRSupdate+0x690>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	1ad2      	subs	r2, r2, r3
 800162c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001630:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001632:	fb01 f103 	mul.w	r1, r1, r3
 8001636:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800163e:	fb00 f303 	mul.w	r3, r0, r3
 8001642:	440b      	add	r3, r1
 8001644:	441a      	add	r2, r3
 8001646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001648:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4945      	ldr	r1, [pc, #276]	; (8001768 <MadgwickAHRSupdate+0x690>)
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	fb01 f103 	mul.w	r1, r1, r3
 8001658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800165a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	4840      	ldr	r0, [pc, #256]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 8001664:	6800      	ldr	r0, [r0, #0]
 8001666:	fb00 f303 	mul.w	r3, r0, r3
 800166a:	440b      	add	r3, r1
 800166c:	441a      	add	r2, r3
 800166e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	1ad2      	subs	r2, r2, r3
 800167a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800167e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <MadgwickAHRSupdate+0x690>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001690:	fb02 f203 	mul.w	r2, r2, r3
 8001694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001698:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	441a      	add	r2, r3
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016a6:	fb01 f103 	mul.w	r1, r1, r3
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MadgwickAHRSupdate+0x688>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80016b2:	fb00 f303 	mul.w	r3, r0, r3
 80016b6:	1acb      	subs	r3, r1, r3
 80016b8:	441a      	add	r2, r3
 80016ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4928      	ldr	r1, [pc, #160]	; (8001768 <MadgwickAHRSupdate+0x690>)
 80016c6:	6809      	ldr	r1, [r1, #0]
 80016c8:	fb01 f103 	mul.w	r1, r1, r3
 80016cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80016ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d0:	1ac3      	subs	r3, r0, r3
 80016d2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80016d6:	fb00 f303 	mul.w	r3, r0, r3
 80016da:	440b      	add	r3, r1
 80016dc:	441a      	add	r2, r3
 80016de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrt(hx * hx + hy * hy);
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	fb03 f203 	mul.w	r2, r3, r3
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	fb03 f303 	mul.w	r3, r3, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fe70 	bl	80003e0 <__aeabi_ui2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f006 fafa 	bl	8007d00 <sqrt>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9b6 	bl	8000a84 <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800171c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001720:	425b      	negs	r3, r3
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <MadgwickAHRSupdate+0x68c>)
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <MadgwickAHRSupdate+0x688>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	441a      	add	r2, r3
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MadgwickAHRSupdate+0x690>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800173e:	fb01 f103 	mul.w	r1, r1, r3
 8001742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001746:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001748:	fb00 f303 	mul.w	r3, r0, r3
 800174c:	440b      	add	r3, r1
 800174e:	441a      	add	r2, r3
 8001750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001752:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	e007      	b.n	800176c <MadgwickAHRSupdate+0x694>
 800175c:	20000000 	.word	0x20000000
 8001760:	20000098 	.word	0x20000098
 8001764:	2000009c 	.word	0x2000009c
 8001768:	200000a0 	.word	0x200000a0
 800176c:	49a9      	ldr	r1, [pc, #676]	; (8001a14 <MadgwickAHRSupdate+0x93c>)
 800176e:	6809      	ldr	r1, [r1, #0]
 8001770:	fb01 f103 	mul.w	r1, r1, r3
 8001774:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001778:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800177a:	fb00 f303 	mul.w	r3, r0, r3
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	441a      	add	r2, r3
 8001782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001786:	1acb      	subs	r3, r1, r3
 8001788:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8001794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001796:	f7ff fa4b 	bl	8000c30 <__aeabi_ui2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f996 	bl	8000ad0 <__addsf3>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fc76 	bl	8001098 <__aeabi_f2uiz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 80017b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b2:	f7ff fa3d 	bl	8000c30 <__aeabi_ui2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4619      	mov	r1, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f988 	bl	8000ad0 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc68 	bl	8001098 <__aeabi_f2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ce:	425b      	negs	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa2d 	bl	8000c30 <__aeabi_ui2f>
 80017d6:	4604      	mov	r4, r0
 80017d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017da:	f7ff fa29 	bl	8000c30 <__aeabi_ui2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f974 	bl	8000ad0 <__addsf3>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461d      	mov	r5, r3
 80017ec:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80017ee:	f7ff fa1f 	bl	8000c30 <__aeabi_ui2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4628      	mov	r0, r5
 80017f8:	f7ff f968 	bl	8000acc <__aeabi_fsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461d      	mov	r5, r3
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff fa15 	bl	8000c30 <__aeabi_ui2f>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4628      	mov	r0, r5
 800180c:	f7ff f95e 	bl	8000acc <__aeabi_fsub>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fa63 	bl	8000ce0 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	461d      	mov	r5, r3
 800181e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001820:	f7ff fa06 	bl	8000c30 <__aeabi_ui2f>
 8001824:	4604      	mov	r4, r0
 8001826:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001828:	f7ff fa02 	bl	8000c30 <__aeabi_ui2f>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f94d 	bl	8000ad0 <__addsf3>
 8001836:	4603      	mov	r3, r0
 8001838:	461e      	mov	r6, r3
 800183a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800183c:	f7ff f9f8 	bl	8000c30 <__aeabi_ui2f>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	4630      	mov	r0, r6
 8001846:	f7ff f943 	bl	8000ad0 <__addsf3>
 800184a:	4603      	mov	r3, r0
 800184c:	461e      	mov	r6, r3
 800184e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001852:	f7ff f9ed 	bl	8000c30 <__aeabi_ui2f>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4630      	mov	r0, r6
 800185c:	f7ff f936 	bl	8000acc <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fa3b 	bl	8000ce0 <__aeabi_fmul>
 800186a:	4603      	mov	r3, r0
 800186c:	4619      	mov	r1, r3
 800186e:	4628      	mov	r0, r5
 8001870:	f7ff f92e 	bl	8000ad0 <__addsf3>
 8001874:	4603      	mov	r3, r0
 8001876:	461e      	mov	r6, r3
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <MadgwickAHRSupdate+0x940>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f9d4 	bl	8000c30 <__aeabi_ui2f>
 8001888:	4604      	mov	r4, r0
 800188a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800188c:	f7ff f9d0 	bl	8000c30 <__aeabi_ui2f>
 8001890:	4605      	mov	r5, r0
 8001892:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001894:	f7ff f9cc 	bl	8000c30 <__aeabi_ui2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80018a0:	f7ff f914 	bl	8000acc <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4698      	mov	r8, r3
 80018a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018aa:	f7ff f9c1 	bl	8000c30 <__aeabi_ui2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4640      	mov	r0, r8
 80018b4:	f7ff f90a 	bl	8000acc <__aeabi_fsub>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4628      	mov	r0, r5
 80018be:	f7ff fa0f 	bl	8000ce0 <__aeabi_fmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461d      	mov	r5, r3
 80018c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f9ac 	bl	8000c30 <__aeabi_ui2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	4619      	mov	r1, r3
 80018dc:	4628      	mov	r0, r5
 80018de:	f7ff f8f7 	bl	8000ad0 <__addsf3>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461d      	mov	r5, r3
 80018e6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80018ea:	f7ff f9a1 	bl	8000c30 <__aeabi_ui2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4628      	mov	r0, r5
 80018f4:	f7ff f8ea 	bl	8000acc <__aeabi_fsub>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff f9ef 	bl	8000ce0 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	4619      	mov	r1, r3
 8001906:	4630      	mov	r0, r6
 8001908:	f7ff f8e0 	bl	8000acc <__aeabi_fsub>
 800190c:	4603      	mov	r3, r0
 800190e:	461c      	mov	r4, r3
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	425b      	negs	r3, r3
 8001914:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <MadgwickAHRSupdate+0x93c>)
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fb02 f203 	mul.w	r2, r2, r3
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <MadgwickAHRSupdate+0x944>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800192a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800192c:	1a8a      	subs	r2, r1, r2
 800192e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001930:	fb01 f102 	mul.w	r1, r1, r2
 8001934:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001938:	4402      	add	r2, r0
 800193a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800193c:	fb00 f202 	mul.w	r2, r0, r2
 8001940:	4411      	add	r1, r2
 8001942:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001946:	1a8a      	subs	r2, r1, r2
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f96f 	bl	8000c30 <__aeabi_ui2f>
 8001952:	4603      	mov	r3, r0
 8001954:	4619      	mov	r1, r3
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff f8ba 	bl	8000ad0 <__addsf3>
 800195c:	4603      	mov	r3, r0
 800195e:	4698      	mov	r8, r3
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <MadgwickAHRSupdate+0x940>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f960 	bl	8000c30 <__aeabi_ui2f>
 8001970:	4604      	mov	r4, r0
 8001972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001976:	4413      	add	r3, r2
 8001978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f956 	bl	8000c30 <__aeabi_ui2f>
 8001984:	4605      	mov	r5, r0
 8001986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001988:	f7ff f952 	bl	8000c30 <__aeabi_ui2f>
 800198c:	4606      	mov	r6, r0
 800198e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001990:	f7ff f94e 	bl	8000c30 <__aeabi_ui2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800199c:	f7ff f896 	bl	8000acc <__aeabi_fsub>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4699      	mov	r9, r3
 80019a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019a6:	f7ff f943 	bl	8000c30 <__aeabi_ui2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4648      	mov	r0, r9
 80019b0:	f7ff f88c 	bl	8000acc <__aeabi_fsub>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4630      	mov	r0, r6
 80019ba:	f7ff f991 	bl	8000ce0 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4628      	mov	r0, r5
 80019c4:	f7ff f884 	bl	8000ad0 <__addsf3>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461d      	mov	r5, r3
 80019cc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80019d0:	f7ff f92e 	bl	8000c30 <__aeabi_ui2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff f877 	bl	8000acc <__aeabi_fsub>
 80019de:	4603      	mov	r3, r0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff f97c 	bl	8000ce0 <__aeabi_fmul>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4640      	mov	r0, r8
 80019ee:	f7ff f86f 	bl	8000ad0 <__addsf3>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb4f 	bl	8001098 <__aeabi_f2uiz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001a00:	f7ff f916 	bl	8000c30 <__aeabi_ui2f>
 8001a04:	4604      	mov	r4, r0
 8001a06:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a08:	f7ff f912 	bl	8000c30 <__aeabi_ui2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	e005      	b.n	8001a20 <MadgwickAHRSupdate+0x948>
 8001a14:	200000a0 	.word	0x200000a0
 8001a18:	2000009c 	.word	0x2000009c
 8001a1c:	20000098 	.word	0x20000098
 8001a20:	f7ff f856 	bl	8000ad0 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461d      	mov	r5, r3
 8001a28:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001a2a:	f7ff f901 	bl	8000c30 <__aeabi_ui2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4628      	mov	r0, r5
 8001a34:	f7ff f84a 	bl	8000acc <__aeabi_fsub>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f7ff f8f7 	bl	8000c30 <__aeabi_ui2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4628      	mov	r0, r5
 8001a48:	f7ff f840 	bl	8000acc <__aeabi_fsub>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f945 	bl	8000ce0 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461d      	mov	r5, r3
 8001a5a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001a5c:	f7ff f8e8 	bl	8000c30 <__aeabi_ui2f>
 8001a60:	4604      	mov	r4, r0
 8001a62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001a64:	f7ff f8e4 	bl	8000c30 <__aeabi_ui2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f82f 	bl	8000ad0 <__addsf3>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461e      	mov	r6, r3
 8001a76:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001a78:	f7ff f8da 	bl	8000c30 <__aeabi_ui2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4630      	mov	r0, r6
 8001a82:	f7ff f825 	bl	8000ad0 <__addsf3>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461e      	mov	r6, r3
 8001a8a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001a8e:	f7ff f8cf 	bl	8000c30 <__aeabi_ui2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4619      	mov	r1, r3
 8001a96:	4630      	mov	r0, r6
 8001a98:	f7ff f818 	bl	8000acc <__aeabi_fsub>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff f91d 	bl	8000ce0 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f7ff f810 	bl	8000ad0 <__addsf3>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	4ba8      	ldr	r3, [pc, #672]	; (8001d58 <MadgwickAHRSupdate+0xc80>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f8b9 	bl	8000c30 <__aeabi_ui2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f90b 	bl	8000ce0 <__aeabi_fmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461d      	mov	r5, r3
 8001ace:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ad0:	f7ff f8ae 	bl	8000c30 <__aeabi_ui2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fff9 	bl	8000ad0 <__addsf3>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ae6:	f7fe fff1 	bl	8000acc <__aeabi_fsub>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461e      	mov	r6, r3
 8001aee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001af0:	f7ff f89e 	bl	8000c30 <__aeabi_ui2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe ffe9 	bl	8000ad0 <__addsf3>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4630      	mov	r0, r6
 8001b04:	f7fe ffe2 	bl	8000acc <__aeabi_fsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461e      	mov	r6, r3
 8001b0c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b10:	f7ff f88e 	bl	8000c30 <__aeabi_ui2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f7fe ffd7 	bl	8000acc <__aeabi_fsub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4628      	mov	r0, r5
 8001b24:	f7ff f8dc 	bl	8000ce0 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7fe ffcd 	bl	8000acc <__aeabi_fsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461e      	mov	r6, r3
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <MadgwickAHRSupdate+0xc84>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f875 	bl	8000c30 <__aeabi_ui2f>
 8001b46:	4604      	mov	r4, r0
 8001b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b4a:	f7ff f871 	bl	8000c30 <__aeabi_ui2f>
 8001b4e:	4605      	mov	r5, r0
 8001b50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b52:	f7ff f86d 	bl	8000c30 <__aeabi_ui2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001b5e:	f7fe ffb5 	bl	8000acc <__aeabi_fsub>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4698      	mov	r8, r3
 8001b66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b68:	f7ff f862 	bl	8000c30 <__aeabi_ui2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4640      	mov	r0, r8
 8001b72:	f7fe ffab 	bl	8000acc <__aeabi_fsub>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff f8b0 	bl	8000ce0 <__aeabi_fmul>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461d      	mov	r5, r3
 8001b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f84d 	bl	8000c30 <__aeabi_ui2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7fe ff98 	bl	8000ad0 <__addsf3>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001ba8:	f7ff f842 	bl	8000c30 <__aeabi_ui2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f7fe ff8b 	bl	8000acc <__aeabi_fsub>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff f890 	bl	8000ce0 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f7fe ff83 	bl	8000ad0 <__addsf3>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461c      	mov	r4, r3
 8001bce:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <MadgwickAHRSupdate+0xc88>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd4:	fb02 f203 	mul.w	r2, r2, r3
 8001bd8:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <MadgwickAHRSupdate+0xc8c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001be8:	1a8a      	subs	r2, r1, r2
 8001bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bec:	fb01 f102 	mul.w	r1, r1, r2
 8001bf0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bf4:	4402      	add	r2, r0
 8001bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf8:	fb00 f202 	mul.w	r2, r0, r2
 8001bfc:	4411      	add	r1, r2
 8001bfe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001c02:	1a8a      	subs	r2, r1, r2
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f811 	bl	8000c30 <__aeabi_ui2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7fe ff5c 	bl	8000ad0 <__addsf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <MadgwickAHRSupdate+0xc84>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	fb02 f203 	mul.w	r2, r2, r3
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <MadgwickAHRSupdate+0xc80>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fffc 	bl	8000c30 <__aeabi_ui2f>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3e:	4413      	add	r3, r2
 8001c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fff2 	bl	8000c30 <__aeabi_ui2f>
 8001c4c:	4605      	mov	r5, r0
 8001c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c50:	f7fe ffee 	bl	8000c30 <__aeabi_ui2f>
 8001c54:	4606      	mov	r6, r0
 8001c56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c58:	f7fe ffea 	bl	8000c30 <__aeabi_ui2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c64:	f7fe ff32 	bl	8000acc <__aeabi_fsub>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c6e:	f7fe ffdf 	bl	8000c30 <__aeabi_ui2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	4648      	mov	r0, r9
 8001c78:	f7fe ff28 	bl	8000acc <__aeabi_fsub>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4630      	mov	r0, r6
 8001c82:	f7ff f82d 	bl	8000ce0 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f7fe ff20 	bl	8000ad0 <__addsf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461d      	mov	r5, r3
 8001c94:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001c98:	f7fe ffca 	bl	8000c30 <__aeabi_ui2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7fe ff13 	bl	8000acc <__aeabi_fsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff f818 	bl	8000ce0 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	f7fe ff0b 	bl	8000ad0 <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f9eb 	bl	8001098 <__aeabi_f2uiz>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc8:	425b      	negs	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ffb0 	bl	8000c30 <__aeabi_ui2f>
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001cd4:	f7fe ffac 	bl	8000c30 <__aeabi_ui2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fef7 	bl	8000ad0 <__addsf3>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001ce8:	f7fe ffa2 	bl	8000c30 <__aeabi_ui2f>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f7fe feeb 	bl	8000acc <__aeabi_fsub>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f7fe ff98 	bl	8000c30 <__aeabi_ui2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7fe fee1 	bl	8000acc <__aeabi_fsub>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7fe ffe6 	bl	8000ce0 <__aeabi_fmul>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461d      	mov	r5, r3
 8001d18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001d1a:	f7fe ff89 	bl	8000c30 <__aeabi_ui2f>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d22:	f7fe ff85 	bl	8000c30 <__aeabi_ui2f>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fed0 	bl	8000ad0 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461e      	mov	r6, r3
 8001d34:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d36:	f7fe ff7b 	bl	8000c30 <__aeabi_ui2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f7fe fec6 	bl	8000ad0 <__addsf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461e      	mov	r6, r3
 8001d48:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001d4c:	f7fe ff70 	bl	8000c30 <__aeabi_ui2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	e008      	b.n	8001d68 <MadgwickAHRSupdate+0xc90>
 8001d56:	bf00      	nop
 8001d58:	20000098 	.word	0x20000098
 8001d5c:	200000a0 	.word	0x200000a0
 8001d60:	2000009c 	.word	0x2000009c
 8001d64:	20000000 	.word	0x20000000
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f7fe feaf 	bl	8000acc <__aeabi_fsub>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe ffb4 	bl	8000ce0 <__aeabi_fmul>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f7fe fea7 	bl	8000ad0 <__addsf3>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461c      	mov	r4, r3
 8001d86:	4ba8      	ldr	r3, [pc, #672]	; (8002028 <MadgwickAHRSupdate+0xf50>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ff50 	bl	8000c30 <__aeabi_ui2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe ffa2 	bl	8000ce0 <__aeabi_fmul>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461d      	mov	r5, r3
 8001da0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001da2:	f7fe ff45 	bl	8000c30 <__aeabi_ui2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fe90 	bl	8000ad0 <__addsf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001db8:	f7fe fe88 	bl	8000acc <__aeabi_fsub>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461e      	mov	r6, r3
 8001dc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001dc2:	f7fe ff35 	bl	8000c30 <__aeabi_ui2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fe80 	bl	8000ad0 <__addsf3>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f7fe fe79 	bl	8000acc <__aeabi_fsub>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461e      	mov	r6, r3
 8001dde:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001de2:	f7fe ff25 	bl	8000c30 <__aeabi_ui2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4630      	mov	r0, r6
 8001dec:	f7fe fe6e 	bl	8000acc <__aeabi_fsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7fe ff73 	bl	8000ce0 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe fe64 	bl	8000acc <__aeabi_fsub>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461e      	mov	r6, r3
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <MadgwickAHRSupdate+0xf50>)
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fb02 f203 	mul.w	r2, r2, r3
 8001e14:	4b85      	ldr	r3, [pc, #532]	; (800202c <MadgwickAHRSupdate+0xf54>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff05 	bl	8000c30 <__aeabi_ui2f>
 8001e26:	4604      	mov	r4, r0
 8001e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2a:	f7fe ff01 	bl	8000c30 <__aeabi_ui2f>
 8001e2e:	4605      	mov	r5, r0
 8001e30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e32:	f7fe fefd 	bl	8000c30 <__aeabi_ui2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e3e:	f7fe fe45 	bl	8000acc <__aeabi_fsub>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4698      	mov	r8, r3
 8001e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e48:	f7fe fef2 	bl	8000c30 <__aeabi_ui2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4640      	mov	r0, r8
 8001e52:	f7fe fe3b 	bl	8000acc <__aeabi_fsub>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f7fe ff40 	bl	8000ce0 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461d      	mov	r5, r3
 8001e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fedd 	bl	8000c30 <__aeabi_ui2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f7fe fe28 	bl	8000ad0 <__addsf3>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461d      	mov	r5, r3
 8001e84:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001e88:	f7fe fed2 	bl	8000c30 <__aeabi_ui2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4628      	mov	r0, r5
 8001e92:	f7fe fe1b 	bl	8000acc <__aeabi_fsub>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7fe ff20 	bl	8000ce0 <__aeabi_fmul>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7fe fe13 	bl	8000ad0 <__addsf3>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	4b60      	ldr	r3, [pc, #384]	; (8002030 <MadgwickAHRSupdate+0xf58>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb4:	fb02 f203 	mul.w	r2, r2, r3
 8001eb8:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <MadgwickAHRSupdate+0xf5c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ec6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec8:	1a8a      	subs	r2, r1, r2
 8001eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ecc:	fb01 f102 	mul.w	r1, r1, r2
 8001ed0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ed4:	4402      	add	r2, r0
 8001ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ed8:	fb00 f202 	mul.w	r2, r0, r2
 8001edc:	4411      	add	r1, r2
 8001ede:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ee2:	1a8a      	subs	r2, r1, r2
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fea1 	bl	8000c30 <__aeabi_ui2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7fe fdec 	bl	8000ad0 <__addsf3>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4698      	mov	r8, r3
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <MadgwickAHRSupdate+0xf54>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f02:	fb02 f203 	mul.w	r2, r2, r3
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <MadgwickAHRSupdate+0xf50>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fe8c 	bl	8000c30 <__aeabi_ui2f>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1e:	4413      	add	r3, r2
 8001f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fe82 	bl	8000c30 <__aeabi_ui2f>
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f30:	f7fe fe7e 	bl	8000c30 <__aeabi_ui2f>
 8001f34:	4606      	mov	r6, r0
 8001f36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f38:	f7fe fe7a 	bl	8000c30 <__aeabi_ui2f>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001f44:	f7fe fdc2 	bl	8000acc <__aeabi_fsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4699      	mov	r9, r3
 8001f4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001f4e:	f7fe fe6f 	bl	8000c30 <__aeabi_ui2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4648      	mov	r0, r9
 8001f58:	f7fe fdb8 	bl	8000acc <__aeabi_fsub>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4630      	mov	r0, r6
 8001f62:	f7fe febd 	bl	8000ce0 <__aeabi_fmul>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f7fe fdb0 	bl	8000ad0 <__addsf3>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461d      	mov	r5, r3
 8001f74:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001f78:	f7fe fe5a 	bl	8000c30 <__aeabi_ui2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4628      	mov	r0, r5
 8001f82:	f7fe fda3 	bl	8000acc <__aeabi_fsub>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7fe fea8 	bl	8000ce0 <__aeabi_fmul>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4619      	mov	r1, r3
 8001f94:	4640      	mov	r0, r8
 8001f96:	f7fe fd9b 	bl	8000ad0 <__addsf3>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff f87b 	bl	8001098 <__aeabi_f2uiz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001fa6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fa8:	f7fe fe42 	bl	8000c30 <__aeabi_ui2f>
 8001fac:	4604      	mov	r4, r0
 8001fae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001fb0:	f7fe fe3e 	bl	8000c30 <__aeabi_ui2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fd89 	bl	8000ad0 <__addsf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461d      	mov	r5, r3
 8001fc2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001fc4:	f7fe fe34 	bl	8000c30 <__aeabi_ui2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f7fe fd7d 	bl	8000acc <__aeabi_fsub>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f7fe fe2a 	bl	8000c30 <__aeabi_ui2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f7fe fd73 	bl	8000acc <__aeabi_fsub>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7fe fe78 	bl	8000ce0 <__aeabi_fmul>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001ff6:	f7fe fe1b 	bl	8000c30 <__aeabi_ui2f>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ffe:	f7fe fe17 	bl	8000c30 <__aeabi_ui2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fd62 	bl	8000ad0 <__addsf3>
 800200c:	4603      	mov	r3, r0
 800200e:	461e      	mov	r6, r3
 8002010:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002012:	f7fe fe0d 	bl	8000c30 <__aeabi_ui2f>
 8002016:	4603      	mov	r3, r0
 8002018:	4619      	mov	r1, r3
 800201a:	4630      	mov	r0, r6
 800201c:	f7fe fd58 	bl	8000ad0 <__addsf3>
 8002020:	4603      	mov	r3, r0
 8002022:	461e      	mov	r6, r3
 8002024:	e008      	b.n	8002038 <MadgwickAHRSupdate+0xf60>
 8002026:	bf00      	nop
 8002028:	2000009c 	.word	0x2000009c
 800202c:	20000000 	.word	0x20000000
 8002030:	20000098 	.word	0x20000098
 8002034:	200000a0 	.word	0x200000a0
 8002038:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800203c:	f7fe fdf8 	bl	8000c30 <__aeabi_ui2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4630      	mov	r0, r6
 8002046:	f7fe fd41 	bl	8000acc <__aeabi_fsub>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe fe46 	bl	8000ce0 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	4628      	mov	r0, r5
 800205a:	f7fe fd39 	bl	8000ad0 <__addsf3>
 800205e:	4603      	mov	r3, r0
 8002060:	461e      	mov	r6, r3
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	425b      	negs	r3, r3
 8002066:	4ab3      	ldr	r2, [pc, #716]	; (8002334 <MadgwickAHRSupdate+0x125c>)
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fb02 f203 	mul.w	r2, r2, r3
 800206e:	4bb2      	ldr	r3, [pc, #712]	; (8002338 <MadgwickAHRSupdate+0x1260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fdd8 	bl	8000c30 <__aeabi_ui2f>
 8002080:	4604      	mov	r4, r0
 8002082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002084:	f7fe fdd4 	bl	8000c30 <__aeabi_ui2f>
 8002088:	4605      	mov	r5, r0
 800208a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800208c:	f7fe fdd0 	bl	8000c30 <__aeabi_ui2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002098:	f7fe fd18 	bl	8000acc <__aeabi_fsub>
 800209c:	4603      	mov	r3, r0
 800209e:	4698      	mov	r8, r3
 80020a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020a2:	f7fe fdc5 	bl	8000c30 <__aeabi_ui2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4640      	mov	r0, r8
 80020ac:	f7fe fd0e 	bl	8000acc <__aeabi_fsub>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4628      	mov	r0, r5
 80020b6:	f7fe fe13 	bl	8000ce0 <__aeabi_fmul>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461d      	mov	r5, r3
 80020be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fdb0 	bl	8000c30 <__aeabi_ui2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4628      	mov	r0, r5
 80020d6:	f7fe fcfb 	bl	8000ad0 <__addsf3>
 80020da:	4603      	mov	r3, r0
 80020dc:	461d      	mov	r5, r3
 80020de:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80020e2:	f7fe fda5 	bl	8000c30 <__aeabi_ui2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4628      	mov	r0, r5
 80020ec:	f7fe fcee 	bl	8000acc <__aeabi_fsub>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4619      	mov	r1, r3
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7fe fdf3 	bl	8000ce0 <__aeabi_fmul>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4630      	mov	r0, r6
 8002100:	f7fe fce6 	bl	8000ad0 <__addsf3>
 8002104:	4603      	mov	r3, r0
 8002106:	461c      	mov	r4, r3
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	425b      	negs	r3, r3
 800210c:	4a8b      	ldr	r2, [pc, #556]	; (800233c <MadgwickAHRSupdate+0x1264>)
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	fb02 f203 	mul.w	r2, r2, r3
 8002114:	4b8a      	ldr	r3, [pc, #552]	; (8002340 <MadgwickAHRSupdate+0x1268>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002124:	1a8a      	subs	r2, r1, r2
 8002126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002128:	fb01 f102 	mul.w	r1, r1, r2
 800212c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800212e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002130:	4402      	add	r2, r0
 8002132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002134:	fb00 f202 	mul.w	r2, r0, r2
 8002138:	4411      	add	r1, r2
 800213a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800213e:	1a8a      	subs	r2, r1, r2
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fd73 	bl	8000c30 <__aeabi_ui2f>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f7fe fcbe 	bl	8000ad0 <__addsf3>
 8002154:	4603      	mov	r3, r0
 8002156:	4698      	mov	r8, r3
 8002158:	4b77      	ldr	r3, [pc, #476]	; (8002338 <MadgwickAHRSupdate+0x1260>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fd64 	bl	8000c30 <__aeabi_ui2f>
 8002168:	4604      	mov	r4, r0
 800216a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800216c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216e:	4413      	add	r3, r2
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fd5a 	bl	8000c30 <__aeabi_ui2f>
 800217c:	4605      	mov	r5, r0
 800217e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002180:	f7fe fd56 	bl	8000c30 <__aeabi_ui2f>
 8002184:	4606      	mov	r6, r0
 8002186:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002188:	f7fe fd52 	bl	8000c30 <__aeabi_ui2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002194:	f7fe fc9a 	bl	8000acc <__aeabi_fsub>
 8002198:	4603      	mov	r3, r0
 800219a:	4699      	mov	r9, r3
 800219c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800219e:	f7fe fd47 	bl	8000c30 <__aeabi_ui2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	4648      	mov	r0, r9
 80021a8:	f7fe fc90 	bl	8000acc <__aeabi_fsub>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4619      	mov	r1, r3
 80021b0:	4630      	mov	r0, r6
 80021b2:	f7fe fd95 	bl	8000ce0 <__aeabi_fmul>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7fe fc88 	bl	8000ad0 <__addsf3>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461d      	mov	r5, r3
 80021c4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80021c8:	f7fe fd32 	bl	8000c30 <__aeabi_ui2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	4628      	mov	r0, r5
 80021d2:	f7fe fc7b 	bl	8000acc <__aeabi_fsub>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4619      	mov	r1, r3
 80021da:	4620      	mov	r0, r4
 80021dc:	f7fe fd80 	bl	8000ce0 <__aeabi_fmul>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4640      	mov	r0, r8
 80021e6:	f7fe fc73 	bl	8000ad0 <__addsf3>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff53 	bl	8001098 <__aeabi_f2uiz>
 80021f2:	4603      	mov	r3, r0
 80021f4:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	fb03 f203 	mul.w	r2, r3, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	fb03 f303 	mul.w	r3, r3, r3
 8002202:	441a      	add	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fb03 f103 	mul.w	r1, r3, r3
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	fb03 f303 	mul.w	r3, r3, r3
 8002210:	440b      	add	r3, r1
 8002212:	4413      	add	r3, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fce3 	bl	8002be0 <invSqrt>
 800221a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <MadgwickAHRSupdate+0x126c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a3a      	ldr	r2, [r7, #32]
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <MadgwickAHRSupdate+0x126c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <MadgwickAHRSupdate+0x126c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <MadgwickAHRSupdate+0x126c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <MadgwickAHRSupdate+0x1264>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fcc4 	bl	8000c30 <__aeabi_ui2f>
 80022a8:	4604      	mov	r4, r0
 80022aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80022ae:	f7fe fcbf 	bl	8000c30 <__aeabi_ui2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fd11 	bl	8000ce0 <__aeabi_fmul>
 80022be:	4603      	mov	r3, r0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7fe fc04 	bl	8000ad0 <__addsf3>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fee4 	bl	8001098 <__aeabi_f2uiz>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <MadgwickAHRSupdate+0x1264>)
 80022d4:	6013      	str	r3, [r2, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MadgwickAHRSupdate+0x1260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fca8 	bl	8000c30 <__aeabi_ui2f>
 80022e0:	4604      	mov	r4, r0
 80022e2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022e6:	f7fe fca3 	bl	8000c30 <__aeabi_ui2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fcf5 	bl	8000ce0 <__aeabi_fmul>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4619      	mov	r1, r3
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7fe fbe8 	bl	8000ad0 <__addsf3>
 8002300:	4603      	mov	r3, r0
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fec8 	bl	8001098 <__aeabi_f2uiz>
 8002308:	4603      	mov	r3, r0
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <MadgwickAHRSupdate+0x1260>)
 800230c:	6013      	str	r3, [r2, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MadgwickAHRSupdate+0x1268>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fc8c 	bl	8000c30 <__aeabi_ui2f>
 8002318:	4604      	mov	r4, r0
 800231a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800231e:	f7fe fc87 	bl	8000c30 <__aeabi_ui2f>
 8002322:	4603      	mov	r3, r0
 8002324:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fcd9 	bl	8000ce0 <__aeabi_fmul>
 800232e:	4603      	mov	r3, r0
 8002330:	e00a      	b.n	8002348 <MadgwickAHRSupdate+0x1270>
 8002332:	bf00      	nop
 8002334:	200000a0 	.word	0x200000a0
 8002338:	20000098 	.word	0x20000098
 800233c:	20000000 	.word	0x20000000
 8002340:	2000009c 	.word	0x2000009c
 8002344:	20000094 	.word	0x20000094
 8002348:	4619      	mov	r1, r3
 800234a:	4620      	mov	r0, r4
 800234c:	f7fe fbc0 	bl	8000ad0 <__addsf3>
 8002350:	4603      	mov	r3, r0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fea0 	bl	8001098 <__aeabi_f2uiz>
 8002358:	4603      	mov	r3, r0
 800235a:	4a31      	ldr	r2, [pc, #196]	; (8002420 <MadgwickAHRSupdate+0x1348>)
 800235c:	6013      	str	r3, [r2, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fc64 	bl	8000c30 <__aeabi_ui2f>
 8002368:	4604      	mov	r4, r0
 800236a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800236e:	f7fe fc5f 	bl	8000c30 <__aeabi_ui2f>
 8002372:	4603      	mov	r3, r0
 8002374:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fcb1 	bl	8000ce0 <__aeabi_fmul>
 800237e:	4603      	mov	r3, r0
 8002380:	4619      	mov	r1, r3
 8002382:	4620      	mov	r0, r4
 8002384:	f7fe fba4 	bl	8000ad0 <__addsf3>
 8002388:	4603      	mov	r3, r0
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe84 	bl	8001098 <__aeabi_f2uiz>
 8002390:	4603      	mov	r3, r0
 8002392:	4a24      	ldr	r2, [pc, #144]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 8002394:	6013      	str	r3, [r2, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <MadgwickAHRSupdate+0x1350>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a23      	ldr	r2, [pc, #140]	; (8002428 <MadgwickAHRSupdate+0x1350>)
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fb02 f203 	mul.w	r2, r2, r3
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <MadgwickAHRSupdate+0x1354>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4921      	ldr	r1, [pc, #132]	; (800242c <MadgwickAHRSupdate+0x1354>)
 80023a8:	6809      	ldr	r1, [r1, #0]
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	441a      	add	r2, r3
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	491b      	ldr	r1, [pc, #108]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 80023b6:	6809      	ldr	r1, [r1, #0]
 80023b8:	fb01 f103 	mul.w	r1, r1, r3
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MadgwickAHRSupdate+0x1348>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4817      	ldr	r0, [pc, #92]	; (8002420 <MadgwickAHRSupdate+0x1348>)
 80023c2:	6800      	ldr	r0, [r0, #0]
 80023c4:	fb00 f303 	mul.w	r3, r0, r3
 80023c8:	440b      	add	r3, r1
 80023ca:	4413      	add	r3, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fc07 	bl	8002be0 <invSqrt>
 80023d2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MadgwickAHRSupdate+0x1350>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <MadgwickAHRSupdate+0x1350>)
 80023e4:	6013      	str	r3, [r2, #0]
	q1 *= recipNorm;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MadgwickAHRSupdate+0x1354>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	4a0e      	ldr	r2, [pc, #56]	; (800242c <MadgwickAHRSupdate+0x1354>)
 80023f4:	6013      	str	r3, [r2, #0]
	q2 *= recipNorm;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MadgwickAHRSupdate+0x1348>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <MadgwickAHRSupdate+0x1348>)
 8002404:	6013      	str	r3, [r2, #0]
	q3 *= recipNorm;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <MadgwickAHRSupdate+0x134c>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	37a4      	adds	r7, #164	; 0xa4
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800241e:	bf00      	nop
 8002420:	2000009c 	.word	0x2000009c
 8002424:	200000a0 	.word	0x200000a0
 8002428:	20000000 	.word	0x20000000
 800242c:	20000098 	.word	0x20000098

08002430 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(uint32_t gx, uint32_t gy, uint32_t gz, uint32_t ax, uint32_t ay, uint32_t az) {
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b09a      	sub	sp, #104	; 0x68
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
	uint32_t s0, s1, s2, s3;
	uint32_t qDot1, qDot2, qDot3, qDot4;
	uint32_t _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800243e:	4bb1      	ldr	r3, [pc, #708]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	425b      	negs	r3, r3
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	fb02 f203 	mul.w	r2, r2, r3
 800244a:	4baf      	ldr	r3, [pc, #700]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	4bad      	ldr	r3, [pc, #692]	; (800270c <MadgwickAHRSupdateIMU+0x2dc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fbe4 	bl	8000c30 <__aeabi_ui2f>
 8002468:	4603      	mov	r3, r0
 800246a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc36 	bl	8000ce0 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fe0e 	bl	8001098 <__aeabi_f2uiz>
 800247c:	4603      	mov	r3, r0
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002480:	4ba3      	ldr	r3, [pc, #652]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fb02 f203 	mul.w	r2, r2, r3
 800248a:	4b9f      	ldr	r3, [pc, #636]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	441a      	add	r2, r3
 8002496:	4b9d      	ldr	r3, [pc, #628]	; (800270c <MadgwickAHRSupdateIMU+0x2dc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fbc4 	bl	8000c30 <__aeabi_ui2f>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc16 	bl	8000ce0 <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fdee 	bl	8001098 <__aeabi_f2uiz>
 80024bc:	4603      	mov	r3, r0
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80024c0:	4b93      	ldr	r3, [pc, #588]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	fb02 f203 	mul.w	r2, r2, r3
 80024ca:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	4b8d      	ldr	r3, [pc, #564]	; (800270c <MadgwickAHRSupdateIMU+0x2dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fba4 	bl	8000c30 <__aeabi_ui2f>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fbf6 	bl	8000ce0 <__aeabi_fmul>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fdce 	bl	8001098 <__aeabi_f2uiz>
 80024fc:	4603      	mov	r3, r0
 80024fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002500:	4b83      	ldr	r3, [pc, #524]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	4b7e      	ldr	r3, [pc, #504]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	441a      	add	r2, r3
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fb84 	bl	8000c30 <__aeabi_ui2f>
 8002528:	4603      	mov	r3, r0
 800252a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fbd6 	bl	8000ce0 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fdae 	bl	8001098 <__aeabi_f2uiz>
 800253c:	4603      	mov	r3, r0
 800253e:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f7fe fb75 	bl	8000c30 <__aeabi_ui2f>
 8002546:	4603      	mov	r3, r0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fd5b 	bl	8001008 <__aeabi_fcmpeq>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d018      	beq.n	800258a <MadgwickAHRSupdateIMU+0x15a>
 8002558:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800255a:	f7fe fb69 	bl	8000c30 <__aeabi_ui2f>
 800255e:	4603      	mov	r3, r0
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd4f 	bl	8001008 <__aeabi_fcmpeq>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00c      	beq.n	800258a <MadgwickAHRSupdateIMU+0x15a>
 8002570:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002572:	f7fe fb5d 	bl	8000c30 <__aeabi_ui2f>
 8002576:	4603      	mov	r3, r0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fd43 	bl	8001008 <__aeabi_fcmpeq>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 8276 	bne.w	8002a76 <MadgwickAHRSupdateIMU+0x646>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	fb03 f203 	mul.w	r2, r3, r3
 8002590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002592:	fb03 f303 	mul.w	r3, r3, r3
 8002596:	441a      	add	r2, r3
 8002598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800259a:	fb03 f303 	mul.w	r3, r3, r3
 800259e:	4413      	add	r3, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fb1d 	bl	8002be0 <invSqrt>
 80025a6:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80025b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 80025bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80025c6:	4b52      	ldr	r3, [pc, #328]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fb30 	bl	8000c30 <__aeabi_ui2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fa7b 	bl	8000ad0 <__addsf3>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fd5b 	bl	8001098 <__aeabi_f2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fb20 	bl	8000c30 <__aeabi_ui2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4619      	mov	r1, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fa6b 	bl	8000ad0 <__addsf3>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fd4b 	bl	8001098 <__aeabi_f2uiz>
 8002602:	4603      	mov	r3, r0
 8002604:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fb10 	bl	8000c30 <__aeabi_ui2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fa5b 	bl	8000ad0 <__addsf3>
 800261a:	4603      	mov	r3, r0
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd3b 	bl	8001098 <__aeabi_f2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <MadgwickAHRSupdateIMU+0x2dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fb00 	bl	8000c30 <__aeabi_ui2f>
 8002630:	4603      	mov	r3, r0
 8002632:	4619      	mov	r1, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fa4b 	bl	8000ad0 <__addsf3>
 800263a:	4603      	mov	r3, r0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fd2b 	bl	8001098 <__aeabi_f2uiz>
 8002642:	4603      	mov	r3, r0
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8002646:	4b32      	ldr	r3, [pc, #200]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe faf0 	bl	8000c30 <__aeabi_ui2f>
 8002650:	4603      	mov	r3, r0
 8002652:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fb42 	bl	8000ce0 <__aeabi_fmul>
 800265c:	4603      	mov	r3, r0
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fd1a 	bl	8001098 <__aeabi_f2uiz>
 8002664:	4603      	mov	r3, r0
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fadf 	bl	8000c30 <__aeabi_ui2f>
 8002672:	4603      	mov	r3, r0
 8002674:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fb31 	bl	8000ce0 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd09 	bl	8001098 <__aeabi_f2uiz>
 8002686:	4603      	mov	r3, r0
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe face 	bl	8000c30 <__aeabi_ui2f>
 8002694:	4603      	mov	r3, r0
 8002696:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb20 	bl	8000ce0 <__aeabi_fmul>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fcf8 	bl	8001098 <__aeabi_f2uiz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fabd 	bl	8000c30 <__aeabi_ui2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fb0f 	bl	8000ce0 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fce7 	bl	8001098 <__aeabi_f2uiz>
 80026ca:	4603      	mov	r3, r0
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MadgwickAHRSupdateIMU+0x2d8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe faac 	bl	8000c30 <__aeabi_ui2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fafe 	bl	8000ce0 <__aeabi_fmul>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fcd6 	bl	8001098 <__aeabi_f2uiz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <MadgwickAHRSupdateIMU+0x2e0>)
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 80026fe:	4b01      	ldr	r3, [pc, #4]	; (8002704 <MadgwickAHRSupdateIMU+0x2d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	e007      	b.n	8002714 <MadgwickAHRSupdateIMU+0x2e4>
 8002704:	20000098 	.word	0x20000098
 8002708:	2000009c 	.word	0x2000009c
 800270c:	200000a0 	.word	0x200000a0
 8002710:	20000000 	.word	0x20000000
 8002714:	4aa8      	ldr	r2, [pc, #672]	; (80029b8 <MadgwickAHRSupdateIMU+0x588>)
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 800271e:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <MadgwickAHRSupdateIMU+0x58c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4aa6      	ldr	r2, [pc, #664]	; (80029bc <MadgwickAHRSupdateIMU+0x58c>)
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 800272c:	4ba4      	ldr	r3, [pc, #656]	; (80029c0 <MadgwickAHRSupdateIMU+0x590>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4aa3      	ldr	r2, [pc, #652]	; (80029c0 <MadgwickAHRSupdateIMU+0x590>)
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	fb02 f203 	mul.w	r2, r2, r3
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	441a      	add	r2, r3
 800274c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	441a      	add	r2, r3
 8002756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002758:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002764:	6a3a      	ldr	r2, [r7, #32]
 8002766:	fb02 f203 	mul.w	r2, r2, r3
 800276a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fa5b 	bl	8000c30 <__aeabi_ui2f>
 800277a:	4604      	mov	r4, r0
 800277c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800277e:	f7fe fa57 	bl	8000c30 <__aeabi_ui2f>
 8002782:	4603      	mov	r3, r0
 8002784:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe faa9 	bl	8000ce0 <__aeabi_fmul>
 800278e:	4603      	mov	r3, r0
 8002790:	461d      	mov	r5, r3
 8002792:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <MadgwickAHRSupdateIMU+0x588>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa4a 	bl	8000c30 <__aeabi_ui2f>
 800279c:	4603      	mov	r3, r0
 800279e:	4619      	mov	r1, r3
 80027a0:	4628      	mov	r0, r5
 80027a2:	f7fe fa9d 	bl	8000ce0 <__aeabi_fmul>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7fe f990 	bl	8000ad0 <__addsf3>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa37 	bl	8000c30 <__aeabi_ui2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7fe f980 	bl	8000acc <__aeabi_fsub>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461c      	mov	r4, r3
 80027d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027d2:	f7fe fa2d 	bl	8000c30 <__aeabi_ui2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	4620      	mov	r0, r4
 80027dc:	f7fe f976 	bl	8000acc <__aeabi_fsub>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461c      	mov	r4, r3
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fa1f 	bl	8000c30 <__aeabi_ui2f>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fe f96a 	bl	8000ad0 <__addsf3>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461c      	mov	r4, r3
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fa11 	bl	8000c30 <__aeabi_ui2f>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	4620      	mov	r0, r4
 8002814:	f7fe f95c 	bl	8000ad0 <__addsf3>
 8002818:	4603      	mov	r3, r0
 800281a:	461c      	mov	r4, r3
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fa03 	bl	8000c30 <__aeabi_ui2f>
 800282a:	4603      	mov	r3, r0
 800282c:	4619      	mov	r1, r3
 800282e:	4620      	mov	r0, r4
 8002830:	f7fe f94e 	bl	8000ad0 <__addsf3>
 8002834:	4603      	mov	r3, r0
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fc2e 	bl	8001098 <__aeabi_f2uiz>
 800283c:	4603      	mov	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002842:	f7fe f9f5 	bl	8000c30 <__aeabi_ui2f>
 8002846:	4603      	mov	r3, r0
 8002848:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fa47 	bl	8000ce0 <__aeabi_fmul>
 8002852:	4603      	mov	r3, r0
 8002854:	461c      	mov	r4, r3
 8002856:	4b59      	ldr	r3, [pc, #356]	; (80029bc <MadgwickAHRSupdateIMU+0x58c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe f9e8 	bl	8000c30 <__aeabi_ui2f>
 8002860:	4603      	mov	r3, r0
 8002862:	4619      	mov	r1, r3
 8002864:	4620      	mov	r0, r4
 8002866:	f7fe fa3b 	bl	8000ce0 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	461c      	mov	r4, r3
 800286e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f9da 	bl	8000c30 <__aeabi_ui2f>
 800287c:	4603      	mov	r3, r0
 800287e:	4619      	mov	r1, r3
 8002880:	4620      	mov	r0, r4
 8002882:	f7fe f925 	bl	8000ad0 <__addsf3>
 8002886:	4603      	mov	r3, r0
 8002888:	461c      	mov	r4, r3
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f9cc 	bl	8000c30 <__aeabi_ui2f>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	4620      	mov	r0, r4
 800289e:	f7fe f917 	bl	8000ad0 <__addsf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461c      	mov	r4, r3
 80028a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f9be 	bl	8000c30 <__aeabi_ui2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe f907 	bl	8000acc <__aeabi_fsub>
 80028be:	4603      	mov	r3, r0
 80028c0:	461c      	mov	r4, r3
 80028c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028c4:	f7fe f9b4 	bl	8000c30 <__aeabi_ui2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4619      	mov	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe f8fd 	bl	8000acc <__aeabi_fsub>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461c      	mov	r4, r3
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f9a6 	bl	8000c30 <__aeabi_ui2f>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4619      	mov	r1, r3
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7fe f8f1 	bl	8000ad0 <__addsf3>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461c      	mov	r4, r3
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe f998 	bl	8000c30 <__aeabi_ui2f>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f7fe f8e3 	bl	8000ad0 <__addsf3>
 800290a:	4603      	mov	r3, r0
 800290c:	461c      	mov	r4, r3
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f98a 	bl	8000c30 <__aeabi_ui2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4619      	mov	r1, r3
 8002920:	4620      	mov	r0, r4
 8002922:	f7fe f8d5 	bl	8000ad0 <__addsf3>
 8002926:	4603      	mov	r3, r0
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fbb5 	bl	8001098 <__aeabi_f2uiz>
 800292e:	4603      	mov	r3, r0
 8002930:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002934:	f7fe f97c 	bl	8000c30 <__aeabi_ui2f>
 8002938:	4603      	mov	r3, r0
 800293a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f9ce 	bl	8000ce0 <__aeabi_fmul>
 8002944:	4603      	mov	r3, r0
 8002946:	461c      	mov	r4, r3
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <MadgwickAHRSupdateIMU+0x590>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe f96f 	bl	8000c30 <__aeabi_ui2f>
 8002952:	4603      	mov	r3, r0
 8002954:	4619      	mov	r1, r3
 8002956:	4620      	mov	r0, r4
 8002958:	f7fe f9c2 	bl	8000ce0 <__aeabi_fmul>
 800295c:	4603      	mov	r3, r0
 800295e:	461c      	mov	r4, r3
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f961 	bl	8000c30 <__aeabi_ui2f>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	4620      	mov	r0, r4
 8002974:	f7fe f8aa 	bl	8000acc <__aeabi_fsub>
 8002978:	4603      	mov	r3, r0
 800297a:	461c      	mov	r4, r3
 800297c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800297e:	f7fe f957 	bl	8000c30 <__aeabi_ui2f>
 8002982:	4603      	mov	r3, r0
 8002984:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f9a9 	bl	8000ce0 <__aeabi_fmul>
 800298e:	4603      	mov	r3, r0
 8002990:	461d      	mov	r5, r3
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MadgwickAHRSupdateIMU+0x590>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f94a 	bl	8000c30 <__aeabi_ui2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	4628      	mov	r0, r5
 80029a2:	f7fe f99d 	bl	8000ce0 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe f890 	bl	8000ad0 <__addsf3>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461c      	mov	r4, r3
 80029b4:	e006      	b.n	80029c4 <MadgwickAHRSupdateIMU+0x594>
 80029b6:	bf00      	nop
 80029b8:	20000098 	.word	0x20000098
 80029bc:	2000009c 	.word	0x2000009c
 80029c0:	200000a0 	.word	0x200000a0
 80029c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe f92f 	bl	8000c30 <__aeabi_ui2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4619      	mov	r1, r3
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7fe f878 	bl	8000acc <__aeabi_fsub>
 80029dc:	4603      	mov	r3, r0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fb5a 	bl	8001098 <__aeabi_f2uiz>
 80029e4:	4603      	mov	r3, r0
 80029e6:	613b      	str	r3, [r7, #16]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	fb03 f203 	mul.w	r2, r3, r3
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	fb03 f303 	mul.w	r3, r3, r3
 80029f4:	441a      	add	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	fb03 f103 	mul.w	r1, r3, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fb03 f303 	mul.w	r3, r3, r3
 8002a02:	440b      	add	r3, r1
 8002a04:	4413      	add	r3, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8ea 	bl	8002be0 <invSqrt>
 8002a0c:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a36:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <MadgwickAHRSupdateIMU+0x79c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <MadgwickAHRSupdateIMU+0x79c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <MadgwickAHRSupdateIMU+0x79c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002a66:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <MadgwickAHRSupdateIMU+0x79c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f8d8 	bl	8000c30 <__aeabi_ui2f>
 8002a80:	4604      	mov	r4, r0
 8002a82:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a84:	f7fe f8d4 	bl	8000c30 <__aeabi_ui2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe f926 	bl	8000ce0 <__aeabi_fmul>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7fe f819 	bl	8000ad0 <__addsf3>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe faf9 	bl	8001098 <__aeabi_f2uiz>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002aaa:	6013      	str	r3, [r2, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe f8bd 	bl	8000c30 <__aeabi_ui2f>
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002aba:	f7fe f8b9 	bl	8000c30 <__aeabi_ui2f>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe f90b 	bl	8000ce0 <__aeabi_fmul>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4619      	mov	r1, r3
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7fd fffe 	bl	8000ad0 <__addsf3>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fade 	bl	8001098 <__aeabi_f2uiz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002ae0:	6013      	str	r3, [r2, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f8a2 	bl	8000c30 <__aeabi_ui2f>
 8002aec:	4604      	mov	r4, r0
 8002aee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002af0:	f7fe f89e 	bl	8000c30 <__aeabi_ui2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f8f0 	bl	8000ce0 <__aeabi_fmul>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4619      	mov	r1, r3
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7fd ffe3 	bl	8000ad0 <__addsf3>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fac3 	bl	8001098 <__aeabi_f2uiz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b16:	6013      	str	r3, [r2, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f887 	bl	8000c30 <__aeabi_ui2f>
 8002b22:	4604      	mov	r4, r0
 8002b24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002b26:	f7fe f883 	bl	8000c30 <__aeabi_ui2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f8d5 	bl	8000ce0 <__aeabi_fmul>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fd ffc8 	bl	8000ad0 <__addsf3>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe faa8 	bl	8001098 <__aeabi_f2uiz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002b4c:	6013      	str	r3, [r2, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	fb02 f203 	mul.w	r2, r2, r3
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	491d      	ldr	r1, [pc, #116]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002b60:	6809      	ldr	r1, [r1, #0]
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	441a      	add	r2, r3
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	491b      	ldr	r1, [pc, #108]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002b6e:	6809      	ldr	r1, [r1, #0]
 8002b70:	fb01 f103 	mul.w	r1, r1, r3
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	fb00 f303 	mul.w	r3, r0, r3
 8002b80:	440b      	add	r3, r1
 8002b82:	4413      	add	r3, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 f82b 	bl	8002be0 <invSqrt>
 8002b8a:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <MadgwickAHRSupdateIMU+0x7a0>)
 8002b98:	6013      	str	r3, [r2, #0]
	q1 *= recipNorm;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <MadgwickAHRSupdateIMU+0x7a4>)
 8002ba6:	6013      	str	r3, [r2, #0]
	q2 *= recipNorm;
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <MadgwickAHRSupdateIMU+0x7a8>)
 8002bb4:	6013      	str	r3, [r2, #0]
	q3 *= recipNorm;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <MadgwickAHRSupdateIMU+0x7ac>)
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3768      	adds	r7, #104	; 0x68
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}
 8002bcc:	20000094 	.word	0x20000094
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000098 	.word	0x20000098
 8002bd8:	2000009c 	.word	0x2000009c
 8002bdc:	200000a0 	.word	0x200000a0

08002be0 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

uint32_t invSqrt(uint32_t x) {
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	uint32_t halfx = 0.5f * x;
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe f821 	bl	8000c30 <__aeabi_ui2f>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe f873 	bl	8000ce0 <__aeabi_fmul>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fa4b 	bl	8001098 <__aeabi_f2uiz>
 8002c02:	4603      	mov	r3, r0
 8002c04:	617b      	str	r3, [r7, #20]
	uint32_t y = x;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	105a      	asrs	r2, r3, #1
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <invSqrt+0x90>)
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
	y = *(uint32_t*)&i;
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f802 	bl	8000c30 <__aeabi_ui2f>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fff7 	bl	8000c30 <__aeabi_ui2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002c4a:	f7fd ff3f 	bl	8000acc <__aeabi_fsub>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4619      	mov	r1, r3
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7fe f844 	bl	8000ce0 <__aeabi_fmul>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fa1c 	bl	8001098 <__aeabi_f2uiz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]
	return y;
 8002c64:	693b      	ldr	r3, [r7, #16]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	5f3759df 	.word	0x5f3759df

08002c74 <computeAngles>:

void computeAngles()
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <computeAngles+0x140>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4e      	ldr	r2, [pc, #312]	; (8002db8 <computeAngles+0x144>)
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	fb02 f203 	mul.w	r2, r2, r3
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <computeAngles+0x148>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <computeAngles+0x14c>)
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd ffcc 	bl	8000c30 <__aeabi_ui2f>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <computeAngles+0x144>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a46      	ldr	r2, [pc, #280]	; (8002db8 <computeAngles+0x144>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd ffc2 	bl	8000c30 <__aeabi_ui2f>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002cb4:	f7fd ff0a 	bl	8000acc <__aeabi_fsub>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <computeAngles+0x148>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3e      	ldr	r2, [pc, #248]	; (8002dbc <computeAngles+0x148>)
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ffb1 	bl	8000c30 <__aeabi_ui2f>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7fd fefa 	bl	8000acc <__aeabi_fsub>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f005 f861 	bl	8007da4 <atan2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f9d7 	bl	8001098 <__aeabi_f2uiz>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4a35      	ldr	r2, [pc, #212]	; (8002dc4 <computeAngles+0x150>)
 8002cee:	6013      	str	r3, [r2, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <computeAngles+0x144>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a32      	ldr	r2, [pc, #200]	; (8002dc0 <computeAngles+0x14c>)
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	fb02 f203 	mul.w	r2, r2, r3
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <computeAngles+0x140>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	492e      	ldr	r1, [pc, #184]	; (8002dbc <computeAngles+0x148>)
 8002d02:	6809      	ldr	r1, [r1, #0]
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd ff90 	bl	8000c30 <__aeabi_ui2f>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ffe2 	bl	8000ce0 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 f81a 	bl	8007d58 <asinf>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f9b6 	bl	8001098 <__aeabi_f2uiz>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <computeAngles+0x154>)
 8002d30:	6013      	str	r3, [r2, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <computeAngles+0x144>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <computeAngles+0x148>)
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fb02 f203 	mul.w	r2, r2, r3
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <computeAngles+0x140>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	491f      	ldr	r1, [pc, #124]	; (8002dc0 <computeAngles+0x14c>)
 8002d44:	6809      	ldr	r1, [r1, #0]
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd ff6f 	bl	8000c30 <__aeabi_ui2f>
 8002d52:	4604      	mov	r4, r0
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <computeAngles+0x148>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <computeAngles+0x148>)
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd ff65 	bl	8000c30 <__aeabi_ui2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002d6e:	f7fd fead 	bl	8000acc <__aeabi_fsub>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461d      	mov	r5, r3
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <computeAngles+0x14c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <computeAngles+0x14c>)
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd ff54 	bl	8000c30 <__aeabi_ui2f>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f7fd fe9d 	bl	8000acc <__aeabi_fsub>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f005 f804 	bl	8007da4 <atan2f>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f97a 	bl	8001098 <__aeabi_f2uiz>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <computeAngles+0x158>)
 8002da8:	6013      	str	r3, [r2, #0]
	anglesComputed = 1;
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <computeAngles+0x15c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000098 	.word	0x20000098
 8002dbc:	2000009c 	.word	0x2000009c
 8002dc0:	200000a0 	.word	0x200000a0
 8002dc4:	200000d8 	.word	0x200000d8
 8002dc8:	200000d4 	.word	0x200000d4
 8002dcc:	200000d0 	.word	0x200000d0
 8002dd0:	200000be 	.word	0x200000be

08002dd4 <getRoll>:

uint32_t getRoll() {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
    if (!anglesComputed) computeAngles();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <getRoll+0x34>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <getRoll+0x10>
 8002de0:	f7ff ff48 	bl	8002c74 <computeAngles>
    return roll * 57.29578f;
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <getRoll+0x38>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ff21 	bl	8000c30 <__aeabi_ui2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <getRoll+0x3c>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff74 	bl	8000ce0 <__aeabi_fmul>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f94c 	bl	8001098 <__aeabi_f2uiz>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200000be 	.word	0x200000be
 8002e0c:	200000d8 	.word	0x200000d8
 8002e10:	42652ee1 	.word	0x42652ee1

08002e14 <getPitch>:
uint32_t getPitch() {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
    if (!anglesComputed) computeAngles();
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <getPitch+0x34>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <getPitch+0x10>
 8002e20:	f7ff ff28 	bl	8002c74 <computeAngles>
    return pitch * 57.29578f;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <getPitch+0x38>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd ff01 	bl	8000c30 <__aeabi_ui2f>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4907      	ldr	r1, [pc, #28]	; (8002e50 <getPitch+0x3c>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd ff54 	bl	8000ce0 <__aeabi_fmul>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f92c 	bl	8001098 <__aeabi_f2uiz>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200000be 	.word	0x200000be
 8002e4c:	200000d4 	.word	0x200000d4
 8002e50:	42652ee1 	.word	0x42652ee1

08002e54 <getYaw>:
uint32_t getYaw() {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
    if (!anglesComputed) computeAngles();
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <getYaw+0x3c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <getYaw+0x10>
 8002e60:	f7ff ff08 	bl	8002c74 <computeAngles>
    return yaw * 57.29578f + 180.0f;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <getYaw+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fee1 	bl	8000c30 <__aeabi_ui2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4909      	ldr	r1, [pc, #36]	; (8002e98 <getYaw+0x44>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff34 	bl	8000ce0 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <getYaw+0x48>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fe27 	bl	8000ad0 <__addsf3>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe f907 	bl	8001098 <__aeabi_f2uiz>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	200000be 	.word	0x200000be
 8002e94:	200000d0 	.word	0x200000d0
 8002e98:	42652ee1 	.word	0x42652ee1
 8002e9c:	43340000 	.word	0x43340000

08002ea0 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	460b      	mov	r3, r1
 8002eae:	72fb      	strb	r3, [r7, #11]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eba:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002ec0:	f107 0214 	add.w	r2, r7, #20
 8002ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	21d0      	movs	r1, #208	; 0xd0
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f002 f80c 	bl	8004eec <HAL_I2C_Master_Transmit>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	9200      	str	r2, [sp, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	21d0      	movs	r1, #208	; 0xd0
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f002 f8ff 	bl	80050e8 <HAL_I2C_Master_Receive>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b088      	sub	sp, #32
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	460b      	mov	r3, r1
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f0a:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002f10:	f107 0214 	add.w	r2, r7, #20
 8002f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	21d0      	movs	r1, #208	; 0xd0
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f001 ffe4 	bl	8004eec <HAL_I2C_Master_Transmit>
 8002f24:	4603      	mov	r3, r0
 8002f26:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 8002f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	21d0      	movs	r1, #208	; 0xd0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f002 f8d7 	bl	80050e8 <HAL_I2C_Master_Receive>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
 8002f52:	4613      	mov	r3, r2
 8002f54:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5c:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	733b      	strb	r3, [r7, #12]
 8002f62:	78bb      	ldrb	r3, [r7, #2]
 8002f64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2302      	movs	r3, #2
 8002f72:	21d0      	movs	r1, #208	; 0xd0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 ffb9 	bl	8004eec <HAL_I2C_Master_Transmit>
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	70fb      	strb	r3, [r7, #3]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8002f92:	2230      	movs	r2, #48	; 0x30
 8002f94:	217f      	movs	r1, #127	; 0x7f
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffd5 	bl	8002f46 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f001 f991 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	2103      	movs	r1, #3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffcd 	bl	8002f46 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f001 f989 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ffc4 	bl	8002f46 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f001 f980 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8002fc4:	78bb      	ldrb	r3, [r7, #2]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2106      	movs	r1, #6
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ffbb 	bl	8002f46 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f001 f977 	bl	80042c4 <HAL_Delay>
  }
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8002fea:	2230      	movs	r2, #48	; 0x30
 8002fec:	217f      	movs	r1, #127	; 0x7f
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa9 	bl	8002f46 <ICM_WriteOneByte>
    HAL_Delay(1);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f001 f965 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 8002ffa:	228c      	movs	r2, #140	; 0x8c
 8002ffc:	2103      	movs	r1, #3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffa1 	bl	8002f46 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003004:	2001      	movs	r0, #1
 8003006:	f001 f95d 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	461a      	mov	r2, r3
 800300e:	2104      	movs	r1, #4
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff98 	bl	8002f46 <ICM_WriteOneByte>
    HAL_Delay(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f001 f954 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	2106      	movs	r1, #6
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff90 	bl	8002f46 <ICM_WriteOneByte>
  	HAL_Delay(1);
 8003026:	2001      	movs	r0, #1
 8003028:	f001 f94c 	bl	80042c4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 800302c:	2200      	movs	r2, #0
 800302e:	217f      	movs	r1, #127	; 0x7f
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff88 	bl	8002f46 <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 8003036:	f107 030f 	add.w	r3, r7, #15
 800303a:	461a      	mov	r2, r3
 800303c:	213b      	movs	r1, #59	; 0x3b
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff59 	bl	8002ef6 <ICM_ReadOneByte>
    HAL_Delay(1);
 8003044:	2001      	movs	r0, #1
 8003046:	f001 f93d 	bl	80042c4 <HAL_Delay>
  	return Data;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
  }
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 800305e:	2101      	movs	r1, #1
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ffbc 	bl	8002fde <ICM_Mag_Read>
 8003066:	4603      	mov	r3, r0
 8003068:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 800306a:	2111      	movs	r1, #17
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ffb6 	bl	8002fde <ICM_Mag_Read>
 8003072:	4603      	mov	r3, r0
 8003074:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 8003076:	2112      	movs	r1, #18
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffb0 	bl	8002fde <ICM_Mag_Read>
 800307e:	4603      	mov	r3, r0
 8003080:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	b21a      	sxth	r2, r3
 8003086:	7bbb      	ldrb	r3, [r7, #14]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	b21b      	sxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b21a      	sxth	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 8003094:	2113      	movs	r1, #19
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa1 	bl	8002fde <ICM_Mag_Read>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 80030a0:	2114      	movs	r1, #20
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ff9b 	bl	8002fde <ICM_Mag_Read>
 80030a8:	4603      	mov	r3, r0
 80030aa:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	b219      	sxth	r1, r3
 80030b0:	7c3b      	ldrb	r3, [r7, #16]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3302      	adds	r3, #2
 80030ba:	430a      	orrs	r2, r1
 80030bc:	b212      	sxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 80030c0:	2115      	movs	r1, #21
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff8b 	bl	8002fde <ICM_Mag_Read>
 80030c8:	4603      	mov	r3, r0
 80030ca:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 80030cc:	2116      	movs	r1, #22
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff85 	bl	8002fde <ICM_Mag_Read>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 80030d8:	7c7b      	ldrb	r3, [r7, #17]
 80030da:	b219      	sxth	r1, r3
 80030dc:	7cbb      	ldrb	r3, [r7, #18]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	b21a      	sxth	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	3304      	adds	r3, #4
 80030e6:	430a      	orrs	r2, r1
 80030e8:	b212      	sxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2131      	movs	r1, #49	; 0x31
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff46 	bl	8002f82 <i2c_Mag_write>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
	// uint8_t test = ICM_WHOAMI(hi2c);
	HAL_Delay(10);
 8003106:	200a      	movs	r0, #10
 8003108:	f001 f8dc 	bl	80042c4 <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 800310c:	2100      	movs	r1, #0
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f970 	bl	80033f4 <ICM_SelectBank>
	HAL_Delay(10);
 8003114:	200a      	movs	r0, #10
 8003116:	f001 f8d5 	bl	80042c4 <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f97a 	bl	8003414 <ICM_Enable_I2C>
	HAL_Delay(10);
 8003120:	200a      	movs	r0, #10
 8003122:	f001 f8cf 	bl	80042c4 <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8003126:	2101      	movs	r1, #1
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f980 	bl	800342e <ICM_SetClock>
	HAL_Delay(10);
 800312e:	200a      	movs	r0, #10
 8003130:	f001 f8c8 	bl	80042c4 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f98a 	bl	800344e <ICM_AccelGyroOff>
	HAL_Delay(20);
 800313a:	2014      	movs	r0, #20
 800313c:	f001 f8c2 	bl	80042c4 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f991 	bl	8003468 <ICM_AccelGyroOn>
	HAL_Delay(10);
 8003146:	200a      	movs	r0, #10
 8003148:	f001 f8bc 	bl	80042c4 <HAL_Delay>
	ICM_Initialize(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f804 	bl	800315a <ICM_Initialize>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 8003162:	2120      	movs	r1, #32
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f945 	bl	80033f4 <ICM_SelectBank>
	HAL_Delay(20);
 800316a:	2014      	movs	r0, #20
 800316c:	f001 f8aa 	bl	80042c4 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8003170:	2229      	movs	r2, #41	; 0x29
 8003172:	2100      	movs	r1, #0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f984 	bl	8003482 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 800317a:	200a      	movs	r0, #10
 800317c:	f001 f8a2 	bl	80042c4 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8003180:	220a      	movs	r2, #10
 8003182:	2100      	movs	r1, #0
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fede 	bl	8002f46 <ICM_WriteOneByte>
	HAL_Delay(10);
 800318a:	200a      	movs	r0, #10
 800318c:	f001 f89a 	bl	80042c4 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8003190:	2215      	movs	r2, #21
 8003192:	2114      	movs	r1, #20
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fed6 	bl	8002f46 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 800319a:	2200      	movs	r2, #0
 800319c:	2110      	movs	r1, #16
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fed1 	bl	8002f46 <ICM_WriteOneByte>
	HAL_Delay(10);
 80031a4:	200a      	movs	r0, #10
 80031a6:	f001 f88d 	bl	80042c4 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 80031aa:	220a      	movs	r2, #10
 80031ac:	2111      	movs	r1, #17
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fec9 	bl	8002f46 <ICM_WriteOneByte>
	HAL_Delay(10);
 80031b4:	200a      	movs	r0, #10
 80031b6:	f001 f885 	bl	80042c4 <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 80031ba:	2120      	movs	r1, #32
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f919 	bl	80033f4 <ICM_SelectBank>
	HAL_Delay(20);
 80031c2:	2014      	movs	r0, #20
 80031c4:	f001 f87e 	bl	80042c4 <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 80031c8:	2200      	movs	r2, #0
 80031ca:	217f      	movs	r1, #127	; 0x7f
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff feba 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80031d2:	2230      	movs	r2, #48	; 0x30
 80031d4:	210f      	movs	r1, #15
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff feb5 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 80031dc:	2220      	movs	r2, #32
 80031de:	2103      	movs	r1, #3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff feb0 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 80031e6:	2230      	movs	r2, #48	; 0x30
 80031e8:	217f      	movs	r1, #127	; 0x7f
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff feab 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80031f0:	224d      	movs	r2, #77	; 0x4d
 80031f2:	2101      	movs	r1, #1
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fea6 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80031fa:	2201      	movs	r2, #1
 80031fc:	2102      	movs	r1, #2
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fea1 	bl	8002f46 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8003204:	2281      	movs	r2, #129	; 0x81
 8003206:	2105      	movs	r1, #5
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe9c 	bl	8002f46 <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 800320e:	2201      	movs	r2, #1
 8003210:	2132      	movs	r1, #50	; 0x32
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff feb5 	bl	8002f82 <i2c_Mag_write>
	HAL_Delay(1000);
 8003218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800321c:	f001 f852 	bl	80042c4 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8003220:	2202      	movs	r2, #2
 8003222:	2131      	movs	r1, #49	; 0x31
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff feac 	bl	8002f82 <i2c_Mag_write>

	return 1337;
 800322a:	f240 5339 	movw	r3, #1337	; 0x539
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 8003240:	f107 020c 	add.w	r2, r7, #12
 8003244:	230c      	movs	r3, #12
 8003246:	212d      	movs	r1, #45	; 0x2d
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fe29 	bl	8002ea0 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 800324e:	7b3b      	ldrb	r3, [r7, #12]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	b21a      	sxth	r2, r3
 8003254:	7b7b      	ldrb	r3, [r7, #13]
 8003256:	b21b      	sxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b21b      	sxth	r3, r3
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b32      	ldr	r3, [pc, #200]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 8003260:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8003262:	7bbb      	ldrb	r3, [r7, #14]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b21a      	sxth	r2, r3
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	b21b      	sxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b21b      	sxth	r3, r3
 8003270:	b29a      	uxth	r2, r3
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 8003274:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8003276:	7c3b      	ldrb	r3, [r7, #16]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	b21a      	sxth	r2, r3
 800327c:	7c7b      	ldrb	r3, [r7, #17]
 800327e:	b21b      	sxth	r3, r3
 8003280:	4313      	orrs	r3, r2
 8003282:	b21b      	sxth	r3, r3
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 8003288:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800328a:	7cbb      	ldrb	r3, [r7, #18]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	b21a      	sxth	r2, r3
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	b21b      	sxth	r3, r3
 8003294:	4313      	orrs	r3, r2
 8003296:	b21b      	sxth	r3, r3
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 800329c:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800329e:	7d3b      	ldrb	r3, [r7, #20]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	7d7b      	ldrb	r3, [r7, #21]
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 80032b0:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 80032b2:	7dbb      	ldrb	r3, [r7, #22]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	b21a      	sxth	r2, r3
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	b21b      	sxth	r3, r3
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 80032c4:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	08db      	lsrs	r3, r3, #3
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032d0:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032d4:	885b      	ldrh	r3, [r3, #2]
 80032d6:	08db      	lsrs	r3, r3, #3
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032dc:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032e0:	889b      	ldrh	r3, [r3, #4]
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <ICM_ReadAccelGyro+0xf0>)
 80032e8:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <ICM_ReadAccelGyro+0xf8>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 80032fa:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 80032fe:	885b      	ldrh	r3, [r3, #2]
 8003300:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <ICM_ReadAccelGyro+0xf8>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 800330c:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 8003310:	889b      	ldrh	r3, [r3, #4]
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <ICM_ReadAccelGyro+0xf8>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <ICM_ReadAccelGyro+0xf4>)
 800331e:	809a      	strh	r2, [r3, #4]
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200000c0 	.word	0x200000c0
 800332c:	200000c8 	.word	0x200000c8
 8003330:	10624dd3 	.word	0x10624dd3

08003334 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<GYRO_RATE_250)));
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <ICM_CorrectAccelGyro+0xb0>)
 8003346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334a:	b29b      	uxth	r3, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <ICM_CorrectAccelGyro+0xb4>)
 8003352:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<GYRO_RATE_250)));
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3302      	adds	r3, #2
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <ICM_CorrectAccelGyro+0xb0>)
 800335c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29a      	uxth	r2, r3
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <ICM_CorrectAccelGyro+0xb4>)
 8003368:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<GYRO_RATE_250)));
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3304      	adds	r3, #4
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <ICM_CorrectAccelGyro+0xb0>)
 8003372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003376:	b29b      	uxth	r3, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <ICM_CorrectAccelGyro+0xb4>)
 800337e:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<0x04)));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <ICM_CorrectAccelGyro+0xb8>)
 8003386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338a:	2b00      	cmp	r3, #0
 800338c:	da00      	bge.n	8003390 <ICM_CorrectAccelGyro+0x5c>
 800338e:	330f      	adds	r3, #15
 8003390:	111b      	asrs	r3, r3, #4
 8003392:	b21b      	sxth	r3, r3
 8003394:	b29b      	uxth	r3, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <ICM_CorrectAccelGyro+0xbc>)
 800339c:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<0x04)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <ICM_CorrectAccelGyro+0xb8>)
 80033a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da00      	bge.n	80033ae <ICM_CorrectAccelGyro+0x7a>
 80033ac:	330f      	adds	r3, #15
 80033ae:	111b      	asrs	r3, r3, #4
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <ICM_CorrectAccelGyro+0xbc>)
 80033ba:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<0x04)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <ICM_CorrectAccelGyro+0xb8>)
 80033c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da00      	bge.n	80033cc <ICM_CorrectAccelGyro+0x98>
 80033ca:	330f      	adds	r3, #15
 80033cc:	111b      	asrs	r3, r3, #4
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <ICM_CorrectAccelGyro+0xbc>)
 80033d8:	809a      	strh	r2, [r3, #4]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	200000e4 	.word	0x200000e4
 80033e8:	200000b8 	.word	0x200000b8
 80033ec:	200000ec 	.word	0x200000ec
 80033f0:	200000b0 	.word	0x200000b0

080033f4 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	461a      	mov	r2, r3
 8003404:	217f      	movs	r1, #127	; 0x7f
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fd9d 	bl	8002f46 <ICM_WriteOneByte>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 800341c:	2220      	movs	r2, #32
 800341e:	2103      	movs	r1, #3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fd90 	bl	8002f46 <ICM_WriteOneByte>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	461a      	mov	r2, r3
 800343e:	2106      	movs	r1, #6
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fd80 	bl	8002f46 <ICM_WriteOneByte>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 8003456:	223f      	movs	r2, #63	; 0x3f
 8003458:	2107      	movs	r1, #7
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff fd73 	bl	8002f46 <ICM_WriteOneByte>
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8003470:	2200      	movs	r2, #0
 8003472:	2107      	movs	r1, #7
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fd66 	bl	8002f46 <ICM_WriteOneByte>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
 800348e:	4613      	mov	r3, r2
 8003490:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	78bb      	ldrb	r3, [r7, #2]
 8003496:	4313      	orrs	r3, r2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	2101      	movs	r1, #1
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fd51 	bl	8002f46 <ICM_WriteOneByte>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e029      	b.n	800350e <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff febc 	bl	8003238 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 80034c0:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <ICM20948_Calibrate+0x18c>)
 80034c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	4b5c      	ldr	r3, [pc, #368]	; (800363c <ICM20948_Calibrate+0x190>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21a      	sxth	r2, r3
 80034d2:	4b59      	ldr	r3, [pc, #356]	; (8003638 <ICM20948_Calibrate+0x18c>)
 80034d4:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 80034d6:	4b58      	ldr	r3, [pc, #352]	; (8003638 <ICM20948_Calibrate+0x18c>)
 80034d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <ICM20948_Calibrate+0x190>)
 80034e0:	885b      	ldrh	r3, [r3, #2]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b21a      	sxth	r2, r3
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <ICM20948_Calibrate+0x18c>)
 80034ea:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80034ec:	4b52      	ldr	r3, [pc, #328]	; (8003638 <ICM20948_Calibrate+0x18c>)
 80034ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	4b51      	ldr	r3, [pc, #324]	; (800363c <ICM20948_Calibrate+0x190>)
 80034f6:	889b      	ldrh	r3, [r3, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	4b4e      	ldr	r3, [pc, #312]	; (8003638 <ICM20948_Calibrate+0x18c>)
 8003500:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8003502:	200a      	movs	r0, #10
 8003504:	f000 fede 	bl	80042c4 <HAL_Delay>
	for(int i=0; i<50; i++){
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3301      	adds	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b31      	cmp	r3, #49	; 0x31
 8003512:	ddd2      	ble.n	80034ba <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 8003514:	4b48      	ldr	r3, [pc, #288]	; (8003638 <ICM20948_Calibrate+0x18c>)
 8003516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351a:	4a49      	ldr	r2, [pc, #292]	; (8003640 <ICM20948_Calibrate+0x194>)
 800351c:	fb82 1203 	smull	r1, r2, r2, r3
 8003520:	1112      	asrs	r2, r2, #4
 8003522:	17db      	asrs	r3, r3, #31
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b21a      	sxth	r2, r3
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <ICM20948_Calibrate+0x18c>)
 800352a:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 800352c:	4b42      	ldr	r3, [pc, #264]	; (8003638 <ICM20948_Calibrate+0x18c>)
 800352e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003532:	4a43      	ldr	r2, [pc, #268]	; (8003640 <ICM20948_Calibrate+0x194>)
 8003534:	fb82 1203 	smull	r1, r2, r2, r3
 8003538:	1112      	asrs	r2, r2, #4
 800353a:	17db      	asrs	r3, r3, #31
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b21a      	sxth	r2, r3
 8003540:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <ICM20948_Calibrate+0x18c>)
 8003542:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 8003544:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <ICM20948_Calibrate+0x18c>)
 8003546:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800354a:	4a3d      	ldr	r2, [pc, #244]	; (8003640 <ICM20948_Calibrate+0x194>)
 800354c:	fb82 1203 	smull	r1, r2, r2, r3
 8003550:	1112      	asrs	r2, r2, #4
 8003552:	17db      	asrs	r3, r3, #31
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b37      	ldr	r3, [pc, #220]	; (8003638 <ICM20948_Calibrate+0x18c>)
 800355a:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 16384.0; // 16384 LSB/g
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <ICM20948_Calibrate+0x18c>)
 800355e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc ff4c 	bl	8000400 <__aeabi_i2d>
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	4b35      	ldr	r3, [pc, #212]	; (8003644 <ICM20948_Calibrate+0x198>)
 800356e:	f7fc fdf9 	bl	8000164 <__aeabi_dsub>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f7fd fa5b 	bl	8000a34 <__aeabi_d2iz>
 800357e:	4603      	mov	r3, r0
 8003580:	b21a      	sxth	r2, r3
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <ICM20948_Calibrate+0x18c>)
 8003584:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	e029      	b.n	80035e0 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fe53 	bl	8003238 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <ICM20948_Calibrate+0x19c>)
 8003594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003598:	b29a      	uxth	r2, r3
 800359a:	4b2c      	ldr	r3, [pc, #176]	; (800364c <ICM20948_Calibrate+0x1a0>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	4b28      	ldr	r3, [pc, #160]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035a6:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <ICM20948_Calibrate+0x1a0>)
 80035b2:	885b      	ldrh	r3, [r3, #2]
 80035b4:	4413      	add	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b21a      	sxth	r2, r3
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035bc:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <ICM20948_Calibrate+0x1a0>)
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035d2:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f000 fe75 	bl	80042c4 <HAL_Delay>
	for(int i=0; i<50; i++){
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3301      	adds	r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b31      	cmp	r3, #49	; 0x31
 80035e4:	ddd2      	ble.n	800358c <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <ICM20948_Calibrate+0x194>)
 80035ee:	fb82 1203 	smull	r1, r2, r2, r3
 80035f2:	1112      	asrs	r2, r2, #4
 80035f4:	17db      	asrs	r3, r3, #31
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	b21a      	sxth	r2, r3
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <ICM20948_Calibrate+0x19c>)
 80035fc:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <ICM20948_Calibrate+0x19c>)
 8003600:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <ICM20948_Calibrate+0x194>)
 8003606:	fb82 1203 	smull	r1, r2, r2, r3
 800360a:	1112      	asrs	r2, r2, #4
 800360c:	17db      	asrs	r3, r3, #31
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b21a      	sxth	r2, r3
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <ICM20948_Calibrate+0x19c>)
 8003614:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <ICM20948_Calibrate+0x19c>)
 8003618:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <ICM20948_Calibrate+0x194>)
 800361e:	fb82 1203 	smull	r1, r2, r2, r3
 8003622:	1112      	asrs	r2, r2, #4
 8003624:	17db      	asrs	r3, r3, #31
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b21a      	sxth	r2, r3
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <ICM20948_Calibrate+0x19c>)
 800362c:	809a      	strh	r2, [r3, #4]
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200000e4 	.word	0x200000e4
 800363c:	200000c0 	.word	0x200000c0
 8003640:	51eb851f 	.word	0x51eb851f
 8003644:	40d00000 	.word	0x40d00000
 8003648:	200000ec 	.word	0x200000ec
 800364c:	200000c8 	.word	0x200000c8

08003650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003654:	b0c0      	sub	sp, #256	; 0x100
 8003656:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003658:	f000 fdd2 	bl	8004200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800365c:	f000 f90e 	bl	800387c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003660:	f000 fadc 	bl	8003c1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003664:	f000 fab0 	bl	8003bc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003668:	f000 f99c 	bl	80039a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800366c:	f000 f9c8 	bl	8003a00 <MX_I2C2_Init>
  MX_ADC1_Init();
 8003670:	f000 f95a 	bl	8003928 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003674:	f000 f9f2 	bl	8003a5c <MX_SPI2_Init>
  MX_TIM2_Init();
 8003678:	f000 fa26 	bl	8003ac8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800367c:	2100      	movs	r1, #0
 800367e:	4876      	ldr	r0, [pc, #472]	; (8003858 <main+0x208>)
 8003680:	f7ff feb8 	bl	80033f4 <ICM_SelectBank>
  HAL_Delay(10);
 8003684:	200a      	movs	r0, #10
 8003686:	f000 fe1d 	bl	80042c4 <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 800368a:	4873      	ldr	r0, [pc, #460]	; (8003858 <main+0x208>)
 800368c:	f7ff fd37 	bl	80030fe <ICM_PowerOn>
  HAL_Delay(10);
 8003690:	200a      	movs	r0, #10
 8003692:	f000 fe17 	bl	80042c4 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8003696:	4870      	ldr	r0, [pc, #448]	; (8003858 <main+0x208>)
 8003698:	f7ff ff08 	bl	80034ac <ICM20948_Calibrate>
  HAL_Delay(10);
 800369c:	200a      	movs	r0, #10
 800369e:	f000 fe11 	bl	80042c4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80036a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a6:	486d      	ldr	r0, [pc, #436]	; (800385c <main+0x20c>)
 80036a8:	f001 fac2 	bl	8004c30 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 80036ac:	2019      	movs	r0, #25
 80036ae:	f000 fe09 	bl	80042c4 <HAL_Delay>
//	  sprintf(MSG, "should be 0xEA: %d\r\n", who_am_i);
//	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
//	  HAL_Delay(10);

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 80036b2:	2100      	movs	r1, #0
 80036b4:	4868      	ldr	r0, [pc, #416]	; (8003858 <main+0x208>)
 80036b6:	f7ff fe9d 	bl	80033f4 <ICM_SelectBank>
	  HAL_Delay(10);
 80036ba:	200a      	movs	r0, #10
 80036bc:	f000 fe02 	bl	80042c4 <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 80036c0:	4865      	ldr	r0, [pc, #404]	; (8003858 <main+0x208>)
 80036c2:	f7ff fdb9 	bl	8003238 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4863      	ldr	r0, [pc, #396]	; (8003858 <main+0x208>)
 80036cc:	f7ff fcc2 	bl	8003054 <ICM_ReadMag>
	  sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u) \n"
			"(Gx: %u | Gy: %u | Gz: %u) \n"
			"(Mx: %i | My: %i | Mz: %i) \n"
			" \r\n",
			accel_data[0], accel_data[1], accel_data[2],
 80036d0:	4b63      	ldr	r3, [pc, #396]	; (8003860 <main+0x210>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 80036d4:	469c      	mov	ip, r3
			accel_data[0], accel_data[1], accel_data[2],
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <main+0x210>)
 80036d8:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 80036da:	469e      	mov	lr, r3
			accel_data[0], accel_data[1], accel_data[2],
 80036dc:	4b60      	ldr	r3, [pc, #384]	; (8003860 <main+0x210>)
 80036de:	889b      	ldrh	r3, [r3, #4]
	  sprintf(uart_buffer,
 80036e0:	461a      	mov	r2, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <main+0x214>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 80036e6:	4619      	mov	r1, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80036e8:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <main+0x214>)
 80036ea:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 80036ec:	461c      	mov	r4, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <main+0x214>)
 80036f0:	889b      	ldrh	r3, [r3, #4]
			mag_data[0], mag_data[1], mag_data[2]);
 80036f2:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
	  sprintf(uart_buffer,
 80036f6:	4605      	mov	r5, r0
			mag_data[0], mag_data[1], mag_data[2]);
 80036f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
	  sprintf(uart_buffer,
 80036fc:	4606      	mov	r6, r0
			mag_data[0], mag_data[1], mag_data[2]);
 80036fe:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
	  sprintf(uart_buffer,
 8003702:	f107 080c 	add.w	r8, r7, #12
 8003706:	9006      	str	r0, [sp, #24]
 8003708:	9605      	str	r6, [sp, #20]
 800370a:	9504      	str	r5, [sp, #16]
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	9402      	str	r4, [sp, #8]
 8003710:	9101      	str	r1, [sp, #4]
 8003712:	9200      	str	r2, [sp, #0]
 8003714:	4673      	mov	r3, lr
 8003716:	4662      	mov	r2, ip
 8003718:	4953      	ldr	r1, [pc, #332]	; (8003868 <main+0x218>)
 800371a:	4640      	mov	r0, r8
 800371c:	f003 feb6 	bl	800748c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc fd11 	bl	800014c <strlen>
 800372a:	4603      	mov	r3, r0
 800372c:	b29a      	uxth	r2, r3
 800372e:	f107 010c 	add.w	r1, r7, #12
 8003732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003736:	484d      	ldr	r0, [pc, #308]	; (800386c <main+0x21c>)
 8003738:	f003 fd0b 	bl	8007152 <HAL_UART_Transmit>
	  HAL_Delay(5);
 800373c:	2005      	movs	r0, #5
 800373e:	f000 fdc1 	bl	80042c4 <HAL_Delay>


	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003742:	4a48      	ldr	r2, [pc, #288]	; (8003864 <main+0x214>)
 8003744:	4946      	ldr	r1, [pc, #280]	; (8003860 <main+0x210>)
 8003746:	4844      	ldr	r0, [pc, #272]	; (8003858 <main+0x208>)
 8003748:	f7ff fdf4 	bl	8003334 <ICM_CorrectAccelGyro>
	  sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u) \n"
			"(Gx: %u | Gy: %u | Gz: %u) \n"
			"(Mx: %i | My: %i | Mz: %i) \n"
			" \r\n",
			corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <main+0x220>)
 800374e:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 8003750:	469c      	mov	ip, r3
			corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <main+0x220>)
 8003754:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 8003756:	469e      	mov	lr, r3
			corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003758:	4b45      	ldr	r3, [pc, #276]	; (8003870 <main+0x220>)
 800375a:	889b      	ldrh	r3, [r3, #4]
	  sprintf(uart_buffer,
 800375c:	461a      	mov	r2, r3
			corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800375e:	4b45      	ldr	r3, [pc, #276]	; (8003874 <main+0x224>)
 8003760:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 8003762:	4619      	mov	r1, r3
			corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <main+0x224>)
 8003766:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 8003768:	461c      	mov	r4, r3
			corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800376a:	4b42      	ldr	r3, [pc, #264]	; (8003874 <main+0x224>)
 800376c:	889b      	ldrh	r3, [r3, #4]
			mag_data[0], mag_data[1], mag_data[2]);
 800376e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
	  sprintf(uart_buffer,
 8003772:	4605      	mov	r5, r0
			mag_data[0], mag_data[1], mag_data[2]);
 8003774:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
	  sprintf(uart_buffer,
 8003778:	4606      	mov	r6, r0
			mag_data[0], mag_data[1], mag_data[2]);
 800377a:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
	  sprintf(uart_buffer,
 800377e:	f107 080c 	add.w	r8, r7, #12
 8003782:	9006      	str	r0, [sp, #24]
 8003784:	9605      	str	r6, [sp, #20]
 8003786:	9504      	str	r5, [sp, #16]
 8003788:	9303      	str	r3, [sp, #12]
 800378a:	9402      	str	r4, [sp, #8]
 800378c:	9101      	str	r1, [sp, #4]
 800378e:	9200      	str	r2, [sp, #0]
 8003790:	4673      	mov	r3, lr
 8003792:	4662      	mov	r2, ip
 8003794:	4934      	ldr	r1, [pc, #208]	; (8003868 <main+0x218>)
 8003796:	4640      	mov	r0, r8
 8003798:	f003 fe78 	bl	800748c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc fcd3 	bl	800014c <strlen>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f107 010c 	add.w	r1, r7, #12
 80037ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b2:	482e      	ldr	r0, [pc, #184]	; (800386c <main+0x21c>)
 80037b4:	f003 fccd 	bl	8007152 <HAL_UART_Transmit>
	  HAL_Delay(5);
 80037b8:	2005      	movs	r0, #5
 80037ba:	f000 fd83 	bl	80042c4 <HAL_Delay>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037be:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <main+0x224>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461d      	mov	r5, r3
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <main+0x224>)
 80037c6:	885b      	ldrh	r3, [r3, #2]
 80037c8:	461e      	mov	r6, r3
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <main+0x224>)
 80037cc:	889b      	ldrh	r3, [r3, #4]
 80037ce:	469c      	mov	ip, r3
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <main+0x220>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037d4:	469e      	mov	lr, r3
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <main+0x220>)
 80037d8:	885b      	ldrh	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037da:	461a      	mov	r2, r3
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80037dc:	4b24      	ldr	r3, [pc, #144]	; (8003870 <main+0x220>)
 80037de:	889b      	ldrh	r3, [r3, #4]
						 mag_data[0], mag_data[1], mag_data[2]);
 80037e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80037e4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80037e8:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037ec:	9404      	str	r4, [sp, #16]
 80037ee:	9003      	str	r0, [sp, #12]
 80037f0:	9102      	str	r1, [sp, #8]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	4673      	mov	r3, lr
 80037f8:	4662      	mov	r2, ip
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	f7fd fc6b 	bl	80010d8 <MadgwickAHRSupdate>

	  uint32_t roll = getRoll();
 8003802:	f7ff fae7 	bl	8002dd4 <getRoll>
 8003806:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	  uint32_t pitch = getPitch();
 800380a:	f7ff fb03 	bl	8002e14 <getPitch>
 800380e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	  uint32_t heading = getYaw();
 8003812:	f7ff fb1f 	bl	8002e54 <getYaw>
 8003816:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	  // Print corrected axis data values to screen
	  	  sprintf(uart_buffer,
 800381a:	f107 000c 	add.w	r0, r7, #12
 800381e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003828:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800382c:	4912      	ldr	r1, [pc, #72]	; (8003878 <main+0x228>)
 800382e:	f003 fe2d 	bl	800748c <siprintf>
	  			"roll: %u, pitch: %u, heading: %u \r\n",
				roll, pitch, heading);
	  	  HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8003832:	f107 030c 	add.w	r3, r7, #12
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fc88 	bl	800014c <strlen>
 800383c:	4603      	mov	r3, r0
 800383e:	b29a      	uxth	r2, r3
 8003840:	f107 010c 	add.w	r1, r7, #12
 8003844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003848:	4808      	ldr	r0, [pc, #32]	; (800386c <main+0x21c>)
 800384a:	f003 fc82 	bl	8007152 <HAL_UART_Transmit>
	  	  HAL_Delay(5);
 800384e:	2005      	movs	r0, #5
 8003850:	f000 fd38 	bl	80042c4 <HAL_Delay>
  {
 8003854:	e725      	b.n	80036a2 <main+0x52>
 8003856:	bf00      	nop
 8003858:	200001a0 	.word	0x200001a0
 800385c:	40011000 	.word	0x40011000
 8003860:	200000c0 	.word	0x200000c0
 8003864:	200000c8 	.word	0x200000c8
 8003868:	08008578 	.word	0x08008578
 800386c:	2000026c 	.word	0x2000026c
 8003870:	200000b8 	.word	0x200000b8
 8003874:	200000b0 	.word	0x200000b0
 8003878:	080085d0 	.word	0x080085d0

0800387c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b094      	sub	sp, #80	; 0x50
 8003880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003886:	2228      	movs	r2, #40	; 0x28
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fdf6 	bl	800747c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038ac:	2302      	movs	r3, #2
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038b0:	2301      	movs	r3, #1
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038b4:	2310      	movs	r3, #16
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b8:	2302      	movs	r3, #2
 80038ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80038bc:	2300      	movs	r3, #0
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80038c0:	2300      	movs	r3, #0
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 f999 	bl	8005c00 <HAL_RCC_OscConfig>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80038d4:	f000 fa38 	bl	8003d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038d8:	230f      	movs	r3, #15
 80038da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038dc:	2302      	movs	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 fc03 	bl	8006100 <HAL_RCC_ClockConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003900:	f000 fa22 	bl	8003d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003904:	2302      	movs	r3, #2
 8003906:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fd90 	bl	8006434 <HAL_RCCEx_PeriphCLKConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800391a:	f000 fa15 	bl	8003d48 <Error_Handler>
  }
}
 800391e:	bf00      	nop
 8003920:	3750      	adds	r7, #80	; 0x50
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <MX_ADC1_Init+0x74>)
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <MX_ADC1_Init+0x78>)
 800393c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800393e:	4b17      	ldr	r3, [pc, #92]	; (800399c <MX_ADC1_Init+0x74>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <MX_ADC1_Init+0x74>)
 8003946:	2200      	movs	r2, #0
 8003948:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <MX_ADC1_Init+0x74>)
 800394c:	2200      	movs	r2, #0
 800394e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <MX_ADC1_Init+0x74>)
 8003952:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <MX_ADC1_Init+0x74>)
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MX_ADC1_Init+0x74>)
 8003960:	2201      	movs	r2, #1
 8003962:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003964:	480d      	ldr	r0, [pc, #52]	; (800399c <MX_ADC1_Init+0x74>)
 8003966:	f000 fcd1 	bl	800430c <HAL_ADC_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003970:	f000 f9ea 	bl	8003d48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003974:	2304      	movs	r3, #4
 8003976:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003978:	2301      	movs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	4619      	mov	r1, r3
 8003984:	4805      	ldr	r0, [pc, #20]	; (800399c <MX_ADC1_Init+0x74>)
 8003986:	f000 fd99 	bl	80044bc <HAL_ADC_ConfigChannel>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003990:	f000 f9da 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200001f4 	.word	0x200001f4
 80039a0:	40012400 	.word	0x40012400

080039a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039aa:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <MX_I2C1_Init+0x54>)
 80039ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <MX_I2C1_Init+0x58>)
 80039b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039bc:	2200      	movs	r2, #0
 80039be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039e0:	4804      	ldr	r0, [pc, #16]	; (80039f4 <MX_I2C1_Init+0x50>)
 80039e2:	f001 f93f 	bl	8004c64 <HAL_I2C_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039ec:	f000 f9ac 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000014c 	.word	0x2000014c
 80039f8:	40005400 	.word	0x40005400
 80039fc:	000186a0 	.word	0x000186a0

08003a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <MX_I2C2_Init+0x54>)
 8003a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a0c:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <MX_I2C2_Init+0x58>)
 8003a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 208;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a18:	22d0      	movs	r2, #208	; 0xd0
 8003a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a3c:	4804      	ldr	r0, [pc, #16]	; (8003a50 <MX_I2C2_Init+0x50>)
 8003a3e:	f001 f911 	bl	8004c64 <HAL_I2C_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a48:	f000 f97e 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200001a0 	.word	0x200001a0
 8003a54:	40005800 	.word	0x40005800
 8003a58:	00061a80 	.word	0x00061a80

08003a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <MX_SPI2_Init+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a86:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003aa8:	220a      	movs	r2, #10
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <MX_SPI2_Init+0x64>)
 8003aae:	f002 fd77 	bl	80065a0 <HAL_SPI_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ab8:	f000 f946 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200000f4 	.word	0x200000f4
 8003ac4:	40003800 	.word	0x40003800

08003ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08e      	sub	sp, #56	; 0x38
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003adc:	f107 0320 	add.w	r3, r7, #32
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	615a      	str	r2, [r3, #20]
 8003af6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003af8:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b00:	4b30      	ldr	r3, [pc, #192]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b14:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b20:	4828      	ldr	r0, [pc, #160]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b22:	f002 fdc1 	bl	80066a8 <HAL_TIM_Base_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b2c:	f000 f90c 	bl	8003d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4821      	ldr	r0, [pc, #132]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b3e:	f002 ff19 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b48:	f000 f8fe 	bl	8003d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b4c:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b4e:	f002 fdfa 	bl	8006746 <HAL_TIM_PWM_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003b58:	f000 f8f6 	bl	8003d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b64:	f107 0320 	add.w	r3, r7, #32
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4816      	ldr	r0, [pc, #88]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b6c:	f003 fa46 	bl	8006ffc <HAL_TIMEx_MasterConfigSynchronization>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003b76:	f000 f8e7 	bl	8003d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b7a:	2360      	movs	r3, #96	; 0x60
 8003b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b8a:	1d3b      	adds	r3, r7, #4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003b92:	f002 fe31 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003b9c:	f000 f8d4 	bl	8003d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003ba8:	f002 fe26 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003bb2:	f000 f8c9 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003bb6:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <MX_TIM2_Init+0xfc>)
 8003bb8:	f000 fa1e 	bl	8003ff8 <HAL_TIM_MspPostInit>

}
 8003bbc:	bf00      	nop
 8003bbe:	3738      	adds	r7, #56	; 0x38
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000224 	.word	0x20000224

08003bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <MX_USART2_UART_Init+0x50>)
 8003bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bee:	220c      	movs	r2, #12
 8003bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bfe:	4805      	ldr	r0, [pc, #20]	; (8003c14 <MX_USART2_UART_Init+0x4c>)
 8003c00:	f003 fa5a 	bl	80070b8 <HAL_UART_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c0a:	f000 f89d 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2000026c 	.word	0x2000026c
 8003c18:	40004400 	.word	0x40004400

08003c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c22:	f107 0310 	add.w	r3, r7, #16
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c30:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	6193      	str	r3, [r2, #24]
 8003c3c:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	6193      	str	r3, [r2, #24]
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6193      	str	r3, [r2, #24]
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <MX_GPIO_Init+0x118>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c96:	4828      	ldr	r0, [pc, #160]	; (8003d38 <MX_GPIO_Init+0x11c>)
 8003c98:	f000 ffb2 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2158      	movs	r1, #88	; 0x58
 8003ca0:	4826      	ldr	r0, [pc, #152]	; (8003d3c <MX_GPIO_Init+0x120>)
 8003ca2:	f000 ffad 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	481e      	ldr	r0, [pc, #120]	; (8003d38 <MX_GPIO_Init+0x11c>)
 8003cc0:	f000 fe1a 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin FRONT_TRIG_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|FRONT_TRIG_Pin|FRONT_ECHO_Pin;
 8003cc4:	23e0      	movs	r3, #224	; 0xe0
 8003cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	481a      	ldr	r0, [pc, #104]	; (8003d40 <MX_GPIO_Init+0x124>)
 8003cd8:	f000 fe0e 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|SIDE_TRIG_Pin;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce8:	f107 0310 	add.w	r3, r7, #16
 8003cec:	4619      	mov	r1, r3
 8003cee:	4813      	ldr	r0, [pc, #76]	; (8003d3c <MX_GPIO_Init+0x120>)
 8003cf0:	f000 fe02 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8003cf4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8003cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <MX_GPIO_Init+0x128>)
 8003cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d02:	f107 0310 	add.w	r3, r7, #16
 8003d06:	4619      	mov	r1, r3
 8003d08:	480d      	ldr	r0, [pc, #52]	; (8003d40 <MX_GPIO_Init+0x124>)
 8003d0a:	f000 fdf5 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8003d0e:	2358      	movs	r3, #88	; 0x58
 8003d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 0310 	add.w	r3, r7, #16
 8003d22:	4619      	mov	r1, r3
 8003d24:	4805      	ldr	r0, [pc, #20]	; (8003d3c <MX_GPIO_Init+0x120>)
 8003d26:	f000 fde7 	bl	80048f8 <HAL_GPIO_Init>

}
 8003d2a:	bf00      	nop
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40010c00 	.word	0x40010c00
 8003d40:	40010800 	.word	0x40010800
 8003d44:	10110000 	.word	0x10110000

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d4c:	b672      	cpsid	i
}
 8003d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <Error_Handler+0x8>
	...

08003d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6193      	str	r3, [r2, #24]
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	61d3      	str	r3, [r2, #28]
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_MspInit+0x5c>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_MspInit+0x60>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_MspInit+0x60>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000

08003db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_ADC_MspInit+0x6c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d121      	bne.n	8003e1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de2:	6193      	str	r3, [r2, #24]
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	6193      	str	r3, [r2, #24]
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_ADC_MspInit+0x70>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8003e08:	2310      	movs	r3, #16
 8003e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	4619      	mov	r1, r3
 8003e16:	4805      	ldr	r0, [pc, #20]	; (8003e2c <HAL_ADC_MspInit+0x74>)
 8003e18:	f000 fd6e 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e1c:	bf00      	nop
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40012400 	.word	0x40012400
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40010800 	.word	0x40010800

08003e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <HAL_I2C_MspInit+0xe4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d133      	bne.n	8003eb8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003e56:	f043 0308 	orr.w	r3, r3, #8
 8003e5a:	6193      	str	r3, [r2, #24]
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8003e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e6e:	2312      	movs	r3, #18
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e72:	2303      	movs	r3, #3
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4827      	ldr	r0, [pc, #156]	; (8003f1c <HAL_I2C_MspInit+0xec>)
 8003e7e:	f000 fd3b 	bl	80048f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003e82:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_I2C_MspInit+0xf0>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	f043 0302 	orr.w	r3, r3, #2
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_I2C_MspInit+0xf0>)
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea8:	61d3      	str	r3, [r2, #28]
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003eb6:	e029      	b.n	8003f0c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_I2C_MspInit+0xf4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d124      	bne.n	8003f0c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	6193      	str	r3, [r2, #24]
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8003eda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee0:	2312      	movs	r3, #18
 8003ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee8:	f107 031c 	add.w	r3, r7, #28
 8003eec:	4619      	mov	r1, r3
 8003eee:	480b      	ldr	r0, [pc, #44]	; (8003f1c <HAL_I2C_MspInit+0xec>)
 8003ef0:	f000 fd02 	bl	80048f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efe:	61d3      	str	r3, [r2, #28]
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_I2C_MspInit+0xe8>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	3730      	adds	r7, #48	; 0x30
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40005400 	.word	0x40005400
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010c00 	.word	0x40010c00
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40005800 	.word	0x40005800

08003f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0310 	add.w	r3, r7, #16
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_SPI_MspInit+0x8c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d131      	bne.n	8003fac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f52:	61d3      	str	r3, [r2, #28]
 8003f54:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	6193      	str	r3, [r2, #24]
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_SPI_MspInit+0x90>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003f78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480b      	ldr	r0, [pc, #44]	; (8003fbc <HAL_SPI_MspInit+0x94>)
 8003f8e:	f000 fcb3 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4805      	ldr	r0, [pc, #20]	; (8003fbc <HAL_SPI_MspInit+0x94>)
 8003fa8:	f000 fca6 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003fac:	bf00      	nop
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40003800 	.word	0x40003800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40010c00 	.word	0x40010c00

08003fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd0:	d10b      	bne.n	8003fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_TIM_Base_MspInit+0x34>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_TIM_Base_MspInit+0x34>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_TIM_Base_MspInit+0x34>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d117      	bne.n	8004048 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <HAL_TIM_MspPostInit+0x58>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <HAL_TIM_MspPostInit+0x58>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_TIM_MspPostInit+0x58>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8004030:	2303      	movs	r3, #3
 8004032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2302      	movs	r3, #2
 800403a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403c:	f107 0310 	add.w	r3, r7, #16
 8004040:	4619      	mov	r1, r3
 8004042:	4804      	ldr	r0, [pc, #16]	; (8004054 <HAL_TIM_MspPostInit+0x5c>)
 8004044:	f000 fc58 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004048:	bf00      	nop
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	40010800 	.word	0x40010800

08004058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_UART_MspInit+0x88>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d12f      	bne.n	80040d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 800407e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004082:	61d3      	str	r3, [r2, #28]
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6193      	str	r3, [r2, #24]
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_UART_MspInit+0x8c>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040a8:	2304      	movs	r3, #4
 80040aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	f107 0310 	add.w	r3, r7, #16
 80040b8:	4619      	mov	r1, r3
 80040ba:	480b      	ldr	r0, [pc, #44]	; (80040e8 <HAL_UART_MspInit+0x90>)
 80040bc:	f000 fc1c 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040c0:	2308      	movs	r3, #8
 80040c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	4619      	mov	r1, r3
 80040d2:	4805      	ldr	r0, [pc, #20]	; (80040e8 <HAL_UART_MspInit+0x90>)
 80040d4:	f000 fc10 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40004400 	.word	0x40004400
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40010800 	.word	0x40010800

080040ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040f0:	e7fe      	b.n	80040f0 <NMI_Handler+0x4>

080040f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040f6:	e7fe      	b.n	80040f6 <HardFault_Handler+0x4>

080040f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040fc:	e7fe      	b.n	80040fc <MemManage_Handler+0x4>

080040fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004102:	e7fe      	b.n	8004102 <BusFault_Handler+0x4>

08004104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004108:	e7fe      	b.n	8004108 <UsageFault_Handler+0x4>

0800410a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004132:	f000 f8ab 	bl	800428c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004144:	4a14      	ldr	r2, [pc, #80]	; (8004198 <_sbrk+0x5c>)
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <_sbrk+0x60>)
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <_sbrk+0x64>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <_sbrk+0x64>)
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <_sbrk+0x68>)
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <_sbrk+0x64>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	429a      	cmp	r2, r3
 800416a:	d207      	bcs.n	800417c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800416c:	f003 f95c 	bl	8007428 <__errno>
 8004170:	4603      	mov	r3, r0
 8004172:	220c      	movs	r2, #12
 8004174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800417a:	e009      	b.n	8004190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <_sbrk+0x64>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <_sbrk+0x64>)
 800418c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20005000 	.word	0x20005000
 800419c:	00000400 	.word	0x00000400
 80041a0:	200000a4 	.word	0x200000a4
 80041a4:	200002c8 	.word	0x200002c8

080041a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80041b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80041b6:	e003      	b.n	80041c0 <LoopCopyDataInit>

080041b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80041ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80041bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80041be:	3104      	adds	r1, #4

080041c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80041c0:	480a      	ldr	r0, [pc, #40]	; (80041ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80041c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80041c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80041c8:	d3f6      	bcc.n	80041b8 <CopyDataInit>
  ldr r2, =_sbss
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80041cc:	e002      	b.n	80041d4 <LoopFillZerobss>

080041ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80041ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80041d0:	f842 3b04 	str.w	r3, [r2], #4

080041d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80041d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80041d8:	d3f9      	bcc.n	80041ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80041da:	f7ff ffe5 	bl	80041a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041de:	f003 f929 	bl	8007434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041e2:	f7ff fa35 	bl	8003650 <main>
  bx lr
 80041e6:	4770      	bx	lr
  ldr r3, =_sidata
 80041e8:	08008690 	.word	0x08008690
  ldr r0, =_sdata
 80041ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80041f0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80041f4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80041f8:	200002c4 	.word	0x200002c4

080041fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041fc:	e7fe      	b.n	80041fc <ADC1_2_IRQHandler>
	...

08004200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_Init+0x28>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <HAL_Init+0x28>)
 800420a:	f043 0310 	orr.w	r3, r3, #16
 800420e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004210:	2003      	movs	r0, #3
 8004212:	f000 fb3d 	bl	8004890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004216:	2000      	movs	r0, #0
 8004218:	f000 f808 	bl	800422c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800421c:	f7ff fd9a 	bl	8003d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40022000 	.word	0x40022000

0800422c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_InitTick+0x54>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_InitTick+0x58>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	4619      	mov	r1, r3
 800423e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004242:	fbb3 f3f1 	udiv	r3, r3, r1
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb47 	bl	80048de <HAL_SYSTICK_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e00e      	b.n	8004278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b0f      	cmp	r3, #15
 800425e:	d80a      	bhi.n	8004276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004260:	2200      	movs	r2, #0
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004268:	f000 fb1d 	bl	80048a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800426c:	4a06      	ldr	r2, [pc, #24]	; (8004288 <HAL_InitTick+0x5c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000004 	.word	0x20000004
 8004284:	2000000c 	.word	0x2000000c
 8004288:	20000008 	.word	0x20000008

0800428c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_IncTick+0x1c>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_IncTick+0x20>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4413      	add	r3, r2
 800429c:	4a03      	ldr	r2, [pc, #12]	; (80042ac <HAL_IncTick+0x20>)
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	2000000c 	.word	0x2000000c
 80042ac:	200002b0 	.word	0x200002b0

080042b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return uwTick;
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <HAL_GetTick+0x10>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	200002b0 	.word	0x200002b0

080042c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042dc:	d005      	beq.n	80042ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_Delay+0x44>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ea:	bf00      	nop
 80042ec:	f7ff ffe0 	bl	80042b0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d8f7      	bhi.n	80042ec <HAL_Delay+0x28>
  {
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000000c 	.word	0x2000000c

0800430c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0be      	b.n	80044ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fd34 	bl	8003db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f9ab 	bl	80046ac <ADC_ConversionStop_Disable>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8099 	bne.w	800449a <HAL_ADC_Init+0x18e>
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8095 	bne.w	800449a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	f043 0202 	orr.w	r2, r3, #2
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800438c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004394:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a4:	d003      	beq.n	80043ae <HAL_ADC_Init+0xa2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_ADC_Init+0xa8>
 80043ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_Init+0xaa>
 80043b4:	2300      	movs	r3, #0
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7d1b      	ldrb	r3, [r3, #20]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7b1b      	ldrb	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	035a      	lsls	r2, r3, #13
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e00b      	b.n	80043f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_ADC_Init+0x1a8>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	430b      	orrs	r3, r1
 800441e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004428:	d003      	beq.n	8004432 <HAL_ADC_Init+0x126>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d104      	bne.n	800443c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	3b01      	subs	r3, #1
 8004438:	051b      	lsls	r3, r3, #20
 800443a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	430a      	orrs	r2, r1
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <HAL_ADC_Init+0x1ac>)
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d10b      	bne.n	8004478 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004476:	e018      	b.n	80044aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f023 0312 	bic.w	r3, r3, #18
 8004480:	f043 0210 	orr.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004498:	e007      	b.n	80044aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	ffe1f7fd 	.word	0xffe1f7fd
 80044b8:	ff1f0efe 	.word	0xff1f0efe

080044bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x20>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0dc      	b.n	8004696 <HAL_ADC_ConfigChannel+0x1da>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d81c      	bhi.n	8004526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b05      	subs	r3, #5
 80044fe:	221f      	movs	r2, #31
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	4019      	ands	r1, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3b05      	subs	r3, #5
 8004518:	fa00 f203 	lsl.w	r2, r0, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	635a      	str	r2, [r3, #52]	; 0x34
 8004524:	e03c      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d81c      	bhi.n	8004568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	3b23      	subs	r3, #35	; 0x23
 8004540:	221f      	movs	r2, #31
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	4019      	ands	r1, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	3b23      	subs	r3, #35	; 0x23
 800455a:	fa00 f203 	lsl.w	r2, r0, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
 8004566:	e01b      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	3b41      	subs	r3, #65	; 0x41
 800457a:	221f      	movs	r2, #31
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	4019      	ands	r1, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	3b41      	subs	r3, #65	; 0x41
 8004594:	fa00 f203 	lsl.w	r2, r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d91c      	bls.n	80045e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	3b1e      	subs	r3, #30
 80045ba:	2207      	movs	r2, #7
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	4019      	ands	r1, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6898      	ldr	r0, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	3b1e      	subs	r3, #30
 80045d4:	fa00 f203 	lsl.w	r2, r0, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e019      	b.n	8004616 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6919      	ldr	r1, [r3, #16]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	2207      	movs	r2, #7
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	4019      	ands	r1, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6898      	ldr	r0, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4413      	add	r3, r2
 800460a:	fa00 f203 	lsl.w	r2, r0, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d003      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004622:	2b11      	cmp	r3, #17
 8004624:	d132      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d125      	bne.n	800467c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d126      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800464c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b10      	cmp	r3, #16
 8004654:	d11a      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	0c9a      	lsrs	r2, r3, #18
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800466c:	e002      	b.n	8004674 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3b01      	subs	r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f9      	bne.n	800466e <HAL_ADC_ConfigChannel+0x1b2>
 800467a:	e007      	b.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40012400 	.word	0x40012400
 80046a4:	20000004 	.word	0x20000004
 80046a8:	431bde83 	.word	0x431bde83

080046ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d12e      	bne.n	8004724 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046d6:	f7ff fdeb 	bl	80042b0 <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046dc:	e01b      	b.n	8004716 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046de:	f7ff fde7 	bl	80042b0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d914      	bls.n	8004716 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	f043 0210 	orr.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e007      	b.n	8004726 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d0dc      	beq.n	80046de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800474c:	4013      	ands	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	60d3      	str	r3, [r2, #12]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__NVIC_GetPriorityGrouping+0x18>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0307 	and.w	r3, r3, #7
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db0a      	blt.n	80047be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	490c      	ldr	r1, [pc, #48]	; (80047e0 <__NVIC_SetPriority+0x4c>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	0112      	lsls	r2, r2, #4
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	440b      	add	r3, r1
 80047b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047bc:	e00a      	b.n	80047d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4908      	ldr	r1, [pc, #32]	; (80047e4 <__NVIC_SetPriority+0x50>)
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	3b04      	subs	r3, #4
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	440b      	add	r3, r1
 80047d2:	761a      	strb	r2, [r3, #24]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e100 	.word	0xe000e100
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f1c3 0307 	rsb	r3, r3, #7
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf28      	it	cs
 8004806:	2304      	movcs	r3, #4
 8004808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3304      	adds	r3, #4
 800480e:	2b06      	cmp	r3, #6
 8004810:	d902      	bls.n	8004818 <NVIC_EncodePriority+0x30>
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3b03      	subs	r3, #3
 8004816:	e000      	b.n	800481a <NVIC_EncodePriority+0x32>
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800481c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	401a      	ands	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43d9      	mvns	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004840:	4313      	orrs	r3, r2
         );
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800485c:	d301      	bcc.n	8004862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800485e:	2301      	movs	r3, #1
 8004860:	e00f      	b.n	8004882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <SysTick_Config+0x40>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800486a:	210f      	movs	r1, #15
 800486c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004870:	f7ff ff90 	bl	8004794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <SysTick_Config+0x40>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <SysTick_Config+0x40>)
 800487c:	2207      	movs	r2, #7
 800487e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	e000e010 	.word	0xe000e010

08004890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff49 	bl	8004730 <__NVIC_SetPriorityGrouping>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048b8:	f7ff ff5e 	bl	8004778 <__NVIC_GetPriorityGrouping>
 80048bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff ff90 	bl	80047e8 <NVIC_EncodePriority>
 80048c8:	4602      	mov	r2, r0
 80048ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ff5f 	bl	8004794 <__NVIC_SetPriority>
}
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffb0 	bl	800484c <SysTick_Config>
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b08b      	sub	sp, #44	; 0x2c
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490a:	e169      	b.n	8004be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800490c:	2201      	movs	r2, #1
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8158 	bne.w	8004bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a9a      	ldr	r2, [pc, #616]	; (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d05e      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004934:	4a98      	ldr	r2, [pc, #608]	; (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d875      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800493a:	4a98      	ldr	r2, [pc, #608]	; (8004b9c <HAL_GPIO_Init+0x2a4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d058      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004940:	4a96      	ldr	r2, [pc, #600]	; (8004b9c <HAL_GPIO_Init+0x2a4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d86f      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004946:	4a96      	ldr	r2, [pc, #600]	; (8004ba0 <HAL_GPIO_Init+0x2a8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d052      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 800494c:	4a94      	ldr	r2, [pc, #592]	; (8004ba0 <HAL_GPIO_Init+0x2a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d869      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004952:	4a94      	ldr	r2, [pc, #592]	; (8004ba4 <HAL_GPIO_Init+0x2ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04c      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004958:	4a92      	ldr	r2, [pc, #584]	; (8004ba4 <HAL_GPIO_Init+0x2ac>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d863      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800495e:	4a92      	ldr	r2, [pc, #584]	; (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d046      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004964:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d85d      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800496a:	2b12      	cmp	r3, #18
 800496c:	d82a      	bhi.n	80049c4 <HAL_GPIO_Init+0xcc>
 800496e:	2b12      	cmp	r3, #18
 8004970:	d859      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_GPIO_Init+0x80>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049f3 	.word	0x080049f3
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049df 	.word	0x080049df
 8004984:	08004a21 	.word	0x08004a21
 8004988:	08004a27 	.word	0x08004a27
 800498c:	08004a27 	.word	0x08004a27
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004a27 	.word	0x08004a27
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a27 	.word	0x08004a27
 80049a0:	08004a27 	.word	0x08004a27
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	4a79      	ldr	r2, [pc, #484]	; (8004bac <HAL_GPIO_Init+0x2b4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049ca:	e02c      	b.n	8004a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	623b      	str	r3, [r7, #32]
          break;
 80049d2:	e029      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	623b      	str	r3, [r7, #32]
          break;
 80049dc:	e024      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
          break;
 80049e6:	e01f      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	330c      	adds	r3, #12
 80049ee:	623b      	str	r3, [r7, #32]
          break;
 80049f0:	e01a      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049fa:	2304      	movs	r3, #4
 80049fc:	623b      	str	r3, [r7, #32]
          break;
 80049fe:	e013      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a08:	2308      	movs	r3, #8
 8004a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	611a      	str	r2, [r3, #16]
          break;
 8004a12:	e009      	b.n	8004a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a14:	2308      	movs	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	615a      	str	r2, [r3, #20]
          break;
 8004a1e:	e003      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
          break;
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          break;
 8004a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d801      	bhi.n	8004a32 <HAL_GPIO_Init+0x13a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_Init+0x13e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d802      	bhi.n	8004a44 <HAL_GPIO_Init+0x14c>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x152>
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	3b08      	subs	r3, #8
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	210f      	movs	r1, #15
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80b1 	beq.w	8004bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4a4c      	ldr	r2, [pc, #304]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6193      	str	r3, [r2, #24]
 8004a84:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a90:	4a48      	ldr	r2, [pc, #288]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <HAL_GPIO_Init+0x2c0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <HAL_GPIO_Init+0x1ec>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	; (8004bbc <HAL_GPIO_Init+0x2c4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_GPIO_Init+0x1e8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3e      	ldr	r2, [pc, #248]	; (8004bc0 <HAL_GPIO_Init+0x2c8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3d      	ldr	r2, [pc, #244]	; (8004bc4 <HAL_GPIO_Init+0x2cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_GPIO_Init+0x1e0>
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e004      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e002      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	f002 0203 	and.w	r2, r2, #3
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	4093      	lsls	r3, r2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004af6:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	3302      	adds	r3, #2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	492c      	ldr	r1, [pc, #176]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	4928      	ldr	r1, [pc, #160]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	491e      	ldr	r1, [pc, #120]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	4918      	ldr	r1, [pc, #96]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	4914      	ldr	r1, [pc, #80]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d021      	beq.n	8004bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
 8004b94:	e021      	b.n	8004bda <HAL_GPIO_Init+0x2e2>
 8004b96:	bf00      	nop
 8004b98:	10320000 	.word	0x10320000
 8004b9c:	10310000 	.word	0x10310000
 8004ba0:	10220000 	.word	0x10220000
 8004ba4:	10210000 	.word	0x10210000
 8004ba8:	10120000 	.word	0x10120000
 8004bac:	10110000 	.word	0x10110000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010800 	.word	0x40010800
 8004bbc:	40010c00 	.word	0x40010c00
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_GPIO_Init+0x304>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4909      	ldr	r1, [pc, #36]	; (8004bfc <HAL_GPIO_Init+0x304>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	3301      	adds	r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f47f ae8e 	bne.w	800490c <HAL_GPIO_Init+0x14>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	372c      	adds	r7, #44	; 0x2c
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c10:	787b      	ldrb	r3, [r7, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c1c:	e003      	b.n	8004c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	041a      	lsls	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	611a      	str	r2, [r3, #16]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	041a      	lsls	r2, r3, #16
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	43d9      	mvns	r1, r3
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	400b      	ands	r3, r1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	611a      	str	r2, [r3, #16]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
	...

08004c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e12b      	b.n	8004ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff f8d0 	bl	8003e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f001 fb6e 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8004ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4a81      	ldr	r2, [pc, #516]	; (8004ed8 <HAL_I2C_Init+0x274>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d807      	bhi.n	8004ce8 <HAL_I2C_Init+0x84>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a80      	ldr	r2, [pc, #512]	; (8004edc <HAL_I2C_Init+0x278>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	bf94      	ite	ls
 8004ce0:	2301      	movls	r3, #1
 8004ce2:	2300      	movhi	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e006      	b.n	8004cf6 <HAL_I2C_Init+0x92>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a7d      	ldr	r2, [pc, #500]	; (8004ee0 <HAL_I2C_Init+0x27c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bf94      	ite	ls
 8004cf0:	2301      	movls	r3, #1
 8004cf2:	2300      	movhi	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0e7      	b.n	8004ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a78      	ldr	r2, [pc, #480]	; (8004ee4 <HAL_I2C_Init+0x280>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0c9b      	lsrs	r3, r3, #18
 8004d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a6a      	ldr	r2, [pc, #424]	; (8004ed8 <HAL_I2C_Init+0x274>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d802      	bhi.n	8004d38 <HAL_I2C_Init+0xd4>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3301      	adds	r3, #1
 8004d36:	e009      	b.n	8004d4c <HAL_I2C_Init+0xe8>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	4a69      	ldr	r2, [pc, #420]	; (8004ee8 <HAL_I2C_Init+0x284>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	495c      	ldr	r1, [pc, #368]	; (8004ed8 <HAL_I2C_Init+0x274>)
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	d819      	bhi.n	8004da0 <HAL_I2C_Init+0x13c>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1e59      	subs	r1, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d80:	400b      	ands	r3, r1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_I2C_Init+0x138>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1e59      	subs	r1, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9a:	e051      	b.n	8004e40 <HAL_I2C_Init+0x1dc>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	e04f      	b.n	8004e40 <HAL_I2C_Init+0x1dc>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d111      	bne.n	8004dcc <HAL_I2C_Init+0x168>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	440b      	add	r3, r1
 8004db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e012      	b.n	8004df2 <HAL_I2C_Init+0x18e>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e58      	subs	r0, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	0099      	lsls	r1, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Init+0x196>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e022      	b.n	8004e40 <HAL_I2C_Init+0x1dc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10e      	bne.n	8004e20 <HAL_I2C_Init+0x1bc>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1e58      	subs	r0, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	440b      	add	r3, r1
 8004e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e14:	3301      	adds	r3, #1
 8004e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	e00f      	b.n	8004e40 <HAL_I2C_Init+0x1dc>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1e58      	subs	r0, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6859      	ldr	r1, [r3, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	0099      	lsls	r1, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	6809      	ldr	r1, [r1, #0]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6911      	ldr	r1, [r2, #16]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	000186a0 	.word	0x000186a0
 8004edc:	001e847f 	.word	0x001e847f
 8004ee0:	003d08ff 	.word	0x003d08ff
 8004ee4:	431bde83 	.word	0x431bde83
 8004ee8:	10624dd3 	.word	0x10624dd3

08004eec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
 8004efc:	4613      	mov	r3, r2
 8004efe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f00:	f7ff f9d6 	bl	80042b0 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 80e0 	bne.w	80050d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4970      	ldr	r1, [pc, #448]	; (80050e0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fc92 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e0d3      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_I2C_Master_Transmit+0x50>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e0cc      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d007      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2221      	movs	r2, #33	; 0x21
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	893a      	ldrh	r2, [r7, #8]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a50      	ldr	r2, [pc, #320]	; (80050e4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fa4:	8979      	ldrh	r1, [r7, #10]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fafc 	bl	80055a8 <I2C_MasterRequestWrite>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e08d      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fd0:	e066      	b.n	80050a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fd0c 	bl	80059f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d107      	bne.n	8004ffa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06b      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d11b      	bne.n	8005074 <HAL_I2C_Master_Transmit+0x188>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	d017      	beq.n	8005074 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	6a39      	ldr	r1, [r7, #32]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fcfc 	bl	8005a76 <I2C_WaitOnBTFFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	2b04      	cmp	r3, #4
 800508a:	d107      	bne.n	800509c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e01a      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d194      	bne.n	8004fd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	00100002 	.word	0x00100002
 80050e4:	ffff0000 	.word	0xffff0000

080050e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	461a      	mov	r2, r3
 80050f4:	460b      	mov	r3, r1
 80050f6:	817b      	strh	r3, [r7, #10]
 80050f8:	4613      	mov	r3, r2
 80050fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7ff f8d6 	bl	80042b0 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 823f 	bne.w	8005592 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2319      	movs	r3, #25
 800511a:	2201      	movs	r2, #1
 800511c:	497f      	ldr	r1, [pc, #508]	; (800531c <HAL_I2C_Master_Receive+0x234>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb92 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	e232      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2C_Master_Receive+0x54>
 8005138:	2302      	movs	r3, #2
 800513a:	e22b      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d007      	beq.n	8005162 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2222      	movs	r2, #34	; 0x22
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2210      	movs	r2, #16
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	893a      	ldrh	r2, [r7, #8]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a5f      	ldr	r2, [pc, #380]	; (8005320 <HAL_I2C_Master_Receive+0x238>)
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa7e 	bl	80056ac <I2C_MasterRequestRead>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e1ec      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e1c0      	b.n	800556c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11e      	bne.n	8005230 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005202:	b672      	cpsid	i
}
 8005204:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800522c:	b662      	cpsie	i
}
 800522e:	e035      	b.n	800529c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b02      	cmp	r3, #2
 8005236:	d11e      	bne.n	8005276 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005248:	b672      	cpsid	i
}
 800524a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005272:	b662      	cpsie	i
}
 8005274:	e012      	b.n	800529c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800529c:	e166      	b.n	800556c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	f200 811f 	bhi.w	80054e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d123      	bne.n	80052f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fc1f 	bl	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e167      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f6:	e139      	b.n	800556c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d152      	bne.n	80053a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2200      	movs	r2, #0
 8005308:	4906      	ldr	r1, [pc, #24]	; (8005324 <HAL_I2C_Master_Receive+0x23c>)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fa9c 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e13c      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
 800531a:	bf00      	nop
 800531c:	00100002 	.word	0x00100002
 8005320:	ffff0000 	.word	0xffff0000
 8005324:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005328:	b672      	cpsid	i
}
 800532a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800536e:	b662      	cpsie	i
}
 8005370:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a4:	e0e2      	b.n	800556c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	497b      	ldr	r1, [pc, #492]	; (800559c <HAL_I2C_Master_Receive+0x4b4>)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fa49 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0e9      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053d0:	b672      	cpsid	i
}
 80053d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005406:	4b66      	ldr	r3, [pc, #408]	; (80055a0 <HAL_I2C_Master_Receive+0x4b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	4a65      	ldr	r2, [pc, #404]	; (80055a4 <HAL_I2C_Master_Receive+0x4bc>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0a1a      	lsrs	r2, r3, #8
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00da      	lsls	r2, r3, #3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	3b01      	subs	r3, #1
 8005424:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d118      	bne.n	800545e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800544e:	b662      	cpsie	i
}
 8005450:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e09a      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d1d9      	bne.n	8005420 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054ae:	b662      	cpsie	i
}
 80054b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e4:	e042      	b.n	800556c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fb04 	bl	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e04c      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d118      	bne.n	800556c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f ae94 	bne.w	800529e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00010004 	.word	0x00010004
 80055a0:	20000004 	.word	0x20000004
 80055a4:	14f8b589 	.word	0x14f8b589

080055a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	460b      	mov	r3, r1
 80055b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d006      	beq.n	80055d2 <I2C_MasterRequestWrite+0x2a>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d003      	beq.n	80055d2 <I2C_MasterRequestWrite+0x2a>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d0:	d108      	bne.n	80055e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e00b      	b.n	80055fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b12      	cmp	r3, #18
 80055ea:	d107      	bne.n	80055fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f91d 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00d      	beq.n	8005630 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d103      	bne.n	800562c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e035      	b.n	800569c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005638:	d108      	bne.n	800564c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800563a:	897b      	ldrh	r3, [r7, #10]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	e01b      	b.n	8005684 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800564c:	897b      	ldrh	r3, [r7, #10]
 800564e:	11db      	asrs	r3, r3, #7
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0306 	and.w	r3, r3, #6
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f063 030f 	orn	r3, r3, #15
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	490e      	ldr	r1, [pc, #56]	; (80056a4 <I2C_MasterRequestWrite+0xfc>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f943 	bl	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e010      	b.n	800569c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800567a:	897b      	ldrh	r3, [r7, #10]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <I2C_MasterRequestWrite+0x100>)
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f933 	bl	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	00010008 	.word	0x00010008
 80056a8:	00010002 	.word	0x00010002

080056ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	460b      	mov	r3, r1
 80056ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d006      	beq.n	80056e6 <I2C_MasterRequestRead+0x3a>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d003      	beq.n	80056e6 <I2C_MasterRequestRead+0x3a>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056e4:	d108      	bne.n	80056f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e00b      	b.n	8005710 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	2b11      	cmp	r3, #17
 80056fe:	d107      	bne.n	8005710 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f893 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d103      	bne.n	8005740 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e079      	b.n	8005838 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574c:	d108      	bne.n	8005760 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	e05f      	b.n	8005820 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005760:	897b      	ldrh	r3, [r7, #10]
 8005762:	11db      	asrs	r3, r3, #7
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f003 0306 	and.w	r3, r3, #6
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f063 030f 	orn	r3, r3, #15
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4930      	ldr	r1, [pc, #192]	; (8005840 <I2C_MasterRequestRead+0x194>)
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f8b9 	bl	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e054      	b.n	8005838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4929      	ldr	r1, [pc, #164]	; (8005844 <I2C_MasterRequestRead+0x198>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f8a9 	bl	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e044      	b.n	8005838 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f831 	bl	8005848 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	d103      	bne.n	8005804 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e017      	b.n	8005838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005808:	897b      	ldrh	r3, [r7, #10]
 800580a:	11db      	asrs	r3, r3, #7
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0306 	and.w	r3, r3, #6
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f063 030e 	orn	r3, r3, #14
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4907      	ldr	r1, [pc, #28]	; (8005844 <I2C_MasterRequestRead+0x198>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f865 	bl	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	00010008 	.word	0x00010008
 8005844:	00010002 	.word	0x00010002

08005848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005858:	e025      	b.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005860:	d021      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fe fd25 	bl	80042b0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d116      	bne.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f043 0220 	orr.w	r2, r3, #32
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e023      	b.n	80058ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10d      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	e00c      	b.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	43da      	mvns	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0b6      	beq.n	800585a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005904:	e051      	b.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005914:	d123      	bne.n	800595e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005924:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800592e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f043 0204 	orr.w	r2, r3, #4
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e046      	b.n	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005964:	d021      	beq.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fe fca3 	bl	80042b0 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d116      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e020      	b.n	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10c      	bne.n	80059ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	43da      	mvns	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e00b      	b.n	80059e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	43da      	mvns	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d18d      	bne.n	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a00:	e02d      	b.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f8ce 	bl	8005ba4 <I2C_IsAcknowledgeFailed>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e02d      	b.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a18:	d021      	beq.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fe fc49 	bl	80042b0 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d116      	bne.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e007      	b.n	8005a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d1ca      	bne.n	8005a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a82:	e02d      	b.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f88d 	bl	8005ba4 <I2C_IsAcknowledgeFailed>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e02d      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9a:	d021      	beq.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9c:	f7fe fc08 	bl	80042b0 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e007      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d1ca      	bne.n	8005a84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b04:	e042      	b.n	8005b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d119      	bne.n	8005b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e029      	b.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b48:	f7fe fbb2 	bl	80042b0 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e007      	b.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d1b5      	bne.n	8005b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d11b      	bne.n	8005bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f043 0204 	orr.w	r2, r3, #4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e26c      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8087 	beq.w	8005d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c20:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c2c:	4b8f      	ldr	r3, [pc, #572]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x5e>
 8005c38:	4b8c      	ldr	r3, [pc, #560]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x12c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d168      	bne.n	8005d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e246      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x76>
 8005c68:	4b80      	ldr	r3, [pc, #512]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7f      	ldr	r2, [pc, #508]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02e      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x98>
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7a      	ldr	r2, [pc, #488]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b78      	ldr	r3, [pc, #480]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e01d      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0xbc>
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a71      	ldr	r2, [pc, #452]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e00b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005cbc:	4b6b      	ldr	r3, [pc, #428]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b68      	ldr	r3, [pc, #416]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a67      	ldr	r2, [pc, #412]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7fe fae8 	bl	80042b0 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ce4:	f7fe fae4 	bl	80042b0 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e1fa      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe4>
 8005d02:	e014      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fe fad4 	bl	80042b0 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fe fad0 	bl	80042b0 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1e6      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x10c>
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d063      	beq.n	8005e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d46:	4b49      	ldr	r3, [pc, #292]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x18c>
 8005d52:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x176>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1ba      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4939      	ldr	r1, [pc, #228]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e03a      	b.n	8005e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x270>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fe fa89 	bl	80042b0 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da2:	f7fe fa85 	bl	80042b0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e19b      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4927      	ldr	r1, [pc, #156]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]
 8005dd4:	e015      	b.n	8005e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fe fa68 	bl	80042b0 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de4:	f7fe fa64 	bl	80042b0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e17a      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d03a      	beq.n	8005e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d019      	beq.n	8005e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e16:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_RCC_OscConfig+0x274>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1c:	f7fe fa48 	bl	80042b0 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e24:	f7fe fa44 	bl	80042b0 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e15a      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e42:	2001      	movs	r0, #1
 8005e44:	f000 fad8 	bl	80063f8 <RCC_Delay>
 8005e48:	e01c      	b.n	8005e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_RCC_OscConfig+0x274>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7fe fa2e 	bl	80042b0 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e56:	e00f      	b.n	8005e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fe fa2a 	bl	80042b0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d908      	bls.n	8005e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e140      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	42420000 	.word	0x42420000
 8005e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	4b9e      	ldr	r3, [pc, #632]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e9      	bne.n	8005e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80a6 	beq.w	8005fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e96:	4b97      	ldr	r3, [pc, #604]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	4b94      	ldr	r3, [pc, #592]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4a93      	ldr	r2, [pc, #588]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eac:	61d3      	str	r3, [r2, #28]
 8005eae:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ebe:	4b8e      	ldr	r3, [pc, #568]	; (80060f8 <HAL_RCC_OscConfig+0x4f8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d118      	bne.n	8005efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eca:	4b8b      	ldr	r3, [pc, #556]	; (80060f8 <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a8a      	ldr	r2, [pc, #552]	; (80060f8 <HAL_RCC_OscConfig+0x4f8>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed6:	f7fe f9eb 	bl	80042b0 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ede:	f7fe f9e7 	bl	80042b0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b64      	cmp	r3, #100	; 0x64
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0fd      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef0:	4b81      	ldr	r3, [pc, #516]	; (80060f8 <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_OscConfig+0x312>
 8005f04:	4b7b      	ldr	r3, [pc, #492]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	4a7a      	ldr	r2, [pc, #488]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6213      	str	r3, [r2, #32]
 8005f10:	e02d      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x334>
 8005f1a:	4b76      	ldr	r3, [pc, #472]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	4a75      	ldr	r2, [pc, #468]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6213      	str	r3, [r2, #32]
 8005f26:	4b73      	ldr	r3, [pc, #460]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4a72      	ldr	r2, [pc, #456]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f2c:	f023 0304 	bic.w	r3, r3, #4
 8005f30:	6213      	str	r3, [r2, #32]
 8005f32:	e01c      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d10c      	bne.n	8005f56 <HAL_RCC_OscConfig+0x356>
 8005f3c:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	4a6c      	ldr	r2, [pc, #432]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f42:	f043 0304 	orr.w	r3, r3, #4
 8005f46:	6213      	str	r3, [r2, #32]
 8005f48:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	4a69      	ldr	r2, [pc, #420]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	6213      	str	r3, [r2, #32]
 8005f54:	e00b      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f56:	4b67      	ldr	r3, [pc, #412]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	4a66      	ldr	r2, [pc, #408]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	6213      	str	r3, [r2, #32]
 8005f62:	4b64      	ldr	r3, [pc, #400]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	4a63      	ldr	r2, [pc, #396]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f68:	f023 0304 	bic.w	r3, r3, #4
 8005f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d015      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f76:	f7fe f99b 	bl	80042b0 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fe f997 	bl	80042b0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e0ab      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	4b57      	ldr	r3, [pc, #348]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ee      	beq.n	8005f7e <HAL_RCC_OscConfig+0x37e>
 8005fa0:	e014      	b.n	8005fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa2:	f7fe f985 	bl	80042b0 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7fe f981 	bl	80042b0 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e095      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc0:	4b4c      	ldr	r3, [pc, #304]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ee      	bne.n	8005faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d105      	bne.n	8005fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd2:	4b48      	ldr	r3, [pc, #288]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4a47      	ldr	r2, [pc, #284]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8081 	beq.w	80060ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe8:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d061      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d146      	bne.n	800608a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffc:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <HAL_RCC_OscConfig+0x4fc>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006002:	f7fe f955 	bl	80042b0 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600a:	f7fe f951 	bl	80042b0 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e067      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601c:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f0      	bne.n	800600a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d108      	bne.n	8006044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006032:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	492d      	ldr	r1, [pc, #180]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a19      	ldr	r1, [r3, #32]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	430b      	orrs	r3, r1
 8006056:	4927      	ldr	r1, [pc, #156]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 8006058:	4313      	orrs	r3, r2
 800605a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <HAL_RCC_OscConfig+0x4fc>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fe f925 	bl	80042b0 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800606a:	f7fe f921 	bl	80042b0 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e037      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x46a>
 8006088:	e02f      	b.n	80060ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608a:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <HAL_RCC_OscConfig+0x4fc>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006090:	f7fe f90e 	bl	80042b0 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fe f90a 	bl	80042b0 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e020      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x498>
 80060b6:	e018      	b.n	80060ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e013      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_OscConfig+0x4f4>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d106      	bne.n	80060e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40007000 	.word	0x40007000
 80060fc:	42420060 	.word	0x42420060

08006100 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0d0      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006114:	4b6a      	ldr	r3, [pc, #424]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d910      	bls.n	8006144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006122:	4b67      	ldr	r3, [pc, #412]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 0207 	bic.w	r2, r3, #7
 800612a:	4965      	ldr	r1, [pc, #404]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b63      	ldr	r3, [pc, #396]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0b8      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800615c:	4b59      	ldr	r3, [pc, #356]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4a58      	ldr	r2, [pc, #352]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006166:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006174:	4b53      	ldr	r3, [pc, #332]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a52      	ldr	r2, [pc, #328]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800617a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800617e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006180:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	494d      	ldr	r1, [pc, #308]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d040      	beq.n	8006220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d107      	bne.n	80061b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a6:	4b47      	ldr	r3, [pc, #284]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d115      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e07f      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	4b41      	ldr	r3, [pc, #260]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e073      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ce:	4b3d      	ldr	r3, [pc, #244]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e06b      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061de:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f023 0203 	bic.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4936      	ldr	r1, [pc, #216]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f0:	f7fe f85e 	bl	80042b0 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f6:	e00a      	b.n	800620e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f8:	f7fe f85a 	bl	80042b0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e053      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620e:	4b2d      	ldr	r3, [pc, #180]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 020c 	and.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	429a      	cmp	r2, r3
 800621e:	d1eb      	bne.n	80061f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d210      	bcs.n	8006250 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b24      	ldr	r3, [pc, #144]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 0207 	bic.w	r2, r3, #7
 8006236:	4922      	ldr	r1, [pc, #136]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e032      	b.n	80062b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	4916      	ldr	r1, [pc, #88]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	490e      	ldr	r1, [pc, #56]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800628a:	4313      	orrs	r3, r2
 800628c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800628e:	f000 f821 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 8006292:	4602      	mov	r2, r0
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	490a      	ldr	r1, [pc, #40]	; (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80062a0:	5ccb      	ldrb	r3, [r1, r3]
 80062a2:	fa22 f303 	lsr.w	r3, r2, r3
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <HAL_RCC_ClockConfig+0x1cc>)
 80062a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <HAL_RCC_ClockConfig+0x1d0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd ffbc 	bl	800422c <HAL_InitTick>

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40022000 	.word	0x40022000
 80062c4:	40021000 	.word	0x40021000
 80062c8:	08008604 	.word	0x08008604
 80062cc:	20000004 	.word	0x20000004
 80062d0:	20000008 	.word	0x20000008

080062d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d4:	b490      	push	{r4, r7}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80062da:	4b2a      	ldr	r3, [pc, #168]	; (8006384 <HAL_RCC_GetSysClockFreq+0xb0>)
 80062dc:	1d3c      	adds	r4, r7, #4
 80062de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80062e4:	f240 2301 	movw	r3, #513	; 0x201
 80062e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	2300      	movs	r3, #0
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b04      	cmp	r3, #4
 800630c:	d002      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0x40>
 800630e:	2b08      	cmp	r3, #8
 8006310:	d003      	beq.n	800631a <HAL_RCC_GetSysClockFreq+0x46>
 8006312:	e02d      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006314:	4b1d      	ldr	r3, [pc, #116]	; (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006316:	623b      	str	r3, [r7, #32]
      break;
 8006318:	e02d      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	0c9b      	lsrs	r3, r3, #18
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006326:	4413      	add	r3, r2
 8006328:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800632c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006338:	4b13      	ldr	r3, [pc, #76]	; (8006388 <HAL_RCC_GetSysClockFreq+0xb4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	0c5b      	lsrs	r3, r3, #17
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006346:	4413      	add	r3, r2
 8006348:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800634c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4a0e      	ldr	r2, [pc, #56]	; (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006352:	fb02 f203 	mul.w	r2, r2, r3
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e004      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006364:	fb02 f303 	mul.w	r3, r2, r3
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	623b      	str	r3, [r7, #32]
      break;
 800636e:	e002      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006372:	623b      	str	r3, [r7, #32]
      break;
 8006374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006376:	6a3b      	ldr	r3, [r7, #32]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	; 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bc90      	pop	{r4, r7}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	080085f4 	.word	0x080085f4
 8006388:	40021000 	.word	0x40021000
 800638c:	007a1200 	.word	0x007a1200
 8006390:	003d0900 	.word	0x003d0900

08006394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006398:	4b02      	ldr	r3, [pc, #8]	; (80063a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr
 80063a4:	20000004 	.word	0x20000004

080063a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063ac:	f7ff fff2 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	08008614 	.word	0x08008614

080063d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063d4:	f7ff ffde 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	0adb      	lsrs	r3, r3, #11
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4903      	ldr	r1, [pc, #12]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40021000 	.word	0x40021000
 80063f4:	08008614 	.word	0x08008614

080063f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <RCC_Delay+0x34>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <RCC_Delay+0x38>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006414:	bf00      	nop
  }
  while (Delay --);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f9      	bne.n	8006414 <RCC_Delay+0x1c>
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	20000004 	.word	0x20000004
 8006430:	10624dd3 	.word	0x10624dd3

08006434 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d07d      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006450:	2300      	movs	r3, #0
 8006452:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006454:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006460:	4b4c      	ldr	r3, [pc, #304]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	4a4b      	ldr	r2, [pc, #300]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	61d3      	str	r3, [r2, #28]
 800646c:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006478:	2301      	movs	r3, #1
 800647a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647c:	4b46      	ldr	r3, [pc, #280]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d118      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006488:	4b43      	ldr	r3, [pc, #268]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a42      	ldr	r2, [pc, #264]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006494:	f7fd ff0c 	bl	80042b0 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	e008      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649c:	f7fd ff08 	bl	80042b0 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e06d      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ae:	4b3a      	ldr	r3, [pc, #232]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d02e      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d027      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064d8:	4b2e      	ldr	r3, [pc, #184]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064e2:	4b2e      	ldr	r3, [pc, #184]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064ee:	4a29      	ldr	r2, [pc, #164]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fe:	f7fd fed7 	bl	80042b0 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006504:	e00a      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fd fed3 	bl	80042b0 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	; 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e036      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ee      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4917      	ldr	r1, [pc, #92]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006536:	4313      	orrs	r3, r2
 8006538:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006540:	4b14      	ldr	r3, [pc, #80]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	4a13      	ldr	r2, [pc, #76]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800654a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	490b      	ldr	r1, [pc, #44]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006566:	4313      	orrs	r3, r2
 8006568:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40021000 	.word	0x40021000
 8006598:	40007000 	.word	0x40007000
 800659c:	42420440 	.word	0x42420440

080065a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e076      	b.n	80066a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c2:	d009      	beq.n	80065d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
 80065ca:	e005      	b.n	80065d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fd fc98 	bl	8003f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	ea42 0103 	orr.w	r1, r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	0c1a      	lsrs	r2, r3, #16
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f002 0204 	and.w	r2, r2, #4
 800667e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69da      	ldr	r2, [r3, #28]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800668e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e041      	b.n	800673e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fd fc76 	bl	8003fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f000 fa08 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e041      	b.n	80067dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f839 	bl	80067e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 f9b9 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr
	...

080067f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800680e:	2302      	movs	r3, #2
 8006810:	e0ac      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b0c      	cmp	r3, #12
 800681e:	f200 809f 	bhi.w	8006960 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	0800685d 	.word	0x0800685d
 800682c:	08006961 	.word	0x08006961
 8006830:	08006961 	.word	0x08006961
 8006834:	08006961 	.word	0x08006961
 8006838:	0800689d 	.word	0x0800689d
 800683c:	08006961 	.word	0x08006961
 8006840:	08006961 	.word	0x08006961
 8006844:	08006961 	.word	0x08006961
 8006848:	080068df 	.word	0x080068df
 800684c:	08006961 	.word	0x08006961
 8006850:	08006961 	.word	0x08006961
 8006854:	08006961 	.word	0x08006961
 8006858:	0800691f 	.word	0x0800691f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f9ac 	bl	8006bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0208 	orr.w	r2, r2, #8
 8006876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0204 	bic.w	r2, r2, #4
 8006886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6999      	ldr	r1, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	619a      	str	r2, [r3, #24]
      break;
 800689a:	e062      	b.n	8006962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f9f2 	bl	8006c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6999      	ldr	r1, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	021a      	lsls	r2, r3, #8
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	619a      	str	r2, [r3, #24]
      break;
 80068dc:	e041      	b.n	8006962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fa3b 	bl	8006d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0208 	orr.w	r2, r2, #8
 80068f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0204 	bic.w	r2, r2, #4
 8006908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	61da      	str	r2, [r3, #28]
      break;
 800691c:	e021      	b.n	8006962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fa85 	bl	8006e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	021a      	lsls	r2, r3, #8
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	61da      	str	r2, [r3, #28]
      break;
 800695e:	e000      	b.n	8006962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_TIM_ConfigClockSource+0x18>
 8006988:	2302      	movs	r3, #2
 800698a:	e0b3      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x180>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d03e      	beq.n	8006a44 <HAL_TIM_ConfigClockSource+0xd0>
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ca:	f200 8087 	bhi.w	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d2:	f000 8085 	beq.w	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069da:	d87f      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d01a      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xa2>
 80069e0:	2b70      	cmp	r3, #112	; 0x70
 80069e2:	d87b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d050      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x116>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d877      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d03c      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0xf6>
 80069f0:	2b50      	cmp	r3, #80	; 0x50
 80069f2:	d873      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d058      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x136>
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d86f      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d064      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x156>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d86b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d060      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x156>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d867      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x156>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d05a      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a14:	e062      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6899      	ldr	r1, [r3, #8]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f000 faca 	bl	8006fbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	609a      	str	r2, [r3, #8]
      break;
 8006a42:	e04e      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	6899      	ldr	r1, [r3, #8]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f000 fab3 	bl	8006fbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a66:	609a      	str	r2, [r3, #8]
      break;
 8006a68:	e03b      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f000 fa2a 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2150      	movs	r1, #80	; 0x50
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fa81 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006a88:	e02b      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fa48 	bl	8006f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2160      	movs	r1, #96	; 0x60
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fa71 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e01b      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 fa0a 	bl	8006ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fa61 	bl	8006f8a <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e00b      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f000 fa58 	bl	8006f8a <TIM_ITRx_SetConfig>
        break;
 8006ada:	e002      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006adc:	bf00      	nop
 8006ade:	e000      	b.n	8006ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <TIM_Base_SetConfig+0xbc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x30>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <TIM_Base_SetConfig+0xc0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <TIM_Base_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <TIM_Base_SetConfig+0xc0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <TIM_Base_SetConfig+0xb8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800

08006bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0201 	bic.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f023 0302 	bic.w	r3, r3, #2
 8006c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <TIM_OC1_SetConfig+0xc8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10c      	bne.n	8006c36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0308 	bic.w	r3, r3, #8
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 0304 	bic.w	r3, r3, #4
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <TIM_OC1_SetConfig+0xc8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d111      	bne.n	8006c62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00

08006c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0210 	bic.w	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0320 	bic.w	r3, r3, #32
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a1d      	ldr	r2, [pc, #116]	; (8006d5c <TIM_OC2_SetConfig+0xd0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10d      	bne.n	8006d08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a14      	ldr	r2, [pc, #80]	; (8006d5c <TIM_OC2_SetConfig+0xd0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d113      	bne.n	8006d38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	40012c00 	.word	0x40012c00

08006d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d10d      	bne.n	8006dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d113      	bne.n	8006e0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	621a      	str	r2, [r3, #32]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00

08006e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ecc <TIM_OC4_SetConfig+0x98>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	019b      	lsls	r3, r3, #6
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	40012c00 	.word	0x40012c00

08006ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f023 030a 	bic.w	r3, r3, #10
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f023 0210 	bic.w	r2, r3, #16
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	031b      	lsls	r3, r3, #12
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	621a      	str	r2, [r3, #32]
}
 8006f80:	bf00      	nop
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f043 0307 	orr.w	r3, r3, #7
 8006fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	609a      	str	r2, [r3, #8]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	021a      	lsls	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	609a      	str	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007010:	2302      	movs	r3, #2
 8007012:	e046      	b.n	80070a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a16      	ldr	r2, [pc, #88]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007060:	d009      	beq.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d10c      	bne.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	4313      	orrs	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800

080070b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e03f      	b.n	800714a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fc ffba 	bl	8004058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	; 0x24
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f905 	bl	800730c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b08a      	sub	sp, #40	; 0x28
 8007156:	af02      	add	r7, sp, #8
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b20      	cmp	r3, #32
 8007170:	d17c      	bne.n	800726c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_UART_Transmit+0x2c>
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e075      	b.n	800726e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_UART_Transmit+0x3e>
 800718c:	2302      	movs	r3, #2
 800718e:	e06e      	b.n	800726e <HAL_UART_Transmit+0x11c>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2221      	movs	r2, #33	; 0x21
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071a6:	f7fd f883 	bl	80042b0 <HAL_GetTick>
 80071aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	88fa      	ldrh	r2, [r7, #6]
 80071b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d108      	bne.n	80071d4 <HAL_UART_Transmit+0x82>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	e003      	b.n	80071dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071e4:	e02a      	b.n	800723c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f840 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e036      	b.n	800726e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007214:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	3302      	adds	r3, #2
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	e007      	b.n	800722e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1cf      	bne.n	80071e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2200      	movs	r2, #0
 800724e:	2140      	movs	r1, #64	; 0x40
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f810 	bl	8007276 <UART_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e006      	b.n	800726e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e000      	b.n	800726e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007286:	e02c      	b.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728e:	d028      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007296:	f7fd f80b 	bl	80042b0 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d21d      	bcs.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e00f      	b.n	8007302 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d0c3      	beq.n	8007288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007346:	f023 030c 	bic.w	r3, r3, #12
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	430b      	orrs	r3, r1
 8007352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <UART_SetConfig+0x114>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d103      	bne.n	800737c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7ff f82c 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	e002      	b.n	8007382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800737c:	f7ff f814 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8007380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009a      	lsls	r2, r3, #2
 800738c:	441a      	add	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	4a22      	ldr	r2, [pc, #136]	; (8007424 <UART_SetConfig+0x118>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	0119      	lsls	r1, r3, #4
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009a      	lsls	r2, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <UART_SetConfig+0x118>)
 80073ba:	fba3 0302 	umull	r0, r3, r3, r2
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	2064      	movs	r0, #100	; 0x64
 80073c2:	fb00 f303 	mul.w	r3, r0, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	3332      	adds	r3, #50	; 0x32
 80073cc:	4a15      	ldr	r2, [pc, #84]	; (8007424 <UART_SetConfig+0x118>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073d8:	4419      	add	r1, r3
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009a      	lsls	r2, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <UART_SetConfig+0x118>)
 80073f2:	fba3 0302 	umull	r0, r3, r3, r2
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	2064      	movs	r0, #100	; 0x64
 80073fa:	fb00 f303 	mul.w	r3, r0, r3
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	3332      	adds	r3, #50	; 0x32
 8007404:	4a07      	ldr	r2, [pc, #28]	; (8007424 <UART_SetConfig+0x118>)
 8007406:	fba2 2303 	umull	r2, r3, r2, r3
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	f003 020f 	and.w	r2, r3, #15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	440a      	add	r2, r1
 8007416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40013800 	.word	0x40013800
 8007424:	51eb851f 	.word	0x51eb851f

08007428 <__errno>:
 8007428:	4b01      	ldr	r3, [pc, #4]	; (8007430 <__errno+0x8>)
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000010 	.word	0x20000010

08007434 <__libc_init_array>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	2600      	movs	r6, #0
 8007438:	4d0c      	ldr	r5, [pc, #48]	; (800746c <__libc_init_array+0x38>)
 800743a:	4c0d      	ldr	r4, [pc, #52]	; (8007470 <__libc_init_array+0x3c>)
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	42a6      	cmp	r6, r4
 8007442:	d109      	bne.n	8007458 <__libc_init_array+0x24>
 8007444:	f001 f88c 	bl	8008560 <_init>
 8007448:	2600      	movs	r6, #0
 800744a:	4d0a      	ldr	r5, [pc, #40]	; (8007474 <__libc_init_array+0x40>)
 800744c:	4c0a      	ldr	r4, [pc, #40]	; (8007478 <__libc_init_array+0x44>)
 800744e:	1b64      	subs	r4, r4, r5
 8007450:	10a4      	asrs	r4, r4, #2
 8007452:	42a6      	cmp	r6, r4
 8007454:	d105      	bne.n	8007462 <__libc_init_array+0x2e>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	f855 3b04 	ldr.w	r3, [r5], #4
 800745c:	4798      	blx	r3
 800745e:	3601      	adds	r6, #1
 8007460:	e7ee      	b.n	8007440 <__libc_init_array+0xc>
 8007462:	f855 3b04 	ldr.w	r3, [r5], #4
 8007466:	4798      	blx	r3
 8007468:	3601      	adds	r6, #1
 800746a:	e7f2      	b.n	8007452 <__libc_init_array+0x1e>
 800746c:	08008688 	.word	0x08008688
 8007470:	08008688 	.word	0x08008688
 8007474:	08008688 	.word	0x08008688
 8007478:	0800868c 	.word	0x0800868c

0800747c <memset>:
 800747c:	4603      	mov	r3, r0
 800747e:	4402      	add	r2, r0
 8007480:	4293      	cmp	r3, r2
 8007482:	d100      	bne.n	8007486 <memset+0xa>
 8007484:	4770      	bx	lr
 8007486:	f803 1b01 	strb.w	r1, [r3], #1
 800748a:	e7f9      	b.n	8007480 <memset+0x4>

0800748c <siprintf>:
 800748c:	b40e      	push	{r1, r2, r3}
 800748e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007492:	b500      	push	{lr}
 8007494:	b09c      	sub	sp, #112	; 0x70
 8007496:	ab1d      	add	r3, sp, #116	; 0x74
 8007498:	9002      	str	r0, [sp, #8]
 800749a:	9006      	str	r0, [sp, #24]
 800749c:	9107      	str	r1, [sp, #28]
 800749e:	9104      	str	r1, [sp, #16]
 80074a0:	4808      	ldr	r0, [pc, #32]	; (80074c4 <siprintf+0x38>)
 80074a2:	4909      	ldr	r1, [pc, #36]	; (80074c8 <siprintf+0x3c>)
 80074a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a8:	9105      	str	r1, [sp, #20]
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	a902      	add	r1, sp, #8
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	f000 f868 	bl	8007584 <_svfiprintf_r>
 80074b4:	2200      	movs	r2, #0
 80074b6:	9b02      	ldr	r3, [sp, #8]
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	b01c      	add	sp, #112	; 0x70
 80074bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c0:	b003      	add	sp, #12
 80074c2:	4770      	bx	lr
 80074c4:	20000010 	.word	0x20000010
 80074c8:	ffff0208 	.word	0xffff0208

080074cc <__ssputs_r>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	688e      	ldr	r6, [r1, #8]
 80074d2:	4682      	mov	sl, r0
 80074d4:	429e      	cmp	r6, r3
 80074d6:	460c      	mov	r4, r1
 80074d8:	4690      	mov	r8, r2
 80074da:	461f      	mov	r7, r3
 80074dc:	d838      	bhi.n	8007550 <__ssputs_r+0x84>
 80074de:	898a      	ldrh	r2, [r1, #12]
 80074e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e4:	d032      	beq.n	800754c <__ssputs_r+0x80>
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	6909      	ldr	r1, [r1, #16]
 80074ea:	3301      	adds	r3, #1
 80074ec:	eba5 0901 	sub.w	r9, r5, r1
 80074f0:	6965      	ldr	r5, [r4, #20]
 80074f2:	444b      	add	r3, r9
 80074f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	429d      	cmp	r5, r3
 8007500:	bf38      	it	cc
 8007502:	461d      	movcc	r5, r3
 8007504:	0553      	lsls	r3, r2, #21
 8007506:	d531      	bpl.n	800756c <__ssputs_r+0xa0>
 8007508:	4629      	mov	r1, r5
 800750a:	f000 fb53 	bl	8007bb4 <_malloc_r>
 800750e:	4606      	mov	r6, r0
 8007510:	b950      	cbnz	r0, 8007528 <__ssputs_r+0x5c>
 8007512:	230c      	movs	r3, #12
 8007514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007518:	f8ca 3000 	str.w	r3, [sl]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	464a      	mov	r2, r9
 800752a:	6921      	ldr	r1, [r4, #16]
 800752c:	f000 face 	bl	8007acc <memcpy>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	444e      	add	r6, r9
 8007540:	6026      	str	r6, [r4, #0]
 8007542:	463e      	mov	r6, r7
 8007544:	6165      	str	r5, [r4, #20]
 8007546:	eba5 0509 	sub.w	r5, r5, r9
 800754a:	60a5      	str	r5, [r4, #8]
 800754c:	42be      	cmp	r6, r7
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x86>
 8007550:	463e      	mov	r6, r7
 8007552:	4632      	mov	r2, r6
 8007554:	4641      	mov	r1, r8
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	f000 fac6 	bl	8007ae8 <memmove>
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	1b9b      	subs	r3, r3, r6
 8007562:	4432      	add	r2, r6
 8007564:	2000      	movs	r0, #0
 8007566:	60a3      	str	r3, [r4, #8]
 8007568:	6022      	str	r2, [r4, #0]
 800756a:	e7db      	b.n	8007524 <__ssputs_r+0x58>
 800756c:	462a      	mov	r2, r5
 800756e:	f000 fb7b 	bl	8007c68 <_realloc_r>
 8007572:	4606      	mov	r6, r0
 8007574:	2800      	cmp	r0, #0
 8007576:	d1e1      	bne.n	800753c <__ssputs_r+0x70>
 8007578:	4650      	mov	r0, sl
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	f000 face 	bl	8007b1c <_free_r>
 8007580:	e7c7      	b.n	8007512 <__ssputs_r+0x46>
	...

08007584 <_svfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	4698      	mov	r8, r3
 800758a:	898b      	ldrh	r3, [r1, #12]
 800758c:	4607      	mov	r7, r0
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	460d      	mov	r5, r1
 8007592:	4614      	mov	r4, r2
 8007594:	b09d      	sub	sp, #116	; 0x74
 8007596:	d50e      	bpl.n	80075b6 <_svfiprintf_r+0x32>
 8007598:	690b      	ldr	r3, [r1, #16]
 800759a:	b963      	cbnz	r3, 80075b6 <_svfiprintf_r+0x32>
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	f000 fb09 	bl	8007bb4 <_malloc_r>
 80075a2:	6028      	str	r0, [r5, #0]
 80075a4:	6128      	str	r0, [r5, #16]
 80075a6:	b920      	cbnz	r0, 80075b2 <_svfiprintf_r+0x2e>
 80075a8:	230c      	movs	r3, #12
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b0:	e0d1      	b.n	8007756 <_svfiprintf_r+0x1d2>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	616b      	str	r3, [r5, #20]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	2320      	movs	r3, #32
 80075bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075c0:	2330      	movs	r3, #48	; 0x30
 80075c2:	f04f 0901 	mov.w	r9, #1
 80075c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007770 <_svfiprintf_r+0x1ec>
 80075ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075d2:	4623      	mov	r3, r4
 80075d4:	469a      	mov	sl, r3
 80075d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075da:	b10a      	cbz	r2, 80075e0 <_svfiprintf_r+0x5c>
 80075dc:	2a25      	cmp	r2, #37	; 0x25
 80075de:	d1f9      	bne.n	80075d4 <_svfiprintf_r+0x50>
 80075e0:	ebba 0b04 	subs.w	fp, sl, r4
 80075e4:	d00b      	beq.n	80075fe <_svfiprintf_r+0x7a>
 80075e6:	465b      	mov	r3, fp
 80075e8:	4622      	mov	r2, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ff6d 	bl	80074cc <__ssputs_r>
 80075f2:	3001      	adds	r0, #1
 80075f4:	f000 80aa 	beq.w	800774c <_svfiprintf_r+0x1c8>
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	445a      	add	r2, fp
 80075fc:	9209      	str	r2, [sp, #36]	; 0x24
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80a2 	beq.w	800774c <_svfiprintf_r+0x1c8>
 8007608:	2300      	movs	r3, #0
 800760a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800760e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007612:	f10a 0a01 	add.w	sl, sl, #1
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9307      	str	r3, [sp, #28]
 800761a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761e:	931a      	str	r3, [sp, #104]	; 0x68
 8007620:	4654      	mov	r4, sl
 8007622:	2205      	movs	r2, #5
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	4851      	ldr	r0, [pc, #324]	; (8007770 <_svfiprintf_r+0x1ec>)
 800762a:	f000 fa41 	bl	8007ab0 <memchr>
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	b9d8      	cbnz	r0, 800766a <_svfiprintf_r+0xe6>
 8007632:	06d0      	lsls	r0, r2, #27
 8007634:	bf44      	itt	mi
 8007636:	2320      	movmi	r3, #32
 8007638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763c:	0711      	lsls	r1, r2, #28
 800763e:	bf44      	itt	mi
 8007640:	232b      	movmi	r3, #43	; 0x2b
 8007642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007646:	f89a 3000 	ldrb.w	r3, [sl]
 800764a:	2b2a      	cmp	r3, #42	; 0x2a
 800764c:	d015      	beq.n	800767a <_svfiprintf_r+0xf6>
 800764e:	4654      	mov	r4, sl
 8007650:	2000      	movs	r0, #0
 8007652:	f04f 0c0a 	mov.w	ip, #10
 8007656:	9a07      	ldr	r2, [sp, #28]
 8007658:	4621      	mov	r1, r4
 800765a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765e:	3b30      	subs	r3, #48	; 0x30
 8007660:	2b09      	cmp	r3, #9
 8007662:	d94e      	bls.n	8007702 <_svfiprintf_r+0x17e>
 8007664:	b1b0      	cbz	r0, 8007694 <_svfiprintf_r+0x110>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e014      	b.n	8007694 <_svfiprintf_r+0x110>
 800766a:	eba0 0308 	sub.w	r3, r0, r8
 800766e:	fa09 f303 	lsl.w	r3, r9, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	46a2      	mov	sl, r4
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	e7d2      	b.n	8007620 <_svfiprintf_r+0x9c>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	1d19      	adds	r1, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	9103      	str	r1, [sp, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfbb      	ittet	lt
 8007686:	425b      	neglt	r3, r3
 8007688:	f042 0202 	orrlt.w	r2, r2, #2
 800768c:	9307      	strge	r3, [sp, #28]
 800768e:	9307      	strlt	r3, [sp, #28]
 8007690:	bfb8      	it	lt
 8007692:	9204      	strlt	r2, [sp, #16]
 8007694:	7823      	ldrb	r3, [r4, #0]
 8007696:	2b2e      	cmp	r3, #46	; 0x2e
 8007698:	d10c      	bne.n	80076b4 <_svfiprintf_r+0x130>
 800769a:	7863      	ldrb	r3, [r4, #1]
 800769c:	2b2a      	cmp	r3, #42	; 0x2a
 800769e:	d135      	bne.n	800770c <_svfiprintf_r+0x188>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	3402      	adds	r4, #2
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9203      	str	r2, [sp, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfb8      	it	lt
 80076ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007780 <_svfiprintf_r+0x1fc>
 80076b8:	2203      	movs	r2, #3
 80076ba:	4650      	mov	r0, sl
 80076bc:	7821      	ldrb	r1, [r4, #0]
 80076be:	f000 f9f7 	bl	8007ab0 <memchr>
 80076c2:	b140      	cbz	r0, 80076d6 <_svfiprintf_r+0x152>
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	eba0 000a 	sub.w	r0, r0, sl
 80076ca:	fa03 f000 	lsl.w	r0, r3, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	3401      	adds	r4, #1
 80076d2:	4303      	orrs	r3, r0
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076da:	2206      	movs	r2, #6
 80076dc:	4825      	ldr	r0, [pc, #148]	; (8007774 <_svfiprintf_r+0x1f0>)
 80076de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076e2:	f000 f9e5 	bl	8007ab0 <memchr>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d038      	beq.n	800775c <_svfiprintf_r+0x1d8>
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <_svfiprintf_r+0x1f4>)
 80076ec:	bb1b      	cbnz	r3, 8007736 <_svfiprintf_r+0x1b2>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	3308      	adds	r3, #8
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	4433      	add	r3, r6
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	e767      	b.n	80075d2 <_svfiprintf_r+0x4e>
 8007702:	460c      	mov	r4, r1
 8007704:	2001      	movs	r0, #1
 8007706:	fb0c 3202 	mla	r2, ip, r2, r3
 800770a:	e7a5      	b.n	8007658 <_svfiprintf_r+0xd4>
 800770c:	2300      	movs	r3, #0
 800770e:	f04f 0c0a 	mov.w	ip, #10
 8007712:	4619      	mov	r1, r3
 8007714:	3401      	adds	r4, #1
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	4620      	mov	r0, r4
 800771a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771e:	3a30      	subs	r2, #48	; 0x30
 8007720:	2a09      	cmp	r2, #9
 8007722:	d903      	bls.n	800772c <_svfiprintf_r+0x1a8>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0c5      	beq.n	80076b4 <_svfiprintf_r+0x130>
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	e7c3      	b.n	80076b4 <_svfiprintf_r+0x130>
 800772c:	4604      	mov	r4, r0
 800772e:	2301      	movs	r3, #1
 8007730:	fb0c 2101 	mla	r1, ip, r1, r2
 8007734:	e7f0      	b.n	8007718 <_svfiprintf_r+0x194>
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462a      	mov	r2, r5
 800773c:	4638      	mov	r0, r7
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <_svfiprintf_r+0x1f8>)
 8007740:	a904      	add	r1, sp, #16
 8007742:	f3af 8000 	nop.w
 8007746:	1c42      	adds	r2, r0, #1
 8007748:	4606      	mov	r6, r0
 800774a:	d1d6      	bne.n	80076fa <_svfiprintf_r+0x176>
 800774c:	89ab      	ldrh	r3, [r5, #12]
 800774e:	065b      	lsls	r3, r3, #25
 8007750:	f53f af2c 	bmi.w	80075ac <_svfiprintf_r+0x28>
 8007754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007756:	b01d      	add	sp, #116	; 0x74
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462a      	mov	r2, r5
 8007762:	4638      	mov	r0, r7
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <_svfiprintf_r+0x1f8>)
 8007766:	a904      	add	r1, sp, #16
 8007768:	f000 f87c 	bl	8007864 <_printf_i>
 800776c:	e7eb      	b.n	8007746 <_svfiprintf_r+0x1c2>
 800776e:	bf00      	nop
 8007770:	0800861c 	.word	0x0800861c
 8007774:	08008626 	.word	0x08008626
 8007778:	00000000 	.word	0x00000000
 800777c:	080074cd 	.word	0x080074cd
 8007780:	08008622 	.word	0x08008622

08007784 <_printf_common>:
 8007784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	4616      	mov	r6, r2
 800778a:	4699      	mov	r9, r3
 800778c:	688a      	ldr	r2, [r1, #8]
 800778e:	690b      	ldr	r3, [r1, #16]
 8007790:	4607      	mov	r7, r0
 8007792:	4293      	cmp	r3, r2
 8007794:	bfb8      	it	lt
 8007796:	4613      	movlt	r3, r2
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800779e:	460c      	mov	r4, r1
 80077a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a4:	b10a      	cbz	r2, 80077aa <_printf_common+0x26>
 80077a6:	3301      	adds	r3, #1
 80077a8:	6033      	str	r3, [r6, #0]
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	0699      	lsls	r1, r3, #26
 80077ae:	bf42      	ittt	mi
 80077b0:	6833      	ldrmi	r3, [r6, #0]
 80077b2:	3302      	addmi	r3, #2
 80077b4:	6033      	strmi	r3, [r6, #0]
 80077b6:	6825      	ldr	r5, [r4, #0]
 80077b8:	f015 0506 	ands.w	r5, r5, #6
 80077bc:	d106      	bne.n	80077cc <_printf_common+0x48>
 80077be:	f104 0a19 	add.w	sl, r4, #25
 80077c2:	68e3      	ldr	r3, [r4, #12]
 80077c4:	6832      	ldr	r2, [r6, #0]
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	dc28      	bgt.n	800781e <_printf_common+0x9a>
 80077cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077d0:	1e13      	subs	r3, r2, #0
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	bf18      	it	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	0692      	lsls	r2, r2, #26
 80077da:	d42d      	bmi.n	8007838 <_printf_common+0xb4>
 80077dc:	4649      	mov	r1, r9
 80077de:	4638      	mov	r0, r7
 80077e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077e4:	47c0      	blx	r8
 80077e6:	3001      	adds	r0, #1
 80077e8:	d020      	beq.n	800782c <_printf_common+0xa8>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	68e5      	ldr	r5, [r4, #12]
 80077ee:	f003 0306 	and.w	r3, r3, #6
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	bf18      	it	ne
 80077f6:	2500      	movne	r5, #0
 80077f8:	6832      	ldr	r2, [r6, #0]
 80077fa:	f04f 0600 	mov.w	r6, #0
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	bf08      	it	eq
 8007802:	1aad      	subeq	r5, r5, r2
 8007804:	6922      	ldr	r2, [r4, #16]
 8007806:	bf08      	it	eq
 8007808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800780c:	4293      	cmp	r3, r2
 800780e:	bfc4      	itt	gt
 8007810:	1a9b      	subgt	r3, r3, r2
 8007812:	18ed      	addgt	r5, r5, r3
 8007814:	341a      	adds	r4, #26
 8007816:	42b5      	cmp	r5, r6
 8007818:	d11a      	bne.n	8007850 <_printf_common+0xcc>
 800781a:	2000      	movs	r0, #0
 800781c:	e008      	b.n	8007830 <_printf_common+0xac>
 800781e:	2301      	movs	r3, #1
 8007820:	4652      	mov	r2, sl
 8007822:	4649      	mov	r1, r9
 8007824:	4638      	mov	r0, r7
 8007826:	47c0      	blx	r8
 8007828:	3001      	adds	r0, #1
 800782a:	d103      	bne.n	8007834 <_printf_common+0xb0>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	3501      	adds	r5, #1
 8007836:	e7c4      	b.n	80077c2 <_printf_common+0x3e>
 8007838:	2030      	movs	r0, #48	; 0x30
 800783a:	18e1      	adds	r1, r4, r3
 800783c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007846:	4422      	add	r2, r4
 8007848:	3302      	adds	r3, #2
 800784a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800784e:	e7c5      	b.n	80077dc <_printf_common+0x58>
 8007850:	2301      	movs	r3, #1
 8007852:	4622      	mov	r2, r4
 8007854:	4649      	mov	r1, r9
 8007856:	4638      	mov	r0, r7
 8007858:	47c0      	blx	r8
 800785a:	3001      	adds	r0, #1
 800785c:	d0e6      	beq.n	800782c <_printf_common+0xa8>
 800785e:	3601      	adds	r6, #1
 8007860:	e7d9      	b.n	8007816 <_printf_common+0x92>
	...

08007864 <_printf_i>:
 8007864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	460c      	mov	r4, r1
 800786a:	7e27      	ldrb	r7, [r4, #24]
 800786c:	4691      	mov	r9, r2
 800786e:	2f78      	cmp	r7, #120	; 0x78
 8007870:	4680      	mov	r8, r0
 8007872:	469a      	mov	sl, r3
 8007874:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800787a:	d807      	bhi.n	800788c <_printf_i+0x28>
 800787c:	2f62      	cmp	r7, #98	; 0x62
 800787e:	d80a      	bhi.n	8007896 <_printf_i+0x32>
 8007880:	2f00      	cmp	r7, #0
 8007882:	f000 80d9 	beq.w	8007a38 <_printf_i+0x1d4>
 8007886:	2f58      	cmp	r7, #88	; 0x58
 8007888:	f000 80a4 	beq.w	80079d4 <_printf_i+0x170>
 800788c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007894:	e03a      	b.n	800790c <_printf_i+0xa8>
 8007896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800789a:	2b15      	cmp	r3, #21
 800789c:	d8f6      	bhi.n	800788c <_printf_i+0x28>
 800789e:	a001      	add	r0, pc, #4	; (adr r0, 80078a4 <_printf_i+0x40>)
 80078a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078a4:	080078fd 	.word	0x080078fd
 80078a8:	08007911 	.word	0x08007911
 80078ac:	0800788d 	.word	0x0800788d
 80078b0:	0800788d 	.word	0x0800788d
 80078b4:	0800788d 	.word	0x0800788d
 80078b8:	0800788d 	.word	0x0800788d
 80078bc:	08007911 	.word	0x08007911
 80078c0:	0800788d 	.word	0x0800788d
 80078c4:	0800788d 	.word	0x0800788d
 80078c8:	0800788d 	.word	0x0800788d
 80078cc:	0800788d 	.word	0x0800788d
 80078d0:	08007a1f 	.word	0x08007a1f
 80078d4:	08007941 	.word	0x08007941
 80078d8:	08007a01 	.word	0x08007a01
 80078dc:	0800788d 	.word	0x0800788d
 80078e0:	0800788d 	.word	0x0800788d
 80078e4:	08007a41 	.word	0x08007a41
 80078e8:	0800788d 	.word	0x0800788d
 80078ec:	08007941 	.word	0x08007941
 80078f0:	0800788d 	.word	0x0800788d
 80078f4:	0800788d 	.word	0x0800788d
 80078f8:	08007a09 	.word	0x08007a09
 80078fc:	680b      	ldr	r3, [r1, #0]
 80078fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007902:	1d1a      	adds	r2, r3, #4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	600a      	str	r2, [r1, #0]
 8007908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800790c:	2301      	movs	r3, #1
 800790e:	e0a4      	b.n	8007a5a <_printf_i+0x1f6>
 8007910:	6825      	ldr	r5, [r4, #0]
 8007912:	6808      	ldr	r0, [r1, #0]
 8007914:	062e      	lsls	r6, r5, #24
 8007916:	f100 0304 	add.w	r3, r0, #4
 800791a:	d50a      	bpl.n	8007932 <_printf_i+0xce>
 800791c:	6805      	ldr	r5, [r0, #0]
 800791e:	600b      	str	r3, [r1, #0]
 8007920:	2d00      	cmp	r5, #0
 8007922:	da03      	bge.n	800792c <_printf_i+0xc8>
 8007924:	232d      	movs	r3, #45	; 0x2d
 8007926:	426d      	negs	r5, r5
 8007928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792c:	230a      	movs	r3, #10
 800792e:	485e      	ldr	r0, [pc, #376]	; (8007aa8 <_printf_i+0x244>)
 8007930:	e019      	b.n	8007966 <_printf_i+0x102>
 8007932:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007936:	6805      	ldr	r5, [r0, #0]
 8007938:	600b      	str	r3, [r1, #0]
 800793a:	bf18      	it	ne
 800793c:	b22d      	sxthne	r5, r5
 800793e:	e7ef      	b.n	8007920 <_printf_i+0xbc>
 8007940:	680b      	ldr	r3, [r1, #0]
 8007942:	6825      	ldr	r5, [r4, #0]
 8007944:	1d18      	adds	r0, r3, #4
 8007946:	6008      	str	r0, [r1, #0]
 8007948:	0628      	lsls	r0, r5, #24
 800794a:	d501      	bpl.n	8007950 <_printf_i+0xec>
 800794c:	681d      	ldr	r5, [r3, #0]
 800794e:	e002      	b.n	8007956 <_printf_i+0xf2>
 8007950:	0669      	lsls	r1, r5, #25
 8007952:	d5fb      	bpl.n	800794c <_printf_i+0xe8>
 8007954:	881d      	ldrh	r5, [r3, #0]
 8007956:	2f6f      	cmp	r7, #111	; 0x6f
 8007958:	bf0c      	ite	eq
 800795a:	2308      	moveq	r3, #8
 800795c:	230a      	movne	r3, #10
 800795e:	4852      	ldr	r0, [pc, #328]	; (8007aa8 <_printf_i+0x244>)
 8007960:	2100      	movs	r1, #0
 8007962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007966:	6866      	ldr	r6, [r4, #4]
 8007968:	2e00      	cmp	r6, #0
 800796a:	bfa8      	it	ge
 800796c:	6821      	ldrge	r1, [r4, #0]
 800796e:	60a6      	str	r6, [r4, #8]
 8007970:	bfa4      	itt	ge
 8007972:	f021 0104 	bicge.w	r1, r1, #4
 8007976:	6021      	strge	r1, [r4, #0]
 8007978:	b90d      	cbnz	r5, 800797e <_printf_i+0x11a>
 800797a:	2e00      	cmp	r6, #0
 800797c:	d04d      	beq.n	8007a1a <_printf_i+0x1b6>
 800797e:	4616      	mov	r6, r2
 8007980:	fbb5 f1f3 	udiv	r1, r5, r3
 8007984:	fb03 5711 	mls	r7, r3, r1, r5
 8007988:	5dc7      	ldrb	r7, [r0, r7]
 800798a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800798e:	462f      	mov	r7, r5
 8007990:	42bb      	cmp	r3, r7
 8007992:	460d      	mov	r5, r1
 8007994:	d9f4      	bls.n	8007980 <_printf_i+0x11c>
 8007996:	2b08      	cmp	r3, #8
 8007998:	d10b      	bne.n	80079b2 <_printf_i+0x14e>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	07df      	lsls	r7, r3, #31
 800799e:	d508      	bpl.n	80079b2 <_printf_i+0x14e>
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	6861      	ldr	r1, [r4, #4]
 80079a4:	4299      	cmp	r1, r3
 80079a6:	bfde      	ittt	le
 80079a8:	2330      	movle	r3, #48	; 0x30
 80079aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079ae:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80079b2:	1b92      	subs	r2, r2, r6
 80079b4:	6122      	str	r2, [r4, #16]
 80079b6:	464b      	mov	r3, r9
 80079b8:	4621      	mov	r1, r4
 80079ba:	4640      	mov	r0, r8
 80079bc:	f8cd a000 	str.w	sl, [sp]
 80079c0:	aa03      	add	r2, sp, #12
 80079c2:	f7ff fedf 	bl	8007784 <_printf_common>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d14c      	bne.n	8007a64 <_printf_i+0x200>
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ce:	b004      	add	sp, #16
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	4834      	ldr	r0, [pc, #208]	; (8007aa8 <_printf_i+0x244>)
 80079d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079da:	680e      	ldr	r6, [r1, #0]
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f856 5b04 	ldr.w	r5, [r6], #4
 80079e2:	061f      	lsls	r7, r3, #24
 80079e4:	600e      	str	r6, [r1, #0]
 80079e6:	d514      	bpl.n	8007a12 <_printf_i+0x1ae>
 80079e8:	07d9      	lsls	r1, r3, #31
 80079ea:	bf44      	itt	mi
 80079ec:	f043 0320 	orrmi.w	r3, r3, #32
 80079f0:	6023      	strmi	r3, [r4, #0]
 80079f2:	b91d      	cbnz	r5, 80079fc <_printf_i+0x198>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	f023 0320 	bic.w	r3, r3, #32
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	2310      	movs	r3, #16
 80079fe:	e7af      	b.n	8007960 <_printf_i+0xfc>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f043 0320 	orr.w	r3, r3, #32
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	2378      	movs	r3, #120	; 0x78
 8007a0a:	4828      	ldr	r0, [pc, #160]	; (8007aac <_printf_i+0x248>)
 8007a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a10:	e7e3      	b.n	80079da <_printf_i+0x176>
 8007a12:	065e      	lsls	r6, r3, #25
 8007a14:	bf48      	it	mi
 8007a16:	b2ad      	uxthmi	r5, r5
 8007a18:	e7e6      	b.n	80079e8 <_printf_i+0x184>
 8007a1a:	4616      	mov	r6, r2
 8007a1c:	e7bb      	b.n	8007996 <_printf_i+0x132>
 8007a1e:	680b      	ldr	r3, [r1, #0]
 8007a20:	6826      	ldr	r6, [r4, #0]
 8007a22:	1d1d      	adds	r5, r3, #4
 8007a24:	6960      	ldr	r0, [r4, #20]
 8007a26:	600d      	str	r5, [r1, #0]
 8007a28:	0635      	lsls	r5, r6, #24
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	d501      	bpl.n	8007a32 <_printf_i+0x1ce>
 8007a2e:	6018      	str	r0, [r3, #0]
 8007a30:	e002      	b.n	8007a38 <_printf_i+0x1d4>
 8007a32:	0671      	lsls	r1, r6, #25
 8007a34:	d5fb      	bpl.n	8007a2e <_printf_i+0x1ca>
 8007a36:	8018      	strh	r0, [r3, #0]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4616      	mov	r6, r2
 8007a3c:	6123      	str	r3, [r4, #16]
 8007a3e:	e7ba      	b.n	80079b6 <_printf_i+0x152>
 8007a40:	680b      	ldr	r3, [r1, #0]
 8007a42:	1d1a      	adds	r2, r3, #4
 8007a44:	600a      	str	r2, [r1, #0]
 8007a46:	681e      	ldr	r6, [r3, #0]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	6862      	ldr	r2, [r4, #4]
 8007a4e:	f000 f82f 	bl	8007ab0 <memchr>
 8007a52:	b108      	cbz	r0, 8007a58 <_printf_i+0x1f4>
 8007a54:	1b80      	subs	r0, r0, r6
 8007a56:	6060      	str	r0, [r4, #4]
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a62:	e7a8      	b.n	80079b6 <_printf_i+0x152>
 8007a64:	4632      	mov	r2, r6
 8007a66:	4649      	mov	r1, r9
 8007a68:	4640      	mov	r0, r8
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	47d0      	blx	sl
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d0ab      	beq.n	80079ca <_printf_i+0x166>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	079b      	lsls	r3, r3, #30
 8007a76:	d413      	bmi.n	8007aa0 <_printf_i+0x23c>
 8007a78:	68e0      	ldr	r0, [r4, #12]
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	bfb8      	it	lt
 8007a80:	4618      	movlt	r0, r3
 8007a82:	e7a4      	b.n	80079ce <_printf_i+0x16a>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4632      	mov	r2, r6
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	47d0      	blx	sl
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d09b      	beq.n	80079ca <_printf_i+0x166>
 8007a92:	3501      	adds	r5, #1
 8007a94:	68e3      	ldr	r3, [r4, #12]
 8007a96:	9903      	ldr	r1, [sp, #12]
 8007a98:	1a5b      	subs	r3, r3, r1
 8007a9a:	42ab      	cmp	r3, r5
 8007a9c:	dcf2      	bgt.n	8007a84 <_printf_i+0x220>
 8007a9e:	e7eb      	b.n	8007a78 <_printf_i+0x214>
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	f104 0619 	add.w	r6, r4, #25
 8007aa6:	e7f5      	b.n	8007a94 <_printf_i+0x230>
 8007aa8:	0800862d 	.word	0x0800862d
 8007aac:	0800863e 	.word	0x0800863e

08007ab0 <memchr>:
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	b2c9      	uxtb	r1, r1
 8007ab6:	4402      	add	r2, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	d101      	bne.n	8007ac2 <memchr+0x12>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e003      	b.n	8007aca <memchr+0x1a>
 8007ac2:	7804      	ldrb	r4, [r0, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	428c      	cmp	r4, r1
 8007ac8:	d1f6      	bne.n	8007ab8 <memchr+0x8>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <memcpy>:
 8007acc:	440a      	add	r2, r1
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ad4:	d100      	bne.n	8007ad8 <memcpy+0xc>
 8007ad6:	4770      	bx	lr
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ade:	4291      	cmp	r1, r2
 8007ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae4:	d1f9      	bne.n	8007ada <memcpy+0xe>
 8007ae6:	bd10      	pop	{r4, pc}

08007ae8 <memmove>:
 8007ae8:	4288      	cmp	r0, r1
 8007aea:	b510      	push	{r4, lr}
 8007aec:	eb01 0402 	add.w	r4, r1, r2
 8007af0:	d902      	bls.n	8007af8 <memmove+0x10>
 8007af2:	4284      	cmp	r4, r0
 8007af4:	4623      	mov	r3, r4
 8007af6:	d807      	bhi.n	8007b08 <memmove+0x20>
 8007af8:	1e43      	subs	r3, r0, #1
 8007afa:	42a1      	cmp	r1, r4
 8007afc:	d008      	beq.n	8007b10 <memmove+0x28>
 8007afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b06:	e7f8      	b.n	8007afa <memmove+0x12>
 8007b08:	4601      	mov	r1, r0
 8007b0a:	4402      	add	r2, r0
 8007b0c:	428a      	cmp	r2, r1
 8007b0e:	d100      	bne.n	8007b12 <memmove+0x2a>
 8007b10:	bd10      	pop	{r4, pc}
 8007b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b1a:	e7f7      	b.n	8007b0c <memmove+0x24>

08007b1c <_free_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4605      	mov	r5, r0
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d043      	beq.n	8007bac <_free_r+0x90>
 8007b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b28:	1f0c      	subs	r4, r1, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfb8      	it	lt
 8007b2e:	18e4      	addlt	r4, r4, r3
 8007b30:	f000 f8d0 	bl	8007cd4 <__malloc_lock>
 8007b34:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <_free_r+0x94>)
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	4610      	mov	r0, r2
 8007b3a:	b933      	cbnz	r3, 8007b4a <_free_r+0x2e>
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	6014      	str	r4, [r2, #0]
 8007b40:	4628      	mov	r0, r5
 8007b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b46:	f000 b8cb 	b.w	8007ce0 <__malloc_unlock>
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d90a      	bls.n	8007b64 <_free_r+0x48>
 8007b4e:	6821      	ldr	r1, [r4, #0]
 8007b50:	1862      	adds	r2, r4, r1
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bf01      	itttt	eq
 8007b56:	681a      	ldreq	r2, [r3, #0]
 8007b58:	685b      	ldreq	r3, [r3, #4]
 8007b5a:	1852      	addeq	r2, r2, r1
 8007b5c:	6022      	streq	r2, [r4, #0]
 8007b5e:	6063      	str	r3, [r4, #4]
 8007b60:	6004      	str	r4, [r0, #0]
 8007b62:	e7ed      	b.n	8007b40 <_free_r+0x24>
 8007b64:	461a      	mov	r2, r3
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	b10b      	cbz	r3, 8007b6e <_free_r+0x52>
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	d9fa      	bls.n	8007b64 <_free_r+0x48>
 8007b6e:	6811      	ldr	r1, [r2, #0]
 8007b70:	1850      	adds	r0, r2, r1
 8007b72:	42a0      	cmp	r0, r4
 8007b74:	d10b      	bne.n	8007b8e <_free_r+0x72>
 8007b76:	6820      	ldr	r0, [r4, #0]
 8007b78:	4401      	add	r1, r0
 8007b7a:	1850      	adds	r0, r2, r1
 8007b7c:	4283      	cmp	r3, r0
 8007b7e:	6011      	str	r1, [r2, #0]
 8007b80:	d1de      	bne.n	8007b40 <_free_r+0x24>
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	4401      	add	r1, r0
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	6053      	str	r3, [r2, #4]
 8007b8c:	e7d8      	b.n	8007b40 <_free_r+0x24>
 8007b8e:	d902      	bls.n	8007b96 <_free_r+0x7a>
 8007b90:	230c      	movs	r3, #12
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	e7d4      	b.n	8007b40 <_free_r+0x24>
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	1821      	adds	r1, r4, r0
 8007b9a:	428b      	cmp	r3, r1
 8007b9c:	bf01      	itttt	eq
 8007b9e:	6819      	ldreq	r1, [r3, #0]
 8007ba0:	685b      	ldreq	r3, [r3, #4]
 8007ba2:	1809      	addeq	r1, r1, r0
 8007ba4:	6021      	streq	r1, [r4, #0]
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6054      	str	r4, [r2, #4]
 8007baa:	e7c9      	b.n	8007b40 <_free_r+0x24>
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	200000a8 	.word	0x200000a8

08007bb4 <_malloc_r>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	1ccd      	adds	r5, r1, #3
 8007bb8:	f025 0503 	bic.w	r5, r5, #3
 8007bbc:	3508      	adds	r5, #8
 8007bbe:	2d0c      	cmp	r5, #12
 8007bc0:	bf38      	it	cc
 8007bc2:	250c      	movcc	r5, #12
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	db01      	blt.n	8007bce <_malloc_r+0x1a>
 8007bca:	42a9      	cmp	r1, r5
 8007bcc:	d903      	bls.n	8007bd6 <_malloc_r+0x22>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd6:	f000 f87d 	bl	8007cd4 <__malloc_lock>
 8007bda:	4921      	ldr	r1, [pc, #132]	; (8007c60 <_malloc_r+0xac>)
 8007bdc:	680a      	ldr	r2, [r1, #0]
 8007bde:	4614      	mov	r4, r2
 8007be0:	b99c      	cbnz	r4, 8007c0a <_malloc_r+0x56>
 8007be2:	4f20      	ldr	r7, [pc, #128]	; (8007c64 <_malloc_r+0xb0>)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	b923      	cbnz	r3, 8007bf2 <_malloc_r+0x3e>
 8007be8:	4621      	mov	r1, r4
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 f862 	bl	8007cb4 <_sbrk_r>
 8007bf0:	6038      	str	r0, [r7, #0]
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f000 f85d 	bl	8007cb4 <_sbrk_r>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	d123      	bne.n	8007c46 <_malloc_r+0x92>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	4630      	mov	r0, r6
 8007c02:	6033      	str	r3, [r6, #0]
 8007c04:	f000 f86c 	bl	8007ce0 <__malloc_unlock>
 8007c08:	e7e3      	b.n	8007bd2 <_malloc_r+0x1e>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	1b5b      	subs	r3, r3, r5
 8007c0e:	d417      	bmi.n	8007c40 <_malloc_r+0x8c>
 8007c10:	2b0b      	cmp	r3, #11
 8007c12:	d903      	bls.n	8007c1c <_malloc_r+0x68>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	441c      	add	r4, r3
 8007c18:	6025      	str	r5, [r4, #0]
 8007c1a:	e004      	b.n	8007c26 <_malloc_r+0x72>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	42a2      	cmp	r2, r4
 8007c20:	bf0c      	ite	eq
 8007c22:	600b      	streq	r3, [r1, #0]
 8007c24:	6053      	strne	r3, [r2, #4]
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 f85a 	bl	8007ce0 <__malloc_unlock>
 8007c2c:	f104 000b 	add.w	r0, r4, #11
 8007c30:	1d23      	adds	r3, r4, #4
 8007c32:	f020 0007 	bic.w	r0, r0, #7
 8007c36:	1ac2      	subs	r2, r0, r3
 8007c38:	d0cc      	beq.n	8007bd4 <_malloc_r+0x20>
 8007c3a:	1a1b      	subs	r3, r3, r0
 8007c3c:	50a3      	str	r3, [r4, r2]
 8007c3e:	e7c9      	b.n	8007bd4 <_malloc_r+0x20>
 8007c40:	4622      	mov	r2, r4
 8007c42:	6864      	ldr	r4, [r4, #4]
 8007c44:	e7cc      	b.n	8007be0 <_malloc_r+0x2c>
 8007c46:	1cc4      	adds	r4, r0, #3
 8007c48:	f024 0403 	bic.w	r4, r4, #3
 8007c4c:	42a0      	cmp	r0, r4
 8007c4e:	d0e3      	beq.n	8007c18 <_malloc_r+0x64>
 8007c50:	1a21      	subs	r1, r4, r0
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 f82e 	bl	8007cb4 <_sbrk_r>
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d1dd      	bne.n	8007c18 <_malloc_r+0x64>
 8007c5c:	e7cf      	b.n	8007bfe <_malloc_r+0x4a>
 8007c5e:	bf00      	nop
 8007c60:	200000a8 	.word	0x200000a8
 8007c64:	200000ac 	.word	0x200000ac

08007c68 <_realloc_r>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	460e      	mov	r6, r1
 8007c70:	b921      	cbnz	r1, 8007c7c <_realloc_r+0x14>
 8007c72:	4611      	mov	r1, r2
 8007c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c78:	f7ff bf9c 	b.w	8007bb4 <_malloc_r>
 8007c7c:	b922      	cbnz	r2, 8007c88 <_realloc_r+0x20>
 8007c7e:	f7ff ff4d 	bl	8007b1c <_free_r>
 8007c82:	4625      	mov	r5, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c88:	f000 f830 	bl	8007cec <_malloc_usable_size_r>
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d20f      	bcs.n	8007cb0 <_realloc_r+0x48>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4638      	mov	r0, r7
 8007c94:	f7ff ff8e 	bl	8007bb4 <_malloc_r>
 8007c98:	4605      	mov	r5, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0f2      	beq.n	8007c84 <_realloc_r+0x1c>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	f7ff ff13 	bl	8007acc <memcpy>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ff37 	bl	8007b1c <_free_r>
 8007cae:	e7e9      	b.n	8007c84 <_realloc_r+0x1c>
 8007cb0:	4635      	mov	r5, r6
 8007cb2:	e7e7      	b.n	8007c84 <_realloc_r+0x1c>

08007cb4 <_sbrk_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4d05      	ldr	r5, [pc, #20]	; (8007cd0 <_sbrk_r+0x1c>)
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7fc fa3c 	bl	800413c <_sbrk>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_sbrk_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_sbrk_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	200002b4 	.word	0x200002b4

08007cd4 <__malloc_lock>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__malloc_lock+0x8>)
 8007cd6:	f000 b811 	b.w	8007cfc <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200002bc 	.word	0x200002bc

08007ce0 <__malloc_unlock>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__malloc_unlock+0x8>)
 8007ce2:	f000 b80c 	b.w	8007cfe <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	200002bc 	.word	0x200002bc

08007cec <_malloc_usable_size_r>:
 8007cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf0:	1f18      	subs	r0, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfbc      	itt	lt
 8007cf6:	580b      	ldrlt	r3, [r1, r0]
 8007cf8:	18c0      	addlt	r0, r0, r3
 8007cfa:	4770      	bx	lr

08007cfc <__retarget_lock_acquire_recursive>:
 8007cfc:	4770      	bx	lr

08007cfe <__retarget_lock_release_recursive>:
 8007cfe:	4770      	bx	lr

08007d00 <sqrt>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	4606      	mov	r6, r0
 8007d04:	460f      	mov	r7, r1
 8007d06:	f000 f84f 	bl	8007da8 <__ieee754_sqrt>
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <sqrt+0x54>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8007d12:	460d      	mov	r5, r1
 8007d14:	3301      	adds	r3, #1
 8007d16:	d019      	beq.n	8007d4c <sqrt+0x4c>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 fe72 	bl	8000a08 <__aeabi_dcmpun>
 8007d24:	b990      	cbnz	r0, 8007d4c <sqrt+0x4c>
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fe43 	bl	80009b8 <__aeabi_dcmplt>
 8007d32:	b158      	cbz	r0, 8007d4c <sqrt+0x4c>
 8007d34:	f7ff fb78 	bl	8007428 <__errno>
 8007d38:	2321      	movs	r3, #33	; 0x21
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7f8 fcf0 	bl	8000728 <__aeabi_ddiv>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000074 	.word	0x20000074

08007d58 <asinf>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	f000 f8d0 	bl	8007f00 <__ieee754_asinf>
 8007d60:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <asinf+0x44>)
 8007d62:	4605      	mov	r5, r0
 8007d64:	f993 3000 	ldrsb.w	r3, [r3]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	d015      	beq.n	8007d98 <asinf+0x40>
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7f9 f97c 	bl	800106c <__aeabi_fcmpun>
 8007d74:	b980      	cbnz	r0, 8007d98 <asinf+0x40>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fbea 	bl	8008550 <fabsf>
 8007d7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007d80:	f7f9 f96a 	bl	8001058 <__aeabi_fcmpgt>
 8007d84:	b140      	cbz	r0, 8007d98 <asinf+0x40>
 8007d86:	f7ff fb4f 	bl	8007428 <__errno>
 8007d8a:	2321      	movs	r3, #33	; 0x21
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	4804      	ldr	r0, [pc, #16]	; (8007da0 <asinf+0x48>)
 8007d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d94:	f000 bbe0 	b.w	8008558 <nanf>
 8007d98:	4628      	mov	r0, r5
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20000074 	.word	0x20000074
 8007da0:	08008621 	.word	0x08008621

08007da4 <atan2f>:
 8007da4:	f000 b9f0 	b.w	8008188 <__ieee754_atan2f>

08007da8 <__ieee754_sqrt>:
 8007da8:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007efc <__ieee754_sqrt+0x154>
 8007dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db0:	ea3c 0c01 	bics.w	ip, ip, r1
 8007db4:	460b      	mov	r3, r1
 8007db6:	4606      	mov	r6, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	460a      	mov	r2, r1
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	d10e      	bne.n	8007de0 <__ieee754_sqrt+0x38>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	f7f8 fb86 	bl	80004d4 <__aeabi_dmul>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 f9ca 	bl	8000168 <__adddf3>
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4629      	mov	r1, r5
 8007ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de0:	2900      	cmp	r1, #0
 8007de2:	dc0d      	bgt.n	8007e00 <__ieee754_sqrt+0x58>
 8007de4:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007de8:	ea5c 0707 	orrs.w	r7, ip, r7
 8007dec:	d0f4      	beq.n	8007dd8 <__ieee754_sqrt+0x30>
 8007dee:	b139      	cbz	r1, 8007e00 <__ieee754_sqrt+0x58>
 8007df0:	4602      	mov	r2, r0
 8007df2:	f7f8 f9b7 	bl	8000164 <__aeabi_dsub>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	f7f8 fc95 	bl	8000728 <__aeabi_ddiv>
 8007dfe:	e7e9      	b.n	8007dd4 <__ieee754_sqrt+0x2c>
 8007e00:	1512      	asrs	r2, r2, #20
 8007e02:	d074      	beq.n	8007eee <__ieee754_sqrt+0x146>
 8007e04:	2000      	movs	r0, #0
 8007e06:	07d5      	lsls	r5, r2, #31
 8007e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e0c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8007e10:	bf5e      	ittt	pl
 8007e12:	0fe3      	lsrpl	r3, r4, #31
 8007e14:	0064      	lslpl	r4, r4, #1
 8007e16:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007e1a:	0fe3      	lsrs	r3, r4, #31
 8007e1c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007e20:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007e24:	2516      	movs	r5, #22
 8007e26:	4601      	mov	r1, r0
 8007e28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007e2c:	1076      	asrs	r6, r6, #1
 8007e2e:	0064      	lsls	r4, r4, #1
 8007e30:	188f      	adds	r7, r1, r2
 8007e32:	429f      	cmp	r7, r3
 8007e34:	bfde      	ittt	le
 8007e36:	1bdb      	suble	r3, r3, r7
 8007e38:	18b9      	addle	r1, r7, r2
 8007e3a:	1880      	addle	r0, r0, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	3d01      	subs	r5, #1
 8007e40:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007e44:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007e48:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e4c:	d1f0      	bne.n	8007e30 <__ieee754_sqrt+0x88>
 8007e4e:	462a      	mov	r2, r5
 8007e50:	f04f 0e20 	mov.w	lr, #32
 8007e54:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	eb07 0c05 	add.w	ip, r7, r5
 8007e5e:	dc02      	bgt.n	8007e66 <__ieee754_sqrt+0xbe>
 8007e60:	d113      	bne.n	8007e8a <__ieee754_sqrt+0xe2>
 8007e62:	45a4      	cmp	ip, r4
 8007e64:	d811      	bhi.n	8007e8a <__ieee754_sqrt+0xe2>
 8007e66:	f1bc 0f00 	cmp.w	ip, #0
 8007e6a:	eb0c 0507 	add.w	r5, ip, r7
 8007e6e:	da43      	bge.n	8007ef8 <__ieee754_sqrt+0x150>
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	db41      	blt.n	8007ef8 <__ieee754_sqrt+0x150>
 8007e74:	f101 0801 	add.w	r8, r1, #1
 8007e78:	1a5b      	subs	r3, r3, r1
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	45a4      	cmp	ip, r4
 8007e7e:	bf88      	it	hi
 8007e80:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007e84:	eba4 040c 	sub.w	r4, r4, ip
 8007e88:	443a      	add	r2, r7
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	f1be 0e01 	subs.w	lr, lr, #1
 8007e90:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007e94:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007e98:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e9c:	d1dc      	bne.n	8007e58 <__ieee754_sqrt+0xb0>
 8007e9e:	4323      	orrs	r3, r4
 8007ea0:	d006      	beq.n	8007eb0 <__ieee754_sqrt+0x108>
 8007ea2:	1c54      	adds	r4, r2, #1
 8007ea4:	bf0b      	itete	eq
 8007ea6:	4672      	moveq	r2, lr
 8007ea8:	3201      	addne	r2, #1
 8007eaa:	3001      	addeq	r0, #1
 8007eac:	f022 0201 	bicne.w	r2, r2, #1
 8007eb0:	1043      	asrs	r3, r0, #1
 8007eb2:	07c1      	lsls	r1, r0, #31
 8007eb4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007eb8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ebc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007ec0:	bf48      	it	mi
 8007ec2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007ecc:	e782      	b.n	8007dd4 <__ieee754_sqrt+0x2c>
 8007ece:	0ae3      	lsrs	r3, r4, #11
 8007ed0:	3915      	subs	r1, #21
 8007ed2:	0564      	lsls	r4, r4, #21
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0fa      	beq.n	8007ece <__ieee754_sqrt+0x126>
 8007ed8:	02de      	lsls	r6, r3, #11
 8007eda:	d50a      	bpl.n	8007ef2 <__ieee754_sqrt+0x14a>
 8007edc:	f1c2 0020 	rsb	r0, r2, #32
 8007ee0:	fa24 f000 	lsr.w	r0, r4, r0
 8007ee4:	1e55      	subs	r5, r2, #1
 8007ee6:	4094      	lsls	r4, r2
 8007ee8:	4303      	orrs	r3, r0
 8007eea:	1b4a      	subs	r2, r1, r5
 8007eec:	e78a      	b.n	8007e04 <__ieee754_sqrt+0x5c>
 8007eee:	4611      	mov	r1, r2
 8007ef0:	e7f0      	b.n	8007ed4 <__ieee754_sqrt+0x12c>
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	3201      	adds	r2, #1
 8007ef6:	e7ef      	b.n	8007ed8 <__ieee754_sqrt+0x130>
 8007ef8:	4688      	mov	r8, r1
 8007efa:	e7bd      	b.n	8007e78 <__ieee754_sqrt+0xd0>
 8007efc:	7ff00000 	.word	0x7ff00000

08007f00 <__ieee754_asinf>:
 8007f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007f08:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	4605      	mov	r5, r0
 8007f10:	d10c      	bne.n	8007f2c <__ieee754_asinf+0x2c>
 8007f12:	498d      	ldr	r1, [pc, #564]	; (8008148 <__ieee754_asinf+0x248>)
 8007f14:	f7f8 fee4 	bl	8000ce0 <__aeabi_fmul>
 8007f18:	498c      	ldr	r1, [pc, #560]	; (800814c <__ieee754_asinf+0x24c>)
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f7f8 fedf 	bl	8000ce0 <__aeabi_fmul>
 8007f22:	4601      	mov	r1, r0
 8007f24:	4628      	mov	r0, r5
 8007f26:	f7f8 fdd3 	bl	8000ad0 <__addsf3>
 8007f2a:	e006      	b.n	8007f3a <__ieee754_asinf+0x3a>
 8007f2c:	dd07      	ble.n	8007f3e <__ieee754_asinf+0x3e>
 8007f2e:	4601      	mov	r1, r0
 8007f30:	f7f8 fdcc 	bl	8000acc <__aeabi_fsub>
 8007f34:	4601      	mov	r1, r0
 8007f36:	f7f8 ff87 	bl	8000e48 <__aeabi_fdiv>
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	e00e      	b.n	8007f5c <__ieee754_asinf+0x5c>
 8007f3e:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8007f42:	da58      	bge.n	8007ff6 <__ieee754_asinf+0xf6>
 8007f44:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8007f48:	da0b      	bge.n	8007f62 <__ieee754_asinf+0x62>
 8007f4a:	4981      	ldr	r1, [pc, #516]	; (8008150 <__ieee754_asinf+0x250>)
 8007f4c:	f7f8 fdc0 	bl	8000ad0 <__addsf3>
 8007f50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f54:	f7f9 f880 	bl	8001058 <__aeabi_fcmpgt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d04c      	beq.n	8007ff6 <__ieee754_asinf+0xf6>
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	4601      	mov	r1, r0
 8007f64:	f7f8 febc 	bl	8000ce0 <__aeabi_fmul>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	497a      	ldr	r1, [pc, #488]	; (8008154 <__ieee754_asinf+0x254>)
 8007f6c:	f7f8 feb8 	bl	8000ce0 <__aeabi_fmul>
 8007f70:	4979      	ldr	r1, [pc, #484]	; (8008158 <__ieee754_asinf+0x258>)
 8007f72:	f7f8 fdad 	bl	8000ad0 <__addsf3>
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 feb2 	bl	8000ce0 <__aeabi_fmul>
 8007f7c:	4977      	ldr	r1, [pc, #476]	; (800815c <__ieee754_asinf+0x25c>)
 8007f7e:	f7f8 fda5 	bl	8000acc <__aeabi_fsub>
 8007f82:	4629      	mov	r1, r5
 8007f84:	f7f8 feac 	bl	8000ce0 <__aeabi_fmul>
 8007f88:	4975      	ldr	r1, [pc, #468]	; (8008160 <__ieee754_asinf+0x260>)
 8007f8a:	f7f8 fda1 	bl	8000ad0 <__addsf3>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 fea6 	bl	8000ce0 <__aeabi_fmul>
 8007f94:	4973      	ldr	r1, [pc, #460]	; (8008164 <__ieee754_asinf+0x264>)
 8007f96:	f7f8 fd99 	bl	8000acc <__aeabi_fsub>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f7f8 fea0 	bl	8000ce0 <__aeabi_fmul>
 8007fa0:	4971      	ldr	r1, [pc, #452]	; (8008168 <__ieee754_asinf+0x268>)
 8007fa2:	f7f8 fd95 	bl	8000ad0 <__addsf3>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7f8 fe9a 	bl	8000ce0 <__aeabi_fmul>
 8007fac:	496f      	ldr	r1, [pc, #444]	; (800816c <__ieee754_asinf+0x26c>)
 8007fae:	4606      	mov	r6, r0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7f8 fe95 	bl	8000ce0 <__aeabi_fmul>
 8007fb6:	496e      	ldr	r1, [pc, #440]	; (8008170 <__ieee754_asinf+0x270>)
 8007fb8:	f7f8 fd88 	bl	8000acc <__aeabi_fsub>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 fe8f 	bl	8000ce0 <__aeabi_fmul>
 8007fc2:	496c      	ldr	r1, [pc, #432]	; (8008174 <__ieee754_asinf+0x274>)
 8007fc4:	f7f8 fd84 	bl	8000ad0 <__addsf3>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 fe89 	bl	8000ce0 <__aeabi_fmul>
 8007fce:	496a      	ldr	r1, [pc, #424]	; (8008178 <__ieee754_asinf+0x278>)
 8007fd0:	f7f8 fd7c 	bl	8000acc <__aeabi_fsub>
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 fe83 	bl	8000ce0 <__aeabi_fmul>
 8007fda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007fde:	f7f8 fd77 	bl	8000ad0 <__addsf3>
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7f8 ff2f 	bl	8000e48 <__aeabi_fdiv>
 8007fea:	4621      	mov	r1, r4
 8007fec:	f7f8 fe78 	bl	8000ce0 <__aeabi_fmul>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e797      	b.n	8007f26 <__ieee754_asinf+0x26>
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 faaa 	bl	8008550 <fabsf>
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008002:	f7f8 fd63 	bl	8000acc <__aeabi_fsub>
 8008006:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800800a:	f7f8 fe69 	bl	8000ce0 <__aeabi_fmul>
 800800e:	4606      	mov	r6, r0
 8008010:	4950      	ldr	r1, [pc, #320]	; (8008154 <__ieee754_asinf+0x254>)
 8008012:	f7f8 fe65 	bl	8000ce0 <__aeabi_fmul>
 8008016:	4950      	ldr	r1, [pc, #320]	; (8008158 <__ieee754_asinf+0x258>)
 8008018:	f7f8 fd5a 	bl	8000ad0 <__addsf3>
 800801c:	4631      	mov	r1, r6
 800801e:	f7f8 fe5f 	bl	8000ce0 <__aeabi_fmul>
 8008022:	494e      	ldr	r1, [pc, #312]	; (800815c <__ieee754_asinf+0x25c>)
 8008024:	f7f8 fd52 	bl	8000acc <__aeabi_fsub>
 8008028:	4631      	mov	r1, r6
 800802a:	f7f8 fe59 	bl	8000ce0 <__aeabi_fmul>
 800802e:	494c      	ldr	r1, [pc, #304]	; (8008160 <__ieee754_asinf+0x260>)
 8008030:	f7f8 fd4e 	bl	8000ad0 <__addsf3>
 8008034:	4631      	mov	r1, r6
 8008036:	f7f8 fe53 	bl	8000ce0 <__aeabi_fmul>
 800803a:	494a      	ldr	r1, [pc, #296]	; (8008164 <__ieee754_asinf+0x264>)
 800803c:	f7f8 fd46 	bl	8000acc <__aeabi_fsub>
 8008040:	4631      	mov	r1, r6
 8008042:	f7f8 fe4d 	bl	8000ce0 <__aeabi_fmul>
 8008046:	4948      	ldr	r1, [pc, #288]	; (8008168 <__ieee754_asinf+0x268>)
 8008048:	f7f8 fd42 	bl	8000ad0 <__addsf3>
 800804c:	4631      	mov	r1, r6
 800804e:	f7f8 fe47 	bl	8000ce0 <__aeabi_fmul>
 8008052:	4946      	ldr	r1, [pc, #280]	; (800816c <__ieee754_asinf+0x26c>)
 8008054:	4681      	mov	r9, r0
 8008056:	4630      	mov	r0, r6
 8008058:	f7f8 fe42 	bl	8000ce0 <__aeabi_fmul>
 800805c:	4944      	ldr	r1, [pc, #272]	; (8008170 <__ieee754_asinf+0x270>)
 800805e:	f7f8 fd35 	bl	8000acc <__aeabi_fsub>
 8008062:	4631      	mov	r1, r6
 8008064:	f7f8 fe3c 	bl	8000ce0 <__aeabi_fmul>
 8008068:	4942      	ldr	r1, [pc, #264]	; (8008174 <__ieee754_asinf+0x274>)
 800806a:	f7f8 fd31 	bl	8000ad0 <__addsf3>
 800806e:	4631      	mov	r1, r6
 8008070:	f7f8 fe36 	bl	8000ce0 <__aeabi_fmul>
 8008074:	4940      	ldr	r1, [pc, #256]	; (8008178 <__ieee754_asinf+0x278>)
 8008076:	f7f8 fd29 	bl	8000acc <__aeabi_fsub>
 800807a:	4631      	mov	r1, r6
 800807c:	f7f8 fe30 	bl	8000ce0 <__aeabi_fmul>
 8008080:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008084:	f7f8 fd24 	bl	8000ad0 <__addsf3>
 8008088:	4682      	mov	sl, r0
 800808a:	4630      	mov	r0, r6
 800808c:	f000 f902 	bl	8008294 <__ieee754_sqrtf>
 8008090:	4b3a      	ldr	r3, [pc, #232]	; (800817c <__ieee754_asinf+0x27c>)
 8008092:	4607      	mov	r7, r0
 8008094:	4598      	cmp	r8, r3
 8008096:	dd1a      	ble.n	80080ce <__ieee754_asinf+0x1ce>
 8008098:	4651      	mov	r1, sl
 800809a:	4648      	mov	r0, r9
 800809c:	f7f8 fed4 	bl	8000e48 <__aeabi_fdiv>
 80080a0:	4639      	mov	r1, r7
 80080a2:	f7f8 fe1d 	bl	8000ce0 <__aeabi_fmul>
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fd12 	bl	8000ad0 <__addsf3>
 80080ac:	4601      	mov	r1, r0
 80080ae:	f7f8 fd0f 	bl	8000ad0 <__addsf3>
 80080b2:	4933      	ldr	r1, [pc, #204]	; (8008180 <__ieee754_asinf+0x280>)
 80080b4:	f7f8 fd0c 	bl	8000ad0 <__addsf3>
 80080b8:	4601      	mov	r1, r0
 80080ba:	4823      	ldr	r0, [pc, #140]	; (8008148 <__ieee754_asinf+0x248>)
 80080bc:	f7f8 fd06 	bl	8000acc <__aeabi_fsub>
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	f73f af4a 	bgt.w	8007f5c <__ieee754_asinf+0x5c>
 80080c8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80080cc:	e735      	b.n	8007f3a <__ieee754_asinf+0x3a>
 80080ce:	4601      	mov	r1, r0
 80080d0:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80080d4:	f7f8 fcfc 	bl	8000ad0 <__addsf3>
 80080d8:	4651      	mov	r1, sl
 80080da:	4604      	mov	r4, r0
 80080dc:	4648      	mov	r0, r9
 80080de:	f7f8 feb3 	bl	8000e48 <__aeabi_fdiv>
 80080e2:	4601      	mov	r1, r0
 80080e4:	4620      	mov	r0, r4
 80080e6:	f7f8 fdfb 	bl	8000ce0 <__aeabi_fmul>
 80080ea:	f028 080f 	bic.w	r8, r8, #15
 80080ee:	4681      	mov	r9, r0
 80080f0:	4641      	mov	r1, r8
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7f8 fdf4 	bl	8000ce0 <__aeabi_fmul>
 80080f8:	4601      	mov	r1, r0
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7f8 fce6 	bl	8000acc <__aeabi_fsub>
 8008100:	4641      	mov	r1, r8
 8008102:	4604      	mov	r4, r0
 8008104:	4638      	mov	r0, r7
 8008106:	f7f8 fce3 	bl	8000ad0 <__addsf3>
 800810a:	4601      	mov	r1, r0
 800810c:	4620      	mov	r0, r4
 800810e:	f7f8 fe9b 	bl	8000e48 <__aeabi_fdiv>
 8008112:	4601      	mov	r1, r0
 8008114:	f7f8 fcdc 	bl	8000ad0 <__addsf3>
 8008118:	4601      	mov	r1, r0
 800811a:	480c      	ldr	r0, [pc, #48]	; (800814c <__ieee754_asinf+0x24c>)
 800811c:	f7f8 fcd6 	bl	8000acc <__aeabi_fsub>
 8008120:	4601      	mov	r1, r0
 8008122:	4648      	mov	r0, r9
 8008124:	f7f8 fcd2 	bl	8000acc <__aeabi_fsub>
 8008128:	4641      	mov	r1, r8
 800812a:	4604      	mov	r4, r0
 800812c:	4640      	mov	r0, r8
 800812e:	f7f8 fccf 	bl	8000ad0 <__addsf3>
 8008132:	4601      	mov	r1, r0
 8008134:	4813      	ldr	r0, [pc, #76]	; (8008184 <__ieee754_asinf+0x284>)
 8008136:	f7f8 fcc9 	bl	8000acc <__aeabi_fsub>
 800813a:	4601      	mov	r1, r0
 800813c:	4620      	mov	r0, r4
 800813e:	f7f8 fcc5 	bl	8000acc <__aeabi_fsub>
 8008142:	4601      	mov	r1, r0
 8008144:	480f      	ldr	r0, [pc, #60]	; (8008184 <__ieee754_asinf+0x284>)
 8008146:	e7b9      	b.n	80080bc <__ieee754_asinf+0x1bc>
 8008148:	3fc90fdb 	.word	0x3fc90fdb
 800814c:	b33bbd2e 	.word	0xb33bbd2e
 8008150:	7149f2ca 	.word	0x7149f2ca
 8008154:	3811ef08 	.word	0x3811ef08
 8008158:	3a4f7f04 	.word	0x3a4f7f04
 800815c:	3d241146 	.word	0x3d241146
 8008160:	3e4e0aa8 	.word	0x3e4e0aa8
 8008164:	3ea6b090 	.word	0x3ea6b090
 8008168:	3e2aaaab 	.word	0x3e2aaaab
 800816c:	3d9dc62e 	.word	0x3d9dc62e
 8008170:	3f303361 	.word	0x3f303361
 8008174:	4001572d 	.word	0x4001572d
 8008178:	4019d139 	.word	0x4019d139
 800817c:	3f799999 	.word	0x3f799999
 8008180:	333bbd2e 	.word	0x333bbd2e
 8008184:	3f490fdb 	.word	0x3f490fdb

08008188 <__ieee754_atan2f>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800818e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008192:	4603      	mov	r3, r0
 8008194:	dc05      	bgt.n	80081a2 <__ieee754_atan2f+0x1a>
 8008196:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800819a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800819e:	4607      	mov	r7, r0
 80081a0:	dd04      	ble.n	80081ac <__ieee754_atan2f+0x24>
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 fc94 	bl	8000ad0 <__addsf3>
 80081a8:	4603      	mov	r3, r0
 80081aa:	e011      	b.n	80081d0 <__ieee754_atan2f+0x48>
 80081ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80081b0:	d103      	bne.n	80081ba <__ieee754_atan2f+0x32>
 80081b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081b6:	f000 b8bf 	b.w	8008338 <atanf>
 80081ba:	178c      	asrs	r4, r1, #30
 80081bc:	f004 0402 	and.w	r4, r4, #2
 80081c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80081c4:	b932      	cbnz	r2, 80081d4 <__ieee754_atan2f+0x4c>
 80081c6:	2c02      	cmp	r4, #2
 80081c8:	d04c      	beq.n	8008264 <__ieee754_atan2f+0xdc>
 80081ca:	2c03      	cmp	r4, #3
 80081cc:	d100      	bne.n	80081d0 <__ieee754_atan2f+0x48>
 80081ce:	4b29      	ldr	r3, [pc, #164]	; (8008274 <__ieee754_atan2f+0xec>)
 80081d0:	4618      	mov	r0, r3
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d4:	b91e      	cbnz	r6, 80081de <__ieee754_atan2f+0x56>
 80081d6:	2f00      	cmp	r7, #0
 80081d8:	da4a      	bge.n	8008270 <__ieee754_atan2f+0xe8>
 80081da:	4b27      	ldr	r3, [pc, #156]	; (8008278 <__ieee754_atan2f+0xf0>)
 80081dc:	e7f8      	b.n	80081d0 <__ieee754_atan2f+0x48>
 80081de:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80081e2:	d10e      	bne.n	8008202 <__ieee754_atan2f+0x7a>
 80081e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80081e8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80081ec:	d105      	bne.n	80081fa <__ieee754_atan2f+0x72>
 80081ee:	2c02      	cmp	r4, #2
 80081f0:	d83a      	bhi.n	8008268 <__ieee754_atan2f+0xe0>
 80081f2:	4b22      	ldr	r3, [pc, #136]	; (800827c <__ieee754_atan2f+0xf4>)
 80081f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80081f8:	e7ea      	b.n	80081d0 <__ieee754_atan2f+0x48>
 80081fa:	2c02      	cmp	r4, #2
 80081fc:	d836      	bhi.n	800826c <__ieee754_atan2f+0xe4>
 80081fe:	4b20      	ldr	r3, [pc, #128]	; (8008280 <__ieee754_atan2f+0xf8>)
 8008200:	e7f8      	b.n	80081f4 <__ieee754_atan2f+0x6c>
 8008202:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008206:	d0e6      	beq.n	80081d6 <__ieee754_atan2f+0x4e>
 8008208:	1b92      	subs	r2, r2, r6
 800820a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800820e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008212:	da17      	bge.n	8008244 <__ieee754_atan2f+0xbc>
 8008214:	2900      	cmp	r1, #0
 8008216:	da01      	bge.n	800821c <__ieee754_atan2f+0x94>
 8008218:	303c      	adds	r0, #60	; 0x3c
 800821a:	db15      	blt.n	8008248 <__ieee754_atan2f+0xc0>
 800821c:	4618      	mov	r0, r3
 800821e:	f7f8 fe13 	bl	8000e48 <__aeabi_fdiv>
 8008222:	f000 f995 	bl	8008550 <fabsf>
 8008226:	f000 f887 	bl	8008338 <atanf>
 800822a:	4603      	mov	r3, r0
 800822c:	2c01      	cmp	r4, #1
 800822e:	d00d      	beq.n	800824c <__ieee754_atan2f+0xc4>
 8008230:	2c02      	cmp	r4, #2
 8008232:	d00e      	beq.n	8008252 <__ieee754_atan2f+0xca>
 8008234:	2c00      	cmp	r4, #0
 8008236:	d0cb      	beq.n	80081d0 <__ieee754_atan2f+0x48>
 8008238:	4912      	ldr	r1, [pc, #72]	; (8008284 <__ieee754_atan2f+0xfc>)
 800823a:	4618      	mov	r0, r3
 800823c:	f7f8 fc48 	bl	8000ad0 <__addsf3>
 8008240:	4911      	ldr	r1, [pc, #68]	; (8008288 <__ieee754_atan2f+0x100>)
 8008242:	e00c      	b.n	800825e <__ieee754_atan2f+0xd6>
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <__ieee754_atan2f+0x104>)
 8008246:	e7f1      	b.n	800822c <__ieee754_atan2f+0xa4>
 8008248:	2300      	movs	r3, #0
 800824a:	e7ef      	b.n	800822c <__ieee754_atan2f+0xa4>
 800824c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008250:	e7be      	b.n	80081d0 <__ieee754_atan2f+0x48>
 8008252:	490c      	ldr	r1, [pc, #48]	; (8008284 <__ieee754_atan2f+0xfc>)
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 fc3b 	bl	8000ad0 <__addsf3>
 800825a:	4601      	mov	r1, r0
 800825c:	480a      	ldr	r0, [pc, #40]	; (8008288 <__ieee754_atan2f+0x100>)
 800825e:	f7f8 fc35 	bl	8000acc <__aeabi_fsub>
 8008262:	e7a1      	b.n	80081a8 <__ieee754_atan2f+0x20>
 8008264:	4b08      	ldr	r3, [pc, #32]	; (8008288 <__ieee754_atan2f+0x100>)
 8008266:	e7b3      	b.n	80081d0 <__ieee754_atan2f+0x48>
 8008268:	4b09      	ldr	r3, [pc, #36]	; (8008290 <__ieee754_atan2f+0x108>)
 800826a:	e7b1      	b.n	80081d0 <__ieee754_atan2f+0x48>
 800826c:	2300      	movs	r3, #0
 800826e:	e7af      	b.n	80081d0 <__ieee754_atan2f+0x48>
 8008270:	4b06      	ldr	r3, [pc, #24]	; (800828c <__ieee754_atan2f+0x104>)
 8008272:	e7ad      	b.n	80081d0 <__ieee754_atan2f+0x48>
 8008274:	c0490fdb 	.word	0xc0490fdb
 8008278:	bfc90fdb 	.word	0xbfc90fdb
 800827c:	08008650 	.word	0x08008650
 8008280:	0800865c 	.word	0x0800865c
 8008284:	33bbbd2e 	.word	0x33bbbd2e
 8008288:	40490fdb 	.word	0x40490fdb
 800828c:	3fc90fdb 	.word	0x3fc90fdb
 8008290:	3f490fdb 	.word	0x3f490fdb

08008294 <__ieee754_sqrtf>:
 8008294:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008298:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4603      	mov	r3, r0
 80082a0:	4604      	mov	r4, r0
 80082a2:	d309      	bcc.n	80082b8 <__ieee754_sqrtf+0x24>
 80082a4:	4601      	mov	r1, r0
 80082a6:	f7f8 fd1b 	bl	8000ce0 <__aeabi_fmul>
 80082aa:	4601      	mov	r1, r0
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7f8 fc0f 	bl	8000ad0 <__addsf3>
 80082b2:	4604      	mov	r4, r0
 80082b4:	4620      	mov	r0, r4
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d0fb      	beq.n	80082b4 <__ieee754_sqrtf+0x20>
 80082bc:	2800      	cmp	r0, #0
 80082be:	da06      	bge.n	80082ce <__ieee754_sqrtf+0x3a>
 80082c0:	4601      	mov	r1, r0
 80082c2:	f7f8 fc03 	bl	8000acc <__aeabi_fsub>
 80082c6:	4601      	mov	r1, r0
 80082c8:	f7f8 fdbe 	bl	8000e48 <__aeabi_fdiv>
 80082cc:	e7f1      	b.n	80082b2 <__ieee754_sqrtf+0x1e>
 80082ce:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80082d2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80082d6:	d029      	beq.n	800832c <__ieee754_sqrtf+0x98>
 80082d8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80082dc:	07cb      	lsls	r3, r1, #31
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80082e6:	f04f 0419 	mov.w	r4, #25
 80082ea:	461e      	mov	r6, r3
 80082ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80082f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80082f4:	bf58      	it	pl
 80082f6:	0052      	lslpl	r2, r2, #1
 80082f8:	1040      	asrs	r0, r0, #1
 80082fa:	0052      	lsls	r2, r2, #1
 80082fc:	1875      	adds	r5, r6, r1
 80082fe:	4295      	cmp	r5, r2
 8008300:	bfde      	ittt	le
 8008302:	186e      	addle	r6, r5, r1
 8008304:	1b52      	suble	r2, r2, r5
 8008306:	185b      	addle	r3, r3, r1
 8008308:	3c01      	subs	r4, #1
 800830a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800830e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008312:	d1f3      	bne.n	80082fc <__ieee754_sqrtf+0x68>
 8008314:	b112      	cbz	r2, 800831c <__ieee754_sqrtf+0x88>
 8008316:	3301      	adds	r3, #1
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	105c      	asrs	r4, r3, #1
 800831e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008322:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008326:	e7c5      	b.n	80082b4 <__ieee754_sqrtf+0x20>
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	3201      	adds	r2, #1
 800832c:	0218      	lsls	r0, r3, #8
 800832e:	d5fb      	bpl.n	8008328 <__ieee754_sqrtf+0x94>
 8008330:	3a01      	subs	r2, #1
 8008332:	1a89      	subs	r1, r1, r2
 8008334:	e7d0      	b.n	80082d8 <__ieee754_sqrtf+0x44>
	...

08008338 <atanf>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008340:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008344:	4604      	mov	r4, r0
 8008346:	4680      	mov	r8, r0
 8008348:	db0e      	blt.n	8008368 <atanf+0x30>
 800834a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800834e:	dd04      	ble.n	800835a <atanf+0x22>
 8008350:	4601      	mov	r1, r0
 8008352:	f7f8 fbbd 	bl	8000ad0 <__addsf3>
 8008356:	4604      	mov	r4, r0
 8008358:	e003      	b.n	8008362 <atanf+0x2a>
 800835a:	2800      	cmp	r0, #0
 800835c:	f300 80ce 	bgt.w	80084fc <atanf+0x1c4>
 8008360:	4c67      	ldr	r4, [pc, #412]	; (8008500 <atanf+0x1c8>)
 8008362:	4620      	mov	r0, r4
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	4b66      	ldr	r3, [pc, #408]	; (8008504 <atanf+0x1cc>)
 800836a:	429d      	cmp	r5, r3
 800836c:	dc0e      	bgt.n	800838c <atanf+0x54>
 800836e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008372:	da08      	bge.n	8008386 <atanf+0x4e>
 8008374:	4964      	ldr	r1, [pc, #400]	; (8008508 <atanf+0x1d0>)
 8008376:	f7f8 fbab 	bl	8000ad0 <__addsf3>
 800837a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800837e:	f7f8 fe6b 	bl	8001058 <__aeabi_fcmpgt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d1ed      	bne.n	8008362 <atanf+0x2a>
 8008386:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800838a:	e01c      	b.n	80083c6 <atanf+0x8e>
 800838c:	f000 f8e0 	bl	8008550 <fabsf>
 8008390:	4b5e      	ldr	r3, [pc, #376]	; (800850c <atanf+0x1d4>)
 8008392:	4604      	mov	r4, r0
 8008394:	429d      	cmp	r5, r3
 8008396:	dc7c      	bgt.n	8008492 <atanf+0x15a>
 8008398:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800839c:	429d      	cmp	r5, r3
 800839e:	dc67      	bgt.n	8008470 <atanf+0x138>
 80083a0:	4601      	mov	r1, r0
 80083a2:	f7f8 fb95 	bl	8000ad0 <__addsf3>
 80083a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80083aa:	f7f8 fb8f 	bl	8000acc <__aeabi_fsub>
 80083ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80083b2:	4605      	mov	r5, r0
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7f8 fb8b 	bl	8000ad0 <__addsf3>
 80083ba:	4601      	mov	r1, r0
 80083bc:	4628      	mov	r0, r5
 80083be:	f7f8 fd43 	bl	8000e48 <__aeabi_fdiv>
 80083c2:	2600      	movs	r6, #0
 80083c4:	4604      	mov	r4, r0
 80083c6:	4621      	mov	r1, r4
 80083c8:	4620      	mov	r0, r4
 80083ca:	f7f8 fc89 	bl	8000ce0 <__aeabi_fmul>
 80083ce:	4601      	mov	r1, r0
 80083d0:	4607      	mov	r7, r0
 80083d2:	f7f8 fc85 	bl	8000ce0 <__aeabi_fmul>
 80083d6:	4605      	mov	r5, r0
 80083d8:	494d      	ldr	r1, [pc, #308]	; (8008510 <atanf+0x1d8>)
 80083da:	f7f8 fc81 	bl	8000ce0 <__aeabi_fmul>
 80083de:	494d      	ldr	r1, [pc, #308]	; (8008514 <atanf+0x1dc>)
 80083e0:	f7f8 fb76 	bl	8000ad0 <__addsf3>
 80083e4:	4629      	mov	r1, r5
 80083e6:	f7f8 fc7b 	bl	8000ce0 <__aeabi_fmul>
 80083ea:	494b      	ldr	r1, [pc, #300]	; (8008518 <atanf+0x1e0>)
 80083ec:	f7f8 fb70 	bl	8000ad0 <__addsf3>
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f8 fc75 	bl	8000ce0 <__aeabi_fmul>
 80083f6:	4949      	ldr	r1, [pc, #292]	; (800851c <atanf+0x1e4>)
 80083f8:	f7f8 fb6a 	bl	8000ad0 <__addsf3>
 80083fc:	4629      	mov	r1, r5
 80083fe:	f7f8 fc6f 	bl	8000ce0 <__aeabi_fmul>
 8008402:	4947      	ldr	r1, [pc, #284]	; (8008520 <atanf+0x1e8>)
 8008404:	f7f8 fb64 	bl	8000ad0 <__addsf3>
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 fc69 	bl	8000ce0 <__aeabi_fmul>
 800840e:	4945      	ldr	r1, [pc, #276]	; (8008524 <atanf+0x1ec>)
 8008410:	f7f8 fb5e 	bl	8000ad0 <__addsf3>
 8008414:	4639      	mov	r1, r7
 8008416:	f7f8 fc63 	bl	8000ce0 <__aeabi_fmul>
 800841a:	4943      	ldr	r1, [pc, #268]	; (8008528 <atanf+0x1f0>)
 800841c:	4607      	mov	r7, r0
 800841e:	4628      	mov	r0, r5
 8008420:	f7f8 fc5e 	bl	8000ce0 <__aeabi_fmul>
 8008424:	4941      	ldr	r1, [pc, #260]	; (800852c <atanf+0x1f4>)
 8008426:	f7f8 fb51 	bl	8000acc <__aeabi_fsub>
 800842a:	4629      	mov	r1, r5
 800842c:	f7f8 fc58 	bl	8000ce0 <__aeabi_fmul>
 8008430:	493f      	ldr	r1, [pc, #252]	; (8008530 <atanf+0x1f8>)
 8008432:	f7f8 fb4b 	bl	8000acc <__aeabi_fsub>
 8008436:	4629      	mov	r1, r5
 8008438:	f7f8 fc52 	bl	8000ce0 <__aeabi_fmul>
 800843c:	493d      	ldr	r1, [pc, #244]	; (8008534 <atanf+0x1fc>)
 800843e:	f7f8 fb45 	bl	8000acc <__aeabi_fsub>
 8008442:	4629      	mov	r1, r5
 8008444:	f7f8 fc4c 	bl	8000ce0 <__aeabi_fmul>
 8008448:	493b      	ldr	r1, [pc, #236]	; (8008538 <atanf+0x200>)
 800844a:	f7f8 fb3f 	bl	8000acc <__aeabi_fsub>
 800844e:	4629      	mov	r1, r5
 8008450:	f7f8 fc46 	bl	8000ce0 <__aeabi_fmul>
 8008454:	4601      	mov	r1, r0
 8008456:	4638      	mov	r0, r7
 8008458:	f7f8 fb3a 	bl	8000ad0 <__addsf3>
 800845c:	4621      	mov	r1, r4
 800845e:	f7f8 fc3f 	bl	8000ce0 <__aeabi_fmul>
 8008462:	1c73      	adds	r3, r6, #1
 8008464:	4601      	mov	r1, r0
 8008466:	d133      	bne.n	80084d0 <atanf+0x198>
 8008468:	4620      	mov	r0, r4
 800846a:	f7f8 fb2f 	bl	8000acc <__aeabi_fsub>
 800846e:	e772      	b.n	8008356 <atanf+0x1e>
 8008470:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008474:	f7f8 fb2a 	bl	8000acc <__aeabi_fsub>
 8008478:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800847c:	4605      	mov	r5, r0
 800847e:	4620      	mov	r0, r4
 8008480:	f7f8 fb26 	bl	8000ad0 <__addsf3>
 8008484:	4601      	mov	r1, r0
 8008486:	4628      	mov	r0, r5
 8008488:	f7f8 fcde 	bl	8000e48 <__aeabi_fdiv>
 800848c:	2601      	movs	r6, #1
 800848e:	4604      	mov	r4, r0
 8008490:	e799      	b.n	80083c6 <atanf+0x8e>
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <atanf+0x204>)
 8008494:	429d      	cmp	r5, r3
 8008496:	dc14      	bgt.n	80084c2 <atanf+0x18a>
 8008498:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800849c:	f7f8 fb16 	bl	8000acc <__aeabi_fsub>
 80084a0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80084a4:	4605      	mov	r5, r0
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7f8 fc1a 	bl	8000ce0 <__aeabi_fmul>
 80084ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80084b0:	f7f8 fb0e 	bl	8000ad0 <__addsf3>
 80084b4:	4601      	mov	r1, r0
 80084b6:	4628      	mov	r0, r5
 80084b8:	f7f8 fcc6 	bl	8000e48 <__aeabi_fdiv>
 80084bc:	2602      	movs	r6, #2
 80084be:	4604      	mov	r4, r0
 80084c0:	e781      	b.n	80083c6 <atanf+0x8e>
 80084c2:	4601      	mov	r1, r0
 80084c4:	481e      	ldr	r0, [pc, #120]	; (8008540 <atanf+0x208>)
 80084c6:	f7f8 fcbf 	bl	8000e48 <__aeabi_fdiv>
 80084ca:	2603      	movs	r6, #3
 80084cc:	4604      	mov	r4, r0
 80084ce:	e77a      	b.n	80083c6 <atanf+0x8e>
 80084d0:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <atanf+0x20c>)
 80084d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80084d6:	f7f8 faf9 	bl	8000acc <__aeabi_fsub>
 80084da:	4621      	mov	r1, r4
 80084dc:	f7f8 faf6 	bl	8000acc <__aeabi_fsub>
 80084e0:	4b19      	ldr	r3, [pc, #100]	; (8008548 <atanf+0x210>)
 80084e2:	4601      	mov	r1, r0
 80084e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80084e8:	f7f8 faf0 	bl	8000acc <__aeabi_fsub>
 80084ec:	f1b8 0f00 	cmp.w	r8, #0
 80084f0:	4604      	mov	r4, r0
 80084f2:	f6bf af36 	bge.w	8008362 <atanf+0x2a>
 80084f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80084fa:	e72c      	b.n	8008356 <atanf+0x1e>
 80084fc:	4c13      	ldr	r4, [pc, #76]	; (800854c <atanf+0x214>)
 80084fe:	e730      	b.n	8008362 <atanf+0x2a>
 8008500:	bfc90fdb 	.word	0xbfc90fdb
 8008504:	3edfffff 	.word	0x3edfffff
 8008508:	7149f2ca 	.word	0x7149f2ca
 800850c:	3f97ffff 	.word	0x3f97ffff
 8008510:	3c8569d7 	.word	0x3c8569d7
 8008514:	3d4bda59 	.word	0x3d4bda59
 8008518:	3d886b35 	.word	0x3d886b35
 800851c:	3dba2e6e 	.word	0x3dba2e6e
 8008520:	3e124925 	.word	0x3e124925
 8008524:	3eaaaaab 	.word	0x3eaaaaab
 8008528:	bd15a221 	.word	0xbd15a221
 800852c:	3d6ef16b 	.word	0x3d6ef16b
 8008530:	3d9d8795 	.word	0x3d9d8795
 8008534:	3de38e38 	.word	0x3de38e38
 8008538:	3e4ccccd 	.word	0x3e4ccccd
 800853c:	401bffff 	.word	0x401bffff
 8008540:	bf800000 	.word	0xbf800000
 8008544:	08008678 	.word	0x08008678
 8008548:	08008668 	.word	0x08008668
 800854c:	3fc90fdb 	.word	0x3fc90fdb

08008550 <fabsf>:
 8008550:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008554:	4770      	bx	lr
	...

08008558 <nanf>:
 8008558:	4800      	ldr	r0, [pc, #0]	; (800855c <nanf+0x4>)
 800855a:	4770      	bx	lr
 800855c:	7fc00000 	.word	0x7fc00000

08008560 <_init>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr

0800856c <_fini>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr
