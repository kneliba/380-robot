
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800cab0  0800cab0  0001cab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf14  0800cf14  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf14  0800cf14  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf14  0800cf14  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800cf1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000288  0800d1a4  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800d1a4  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150be  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322f  00000000  00000000  0003536f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00039a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bae7  00000000  00000000  0003ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d42  00000000  00000000  00056917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e3c  00000000  00000000  00070659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bf4  00000000  00000000  001064e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ca98 	.word	0x0800ca98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	0800ca98 	.word	0x0800ca98

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmpun>:
 8001084:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001088:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800108c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001090:	d102      	bne.n	8001098 <__aeabi_fcmpun+0x14>
 8001092:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001096:	d108      	bne.n	80010aa <__aeabi_fcmpun+0x26>
 8001098:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800109c:	d102      	bne.n	80010a4 <__aeabi_fcmpun+0x20>
 800109e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010a2:	d102      	bne.n	80010aa <__aeabi_fcmpun+0x26>
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0001 	mov.w	r0, #1
 80010ae:	4770      	bx	lr

080010b0 <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <drive_forward+0x84>)
 80010c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c6:	f7ff fb3b 	bl	8000740 <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <drive_forward+0x88>)
 80010d8:	f7ff f852 	bl	8000180 <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <drive_forward+0x8c>)
 80010ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ee:	f7ff fb27 	bl	8000740 <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <drive_forward+0x90>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff f9f4 	bl	80004ec <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 800110c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001110:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001114:	f7ff fcc2 	bl	8000a9c <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 800111c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001120:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001124:	f7ff fcba 	bl	8000a9c <__aeabi_d2uiz>
 8001128:	4603      	mov	r3, r0
 800112a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	40590000 	.word	0x40590000
 8001138:	3ff00000 	.word	0x3ff00000
 800113c:	40340000 	.word	0x40340000
 8001140:	20000000 	.word	0x20000000

08001144 <stop>:

void stop (TIM_HandleTypeDef *htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	drive_forward (htim, 0);
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffab 	bl	80010b0 <drive_forward>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <accelerate>:
	TIM2->CCR2 = command;
}

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8001170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f93e 	bl	80003f8 <__aeabi_ui2d>
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <accelerate+0xa8>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fadd 	bl	8000740 <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <accelerate+0xac>)
 8001194:	f7ff f9aa 	bl	80004ec <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <accelerate+0xb0>)
 80011a6:	f7fe ffe9 	bl	800017c <__aeabi_dsub>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <accelerate+0xb4>)
 80011b8:	f7ff f998 	bl	80004ec <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 80011c4:	e013      	b.n	80011ee <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 80011c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ff70 	bl	80010b0 <drive_forward>
		speed += 2;
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011dc:	f7fe ffd0 	bl	8000180 <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f003 fe8f 	bl	8004f0c <HAL_Delay>
	while (speed < final_speed)
 80011ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011f6:	f7ff fbeb 	bl	80009d0 <__aeabi_dcmplt>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e2      	bne.n	80011c6 <accelerate+0x62>
	}
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000
 8001210:	40340000 	.word	0x40340000
 8001214:	3ff00000 	.word	0x3ff00000
 8001218:	40590000 	.word	0x40590000

0800121c <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8001224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f8e4 	bl	80003f8 <__aeabi_ui2d>
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <decelerate+0xa8>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff fa83 	bl	8000740 <__aeabi_ddiv>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <decelerate+0xac>)
 8001248:	f7ff f950 	bl	80004ec <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <decelerate+0xb0>)
 800125a:	f7fe ff8f 	bl	800017c <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <decelerate+0xb4>)
 800126c:	f7ff f93e 	bl	80004ec <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8001278:	e013      	b.n	80012a2 <decelerate+0x86>
	{
		drive_forward(htim, speed);
 800127a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff16 	bl	80010b0 <drive_forward>
		speed -= 2;
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001290:	f7fe ff74 	bl	800017c <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f003 fe35 	bl	8004f0c <HAL_Delay>
	while (speed > 0)
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ae:	f7ff fbad 	bl	8000a0c <__aeabi_dcmpgt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1e0      	bne.n	800127a <decelerate+0x5e>
	}
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	40340000 	.word	0x40340000
 80012cc:	3ff00000 	.word	0x3ff00000
 80012d0:	40590000 	.word	0x40590000

080012d4 <ESP_Receive>:
#include "stm32f103xb.h"
#include <string.h>

uint8_t UART2_rxBuffer[35] = {0};

void ESP_Receive(TIM_HandleTypeDef *htim) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(strcmp(UART2_rxBuffer, "drive forward") == 0) {
 80012dc:	490d      	ldr	r1, [pc, #52]	; (8001314 <ESP_Receive+0x40>)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <ESP_Receive+0x44>)
 80012e0:	f7fe ff36 	bl	8000150 <strcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <ESP_Receive+0x24>
		drive_forward(htim, speed);
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <ESP_Receive+0x48>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fedd 	bl	80010b0 <drive_forward>
	}
	else if(strcmp(UART2_rxBuffer, "stop")== 0) {
		stop(htim);
	}
}
 80012f6:	e009      	b.n	800130c <ESP_Receive+0x38>
	else if(strcmp(UART2_rxBuffer, "stop")== 0) {
 80012f8:	4909      	ldr	r1, [pc, #36]	; (8001320 <ESP_Receive+0x4c>)
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <ESP_Receive+0x44>)
 80012fc:	f7fe ff28 	bl	8000150 <strcmp>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <ESP_Receive+0x38>
		stop(htim);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff1c 	bl	8001144 <stop>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800cab0 	.word	0x0800cab0
 8001318:	200002a4 	.word	0x200002a4
 800131c:	20000558 	.word	0x20000558
 8001320:	0800cac0 	.word	0x0800cac0

08001324 <invSqrt>:
// Functions

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 800132c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fce1 	bl	8000cf8 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	617b      	str	r3, [r7, #20]
	float y = x;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	105a      	asrs	r2, r3, #1
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <invSqrt+0x74>)
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6979      	ldr	r1, [r7, #20]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fccb 	bl	8000cf8 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f7ff fcc4 	bl	8000cf8 <__aeabi_fmul>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8001378:	f7ff fbb4 	bl	8000ae4 <__aeabi_fsub>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f7ff fcb7 	bl	8000cf8 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	613b      	str	r3, [r7, #16]
	return y;
 800138e:	693b      	ldr	r3, [r7, #16]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	5f3759df 	.word	0x5f3759df

0800139c <MadgwickAHRSupdate>:

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	b0ab      	sub	sp, #172	; 0xac
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80013aa:	f04f 0100 	mov.w	r1, #0
 80013ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80013b2:	f7ff fe35 	bl	8001020 <__aeabi_fcmpeq>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01f      	beq.n	80013fc <MadgwickAHRSupdate+0x60>
 80013bc:	f04f 0100 	mov.w	r1, #0
 80013c0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80013c4:	f7ff fe2c 	bl	8001020 <__aeabi_fcmpeq>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <MadgwickAHRSupdate+0x60>
 80013ce:	f04f 0100 	mov.w	r1, #0
 80013d2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80013d6:	f7ff fe23 	bl	8001020 <__aeabi_fcmpeq>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80013e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f001 f948 	bl	8002688 <MadgwickAHRSupdateIMU>
		return;
 80013f8:	f001 b938 	b.w	800266c <MadgwickAHRSupdate+0x12d0>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 80013fc:	49ae      	ldr	r1, [pc, #696]	; (80016b8 <MadgwickAHRSupdate+0x31c>)
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff fc7a 	bl	8000cf8 <__aeabi_fmul>
 8001404:	4603      	mov	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 8001408:	49ab      	ldr	r1, [pc, #684]	; (80016b8 <MadgwickAHRSupdate+0x31c>)
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff fc74 	bl	8000cf8 <__aeabi_fmul>
 8001410:	4603      	mov	r3, r0
 8001412:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 8001414:	49a8      	ldr	r1, [pc, #672]	; (80016b8 <MadgwickAHRSupdate+0x31c>)
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fc6e 	bl	8000cf8 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001420:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <MadgwickAHRSupdate+0x320>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fc64 	bl	8000cf8 <__aeabi_fmul>
 8001430:	4603      	mov	r3, r0
 8001432:	461c      	mov	r4, r3
 8001434:	4ba2      	ldr	r3, [pc, #648]	; (80016c0 <MadgwickAHRSupdate+0x324>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc5c 	bl	8000cf8 <__aeabi_fmul>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff fb4d 	bl	8000ae4 <__aeabi_fsub>
 800144a:	4603      	mov	r3, r0
 800144c:	461c      	mov	r4, r3
 800144e:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <MadgwickAHRSupdate+0x328>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc4f 	bl	8000cf8 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	4619      	mov	r1, r3
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fb40 	bl	8000ae4 <__aeabi_fsub>
 8001464:	4603      	mov	r3, r0
 8001466:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc44 	bl	8000cf8 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001476:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <MadgwickAHRSupdate+0x32c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc3b 	bl	8000cf8 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	461c      	mov	r4, r3
 8001486:	4b8e      	ldr	r3, [pc, #568]	; (80016c0 <MadgwickAHRSupdate+0x324>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc33 	bl	8000cf8 <__aeabi_fmul>
 8001492:	4603      	mov	r3, r0
 8001494:	4619      	mov	r1, r3
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fb26 	bl	8000ae8 <__addsf3>
 800149c:	4603      	mov	r3, r0
 800149e:	461c      	mov	r4, r3
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <MadgwickAHRSupdate+0x328>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc26 	bl	8000cf8 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fb17 	bl	8000ae4 <__aeabi_fsub>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc1b 	bl	8000cf8 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <MadgwickAHRSupdate+0x32c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc12 	bl	8000cf8 <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461c      	mov	r4, r3
 80014d8:	4b78      	ldr	r3, [pc, #480]	; (80016bc <MadgwickAHRSupdate+0x320>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc0a 	bl	8000cf8 <__aeabi_fmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff fafb 	bl	8000ae4 <__aeabi_fsub>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461c      	mov	r4, r3
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <MadgwickAHRSupdate+0x328>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbfd 	bl	8000cf8 <__aeabi_fmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff faf0 	bl	8000ae8 <__addsf3>
 8001508:	4603      	mov	r3, r0
 800150a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbf2 	bl	8000cf8 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <MadgwickAHRSupdate+0x32c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fbe9 	bl	8000cf8 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	461c      	mov	r4, r3
 800152a:	4b64      	ldr	r3, [pc, #400]	; (80016bc <MadgwickAHRSupdate+0x320>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fbe1 	bl	8000cf8 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fad4 	bl	8000ae8 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	461c      	mov	r4, r3
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <MadgwickAHRSupdate+0x324>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbd4 	bl	8000cf8 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fac5 	bl	8000ae4 <__aeabi_fsub>
 800155a:	4603      	mov	r3, r0
 800155c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fbc9 	bl	8000cf8 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800156c:	f04f 0100 	mov.w	r1, #0
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7ff fd55 	bl	8001020 <__aeabi_fcmpeq>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <MadgwickAHRSupdate+0x206>
 800157c:	f04f 0100 	mov.w	r1, #0
 8001580:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001584:	f7ff fd4c 	bl	8001020 <__aeabi_fcmpeq>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <MadgwickAHRSupdate+0x206>
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001596:	f7ff fd43 	bl	8001020 <__aeabi_fcmpeq>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 87b6 	bne.w	800250e <MadgwickAHRSupdate+0x1172>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff fba7 	bl	8000cf8 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461c      	mov	r4, r3
 80015ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80015b2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80015b6:	f7ff fb9f 	bl	8000cf8 <__aeabi_fmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fa92 	bl	8000ae8 <__addsf3>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461c      	mov	r4, r3
 80015c8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80015cc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80015d0:	f7ff fb92 	bl	8000cf8 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fa85 	bl	8000ae8 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe9f 	bl	8001324 <invSqrt>
 80015e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 80015ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f7ff fb82 	bl	8000cf8 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80015f8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015fc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001600:	f7ff fb7a 	bl	8000cf8 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;
 800160a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800160e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001612:	f7ff fb71 	bl	8000cf8 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800161c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001620:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001624:	f7ff fb68 	bl	8000cf8 <__aeabi_fmul>
 8001628:	4603      	mov	r3, r0
 800162a:	461c      	mov	r4, r3
 800162c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001630:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001634:	f7ff fb60 	bl	8000cf8 <__aeabi_fmul>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fa53 	bl	8000ae8 <__addsf3>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800164a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800164e:	f7ff fb53 	bl	8000cf8 <__aeabi_fmul>
 8001652:	4603      	mov	r3, r0
 8001654:	4619      	mov	r1, r3
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fa46 	bl	8000ae8 <__addsf3>
 800165c:	4603      	mov	r3, r0
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe60 	bl	8001324 <invSqrt>
 8001664:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 8001668:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800166c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001670:	f7ff fb42 	bl	8000cf8 <__aeabi_fmul>
 8001674:	4603      	mov	r3, r0
 8001676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 800167a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800167e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001682:	f7ff fb39 	bl	8000cf8 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 800168c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001690:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001694:	f7ff fb30 	bl	8000cf8 <__aeabi_fmul>
 8001698:	4603      	mov	r3, r0
 800169a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MadgwickAHRSupdate+0x32c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fa1f 	bl	8000ae8 <__addsf3>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4619      	mov	r1, r3
 80016ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80016b2:	f7ff fb21 	bl	8000cf8 <__aeabi_fmul>
 80016b6:	e009      	b.n	80016cc <MadgwickAHRSupdate+0x330>
 80016b8:	3c8efa39 	.word	0x3c8efa39
 80016bc:	200002c8 	.word	0x200002c8
 80016c0:	200002cc 	.word	0x200002cc
 80016c4:	200002d0 	.word	0x200002d0
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	4603      	mov	r3, r0
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 80016d2:	4b99      	ldr	r3, [pc, #612]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fa05 	bl	8000ae8 <__addsf3>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016e6:	f7ff fb07 	bl	8000cf8 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 80016f0:	4b91      	ldr	r3, [pc, #580]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f9f6 	bl	8000ae8 <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001704:	f7ff faf8 	bl	8000cf8 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f9e7 	bl	8000ae8 <__addsf3>
 800171a:	4603      	mov	r3, r0
 800171c:	4619      	mov	r1, r3
 800171e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001722:	f7ff fae9 	bl	8000cf8 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f9d9 	bl	8000ae8 <__addsf3>
 8001736:	4603      	mov	r3, r0
 8001738:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 800173a:	4b80      	ldr	r3, [pc, #512]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f9d1 	bl	8000ae8 <__addsf3>
 8001746:	4603      	mov	r3, r0
 8001748:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 800174a:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f9c9 	bl	8000ae8 <__addsf3>
 8001756:	4603      	mov	r3, r0
 8001758:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f9c1 	bl	8000ae8 <__addsf3>
 8001766:	4603      	mov	r3, r0
 8001768:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f9b9 	bl	8000ae8 <__addsf3>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b71      	ldr	r3, [pc, #452]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fab9 	bl	8000cf8 <__aeabi_fmul>
 8001786:	4603      	mov	r3, r0
 8001788:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 800178a:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f9a9 	bl	8000ae8 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff faa9 	bl	8000cf8 <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a62      	ldr	r2, [pc, #392]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa9f 	bl	8000cf8 <__aeabi_fmul>
 80017ba:	4603      	mov	r3, r0
 80017bc:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5e      	ldr	r2, [pc, #376]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa95 	bl	8000cf8 <__aeabi_fmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 80017d2:	4b59      	ldr	r3, [pc, #356]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a5a      	ldr	r2, [pc, #360]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa8b 	bl	8000cf8 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 80017e6:	4b54      	ldr	r3, [pc, #336]	; (8001938 <MadgwickAHRSupdate+0x59c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a56      	ldr	r2, [pc, #344]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fa81 	bl	8000cf8 <__aeabi_fmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa77 	bl	8000cf8 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fa6d 	bl	8000cf8 <__aeabi_fmul>
 800181e:	4603      	mov	r3, r0
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <MadgwickAHRSupdate+0x5a0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a47      	ldr	r2, [pc, #284]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa63 	bl	8000cf8 <__aeabi_fmul>
 8001832:	4603      	mov	r3, r0
 8001834:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a41      	ldr	r2, [pc, #260]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa59 	bl	8000cf8 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa4f 	bl	8000cf8 <__aeabi_fmul>
 800185a:	4603      	mov	r3, r0
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a38      	ldr	r2, [pc, #224]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa45 	bl	8000cf8 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001872:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001874:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001878:	f7ff fa3e 	bl	8000cf8 <__aeabi_fmul>
 800187c:	4603      	mov	r3, r0
 800187e:	461c      	mov	r4, r3
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa35 	bl	8000cf8 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff f926 	bl	8000ae4 <__aeabi_fsub>
 8001898:	4603      	mov	r3, r0
 800189a:	461c      	mov	r4, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa27 	bl	8000cf8 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff f91a 	bl	8000ae8 <__addsf3>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461c      	mov	r4, r3
 80018b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018ba:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018be:	f7ff fa1b 	bl	8000cf8 <__aeabi_fmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff f90e 	bl	8000ae8 <__addsf3>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461c      	mov	r4, r3
 80018d0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80018d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018d6:	f7ff fa0f 	bl	8000cf8 <__aeabi_fmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MadgwickAHRSupdate+0x5a4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fa07 	bl	8000cf8 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff f8fa 	bl	8000ae8 <__addsf3>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461c      	mov	r4, r3
 80018f8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80018fc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018fe:	f7ff f9fb 	bl	8000cf8 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MadgwickAHRSupdate+0x5a8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f7ff f9f3 	bl	8000cf8 <__aeabi_fmul>
 8001912:	4603      	mov	r3, r0
 8001914:	4619      	mov	r1, r3
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff f8e6 	bl	8000ae8 <__addsf3>
 800191c:	4603      	mov	r3, r0
 800191e:	461c      	mov	r4, r3
 8001920:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001922:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001926:	f7ff f9e7 	bl	8000cf8 <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	4619      	mov	r1, r3
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff f8d8 	bl	8000ae4 <__aeabi_fsub>
 8001934:	e008      	b.n	8001948 <MadgwickAHRSupdate+0x5ac>
 8001936:	bf00      	nop
 8001938:	2000000c 	.word	0x2000000c
 800193c:	200002c8 	.word	0x200002c8
 8001940:	200002cc 	.word	0x200002cc
 8001944:	200002d0 	.word	0x200002d0
 8001948:	4603      	mov	r3, r0
 800194a:	461c      	mov	r4, r3
 800194c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800194e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001952:	f7ff f9d1 	bl	8000cf8 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff f8c2 	bl	8000ae4 <__aeabi_fsub>
 8001960:	4603      	mov	r3, r0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001964:	4ba1      	ldr	r3, [pc, #644]	; (8001bec <MadgwickAHRSupdate+0x850>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f9c3 	bl	8000cf8 <__aeabi_fmul>
 8001972:	4603      	mov	r3, r0
 8001974:	461c      	mov	r4, r3
 8001976:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001978:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800197c:	f7ff f9bc 	bl	8000cf8 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4619      	mov	r1, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff f8af 	bl	8000ae8 <__addsf3>
 800198a:	4603      	mov	r3, r0
 800198c:	461c      	mov	r4, r3
 800198e:	4b98      	ldr	r3, [pc, #608]	; (8001bf0 <MadgwickAHRSupdate+0x854>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9ae 	bl	8000cf8 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f89f 	bl	8000ae4 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461c      	mov	r4, r3
 80019aa:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <MadgwickAHRSupdate+0x858>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f9a1 	bl	8000cf8 <__aeabi_fmul>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff f894 	bl	8000ae8 <__addsf3>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461c      	mov	r4, r3
 80019c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80019c6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80019ca:	f7ff f995 	bl	8000cf8 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff f886 	bl	8000ae4 <__aeabi_fsub>
 80019d8:	4603      	mov	r3, r0
 80019da:	461c      	mov	r4, r3
 80019dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019de:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80019e2:	f7ff f989 	bl	8000cf8 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff f87c 	bl	8000ae8 <__addsf3>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461c      	mov	r4, r3
 80019f4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80019f8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80019fa:	f7ff f97d 	bl	8000cf8 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b7a      	ldr	r3, [pc, #488]	; (8001bec <MadgwickAHRSupdate+0x850>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff f975 	bl	8000cf8 <__aeabi_fmul>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff f868 	bl	8000ae8 <__addsf3>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a1e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001a22:	f7ff f969 	bl	8000cf8 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff f85a 	bl	8000ae4 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrtf(hx * hx + hy * hy);
 8001a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a38:	f7ff f95e 	bl	8000cf8 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461c      	mov	r4, r3
 8001a40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a44:	f7ff f958 	bl	8000cf8 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f84b 	bl	8000ae8 <__addsf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00a fcd5 	bl	800c404 <sqrtf>
 8001a5a:	6338      	str	r0, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a64:	4a63      	ldr	r2, [pc, #396]	; (8001bf4 <MadgwickAHRSupdate+0x858>)
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f944 	bl	8000cf8 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461c      	mov	r4, r3
 8001a74:	4b5e      	ldr	r3, [pc, #376]	; (8001bf0 <MadgwickAHRSupdate+0x854>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f93b 	bl	8000cf8 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff f82e 	bl	8000ae8 <__addsf3>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461c      	mov	r4, r3
 8001a90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a92:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a96:	f7ff f92f 	bl	8000cf8 <__aeabi_fmul>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff f822 	bl	8000ae8 <__addsf3>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <MadgwickAHRSupdate+0x850>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f922 	bl	8000cf8 <__aeabi_fmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff f815 	bl	8000ae8 <__addsf3>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ac4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001ac8:	f7ff f916 	bl	8000cf8 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff f807 	bl	8000ae4 <__aeabi_fsub>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461c      	mov	r4, r3
 8001ada:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001ade:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001ae0:	f7ff f90a 	bl	8000cf8 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <MadgwickAHRSupdate+0x850>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff f902 	bl	8000cf8 <__aeabi_fmul>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7fe fff5 	bl	8000ae8 <__addsf3>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461c      	mov	r4, r3
 8001b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b04:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001b08:	f7ff f8f6 	bl	8000cf8 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7fe ffe7 	bl	8000ae4 <__aeabi_fsub>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461c      	mov	r4, r3
 8001b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b1c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001b20:	f7ff f8ea 	bl	8000cf8 <__aeabi_fmul>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7fe ffdd 	bl	8000ae8 <__addsf3>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	4619      	mov	r1, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe ffd6 	bl	8000ae8 <__addsf3>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe ffcf 	bl	8000ae8 <__addsf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b50:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b56:	4619      	mov	r1, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe ffc5 	bl	8000ae8 <__addsf3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe ffbe 	bl	8000ae4 <__aeabi_fsub>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe ffb9 	bl	8000ae4 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff f8be 	bl	8000cf8 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461c      	mov	r4, r3
 8001b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe ffaf 	bl	8000ae8 <__addsf3>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ffaa 	bl	8000ae8 <__addsf3>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe ffa2 	bl	8000ae4 <__aeabi_fsub>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f8a7 	bl	8000cf8 <__aeabi_fmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7fe ff9a 	bl	8000ae8 <__addsf3>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461c      	mov	r4, r3
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MadgwickAHRSupdate+0x858>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f89a 	bl	8000cf8 <__aeabi_fmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bca:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001bce:	f7fe ff89 	bl	8000ae4 <__aeabi_fsub>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ff84 	bl	8000ae4 <__aeabi_fsub>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f889 	bl	8000cf8 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461e      	mov	r6, r3
 8001bea:	e005      	b.n	8001bf8 <MadgwickAHRSupdate+0x85c>
 8001bec:	200002d0 	.word	0x200002d0
 8001bf0:	200002c8 	.word	0x200002c8
 8001bf4:	200002cc 	.word	0x200002cc
 8001bf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001bfa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bfc:	f7fe ff72 	bl	8000ae4 <__aeabi_fsub>
 8001c00:	4603      	mov	r3, r0
 8001c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f877 	bl	8000cf8 <__aeabi_fmul>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4630      	mov	r0, r6
 8001c10:	f7fe ff6a 	bl	8000ae8 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff62 	bl	8000ae4 <__aeabi_fsub>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff f867 	bl	8000cf8 <__aeabi_fmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe ff58 	bl	8000ae4 <__aeabi_fsub>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461c      	mov	r4, r3
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c3e:	4a9f      	ldr	r2, [pc, #636]	; (8001ebc <MadgwickAHRSupdate+0xb20>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f857 	bl	8000cf8 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	4b9c      	ldr	r3, [pc, #624]	; (8001ec0 <MadgwickAHRSupdate+0xb24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f84f 	bl	8000cf8 <__aeabi_fmul>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f7fe ff42 	bl	8000ae8 <__addsf3>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461d      	mov	r5, r3
 8001c68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c6c:	f7fe ff3a 	bl	8000ae4 <__aeabi_fsub>
 8001c70:	4603      	mov	r3, r0
 8001c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f83f 	bl	8000cf8 <__aeabi_fmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461e      	mov	r6, r3
 8001c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c82:	f7fe ff31 	bl	8000ae8 <__addsf3>
 8001c86:	4603      	mov	r3, r0
 8001c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f834 	bl	8000cf8 <__aeabi_fmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4630      	mov	r0, r6
 8001c96:	f7fe ff27 	bl	8000ae8 <__addsf3>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff1f 	bl	8000ae4 <__aeabi_fsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff f824 	bl	8000cf8 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7fe ff17 	bl	8000ae8 <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461c      	mov	r4, r3
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <MadgwickAHRSupdate+0xb28>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f817 	bl	8000cf8 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461d      	mov	r5, r3
 8001cce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001cd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cd2:	f7fe ff09 	bl	8000ae8 <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f80c 	bl	8000cf8 <__aeabi_fmul>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461e      	mov	r6, r3
 8001ce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ce6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001cea:	f7fe fefb 	bl	8000ae4 <__aeabi_fsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fef6 	bl	8000ae4 <__aeabi_fsub>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fffb 	bl	8000cf8 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7fe feee 	bl	8000ae8 <__addsf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fee6 	bl	8000ae4 <__aeabi_fsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f7fe ffeb 	bl	8000cf8 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7fe fede 	bl	8000ae8 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	4619      	mov	r1, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fed7 	bl	8000ae8 <__addsf3>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fed0 	bl	8000ae4 <__aeabi_fsub>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fecb 	bl	8000ae4 <__aeabi_fsub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffd0 	bl	8000cf8 <__aeabi_fmul>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fec1 	bl	8000ae8 <__addsf3>
 8001d66:	4603      	mov	r3, r0
 8001d68:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe febc 	bl	8000ae8 <__addsf3>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe feb4 	bl	8000ae4 <__aeabi_fsub>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ffb9 	bl	8000cf8 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7fe feac 	bl	8000ae8 <__addsf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461c      	mov	r4, r3
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <MadgwickAHRSupdate+0xb24>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ffab 	bl	8000cf8 <__aeabi_fmul>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461d      	mov	r5, r3
 8001da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da8:	4619      	mov	r1, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fe9c 	bl	8000ae8 <__addsf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001db8:	f7fe fe94 	bl	8000ae4 <__aeabi_fsub>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461e      	mov	r6, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fe8f 	bl	8000ae8 <__addsf3>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4630      	mov	r0, r6
 8001dd0:	f7fe fe88 	bl	8000ae4 <__aeabi_fsub>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fe82 	bl	8000ae4 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4628      	mov	r0, r5
 8001de6:	f7fe ff87 	bl	8000cf8 <__aeabi_fmul>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7fe fe78 	bl	8000ae4 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461c      	mov	r4, r3
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <MadgwickAHRSupdate+0xb20>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ff7a 	bl	8000cf8 <__aeabi_fmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461d      	mov	r5, r3
 8001e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e0a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e0e:	f7fe fe69 	bl	8000ae4 <__aeabi_fsub>
 8001e12:	4603      	mov	r3, r0
 8001e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe64 	bl	8000ae4 <__aeabi_fsub>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff69 	bl	8000cf8 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461e      	mov	r6, r3
 8001e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001e2c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e2e:	f7fe fe59 	bl	8000ae4 <__aeabi_fsub>
 8001e32:	4603      	mov	r3, r0
 8001e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff5e 	bl	8000cf8 <__aeabi_fmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4630      	mov	r0, r6
 8001e42:	f7fe fe51 	bl	8000ae8 <__addsf3>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fe49 	bl	8000ae4 <__aeabi_fsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4628      	mov	r0, r5
 8001e58:	f7fe ff4e 	bl	8000cf8 <__aeabi_fmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7fe fe41 	bl	8000ae8 <__addsf3>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461c      	mov	r4, r3
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MadgwickAHRSupdate+0xb28>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe ff41 	bl	8000cf8 <__aeabi_fmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461d      	mov	r5, r3
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MadgwickAHRSupdate+0xb2c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff39 	bl	8000cf8 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f7fe fe2c 	bl	8000ae8 <__addsf3>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461d      	mov	r5, r3
 8001e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e98:	f7fe fe24 	bl	8000ae4 <__aeabi_fsub>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff29 	bl	8000cf8 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461e      	mov	r6, r3
 8001eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001eac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001eae:	f7fe fe1b 	bl	8000ae8 <__addsf3>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	e008      	b.n	8001ecc <MadgwickAHRSupdate+0xb30>
 8001eba:	bf00      	nop
 8001ebc:	200002d0 	.word	0x200002d0
 8001ec0:	200002c8 	.word	0x200002c8
 8001ec4:	200002cc 	.word	0x200002cc
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	f7fe ff14 	bl	8000cf8 <__aeabi_fmul>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f7fe fe07 	bl	8000ae8 <__addsf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fdff 	bl	8000ae4 <__aeabi_fsub>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7fe ff04 	bl	8000cf8 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7fe fdf7 	bl	8000ae8 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461c      	mov	r4, r3
 8001efe:	4b9f      	ldr	r3, [pc, #636]	; (800217c <MadgwickAHRSupdate+0xde0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fef7 	bl	8000cf8 <__aeabi_fmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	4b9c      	ldr	r3, [pc, #624]	; (8002180 <MadgwickAHRSupdate+0xde4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe feef 	bl	8000cf8 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f7fe fde0 	bl	8000ae4 <__aeabi_fsub>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461d      	mov	r5, r3
 8001f28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f2c:	f7fe fddc 	bl	8000ae8 <__addsf3>
 8001f30:	4603      	mov	r3, r0
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fedf 	bl	8000cf8 <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461e      	mov	r6, r3
 8001f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f40:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001f44:	f7fe fdce 	bl	8000ae4 <__aeabi_fsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fdc9 	bl	8000ae4 <__aeabi_fsub>
 8001f52:	4603      	mov	r3, r0
 8001f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fece 	bl	8000cf8 <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4630      	mov	r0, r6
 8001f62:	f7fe fdc1 	bl	8000ae8 <__addsf3>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fdb9 	bl	8000ae4 <__aeabi_fsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4619      	mov	r1, r3
 8001f76:	4628      	mov	r0, r5
 8001f78:	f7fe febe 	bl	8000cf8 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7fe fdb1 	bl	8000ae8 <__addsf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f92:	4619      	mov	r1, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fda7 	bl	8000ae8 <__addsf3>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fda0 	bl	8000ae4 <__aeabi_fsub>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fd9b 	bl	8000ae4 <__aeabi_fsub>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe fea0 	bl	8000cf8 <__aeabi_fmul>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fd91 	bl	8000ae8 <__addsf3>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fd8c 	bl	8000ae8 <__addsf3>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fd84 	bl	8000ae4 <__aeabi_fsub>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fe89 	bl	8000cf8 <__aeabi_fmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7fe fd7c 	bl	8000ae8 <__addsf3>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <MadgwickAHRSupdate+0xde8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe7b 	bl	8000cf8 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	461d      	mov	r5, r3
 8002006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002008:	4619      	mov	r1, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fd6c 	bl	8000ae8 <__addsf3>
 8002010:	4603      	mov	r3, r0
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002018:	f7fe fd64 	bl	8000ae4 <__aeabi_fsub>
 800201c:	4603      	mov	r3, r0
 800201e:	461e      	mov	r6, r3
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	4619      	mov	r1, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fd5f 	bl	8000ae8 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	4630      	mov	r0, r6
 8002030:	f7fe fd58 	bl	8000ae4 <__aeabi_fsub>
 8002034:	4603      	mov	r3, r0
 8002036:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fd52 	bl	8000ae4 <__aeabi_fsub>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4628      	mov	r0, r5
 8002046:	f7fe fe57 	bl	8000cf8 <__aeabi_fmul>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe fd48 	bl	8000ae4 <__aeabi_fsub>
 8002054:	4603      	mov	r3, r0
 8002056:	461c      	mov	r4, r3
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800205e:	4a49      	ldr	r2, [pc, #292]	; (8002184 <MadgwickAHRSupdate+0xde8>)
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe47 	bl	8000cf8 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	461d      	mov	r5, r3
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <MadgwickAHRSupdate+0xdec>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe3f 	bl	8000cf8 <__aeabi_fmul>
 800207a:	4603      	mov	r3, r0
 800207c:	4619      	mov	r1, r3
 800207e:	4628      	mov	r0, r5
 8002080:	f7fe fd30 	bl	8000ae4 <__aeabi_fsub>
 8002084:	4603      	mov	r3, r0
 8002086:	461d      	mov	r5, r3
 8002088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800208a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800208e:	f7fe fd29 	bl	8000ae4 <__aeabi_fsub>
 8002092:	4603      	mov	r3, r0
 8002094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fd24 	bl	8000ae4 <__aeabi_fsub>
 800209c:	4603      	mov	r3, r0
 800209e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fe29 	bl	8000cf8 <__aeabi_fmul>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461e      	mov	r6, r3
 80020aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80020ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020ae:	f7fe fd19 	bl	8000ae4 <__aeabi_fsub>
 80020b2:	4603      	mov	r3, r0
 80020b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fe1e 	bl	8000cf8 <__aeabi_fmul>
 80020bc:	4603      	mov	r3, r0
 80020be:	4619      	mov	r1, r3
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7fe fd11 	bl	8000ae8 <__addsf3>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fd09 	bl	8000ae4 <__aeabi_fsub>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4628      	mov	r0, r5
 80020d8:	f7fe fe0e 	bl	8000cf8 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe fd01 	bl	8000ae8 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461c      	mov	r4, r3
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <MadgwickAHRSupdate+0xde4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fe01 	bl	8000cf8 <__aeabi_fmul>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461d      	mov	r5, r3
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <MadgwickAHRSupdate+0xde0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fdf9 	bl	8000cf8 <__aeabi_fmul>
 8002106:	4603      	mov	r3, r0
 8002108:	4619      	mov	r1, r3
 800210a:	4628      	mov	r0, r5
 800210c:	f7fe fcec 	bl	8000ae8 <__addsf3>
 8002110:	4603      	mov	r3, r0
 8002112:	461d      	mov	r5, r3
 8002114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002116:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002118:	f7fe fce4 	bl	8000ae4 <__aeabi_fsub>
 800211c:	4603      	mov	r3, r0
 800211e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fde9 	bl	8000cf8 <__aeabi_fmul>
 8002126:	4603      	mov	r3, r0
 8002128:	461e      	mov	r6, r3
 800212a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800212c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800212e:	f7fe fcdb 	bl	8000ae8 <__addsf3>
 8002132:	4603      	mov	r3, r0
 8002134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fdde 	bl	8000cf8 <__aeabi_fmul>
 800213c:	4603      	mov	r3, r0
 800213e:	4619      	mov	r1, r3
 8002140:	4630      	mov	r0, r6
 8002142:	f7fe fcd1 	bl	8000ae8 <__addsf3>
 8002146:	4603      	mov	r3, r0
 8002148:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fcc9 	bl	8000ae4 <__aeabi_fsub>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	4628      	mov	r0, r5
 8002158:	f7fe fdce 	bl	8000cf8 <__aeabi_fmul>
 800215c:	4603      	mov	r3, r0
 800215e:	4619      	mov	r1, r3
 8002160:	4620      	mov	r0, r4
 8002162:	f7fe fcc1 	bl	8000ae8 <__addsf3>
 8002166:	4603      	mov	r3, r0
 8002168:	461c      	mov	r4, r3
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MadgwickAHRSupdate+0xdec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fdc1 	bl	8000cf8 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	461d      	mov	r5, r3
 800217a:	e007      	b.n	800218c <MadgwickAHRSupdate+0xdf0>
 800217c:	200002d0 	.word	0x200002d0
 8002180:	200002c8 	.word	0x200002c8
 8002184:	200002cc 	.word	0x200002cc
 8002188:	2000000c 	.word	0x2000000c
 800218c:	4b9f      	ldr	r3, [pc, #636]	; (800240c <MadgwickAHRSupdate+0x1070>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fdb0 	bl	8000cf8 <__aeabi_fmul>
 8002198:	4603      	mov	r3, r0
 800219a:	4619      	mov	r1, r3
 800219c:	4628      	mov	r0, r5
 800219e:	f7fe fca1 	bl	8000ae4 <__aeabi_fsub>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461d      	mov	r5, r3
 80021a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021aa:	f7fe fc9d 	bl	8000ae8 <__addsf3>
 80021ae:	4603      	mov	r3, r0
 80021b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fda0 	bl	8000cf8 <__aeabi_fmul>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461e      	mov	r6, r3
 80021bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80021be:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80021c2:	f7fe fc8f 	bl	8000ae4 <__aeabi_fsub>
 80021c6:	4603      	mov	r3, r0
 80021c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc8a 	bl	8000ae4 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd8f 	bl	8000cf8 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	4619      	mov	r1, r3
 80021de:	4630      	mov	r0, r6
 80021e0:	f7fe fc82 	bl	8000ae8 <__addsf3>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fc7a 	bl	8000ae4 <__aeabi_fsub>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	4628      	mov	r0, r5
 80021f6:	f7fe fd7f 	bl	8000cf8 <__aeabi_fmul>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4619      	mov	r1, r3
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe fc72 	bl	8000ae8 <__addsf3>
 8002204:	4603      	mov	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220a:	4619      	mov	r1, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fc6b 	bl	8000ae8 <__addsf3>
 8002212:	4603      	mov	r3, r0
 8002214:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fc64 	bl	8000ae4 <__aeabi_fsub>
 800221c:	4603      	mov	r3, r0
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fc5f 	bl	8000ae4 <__aeabi_fsub>
 8002226:	4603      	mov	r3, r0
 8002228:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fd64 	bl	8000cf8 <__aeabi_fmul>
 8002230:	4603      	mov	r3, r0
 8002232:	461c      	mov	r4, r3
 8002234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002236:	4619      	mov	r1, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fc55 	bl	8000ae8 <__addsf3>
 800223e:	4603      	mov	r3, r0
 8002240:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fc50 	bl	8000ae8 <__addsf3>
 8002248:	4603      	mov	r3, r0
 800224a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fc48 	bl	8000ae4 <__aeabi_fsub>
 8002254:	4603      	mov	r3, r0
 8002256:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fd4d 	bl	8000cf8 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f7fe fc40 	bl	8000ae8 <__addsf3>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002272:	4a67      	ldr	r2, [pc, #412]	; (8002410 <MadgwickAHRSupdate+0x1074>)
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd3d 	bl	8000cf8 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
 8002280:	461d      	mov	r5, r3
 8002282:	4b64      	ldr	r3, [pc, #400]	; (8002414 <MadgwickAHRSupdate+0x1078>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fd35 	bl	8000cf8 <__aeabi_fmul>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4628      	mov	r0, r5
 8002294:	f7fe fc28 	bl	8000ae8 <__addsf3>
 8002298:	4603      	mov	r3, r0
 800229a:	461d      	mov	r5, r3
 800229c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800229e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80022a2:	f7fe fc1f 	bl	8000ae4 <__aeabi_fsub>
 80022a6:	4603      	mov	r3, r0
 80022a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fc1a 	bl	8000ae4 <__aeabi_fsub>
 80022b0:	4603      	mov	r3, r0
 80022b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd1f 	bl	8000cf8 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461e      	mov	r6, r3
 80022be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80022c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80022c2:	f7fe fc0f 	bl	8000ae4 <__aeabi_fsub>
 80022c6:	4603      	mov	r3, r0
 80022c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fd14 	bl	8000cf8 <__aeabi_fmul>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4619      	mov	r1, r3
 80022d4:	4630      	mov	r0, r6
 80022d6:	f7fe fc07 	bl	8000ae8 <__addsf3>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fbff 	bl	8000ae4 <__aeabi_fsub>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7fe fd04 	bl	8000cf8 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7fe fbf7 	bl	8000ae8 <__addsf3>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461c      	mov	r4, r3
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002304:	4a44      	ldr	r2, [pc, #272]	; (8002418 <MadgwickAHRSupdate+0x107c>)
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fcf4 	bl	8000cf8 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	461d      	mov	r5, r3
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <MadgwickAHRSupdate+0x1070>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fcec 	bl	8000cf8 <__aeabi_fmul>
 8002320:	4603      	mov	r3, r0
 8002322:	4619      	mov	r1, r3
 8002324:	4628      	mov	r0, r5
 8002326:	f7fe fbdf 	bl	8000ae8 <__addsf3>
 800232a:	4603      	mov	r3, r0
 800232c:	461d      	mov	r5, r3
 800232e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002330:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002332:	f7fe fbd7 	bl	8000ae4 <__aeabi_fsub>
 8002336:	4603      	mov	r3, r0
 8002338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fcdc 	bl	8000cf8 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	461e      	mov	r6, r3
 8002344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002346:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002348:	f7fe fbce 	bl	8000ae8 <__addsf3>
 800234c:	4603      	mov	r3, r0
 800234e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fcd1 	bl	8000cf8 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	4630      	mov	r0, r6
 800235c:	f7fe fbc4 	bl	8000ae8 <__addsf3>
 8002360:	4603      	mov	r3, r0
 8002362:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fbbc 	bl	8000ae4 <__aeabi_fsub>
 800236c:	4603      	mov	r3, r0
 800236e:	4619      	mov	r1, r3
 8002370:	4628      	mov	r0, r5
 8002372:	f7fe fcc1 	bl	8000cf8 <__aeabi_fmul>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	4620      	mov	r0, r4
 800237c:	f7fe fbb4 	bl	8000ae8 <__addsf3>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <MadgwickAHRSupdate+0x1078>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fcb4 	bl	8000cf8 <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	461d      	mov	r5, r3
 8002394:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002396:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002398:	f7fe fba6 	bl	8000ae8 <__addsf3>
 800239c:	4603      	mov	r3, r0
 800239e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fca9 	bl	8000cf8 <__aeabi_fmul>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461e      	mov	r6, r3
 80023aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80023ac:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80023b0:	f7fe fb98 	bl	8000ae4 <__aeabi_fsub>
 80023b4:	4603      	mov	r3, r0
 80023b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fb93 	bl	8000ae4 <__aeabi_fsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fc98 	bl	8000cf8 <__aeabi_fmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7fe fb8b 	bl	8000ae8 <__addsf3>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fb83 	bl	8000ae4 <__aeabi_fsub>
 80023de:	4603      	mov	r3, r0
 80023e0:	4619      	mov	r1, r3
 80023e2:	4628      	mov	r0, r5
 80023e4:	f7fe fc88 	bl	8000cf8 <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fb7b 	bl	8000ae8 <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80023f6:	6a39      	ldr	r1, [r7, #32]
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f7fe fc7d 	bl	8000cf8 <__aeabi_fmul>
 80023fe:	4603      	mov	r3, r0
 8002400:	461c      	mov	r4, r3
 8002402:	69f9      	ldr	r1, [r7, #28]
 8002404:	69f8      	ldr	r0, [r7, #28]
 8002406:	f7fe fc77 	bl	8000cf8 <__aeabi_fmul>
 800240a:	e007      	b.n	800241c <MadgwickAHRSupdate+0x1080>
 800240c:	200002cc 	.word	0x200002cc
 8002410:	200002d0 	.word	0x200002d0
 8002414:	200002c8 	.word	0x200002c8
 8002418:	2000000c 	.word	0x2000000c
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	4620      	mov	r0, r4
 8002422:	f7fe fb61 	bl	8000ae8 <__addsf3>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	69b8      	ldr	r0, [r7, #24]
 800242e:	f7fe fc63 	bl	8000cf8 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f7fe fb56 	bl	8000ae8 <__addsf3>
 800243c:	4603      	mov	r3, r0
 800243e:	461c      	mov	r4, r3
 8002440:	6979      	ldr	r1, [r7, #20]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7fe fc58 	bl	8000cf8 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fb4b 	bl	8000ae8 <__addsf3>
 8002452:	4603      	mov	r3, r0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe ff65 	bl	8001324 <invSqrt>
 800245a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 800245e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002462:	6a38      	ldr	r0, [r7, #32]
 8002464:	f7fe fc48 	bl	8000cf8 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 800246c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002470:	69f8      	ldr	r0, [r7, #28]
 8002472:	f7fe fc41 	bl	8000cf8 <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 800247a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800247e:	69b8      	ldr	r0, [r7, #24]
 8002480:	f7fe fc3a 	bl	8000cf8 <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002488:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800248c:	6978      	ldr	r0, [r7, #20]
 800248e:	f7fe fc33 	bl	8000cf8 <__aeabi_fmul>
 8002492:	4603      	mov	r3, r0
 8002494:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002496:	4b77      	ldr	r3, [pc, #476]	; (8002674 <MadgwickAHRSupdate+0x12d8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a39      	ldr	r1, [r7, #32]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc2b 	bl	8000cf8 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80024aa:	f7fe fb1b 	bl	8000ae4 <__aeabi_fsub>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <MadgwickAHRSupdate+0x12d8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69f9      	ldr	r1, [r7, #28]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc1c 	bl	8000cf8 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80024c8:	f7fe fb0c 	bl	8000ae4 <__aeabi_fsub>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 80024d2:	4b68      	ldr	r3, [pc, #416]	; (8002674 <MadgwickAHRSupdate+0x12d8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fc0d 	bl	8000cf8 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80024e6:	f7fe fafd 	bl	8000ae4 <__aeabi_fsub>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 80024f0:	4b60      	ldr	r3, [pc, #384]	; (8002674 <MadgwickAHRSupdate+0x12d8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fbfe 	bl	8000cf8 <__aeabi_fmul>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4619      	mov	r1, r3
 8002500:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002504:	f7fe faee 	bl	8000ae4 <__aeabi_fsub>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800250e:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002512:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002516:	f7fe fbef 	bl	8000cf8 <__aeabi_fmul>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4b56      	ldr	r3, [pc, #344]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f7fe fadf 	bl	8000ae8 <__addsf3>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	4b52      	ldr	r3, [pc, #328]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 8002530:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002532:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002536:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800253a:	f7fe fbdd 	bl	8000cf8 <__aeabi_fmul>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4b4e      	ldr	r3, [pc, #312]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe facd 	bl	8000ae8 <__addsf3>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 8002554:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002556:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 800255a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800255e:	f7fe fbcb 	bl	8000cf8 <__aeabi_fmul>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7fe fabb 	bl	8000ae8 <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 8002578:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 800257a:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 800257e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002582:	f7fe fbb9 	bl	8000cf8 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7fe faa9 	bl	8000ae8 <__addsf3>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 800259c:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a35      	ldr	r2, [pc, #212]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fba5 	bl	8000cf8 <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461c      	mov	r4, r3
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a31      	ldr	r2, [pc, #196]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fb9b 	bl	8000cf8 <__aeabi_fmul>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4619      	mov	r1, r3
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7fe fa8e 	bl	8000ae8 <__addsf3>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461c      	mov	r4, r3
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fb8c 	bl	8000cf8 <__aeabi_fmul>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7fe fa7f 	bl	8000ae8 <__addsf3>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461c      	mov	r4, r3
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a24      	ldr	r2, [pc, #144]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fb7d 	bl	8000cf8 <__aeabi_fmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	4619      	mov	r1, r3
 8002602:	4620      	mov	r0, r4
 8002604:	f7fe fa70 	bl	8000ae8 <__addsf3>
 8002608:	4603      	mov	r3, r0
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fe8a 	bl	8001324 <invSqrt>
 8002610:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fb6b 	bl	8000cf8 <__aeabi_fmul>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MadgwickAHRSupdate+0x12dc>)
 8002628:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fb60 	bl	8000cf8 <__aeabi_fmul>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MadgwickAHRSupdate+0x12e0>)
 800263e:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fb55 	bl	8000cf8 <__aeabi_fmul>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <MadgwickAHRSupdate+0x12e4>)
 8002654:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fb4a 	bl	8000cf8 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MadgwickAHRSupdate+0x12e8>)
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	37a4      	adds	r7, #164	; 0xa4
 800266e:	46bd      	mov	sp, r7
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	2000000c 	.word	0x2000000c
 800267c:	200002c8 	.word	0x200002c8
 8002680:	200002cc 	.word	0x200002cc
 8002684:	200002d0 	.word	0x200002d0

08002688 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b09b      	sub	sp, #108	; 0x6c
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002696:	4b9d      	ldr	r3, [pc, #628]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800269e:	68f9      	ldr	r1, [r7, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fb29 	bl	8000cf8 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461c      	mov	r4, r3
 80026aa:	4b99      	ldr	r3, [pc, #612]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fb21 	bl	8000cf8 <__aeabi_fmul>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7fe fa12 	bl	8000ae4 <__aeabi_fsub>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461c      	mov	r4, r3
 80026c4:	4b93      	ldr	r3, [pc, #588]	; (8002914 <MadgwickAHRSupdateIMU+0x28c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fb14 	bl	8000cf8 <__aeabi_fmul>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fe fa05 	bl	8000ae4 <__aeabi_fsub>
 80026da:	4603      	mov	r3, r0
 80026dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fb09 	bl	8000cf8 <__aeabi_fmul>
 80026e6:	4603      	mov	r3, r0
 80026e8:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80026ea:	4b8b      	ldr	r3, [pc, #556]	; (8002918 <MadgwickAHRSupdateIMU+0x290>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fb01 	bl	8000cf8 <__aeabi_fmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461c      	mov	r4, r3
 80026fa:	4b85      	ldr	r3, [pc, #532]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe faf9 	bl	8000cf8 <__aeabi_fmul>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe f9ec 	bl	8000ae8 <__addsf3>
 8002710:	4603      	mov	r3, r0
 8002712:	461c      	mov	r4, r3
 8002714:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <MadgwickAHRSupdateIMU+0x28c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe faec 	bl	8000cf8 <__aeabi_fmul>
 8002720:	4603      	mov	r3, r0
 8002722:	4619      	mov	r1, r3
 8002724:	4620      	mov	r0, r4
 8002726:	f7fe f9dd 	bl	8000ae4 <__aeabi_fsub>
 800272a:	4603      	mov	r3, r0
 800272c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fae1 	bl	8000cf8 <__aeabi_fmul>
 8002736:	4603      	mov	r3, r0
 8002738:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <MadgwickAHRSupdateIMU+0x290>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fad9 	bl	8000cf8 <__aeabi_fmul>
 8002746:	4603      	mov	r3, r0
 8002748:	461c      	mov	r4, r3
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fad1 	bl	8000cf8 <__aeabi_fmul>
 8002756:	4603      	mov	r3, r0
 8002758:	4619      	mov	r1, r3
 800275a:	4620      	mov	r0, r4
 800275c:	f7fe f9c2 	bl	8000ae4 <__aeabi_fsub>
 8002760:	4603      	mov	r3, r0
 8002762:	461c      	mov	r4, r3
 8002764:	4b6b      	ldr	r3, [pc, #428]	; (8002914 <MadgwickAHRSupdateIMU+0x28c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fac4 	bl	8000cf8 <__aeabi_fmul>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	4620      	mov	r0, r4
 8002776:	f7fe f9b7 	bl	8000ae8 <__addsf3>
 800277a:	4603      	mov	r3, r0
 800277c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fab9 	bl	8000cf8 <__aeabi_fmul>
 8002786:	4603      	mov	r3, r0
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <MadgwickAHRSupdateIMU+0x290>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fab1 	bl	8000cf8 <__aeabi_fmul>
 8002796:	4603      	mov	r3, r0
 8002798:	461c      	mov	r4, r3
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe faa9 	bl	8000cf8 <__aeabi_fmul>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7fe f99c 	bl	8000ae8 <__addsf3>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	4b56      	ldr	r3, [pc, #344]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fa9c 	bl	8000cf8 <__aeabi_fmul>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7fe f98d 	bl	8000ae4 <__aeabi_fsub>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fa91 	bl	8000cf8 <__aeabi_fmul>
 80027d6:	4603      	mov	r3, r0
 80027d8:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f7fe fc1e 	bl	8001020 <__aeabi_fcmpeq>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <MadgwickAHRSupdateIMU+0x184>
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80027f0:	f7fe fc16 	bl	8001020 <__aeabi_fcmpeq>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <MadgwickAHRSupdateIMU+0x184>
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002800:	f7fe fc0e 	bl	8001020 <__aeabi_fcmpeq>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 823c 	bne.w	8002c84 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f7fe fa72 	bl	8000cf8 <__aeabi_fmul>
 8002814:	4603      	mov	r3, r0
 8002816:	461c      	mov	r4, r3
 8002818:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800281a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800281c:	f7fe fa6c 	bl	8000cf8 <__aeabi_fmul>
 8002820:	4603      	mov	r3, r0
 8002822:	4619      	mov	r1, r3
 8002824:	4620      	mov	r0, r4
 8002826:	f7fe f95f 	bl	8000ae8 <__addsf3>
 800282a:	4603      	mov	r3, r0
 800282c:	461c      	mov	r4, r3
 800282e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002830:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002832:	f7fe fa61 	bl	8000cf8 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	4619      	mov	r1, r3
 800283a:	4620      	mov	r0, r4
 800283c:	f7fe f954 	bl	8000ae8 <__addsf3>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fd6e 	bl	8001324 <invSqrt>
 8002848:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 800284a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f7fe fa53 	bl	8000cf8 <__aeabi_fmul>
 8002852:	4603      	mov	r3, r0
 8002854:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8002856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002858:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800285a:	f7fe fa4d 	bl	8000cf8 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 8002862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002864:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002866:	f7fe fa47 	bl	8000cf8 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <MadgwickAHRSupdateIMU+0x290>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe f937 	bl	8000ae8 <__addsf3>
 800287a:	4603      	mov	r3, r0
 800287c:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe f92f 	bl	8000ae8 <__addsf3>
 800288a:	4603      	mov	r3, r0
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe f927 	bl	8000ae8 <__addsf3>
 800289a:	4603      	mov	r3, r0
 800289c:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MadgwickAHRSupdateIMU+0x28c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe f91f 	bl	8000ae8 <__addsf3>
 80028aa:	4603      	mov	r3, r0
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MadgwickAHRSupdateIMU+0x290>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fa1e 	bl	8000cf8 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fa15 	bl	8000cf8 <__aeabi_fmul>
 80028ce:	4603      	mov	r3, r0
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa0c 	bl	8000cf8 <__aeabi_fmul>
 80028e0:	4603      	mov	r3, r0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MadgwickAHRSupdateIMU+0x284>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fa03 	bl	8000cf8 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MadgwickAHRSupdateIMU+0x288>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f9fa 	bl	8000cf8 <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
 8002908:	e008      	b.n	800291c <MadgwickAHRSupdateIMU+0x294>
 800290a:	bf00      	nop
 800290c:	200002c8 	.word	0x200002c8
 8002910:	200002cc 	.word	0x200002cc
 8002914:	200002d0 	.word	0x200002d0
 8002918:	2000000c 	.word	0x2000000c
		q0q0 = q0 * q0;
 800291c:	4b9a      	ldr	r3, [pc, #616]	; (8002b88 <MadgwickAHRSupdateIMU+0x500>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a99      	ldr	r2, [pc, #612]	; (8002b88 <MadgwickAHRSupdateIMU+0x500>)
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f9e6 	bl	8000cf8 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8002930:	4b96      	ldr	r3, [pc, #600]	; (8002b8c <MadgwickAHRSupdateIMU+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a95      	ldr	r2, [pc, #596]	; (8002b8c <MadgwickAHRSupdateIMU+0x504>)
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f9dc 	bl	8000cf8 <__aeabi_fmul>
 8002940:	4603      	mov	r3, r0
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <MadgwickAHRSupdateIMU+0x508>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a91      	ldr	r2, [pc, #580]	; (8002b90 <MadgwickAHRSupdateIMU+0x508>)
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f9d2 	bl	8000cf8 <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8002958:	4b8e      	ldr	r3, [pc, #568]	; (8002b94 <MadgwickAHRSupdateIMU+0x50c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a8d      	ldr	r2, [pc, #564]	; (8002b94 <MadgwickAHRSupdateIMU+0x50c>)
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f9c8 	bl	8000cf8 <__aeabi_fmul>
 8002968:	4603      	mov	r3, r0
 800296a:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002970:	f7fe f9c2 	bl	8000cf8 <__aeabi_fmul>
 8002974:	4603      	mov	r3, r0
 8002976:	461c      	mov	r4, r3
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800297c:	f7fe f9bc 	bl	8000cf8 <__aeabi_fmul>
 8002980:	4603      	mov	r3, r0
 8002982:	4619      	mov	r1, r3
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe f8af 	bl	8000ae8 <__addsf3>
 800298a:	4603      	mov	r3, r0
 800298c:	461c      	mov	r4, r3
 800298e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002990:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002992:	f7fe f9b1 	bl	8000cf8 <__aeabi_fmul>
 8002996:	4603      	mov	r3, r0
 8002998:	4619      	mov	r1, r3
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe f8a4 	bl	8000ae8 <__addsf3>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461c      	mov	r4, r3
 80029a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80029a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029a8:	f7fe f9a6 	bl	8000cf8 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4619      	mov	r1, r3
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7fe f897 	bl	8000ae4 <__aeabi_fsub>
 80029b6:	4603      	mov	r3, r0
 80029b8:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80029ba:	6a39      	ldr	r1, [r7, #32]
 80029bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029be:	f7fe f99b 	bl	8000cf8 <__aeabi_fmul>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461c      	mov	r4, r3
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029ca:	f7fe f995 	bl	8000cf8 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7fe f886 	bl	8000ae4 <__aeabi_fsub>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80029e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029e2:	f7fe f989 	bl	8000cf8 <__aeabi_fmul>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <MadgwickAHRSupdateIMU+0x504>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe f981 	bl	8000cf8 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4619      	mov	r1, r3
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe f874 	bl	8000ae8 <__addsf3>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461c      	mov	r4, r3
 8002a04:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a08:	f7fe f976 	bl	8000cf8 <__aeabi_fmul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7fe f867 	bl	8000ae4 <__aeabi_fsub>
 8002a16:	4603      	mov	r3, r0
 8002a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f862 	bl	8000ae4 <__aeabi_fsub>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461c      	mov	r4, r3
 8002a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a28:	f7fe f966 	bl	8000cf8 <__aeabi_fmul>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7fe f859 	bl	8000ae8 <__addsf3>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461c      	mov	r4, r3
 8002a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a3e:	f7fe f95b 	bl	8000cf8 <__aeabi_fmul>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7fe f84e 	bl	8000ae8 <__addsf3>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461c      	mov	r4, r3
 8002a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a54:	f7fe f950 	bl	8000cf8 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7fe f843 	bl	8000ae8 <__addsf3>
 8002a62:	4603      	mov	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002a66:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a6c:	f7fe f944 	bl	8000cf8 <__aeabi_fmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <MadgwickAHRSupdateIMU+0x508>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f7fe f93c 	bl	8000cf8 <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461c      	mov	r4, r3
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a88:	f7fe f936 	bl	8000cf8 <__aeabi_fmul>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe f829 	bl	8000ae8 <__addsf3>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461c      	mov	r4, r3
 8002a9a:	6a39      	ldr	r1, [r7, #32]
 8002a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a9e:	f7fe f92b 	bl	8000cf8 <__aeabi_fmul>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7fe f81e 	bl	8000ae8 <__addsf3>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461c      	mov	r4, r3
 8002ab0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002ab2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ab4:	f7fe f920 	bl	8000cf8 <__aeabi_fmul>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7fe f811 	bl	8000ae4 <__aeabi_fsub>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f80c 	bl	8000ae4 <__aeabi_fsub>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461c      	mov	r4, r3
 8002ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad4:	f7fe f910 	bl	8000cf8 <__aeabi_fmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe f803 	bl	8000ae8 <__addsf3>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aea:	f7fe f905 	bl	8000cf8 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fd fff8 	bl	8000ae8 <__addsf3>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461c      	mov	r4, r3
 8002afc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002afe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b00:	f7fe f8fa 	bl	8000cf8 <__aeabi_fmul>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fd ffed 	bl	8000ae8 <__addsf3>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002b12:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b18:	f7fe f8ee 	bl	8000cf8 <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <MadgwickAHRSupdateIMU+0x50c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7fe f8e6 	bl	8000cf8 <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461c      	mov	r4, r3
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b34:	f7fe f8e0 	bl	8000cf8 <__aeabi_fmul>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7fd ffd1 	bl	8000ae4 <__aeabi_fsub>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461c      	mov	r4, r3
 8002b46:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b4c:	f7fe f8d4 	bl	8000cf8 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <MadgwickAHRSupdateIMU+0x50c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fe f8cc 	bl	8000cf8 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4619      	mov	r1, r3
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7fd ffbf 	bl	8000ae8 <__addsf3>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461c      	mov	r4, r3
 8002b6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b72:	f7fe f8c1 	bl	8000cf8 <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fd ffb2 	bl	8000ae4 <__aeabi_fsub>
 8002b80:	4603      	mov	r3, r0
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e008      	b.n	8002b98 <MadgwickAHRSupdateIMU+0x510>
 8002b86:	bf00      	nop
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	200002c8 	.word	0x200002c8
 8002b90:	200002cc 	.word	0x200002cc
 8002b94:	200002d0 	.word	0x200002d0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002b98:	69f9      	ldr	r1, [r7, #28]
 8002b9a:	69f8      	ldr	r0, [r7, #28]
 8002b9c:	f7fe f8ac 	bl	8000cf8 <__aeabi_fmul>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461c      	mov	r4, r3
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	69b8      	ldr	r0, [r7, #24]
 8002ba8:	f7fe f8a6 	bl	8000cf8 <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7fd ff99 	bl	8000ae8 <__addsf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	6979      	ldr	r1, [r7, #20]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7fe f89b 	bl	8000cf8 <__aeabi_fmul>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7fd ff8e 	bl	8000ae8 <__addsf3>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461c      	mov	r4, r3
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	6938      	ldr	r0, [r7, #16]
 8002bd4:	f7fe f890 	bl	8000cf8 <__aeabi_fmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7fd ff83 	bl	8000ae8 <__addsf3>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fb9d 	bl	8001324 <invSqrt>
 8002bea:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bee:	69f8      	ldr	r0, [r7, #28]
 8002bf0:	f7fe f882 	bl	8000cf8 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f7fe f87c 	bl	8000cf8 <__aeabi_fmul>
 8002c00:	4603      	mov	r3, r0
 8002c02:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7fe f876 	bl	8000cf8 <__aeabi_fmul>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	f7fe f870 	bl	8000cf8 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <MadgwickAHRSupdateIMU+0x750>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69f9      	ldr	r1, [r7, #28]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f868 	bl	8000cf8 <__aeabi_fmul>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c2e:	f7fd ff59 	bl	8000ae4 <__aeabi_fsub>
 8002c32:	4603      	mov	r3, r0
 8002c34:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <MadgwickAHRSupdateIMU+0x750>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f85b 	bl	8000cf8 <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c48:	f7fd ff4c 	bl	8000ae4 <__aeabi_fsub>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <MadgwickAHRSupdateIMU+0x750>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f84e 	bl	8000cf8 <__aeabi_fmul>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c62:	f7fd ff3f 	bl	8000ae4 <__aeabi_fsub>
 8002c66:	4603      	mov	r3, r0
 8002c68:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <MadgwickAHRSupdateIMU+0x750>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6939      	ldr	r1, [r7, #16]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f841 	bl	8000cf8 <__aeabi_fmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002c7c:	f7fd ff32 	bl	8000ae4 <__aeabi_fsub>
 8002c80:	4603      	mov	r3, r0
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002c84:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002c88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c8a:	f7fe f835 	bl	8000cf8 <__aeabi_fmul>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7fd ff25 	bl	8000ae8 <__addsf3>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002ca4:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002ca6:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002caa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002cac:	f7fe f824 	bl	8000cf8 <__aeabi_fmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7fd ff14 	bl	8000ae8 <__addsf3>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002cc6:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002cc8:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002ccc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002cce:	f7fe f813 	bl	8000cf8 <__aeabi_fmul>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7fd ff03 	bl	8000ae8 <__addsf3>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002ce8:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002cea:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002cee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002cf0:	f7fe f802 	bl	8000cf8 <__aeabi_fmul>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fd fef2 	bl	8000ae8 <__addsf3>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002d0a:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd ffee 	bl	8000cf8 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461c      	mov	r4, r3
 8002d20:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd ffe4 	bl	8000cf8 <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd fed7 	bl	8000ae8 <__addsf3>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ffd5 	bl	8000cf8 <__aeabi_fmul>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fd fec8 	bl	8000ae8 <__addsf3>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461c      	mov	r4, r3
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd ffc6 	bl	8000cf8 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7fd feb9 	bl	8000ae8 <__addsf3>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fad3 	bl	8001324 <invSqrt>
 8002d7e:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd ffb6 	bl	8000cf8 <__aeabi_fmul>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <MadgwickAHRSupdateIMU+0x754>)
 8002d92:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd ffac 	bl	8000cf8 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <MadgwickAHRSupdateIMU+0x758>)
 8002da6:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd ffa2 	bl	8000cf8 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <MadgwickAHRSupdateIMU+0x75c>)
 8002dba:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ff98 	bl	8000cf8 <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MadgwickAHRSupdateIMU+0x760>)
 8002dce:	601a      	str	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	376c      	adds	r7, #108	; 0x6c
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	200002c8 	.word	0x200002c8
 8002de4:	200002cc 	.word	0x200002cc
 8002de8:	200002d0 	.word	0x200002d0

08002dec <computeAngles>:

void computeAngles()
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * 57.29578f;
 8002df0:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <computeAngles+0x174>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <computeAngles+0x178>)
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd ff7c 	bl	8000cf8 <__aeabi_fmul>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461c      	mov	r4, r3
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <computeAngles+0x17c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <computeAngles+0x180>)
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd ff72 	bl	8000cf8 <__aeabi_fmul>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4619      	mov	r1, r3
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7fd fe65 	bl	8000ae8 <__addsf3>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461c      	mov	r4, r3
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <computeAngles+0x178>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <computeAngles+0x178>)
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd ff63 	bl	8000cf8 <__aeabi_fmul>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002e3a:	f7fd fe53 	bl	8000ae4 <__aeabi_fsub>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461d      	mov	r5, r3
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <computeAngles+0x17c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <computeAngles+0x17c>)
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd ff53 	bl	8000cf8 <__aeabi_fmul>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4619      	mov	r1, r3
 8002e56:	4628      	mov	r0, r5
 8002e58:	f7fd fe44 	bl	8000ae4 <__aeabi_fsub>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4620      	mov	r0, r4
 8002e62:	f009 facd 	bl	800c400 <atan2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4941      	ldr	r1, [pc, #260]	; (8002f70 <computeAngles+0x184>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff44 	bl	8000cf8 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <computeAngles+0x188>)
 8002e76:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2)) * 57.29578f;
 8002e78:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <computeAngles+0x178>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <computeAngles+0x180>)
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ff38 	bl	8000cf8 <__aeabi_fmul>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461c      	mov	r4, r3
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <computeAngles+0x174>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a35      	ldr	r2, [pc, #212]	; (8002f68 <computeAngles+0x17c>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff2e 	bl	8000cf8 <__aeabi_fmul>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f7fd fe1f 	bl	8000ae4 <__aeabi_fsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ff23 	bl	8000cf8 <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f009 fa83 	bl	800c3c0 <asinf>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	492c      	ldr	r1, [pc, #176]	; (8002f70 <computeAngles+0x184>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ff1a 	bl	8000cf8 <__aeabi_fmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <computeAngles+0x18c>)
 8002eca:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3) * 57.29578f;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <computeAngles+0x178>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <computeAngles+0x17c>)
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff0e 	bl	8000cf8 <__aeabi_fmul>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461c      	mov	r4, r3
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <computeAngles+0x174>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <computeAngles+0x180>)
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd ff04 	bl	8000cf8 <__aeabi_fmul>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7fd fdf7 	bl	8000ae8 <__addsf3>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461c      	mov	r4, r3
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <computeAngles+0x17c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <computeAngles+0x17c>)
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fef5 	bl	8000cf8 <__aeabi_fmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4619      	mov	r1, r3
 8002f12:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002f16:	f7fd fde5 	bl	8000ae4 <__aeabi_fsub>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <computeAngles+0x180>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <computeAngles+0x180>)
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fee5 	bl	8000cf8 <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4619      	mov	r1, r3
 8002f32:	4628      	mov	r0, r5
 8002f34:	f7fd fdd6 	bl	8000ae4 <__aeabi_fsub>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f009 fa5f 	bl	800c400 <atan2f>
 8002f42:	4603      	mov	r3, r0
 8002f44:	490a      	ldr	r1, [pc, #40]	; (8002f70 <computeAngles+0x184>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fed6 	bl	8000cf8 <__aeabi_fmul>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <computeAngles+0x190>)
 8002f52:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <computeAngles+0x194>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	200002c8 	.word	0x200002c8
 8002f68:	200002cc 	.word	0x200002cc
 8002f6c:	200002d0 	.word	0x200002d0
 8002f70:	42652ee1 	.word	0x42652ee1
 8002f74:	200002d4 	.word	0x200002d4
 8002f78:	200002d8 	.word	0x200002d8
 8002f7c:	200002dc 	.word	0x200002dc
 8002f80:	200002e0 	.word	0x200002e0

08002f84 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	72fb      	strb	r3, [r7, #11]
 8002f94:	4613      	mov	r3, r2
 8002f96:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002f98:	7afb      	ldrb	r3, [r7, #11]
 8002f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f9e:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002fa4:	f107 0214 	add.w	r2, r7, #20
 8002fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	21d2      	movs	r1, #210	; 0xd2
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f002 ffd6 	bl	8005f64 <HAL_I2C_Master_Transmit>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fc2:	9200      	str	r2, [sp, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	21d2      	movs	r1, #210	; 0xd2
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f003 f8c9 	bl	8006160 <HAL_I2C_Master_Receive>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b088      	sub	sp, #32
 8002fde:	af02      	add	r7, sp, #8
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fee:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002ff4:	f107 0214 	add.w	r2, r7, #20
 8002ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2301      	movs	r3, #1
 8003000:	21d2      	movs	r1, #210	; 0xd2
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f002 ffae 	bl	8005f64 <HAL_I2C_Master_Transmit>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 800300c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2301      	movs	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	21d2      	movs	r1, #210	; 0xd2
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f003 f8a1 	bl	8006160 <HAL_I2C_Master_Receive>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b086      	sub	sp, #24
 800302e:	af02      	add	r7, sp, #8
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	70fb      	strb	r3, [r7, #3]
 8003036:	4613      	mov	r3, r2
 8003038:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003040:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	733b      	strb	r3, [r7, #12]
 8003046:	78bb      	ldrb	r3, [r7, #2]
 8003048:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 800304a:	f107 020c 	add.w	r2, r7, #12
 800304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2302      	movs	r3, #2
 8003056:	21d2      	movs	r1, #210	; 0xd2
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f002 ff83 	bl	8005f64 <HAL_I2C_Master_Transmit>
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	70fb      	strb	r3, [r7, #3]
 8003072:	4613      	mov	r3, r2
 8003074:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8003076:	2230      	movs	r2, #48	; 0x30
 8003078:	217f      	movs	r1, #127	; 0x7f
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffd5 	bl	800302a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003080:	2001      	movs	r0, #1
 8003082:	f001 ff43 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8003086:	220c      	movs	r2, #12
 8003088:	2103      	movs	r1, #3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffcd 	bl	800302a <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003090:	2001      	movs	r0, #1
 8003092:	f001 ff3b 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	461a      	mov	r2, r3
 800309a:	2104      	movs	r1, #4
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ffc4 	bl	800302a <ICM_WriteOneByte>

  	HAL_Delay(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f001 ff32 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 80030a8:	78bb      	ldrb	r3, [r7, #2]
 80030aa:	461a      	mov	r2, r3
 80030ac:	2106      	movs	r1, #6
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ffbb 	bl	800302a <ICM_WriteOneByte>

  	HAL_Delay(1);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f001 ff29 	bl	8004f0c <HAL_Delay>
  }
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 80030ce:	2230      	movs	r2, #48	; 0x30
 80030d0:	217f      	movs	r1, #127	; 0x7f
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa9 	bl	800302a <ICM_WriteOneByte>
    HAL_Delay(1);
 80030d8:	2001      	movs	r0, #1
 80030da:	f001 ff17 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 80030de:	228c      	movs	r2, #140	; 0x8c
 80030e0:	2103      	movs	r1, #3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa1 	bl	800302a <ICM_WriteOneByte>
    HAL_Delay(1);
 80030e8:	2001      	movs	r0, #1
 80030ea:	f001 ff0f 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	461a      	mov	r2, r3
 80030f2:	2104      	movs	r1, #4
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff98 	bl	800302a <ICM_WriteOneByte>
    HAL_Delay(1);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f001 ff06 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	2106      	movs	r1, #6
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff90 	bl	800302a <ICM_WriteOneByte>
  	HAL_Delay(1);
 800310a:	2001      	movs	r0, #1
 800310c:	f001 fefe 	bl	8004f0c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 8003110:	2200      	movs	r2, #0
 8003112:	217f      	movs	r1, #127	; 0x7f
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff88 	bl	800302a <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 800311a:	f107 030f 	add.w	r3, r7, #15
 800311e:	461a      	mov	r2, r3
 8003120:	213b      	movs	r1, #59	; 0x3b
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff59 	bl	8002fda <ICM_ReadOneByte>
    HAL_Delay(1);
 8003128:	2001      	movs	r0, #1
 800312a:	f001 feef 	bl	8004f0c <HAL_Delay>
  	return Data;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
  }
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 8003142:	2101      	movs	r1, #1
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffbc 	bl	80030c2 <ICM_Mag_Read>
 800314a:	4603      	mov	r3, r0
 800314c:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 800314e:	2111      	movs	r1, #17
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffb6 	bl	80030c2 <ICM_Mag_Read>
 8003156:	4603      	mov	r3, r0
 8003158:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 800315a:	2112      	movs	r1, #18
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ffb0 	bl	80030c2 <ICM_Mag_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8003166:	7b7b      	ldrb	r3, [r7, #13]
 8003168:	b21a      	sxth	r2, r3
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b21b      	sxth	r3, r3
 8003170:	4313      	orrs	r3, r2
 8003172:	b21a      	sxth	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 8003178:	2113      	movs	r1, #19
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffa1 	bl	80030c2 <ICM_Mag_Read>
 8003180:	4603      	mov	r3, r0
 8003182:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8003184:	2114      	movs	r1, #20
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff9b 	bl	80030c2 <ICM_Mag_Read>
 800318c:	4603      	mov	r3, r0
 800318e:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	b219      	sxth	r1, r3
 8003194:	7c3b      	ldrb	r3, [r7, #16]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	b21a      	sxth	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	3302      	adds	r3, #2
 800319e:	430a      	orrs	r2, r1
 80031a0:	b212      	sxth	r2, r2
 80031a2:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 80031a4:	2115      	movs	r1, #21
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff8b 	bl	80030c2 <ICM_Mag_Read>
 80031ac:	4603      	mov	r3, r0
 80031ae:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 80031b0:	2116      	movs	r1, #22
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ff85 	bl	80030c2 <ICM_Mag_Read>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	b219      	sxth	r1, r3
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3304      	adds	r3, #4
 80031ca:	430a      	orrs	r2, r1
 80031cc:	b212      	sxth	r2, r2
 80031ce:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 80031d0:	2201      	movs	r2, #1
 80031d2:	2131      	movs	r1, #49	; 0x31
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff46 	bl	8003066 <i2c_Mag_write>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f001 fe8e 	bl	8004f0c <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9c0 	bl	8003578 <ICM_SelectBank>
	HAL_Delay(10);
 80031f8:	200a      	movs	r0, #10
 80031fa:	f001 fe87 	bl	8004f0c <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9ca 	bl	8003598 <ICM_Enable_I2C>
	HAL_Delay(10);
 8003204:	200a      	movs	r0, #10
 8003206:	f001 fe81 	bl	8004f0c <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 800320a:	2101      	movs	r1, #1
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9d0 	bl	80035b2 <ICM_SetClock>
	HAL_Delay(10);
 8003212:	200a      	movs	r0, #10
 8003214:	f001 fe7a 	bl	8004f0c <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f9da 	bl	80035d2 <ICM_AccelGyroOff>
	HAL_Delay(20);
 800321e:	2014      	movs	r0, #20
 8003220:	f001 fe74 	bl	8004f0c <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9e1 	bl	80035ec <ICM_AccelGyroOn>
	HAL_Delay(10);
 800322a:	200a      	movs	r0, #10
 800322c:	f001 fe6e 	bl	8004f0c <HAL_Delay>
	ICM_Initialize(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f804 	bl	800323e <ICM_Initialize>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 8003246:	2120      	movs	r1, #32
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f995 	bl	8003578 <ICM_SelectBank>
	HAL_Delay(20);
 800324e:	2014      	movs	r0, #20
 8003250:	f001 fe5c 	bl	8004f0c <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8003254:	2229      	movs	r2, #41	; 0x29
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9d4 	bl	8003606 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 800325e:	200a      	movs	r0, #10
 8003260:	f001 fe54 	bl	8004f0c <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8003264:	220a      	movs	r2, #10
 8003266:	2100      	movs	r1, #0
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fede 	bl	800302a <ICM_WriteOneByte>
	HAL_Delay(10);
 800326e:	200a      	movs	r0, #10
 8003270:	f001 fe4c 	bl	8004f0c <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8003274:	2215      	movs	r2, #21
 8003276:	2114      	movs	r1, #20
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fed6 	bl	800302a <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 800327e:	2200      	movs	r2, #0
 8003280:	2110      	movs	r1, #16
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fed1 	bl	800302a <ICM_WriteOneByte>
	HAL_Delay(10);
 8003288:	200a      	movs	r0, #10
 800328a:	f001 fe3f 	bl	8004f0c <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 800328e:	220a      	movs	r2, #10
 8003290:	2111      	movs	r1, #17
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fec9 	bl	800302a <ICM_WriteOneByte>
	HAL_Delay(10);
 8003298:	200a      	movs	r0, #10
 800329a:	f001 fe37 	bl	8004f0c <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 800329e:	2120      	movs	r1, #32
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f969 	bl	8003578 <ICM_SelectBank>
	HAL_Delay(20);
 80032a6:	2014      	movs	r0, #20
 80032a8:	f001 fe30 	bl	8004f0c <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 80032ac:	2200      	movs	r2, #0
 80032ae:	217f      	movs	r1, #127	; 0x7f
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff feba 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80032b6:	2230      	movs	r2, #48	; 0x30
 80032b8:	210f      	movs	r1, #15
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff feb5 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 80032c0:	2220      	movs	r2, #32
 80032c2:	2103      	movs	r1, #3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff feb0 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 80032ca:	2230      	movs	r2, #48	; 0x30
 80032cc:	217f      	movs	r1, #127	; 0x7f
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff feab 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80032d4:	224d      	movs	r2, #77	; 0x4d
 80032d6:	2101      	movs	r1, #1
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fea6 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80032de:	2201      	movs	r2, #1
 80032e0:	2102      	movs	r1, #2
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fea1 	bl	800302a <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80032e8:	2281      	movs	r2, #129	; 0x81
 80032ea:	2105      	movs	r1, #5
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fe9c 	bl	800302a <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 80032f2:	2201      	movs	r2, #1
 80032f4:	2132      	movs	r1, #50	; 0x32
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff feb5 	bl	8003066 <i2c_Mag_write>
	HAL_Delay(1000);
 80032fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003300:	f001 fe04 	bl	8004f0c <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8003304:	2202      	movs	r2, #2
 8003306:	2131      	movs	r1, #49	; 0x31
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff feac 	bl	8003066 <i2c_Mag_write>

	return 1337;
 800330e:	f240 5339 	movw	r3, #1337	; 0x539
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 8003324:	f107 020c 	add.w	r2, r7, #12
 8003328:	230c      	movs	r3, #12
 800332a:	212d      	movs	r1, #45	; 0x2d
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fe29 	bl	8002f84 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8003332:	7b3b      	ldrb	r3, [r7, #12]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	b21a      	sxth	r2, r3
 8003338:	7b7b      	ldrb	r3, [r7, #13]
 800333a:	b21b      	sxth	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <ICM_ReadAccelGyro+0x98>)
 8003344:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8003346:	7bbb      	ldrb	r3, [r7, #14]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	b21a      	sxth	r2, r3
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	b21b      	sxth	r3, r3
 8003350:	4313      	orrs	r3, r2
 8003352:	b21b      	sxth	r3, r3
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <ICM_ReadAccelGyro+0x98>)
 8003358:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 800335a:	7c3b      	ldrb	r3, [r7, #16]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	b21a      	sxth	r2, r3
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	b21b      	sxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b21b      	sxth	r3, r3
 8003368:	b29a      	uxth	r2, r3
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <ICM_ReadAccelGyro+0x98>)
 800336c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800336e:	7cbb      	ldrb	r3, [r7, #18]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b21a      	sxth	r2, r3
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	b21b      	sxth	r3, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	b21b      	sxth	r3, r3
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <ICM_ReadAccelGyro+0x9c>)
 8003380:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8003382:	7d3b      	ldrb	r3, [r7, #20]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	b21a      	sxth	r2, r3
 8003388:	7d7b      	ldrb	r3, [r7, #21]
 800338a:	b21b      	sxth	r3, r3
 800338c:	4313      	orrs	r3, r2
 800338e:	b21b      	sxth	r3, r3
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <ICM_ReadAccelGyro+0x9c>)
 8003394:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8003396:	7dbb      	ldrb	r3, [r7, #22]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	b21a      	sxth	r2, r3
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <ICM_ReadAccelGyro+0x9c>)
 80033a8:	809a      	strh	r2, [r3, #4]
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200002e4 	.word	0x200002e4
 80033b8:	200002ec 	.word	0x200002ec

080033bc <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <ICM_CorrectAccelGyro+0x1a0>)
 80033d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	da00      	bge.n	80033da <ICM_CorrectAccelGyro+0x1e>
 80033d8:	330f      	adds	r3, #15
 80033da:	111b      	asrs	r3, r3, #4
 80033dc:	b21b      	sxth	r3, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f818 	bl	8000418 <__aeabi_i2d>
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <ICM_CorrectAccelGyro+0x1a4>)
 80033ee:	f7fd f9a7 	bl	8000740 <__aeabi_ddiv>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fb4f 	bl	8000a9c <__aeabi_d2uiz>
 80033fe:	4603      	mov	r3, r0
 8003400:	b29a      	uxth	r2, r3
 8003402:	4b58      	ldr	r3, [pc, #352]	; (8003564 <ICM_CorrectAccelGyro+0x1a8>)
 8003404:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3302      	adds	r3, #2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b53      	ldr	r3, [pc, #332]	; (800355c <ICM_CorrectAccelGyro+0x1a0>)
 8003410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003414:	2b00      	cmp	r3, #0
 8003416:	da00      	bge.n	800341a <ICM_CorrectAccelGyro+0x5e>
 8003418:	330f      	adds	r3, #15
 800341a:	111b      	asrs	r3, r3, #4
 800341c:	b21b      	sxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	4618      	mov	r0, r3
 8003424:	f7fc fff8 	bl	8000418 <__aeabi_i2d>
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <ICM_CorrectAccelGyro+0x1a4>)
 800342e:	f7fd f987 	bl	8000740 <__aeabi_ddiv>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fb2f 	bl	8000a9c <__aeabi_d2uiz>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <ICM_CorrectAccelGyro+0x1a8>)
 8003444:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b43      	ldr	r3, [pc, #268]	; (800355c <ICM_CorrectAccelGyro+0x1a0>)
 8003450:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	da00      	bge.n	800345a <ICM_CorrectAccelGyro+0x9e>
 8003458:	330f      	adds	r3, #15
 800345a:	111b      	asrs	r3, r3, #4
 800345c:	b21b      	sxth	r3, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4618      	mov	r0, r3
 8003464:	f7fc ffd8 	bl	8000418 <__aeabi_i2d>
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <ICM_CorrectAccelGyro+0x1a4>)
 800346e:	f7fd f967 	bl	8000740 <__aeabi_ddiv>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fb0f 	bl	8000a9c <__aeabi_d2uiz>
 800347e:	4603      	mov	r3, r0
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <ICM_CorrectAccelGyro+0x1a8>)
 8003484:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	4b36      	ldr	r3, [pc, #216]	; (8003568 <ICM_CorrectAccelGyro+0x1ac>)
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	4618      	mov	r0, r3
 8003496:	f7fc ffbf 	bl	8000418 <__aeabi_i2d>
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b33      	ldr	r3, [pc, #204]	; (800356c <ICM_CorrectAccelGyro+0x1b0>)
 80034a0:	f7fd f824 	bl	80004ec <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <ICM_CorrectAccelGyro+0x1b4>)
 80034b2:	f7fd f945 	bl	8000740 <__aeabi_ddiv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f7fd faed 	bl	8000a9c <__aeabi_d2uiz>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <ICM_CorrectAccelGyro+0x1b8>)
 80034c8:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <ICM_CorrectAccelGyro+0x1ac>)
 80034d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fc ff9d 	bl	8000418 <__aeabi_i2d>
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <ICM_CorrectAccelGyro+0x1b0>)
 80034e4:	f7fd f802 	bl	80004ec <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <ICM_CorrectAccelGyro+0x1b4>)
 80034f6:	f7fd f923 	bl	8000740 <__aeabi_ddiv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f7fd facb 	bl	8000a9c <__aeabi_d2uiz>
 8003506:	4603      	mov	r3, r0
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <ICM_CorrectAccelGyro+0x1b8>)
 800350c:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <ICM_CorrectAccelGyro+0x1ac>)
 8003516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc ff7b 	bl	8000418 <__aeabi_i2d>
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <ICM_CorrectAccelGyro+0x1b0>)
 8003528:	f7fc ffe0 	bl	80004ec <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <ICM_CorrectAccelGyro+0x1b4>)
 800353a:	f7fd f901 	bl	8000740 <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f7fd faa9 	bl	8000a9c <__aeabi_d2uiz>
 800354a:	4603      	mov	r3, r0
 800354c:	b29a      	uxth	r2, r3
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <ICM_CorrectAccelGyro+0x1b8>)
 8003550:	809a      	strh	r2, [r3, #4]
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	2000030c 	.word	0x2000030c
 8003560:	40d00000 	.word	0x40d00000
 8003564:	200002f4 	.word	0x200002f4
 8003568:	20000304 	.word	0x20000304
 800356c:	406f4000 	.word	0x406f4000
 8003570:	40fffb80 	.word	0x40fffb80
 8003574:	200002fc 	.word	0x200002fc

08003578 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	461a      	mov	r2, r3
 8003588:	217f      	movs	r1, #127	; 0x7f
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fd4d 	bl	800302a <ICM_WriteOneByte>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 80035a0:	2220      	movs	r2, #32
 80035a2:	2103      	movs	r1, #3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fd40 	bl	800302a <ICM_WriteOneByte>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	461a      	mov	r2, r3
 80035c2:	2106      	movs	r1, #6
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fd30 	bl	800302a <ICM_WriteOneByte>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 80035da:	223f      	movs	r2, #63	; 0x3f
 80035dc:	2107      	movs	r1, #7
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fd23 	bl	800302a <ICM_WriteOneByte>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 80035f4:	2200      	movs	r2, #0
 80035f6:	2107      	movs	r1, #7
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fd16 	bl	800302a <ICM_WriteOneByte>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
 8003612:	4613      	mov	r3, r2
 8003614:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	78bb      	ldrb	r3, [r7, #2]
 800361a:	4313      	orrs	r3, r2
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	2101      	movs	r1, #1
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fd01 	bl	800302a <ICM_WriteOneByte>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e029      	b.n	8003692 <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fe6c 	bl	800331c <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 8003644:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <ICM20948_Calibrate+0x18c>)
 8003646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800364a:	b29a      	uxth	r2, r3
 800364c:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <ICM20948_Calibrate+0x190>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	4413      	add	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	b21a      	sxth	r2, r3
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <ICM20948_Calibrate+0x18c>)
 8003658:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <ICM20948_Calibrate+0x18c>)
 800365c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003660:	b29a      	uxth	r2, r3
 8003662:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <ICM20948_Calibrate+0x190>)
 8003664:	885b      	ldrh	r3, [r3, #2]
 8003666:	4413      	add	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	b21a      	sxth	r2, r3
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <ICM20948_Calibrate+0x18c>)
 800366e:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 8003670:	4b52      	ldr	r3, [pc, #328]	; (80037bc <ICM20948_Calibrate+0x18c>)
 8003672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <ICM20948_Calibrate+0x190>)
 800367a:	889b      	ldrh	r3, [r3, #4]
 800367c:	4413      	add	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	b21a      	sxth	r2, r3
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <ICM20948_Calibrate+0x18c>)
 8003684:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8003686:	200a      	movs	r0, #10
 8003688:	f001 fc40 	bl	8004f0c <HAL_Delay>
	for(int i=0; i<50; i++){
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b31      	cmp	r3, #49	; 0x31
 8003696:	ddd2      	ble.n	800363e <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 8003698:	4b48      	ldr	r3, [pc, #288]	; (80037bc <ICM20948_Calibrate+0x18c>)
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	4a49      	ldr	r2, [pc, #292]	; (80037c4 <ICM20948_Calibrate+0x194>)
 80036a0:	fb82 1203 	smull	r1, r2, r2, r3
 80036a4:	1112      	asrs	r2, r2, #4
 80036a6:	17db      	asrs	r3, r3, #31
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	b21a      	sxth	r2, r3
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036ae:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036b6:	4a43      	ldr	r2, [pc, #268]	; (80037c4 <ICM20948_Calibrate+0x194>)
 80036b8:	fb82 1203 	smull	r1, r2, r2, r3
 80036bc:	1112      	asrs	r2, r2, #4
 80036be:	17db      	asrs	r3, r3, #31
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036c6:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 80036c8:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036ce:	4a3d      	ldr	r2, [pc, #244]	; (80037c4 <ICM20948_Calibrate+0x194>)
 80036d0:	fb82 1203 	smull	r1, r2, r2, r3
 80036d4:	1112      	asrs	r2, r2, #4
 80036d6:	17db      	asrs	r3, r3, #31
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	b21a      	sxth	r2, r3
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036de:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <ICM20948_Calibrate+0x18c>)
 80036e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fe96 	bl	8000418 <__aeabi_i2d>
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <ICM20948_Calibrate+0x198>)
 80036f2:	f7fc fd43 	bl	800017c <__aeabi_dsub>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd f9a5 	bl	8000a4c <__aeabi_d2iz>
 8003702:	4603      	mov	r3, r0
 8003704:	b21a      	sxth	r2, r3
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <ICM20948_Calibrate+0x18c>)
 8003708:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	e029      	b.n	8003764 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fe03 	bl	800331c <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371c:	b29a      	uxth	r2, r3
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <ICM20948_Calibrate+0x1a0>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	b21a      	sxth	r2, r3
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <ICM20948_Calibrate+0x19c>)
 800372a:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <ICM20948_Calibrate+0x19c>)
 800372e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <ICM20948_Calibrate+0x1a0>)
 8003736:	885b      	ldrh	r3, [r3, #2]
 8003738:	4413      	add	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	b21a      	sxth	r2, r3
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003740:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003744:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <ICM20948_Calibrate+0x1a0>)
 800374c:	889b      	ldrh	r3, [r3, #4]
 800374e:	4413      	add	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	b21a      	sxth	r2, r3
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003756:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 8003758:	2001      	movs	r0, #1
 800375a:	f001 fbd7 	bl	8004f0c <HAL_Delay>
	for(int i=0; i<50; i++){
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b31      	cmp	r3, #49	; 0x31
 8003768:	ddd2      	ble.n	8003710 <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <ICM20948_Calibrate+0x19c>)
 800376c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <ICM20948_Calibrate+0x194>)
 8003772:	fb82 1203 	smull	r1, r2, r2, r3
 8003776:	1112      	asrs	r2, r2, #4
 8003778:	17db      	asrs	r3, r3, #31
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	b21a      	sxth	r2, r3
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003780:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003784:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003788:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <ICM20948_Calibrate+0x194>)
 800378a:	fb82 1203 	smull	r1, r2, r2, r3
 800378e:	1112      	asrs	r2, r2, #4
 8003790:	17db      	asrs	r3, r3, #31
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	b21a      	sxth	r2, r3
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <ICM20948_Calibrate+0x19c>)
 8003798:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <ICM20948_Calibrate+0x19c>)
 800379c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037a0:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <ICM20948_Calibrate+0x194>)
 80037a2:	fb82 1203 	smull	r1, r2, r2, r3
 80037a6:	1112      	asrs	r2, r2, #4
 80037a8:	17db      	asrs	r3, r3, #31
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <ICM20948_Calibrate+0x19c>)
 80037b0:	809a      	strh	r2, [r3, #4]
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000030c 	.word	0x2000030c
 80037c0:	200002e4 	.word	0x200002e4
 80037c4:	51eb851f 	.word	0x51eb851f
 80037c8:	40b00000 	.word	0x40b00000
 80037cc:	20000304 	.word	0x20000304
 80037d0:	200002ec 	.word	0x200002ec

080037d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80037ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80037f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80037fc:	e000      	b.n	8003800 <ITM_SendChar+0x2c>
    {
      __NOP();
 80037fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f9      	beq.n	80037fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800380a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e009      	b.n	800384a <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	60ba      	str	r2, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ffc8 	bl	80037d4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3301      	adds	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	dbf1      	blt.n	8003836 <_write+0x16>
  return len;
 8003852:	687b      	ldr	r3, [r7, #4]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	b099      	sub	sp, #100	; 0x64
 8003862:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	221f      	movs	r2, #31
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f005 fec3 	bl	80095fc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003876:	f001 fae7 	bl	8004e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800387a:	f000 f903 	bl	8003a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800387e:	f000 fb93 	bl	8003fa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003882:	f000 fb49 	bl	8003f18 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003886:	f000 f98d 	bl	8003ba4 <MX_I2C2_Init>
  MX_ADC1_Init();
 800388a:	f000 f94d 	bl	8003b28 <MX_ADC1_Init>
  MX_SPI2_Init();
 800388e:	f000 f9b7 	bl	8003c00 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003892:	f000 fa43 	bl	8003d1c <MX_TIM2_Init>
  MX_DMA_Init();
 8003896:	f000 fb69 	bl	8003f6c <MX_DMA_Init>
  MX_TIM1_Init();
 800389a:	f000 f9e7 	bl	8003c6c <MX_TIM1_Init>
  MX_TIM3_Init();
 800389e:	f000 fabf 	bl	8003e20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80038a2:	213c      	movs	r1, #60	; 0x3c
 80038a4:	4866      	ldr	r0, [pc, #408]	; (8003a40 <main+0x1e4>)
 80038a6:	f004 facf 	bl	8007e48 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 80038aa:	4866      	ldr	r0, [pc, #408]	; (8003a44 <main+0x1e8>)
 80038ac:	f003 ff88 	bl	80077c0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 80038b0:	2104      	movs	r1, #4
 80038b2:	4864      	ldr	r0, [pc, #400]	; (8003a44 <main+0x1e8>)
 80038b4:	f004 f920 	bl	8007af8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 80038b8:	2108      	movs	r1, #8
 80038ba:	4862      	ldr	r0, [pc, #392]	; (8003a44 <main+0x1e8>)
 80038bc:	f004 f91c 	bl	8007af8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 80038c0:	4861      	ldr	r0, [pc, #388]	; (8003a48 <main+0x1ec>)
 80038c2:	f003 ff7d 	bl	80077c0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 80038c6:	2104      	movs	r1, #4
 80038c8:	485f      	ldr	r0, [pc, #380]	; (8003a48 <main+0x1ec>)
 80038ca:	f004 f81b 	bl	8007904 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 80038ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80038d2:	f001 fb1b 	bl	8004f0c <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 80038d6:	2100      	movs	r1, #0
 80038d8:	485c      	ldr	r0, [pc, #368]	; (8003a4c <main+0x1f0>)
 80038da:	f7ff fe4d 	bl	8003578 <ICM_SelectBank>
  HAL_Delay(10);
 80038de:	200a      	movs	r0, #10
 80038e0:	f001 fb14 	bl	8004f0c <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 80038e4:	4859      	ldr	r0, [pc, #356]	; (8003a4c <main+0x1f0>)
 80038e6:	f7ff fc7c 	bl	80031e2 <ICM_PowerOn>
  HAL_Delay(10);
 80038ea:	200a      	movs	r0, #10
 80038ec:	f001 fb0e 	bl	8004f0c <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 80038f0:	4856      	ldr	r0, [pc, #344]	; (8003a4c <main+0x1f0>)
 80038f2:	f7ff fe9d 	bl	8003630 <ICM20948_Calibrate>
  HAL_Delay(100);
 80038f6:	2064      	movs	r0, #100	; 0x64
 80038f8:	f001 fb08 	bl	8004f0c <HAL_Delay>

  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer));
 80038fc:	2223      	movs	r2, #35	; 0x23
 80038fe:	4954      	ldr	r1, [pc, #336]	; (8003a50 <main+0x1f4>)
 8003900:	4854      	ldr	r0, [pc, #336]	; (8003a54 <main+0x1f8>)
 8003902:	f005 fbd6 	bl	80090b2 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  // ultrasonic testing
	  HCSR04_Read_Front(&htim3);
 8003906:	484f      	ldr	r0, [pc, #316]	; (8003a44 <main+0x1e8>)
 8003908:	f001 fa1e 	bl	8004d48 <HCSR04_Read_Front>
	  sprintf(MSG, "Distance: %d\n", Front_US.DISTANCE);
 800390c:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <main+0x1fc>)
 800390e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003912:	f107 0010 	add.w	r0, r7, #16
 8003916:	4951      	ldr	r1, [pc, #324]	; (8003a5c <main+0x200>)
 8003918:	f006 fad8 	bl	8009ecc <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800391c:	f107 0110 	add.w	r1, r7, #16
 8003920:	2364      	movs	r3, #100	; 0x64
 8003922:	2223      	movs	r2, #35	; 0x23
 8003924:	484b      	ldr	r0, [pc, #300]	; (8003a54 <main+0x1f8>)
 8003926:	f005 fb32 	bl	8008f8e <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800392a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800392e:	484c      	ldr	r0, [pc, #304]	; (8003a60 <main+0x204>)
 8003930:	f002 f9ba 	bl	8005ca8 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 8003934:	2019      	movs	r0, #25
 8003936:	f001 fae9 	bl	8004f0c <HAL_Delay>

  // ESC testing
	  double speed = 50;
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <main+0x208>)
 8003940:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  accelerate(&htim2, speed);
 8003944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003948:	483f      	ldr	r0, [pc, #252]	; (8003a48 <main+0x1ec>)
 800394a:	f7fd fc0b 	bl	8001164 <accelerate>
//	  drive_forward(&htim2, speed);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800394e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003952:	4843      	ldr	r0, [pc, #268]	; (8003a60 <main+0x204>)
 8003954:	f002 f9a8 	bl	8005ca8 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003958:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800395c:	f001 fad6 	bl	8004f0c <HAL_Delay>
	  decelerate(&htim2);
 8003960:	4839      	ldr	r0, [pc, #228]	; (8003a48 <main+0x1ec>)
 8003962:	f7fd fc5b 	bl	800121c <decelerate>
//	  stop(&htim2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800396a:	483d      	ldr	r0, [pc, #244]	; (8003a60 <main+0x204>)
 800396c:	f002 f99c 	bl	8005ca8 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003970:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003974:	f001 faca 	bl	8004f0c <HAL_Delay>

    // imu testing

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8003978:	2100      	movs	r1, #0
 800397a:	4834      	ldr	r0, [pc, #208]	; (8003a4c <main+0x1f0>)
 800397c:	f7ff fdfc 	bl	8003578 <ICM_SelectBank>
	  HAL_Delay(10);
 8003980:	200a      	movs	r0, #10
 8003982:	f001 fac3 	bl	8004f0c <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 8003986:	4831      	ldr	r0, [pc, #196]	; (8003a4c <main+0x1f0>)
 8003988:	f7ff fcc8 	bl	800331c <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 800398c:	f107 0308 	add.w	r3, r7, #8
 8003990:	4619      	mov	r1, r3
 8003992:	482e      	ldr	r0, [pc, #184]	; (8003a4c <main+0x1f0>)
 8003994:	f7ff fbd0 	bl	8003138 <ICM_ReadMag>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003998:	4a33      	ldr	r2, [pc, #204]	; (8003a68 <main+0x20c>)
 800399a:	4934      	ldr	r1, [pc, #208]	; (8003a6c <main+0x210>)
 800399c:	482b      	ldr	r0, [pc, #172]	; (8003a4c <main+0x1f0>)
 800399e:	f7ff fd0d 	bl	80033bc <ICM_CorrectAccelGyro>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039a2:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <main+0x214>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd f94e 	bl	8000c48 <__aeabi_ui2f>
 80039ac:	4681      	mov	r9, r0
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <main+0x214>)
 80039b0:	885b      	ldrh	r3, [r3, #2]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd f948 	bl	8000c48 <__aeabi_ui2f>
 80039b8:	4682      	mov	sl, r0
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <main+0x214>)
 80039bc:	889b      	ldrh	r3, [r3, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f942 	bl	8000c48 <__aeabi_ui2f>
 80039c4:	4683      	mov	fp, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <main+0x218>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd f93c 	bl	8000c48 <__aeabi_ui2f>
 80039d0:	6078      	str	r0, [r7, #4]
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <main+0x218>)
 80039d4:	885b      	ldrh	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd f936 	bl	8000c48 <__aeabi_ui2f>
 80039dc:	4604      	mov	r4, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <main+0x218>)
 80039e0:	889b      	ldrh	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd f930 	bl	8000c48 <__aeabi_ui2f>
 80039e8:	4605      	mov	r5, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80039ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f92e 	bl	8000c50 <__aeabi_i2f>
 80039f4:	4606      	mov	r6, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80039f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd f928 	bl	8000c50 <__aeabi_i2f>
 8003a00:	4680      	mov	r8, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003a02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f922 	bl	8000c50 <__aeabi_i2f>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a14:	9602      	str	r6, [sp, #8]
 8003a16:	9501      	str	r5, [sp, #4]
 8003a18:	9400      	str	r4, [sp, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	465a      	mov	r2, fp
 8003a1e:	4651      	mov	r1, sl
 8003a20:	4648      	mov	r0, r9
 8003a22:	f7fd fcbb 	bl	800139c <MadgwickAHRSupdate>

	  computeAngles();
 8003a26:	f7ff f9e1 	bl	8002dec <computeAngles>

	  float roll_main = roll;
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <main+0x21c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float pitch_main = pitch;
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <main+0x220>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
	  float yaw_main = yaw;
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <main+0x224>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
  {
 8003a3c:	e763      	b.n	8003906 <main+0xaa>
 8003a3e:	bf00      	nop
 8003a40:	200003f0 	.word	0x200003f0
 8003a44:	20000480 	.word	0x20000480
 8003a48:	20000438 	.word	0x20000438
 8003a4c:	20000344 	.word	0x20000344
 8003a50:	200002a4 	.word	0x200002a4
 8003a54:	200004c8 	.word	0x200004c8
 8003a58:	20000040 	.word	0x20000040
 8003a5c:	0800cac8 	.word	0x0800cac8
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40490000 	.word	0x40490000
 8003a68:	200002ec 	.word	0x200002ec
 8003a6c:	200002e4 	.word	0x200002e4
 8003a70:	200002fc 	.word	0x200002fc
 8003a74:	200002f4 	.word	0x200002f4
 8003a78:	200002d4 	.word	0x200002d4
 8003a7c:	200002d8 	.word	0x200002d8
 8003a80:	200002dc 	.word	0x200002dc

08003a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b094      	sub	sp, #80	; 0x50
 8003a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a8e:	2228      	movs	r2, #40	; 0x28
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 fdb2 	bl	80095fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003abc:	2310      	movs	r3, #16
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 f8d5 	bl	8006c78 <HAL_RCC_OscConfig>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003ad4:	f000 fb5c 	bl	8004190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ad8:	230f      	movs	r3, #15
 8003ada:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 fb41 	bl	800717c <HAL_RCC_ClockConfig>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003b00:	f000 fb46 	bl	8004190 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003b04:	2302      	movs	r3, #2
 8003b06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 fccb 	bl	80074ac <HAL_RCCEx_PeriphCLKConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003b1c:	f000 fb38 	bl	8004190 <Error_Handler>
  }
}
 8003b20:	bf00      	nop
 8003b22:	3750      	adds	r7, #80	; 0x50
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <MX_ADC1_Init+0x78>)
 8003b3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003b56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b66:	f001 f9f5 	bl	8004f54 <HAL_ADC_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003b70:	f000 fb0e 	bl	8004190 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b74:	2304      	movs	r3, #4
 8003b76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4805      	ldr	r0, [pc, #20]	; (8003b9c <MX_ADC1_Init+0x74>)
 8003b86:	f001 fabd 	bl	8005104 <HAL_ADC_ConfigChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003b90:	f000 fafe 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000314 	.word	0x20000314
 8003ba0:	40012400 	.word	0x40012400

08003ba4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <MX_I2C2_Init+0x54>)
 8003bac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <MX_I2C2_Init+0x58>)
 8003bb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bbc:	22d2      	movs	r2, #210	; 0xd2
 8003bbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003be0:	4804      	ldr	r0, [pc, #16]	; (8003bf4 <MX_I2C2_Init+0x50>)
 8003be2:	f002 f87b 	bl	8005cdc <HAL_I2C_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003bec:	f000 fad0 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000344 	.word	0x20000344
 8003bf8:	40005800 	.word	0x40005800
 8003bfc:	00061a80 	.word	0x00061a80

08003c00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <MX_SPI2_Init+0x68>)
 8003c08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c4c:	220a      	movs	r2, #10
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <MX_SPI2_Init+0x64>)
 8003c52:	f003 fce1 	bl	8007618 <HAL_SPI_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c5c:	f000 fa98 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000398 	.word	0x20000398
 8003c68:	40003800 	.word	0x40003800

08003c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08c      	sub	sp, #48	; 0x30
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f005 fcbe 	bl	80095fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c88:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <MX_TIM1_Init+0xac>)
 8003c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c8e:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c94:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003ce0:	f004 f810 	bl	8007d04 <HAL_TIM_Encoder_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003cea:	f000 fa51 	bl	8004190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4806      	ldr	r0, [pc, #24]	; (8003d14 <MX_TIM1_Init+0xa8>)
 8003cfc:	f005 f88a 	bl	8008e14 <HAL_TIMEx_MasterConfigSynchronization>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003d06:	f000 fa43 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d0a:	bf00      	nop
 8003d0c:	3730      	adds	r7, #48	; 0x30
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200003f0 	.word	0x200003f0
 8003d18:	40012c00 	.word	0x40012c00

08003d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08e      	sub	sp, #56	; 0x38
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d30:	f107 0320 	add.w	r3, r7, #32
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
 8003d48:	615a      	str	r2, [r3, #20]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d4c:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d56:	2203      	movs	r2, #3
 8003d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8003d60:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d62:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d68:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d74:	4829      	ldr	r0, [pc, #164]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d76:	f003 fcd3 	bl	8007720 <HAL_TIM_Base_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003d80:	f000 fa06 	bl	8004190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4822      	ldr	r0, [pc, #136]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003d92:	f004 fb61 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003d9c:	f000 f9f8 	bl	8004190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003da0:	481e      	ldr	r0, [pc, #120]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003da2:	f003 fd57 	bl	8007854 <HAL_TIM_PWM_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003dac:	f000 f9f0 	bl	8004190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003db8:	f107 0320 	add.w	r3, r7, #32
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4817      	ldr	r0, [pc, #92]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003dc0:	f005 f828 	bl	8008e14 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003dca:	f000 f9e1 	bl	8004190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dce:	2360      	movs	r3, #96	; 0x60
 8003dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003dd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003dd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	2200      	movs	r2, #0
 8003de4:	4619      	mov	r1, r3
 8003de6:	480d      	ldr	r0, [pc, #52]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003de8:	f004 fa78 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003df2:	f000 f9cd 	bl	8004190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	2204      	movs	r2, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003dfe:	f004 fa6d 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003e08:	f000 f9c2 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <MX_TIM2_Init+0x100>)
 8003e0e:	f000 fb91 	bl	8004534 <HAL_TIM_MspPostInit>

}
 8003e12:	bf00      	nop
 8003e14:	3738      	adds	r7, #56	; 0x38
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000438 	.word	0x20000438

08003e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e26:	f107 0318 	add.w	r3, r7, #24
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e3e:	463b      	mov	r3, r7
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e4c:	4a31      	ldr	r2, [pc, #196]	; (8003f14 <MX_TIM3_Init+0xf4>)
 8003e4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e52:	2207      	movs	r2, #7
 8003e54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e70:	4827      	ldr	r0, [pc, #156]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e72:	f003 fc55 	bl	8007720 <HAL_TIM_Base_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003e7c:	f000 f988 	bl	8004190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e86:	f107 0318 	add.w	r3, r7, #24
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4820      	ldr	r0, [pc, #128]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e8e:	f004 fae3 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e98:	f000 f97a 	bl	8004190 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003e9c:	481c      	ldr	r0, [pc, #112]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003e9e:	f003 fdd3 	bl	8007a48 <HAL_TIM_IC_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ea8:	f000 f972 	bl	8004190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4815      	ldr	r0, [pc, #84]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003ebc:	f004 ffaa 	bl	8008e14 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003ec6:	f000 f963 	bl	8004190 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003eda:	463b      	mov	r3, r7
 8003edc:	2204      	movs	r2, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	480b      	ldr	r0, [pc, #44]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003ee2:	f004 f967 	bl	80081b4 <HAL_TIM_IC_ConfigChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003eec:	f000 f950 	bl	8004190 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4806      	ldr	r0, [pc, #24]	; (8003f10 <MX_TIM3_Init+0xf0>)
 8003ef8:	f004 f95c 	bl	80081b4 <HAL_TIM_IC_ConfigChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003f02:	f000 f945 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f06:	bf00      	nop
 8003f08:	3728      	adds	r7, #40	; 0x28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000480 	.word	0x20000480
 8003f14:	40000400 	.word	0x40000400

08003f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <MX_USART2_UART_Init+0x50>)
 8003f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f3e:	220c      	movs	r2, #12
 8003f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_USART2_UART_Init+0x4c>)
 8003f50:	f004 ffd0 	bl	8008ef4 <HAL_UART_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f5a:	f000 f919 	bl	8004190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200004c8 	.word	0x200004c8
 8003f68:	40004400 	.word	0x40004400

08003f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_DMA_Init+0x38>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <MX_DMA_Init+0x38>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6153      	str	r3, [r2, #20]
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_DMA_Init+0x38>)
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2010      	movs	r0, #16
 8003f90:	f001 fac9 	bl	8005526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003f94:	2010      	movs	r0, #16
 8003f96:	f001 fae2 	bl	800555e <HAL_NVIC_EnableIRQ>

}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <MX_GPIO_Init+0x174>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4a56      	ldr	r2, [pc, #344]	; (800411c <MX_GPIO_Init+0x174>)
 8003fc2:	f043 0310 	orr.w	r3, r3, #16
 8003fc6:	6193      	str	r3, [r2, #24]
 8003fc8:	4b54      	ldr	r3, [pc, #336]	; (800411c <MX_GPIO_Init+0x174>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <MX_GPIO_Init+0x174>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4a50      	ldr	r2, [pc, #320]	; (800411c <MX_GPIO_Init+0x174>)
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6193      	str	r3, [r2, #24]
 8003fe0:	4b4e      	ldr	r3, [pc, #312]	; (800411c <MX_GPIO_Init+0x174>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <MX_GPIO_Init+0x174>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <MX_GPIO_Init+0x174>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6193      	str	r3, [r2, #24]
 8003ff8:	4b48      	ldr	r3, [pc, #288]	; (800411c <MX_GPIO_Init+0x174>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004004:	4b45      	ldr	r3, [pc, #276]	; (800411c <MX_GPIO_Init+0x174>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4a44      	ldr	r2, [pc, #272]	; (800411c <MX_GPIO_Init+0x174>)
 800400a:	f043 0308 	orr.w	r3, r3, #8
 800400e:	6193      	str	r3, [r2, #24]
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <MX_GPIO_Init+0x174>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800401c:	2200      	movs	r2, #0
 800401e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004022:	483f      	ldr	r0, [pc, #252]	; (8004120 <MX_GPIO_Init+0x178>)
 8004024:	f001 fe28 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8004028:	2200      	movs	r2, #0
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	483d      	ldr	r0, [pc, #244]	; (8004124 <MX_GPIO_Init+0x17c>)
 800402e:	f001 fe23 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8004032:	2200      	movs	r2, #0
 8004034:	2158      	movs	r1, #88	; 0x58
 8004036:	483c      	ldr	r0, [pc, #240]	; (8004128 <MX_GPIO_Init+0x180>)
 8004038:	f001 fe1e 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800403c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004042:	2301      	movs	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2302      	movs	r3, #2
 800404c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	4832      	ldr	r0, [pc, #200]	; (8004120 <MX_GPIO_Init+0x178>)
 8004056:	f001 fc8b 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 800405a:	2320      	movs	r3, #32
 800405c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	482d      	ldr	r0, [pc, #180]	; (8004124 <MX_GPIO_Init+0x17c>)
 800406e:	f001 fc7f 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004076:	2301      	movs	r3, #1
 8004078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2302      	movs	r3, #2
 8004080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	4619      	mov	r1, r3
 8004088:	4826      	ldr	r0, [pc, #152]	; (8004124 <MX_GPIO_Init+0x17c>)
 800408a:	f001 fc71 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 800408e:	2302      	movs	r3, #2
 8004090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	4821      	ldr	r0, [pc, #132]	; (8004128 <MX_GPIO_Init+0x180>)
 80040a2:	f001 fc65 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 80040a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80040aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <MX_GPIO_Init+0x184>)
 80040ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	4619      	mov	r1, r3
 80040ba:	481a      	ldr	r0, [pc, #104]	; (8004124 <MX_GPIO_Init+0x17c>)
 80040bc:	f001 fc58 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80040c0:	2358      	movs	r3, #88	; 0x58
 80040c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c4:	2301      	movs	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	4814      	ldr	r0, [pc, #80]	; (8004128 <MX_GPIO_Init+0x180>)
 80040d8:	f001 fc4a 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ESP_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_ESP_SDA_Pin;
 80040dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e2:	2312      	movs	r3, #18
 80040e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_ESP_SDA_GPIO_Port, &GPIO_InitStruct);
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	4619      	mov	r1, r3
 80040f0:	480d      	ldr	r0, [pc, #52]	; (8004128 <MX_GPIO_Init+0x180>)
 80040f2:	f001 fc3d 	bl	8005970 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <MX_GPIO_Init+0x188>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <MX_GPIO_Init+0x188>)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	6053      	str	r3, [r2, #4]

}
 8004112:	bf00      	nop
 8004114:	3728      	adds	r7, #40	; 0x28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40011000 	.word	0x40011000
 8004124:	40010800 	.word	0x40010800
 8004128:	40010c00 	.word	0x40010c00
 800412c:	10110000 	.word	0x10110000
 8004130:	40010000 	.word	0x40010000

08004134 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint32_t us)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <delay_us+0x2c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8004144:	bf00      	nop
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <delay_us+0x2c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d8f9      	bhi.n	8004146 <delay_us+0x12>
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000480 	.word	0x20000480

08004164 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
 800416c:	220c      	movs	r2, #12
 800416e:	4905      	ldr	r1, [pc, #20]	; (8004184 <HAL_UART_RxCpltCallback+0x20>)
 8004170:	4805      	ldr	r0, [pc, #20]	; (8004188 <HAL_UART_RxCpltCallback+0x24>)
 8004172:	f004 ff9e 	bl	80090b2 <HAL_UART_Receive_DMA>
    ESP_Receive(&htim2);
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <HAL_UART_RxCpltCallback+0x28>)
 8004178:	f7fd f8ac 	bl	80012d4 <ESP_Receive>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200002a4 	.word	0x200002a4
 8004188:	200004c8 	.word	0x200004c8
 800418c:	20000438 	.word	0x20000438

08004190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004194:	b672      	cpsid	i
}
 8004196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004198:	e7fe      	b.n	8004198 <Error_Handler+0x8>
	...

0800419c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_MspInit+0x5c>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_MspInit+0x5c>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6193      	str	r3, [r2, #24]
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_MspInit+0x5c>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_MspInit+0x5c>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_MspInit+0x5c>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	61d3      	str	r3, [r2, #28]
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_MspInit+0x5c>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_MspInit+0x60>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_MspInit+0x60>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010000 	.word	0x40010000

08004200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a14      	ldr	r2, [pc, #80]	; (800426c <HAL_ADC_MspInit+0x6c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d121      	bne.n	8004264 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_ADC_MspInit+0x70>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <HAL_ADC_MspInit+0x70>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6193      	str	r3, [r2, #24]
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <HAL_ADC_MspInit+0x70>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <HAL_ADC_MspInit+0x70>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <HAL_ADC_MspInit+0x70>)
 800423e:	f043 0304 	orr.w	r3, r3, #4
 8004242:	6193      	str	r3, [r2, #24]
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_ADC_MspInit+0x70>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8004250:	2310      	movs	r3, #16
 8004252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004254:	2303      	movs	r3, #3
 8004256:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8004258:	f107 0310 	add.w	r3, r7, #16
 800425c:	4619      	mov	r1, r3
 800425e:	4805      	ldr	r0, [pc, #20]	; (8004274 <HAL_ADC_MspInit+0x74>)
 8004260:	f001 fb86 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004264:	bf00      	nop
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012400 	.word	0x40012400
 8004270:	40021000 	.word	0x40021000
 8004274:	40010800 	.word	0x40010800

08004278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_I2C_MspInit+0x74>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d124      	bne.n	80042e2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 800429e:	f043 0308 	orr.w	r3, r3, #8
 80042a2:	6193      	str	r3, [r2, #24]
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 80042b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b6:	2312      	movs	r3, #18
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	4619      	mov	r1, r3
 80042c4:	480b      	ldr	r0, [pc, #44]	; (80042f4 <HAL_I2C_MspInit+0x7c>)
 80042c6:	f001 fb53 	bl	8005970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 80042d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042d4:	61d3      	str	r3, [r2, #28]
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_I2C_MspInit+0x78>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042e2:	bf00      	nop
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40005800 	.word	0x40005800
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40010c00 	.word	0x40010c00

080042f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004300:	f107 0310 	add.w	r3, r7, #16
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_SPI_MspInit+0x8c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d131      	bne.n	800437c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_SPI_MspInit+0x90>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_SPI_MspInit+0x90>)
 800431e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004322:	61d3      	str	r3, [r2, #28]
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_SPI_MspInit+0x90>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_SPI_MspInit+0x90>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <HAL_SPI_MspInit+0x90>)
 8004336:	f043 0308 	orr.w	r3, r3, #8
 800433a:	6193      	str	r3, [r2, #24]
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_SPI_MspInit+0x90>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004348:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800434c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434e:	2302      	movs	r3, #2
 8004350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004352:	2303      	movs	r3, #3
 8004354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0310 	add.w	r3, r7, #16
 800435a:	4619      	mov	r1, r3
 800435c:	480b      	ldr	r0, [pc, #44]	; (800438c <HAL_SPI_MspInit+0x94>)
 800435e:	f001 fb07 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	4619      	mov	r1, r3
 8004376:	4805      	ldr	r0, [pc, #20]	; (800438c <HAL_SPI_MspInit+0x94>)
 8004378:	f001 fafa 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800437c:	bf00      	nop
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40003800 	.word	0x40003800
 8004388:	40021000 	.word	0x40021000
 800438c:	40010c00 	.word	0x40010c00

08004390 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	f107 0310 	add.w	r3, r7, #16
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a26      	ldr	r2, [pc, #152]	; (8004444 <HAL_TIM_Encoder_MspInit+0xb4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d144      	bne.n	800443a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4a24      	ldr	r2, [pc, #144]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043ba:	6193      	str	r3, [r2, #24]
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6193      	str	r3, [r2, #24]
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_TIM_Encoder_MspInit+0xb8>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|RIGHT_ENCODER_A_Pin;
 80043e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ee:	f107 0310 	add.w	r3, r7, #16
 80043f2:	4619      	mov	r1, r3
 80043f4:	4815      	ldr	r0, [pc, #84]	; (800444c <HAL_TIM_Encoder_MspInit+0xbc>)
 80043f6:	f001 fabb 	bl	8005970 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	2018      	movs	r0, #24
 8004400:	f001 f891 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004404:	2018      	movs	r0, #24
 8004406:	f001 f8aa 	bl	800555e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800440a:	2200      	movs	r2, #0
 800440c:	2100      	movs	r1, #0
 800440e:	2019      	movs	r0, #25
 8004410:	f001 f889 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004414:	2019      	movs	r0, #25
 8004416:	f001 f8a2 	bl	800555e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800441a:	2200      	movs	r2, #0
 800441c:	2100      	movs	r1, #0
 800441e:	201a      	movs	r0, #26
 8004420:	f001 f881 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004424:	201a      	movs	r0, #26
 8004426:	f001 f89a 	bl	800555e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800442a:	2200      	movs	r2, #0
 800442c:	2100      	movs	r1, #0
 800442e:	201b      	movs	r0, #27
 8004430:	f001 f879 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004434:	201b      	movs	r0, #27
 8004436:	f001 f892 	bl	800555e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40021000 	.word	0x40021000
 800444c:	40010800 	.word	0x40010800

08004450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 0318 	add.w	r3, r7, #24
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446e:	d10c      	bne.n	800448a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	61d3      	str	r3, [r2, #28]
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004488:	e048      	b.n	800451c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_TIM_Base_MspInit+0xd8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d143      	bne.n	800451c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004494:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	61d3      	str	r3, [r2, #28]
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	6193      	str	r3, [r2, #24]
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4a16      	ldr	r2, [pc, #88]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044ca:	f043 0308 	orr.w	r3, r3, #8
 80044ce:	6193      	str	r3, [r2, #24]
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_TIM_Base_MspInit+0xd4>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	4619      	mov	r1, r3
 80044ee:	480f      	ldr	r0, [pc, #60]	; (800452c <HAL_TIM_Base_MspInit+0xdc>)
 80044f0:	f001 fa3e 	bl	8005970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 80044f4:	2301      	movs	r3, #1
 80044f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004500:	f107 0318 	add.w	r3, r7, #24
 8004504:	4619      	mov	r1, r3
 8004506:	480a      	ldr	r0, [pc, #40]	; (8004530 <HAL_TIM_Base_MspInit+0xe0>)
 8004508:	f001 fa32 	bl	8005970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800450c:	2200      	movs	r2, #0
 800450e:	2100      	movs	r1, #0
 8004510:	201d      	movs	r0, #29
 8004512:	f001 f808 	bl	8005526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004516:	201d      	movs	r0, #29
 8004518:	f001 f821 	bl	800555e <HAL_NVIC_EnableIRQ>
}
 800451c:	bf00      	nop
 800451e:	3728      	adds	r7, #40	; 0x28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	40000400 	.word	0x40000400
 800452c:	40010800 	.word	0x40010800
 8004530:	40010c00 	.word	0x40010c00

08004534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	f107 0310 	add.w	r3, r7, #16
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d117      	bne.n	8004584 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004554:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_TIM_MspPostInit+0x58>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4a0c      	ldr	r2, [pc, #48]	; (800458c <HAL_TIM_MspPostInit+0x58>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6193      	str	r3, [r2, #24]
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_TIM_MspPostInit+0x58>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 800456c:	2303      	movs	r3, #3
 800456e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2302      	movs	r3, #2
 8004576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4619      	mov	r1, r3
 800457e:	4804      	ldr	r0, [pc, #16]	; (8004590 <HAL_TIM_MspPostInit+0x5c>)
 8004580:	f001 f9f6 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	40010800 	.word	0x40010800

08004594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <HAL_UART_MspInit+0xd4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d155      	bne.n	8004660 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045be:	61d3      	str	r3, [r2, #28]
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	6193      	str	r3, [r2, #24]
 80045d8:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_UART_MspInit+0xd8>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045e4:	2304      	movs	r3, #4
 80045e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e8:	2302      	movs	r3, #2
 80045ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	4619      	mov	r1, r3
 80045f6:	481e      	ldr	r0, [pc, #120]	; (8004670 <HAL_UART_MspInit+0xdc>)
 80045f8:	f001 f9ba 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045fc:	2308      	movs	r3, #8
 80045fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	4619      	mov	r1, r3
 800460e:	4818      	ldr	r0, [pc, #96]	; (8004670 <HAL_UART_MspInit+0xdc>)
 8004610:	f001 f9ae 	bl	8005970 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_UART_MspInit+0xe4>)
 8004618:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_UART_MspInit+0xe0>)
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_UART_MspInit+0xe0>)
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004638:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <HAL_UART_MspInit+0xe0>)
 800463a:	2200      	movs	r2, #0
 800463c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004640:	2200      	movs	r2, #0
 8004642:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004644:	480b      	ldr	r0, [pc, #44]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004646:	f000 ffa5 	bl	8005594 <HAL_DMA_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004650:	f7ff fd9e 	bl	8004190 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_UART_MspInit+0xe0>)
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
 800465a:	4a06      	ldr	r2, [pc, #24]	; (8004674 <HAL_UART_MspInit+0xe0>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004660:	bf00      	nop
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40004400 	.word	0x40004400
 800466c:	40021000 	.word	0x40021000
 8004670:	40010800 	.word	0x40010800
 8004674:	2000050c 	.word	0x2000050c
 8004678:	4002006c 	.word	0x4002006c

0800467c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004680:	e7fe      	b.n	8004680 <NMI_Handler+0x4>

08004682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004686:	e7fe      	b.n	8004686 <HardFault_Handler+0x4>

08004688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800468c:	e7fe      	b.n	800468c <MemManage_Handler+0x4>

0800468e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <BusFault_Handler+0x4>

08004694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <UsageFault_Handler+0x4>

0800469a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
	...

080046c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <SysTick_Handler+0xe0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a35      	ldr	r2, [pc, #212]	; (80047a0 <SysTick_Handler+0xe0>)
 80046cc:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 80046ce:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <SysTick_Handler+0xe0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046d6:	d159      	bne.n	800478c <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 80046d8:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <SysTick_Handler+0xe4>)
 80046da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <SysTick_Handler+0xe8>)
 80046e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fe94 	bl	8000418 <__aeabi_i2d>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	492d      	ldr	r1, [pc, #180]	; (80047ac <SysTick_Handler+0xec>)
 80046f6:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 80046fa:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <SysTick_Handler+0xec>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	492b      	ldr	r1, [pc, #172]	; (80047b0 <SysTick_Handler+0xf0>)
 8004702:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <SysTick_Handler+0xe4>)
 8004708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fb fe83 	bl	8000418 <__aeabi_i2d>
 8004712:	a321      	add	r3, pc, #132	; (adr r3, 8004798 <SysTick_Handler+0xd8>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fee8 	bl	80004ec <__aeabi_dmul>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4924      	ldr	r1, [pc, #144]	; (80047b4 <SysTick_Handler+0xf4>)
 8004722:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <SysTick_Handler+0xe8>)
 8004728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb fe73 	bl	8000418 <__aeabi_i2d>
 8004732:	a319      	add	r3, pc, #100	; (adr r3, 8004798 <SysTick_Handler+0xd8>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb fed8 	bl	80004ec <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	491d      	ldr	r1, [pc, #116]	; (80047b8 <SysTick_Handler+0xf8>)
 8004742:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <SysTick_Handler+0xf4>)
 8004748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <SysTick_Handler+0xf8>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f7fb fd13 	bl	800017c <__aeabi_dsub>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	f7fb fd0d 	bl	8000180 <__adddf3>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4914      	ldr	r1, [pc, #80]	; (80047bc <SysTick_Handler+0xfc>)
 800476c:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <SysTick_Handler+0xfc>)
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	490e      	ldr	r1, [pc, #56]	; (80047b0 <SysTick_Handler+0xf0>)
 8004778:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <SysTick_Handler+0xe4>)
 800477e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <SysTick_Handler+0xe8>)
 8004784:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <SysTick_Handler+0xe0>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f000 fba2 	bl	8004ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	f3af 8000 	nop.w
 8004798:	05f68f13 	.word	0x05f68f13
 800479c:	3fdc5115 	.word	0x3fdc5115
 80047a0:	20000574 	.word	0x20000574
 80047a4:	20000556 	.word	0x20000556
 80047a8:	20000570 	.word	0x20000570
 80047ac:	20000558 	.word	0x20000558
 80047b0:	20000010 	.word	0x20000010
 80047b4:	20000578 	.word	0x20000578
 80047b8:	20000580 	.word	0x20000580
 80047bc:	20000560 	.word	0x20000560

080047c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80047c4:	4802      	ldr	r0, [pc, #8]	; (80047d0 <DMA1_Channel6_IRQHandler+0x10>)
 80047c6:	f000 ff9f 	bl	8005708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000050c 	.word	0x2000050c

080047d4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <TIM1_BRK_IRQHandler+0x10>)
 80047da:	f003 fbe3 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200003f0 	.word	0x200003f0

080047e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047ec:	4802      	ldr	r0, [pc, #8]	; (80047f8 <TIM1_UP_IRQHandler+0x10>)
 80047ee:	f003 fbd9 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200003f0 	.word	0x200003f0

080047fc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004800:	4802      	ldr	r0, [pc, #8]	; (800480c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004802:	f003 fbcf 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200003f0 	.word	0x200003f0

08004810 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004814:	4802      	ldr	r0, [pc, #8]	; (8004820 <TIM1_CC_IRQHandler+0x10>)
 8004816:	f003 fbc5 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	200003f0 	.word	0x200003f0

08004824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004828:	4802      	ldr	r0, [pc, #8]	; (8004834 <TIM3_IRQHandler+0x10>)
 800482a:	f003 fbbb 	bl	8007fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000480 	.word	0x20000480

08004838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
	return 1;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <_kill>:

int _kill(int pid, int sig)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004850:	f004 feaa 	bl	80095a8 <__errno>
 8004854:	4603      	mov	r3, r0
 8004856:	2216      	movs	r2, #22
 8004858:	601a      	str	r2, [r3, #0]
	return -1;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_exit>:

void _exit (int status)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800486e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffe7 	bl	8004846 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004878:	e7fe      	b.n	8004878 <_exit+0x12>

0800487a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e00a      	b.n	80048a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800488c:	f3af 8000 	nop.w
 8004890:	4601      	mov	r1, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	60ba      	str	r2, [r7, #8]
 8004898:	b2ca      	uxtb	r2, r1
 800489a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3301      	adds	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dbf0      	blt.n	800488c <_read+0x12>
	}

return len;
 80048aa:	687b      	ldr	r3, [r7, #4]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	return -1;
 80048bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048da:	605a      	str	r2, [r3, #4]
	return 0;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <_isatty>:

int _isatty(int file)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	return 1;
 80048f0:	2301      	movs	r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
	return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <_sbrk+0x5c>)
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <_sbrk+0x60>)
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <_sbrk+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <_sbrk+0x64>)
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <_sbrk+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <_sbrk+0x64>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d207      	bcs.n	8004954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004944:	f004 fe30 	bl	80095a8 <__errno>
 8004948:	4603      	mov	r3, r0
 800494a:	220c      	movs	r2, #12
 800494c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004952:	e009      	b.n	8004968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <_sbrk+0x64>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	4a05      	ldr	r2, [pc, #20]	; (8004978 <_sbrk+0x64>)
 8004964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20005000 	.word	0x20005000
 8004974:	00000400 	.word	0x00000400
 8004978:	20000588 	.word	0x20000588
 800497c:	200005a0 	.word	0x200005a0

08004980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	0000      	movs	r0, r0
	...

08004990 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b5b0      	push	{r4, r5, r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a86      	ldr	r2, [pc, #536]	; (8004bb8 <HAL_TIM_IC_CaptureCallback+0x228>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d147      	bne.n	8004a32 <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 80049a2:	4b86      	ldr	r3, [pc, #536]	; (8004bbc <HAL_TIM_IC_CaptureCallback+0x22c>)
 80049a4:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	4a84      	ldr	r2, [pc, #528]	; (8004bc0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80049ae:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 80049b0:	4b83      	ldr	r3, [pc, #524]	; (8004bc0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b21a      	sxth	r2, r3
 80049be:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80049c0:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 80049c2:	4b80      	ldr	r3, [pc, #512]	; (8004bc4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80049c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 80049cc:	4b7d      	ldr	r3, [pc, #500]	; (8004bc4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80049ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da00      	bge.n	80049d8 <HAL_TIM_IC_CaptureCallback+0x48>
 80049d6:	3303      	adds	r3, #3
 80049d8:	109b      	asrs	r3, r3, #2
 80049da:	b21a      	sxth	r2, r3
 80049dc:	4b7a      	ldr	r3, [pc, #488]	; (8004bc8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80049de:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 80049e0:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80049e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80049f0:	a36f      	add	r3, pc, #444	; (adr r3, 8004bb0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fd79 	bl	80004ec <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4614      	mov	r4, r2
 8004a00:	461d      	mov	r5, r3
 8004a02:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fd05 	bl	8000418 <__aeabi_i2d>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb fd69 	bl	80004ec <__aeabi_dmul>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	496b      	ldr	r1, [pc, #428]	; (8004bcc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004a20:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 8004a24:	4b69      	ldr	r3, [pc, #420]	; (8004bcc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 8004a30:	e17c      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	f040 8177 	bne.w	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7f1b      	ldrb	r3, [r3, #28]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d102      	bne.n	8004a4c <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 8004a46:	4b63      	ldr	r3, [pc, #396]	; (8004bd4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7f1b      	ldrb	r3, [r3, #28]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d101      	bne.n	8004a58 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 8004a54:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004a56:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d171      	bne.n	8004b46 <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f003 fdb9 	bl	80085e0 <HAL_TIM_ReadCapturedValue>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fcc1 	bl	80003f8 <__aeabi_ui2d>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <HAL_TIM_IC_CaptureCallback+0x112>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6a1a      	ldr	r2, [r3, #32]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 020a 	bic.w	r2, r2, #10
 8004a9e:	621a      	str	r2, [r3, #32]
 8004aa0:	e021      	b.n	8004ae6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d108      	bne.n	8004abc <HAL_TIM_IC_CaptureCallback+0x12c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab8:	6213      	str	r3, [r2, #32]
 8004aba:	e014      	b.n	8004ae6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d108      	bne.n	8004ad6 <HAL_TIM_IC_CaptureCallback+0x146>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad2:	6213      	str	r3, [r2, #32]
 8004ad4:	e007      	b.n	8004ae6 <HAL_TIM_IC_CaptureCallback+0x156>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae4:	6213      	str	r3, [r2, #32]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_TIM_IC_CaptureCallback+0x170>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0202 	orr.w	r2, r2, #2
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	e115      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d108      	bne.n	8004b1a <HAL_TIM_IC_CaptureCallback+0x18a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	f043 0320 	orr.w	r3, r3, #32
 8004b16:	6213      	str	r3, [r2, #32]
 8004b18:	e108      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d108      	bne.n	8004b34 <HAL_TIM_IC_CaptureCallback+0x1a4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b30:	6213      	str	r3, [r2, #32]
 8004b32:	e0fb      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b42:	6213      	str	r3, [r2, #32]
}
 8004b44:	e0f2      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f040 80ed 	bne.w	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f003 fd41 	bl	80085e0 <HAL_TIM_ReadCapturedValue>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fc49 	bl	80003f8 <__aeabi_ui2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b84:	f7fb ff42 	bl	8000a0c <__aeabi_dcmpgt>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d026      	beq.n	8004bdc <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b9a:	f7fb faef 	bl	800017c <__aeabi_dsub>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004ba8:	e039      	b.n	8004c1e <HAL_TIM_IC_CaptureCallback+0x28e>
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w
 8004bb0:	c083126f 	.word	0xc083126f
 8004bb4:	401921ca 	.word	0x401921ca
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	20000010 	.word	0x20000010
 8004bc0:	20000550 	.word	0x20000550
 8004bc4:	20000554 	.word	0x20000554
 8004bc8:	20000556 	.word	0x20000556
 8004bcc:	20000568 	.word	0x20000568
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	20000040 	.word	0x20000040
 8004bd8:	20000078 	.word	0x20000078
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004be8:	f7fb ff10 	bl	8000a0c <__aeabi_dcmpgt>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004bf8:	a14f      	add	r1, pc, #316	; (adr r1, 8004d38 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8004bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bfe:	f7fb fabd 	bl	800017c <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004c10:	f7fb fab6 	bl	8000180 <__adddf3>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	69f9      	ldr	r1, [r7, #28]
 8004c1a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004c24:	a346      	add	r3, pc, #280	; (adr r3, 8004d40 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fc5f 	bl	80004ec <__aeabi_dmul>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c3e:	f7fb fd7f 	bl	8000740 <__aeabi_ddiv>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004c50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c54:	f000 f898 	bl	8004d88 <filter>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 020a 	bic.w	r2, r2, #10
 8004c80:	621a      	str	r2, [r3, #32]
 8004c82:	e021      	b.n	8004cc8 <HAL_TIM_IC_CaptureCallback+0x338>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d108      	bne.n	8004c9e <HAL_TIM_IC_CaptureCallback+0x30e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c9a:	6213      	str	r3, [r2, #32]
 8004c9c:	e014      	b.n	8004cc8 <HAL_TIM_IC_CaptureCallback+0x338>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d108      	bne.n	8004cb8 <HAL_TIM_IC_CaptureCallback+0x328>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb4:	6213      	str	r3, [r2, #32]
 8004cb6:	e007      	b.n	8004cc8 <HAL_TIM_IC_CaptureCallback+0x338>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc6:	6213      	str	r3, [r2, #32]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_TIM_IC_CaptureCallback+0x34e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a12      	ldr	r2, [r2, #32]
 8004cda:	621a      	str	r2, [r3, #32]
 8004cdc:	e01b      	b.n	8004d16 <HAL_TIM_IC_CaptureCallback+0x386>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_IC_CaptureCallback+0x364>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	6213      	str	r3, [r2, #32]
 8004cf2:	e010      	b.n	8004d16 <HAL_TIM_IC_CaptureCallback+0x386>
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d106      	bne.n	8004d0a <HAL_TIM_IC_CaptureCallback+0x37a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	6213      	str	r3, [r2, #32]
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IC_CaptureCallback+0x386>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68d9      	ldr	r1, [r3, #12]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	400a      	ands	r2, r1
 8004d28:	60da      	str	r2, [r3, #12]
}
 8004d2a:	e7ff      	b.n	8004d2c <HAL_TIM_IC_CaptureCallback+0x39c>
 8004d2c:	bf00      	nop
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bdb0      	pop	{r4, r5, r7, pc}
 8004d34:	f3af 8000 	nop.w
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	40efffe0 	.word	0x40efffe0
 8004d40:	b020c49c 	.word	0xb020c49c
 8004d44:	3fa16872 	.word	0x3fa16872

08004d48 <HCSR04_Read_Front>:
	0,
	0
};

void HCSR04_Read_Front (TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004d50:	2201      	movs	r2, #1
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	480b      	ldr	r0, [pc, #44]	; (8004d84 <HCSR04_Read_Front+0x3c>)
 8004d56:	f000 ff8f 	bl	8005c78 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f7ff f9ea 	bl	8004134 <delay_us>
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004d60:	2200      	movs	r2, #0
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	4807      	ldr	r0, [pc, #28]	; (8004d84 <HCSR04_Read_Front+0x3c>)
 8004d66:	f000 ff87 	bl	8005c78 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0204 	orr.w	r2, r2, #4
 8004d78:	60da      	str	r2, [r3, #12]

}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40010800 	.word	0x40010800

08004d88 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d92:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8004d96:	a116      	add	r1, pc, #88	; (adr r1, 8004df0 <filter+0x68>)
 8004d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004da0:	f7fb fba4 	bl	80004ec <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	a310      	add	r3, pc, #64	; (adr r3, 8004df0 <filter+0x68>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	4910      	ldr	r1, [pc, #64]	; (8004df8 <filter+0x70>)
 8004db8:	f7fb f9e0 	bl	800017c <__aeabi_dsub>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc8:	f7fb fb90 	bl	80004ec <__aeabi_dmul>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb f9d4 	bl	8000180 <__adddf3>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8004de0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bdb0      	pop	{r4, r5, r7, pc}
 8004dee:	bf00      	nop
 8004df0:	47ae147b 	.word	0x47ae147b
 8004df4:	3f847ae1 	.word	0x3f847ae1
 8004df8:	3ff00000 	.word	0x3ff00000

08004dfc <Reset_Handler>:
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	e003      	b.n	8004e08 <LoopCopyDataInit>

08004e00 <CopyDataInit>:
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <LoopFillZerobss+0x14>)
 8004e02:	585b      	ldr	r3, [r3, r1]
 8004e04:	5043      	str	r3, [r0, r1]
 8004e06:	3104      	adds	r1, #4

08004e08 <LoopCopyDataInit>:
 8004e08:	480a      	ldr	r0, [pc, #40]	; (8004e34 <LoopFillZerobss+0x18>)
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <LoopFillZerobss+0x1c>)
 8004e0c:	1842      	adds	r2, r0, r1
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d3f6      	bcc.n	8004e00 <CopyDataInit>
 8004e12:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <LoopFillZerobss+0x20>)
 8004e14:	e002      	b.n	8004e1c <LoopFillZerobss>

08004e16 <FillZerobss>:
 8004e16:	2300      	movs	r3, #0
 8004e18:	f842 3b04 	str.w	r3, [r2], #4

08004e1c <LoopFillZerobss>:
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <LoopFillZerobss+0x24>)
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3f9      	bcc.n	8004e16 <FillZerobss>
 8004e22:	f7ff fdad 	bl	8004980 <SystemInit>
 8004e26:	f004 fbc5 	bl	80095b4 <__libc_init_array>
 8004e2a:	f7fe fd17 	bl	800385c <main>
 8004e2e:	4770      	bx	lr
 8004e30:	0800cf1c 	.word	0x0800cf1c
 8004e34:	20000000 	.word	0x20000000
 8004e38:	20000288 	.word	0x20000288
 8004e3c:	20000288 	.word	0x20000288
 8004e40:	200005a0 	.word	0x200005a0

08004e44 <ADC1_2_IRQHandler>:
 8004e44:	e7fe      	b.n	8004e44 <ADC1_2_IRQHandler>
	...

08004e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <HAL_Init+0x28>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <HAL_Init+0x28>)
 8004e52:	f043 0310 	orr.w	r3, r3, #16
 8004e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e58:	2003      	movs	r0, #3
 8004e5a:	f000 fb59 	bl	8005510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f000 f808 	bl	8004e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e64:	f7ff f99a 	bl	800419c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000

08004e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e7c:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_InitTick+0x54>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_InitTick+0x58>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	4619      	mov	r1, r3
 8004e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb71 	bl	800557a <HAL_SYSTICK_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e00e      	b.n	8004ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b0f      	cmp	r3, #15
 8004ea6:	d80a      	bhi.n	8004ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eb0:	f000 fb39 	bl	8005526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004eb4:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <HAL_InitTick+0x5c>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000038 	.word	0x20000038
 8004ecc:	200000b4 	.word	0x200000b4
 8004ed0:	200000b0 	.word	0x200000b0

08004ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_IncTick+0x1c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_IncTick+0x20>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	4a03      	ldr	r2, [pc, #12]	; (8004ef4 <HAL_IncTick+0x20>)
 8004ee6:	6013      	str	r3, [r2, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	200000b4 	.word	0x200000b4
 8004ef4:	2000058c 	.word	0x2000058c

08004ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return uwTick;
 8004efc:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <HAL_GetTick+0x10>)
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	2000058c 	.word	0x2000058c

08004f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7ff fff0 	bl	8004ef8 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f24:	d005      	beq.n	8004f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_Delay+0x44>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f32:	bf00      	nop
 8004f34:	f7ff ffe0 	bl	8004ef8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d8f7      	bhi.n	8004f34 <HAL_Delay+0x28>
  {
  }
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200000b4 	.word	0x200000b4

08004f54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0be      	b.n	80050f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff f934 	bl	8004200 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f9ab 	bl	80052f4 <ADC_ConversionStop_Disable>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 8099 	bne.w	80050e2 <HAL_ADC_Init+0x18e>
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 8095 	bne.w	80050e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fc0:	f023 0302 	bic.w	r3, r3, #2
 8004fc4:	f043 0202 	orr.w	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7b1b      	ldrb	r3, [r3, #12]
 8004fda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004fdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fec:	d003      	beq.n	8004ff6 <HAL_ADC_Init+0xa2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_ADC_Init+0xa8>
 8004ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffa:	e000      	b.n	8004ffe <HAL_ADC_Init+0xaa>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	7d1b      	ldrb	r3, [r3, #20]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d119      	bne.n	8005040 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7b1b      	ldrb	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	3b01      	subs	r3, #1
 800501a:	035a      	lsls	r2, r3, #13
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e00b      	b.n	8005040 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <HAL_ADC_Init+0x1a8>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	430b      	orrs	r3, r1
 8005066:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005070:	d003      	beq.n	800507a <HAL_ADC_Init+0x126>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d104      	bne.n	8005084 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	3b01      	subs	r3, #1
 8005080:	051b      	lsls	r3, r3, #20
 8005082:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	430a      	orrs	r2, r1
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_ADC_Init+0x1ac>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d10b      	bne.n	80050c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050be:	e018      	b.n	80050f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	f023 0312 	bic.w	r3, r3, #18
 80050c8:	f043 0210 	orr.w	r2, r3, #16
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80050e0:	e007      	b.n	80050f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	f043 0210 	orr.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	ffe1f7fd 	.word	0xffe1f7fd
 8005100:	ff1f0efe 	.word	0xff1f0efe

08005104 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x20>
 8005120:	2302      	movs	r3, #2
 8005122:	e0dc      	b.n	80052de <HAL_ADC_ConfigChannel+0x1da>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d81c      	bhi.n	800516e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	3b05      	subs	r3, #5
 8005146:	221f      	movs	r2, #31
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	4019      	ands	r1, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	3b05      	subs	r3, #5
 8005160:	fa00 f203 	lsl.w	r2, r0, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	635a      	str	r2, [r3, #52]	; 0x34
 800516c:	e03c      	b.n	80051e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d81c      	bhi.n	80051b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	3b23      	subs	r3, #35	; 0x23
 8005188:	221f      	movs	r2, #31
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43db      	mvns	r3, r3
 8005190:	4019      	ands	r1, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	3b23      	subs	r3, #35	; 0x23
 80051a2:	fa00 f203 	lsl.w	r2, r0, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
 80051ae:	e01b      	b.n	80051e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	3b41      	subs	r3, #65	; 0x41
 80051c2:	221f      	movs	r2, #31
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	4019      	ands	r1, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	3b41      	subs	r3, #65	; 0x41
 80051dc:	fa00 f203 	lsl.w	r2, r0, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d91c      	bls.n	800522a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68d9      	ldr	r1, [r3, #12]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	3b1e      	subs	r3, #30
 8005202:	2207      	movs	r2, #7
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	4019      	ands	r1, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6898      	ldr	r0, [r3, #8]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	3b1e      	subs	r3, #30
 800521c:	fa00 f203 	lsl.w	r2, r0, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e019      	b.n	800525e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6919      	ldr	r1, [r3, #16]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	2207      	movs	r2, #7
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	4019      	ands	r1, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	6898      	ldr	r0, [r3, #8]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	fa00 f203 	lsl.w	r2, r0, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b10      	cmp	r3, #16
 8005264:	d003      	beq.n	800526e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800526a:	2b11      	cmp	r3, #17
 800526c:	d132      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d125      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d126      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005294:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b10      	cmp	r3, #16
 800529c:	d11a      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_ADC_ConfigChannel+0x1e8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	0c9a      	lsrs	r2, r3, #18
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052b4:	e002      	b.n	80052bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f9      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x1b2>
 80052c2:	e007      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	40012400 	.word	0x40012400
 80052ec:	20000038 	.word	0x20000038
 80052f0:	431bde83 	.word	0x431bde83

080052f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d12e      	bne.n	800536c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800531e:	f7ff fdeb 	bl	8004ef8 <HAL_GetTick>
 8005322:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005324:	e01b      	b.n	800535e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005326:	f7ff fde7 	bl	8004ef8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d914      	bls.n	800535e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10d      	bne.n	800535e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	f043 0210 	orr.w	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e007      	b.n	800536e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d0dc      	beq.n	8005326 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <__NVIC_SetPriorityGrouping>:
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4906      	ldr	r1, [pc, #24]	; (8005410 <__NVIC_EnableIRQ+0x34>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	e000e100 	.word	0xe000e100

08005414 <__NVIC_SetPriority>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db0a      	blt.n	800543e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	490c      	ldr	r1, [pc, #48]	; (8005460 <__NVIC_SetPriority+0x4c>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	440b      	add	r3, r1
 8005438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800543c:	e00a      	b.n	8005454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4908      	ldr	r1, [pc, #32]	; (8005464 <__NVIC_SetPriority+0x50>)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	3b04      	subs	r3, #4
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	440b      	add	r3, r1
 8005452:	761a      	strb	r2, [r3, #24]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e100 	.word	0xe000e100
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <NVIC_EncodePriority>:
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	; 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f1c3 0307 	rsb	r3, r3, #7
 8005482:	2b04      	cmp	r3, #4
 8005484:	bf28      	it	cs
 8005486:	2304      	movcs	r3, #4
 8005488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3304      	adds	r3, #4
 800548e:	2b06      	cmp	r3, #6
 8005490:	d902      	bls.n	8005498 <NVIC_EncodePriority+0x30>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3b03      	subs	r3, #3
 8005496:	e000      	b.n	800549a <NVIC_EncodePriority+0x32>
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	401a      	ands	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43d9      	mvns	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	4313      	orrs	r3, r2
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	; 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <SysTick_Config>:
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054dc:	d301      	bcc.n	80054e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80054de:	2301      	movs	r3, #1
 80054e0:	e00f      	b.n	8005502 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <SysTick_Config+0x40>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ea:	210f      	movs	r1, #15
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f0:	f7ff ff90 	bl	8005414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <SysTick_Config+0x40>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054fa:	4b04      	ldr	r3, [pc, #16]	; (800550c <SysTick_Config+0x40>)
 80054fc:	2207      	movs	r2, #7
 80054fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000e010 	.word	0xe000e010

08005510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff2d 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	4603      	mov	r3, r0
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005538:	f7ff ff42 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 800553c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7ff ff90 	bl	8005468 <NVIC_EncodePriority>
 8005548:	4602      	mov	r2, r0
 800554a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff ff5f 	bl	8005414 <__NVIC_SetPriority>
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	4603      	mov	r3, r0
 8005566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff35 	bl	80053dc <__NVIC_EnableIRQ>
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ffa2 	bl	80054cc <SysTick_Config>
 8005588:	4603      	mov	r3, r0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e043      	b.n	8005632 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_DMA_Init+0xa8>)
 80055b2:	4413      	add	r3, r2
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <HAL_DMA_Init+0xac>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	009a      	lsls	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <HAL_DMA_Init+0xb0>)
 80055c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80055e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80055ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	bffdfff8 	.word	0xbffdfff8
 8005640:	cccccccd 	.word	0xcccccccd
 8005644:	40020000 	.word	0x40020000

08005648 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_DMA_Start_IT+0x20>
 8005664:	2302      	movs	r3, #2
 8005666:	e04a      	b.n	80056fe <HAL_DMA_Start_IT+0xb6>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005676:	2b01      	cmp	r3, #1
 8005678:	d13a      	bne.n	80056f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f938 	bl	8005914 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 020e 	orr.w	r2, r2, #14
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e00f      	b.n	80056de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0204 	bic.w	r2, r2, #4
 80056cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 020a 	orr.w	r2, r2, #10
 80056dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e005      	b.n	80056fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2204      	movs	r2, #4
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d04f      	beq.n	80057d0 <HAL_DMA_IRQHandler+0xc8>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	d04a      	beq.n	80057d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d107      	bne.n	8005758 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0204 	bic.w	r2, r2, #4
 8005756:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a66      	ldr	r2, [pc, #408]	; (80058f8 <HAL_DMA_IRQHandler+0x1f0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d029      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xae>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a65      	ldr	r2, [pc, #404]	; (80058fc <HAL_DMA_IRQHandler+0x1f4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xaa>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a63      	ldr	r2, [pc, #396]	; (8005900 <HAL_DMA_IRQHandler+0x1f8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01a      	beq.n	80057ac <HAL_DMA_IRQHandler+0xa4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a62      	ldr	r2, [pc, #392]	; (8005904 <HAL_DMA_IRQHandler+0x1fc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d012      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x9e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a60      	ldr	r2, [pc, #384]	; (8005908 <HAL_DMA_IRQHandler+0x200>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00a      	beq.n	80057a0 <HAL_DMA_IRQHandler+0x98>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5f      	ldr	r2, [pc, #380]	; (800590c <HAL_DMA_IRQHandler+0x204>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d102      	bne.n	800579a <HAL_DMA_IRQHandler+0x92>
 8005794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005798:	e00e      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 800579a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800579e:	e00b      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 80057a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057a4:	e008      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 80057a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057aa:	e005      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 80057ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b0:	e002      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	e000      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb0>
 80057b6:	2304      	movs	r3, #4
 80057b8:	4a55      	ldr	r2, [pc, #340]	; (8005910 <HAL_DMA_IRQHandler+0x208>)
 80057ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8094 	beq.w	80058ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80057ce:	e08e      	b.n	80058ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2202      	movs	r2, #2
 80057d6:	409a      	lsls	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d056      	beq.n	800588e <HAL_DMA_IRQHandler+0x186>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d051      	beq.n	800588e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 020a 	bic.w	r2, r2, #10
 8005806:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a38      	ldr	r2, [pc, #224]	; (80058f8 <HAL_DMA_IRQHandler+0x1f0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d029      	beq.n	800586e <HAL_DMA_IRQHandler+0x166>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a37      	ldr	r2, [pc, #220]	; (80058fc <HAL_DMA_IRQHandler+0x1f4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0x162>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a35      	ldr	r2, [pc, #212]	; (8005900 <HAL_DMA_IRQHandler+0x1f8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01a      	beq.n	8005864 <HAL_DMA_IRQHandler+0x15c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a34      	ldr	r2, [pc, #208]	; (8005904 <HAL_DMA_IRQHandler+0x1fc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d012      	beq.n	800585e <HAL_DMA_IRQHandler+0x156>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a32      	ldr	r2, [pc, #200]	; (8005908 <HAL_DMA_IRQHandler+0x200>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00a      	beq.n	8005858 <HAL_DMA_IRQHandler+0x150>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_DMA_IRQHandler+0x204>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d102      	bne.n	8005852 <HAL_DMA_IRQHandler+0x14a>
 800584c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005850:	e00e      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 8005852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005856:	e00b      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 8005858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800585c:	e008      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 800585e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005862:	e005      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 8005864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005868:	e002      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 800586a:	2320      	movs	r3, #32
 800586c:	e000      	b.n	8005870 <HAL_DMA_IRQHandler+0x168>
 800586e:	2302      	movs	r3, #2
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <HAL_DMA_IRQHandler+0x208>)
 8005872:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d034      	beq.n	80058ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800588c:	e02f      	b.n	80058ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2208      	movs	r2, #8
 8005894:	409a      	lsls	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d028      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x1e8>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020e 	bic.w	r2, r2, #14
 80058b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f202 	lsl.w	r2, r1, r2
 80058c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
    }
  }
  return;
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
}
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40020008 	.word	0x40020008
 80058fc:	4002001c 	.word	0x4002001c
 8005900:	40020030 	.word	0x40020030
 8005904:	40020044 	.word	0x40020044
 8005908:	40020058 	.word	0x40020058
 800590c:	4002006c 	.word	0x4002006c
 8005910:	40020000 	.word	0x40020000

08005914 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f202 	lsl.w	r2, r1, r2
 8005930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b10      	cmp	r3, #16
 8005940:	d108      	bne.n	8005954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005952:	e007      	b.n	8005964 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
	...

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b08b      	sub	sp, #44	; 0x2c
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800597e:	2300      	movs	r3, #0
 8005980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005982:	e169      	b.n	8005c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005984:	2201      	movs	r2, #1
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	4013      	ands	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	429a      	cmp	r2, r3
 800599e:	f040 8158 	bne.w	8005c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a9a      	ldr	r2, [pc, #616]	; (8005c10 <HAL_GPIO_Init+0x2a0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d05e      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
 80059ac:	4a98      	ldr	r2, [pc, #608]	; (8005c10 <HAL_GPIO_Init+0x2a0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d875      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059b2:	4a98      	ldr	r2, [pc, #608]	; (8005c14 <HAL_GPIO_Init+0x2a4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d058      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
 80059b8:	4a96      	ldr	r2, [pc, #600]	; (8005c14 <HAL_GPIO_Init+0x2a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d86f      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059be:	4a96      	ldr	r2, [pc, #600]	; (8005c18 <HAL_GPIO_Init+0x2a8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d052      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
 80059c4:	4a94      	ldr	r2, [pc, #592]	; (8005c18 <HAL_GPIO_Init+0x2a8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d869      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059ca:	4a94      	ldr	r2, [pc, #592]	; (8005c1c <HAL_GPIO_Init+0x2ac>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d04c      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
 80059d0:	4a92      	ldr	r2, [pc, #584]	; (8005c1c <HAL_GPIO_Init+0x2ac>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d863      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059d6:	4a92      	ldr	r2, [pc, #584]	; (8005c20 <HAL_GPIO_Init+0x2b0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d046      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
 80059dc:	4a90      	ldr	r2, [pc, #576]	; (8005c20 <HAL_GPIO_Init+0x2b0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d85d      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059e2:	2b12      	cmp	r3, #18
 80059e4:	d82a      	bhi.n	8005a3c <HAL_GPIO_Init+0xcc>
 80059e6:	2b12      	cmp	r3, #18
 80059e8:	d859      	bhi.n	8005a9e <HAL_GPIO_Init+0x12e>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <HAL_GPIO_Init+0x80>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a6b 	.word	0x08005a6b
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a57 	.word	0x08005a57
 80059fc:	08005a99 	.word	0x08005a99
 8005a00:	08005a9f 	.word	0x08005a9f
 8005a04:	08005a9f 	.word	0x08005a9f
 8005a08:	08005a9f 	.word	0x08005a9f
 8005a0c:	08005a9f 	.word	0x08005a9f
 8005a10:	08005a9f 	.word	0x08005a9f
 8005a14:	08005a9f 	.word	0x08005a9f
 8005a18:	08005a9f 	.word	0x08005a9f
 8005a1c:	08005a9f 	.word	0x08005a9f
 8005a20:	08005a9f 	.word	0x08005a9f
 8005a24:	08005a9f 	.word	0x08005a9f
 8005a28:	08005a9f 	.word	0x08005a9f
 8005a2c:	08005a9f 	.word	0x08005a9f
 8005a30:	08005a9f 	.word	0x08005a9f
 8005a34:	08005a4d 	.word	0x08005a4d
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	4a79      	ldr	r2, [pc, #484]	; (8005c24 <HAL_GPIO_Init+0x2b4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a42:	e02c      	b.n	8005a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	623b      	str	r3, [r7, #32]
          break;
 8005a4a:	e029      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	3304      	adds	r3, #4
 8005a52:	623b      	str	r3, [r7, #32]
          break;
 8005a54:	e024      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	623b      	str	r3, [r7, #32]
          break;
 8005a5e:	e01f      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	330c      	adds	r3, #12
 8005a66:	623b      	str	r3, [r7, #32]
          break;
 8005a68:	e01a      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a72:	2304      	movs	r3, #4
 8005a74:	623b      	str	r3, [r7, #32]
          break;
 8005a76:	e013      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d105      	bne.n	8005a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a80:	2308      	movs	r3, #8
 8005a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	611a      	str	r2, [r3, #16]
          break;
 8005a8a:	e009      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	615a      	str	r2, [r3, #20]
          break;
 8005a96:	e003      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	623b      	str	r3, [r7, #32]
          break;
 8005a9c:	e000      	b.n	8005aa0 <HAL_GPIO_Init+0x130>
          break;
 8005a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	d801      	bhi.n	8005aaa <HAL_GPIO_Init+0x13a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	e001      	b.n	8005aae <HAL_GPIO_Init+0x13e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3304      	adds	r3, #4
 8005aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	d802      	bhi.n	8005abc <HAL_GPIO_Init+0x14c>
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	e002      	b.n	8005ac2 <HAL_GPIO_Init+0x152>
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	3b08      	subs	r3, #8
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	210f      	movs	r1, #15
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	6a39      	ldr	r1, [r7, #32]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80b1 	beq.w	8005c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <HAL_GPIO_Init+0x2b8>)
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	4a4c      	ldr	r2, [pc, #304]	; (8005c28 <HAL_GPIO_Init+0x2b8>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6193      	str	r3, [r2, #24]
 8005afc:	4b4a      	ldr	r3, [pc, #296]	; (8005c28 <HAL_GPIO_Init+0x2b8>)
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b08:	4a48      	ldr	r2, [pc, #288]	; (8005c2c <HAL_GPIO_Init+0x2bc>)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	089b      	lsrs	r3, r3, #2
 8005b0e:	3302      	adds	r3, #2
 8005b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	220f      	movs	r2, #15
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a40      	ldr	r2, [pc, #256]	; (8005c30 <HAL_GPIO_Init+0x2c0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_GPIO_Init+0x1ec>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3f      	ldr	r2, [pc, #252]	; (8005c34 <HAL_GPIO_Init+0x2c4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00d      	beq.n	8005b58 <HAL_GPIO_Init+0x1e8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3e      	ldr	r2, [pc, #248]	; (8005c38 <HAL_GPIO_Init+0x2c8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <HAL_GPIO_Init+0x1e4>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <HAL_GPIO_Init+0x2cc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <HAL_GPIO_Init+0x1e0>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <HAL_GPIO_Init+0x1ee>
 8005b50:	2304      	movs	r3, #4
 8005b52:	e004      	b.n	8005b5e <HAL_GPIO_Init+0x1ee>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e002      	b.n	8005b5e <HAL_GPIO_Init+0x1ee>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <HAL_GPIO_Init+0x1ee>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	f002 0203 	and.w	r2, r2, #3
 8005b64:	0092      	lsls	r2, r2, #2
 8005b66:	4093      	lsls	r3, r2
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b6e:	492f      	ldr	r1, [pc, #188]	; (8005c2c <HAL_GPIO_Init+0x2bc>)
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	3302      	adds	r3, #2
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b88:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	492c      	ldr	r1, [pc, #176]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]
 8005b94:	e006      	b.n	8005ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b96:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	4928      	ldr	r1, [pc, #160]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005bb0:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	4922      	ldr	r1, [pc, #136]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
 8005bbc:	e006      	b.n	8005bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	491e      	ldr	r1, [pc, #120]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	4918      	ldr	r1, [pc, #96]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	608b      	str	r3, [r1, #8]
 8005be4:	e006      	b.n	8005bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	4914      	ldr	r1, [pc, #80]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d021      	beq.n	8005c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	490e      	ldr	r1, [pc, #56]	; (8005c40 <HAL_GPIO_Init+0x2d0>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60cb      	str	r3, [r1, #12]
 8005c0c:	e021      	b.n	8005c52 <HAL_GPIO_Init+0x2e2>
 8005c0e:	bf00      	nop
 8005c10:	10320000 	.word	0x10320000
 8005c14:	10310000 	.word	0x10310000
 8005c18:	10220000 	.word	0x10220000
 8005c1c:	10210000 	.word	0x10210000
 8005c20:	10120000 	.word	0x10120000
 8005c24:	10110000 	.word	0x10110000
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010800 	.word	0x40010800
 8005c34:	40010c00 	.word	0x40010c00
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	4909      	ldr	r1, [pc, #36]	; (8005c74 <HAL_GPIO_Init+0x304>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3301      	adds	r3, #1
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f47f ae8e 	bne.w	8005984 <HAL_GPIO_Init+0x14>
  }
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	372c      	adds	r7, #44	; 0x2c
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40010400 	.word	0x40010400

08005c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
 8005c84:	4613      	mov	r3, r2
 8005c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c88:	787b      	ldrb	r3, [r7, #1]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c94:	e003      	b.n	8005c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	041a      	lsls	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	611a      	str	r2, [r3, #16]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	041a      	lsls	r2, r3, #16
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	43d9      	mvns	r1, r3
 8005cc6:	887b      	ldrh	r3, [r7, #2]
 8005cc8:	400b      	ands	r3, r1
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	611a      	str	r2, [r3, #16]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e12b      	b.n	8005f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe fab8 	bl	8004278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d40:	f001 fb6e 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8005d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	4a81      	ldr	r2, [pc, #516]	; (8005f50 <HAL_I2C_Init+0x274>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d807      	bhi.n	8005d60 <HAL_I2C_Init+0x84>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a80      	ldr	r2, [pc, #512]	; (8005f54 <HAL_I2C_Init+0x278>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	bf94      	ite	ls
 8005d58:	2301      	movls	r3, #1
 8005d5a:	2300      	movhi	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	e006      	b.n	8005d6e <HAL_I2C_Init+0x92>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4a7d      	ldr	r2, [pc, #500]	; (8005f58 <HAL_I2C_Init+0x27c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	bf94      	ite	ls
 8005d68:	2301      	movls	r3, #1
 8005d6a:	2300      	movhi	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e0e7      	b.n	8005f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a78      	ldr	r2, [pc, #480]	; (8005f5c <HAL_I2C_Init+0x280>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0c9b      	lsrs	r3, r3, #18
 8005d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4a6a      	ldr	r2, [pc, #424]	; (8005f50 <HAL_I2C_Init+0x274>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d802      	bhi.n	8005db0 <HAL_I2C_Init+0xd4>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	3301      	adds	r3, #1
 8005dae:	e009      	b.n	8005dc4 <HAL_I2C_Init+0xe8>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	4a69      	ldr	r2, [pc, #420]	; (8005f60 <HAL_I2C_Init+0x284>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	495c      	ldr	r1, [pc, #368]	; (8005f50 <HAL_I2C_Init+0x274>)
 8005de0:	428b      	cmp	r3, r1
 8005de2:	d819      	bhi.n	8005e18 <HAL_I2C_Init+0x13c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1e59      	subs	r1, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005df8:	400b      	ands	r3, r1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_I2C_Init+0x138>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1e59      	subs	r1, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e12:	e051      	b.n	8005eb8 <HAL_I2C_Init+0x1dc>
 8005e14:	2304      	movs	r3, #4
 8005e16:	e04f      	b.n	8005eb8 <HAL_I2C_Init+0x1dc>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d111      	bne.n	8005e44 <HAL_I2C_Init+0x168>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1e58      	subs	r0, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	440b      	add	r3, r1
 8005e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e32:	3301      	adds	r3, #1
 8005e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e012      	b.n	8005e6a <HAL_I2C_Init+0x18e>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	1e58      	subs	r0, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	0099      	lsls	r1, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_I2C_Init+0x196>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e022      	b.n	8005eb8 <HAL_I2C_Init+0x1dc>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10e      	bne.n	8005e98 <HAL_I2C_Init+0x1bc>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1e58      	subs	r0, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	e00f      	b.n	8005eb8 <HAL_I2C_Init+0x1dc>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1e58      	subs	r0, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6859      	ldr	r1, [r3, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	0099      	lsls	r1, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	6809      	ldr	r1, [r1, #0]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69da      	ldr	r2, [r3, #28]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6911      	ldr	r1, [r2, #16]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68d2      	ldr	r2, [r2, #12]
 8005ef2:	4311      	orrs	r1, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	000186a0 	.word	0x000186a0
 8005f54:	001e847f 	.word	0x001e847f
 8005f58:	003d08ff 	.word	0x003d08ff
 8005f5c:	431bde83 	.word	0x431bde83
 8005f60:	10624dd3 	.word	0x10624dd3

08005f64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	460b      	mov	r3, r1
 8005f72:	817b      	strh	r3, [r7, #10]
 8005f74:	4613      	mov	r3, r2
 8005f76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f78:	f7fe ffbe 	bl	8004ef8 <HAL_GetTick>
 8005f7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	f040 80e0 	bne.w	800614c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2319      	movs	r3, #25
 8005f92:	2201      	movs	r2, #1
 8005f94:	4970      	ldr	r1, [pc, #448]	; (8006158 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fc92 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e0d3      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_I2C_Master_Transmit+0x50>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e0cc      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d007      	beq.n	8005fda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2221      	movs	r2, #33	; 0x21
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	893a      	ldrh	r2, [r7, #8]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a50      	ldr	r2, [pc, #320]	; (800615c <HAL_I2C_Master_Transmit+0x1f8>)
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800601c:	8979      	ldrh	r1, [r7, #10]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 fafc 	bl	8006620 <I2C_MasterRequestWrite>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e08d      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006048:	e066      	b.n	8006118 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	6a39      	ldr	r1, [r7, #32]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fd0c 	bl	8006a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b04      	cmp	r3, #4
 8006060:	d107      	bne.n	8006072 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006070:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e06b      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d11b      	bne.n	80060ec <HAL_I2C_Master_Transmit+0x188>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d017      	beq.n	80060ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	781a      	ldrb	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	6a39      	ldr	r1, [r7, #32]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fcfc 	bl	8006aee <I2C_WaitOnBTFFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2b04      	cmp	r3, #4
 8006102:	d107      	bne.n	8006114 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006112:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e01a      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d194      	bne.n	800604a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	00100002 	.word	0x00100002
 800615c:	ffff0000 	.word	0xffff0000

08006160 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	; 0x30
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	461a      	mov	r2, r3
 800616c:	460b      	mov	r3, r1
 800616e:	817b      	strh	r3, [r7, #10]
 8006170:	4613      	mov	r3, r2
 8006172:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7fe febe 	bl	8004ef8 <HAL_GetTick>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b20      	cmp	r3, #32
 8006188:	f040 823f 	bne.w	800660a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2319      	movs	r3, #25
 8006192:	2201      	movs	r2, #1
 8006194:	497f      	ldr	r1, [pc, #508]	; (8006394 <HAL_I2C_Master_Receive+0x234>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fb92 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	e232      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_I2C_Master_Receive+0x54>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e22b      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d007      	beq.n	80061da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2222      	movs	r2, #34	; 0x22
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2210      	movs	r2, #16
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	893a      	ldrh	r2, [r7, #8]
 800620a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a5f      	ldr	r2, [pc, #380]	; (8006398 <HAL_I2C_Master_Receive+0x238>)
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800621c:	8979      	ldrh	r1, [r7, #10]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fa7e 	bl	8006724 <I2C_MasterRequestRead>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e1ec      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d113      	bne.n	8006262 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e1c0      	b.n	80065e4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006266:	2b01      	cmp	r3, #1
 8006268:	d11e      	bne.n	80062a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800627a:	b672      	cpsid	i
}
 800627c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80062a4:	b662      	cpsie	i
}
 80062a6:	e035      	b.n	8006314 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d11e      	bne.n	80062ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80062c0:	b672      	cpsid	i
}
 80062c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80062ea:	b662      	cpsie	i
}
 80062ec:	e012      	b.n	8006314 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006314:	e166      	b.n	80065e4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	2b03      	cmp	r3, #3
 800631c:	f200 811f 	bhi.w	800655e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	2b01      	cmp	r3, #1
 8006326:	d123      	bne.n	8006370 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc1f 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e167      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800636e:	e139      	b.n	80065e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006374:	2b02      	cmp	r3, #2
 8006376:	d152      	bne.n	800641e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	2200      	movs	r2, #0
 8006380:	4906      	ldr	r1, [pc, #24]	; (800639c <HAL_I2C_Master_Receive+0x23c>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fa9c 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e13c      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
 8006392:	bf00      	nop
 8006394:	00100002 	.word	0x00100002
 8006398:	ffff0000 	.word	0xffff0000
 800639c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80063a0:	b672      	cpsid	i
}
 80063a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063e6:	b662      	cpsie	i
}
 80063e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800641c:	e0e2      	b.n	80065e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	2200      	movs	r2, #0
 8006426:	497b      	ldr	r1, [pc, #492]	; (8006614 <HAL_I2C_Master_Receive+0x4b4>)
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fa49 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0e9      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006448:	b672      	cpsid	i
}
 800644a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800647e:	4b66      	ldr	r3, [pc, #408]	; (8006618 <HAL_I2C_Master_Receive+0x4b8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	08db      	lsrs	r3, r3, #3
 8006484:	4a65      	ldr	r2, [pc, #404]	; (800661c <HAL_I2C_Master_Receive+0x4bc>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	0a1a      	lsrs	r2, r3, #8
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	00da      	lsls	r2, r3, #3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	3b01      	subs	r3, #1
 800649c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d118      	bne.n	80064d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f043 0220 	orr.w	r2, r3, #32
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80064c6:	b662      	cpsie	i
}
 80064c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e09a      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d1d9      	bne.n	8006498 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006526:	b662      	cpsie	i
}
 8006528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800655c:	e042      	b.n	80065e4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fb04 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e04c      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d118      	bne.n	80065e4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f47f ae94 	bne.w	8006316 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e000      	b.n	800660c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800660a:	2302      	movs	r3, #2
  }
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	00010004 	.word	0x00010004
 8006618:	20000038 	.word	0x20000038
 800661c:	14f8b589 	.word	0x14f8b589

08006620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	460b      	mov	r3, r1
 800662e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d006      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d003      	beq.n	800664a <I2C_MasterRequestWrite+0x2a>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006648:	d108      	bne.n	800665c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e00b      	b.n	8006674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	2b12      	cmp	r3, #18
 8006662:	d107      	bne.n	8006674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f91d 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d103      	bne.n	80066a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e035      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b0:	d108      	bne.n	80066c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066c0:	611a      	str	r2, [r3, #16]
 80066c2:	e01b      	b.n	80066fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066c4:	897b      	ldrh	r3, [r7, #10]
 80066c6:	11db      	asrs	r3, r3, #7
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0306 	and.w	r3, r3, #6
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f063 030f 	orn	r3, r3, #15
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	490e      	ldr	r1, [pc, #56]	; (800671c <I2C_MasterRequestWrite+0xfc>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f943 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e010      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4907      	ldr	r1, [pc, #28]	; (8006720 <I2C_MasterRequestWrite+0x100>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f933 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	00010008 	.word	0x00010008
 8006720:	00010002 	.word	0x00010002

08006724 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	460b      	mov	r3, r1
 8006732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006748:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b08      	cmp	r3, #8
 800674e:	d006      	beq.n	800675e <I2C_MasterRequestRead+0x3a>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d003      	beq.n	800675e <I2C_MasterRequestRead+0x3a>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800675c:	d108      	bne.n	8006770 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e00b      	b.n	8006788 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2b11      	cmp	r3, #17
 8006776:	d107      	bne.n	8006788 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f893 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00d      	beq.n	80067bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ae:	d103      	bne.n	80067b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e079      	b.n	80068b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c4:	d108      	bne.n	80067d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067c6:	897b      	ldrh	r3, [r7, #10]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	611a      	str	r2, [r3, #16]
 80067d6:	e05f      	b.n	8006898 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067d8:	897b      	ldrh	r3, [r7, #10]
 80067da:	11db      	asrs	r3, r3, #7
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0306 	and.w	r3, r3, #6
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f063 030f 	orn	r3, r3, #15
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4930      	ldr	r1, [pc, #192]	; (80068b8 <I2C_MasterRequestRead+0x194>)
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f8b9 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e054      	b.n	80068b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006806:	897b      	ldrh	r3, [r7, #10]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4929      	ldr	r1, [pc, #164]	; (80068bc <I2C_MasterRequestRead+0x198>)
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f8a9 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e044      	b.n	80068b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800684a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f831 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006872:	d103      	bne.n	800687c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e017      	b.n	80068b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	11db      	asrs	r3, r3, #7
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0306 	and.w	r3, r3, #6
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f063 030e 	orn	r3, r3, #14
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4907      	ldr	r1, [pc, #28]	; (80068bc <I2C_MasterRequestRead+0x198>)
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f865 	bl	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	00010008 	.word	0x00010008
 80068bc:	00010002 	.word	0x00010002

080068c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d0:	e025      	b.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d8:	d021      	beq.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fe fb0d 	bl	8004ef8 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e023      	b.n	8006966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10d      	bne.n	8006944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	43da      	mvns	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	e00c      	b.n	800695e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	43da      	mvns	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d0b6      	beq.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800697c:	e051      	b.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d123      	bne.n	80069d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f043 0204 	orr.w	r2, r3, #4
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e046      	b.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069dc:	d021      	beq.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fe fa8b 	bl	8004ef8 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e020      	b.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10c      	bne.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	43da      	mvns	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf14      	ite	ne
 8006a3e:	2301      	movne	r3, #1
 8006a40:	2300      	moveq	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	e00b      	b.n	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	43da      	mvns	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d18d      	bne.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a78:	e02d      	b.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f8ce 	bl	8006c1c <I2C_IsAcknowledgeFailed>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e02d      	b.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a90:	d021      	beq.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fe fa31 	bl	8004ef8 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d116      	bne.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e007      	b.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d1ca      	bne.n	8006a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006afa:	e02d      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f88d 	bl	8006c1c <I2C_IsAcknowledgeFailed>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e02d      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b12:	d021      	beq.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fe f9f0 	bl	8004ef8 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d116      	bne.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e007      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d1ca      	bne.n	8006afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b7c:	e042      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d119      	bne.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0210 	mvn.w	r2, #16
 8006b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e029      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc0:	f7fe f99a 	bl	8004ef8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e007      	b.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d1b5      	bne.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d11b      	bne.n	8006c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	f043 0204 	orr.w	r2, r3, #4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e272      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8087 	beq.w	8006da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c98:	4b92      	ldr	r3, [pc, #584]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 030c 	and.w	r3, r3, #12
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d00c      	beq.n	8006cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ca4:	4b8f      	ldr	r3, [pc, #572]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d112      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x5e>
 8006cb0:	4b8c      	ldr	r3, [pc, #560]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cbe:	4b89      	ldr	r3, [pc, #548]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d06c      	beq.n	8006da4 <HAL_RCC_OscConfig+0x12c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d168      	bne.n	8006da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e24c      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cde:	d106      	bne.n	8006cee <HAL_RCC_OscConfig+0x76>
 8006ce0:	4b80      	ldr	r3, [pc, #512]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a7f      	ldr	r2, [pc, #508]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	e02e      	b.n	8006d4c <HAL_RCC_OscConfig+0xd4>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10c      	bne.n	8006d10 <HAL_RCC_OscConfig+0x98>
 8006cf6:	4b7b      	ldr	r3, [pc, #492]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a7a      	ldr	r2, [pc, #488]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	4b78      	ldr	r3, [pc, #480]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a77      	ldr	r2, [pc, #476]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	e01d      	b.n	8006d4c <HAL_RCC_OscConfig+0xd4>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0xbc>
 8006d1a:	4b72      	ldr	r3, [pc, #456]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a71      	ldr	r2, [pc, #452]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b6f      	ldr	r3, [pc, #444]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a6e      	ldr	r2, [pc, #440]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e00b      	b.n	8006d4c <HAL_RCC_OscConfig+0xd4>
 8006d34:	4b6b      	ldr	r3, [pc, #428]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6a      	ldr	r2, [pc, #424]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	4b68      	ldr	r3, [pc, #416]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a67      	ldr	r2, [pc, #412]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d54:	f7fe f8d0 	bl	8004ef8 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d5c:	f7fe f8cc 	bl	8004ef8 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	; 0x64
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e200      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	4b5d      	ldr	r3, [pc, #372]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0xe4>
 8006d7a:	e014      	b.n	8006da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7c:	f7fe f8bc 	bl	8004ef8 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d84:	f7fe f8b8 	bl	8004ef8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	; 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e1ec      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d96:	4b53      	ldr	r3, [pc, #332]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f0      	bne.n	8006d84 <HAL_RCC_OscConfig+0x10c>
 8006da2:	e000      	b.n	8006da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d063      	beq.n	8006e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006db2:	4b4c      	ldr	r3, [pc, #304]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 030c 	and.w	r3, r3, #12
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dbe:	4b49      	ldr	r3, [pc, #292]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d11c      	bne.n	8006e04 <HAL_RCC_OscConfig+0x18c>
 8006dca:	4b46      	ldr	r3, [pc, #280]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d116      	bne.n	8006e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd6:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_RCC_OscConfig+0x176>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d001      	beq.n	8006dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e1c0      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dee:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4939      	ldr	r1, [pc, #228]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e02:	e03a      	b.n	8006e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d020      	beq.n	8006e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e0c:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <HAL_RCC_OscConfig+0x270>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e12:	f7fe f871 	bl	8004ef8 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e1a:	f7fe f86d 	bl	8004ef8 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e1a1      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0f0      	beq.n	8006e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e38:	4b2a      	ldr	r3, [pc, #168]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	4927      	ldr	r1, [pc, #156]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	600b      	str	r3, [r1, #0]
 8006e4c:	e015      	b.n	8006e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e4e:	4b26      	ldr	r3, [pc, #152]	; (8006ee8 <HAL_RCC_OscConfig+0x270>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e54:	f7fe f850 	bl	8004ef8 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5c:	f7fe f84c 	bl	8004ef8 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e180      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03a      	beq.n	8006efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d019      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e8e:	4b17      	ldr	r3, [pc, #92]	; (8006eec <HAL_RCC_OscConfig+0x274>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e94:	f7fe f830 	bl	8004ef8 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e9c:	f7fe f82c 	bl	8004ef8 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e160      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f000 fad8 	bl	8007470 <RCC_Delay>
 8006ec0:	e01c      	b.n	8006efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_RCC_OscConfig+0x274>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec8:	f7fe f816 	bl	8004ef8 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ece:	e00f      	b.n	8006ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ed0:	f7fe f812 	bl	8004ef8 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d908      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e146      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
 8006ee2:	bf00      	nop
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	42420000 	.word	0x42420000
 8006eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef0:	4b92      	ldr	r3, [pc, #584]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e9      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80a6 	beq.w	8007056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f0e:	4b8b      	ldr	r3, [pc, #556]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10d      	bne.n	8006f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f1a:	4b88      	ldr	r3, [pc, #544]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	4a87      	ldr	r2, [pc, #540]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f24:	61d3      	str	r3, [r2, #28]
 8006f26:	4b85      	ldr	r3, [pc, #532]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	60bb      	str	r3, [r7, #8]
 8006f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f32:	2301      	movs	r3, #1
 8006f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f36:	4b82      	ldr	r3, [pc, #520]	; (8007140 <HAL_RCC_OscConfig+0x4c8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d118      	bne.n	8006f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f42:	4b7f      	ldr	r3, [pc, #508]	; (8007140 <HAL_RCC_OscConfig+0x4c8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a7e      	ldr	r2, [pc, #504]	; (8007140 <HAL_RCC_OscConfig+0x4c8>)
 8006f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f4e:	f7fd ffd3 	bl	8004ef8 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f56:	f7fd ffcf 	bl	8004ef8 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b64      	cmp	r3, #100	; 0x64
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e103      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f68:	4b75      	ldr	r3, [pc, #468]	; (8007140 <HAL_RCC_OscConfig+0x4c8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCC_OscConfig+0x312>
 8006f7c:	4b6f      	ldr	r3, [pc, #444]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	4a6e      	ldr	r2, [pc, #440]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	6213      	str	r3, [r2, #32]
 8006f88:	e02d      	b.n	8006fe6 <HAL_RCC_OscConfig+0x36e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x334>
 8006f92:	4b6a      	ldr	r3, [pc, #424]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	4a69      	ldr	r2, [pc, #420]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	6213      	str	r3, [r2, #32]
 8006f9e:	4b67      	ldr	r3, [pc, #412]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	4a66      	ldr	r2, [pc, #408]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	f023 0304 	bic.w	r3, r3, #4
 8006fa8:	6213      	str	r3, [r2, #32]
 8006faa:	e01c      	b.n	8006fe6 <HAL_RCC_OscConfig+0x36e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d10c      	bne.n	8006fce <HAL_RCC_OscConfig+0x356>
 8006fb4:	4b61      	ldr	r3, [pc, #388]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	4a60      	ldr	r2, [pc, #384]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fba:	f043 0304 	orr.w	r3, r3, #4
 8006fbe:	6213      	str	r3, [r2, #32]
 8006fc0:	4b5e      	ldr	r3, [pc, #376]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	4a5d      	ldr	r2, [pc, #372]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	6213      	str	r3, [r2, #32]
 8006fcc:	e00b      	b.n	8006fe6 <HAL_RCC_OscConfig+0x36e>
 8006fce:	4b5b      	ldr	r3, [pc, #364]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	4a5a      	ldr	r2, [pc, #360]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	6213      	str	r3, [r2, #32]
 8006fda:	4b58      	ldr	r3, [pc, #352]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	4a57      	ldr	r2, [pc, #348]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	f023 0304 	bic.w	r3, r3, #4
 8006fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d015      	beq.n	800701a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fee:	f7fd ff83 	bl	8004ef8 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff4:	e00a      	b.n	800700c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff6:	f7fd ff7f 	bl	8004ef8 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	f241 3288 	movw	r2, #5000	; 0x1388
 8007004:	4293      	cmp	r3, r2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e0b1      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700c:	4b4b      	ldr	r3, [pc, #300]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0ee      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x37e>
 8007018:	e014      	b.n	8007044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800701a:	f7fd ff6d 	bl	8004ef8 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007020:	e00a      	b.n	8007038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007022:	f7fd ff69 	bl	8004ef8 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e09b      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007038:	4b40      	ldr	r3, [pc, #256]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1ee      	bne.n	8007022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d105      	bne.n	8007056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800704a:	4b3c      	ldr	r3, [pc, #240]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4a3b      	ldr	r2, [pc, #236]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8007050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8087 	beq.w	800716e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 030c 	and.w	r3, r3, #12
 8007068:	2b08      	cmp	r3, #8
 800706a:	d061      	beq.n	8007130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d146      	bne.n	8007102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007074:	4b33      	ldr	r3, [pc, #204]	; (8007144 <HAL_RCC_OscConfig+0x4cc>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707a:	f7fd ff3d 	bl	8004ef8 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007082:	f7fd ff39 	bl	8004ef8 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e06d      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007094:	4b29      	ldr	r3, [pc, #164]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f0      	bne.n	8007082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d108      	bne.n	80070bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070aa:	4b24      	ldr	r3, [pc, #144]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4921      	ldr	r1, [pc, #132]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070bc:	4b1f      	ldr	r3, [pc, #124]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a19      	ldr	r1, [r3, #32]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	430b      	orrs	r3, r1
 80070ce:	491b      	ldr	r1, [pc, #108]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d4:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <HAL_RCC_OscConfig+0x4cc>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070da:	f7fd ff0d 	bl	8004ef8 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e2:	f7fd ff09 	bl	8004ef8 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e03d      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070f4:	4b11      	ldr	r3, [pc, #68]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <HAL_RCC_OscConfig+0x46a>
 8007100:	e035      	b.n	800716e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <HAL_RCC_OscConfig+0x4cc>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007108:	f7fd fef6 	bl	8004ef8 <HAL_GetTick>
 800710c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007110:	f7fd fef2 	bl	8004ef8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e026      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_RCC_OscConfig+0x4c4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f0      	bne.n	8007110 <HAL_RCC_OscConfig+0x498>
 800712e:	e01e      	b.n	800716e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d107      	bne.n	8007148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e019      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
 800713c:	40021000 	.word	0x40021000
 8007140:	40007000 	.word	0x40007000
 8007144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_RCC_OscConfig+0x500>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	429a      	cmp	r2, r3
 800715a:	d106      	bne.n	800716a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007166:	429a      	cmp	r2, r3
 8007168:	d001      	beq.n	800716e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40021000 	.word	0x40021000

0800717c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0d0      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007190:	4b6a      	ldr	r3, [pc, #424]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d910      	bls.n	80071c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719e:	4b67      	ldr	r3, [pc, #412]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f023 0207 	bic.w	r2, r3, #7
 80071a6:	4965      	ldr	r1, [pc, #404]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ae:	4b63      	ldr	r3, [pc, #396]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e0b8      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d020      	beq.n	800720e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071d8:	4b59      	ldr	r3, [pc, #356]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a58      	ldr	r2, [pc, #352]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80071de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071f0:	4b53      	ldr	r3, [pc, #332]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4a52      	ldr	r2, [pc, #328]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80071f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80071fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071fc:	4b50      	ldr	r3, [pc, #320]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	494d      	ldr	r1, [pc, #308]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 800720a:	4313      	orrs	r3, r2
 800720c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d040      	beq.n	800729c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d107      	bne.n	8007232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007222:	4b47      	ldr	r3, [pc, #284]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d115      	bne.n	800725a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e07f      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d107      	bne.n	800724a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800723a:	4b41      	ldr	r3, [pc, #260]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e073      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800724a:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e06b      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800725a:	4b39      	ldr	r3, [pc, #228]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f023 0203 	bic.w	r2, r3, #3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4936      	ldr	r1, [pc, #216]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800726c:	f7fd fe44 	bl	8004ef8 <HAL_GetTick>
 8007270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007272:	e00a      	b.n	800728a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007274:	f7fd fe40 	bl	8004ef8 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007282:	4293      	cmp	r3, r2
 8007284:	d901      	bls.n	800728a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e053      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800728a:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f003 020c 	and.w	r2, r3, #12
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	429a      	cmp	r2, r3
 800729a:	d1eb      	bne.n	8007274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800729c:	4b27      	ldr	r3, [pc, #156]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d210      	bcs.n	80072cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 0207 	bic.w	r2, r3, #7
 80072b2:	4922      	ldr	r1, [pc, #136]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ba:	4b20      	ldr	r3, [pc, #128]	; (800733c <HAL_RCC_ClockConfig+0x1c0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d001      	beq.n	80072cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e032      	b.n	8007332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072d8:	4b19      	ldr	r3, [pc, #100]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	4916      	ldr	r1, [pc, #88]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072f6:	4b12      	ldr	r3, [pc, #72]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	490e      	ldr	r1, [pc, #56]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 8007306:	4313      	orrs	r3, r2
 8007308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800730a:	f000 f821 	bl	8007350 <HAL_RCC_GetSysClockFreq>
 800730e:	4602      	mov	r2, r0
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_RCC_ClockConfig+0x1c4>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	091b      	lsrs	r3, r3, #4
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	490a      	ldr	r1, [pc, #40]	; (8007344 <HAL_RCC_ClockConfig+0x1c8>)
 800731c:	5ccb      	ldrb	r3, [r1, r3]
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	4a09      	ldr	r2, [pc, #36]	; (8007348 <HAL_RCC_ClockConfig+0x1cc>)
 8007324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <HAL_RCC_ClockConfig+0x1d0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd fda2 	bl	8004e74 <HAL_InitTick>

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40022000 	.word	0x40022000
 8007340:	40021000 	.word	0x40021000
 8007344:	0800cae8 	.word	0x0800cae8
 8007348:	20000038 	.word	0x20000038
 800734c:	200000b0 	.word	0x200000b0

08007350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007350:	b490      	push	{r4, r7}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007356:	4b29      	ldr	r3, [pc, #164]	; (80073fc <HAL_RCC_GetSysClockFreq+0xac>)
 8007358:	1d3c      	adds	r4, r7, #4
 800735a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800735c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007360:	f240 2301 	movw	r3, #513	; 0x201
 8007364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800737a:	4b21      	ldr	r3, [pc, #132]	; (8007400 <HAL_RCC_GetSysClockFreq+0xb0>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b04      	cmp	r3, #4
 8007388:	d002      	beq.n	8007390 <HAL_RCC_GetSysClockFreq+0x40>
 800738a:	2b08      	cmp	r3, #8
 800738c:	d003      	beq.n	8007396 <HAL_RCC_GetSysClockFreq+0x46>
 800738e:	e02b      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007392:	623b      	str	r3, [r7, #32]
      break;
 8007394:	e02b      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	0c9b      	lsrs	r3, r3, #18
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	3328      	adds	r3, #40	; 0x28
 80073a0:	443b      	add	r3, r7
 80073a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80073a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d012      	beq.n	80073d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <HAL_RCC_GetSysClockFreq+0xb0>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	0c5b      	lsrs	r3, r3, #17
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	3328      	adds	r3, #40	; 0x28
 80073be:	443b      	add	r3, r7
 80073c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80073c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4a0e      	ldr	r2, [pc, #56]	; (8007404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073ca:	fb03 f202 	mul.w	r2, r3, r2
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
 80073d6:	e004      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	623b      	str	r3, [r7, #32]
      break;
 80073e6:	e002      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073ea:	623b      	str	r3, [r7, #32]
      break;
 80073ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3728      	adds	r7, #40	; 0x28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc90      	pop	{r4, r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	0800cad8 	.word	0x0800cad8
 8007400:	40021000 	.word	0x40021000
 8007404:	007a1200 	.word	0x007a1200
 8007408:	003d0900 	.word	0x003d0900

0800740c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <HAL_RCC_GetHCLKFreq+0x10>)
 8007412:	681b      	ldr	r3, [r3, #0]
}
 8007414:	4618      	mov	r0, r3
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr
 800741c:	20000038 	.word	0x20000038

08007420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007424:	f7ff fff2 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8007428:	4602      	mov	r2, r0
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	4903      	ldr	r1, [pc, #12]	; (8007444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007436:	5ccb      	ldrb	r3, [r1, r3]
 8007438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40021000 	.word	0x40021000
 8007444:	0800caf8 	.word	0x0800caf8

08007448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800744c:	f7ff ffde 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	0adb      	lsrs	r3, r3, #11
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	4903      	ldr	r1, [pc, #12]	; (800746c <HAL_RCC_GetPCLK2Freq+0x24>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40021000 	.word	0x40021000
 800746c:	0800caf8 	.word	0x0800caf8

08007470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <RCC_Delay+0x34>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <RCC_Delay+0x38>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0a5b      	lsrs	r3, r3, #9
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800748c:	bf00      	nop
  }
  while (Delay --);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	60fa      	str	r2, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f9      	bne.n	800748c <RCC_Delay+0x1c>
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	20000038 	.word	0x20000038
 80074a8:	10624dd3 	.word	0x10624dd3

080074ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d07d      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074cc:	4b4f      	ldr	r3, [pc, #316]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074d8:	4b4c      	ldr	r3, [pc, #304]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	4a4b      	ldr	r2, [pc, #300]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e2:	61d3      	str	r3, [r2, #28]
 80074e4:	4b49      	ldr	r3, [pc, #292]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074f0:	2301      	movs	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f4:	4b46      	ldr	r3, [pc, #280]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d118      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007500:	4b43      	ldr	r3, [pc, #268]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a42      	ldr	r2, [pc, #264]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800750c:	f7fd fcf4 	bl	8004ef8 <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007512:	e008      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007514:	f7fd fcf0 	bl	8004ef8 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e06d      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007526:	4b3a      	ldr	r3, [pc, #232]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d02e      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	429a      	cmp	r2, r3
 800754e:	d027      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007550:	4b2e      	ldr	r3, [pc, #184]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007560:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007566:	4a29      	ldr	r2, [pc, #164]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d014      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007576:	f7fd fcbf 	bl	8004ef8 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757c:	e00a      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757e:	f7fd fcbb 	bl	8004ef8 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f241 3288 	movw	r2, #5000	; 0x1388
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e036      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007594:	4b1d      	ldr	r3, [pc, #116]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0ee      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a0:	4b1a      	ldr	r3, [pc, #104]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4917      	ldr	r1, [pc, #92]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d105      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4a13      	ldr	r2, [pc, #76]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075d0:	4b0e      	ldr	r3, [pc, #56]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	490b      	ldr	r1, [pc, #44]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075ee:	4b07      	ldr	r3, [pc, #28]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4904      	ldr	r1, [pc, #16]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	40021000 	.word	0x40021000
 8007610:	40007000 	.word	0x40007000
 8007614:	42420440 	.word	0x42420440

08007618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e076      	b.n	8007718 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d108      	bne.n	8007644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763a:	d009      	beq.n	8007650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	61da      	str	r2, [r3, #28]
 8007642:	e005      	b.n	8007650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fc fe44 	bl	80042f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	ea42 0103 	orr.w	r1, r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	0c1a      	lsrs	r2, r3, #16
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f002 0204 	and.w	r2, r2, #4
 80076f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69da      	ldr	r2, [r3, #28]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e041      	b.n	80077b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fc fe82 	bl	8004450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f000 ffa6 	bl	80086b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d001      	beq.n	80077d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e032      	b.n	800783e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a18      	ldr	r2, [pc, #96]	; (8007848 <HAL_TIM_Base_Start+0x88>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_TIM_Base_Start+0x48>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d009      	beq.n	8007808 <HAL_TIM_Base_Start+0x48>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a14      	ldr	r2, [pc, #80]	; (800784c <HAL_TIM_Base_Start+0x8c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIM_Base_Start+0x48>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a13      	ldr	r2, [pc, #76]	; (8007850 <HAL_TIM_Base_Start+0x90>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d111      	bne.n	800782c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d010      	beq.n	800783c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0201 	orr.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782a:	e007      	b.n	800783c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800

08007854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e041      	b.n	80078ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f839 	bl	80078f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f000 ff0c 	bl	80086b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start+0x24>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e022      	b.n	800796e <HAL_TIM_PWM_Start+0x6a>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b04      	cmp	r3, #4
 800792c:	d109      	bne.n	8007942 <HAL_TIM_PWM_Start+0x3e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	bf14      	ite	ne
 800793a:	2301      	movne	r3, #1
 800793c:	2300      	moveq	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	e015      	b.n	800796e <HAL_TIM_PWM_Start+0x6a>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b08      	cmp	r3, #8
 8007946:	d109      	bne.n	800795c <HAL_TIM_PWM_Start+0x58>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	bf14      	ite	ne
 8007954:	2301      	movne	r3, #1
 8007956:	2300      	moveq	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e008      	b.n	800796e <HAL_TIM_PWM_Start+0x6a>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	bf14      	ite	ne
 8007968:	2301      	movne	r3, #1
 800796a:	2300      	moveq	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e05e      	b.n	8007a34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <HAL_TIM_PWM_Start+0x82>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007984:	e013      	b.n	80079ae <HAL_TIM_PWM_Start+0xaa>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d104      	bne.n	8007996 <HAL_TIM_PWM_Start+0x92>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007994:	e00b      	b.n	80079ae <HAL_TIM_PWM_Start+0xaa>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_PWM_Start+0xa2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a4:	e003      	b.n	80079ae <HAL_TIM_PWM_Start+0xaa>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2201      	movs	r2, #1
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 fa07 	bl	8008dca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <HAL_TIM_PWM_Start+0x138>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d107      	bne.n	80079d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a18      	ldr	r2, [pc, #96]	; (8007a3c <HAL_TIM_PWM_Start+0x138>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00e      	beq.n	80079fe <HAL_TIM_PWM_Start+0xfa>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e8:	d009      	beq.n	80079fe <HAL_TIM_PWM_Start+0xfa>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a14      	ldr	r2, [pc, #80]	; (8007a40 <HAL_TIM_PWM_Start+0x13c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_TIM_PWM_Start+0xfa>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <HAL_TIM_PWM_Start+0x140>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d111      	bne.n	8007a22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b06      	cmp	r3, #6
 8007a0e:	d010      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a20:	e007      	b.n	8007a32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800

08007a48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e041      	b.n	8007ade <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f839 	bl	8007ae6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f000 fe12 	bl	80086b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_IC_Start_IT+0x1a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	e013      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0x42>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_IC_Start_IT+0x2a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	e00b      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0x42>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_IC_Start_IT+0x3a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	e003      	b.n	8007b3a <HAL_TIM_IC_Start_IT+0x42>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <HAL_TIM_IC_Start_IT+0x54>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e013      	b.n	8007b74 <HAL_TIM_IC_Start_IT+0x7c>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d104      	bne.n	8007b5c <HAL_TIM_IC_Start_IT+0x64>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e00b      	b.n	8007b74 <HAL_TIM_IC_Start_IT+0x7c>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d104      	bne.n	8007b6c <HAL_TIM_IC_Start_IT+0x74>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e003      	b.n	8007b74 <HAL_TIM_IC_Start_IT+0x7c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d102      	bne.n	8007b82 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d001      	beq.n	8007b86 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0b3      	b.n	8007cee <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_IC_Start_IT+0x9e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b94:	e013      	b.n	8007bbe <HAL_TIM_IC_Start_IT+0xc6>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_IC_Start_IT+0xae>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba4:	e00b      	b.n	8007bbe <HAL_TIM_IC_Start_IT+0xc6>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d104      	bne.n	8007bb6 <HAL_TIM_IC_Start_IT+0xbe>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb4:	e003      	b.n	8007bbe <HAL_TIM_IC_Start_IT+0xc6>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_IC_Start_IT+0xd6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	e013      	b.n	8007bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_IC_Start_IT+0xe6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bdc:	e00b      	b.n	8007bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_IC_Start_IT+0xf6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bec:	e003      	b.n	8007bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b0c      	cmp	r3, #12
 8007bfa:	d841      	bhi.n	8007c80 <HAL_TIM_IC_Start_IT+0x188>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <HAL_TIM_IC_Start_IT+0x10c>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c81 	.word	0x08007c81
 8007c0c:	08007c81 	.word	0x08007c81
 8007c10:	08007c81 	.word	0x08007c81
 8007c14:	08007c4b 	.word	0x08007c4b
 8007c18:	08007c81 	.word	0x08007c81
 8007c1c:	08007c81 	.word	0x08007c81
 8007c20:	08007c81 	.word	0x08007c81
 8007c24:	08007c5d 	.word	0x08007c5d
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c81 	.word	0x08007c81
 8007c30:	08007c81 	.word	0x08007c81
 8007c34:	08007c6f 	.word	0x08007c6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0202 	orr.w	r2, r2, #2
 8007c46:	60da      	str	r2, [r3, #12]
      break;
 8007c48:	e01b      	b.n	8007c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0204 	orr.w	r2, r2, #4
 8007c58:	60da      	str	r2, [r3, #12]
      break;
 8007c5a:	e012      	b.n	8007c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0208 	orr.w	r2, r2, #8
 8007c6a:	60da      	str	r2, [r3, #12]
      break;
 8007c6c:	e009      	b.n	8007c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0210 	orr.w	r2, r2, #16
 8007c7c:	60da      	str	r2, [r3, #12]
      break;
 8007c7e:	e000      	b.n	8007c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007c80:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2201      	movs	r2, #1
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 f89d 	bl	8008dca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <HAL_TIM_IC_Start_IT+0x200>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca2:	d009      	beq.n	8007cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <HAL_TIM_IC_Start_IT+0x204>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <HAL_TIM_IC_Start_IT+0x208>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d111      	bne.n	8007cdc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b06      	cmp	r3, #6
 8007cc8:	d010      	beq.n	8007cec <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	e007      	b.n	8007cec <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800

08007d04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e093      	b.n	8007e40 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fc fb2f 	bl	8004390 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d48:	f023 0307 	bic.w	r3, r3, #7
 8007d4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f000 fca9 	bl	80086b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	4313      	orrs	r3, r2
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007da4:	f023 030c 	bic.w	r3, r3, #12
 8007da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	011a      	lsls	r2, r3, #4
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	031b      	lsls	r3, r3, #12
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	4313      	orrs	r3, r2
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d110      	bne.n	8007e9a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e7e:	7b7b      	ldrb	r3, [r7, #13]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e089      	b.n	8007f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e98:	e031      	b.n	8007efe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d110      	bne.n	8007ec2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d102      	bne.n	8007eac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ea6:	7b3b      	ldrb	r3, [r7, #12]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d001      	beq.n	8007eb0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e075      	b.n	8007f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ec0:	e01d      	b.n	8007efe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d108      	bne.n	8007eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d105      	bne.n	8007eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ece:	7b7b      	ldrb	r3, [r7, #13]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d102      	bne.n	8007eda <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed4:	7b3b      	ldrb	r3, [r7, #12]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d001      	beq.n	8007ede <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e05e      	b.n	8007f9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <HAL_TIM_Encoder_Start_IT+0xc4>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d010      	beq.n	8007f2c <HAL_TIM_Encoder_Start_IT+0xe4>
 8007f0a:	e01f      	b.n	8007f4c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2201      	movs	r2, #1
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ff58 	bl	8008dca <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0202 	orr.w	r2, r2, #2
 8007f28:	60da      	str	r2, [r3, #12]
      break;
 8007f2a:	e02e      	b.n	8007f8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	2104      	movs	r1, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 ff48 	bl	8008dca <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0204 	orr.w	r2, r2, #4
 8007f48:	60da      	str	r2, [r3, #12]
      break;
 8007f4a:	e01e      	b.n	8007f8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2201      	movs	r2, #1
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 ff38 	bl	8008dca <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	2104      	movs	r1, #4
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 ff31 	bl	8008dca <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0202 	orr.w	r2, r2, #2
 8007f76:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0204 	orr.w	r2, r2, #4
 8007f86:	60da      	str	r2, [r3, #12]
      break;
 8007f88:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d122      	bne.n	8008000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d11b      	bne.n	8008000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0202 	mvn.w	r2, #2
 8007fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fc fcd2 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8007fec:	e005      	b.n	8007ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb43 	bl	800867a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fb49 	bl	800868c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b04      	cmp	r3, #4
 800800c:	d122      	bne.n	8008054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d11b      	bne.n	8008054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0204 	mvn.w	r2, #4
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fc fca8 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fb19 	bl	800867a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb1f 	bl	800868c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b08      	cmp	r3, #8
 8008060:	d122      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b08      	cmp	r3, #8
 800806e:	d11b      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f06f 0208 	mvn.w	r2, #8
 8008078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2204      	movs	r2, #4
 800807e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fc fc7e 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8008094:	e005      	b.n	80080a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 faef 	bl	800867a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 faf5 	bl	800868c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d122      	bne.n	80080fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d11b      	bne.n	80080fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f06f 0210 	mvn.w	r2, #16
 80080cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2208      	movs	r2, #8
 80080d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fc fc54 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 80080e8:	e005      	b.n	80080f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fac5 	bl	800867a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 facb 	bl	800868c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10e      	bne.n	8008128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b01      	cmp	r3, #1
 8008116:	d107      	bne.n	8008128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0201 	mvn.w	r2, #1
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 faa0 	bl	8008668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d10e      	bne.n	8008154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d107      	bne.n	8008154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800814c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fec7 	bl	8008ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d10e      	bne.n	8008180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d107      	bne.n	8008180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa8f 	bl	800869e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b20      	cmp	r3, #32
 800818c:	d10e      	bne.n	80081ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b20      	cmp	r3, #32
 800819a:	d107      	bne.n	80081ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0220 	mvn.w	r2, #32
 80081a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fe92 	bl	8008ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_IC_ConfigChannel+0x1a>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e082      	b.n	80082d4 <HAL_TIM_IC_ConfigChannel+0x120>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d11b      	bne.n	8008214 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f000 fc4a 	bl	8008a84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 020c 	bic.w	r2, r2, #12
 80081fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6999      	ldr	r1, [r3, #24]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	619a      	str	r2, [r3, #24]
 8008212:	e05a      	b.n	80082ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b04      	cmp	r3, #4
 8008218:	d11c      	bne.n	8008254 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f000 fcb3 	bl	8008b94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699a      	ldr	r2, [r3, #24]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800823c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6999      	ldr	r1, [r3, #24]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	021a      	lsls	r2, r3, #8
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	619a      	str	r2, [r3, #24]
 8008252:	e03a      	b.n	80082ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d11b      	bne.n	8008292 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f000 fcfe 	bl	8008c6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 020c 	bic.w	r2, r2, #12
 800827c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69d9      	ldr	r1, [r3, #28]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	61da      	str	r2, [r3, #28]
 8008290:	e01b      	b.n	80082ca <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6819      	ldr	r1, [r3, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f000 fd1d 	bl	8008ce0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69da      	ldr	r2, [r3, #28]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69d9      	ldr	r1, [r3, #28]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	021a      	lsls	r2, r3, #8
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e0ac      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x174>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b0c      	cmp	r3, #12
 8008302:	f200 809f 	bhi.w	8008444 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008341 	.word	0x08008341
 8008310:	08008445 	.word	0x08008445
 8008314:	08008445 	.word	0x08008445
 8008318:	08008445 	.word	0x08008445
 800831c:	08008381 	.word	0x08008381
 8008320:	08008445 	.word	0x08008445
 8008324:	08008445 	.word	0x08008445
 8008328:	08008445 	.word	0x08008445
 800832c:	080083c3 	.word	0x080083c3
 8008330:	08008445 	.word	0x08008445
 8008334:	08008445 	.word	0x08008445
 8008338:	08008445 	.word	0x08008445
 800833c:	08008403 	.word	0x08008403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fa14 	bl	8008774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0208 	orr.w	r2, r2, #8
 800835a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0204 	bic.w	r2, r2, #4
 800836a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6999      	ldr	r1, [r3, #24]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	619a      	str	r2, [r3, #24]
      break;
 800837e:	e062      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fa5a 	bl	8008840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6999      	ldr	r1, [r3, #24]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	021a      	lsls	r2, r3, #8
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	619a      	str	r2, [r3, #24]
      break;
 80083c0:	e041      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 faa3 	bl	8008914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0208 	orr.w	r2, r2, #8
 80083dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0204 	bic.w	r2, r2, #4
 80083ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69d9      	ldr	r1, [r3, #28]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	61da      	str	r2, [r3, #28]
      break;
 8008400:	e021      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 faed 	bl	80089e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800841c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69d9      	ldr	r1, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	021a      	lsls	r2, r3, #8
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	61da      	str	r2, [r3, #28]
      break;
 8008442:	e000      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e0b3      	b.n	80085d8 <HAL_TIM_ConfigClockSource+0x180>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800848e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008496:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0xd0>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	f000 8085 	beq.w	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c0:	2b70      	cmp	r3, #112	; 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xa2>
 80084c4:	2b70      	cmp	r3, #112	; 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084c8:	2b60      	cmp	r3, #96	; 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x116>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d0:	2b50      	cmp	r3, #80	; 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0xf6>
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x136>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f000 fc3f 	bl	8008d8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800851c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04e      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f000 fc28 	bl	8008d8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 faec 	bl	8008b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	; 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fbf6 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 800856c:	e02b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	461a      	mov	r2, r3
 800857c:	f000 fb46 	bl	8008c0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	; 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fbe6 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 800858c:	e01b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	461a      	mov	r2, r3
 800859c:	f000 facc 	bl	8008b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	; 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fbd6 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00b      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 fbcd 	bl	8008d58 <TIM_ITRx_SetConfig>
        break;
 80085be:	e002      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c0:	bf00      	nop
 80085c2:	e000      	b.n	80085c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80085c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b0c      	cmp	r3, #12
 80085f2:	d831      	bhi.n	8008658 <HAL_TIM_ReadCapturedValue+0x78>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008631 	.word	0x08008631
 8008600:	08008659 	.word	0x08008659
 8008604:	08008659 	.word	0x08008659
 8008608:	08008659 	.word	0x08008659
 800860c:	0800863b 	.word	0x0800863b
 8008610:	08008659 	.word	0x08008659
 8008614:	08008659 	.word	0x08008659
 8008618:	08008659 	.word	0x08008659
 800861c:	08008645 	.word	0x08008645
 8008620:	08008659 	.word	0x08008659
 8008624:	08008659 	.word	0x08008659
 8008628:	08008659 	.word	0x08008659
 800862c:	0800864f 	.word	0x0800864f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	60fb      	str	r3, [r7, #12]

      break;
 8008638:	e00f      	b.n	800865a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	60fb      	str	r3, [r7, #12]

      break;
 8008642:	e00a      	b.n	800865a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	60fb      	str	r3, [r7, #12]

      break;
 800864c:	e005      	b.n	800865a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	60fb      	str	r3, [r7, #12]

      break;
 8008656:	e000      	b.n	800865a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008658:	bf00      	nop
  }

  return tmpreg;
 800865a:	68fb      	ldr	r3, [r7, #12]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop

08008668 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr

0800867a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	bc80      	pop	{r7}
 800868a:	4770      	bx	lr

0800868c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a29      	ldr	r2, [pc, #164]	; (8008768 <TIM_Base_SetConfig+0xb8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00b      	beq.n	80086e0 <TIM_Base_SetConfig+0x30>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ce:	d007      	beq.n	80086e0 <TIM_Base_SetConfig+0x30>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a26      	ldr	r2, [pc, #152]	; (800876c <TIM_Base_SetConfig+0xbc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_Base_SetConfig+0x30>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a25      	ldr	r2, [pc, #148]	; (8008770 <TIM_Base_SetConfig+0xc0>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d108      	bne.n	80086f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <TIM_Base_SetConfig+0xb8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00b      	beq.n	8008712 <TIM_Base_SetConfig+0x62>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008700:	d007      	beq.n	8008712 <TIM_Base_SetConfig+0x62>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a19      	ldr	r2, [pc, #100]	; (800876c <TIM_Base_SetConfig+0xbc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d003      	beq.n	8008712 <TIM_Base_SetConfig+0x62>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a18      	ldr	r2, [pc, #96]	; (8008770 <TIM_Base_SetConfig+0xc0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d108      	bne.n	8008724 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <TIM_Base_SetConfig+0xb8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d103      	bne.n	8008758 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	615a      	str	r2, [r3, #20]
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr
 8008768:	40012c00 	.word	0x40012c00
 800876c:	40000400 	.word	0x40000400
 8008770:	40000800 	.word	0x40000800

08008774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	f023 0201 	bic.w	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f023 0302 	bic.w	r3, r3, #2
 80087bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a1c      	ldr	r2, [pc, #112]	; (800883c <TIM_OC1_SetConfig+0xc8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10c      	bne.n	80087ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f023 0308 	bic.w	r3, r3, #8
 80087d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f023 0304 	bic.w	r3, r3, #4
 80087e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a13      	ldr	r2, [pc, #76]	; (800883c <TIM_OC1_SetConfig+0xc8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d111      	bne.n	8008816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	621a      	str	r2, [r3, #32]
}
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40012c00 	.word	0x40012c00

08008840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	f023 0210 	bic.w	r2, r3, #16
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0320 	bic.w	r3, r3, #32
 800888a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <TIM_OC2_SetConfig+0xd0>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10d      	bne.n	80088bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a14      	ldr	r2, [pc, #80]	; (8008910 <TIM_OC2_SetConfig+0xd0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d113      	bne.n	80088ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr
 8008910:	40012c00 	.word	0x40012c00

08008914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800895c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_OC3_SetConfig+0xd0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d10d      	bne.n	800898e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800898c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a14      	ldr	r2, [pc, #80]	; (80089e4 <TIM_OC3_SetConfig+0xd0>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d113      	bne.n	80089be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800899c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	40012c00 	.word	0x40012c00

080089e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	031b      	lsls	r3, r3, #12
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0f      	ldr	r2, [pc, #60]	; (8008a80 <TIM_OC4_SetConfig+0x98>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d109      	bne.n	8008a5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	019b      	lsls	r3, r3, #6
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr
 8008a80:	40012c00 	.word	0x40012c00

08008a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0201 	bic.w	r2, r3, #1
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <TIM_TI1_SetConfig+0xa8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00b      	beq.n	8008aca <TIM_TI1_SetConfig+0x46>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab8:	d007      	beq.n	8008aca <TIM_TI1_SetConfig+0x46>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <TIM_TI1_SetConfig+0xac>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d003      	beq.n	8008aca <TIM_TI1_SetConfig+0x46>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <TIM_TI1_SetConfig+0xb0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d101      	bne.n	8008ace <TIM_TI1_SetConfig+0x4a>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <TIM_TI1_SetConfig+0x4c>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e003      	b.n	8008aee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f023 030a 	bic.w	r3, r3, #10
 8008b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f003 030a 	and.w	r3, r3, #10
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40000400 	.word	0x40000400
 8008b34:	40000800 	.word	0x40000800

08008b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f023 0201 	bic.w	r2, r3, #1
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f023 030a 	bic.w	r3, r3, #10
 8008b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	621a      	str	r2, [r3, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f023 0210 	bic.w	r2, r3, #16
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	031b      	lsls	r3, r3, #12
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008be6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	f023 0210 	bic.w	r2, r3, #16
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	031b      	lsls	r3, r3, #12
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	621a      	str	r2, [r3, #32]
}
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	031b      	lsls	r3, r3, #12
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	031b      	lsls	r3, r3, #12
 8008d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr

08008d58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f043 0307 	orr.w	r3, r3, #7
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	609a      	str	r2, [r3, #8]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	021a      	lsls	r2, r3, #8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	609a      	str	r2, [r3, #8]
}
 8008dc0:	bf00      	nop
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b087      	sub	sp, #28
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f003 031f 	and.w	r3, r3, #31
 8008ddc:	2201      	movs	r2, #1
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a1a      	ldr	r2, [r3, #32]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	43db      	mvns	r3, r3
 8008dec:	401a      	ands	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1a      	ldr	r2, [r3, #32]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008e02:	431a      	orrs	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	621a      	str	r2, [r3, #32]
}
 8008e08:	bf00      	nop
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
	...

08008e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d101      	bne.n	8008e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	e046      	b.n	8008eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a16      	ldr	r2, [pc, #88]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00e      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e78:	d009      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a12      	ldr	r2, [pc, #72]	; (8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a10      	ldr	r2, [pc, #64]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d10c      	bne.n	8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800

08008ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e03f      	b.n	8008f86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fb fb3a 	bl	8004594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	; 0x24
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 faa7 	bl	800948c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b08a      	sub	sp, #40	; 0x28
 8008f92:	af02      	add	r7, sp, #8
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d17c      	bne.n	80090a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_UART_Transmit+0x2c>
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e075      	b.n	80090aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_UART_Transmit+0x3e>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e06e      	b.n	80090aa <HAL_UART_Transmit+0x11c>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2221      	movs	r2, #33	; 0x21
 8008fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fe2:	f7fb ff89 	bl	8004ef8 <HAL_GetTick>
 8008fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	88fa      	ldrh	r2, [r7, #6]
 8008fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffc:	d108      	bne.n	8009010 <HAL_UART_Transmit+0x82>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	e003      	b.n	8009018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009014:	2300      	movs	r3, #0
 8009016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009020:	e02a      	b.n	8009078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2200      	movs	r2, #0
 800902a:	2180      	movs	r1, #128	; 0x80
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f93d 	bl	80092ac <UART_WaitOnFlagUntilTimeout>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e036      	b.n	80090aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	3302      	adds	r3, #2
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e007      	b.n	800906a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3301      	adds	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800907c:	b29b      	uxth	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1cf      	bne.n	8009022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2200      	movs	r2, #0
 800908a:	2140      	movs	r1, #64	; 0x40
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f90d 	bl	80092ac <UART_WaitOnFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e000      	b.n	80090aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090a8:	2302      	movs	r3, #2
  }
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4613      	mov	r3, r2
 80090be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d11d      	bne.n	8009108 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <HAL_UART_Receive_DMA+0x26>
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e016      	b.n	800910a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_UART_Receive_DMA+0x38>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e00f      	b.n	800910a <HAL_UART_Receive_DMA+0x58>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	461a      	mov	r2, r3
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f91e 	bl	8009340 <UART_Start_Receive_DMA>
 8009104:	4603      	mov	r3, r0
 8009106:	e000      	b.n	800910a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr

08009136 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d12a      	bne.n	80091be <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800917c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800919c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d107      	bne.n	80091be <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0210 	bic.w	r2, r2, #16
 80091bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d106      	bne.n	80091d4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091ca:	4619      	mov	r1, r3
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff ffb2 	bl	8009136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d2:	e002      	b.n	80091da <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7fa ffc5 	bl	8004164 <HAL_UART_RxCpltCallback>
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d108      	bne.n	800920a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4619      	mov	r1, r3
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff97 	bl	8009136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009208:	e002      	b.n	8009210 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7ff ff81 	bl	8009112 <HAL_UART_RxHalfCpltCallback>
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b21      	cmp	r3, #33	; 0x21
 800924a:	d108      	bne.n	800925e <UART_DMAError+0x46>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009258:	68b8      	ldr	r0, [r7, #8]
 800925a:	f000 f8d5 	bl	8009408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b22      	cmp	r3, #34	; 0x22
 800927e:	d108      	bne.n	8009292 <UART_DMAError+0x7a>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f000 f8d0 	bl	8009432 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	f043 0210 	orr.w	r2, r3, #16
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800929e:	68b8      	ldr	r0, [r7, #8]
 80092a0:	f7ff ff40 	bl	8009124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4613      	mov	r3, r2
 80092ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092bc:	e02c      	b.n	8009318 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c4:	d028      	beq.n	8009318 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <UART_WaitOnFlagUntilTimeout+0x30>
 80092cc:	f7fb fe14 	bl	8004ef8 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d21d      	bcs.n	8009318 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695a      	ldr	r2, [r3, #20]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0201 	bic.w	r2, r2, #1
 80092fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2220      	movs	r2, #32
 8009308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e00f      	b.n	8009338 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	4013      	ands	r3, r2
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	bf0c      	ite	eq
 8009328:	2301      	moveq	r3, #1
 800932a:	2300      	movne	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	429a      	cmp	r2, r3
 8009334:	d0c3      	beq.n	80092be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2222      	movs	r2, #34	; 0x22
 8009364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	4a23      	ldr	r2, [pc, #140]	; (80093fc <UART_Start_Receive_DMA+0xbc>)
 800936e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	4a22      	ldr	r2, [pc, #136]	; (8009400 <UART_Start_Receive_DMA+0xc0>)
 8009376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	4a21      	ldr	r2, [pc, #132]	; (8009404 <UART_Start_Receive_DMA+0xc4>)
 800937e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	2200      	movs	r2, #0
 8009386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3304      	adds	r3, #4
 8009398:	4619      	mov	r1, r3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	f7fc f952 	bl	8005648 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80093a4:	2300      	movs	r3, #0
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68da      	ldr	r2, [r3, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695a      	ldr	r2, [r3, #20]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f042 0201 	orr.w	r2, r2, #1
 80093e0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	695a      	ldr	r2, [r3, #20]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	0800914d 	.word	0x0800914d
 8009400:	080091e3 	.word	0x080091e3
 8009404:	08009219 	.word	0x08009219

08009408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800941e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	bc80      	pop	{r7}
 8009430:	4770      	bx	lr

08009432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009432:	b480      	push	{r7}
 8009434:	b083      	sub	sp, #12
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009448:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	695a      	ldr	r2, [r3, #20]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0201 	bic.w	r2, r2, #1
 8009458:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945e:	2b01      	cmp	r3, #1
 8009460:	d107      	bne.n	8009472 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0210 	bic.w	r2, r2, #16
 8009470:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
	...

0800948c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80094c6:	f023 030c 	bic.w	r3, r3, #12
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	6812      	ldr	r2, [r2, #0]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	430b      	orrs	r3, r1
 80094d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a2c      	ldr	r2, [pc, #176]	; (80095a0 <UART_SetConfig+0x114>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d103      	bne.n	80094fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80094f4:	f7fd ffa8 	bl	8007448 <HAL_RCC_GetPCLK2Freq>
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	e002      	b.n	8009502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80094fc:	f7fd ff90 	bl	8007420 <HAL_RCC_GetPCLK1Freq>
 8009500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009a      	lsls	r2, r3, #2
 800950c:	441a      	add	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	fbb2 f3f3 	udiv	r3, r2, r3
 8009518:	4a22      	ldr	r2, [pc, #136]	; (80095a4 <UART_SetConfig+0x118>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	0119      	lsls	r1, r3, #4
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009a      	lsls	r2, r3, #2
 800952c:	441a      	add	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	fbb2 f2f3 	udiv	r2, r2, r3
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <UART_SetConfig+0x118>)
 800953a:	fba3 0302 	umull	r0, r3, r3, r2
 800953e:	095b      	lsrs	r3, r3, #5
 8009540:	2064      	movs	r0, #100	; 0x64
 8009542:	fb00 f303 	mul.w	r3, r0, r3
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	3332      	adds	r3, #50	; 0x32
 800954c:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <UART_SetConfig+0x118>)
 800954e:	fba2 2303 	umull	r2, r3, r2, r3
 8009552:	095b      	lsrs	r3, r3, #5
 8009554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009558:	4419      	add	r1, r3
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009a      	lsls	r2, r3, #2
 8009564:	441a      	add	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <UART_SetConfig+0x118>)
 8009572:	fba3 0302 	umull	r0, r3, r3, r2
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	2064      	movs	r0, #100	; 0x64
 800957a:	fb00 f303 	mul.w	r3, r0, r3
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	3332      	adds	r3, #50	; 0x32
 8009584:	4a07      	ldr	r2, [pc, #28]	; (80095a4 <UART_SetConfig+0x118>)
 8009586:	fba2 2303 	umull	r2, r3, r2, r3
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	440a      	add	r2, r1
 8009596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40013800 	.word	0x40013800
 80095a4:	51eb851f 	.word	0x51eb851f

080095a8 <__errno>:
 80095a8:	4b01      	ldr	r3, [pc, #4]	; (80095b0 <__errno+0x8>)
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	200000b8 	.word	0x200000b8

080095b4 <__libc_init_array>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	2600      	movs	r6, #0
 80095b8:	4d0c      	ldr	r5, [pc, #48]	; (80095ec <__libc_init_array+0x38>)
 80095ba:	4c0d      	ldr	r4, [pc, #52]	; (80095f0 <__libc_init_array+0x3c>)
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	42a6      	cmp	r6, r4
 80095c2:	d109      	bne.n	80095d8 <__libc_init_array+0x24>
 80095c4:	f003 fa68 	bl	800ca98 <_init>
 80095c8:	2600      	movs	r6, #0
 80095ca:	4d0a      	ldr	r5, [pc, #40]	; (80095f4 <__libc_init_array+0x40>)
 80095cc:	4c0a      	ldr	r4, [pc, #40]	; (80095f8 <__libc_init_array+0x44>)
 80095ce:	1b64      	subs	r4, r4, r5
 80095d0:	10a4      	asrs	r4, r4, #2
 80095d2:	42a6      	cmp	r6, r4
 80095d4:	d105      	bne.n	80095e2 <__libc_init_array+0x2e>
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095dc:	4798      	blx	r3
 80095de:	3601      	adds	r6, #1
 80095e0:	e7ee      	b.n	80095c0 <__libc_init_array+0xc>
 80095e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e6:	4798      	blx	r3
 80095e8:	3601      	adds	r6, #1
 80095ea:	e7f2      	b.n	80095d2 <__libc_init_array+0x1e>
 80095ec:	0800cf14 	.word	0x0800cf14
 80095f0:	0800cf14 	.word	0x0800cf14
 80095f4:	0800cf14 	.word	0x0800cf14
 80095f8:	0800cf18 	.word	0x0800cf18

080095fc <memset>:
 80095fc:	4603      	mov	r3, r0
 80095fe:	4402      	add	r2, r0
 8009600:	4293      	cmp	r3, r2
 8009602:	d100      	bne.n	8009606 <memset+0xa>
 8009604:	4770      	bx	lr
 8009606:	f803 1b01 	strb.w	r1, [r3], #1
 800960a:	e7f9      	b.n	8009600 <memset+0x4>

0800960c <__cvt>:
 800960c:	2b00      	cmp	r3, #0
 800960e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009612:	461f      	mov	r7, r3
 8009614:	bfbb      	ittet	lt
 8009616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800961a:	461f      	movlt	r7, r3
 800961c:	2300      	movge	r3, #0
 800961e:	232d      	movlt	r3, #45	; 0x2d
 8009620:	b088      	sub	sp, #32
 8009622:	4614      	mov	r4, r2
 8009624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009626:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009628:	7013      	strb	r3, [r2, #0]
 800962a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800962c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009630:	f023 0820 	bic.w	r8, r3, #32
 8009634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009638:	d005      	beq.n	8009646 <__cvt+0x3a>
 800963a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800963e:	d100      	bne.n	8009642 <__cvt+0x36>
 8009640:	3501      	adds	r5, #1
 8009642:	2302      	movs	r3, #2
 8009644:	e000      	b.n	8009648 <__cvt+0x3c>
 8009646:	2303      	movs	r3, #3
 8009648:	aa07      	add	r2, sp, #28
 800964a:	9204      	str	r2, [sp, #16]
 800964c:	aa06      	add	r2, sp, #24
 800964e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009652:	e9cd 3500 	strd	r3, r5, [sp]
 8009656:	4622      	mov	r2, r4
 8009658:	463b      	mov	r3, r7
 800965a:	f000 fce5 	bl	800a028 <_dtoa_r>
 800965e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009662:	4606      	mov	r6, r0
 8009664:	d102      	bne.n	800966c <__cvt+0x60>
 8009666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009668:	07db      	lsls	r3, r3, #31
 800966a:	d522      	bpl.n	80096b2 <__cvt+0xa6>
 800966c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009670:	eb06 0905 	add.w	r9, r6, r5
 8009674:	d110      	bne.n	8009698 <__cvt+0x8c>
 8009676:	7833      	ldrb	r3, [r6, #0]
 8009678:	2b30      	cmp	r3, #48	; 0x30
 800967a:	d10a      	bne.n	8009692 <__cvt+0x86>
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4620      	mov	r0, r4
 8009682:	4639      	mov	r1, r7
 8009684:	f7f7 f99a 	bl	80009bc <__aeabi_dcmpeq>
 8009688:	b918      	cbnz	r0, 8009692 <__cvt+0x86>
 800968a:	f1c5 0501 	rsb	r5, r5, #1
 800968e:	f8ca 5000 	str.w	r5, [sl]
 8009692:	f8da 3000 	ldr.w	r3, [sl]
 8009696:	4499      	add	r9, r3
 8009698:	2200      	movs	r2, #0
 800969a:	2300      	movs	r3, #0
 800969c:	4620      	mov	r0, r4
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f7 f98c 	bl	80009bc <__aeabi_dcmpeq>
 80096a4:	b108      	cbz	r0, 80096aa <__cvt+0x9e>
 80096a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80096aa:	2230      	movs	r2, #48	; 0x30
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	454b      	cmp	r3, r9
 80096b0:	d307      	bcc.n	80096c2 <__cvt+0xb6>
 80096b2:	4630      	mov	r0, r6
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096b8:	1b9b      	subs	r3, r3, r6
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	b008      	add	sp, #32
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	9107      	str	r1, [sp, #28]
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e7f0      	b.n	80096ac <__cvt+0xa0>

080096ca <__exponent>:
 80096ca:	4603      	mov	r3, r0
 80096cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ce:	2900      	cmp	r1, #0
 80096d0:	f803 2b02 	strb.w	r2, [r3], #2
 80096d4:	bfb6      	itet	lt
 80096d6:	222d      	movlt	r2, #45	; 0x2d
 80096d8:	222b      	movge	r2, #43	; 0x2b
 80096da:	4249      	neglt	r1, r1
 80096dc:	2909      	cmp	r1, #9
 80096de:	7042      	strb	r2, [r0, #1]
 80096e0:	dd2b      	ble.n	800973a <__exponent+0x70>
 80096e2:	f10d 0407 	add.w	r4, sp, #7
 80096e6:	46a4      	mov	ip, r4
 80096e8:	270a      	movs	r7, #10
 80096ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80096ee:	460a      	mov	r2, r1
 80096f0:	46a6      	mov	lr, r4
 80096f2:	fb07 1516 	mls	r5, r7, r6, r1
 80096f6:	2a63      	cmp	r2, #99	; 0x63
 80096f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80096fc:	4631      	mov	r1, r6
 80096fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009702:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009706:	dcf0      	bgt.n	80096ea <__exponent+0x20>
 8009708:	3130      	adds	r1, #48	; 0x30
 800970a:	f1ae 0502 	sub.w	r5, lr, #2
 800970e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009712:	4629      	mov	r1, r5
 8009714:	1c44      	adds	r4, r0, #1
 8009716:	4561      	cmp	r1, ip
 8009718:	d30a      	bcc.n	8009730 <__exponent+0x66>
 800971a:	f10d 0209 	add.w	r2, sp, #9
 800971e:	eba2 020e 	sub.w	r2, r2, lr
 8009722:	4565      	cmp	r5, ip
 8009724:	bf88      	it	hi
 8009726:	2200      	movhi	r2, #0
 8009728:	4413      	add	r3, r2
 800972a:	1a18      	subs	r0, r3, r0
 800972c:	b003      	add	sp, #12
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009734:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009738:	e7ed      	b.n	8009716 <__exponent+0x4c>
 800973a:	2330      	movs	r3, #48	; 0x30
 800973c:	3130      	adds	r1, #48	; 0x30
 800973e:	7083      	strb	r3, [r0, #2]
 8009740:	70c1      	strb	r1, [r0, #3]
 8009742:	1d03      	adds	r3, r0, #4
 8009744:	e7f1      	b.n	800972a <__exponent+0x60>
	...

08009748 <_printf_float>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	b091      	sub	sp, #68	; 0x44
 800974e:	460c      	mov	r4, r1
 8009750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009754:	4616      	mov	r6, r2
 8009756:	461f      	mov	r7, r3
 8009758:	4605      	mov	r5, r0
 800975a:	f001 fa53 	bl	800ac04 <_localeconv_r>
 800975e:	6803      	ldr	r3, [r0, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	9309      	str	r3, [sp, #36]	; 0x24
 8009764:	f7f6 fcfe 	bl	8000164 <strlen>
 8009768:	2300      	movs	r3, #0
 800976a:	930e      	str	r3, [sp, #56]	; 0x38
 800976c:	f8d8 3000 	ldr.w	r3, [r8]
 8009770:	900a      	str	r0, [sp, #40]	; 0x28
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	f103 0208 	add.w	r2, r3, #8
 800977c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009780:	f8d4 b000 	ldr.w	fp, [r4]
 8009784:	f8c8 2000 	str.w	r2, [r8]
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009790:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009794:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009798:	930b      	str	r3, [sp, #44]	; 0x2c
 800979a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800979e:	4640      	mov	r0, r8
 80097a0:	4b9c      	ldr	r3, [pc, #624]	; (8009a14 <_printf_float+0x2cc>)
 80097a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097a4:	f7f7 f93c 	bl	8000a20 <__aeabi_dcmpun>
 80097a8:	bb70      	cbnz	r0, 8009808 <_printf_float+0xc0>
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ae:	4640      	mov	r0, r8
 80097b0:	4b98      	ldr	r3, [pc, #608]	; (8009a14 <_printf_float+0x2cc>)
 80097b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b4:	f7f7 f916 	bl	80009e4 <__aeabi_dcmple>
 80097b8:	bb30      	cbnz	r0, 8009808 <_printf_float+0xc0>
 80097ba:	2200      	movs	r2, #0
 80097bc:	2300      	movs	r3, #0
 80097be:	4640      	mov	r0, r8
 80097c0:	4651      	mov	r1, sl
 80097c2:	f7f7 f905 	bl	80009d0 <__aeabi_dcmplt>
 80097c6:	b110      	cbz	r0, 80097ce <_printf_float+0x86>
 80097c8:	232d      	movs	r3, #45	; 0x2d
 80097ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ce:	4b92      	ldr	r3, [pc, #584]	; (8009a18 <_printf_float+0x2d0>)
 80097d0:	4892      	ldr	r0, [pc, #584]	; (8009a1c <_printf_float+0x2d4>)
 80097d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80097d6:	bf94      	ite	ls
 80097d8:	4698      	movls	r8, r3
 80097da:	4680      	movhi	r8, r0
 80097dc:	2303      	movs	r3, #3
 80097de:	f04f 0a00 	mov.w	sl, #0
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	f02b 0304 	bic.w	r3, fp, #4
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	4633      	mov	r3, r6
 80097ec:	4621      	mov	r1, r4
 80097ee:	4628      	mov	r0, r5
 80097f0:	9700      	str	r7, [sp, #0]
 80097f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80097f4:	f000 f9d4 	bl	8009ba0 <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	f040 8090 	bne.w	800991e <_printf_float+0x1d6>
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009802:	b011      	add	sp, #68	; 0x44
 8009804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009808:	4642      	mov	r2, r8
 800980a:	4653      	mov	r3, sl
 800980c:	4640      	mov	r0, r8
 800980e:	4651      	mov	r1, sl
 8009810:	f7f7 f906 	bl	8000a20 <__aeabi_dcmpun>
 8009814:	b148      	cbz	r0, 800982a <_printf_float+0xe2>
 8009816:	f1ba 0f00 	cmp.w	sl, #0
 800981a:	bfb8      	it	lt
 800981c:	232d      	movlt	r3, #45	; 0x2d
 800981e:	4880      	ldr	r0, [pc, #512]	; (8009a20 <_printf_float+0x2d8>)
 8009820:	bfb8      	it	lt
 8009822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009826:	4b7f      	ldr	r3, [pc, #508]	; (8009a24 <_printf_float+0x2dc>)
 8009828:	e7d3      	b.n	80097d2 <_printf_float+0x8a>
 800982a:	6863      	ldr	r3, [r4, #4]
 800982c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	d142      	bne.n	80098ba <_printf_float+0x172>
 8009834:	2306      	movs	r3, #6
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	9206      	str	r2, [sp, #24]
 800983c:	aa0e      	add	r2, sp, #56	; 0x38
 800983e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009842:	aa0d      	add	r2, sp, #52	; 0x34
 8009844:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009848:	9203      	str	r2, [sp, #12]
 800984a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800984e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	6863      	ldr	r3, [r4, #4]
 8009856:	4642      	mov	r2, r8
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4628      	mov	r0, r5
 800985c:	4653      	mov	r3, sl
 800985e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009860:	f7ff fed4 	bl	800960c <__cvt>
 8009864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009866:	4680      	mov	r8, r0
 8009868:	2947      	cmp	r1, #71	; 0x47
 800986a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800986c:	d108      	bne.n	8009880 <_printf_float+0x138>
 800986e:	1cc8      	adds	r0, r1, #3
 8009870:	db02      	blt.n	8009878 <_printf_float+0x130>
 8009872:	6863      	ldr	r3, [r4, #4]
 8009874:	4299      	cmp	r1, r3
 8009876:	dd40      	ble.n	80098fa <_printf_float+0x1b2>
 8009878:	f1a9 0902 	sub.w	r9, r9, #2
 800987c:	fa5f f989 	uxtb.w	r9, r9
 8009880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009884:	d81f      	bhi.n	80098c6 <_printf_float+0x17e>
 8009886:	464a      	mov	r2, r9
 8009888:	3901      	subs	r1, #1
 800988a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800988e:	910d      	str	r1, [sp, #52]	; 0x34
 8009890:	f7ff ff1b 	bl	80096ca <__exponent>
 8009894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009896:	4682      	mov	sl, r0
 8009898:	1813      	adds	r3, r2, r0
 800989a:	2a01      	cmp	r2, #1
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	dc02      	bgt.n	80098a6 <_printf_float+0x15e>
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	07d2      	lsls	r2, r2, #31
 80098a4:	d501      	bpl.n	80098aa <_printf_float+0x162>
 80098a6:	3301      	adds	r3, #1
 80098a8:	6123      	str	r3, [r4, #16]
 80098aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d09b      	beq.n	80097ea <_printf_float+0xa2>
 80098b2:	232d      	movs	r3, #45	; 0x2d
 80098b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b8:	e797      	b.n	80097ea <_printf_float+0xa2>
 80098ba:	2947      	cmp	r1, #71	; 0x47
 80098bc:	d1bc      	bne.n	8009838 <_printf_float+0xf0>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1ba      	bne.n	8009838 <_printf_float+0xf0>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e7b7      	b.n	8009836 <_printf_float+0xee>
 80098c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80098ca:	d118      	bne.n	80098fe <_printf_float+0x1b6>
 80098cc:	2900      	cmp	r1, #0
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	dd0b      	ble.n	80098ea <_printf_float+0x1a2>
 80098d2:	6121      	str	r1, [r4, #16]
 80098d4:	b913      	cbnz	r3, 80098dc <_printf_float+0x194>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	07d0      	lsls	r0, r2, #31
 80098da:	d502      	bpl.n	80098e2 <_printf_float+0x19a>
 80098dc:	3301      	adds	r3, #1
 80098de:	440b      	add	r3, r1
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	f04f 0a00 	mov.w	sl, #0
 80098e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80098e8:	e7df      	b.n	80098aa <_printf_float+0x162>
 80098ea:	b913      	cbnz	r3, 80098f2 <_printf_float+0x1aa>
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	07d2      	lsls	r2, r2, #31
 80098f0:	d501      	bpl.n	80098f6 <_printf_float+0x1ae>
 80098f2:	3302      	adds	r3, #2
 80098f4:	e7f4      	b.n	80098e0 <_printf_float+0x198>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7f2      	b.n	80098e0 <_printf_float+0x198>
 80098fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80098fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009900:	4299      	cmp	r1, r3
 8009902:	db05      	blt.n	8009910 <_printf_float+0x1c8>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	6121      	str	r1, [r4, #16]
 8009908:	07d8      	lsls	r0, r3, #31
 800990a:	d5ea      	bpl.n	80098e2 <_printf_float+0x19a>
 800990c:	1c4b      	adds	r3, r1, #1
 800990e:	e7e7      	b.n	80098e0 <_printf_float+0x198>
 8009910:	2900      	cmp	r1, #0
 8009912:	bfcc      	ite	gt
 8009914:	2201      	movgt	r2, #1
 8009916:	f1c1 0202 	rsble	r2, r1, #2
 800991a:	4413      	add	r3, r2
 800991c:	e7e0      	b.n	80098e0 <_printf_float+0x198>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	055a      	lsls	r2, r3, #21
 8009922:	d407      	bmi.n	8009934 <_printf_float+0x1ec>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	4642      	mov	r2, r8
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	d12b      	bne.n	800998a <_printf_float+0x242>
 8009932:	e764      	b.n	80097fe <_printf_float+0xb6>
 8009934:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009938:	f240 80dd 	bls.w	8009af6 <_printf_float+0x3ae>
 800993c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009940:	2200      	movs	r2, #0
 8009942:	2300      	movs	r3, #0
 8009944:	f7f7 f83a 	bl	80009bc <__aeabi_dcmpeq>
 8009948:	2800      	cmp	r0, #0
 800994a:	d033      	beq.n	80099b4 <_printf_float+0x26c>
 800994c:	2301      	movs	r3, #1
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	4a35      	ldr	r2, [pc, #212]	; (8009a28 <_printf_float+0x2e0>)
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af51 	beq.w	80097fe <_printf_float+0xb6>
 800995c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009960:	429a      	cmp	r2, r3
 8009962:	db02      	blt.n	800996a <_printf_float+0x222>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	07d8      	lsls	r0, r3, #31
 8009968:	d50f      	bpl.n	800998a <_printf_float+0x242>
 800996a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996e:	4631      	mov	r1, r6
 8009970:	4628      	mov	r0, r5
 8009972:	47b8      	blx	r7
 8009974:	3001      	adds	r0, #1
 8009976:	f43f af42 	beq.w	80097fe <_printf_float+0xb6>
 800997a:	f04f 0800 	mov.w	r8, #0
 800997e:	f104 091a 	add.w	r9, r4, #26
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	3b01      	subs	r3, #1
 8009986:	4543      	cmp	r3, r8
 8009988:	dc09      	bgt.n	800999e <_printf_float+0x256>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	079b      	lsls	r3, r3, #30
 800998e:	f100 8102 	bmi.w	8009b96 <_printf_float+0x44e>
 8009992:	68e0      	ldr	r0, [r4, #12]
 8009994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009996:	4298      	cmp	r0, r3
 8009998:	bfb8      	it	lt
 800999a:	4618      	movlt	r0, r3
 800999c:	e731      	b.n	8009802 <_printf_float+0xba>
 800999e:	2301      	movs	r3, #1
 80099a0:	464a      	mov	r2, r9
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	f43f af28 	beq.w	80097fe <_printf_float+0xb6>
 80099ae:	f108 0801 	add.w	r8, r8, #1
 80099b2:	e7e6      	b.n	8009982 <_printf_float+0x23a>
 80099b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dc38      	bgt.n	8009a2c <_printf_float+0x2e4>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	4a19      	ldr	r2, [pc, #100]	; (8009a28 <_printf_float+0x2e0>)
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	f43f af1a 	beq.w	80097fe <_printf_float+0xb6>
 80099ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d102      	bne.n	80099d8 <_printf_float+0x290>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d5d8      	bpl.n	800998a <_printf_float+0x242>
 80099d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f af0b 	beq.w	80097fe <_printf_float+0xb6>
 80099e8:	f04f 0900 	mov.w	r9, #0
 80099ec:	f104 0a1a 	add.w	sl, r4, #26
 80099f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f2:	425b      	negs	r3, r3
 80099f4:	454b      	cmp	r3, r9
 80099f6:	dc01      	bgt.n	80099fc <_printf_float+0x2b4>
 80099f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fa:	e794      	b.n	8009926 <_printf_float+0x1de>
 80099fc:	2301      	movs	r3, #1
 80099fe:	4652      	mov	r2, sl
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f aef9 	beq.w	80097fe <_printf_float+0xb6>
 8009a0c:	f109 0901 	add.w	r9, r9, #1
 8009a10:	e7ee      	b.n	80099f0 <_printf_float+0x2a8>
 8009a12:	bf00      	nop
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	0800cb04 	.word	0x0800cb04
 8009a1c:	0800cb08 	.word	0x0800cb08
 8009a20:	0800cb10 	.word	0x0800cb10
 8009a24:	0800cb0c 	.word	0x0800cb0c
 8009a28:	0800cb14 	.word	0x0800cb14
 8009a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a30:	429a      	cmp	r2, r3
 8009a32:	bfa8      	it	ge
 8009a34:	461a      	movge	r2, r3
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	4691      	mov	r9, r2
 8009a3a:	dc37      	bgt.n	8009aac <_printf_float+0x364>
 8009a3c:	f04f 0b00 	mov.w	fp, #0
 8009a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a44:	f104 021a 	add.w	r2, r4, #26
 8009a48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a4c:	ebaa 0309 	sub.w	r3, sl, r9
 8009a50:	455b      	cmp	r3, fp
 8009a52:	dc33      	bgt.n	8009abc <_printf_float+0x374>
 8009a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	db3b      	blt.n	8009ad4 <_printf_float+0x38c>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	07da      	lsls	r2, r3, #31
 8009a60:	d438      	bmi.n	8009ad4 <_printf_float+0x38c>
 8009a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a66:	eba3 020a 	sub.w	r2, r3, sl
 8009a6a:	eba3 0901 	sub.w	r9, r3, r1
 8009a6e:	4591      	cmp	r9, r2
 8009a70:	bfa8      	it	ge
 8009a72:	4691      	movge	r9, r2
 8009a74:	f1b9 0f00 	cmp.w	r9, #0
 8009a78:	dc34      	bgt.n	8009ae4 <_printf_float+0x39c>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a82:	f104 0a1a 	add.w	sl, r4, #26
 8009a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a8a:	1a9b      	subs	r3, r3, r2
 8009a8c:	eba3 0309 	sub.w	r3, r3, r9
 8009a90:	4543      	cmp	r3, r8
 8009a92:	f77f af7a 	ble.w	800998a <_printf_float+0x242>
 8009a96:	2301      	movs	r3, #1
 8009a98:	4652      	mov	r2, sl
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b8      	blx	r7
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	f43f aeac 	beq.w	80097fe <_printf_float+0xb6>
 8009aa6:	f108 0801 	add.w	r8, r8, #1
 8009aaa:	e7ec      	b.n	8009a86 <_printf_float+0x33e>
 8009aac:	4613      	mov	r3, r2
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d1c0      	bne.n	8009a3c <_printf_float+0x2f4>
 8009aba:	e6a0      	b.n	80097fe <_printf_float+0xb6>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f ae99 	beq.w	80097fe <_printf_float+0xb6>
 8009acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ace:	f10b 0b01 	add.w	fp, fp, #1
 8009ad2:	e7b9      	b.n	8009a48 <_printf_float+0x300>
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d1bf      	bne.n	8009a62 <_printf_float+0x31a>
 8009ae2:	e68c      	b.n	80097fe <_printf_float+0xb6>
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	eb08 020a 	add.w	r2, r8, sl
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	d1c2      	bne.n	8009a7a <_printf_float+0x332>
 8009af4:	e683      	b.n	80097fe <_printf_float+0xb6>
 8009af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af8:	2a01      	cmp	r2, #1
 8009afa:	dc01      	bgt.n	8009b00 <_printf_float+0x3b8>
 8009afc:	07db      	lsls	r3, r3, #31
 8009afe:	d537      	bpl.n	8009b70 <_printf_float+0x428>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4642      	mov	r2, r8
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f ae77 	beq.w	80097fe <_printf_float+0xb6>
 8009b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f ae6f 	beq.w	80097fe <_printf_float+0xb6>
 8009b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f7f6 ff48 	bl	80009bc <__aeabi_dcmpeq>
 8009b2c:	b9d8      	cbnz	r0, 8009b66 <_printf_float+0x41e>
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b30:	f108 0201 	add.w	r2, r8, #1
 8009b34:	3b01      	subs	r3, #1
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d10e      	bne.n	8009b5e <_printf_float+0x416>
 8009b40:	e65d      	b.n	80097fe <_printf_float+0xb6>
 8009b42:	2301      	movs	r3, #1
 8009b44:	464a      	mov	r2, r9
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	f43f ae56 	beq.w	80097fe <_printf_float+0xb6>
 8009b52:	f108 0801 	add.w	r8, r8, #1
 8009b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	4543      	cmp	r3, r8
 8009b5c:	dcf1      	bgt.n	8009b42 <_printf_float+0x3fa>
 8009b5e:	4653      	mov	r3, sl
 8009b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b64:	e6e0      	b.n	8009928 <_printf_float+0x1e0>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	f104 091a 	add.w	r9, r4, #26
 8009b6e:	e7f2      	b.n	8009b56 <_printf_float+0x40e>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4642      	mov	r2, r8
 8009b74:	e7df      	b.n	8009b36 <_printf_float+0x3ee>
 8009b76:	2301      	movs	r3, #1
 8009b78:	464a      	mov	r2, r9
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	f43f ae3c 	beq.w	80097fe <_printf_float+0xb6>
 8009b86:	f108 0801 	add.w	r8, r8, #1
 8009b8a:	68e3      	ldr	r3, [r4, #12]
 8009b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b8e:	1a5b      	subs	r3, r3, r1
 8009b90:	4543      	cmp	r3, r8
 8009b92:	dcf0      	bgt.n	8009b76 <_printf_float+0x42e>
 8009b94:	e6fd      	b.n	8009992 <_printf_float+0x24a>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	f104 0919 	add.w	r9, r4, #25
 8009b9e:	e7f4      	b.n	8009b8a <_printf_float+0x442>

08009ba0 <_printf_common>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	4699      	mov	r9, r3
 8009ba8:	688a      	ldr	r2, [r1, #8]
 8009baa:	690b      	ldr	r3, [r1, #16]
 8009bac:	4607      	mov	r7, r0
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bfb8      	it	lt
 8009bb2:	4613      	movlt	r3, r2
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bba:	460c      	mov	r4, r1
 8009bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bc0:	b10a      	cbz	r2, 8009bc6 <_printf_common+0x26>
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	6033      	str	r3, [r6, #0]
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	0699      	lsls	r1, r3, #26
 8009bca:	bf42      	ittt	mi
 8009bcc:	6833      	ldrmi	r3, [r6, #0]
 8009bce:	3302      	addmi	r3, #2
 8009bd0:	6033      	strmi	r3, [r6, #0]
 8009bd2:	6825      	ldr	r5, [r4, #0]
 8009bd4:	f015 0506 	ands.w	r5, r5, #6
 8009bd8:	d106      	bne.n	8009be8 <_printf_common+0x48>
 8009bda:	f104 0a19 	add.w	sl, r4, #25
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	6832      	ldr	r2, [r6, #0]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	dc28      	bgt.n	8009c3a <_printf_common+0x9a>
 8009be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bec:	1e13      	subs	r3, r2, #0
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	bf18      	it	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	0692      	lsls	r2, r2, #26
 8009bf6:	d42d      	bmi.n	8009c54 <_printf_common+0xb4>
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c00:	47c0      	blx	r8
 8009c02:	3001      	adds	r0, #1
 8009c04:	d020      	beq.n	8009c48 <_printf_common+0xa8>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	68e5      	ldr	r5, [r4, #12]
 8009c0a:	f003 0306 	and.w	r3, r3, #6
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	bf18      	it	ne
 8009c12:	2500      	movne	r5, #0
 8009c14:	6832      	ldr	r2, [r6, #0]
 8009c16:	f04f 0600 	mov.w	r6, #0
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	bf08      	it	eq
 8009c1e:	1aad      	subeq	r5, r5, r2
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	bf08      	it	eq
 8009c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	bfc4      	itt	gt
 8009c2c:	1a9b      	subgt	r3, r3, r2
 8009c2e:	18ed      	addgt	r5, r5, r3
 8009c30:	341a      	adds	r4, #26
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d11a      	bne.n	8009c6c <_printf_common+0xcc>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e008      	b.n	8009c4c <_printf_common+0xac>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4638      	mov	r0, r7
 8009c42:	47c0      	blx	r8
 8009c44:	3001      	adds	r0, #1
 8009c46:	d103      	bne.n	8009c50 <_printf_common+0xb0>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7c4      	b.n	8009bde <_printf_common+0x3e>
 8009c54:	2030      	movs	r0, #48	; 0x30
 8009c56:	18e1      	adds	r1, r4, r3
 8009c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c62:	4422      	add	r2, r4
 8009c64:	3302      	adds	r3, #2
 8009c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c6a:	e7c5      	b.n	8009bf8 <_printf_common+0x58>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4649      	mov	r1, r9
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c0      	blx	r8
 8009c76:	3001      	adds	r0, #1
 8009c78:	d0e6      	beq.n	8009c48 <_printf_common+0xa8>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7d9      	b.n	8009c32 <_printf_common+0x92>
	...

08009c80 <_printf_i>:
 8009c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	7e0f      	ldrb	r7, [r1, #24]
 8009c86:	4691      	mov	r9, r2
 8009c88:	2f78      	cmp	r7, #120	; 0x78
 8009c8a:	4680      	mov	r8, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	469a      	mov	sl, r3
 8009c90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c96:	d807      	bhi.n	8009ca8 <_printf_i+0x28>
 8009c98:	2f62      	cmp	r7, #98	; 0x62
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x32>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f000 80d9 	beq.w	8009e54 <_printf_i+0x1d4>
 8009ca2:	2f58      	cmp	r7, #88	; 0x58
 8009ca4:	f000 80a4 	beq.w	8009df0 <_printf_i+0x170>
 8009ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb0:	e03a      	b.n	8009d28 <_printf_i+0xa8>
 8009cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cb6:	2b15      	cmp	r3, #21
 8009cb8:	d8f6      	bhi.n	8009ca8 <_printf_i+0x28>
 8009cba:	a101      	add	r1, pc, #4	; (adr r1, 8009cc0 <_printf_i+0x40>)
 8009cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009ca9 	.word	0x08009ca9
 8009ccc:	08009ca9 	.word	0x08009ca9
 8009cd0:	08009ca9 	.word	0x08009ca9
 8009cd4:	08009ca9 	.word	0x08009ca9
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009ca9 	.word	0x08009ca9
 8009ce0:	08009ca9 	.word	0x08009ca9
 8009ce4:	08009ca9 	.word	0x08009ca9
 8009ce8:	08009ca9 	.word	0x08009ca9
 8009cec:	08009e3b 	.word	0x08009e3b
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009e1d 	.word	0x08009e1d
 8009cf8:	08009ca9 	.word	0x08009ca9
 8009cfc:	08009ca9 	.word	0x08009ca9
 8009d00:	08009e5d 	.word	0x08009e5d
 8009d04:	08009ca9 	.word	0x08009ca9
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009ca9 	.word	0x08009ca9
 8009d10:	08009ca9 	.word	0x08009ca9
 8009d14:	08009e25 	.word	0x08009e25
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	602a      	str	r2, [r5, #0]
 8009d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0a4      	b.n	8009e76 <_printf_i+0x1f6>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	6829      	ldr	r1, [r5, #0]
 8009d30:	0606      	lsls	r6, r0, #24
 8009d32:	f101 0304 	add.w	r3, r1, #4
 8009d36:	d50a      	bpl.n	8009d4e <_printf_i+0xce>
 8009d38:	680e      	ldr	r6, [r1, #0]
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	da03      	bge.n	8009d48 <_printf_i+0xc8>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	4276      	negs	r6, r6
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	230a      	movs	r3, #10
 8009d4a:	485e      	ldr	r0, [pc, #376]	; (8009ec4 <_printf_i+0x244>)
 8009d4c:	e019      	b.n	8009d82 <_printf_i+0x102>
 8009d4e:	680e      	ldr	r6, [r1, #0]
 8009d50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	bf18      	it	ne
 8009d58:	b236      	sxthne	r6, r6
 8009d5a:	e7ef      	b.n	8009d3c <_printf_i+0xbc>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	1d19      	adds	r1, r3, #4
 8009d62:	6029      	str	r1, [r5, #0]
 8009d64:	0601      	lsls	r1, r0, #24
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0xec>
 8009d68:	681e      	ldr	r6, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0xf2>
 8009d6c:	0646      	lsls	r6, r0, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0xe8>
 8009d70:	881e      	ldrh	r6, [r3, #0]
 8009d72:	2f6f      	cmp	r7, #111	; 0x6f
 8009d74:	bf0c      	ite	eq
 8009d76:	2308      	moveq	r3, #8
 8009d78:	230a      	movne	r3, #10
 8009d7a:	4852      	ldr	r0, [pc, #328]	; (8009ec4 <_printf_i+0x244>)
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d82:	6865      	ldr	r5, [r4, #4]
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	bfa8      	it	ge
 8009d88:	6821      	ldrge	r1, [r4, #0]
 8009d8a:	60a5      	str	r5, [r4, #8]
 8009d8c:	bfa4      	itt	ge
 8009d8e:	f021 0104 	bicge.w	r1, r1, #4
 8009d92:	6021      	strge	r1, [r4, #0]
 8009d94:	b90e      	cbnz	r6, 8009d9a <_printf_i+0x11a>
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	d04d      	beq.n	8009e36 <_printf_i+0x1b6>
 8009d9a:	4615      	mov	r5, r2
 8009d9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009da0:	fb03 6711 	mls	r7, r3, r1, r6
 8009da4:	5dc7      	ldrb	r7, [r0, r7]
 8009da6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009daa:	4637      	mov	r7, r6
 8009dac:	42bb      	cmp	r3, r7
 8009dae:	460e      	mov	r6, r1
 8009db0:	d9f4      	bls.n	8009d9c <_printf_i+0x11c>
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d10b      	bne.n	8009dce <_printf_i+0x14e>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	07de      	lsls	r6, r3, #31
 8009dba:	d508      	bpl.n	8009dce <_printf_i+0x14e>
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	6861      	ldr	r1, [r4, #4]
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	bfde      	ittt	le
 8009dc4:	2330      	movle	r3, #48	; 0x30
 8009dc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009dce:	1b52      	subs	r2, r2, r5
 8009dd0:	6122      	str	r2, [r4, #16]
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f8cd a000 	str.w	sl, [sp]
 8009ddc:	aa03      	add	r2, sp, #12
 8009dde:	f7ff fedf 	bl	8009ba0 <_printf_common>
 8009de2:	3001      	adds	r0, #1
 8009de4:	d14c      	bne.n	8009e80 <_printf_i+0x200>
 8009de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dea:	b004      	add	sp, #16
 8009dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df0:	4834      	ldr	r0, [pc, #208]	; (8009ec4 <_printf_i+0x244>)
 8009df2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009df6:	6829      	ldr	r1, [r5, #0]
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dfe:	6029      	str	r1, [r5, #0]
 8009e00:	061d      	lsls	r5, r3, #24
 8009e02:	d514      	bpl.n	8009e2e <_printf_i+0x1ae>
 8009e04:	07df      	lsls	r7, r3, #31
 8009e06:	bf44      	itt	mi
 8009e08:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0c:	6023      	strmi	r3, [r4, #0]
 8009e0e:	b91e      	cbnz	r6, 8009e18 <_printf_i+0x198>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	f023 0320 	bic.w	r3, r3, #32
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	2310      	movs	r3, #16
 8009e1a:	e7af      	b.n	8009d7c <_printf_i+0xfc>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f043 0320 	orr.w	r3, r3, #32
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	2378      	movs	r3, #120	; 0x78
 8009e26:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <_printf_i+0x248>)
 8009e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2c:	e7e3      	b.n	8009df6 <_printf_i+0x176>
 8009e2e:	0659      	lsls	r1, r3, #25
 8009e30:	bf48      	it	mi
 8009e32:	b2b6      	uxthmi	r6, r6
 8009e34:	e7e6      	b.n	8009e04 <_printf_i+0x184>
 8009e36:	4615      	mov	r5, r2
 8009e38:	e7bb      	b.n	8009db2 <_printf_i+0x132>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	6826      	ldr	r6, [r4, #0]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6961      	ldr	r1, [r4, #20]
 8009e42:	6028      	str	r0, [r5, #0]
 8009e44:	0635      	lsls	r5, r6, #24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0x1ce>
 8009e4a:	6019      	str	r1, [r3, #0]
 8009e4c:	e002      	b.n	8009e54 <_printf_i+0x1d4>
 8009e4e:	0670      	lsls	r0, r6, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0x1ca>
 8009e52:	8019      	strh	r1, [r3, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	4615      	mov	r5, r2
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e7ba      	b.n	8009dd2 <_printf_i+0x152>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	1d1a      	adds	r2, r3, #4
 8009e62:	602a      	str	r2, [r5, #0]
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	6862      	ldr	r2, [r4, #4]
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 fed7 	bl	800ac1c <memchr>
 8009e6e:	b108      	cbz	r0, 8009e74 <_printf_i+0x1f4>
 8009e70:	1b40      	subs	r0, r0, r5
 8009e72:	6060      	str	r0, [r4, #4]
 8009e74:	6863      	ldr	r3, [r4, #4]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7e:	e7a8      	b.n	8009dd2 <_printf_i+0x152>
 8009e80:	462a      	mov	r2, r5
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	47d0      	blx	sl
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d0ab      	beq.n	8009de6 <_printf_i+0x166>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	079b      	lsls	r3, r3, #30
 8009e92:	d413      	bmi.n	8009ebc <_printf_i+0x23c>
 8009e94:	68e0      	ldr	r0, [r4, #12]
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	bfb8      	it	lt
 8009e9c:	4618      	movlt	r0, r3
 8009e9e:	e7a4      	b.n	8009dea <_printf_i+0x16a>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	47d0      	blx	sl
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d09b      	beq.n	8009de6 <_printf_i+0x166>
 8009eae:	3501      	adds	r5, #1
 8009eb0:	68e3      	ldr	r3, [r4, #12]
 8009eb2:	9903      	ldr	r1, [sp, #12]
 8009eb4:	1a5b      	subs	r3, r3, r1
 8009eb6:	42ab      	cmp	r3, r5
 8009eb8:	dcf2      	bgt.n	8009ea0 <_printf_i+0x220>
 8009eba:	e7eb      	b.n	8009e94 <_printf_i+0x214>
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	f104 0619 	add.w	r6, r4, #25
 8009ec2:	e7f5      	b.n	8009eb0 <_printf_i+0x230>
 8009ec4:	0800cb16 	.word	0x0800cb16
 8009ec8:	0800cb27 	.word	0x0800cb27

08009ecc <siprintf>:
 8009ecc:	b40e      	push	{r1, r2, r3}
 8009ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ed2:	b500      	push	{lr}
 8009ed4:	b09c      	sub	sp, #112	; 0x70
 8009ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ed8:	9002      	str	r0, [sp, #8]
 8009eda:	9006      	str	r0, [sp, #24]
 8009edc:	9107      	str	r1, [sp, #28]
 8009ede:	9104      	str	r1, [sp, #16]
 8009ee0:	4808      	ldr	r0, [pc, #32]	; (8009f04 <siprintf+0x38>)
 8009ee2:	4909      	ldr	r1, [pc, #36]	; (8009f08 <siprintf+0x3c>)
 8009ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee8:	9105      	str	r1, [sp, #20]
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	a902      	add	r1, sp, #8
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f001 fb7e 	bl	800b5f0 <_svfiprintf_r>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	b01c      	add	sp, #112	; 0x70
 8009efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f00:	b003      	add	sp, #12
 8009f02:	4770      	bx	lr
 8009f04:	200000b8 	.word	0x200000b8
 8009f08:	ffff0208 	.word	0xffff0208

08009f0c <quorem>:
 8009f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	6903      	ldr	r3, [r0, #16]
 8009f12:	690c      	ldr	r4, [r1, #16]
 8009f14:	4607      	mov	r7, r0
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	f2c0 8082 	blt.w	800a020 <quorem+0x114>
 8009f1c:	3c01      	subs	r4, #1
 8009f1e:	f100 0514 	add.w	r5, r0, #20
 8009f22:	f101 0814 	add.w	r8, r1, #20
 8009f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f34:	3301      	adds	r3, #1
 8009f36:	429a      	cmp	r2, r3
 8009f38:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f44:	d331      	bcc.n	8009faa <quorem+0x9e>
 8009f46:	f04f 0e00 	mov.w	lr, #0
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	46ac      	mov	ip, r5
 8009f4e:	46f2      	mov	sl, lr
 8009f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f54:	b293      	uxth	r3, r2
 8009f56:	fb06 e303 	mla	r3, r6, r3, lr
 8009f5a:	0c12      	lsrs	r2, r2, #16
 8009f5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	fb06 e202 	mla	r2, r6, r2, lr
 8009f66:	ebaa 0303 	sub.w	r3, sl, r3
 8009f6a:	f8dc a000 	ldr.w	sl, [ip]
 8009f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f72:	fa1f fa8a 	uxth.w	sl, sl
 8009f76:	4453      	add	r3, sl
 8009f78:	f8dc a000 	ldr.w	sl, [ip]
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f8c:	4581      	cmp	r9, r0
 8009f8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f92:	f84c 3b04 	str.w	r3, [ip], #4
 8009f96:	d2db      	bcs.n	8009f50 <quorem+0x44>
 8009f98:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f9c:	b92b      	cbnz	r3, 8009faa <quorem+0x9e>
 8009f9e:	9b01      	ldr	r3, [sp, #4]
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	429d      	cmp	r5, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	d32f      	bcc.n	800a008 <quorem+0xfc>
 8009fa8:	613c      	str	r4, [r7, #16]
 8009faa:	4638      	mov	r0, r7
 8009fac:	f001 f8d0 	bl	800b150 <__mcmp>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	db25      	blt.n	800a000 <quorem+0xf4>
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f04f 0c00 	mov.w	ip, #0
 8009fba:	3601      	adds	r6, #1
 8009fbc:	f858 1b04 	ldr.w	r1, [r8], #4
 8009fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8009fc4:	b28b      	uxth	r3, r1
 8009fc6:	ebac 0303 	sub.w	r3, ip, r3
 8009fca:	fa1f f28e 	uxth.w	r2, lr
 8009fce:	4413      	add	r3, r2
 8009fd0:	0c0a      	lsrs	r2, r1, #16
 8009fd2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe0:	45c1      	cmp	r9, r8
 8009fe2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fe6:	f840 3b04 	str.w	r3, [r0], #4
 8009fea:	d2e7      	bcs.n	8009fbc <quorem+0xb0>
 8009fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff4:	b922      	cbnz	r2, 800a000 <quorem+0xf4>
 8009ff6:	3b04      	subs	r3, #4
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	d30a      	bcc.n	800a014 <quorem+0x108>
 8009ffe:	613c      	str	r4, [r7, #16]
 800a000:	4630      	mov	r0, r6
 800a002:	b003      	add	sp, #12
 800a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a008:	6812      	ldr	r2, [r2, #0]
 800a00a:	3b04      	subs	r3, #4
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	d1cb      	bne.n	8009fa8 <quorem+0x9c>
 800a010:	3c01      	subs	r4, #1
 800a012:	e7c6      	b.n	8009fa2 <quorem+0x96>
 800a014:	6812      	ldr	r2, [r2, #0]
 800a016:	3b04      	subs	r3, #4
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d1f0      	bne.n	8009ffe <quorem+0xf2>
 800a01c:	3c01      	subs	r4, #1
 800a01e:	e7eb      	b.n	8009ff8 <quorem+0xec>
 800a020:	2000      	movs	r0, #0
 800a022:	e7ee      	b.n	800a002 <quorem+0xf6>
 800a024:	0000      	movs	r0, r0
	...

0800a028 <_dtoa_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4616      	mov	r6, r2
 800a02e:	461f      	mov	r7, r3
 800a030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a032:	b099      	sub	sp, #100	; 0x64
 800a034:	4605      	mov	r5, r0
 800a036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a03a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a03e:	b974      	cbnz	r4, 800a05e <_dtoa_r+0x36>
 800a040:	2010      	movs	r0, #16
 800a042:	f000 fde3 	bl	800ac0c <malloc>
 800a046:	4602      	mov	r2, r0
 800a048:	6268      	str	r0, [r5, #36]	; 0x24
 800a04a:	b920      	cbnz	r0, 800a056 <_dtoa_r+0x2e>
 800a04c:	21ea      	movs	r1, #234	; 0xea
 800a04e:	4ba8      	ldr	r3, [pc, #672]	; (800a2f0 <_dtoa_r+0x2c8>)
 800a050:	48a8      	ldr	r0, [pc, #672]	; (800a2f4 <_dtoa_r+0x2cc>)
 800a052:	f001 fbdd 	bl	800b810 <__assert_func>
 800a056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a05a:	6004      	str	r4, [r0, #0]
 800a05c:	60c4      	str	r4, [r0, #12]
 800a05e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a060:	6819      	ldr	r1, [r3, #0]
 800a062:	b151      	cbz	r1, 800a07a <_dtoa_r+0x52>
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	2301      	movs	r3, #1
 800a068:	4093      	lsls	r3, r2
 800a06a:	604a      	str	r2, [r1, #4]
 800a06c:	608b      	str	r3, [r1, #8]
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 fe30 	bl	800acd4 <_Bfree>
 800a074:	2200      	movs	r2, #0
 800a076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	1e3b      	subs	r3, r7, #0
 800a07c:	bfaf      	iteee	ge
 800a07e:	2300      	movge	r3, #0
 800a080:	2201      	movlt	r2, #1
 800a082:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a086:	9305      	strlt	r3, [sp, #20]
 800a088:	bfa8      	it	ge
 800a08a:	f8c8 3000 	strge.w	r3, [r8]
 800a08e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a092:	4b99      	ldr	r3, [pc, #612]	; (800a2f8 <_dtoa_r+0x2d0>)
 800a094:	bfb8      	it	lt
 800a096:	f8c8 2000 	strlt.w	r2, [r8]
 800a09a:	ea33 0309 	bics.w	r3, r3, r9
 800a09e:	d119      	bne.n	800a0d4 <_dtoa_r+0xac>
 800a0a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ac:	4333      	orrs	r3, r6
 800a0ae:	f000 857f 	beq.w	800abb0 <_dtoa_r+0xb88>
 800a0b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0b4:	b953      	cbnz	r3, 800a0cc <_dtoa_r+0xa4>
 800a0b6:	4b91      	ldr	r3, [pc, #580]	; (800a2fc <_dtoa_r+0x2d4>)
 800a0b8:	e022      	b.n	800a100 <_dtoa_r+0xd8>
 800a0ba:	4b91      	ldr	r3, [pc, #580]	; (800a300 <_dtoa_r+0x2d8>)
 800a0bc:	9303      	str	r3, [sp, #12]
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	9803      	ldr	r0, [sp, #12]
 800a0c6:	b019      	add	sp, #100	; 0x64
 800a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0cc:	4b8b      	ldr	r3, [pc, #556]	; (800a2fc <_dtoa_r+0x2d4>)
 800a0ce:	9303      	str	r3, [sp, #12]
 800a0d0:	3303      	adds	r3, #3
 800a0d2:	e7f5      	b.n	800a0c0 <_dtoa_r+0x98>
 800a0d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f7f6 fc6a 	bl	80009bc <__aeabi_dcmpeq>
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	b158      	cbz	r0, 800a104 <_dtoa_r+0xdc>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8558 	beq.w	800abaa <_dtoa_r+0xb82>
 800a0fa:	4882      	ldr	r0, [pc, #520]	; (800a304 <_dtoa_r+0x2dc>)
 800a0fc:	6018      	str	r0, [r3, #0]
 800a0fe:	1e43      	subs	r3, r0, #1
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	e7df      	b.n	800a0c4 <_dtoa_r+0x9c>
 800a104:	ab16      	add	r3, sp, #88	; 0x58
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	ab17      	add	r3, sp, #92	; 0x5c
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	4628      	mov	r0, r5
 800a10e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a112:	f001 f8c5 	bl	800b2a0 <__d2b>
 800a116:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a11a:	4683      	mov	fp, r0
 800a11c:	2c00      	cmp	r4, #0
 800a11e:	d07f      	beq.n	800a220 <_dtoa_r+0x1f8>
 800a120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a126:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a12e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a132:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a136:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a13a:	2200      	movs	r2, #0
 800a13c:	4b72      	ldr	r3, [pc, #456]	; (800a308 <_dtoa_r+0x2e0>)
 800a13e:	f7f6 f81d 	bl	800017c <__aeabi_dsub>
 800a142:	a365      	add	r3, pc, #404	; (adr r3, 800a2d8 <_dtoa_r+0x2b0>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f9d0 	bl	80004ec <__aeabi_dmul>
 800a14c:	a364      	add	r3, pc, #400	; (adr r3, 800a2e0 <_dtoa_r+0x2b8>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 f815 	bl	8000180 <__adddf3>
 800a156:	4606      	mov	r6, r0
 800a158:	4620      	mov	r0, r4
 800a15a:	460f      	mov	r7, r1
 800a15c:	f7f6 f95c 	bl	8000418 <__aeabi_i2d>
 800a160:	a361      	add	r3, pc, #388	; (adr r3, 800a2e8 <_dtoa_r+0x2c0>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f9c1 	bl	80004ec <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	f7f6 f805 	bl	8000180 <__adddf3>
 800a176:	4606      	mov	r6, r0
 800a178:	460f      	mov	r7, r1
 800a17a:	f7f6 fc67 	bl	8000a4c <__aeabi_d2iz>
 800a17e:	2200      	movs	r2, #0
 800a180:	4682      	mov	sl, r0
 800a182:	2300      	movs	r3, #0
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	f7f6 fc22 	bl	80009d0 <__aeabi_dcmplt>
 800a18c:	b148      	cbz	r0, 800a1a2 <_dtoa_r+0x17a>
 800a18e:	4650      	mov	r0, sl
 800a190:	f7f6 f942 	bl	8000418 <__aeabi_i2d>
 800a194:	4632      	mov	r2, r6
 800a196:	463b      	mov	r3, r7
 800a198:	f7f6 fc10 	bl	80009bc <__aeabi_dcmpeq>
 800a19c:	b908      	cbnz	r0, 800a1a2 <_dtoa_r+0x17a>
 800a19e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a1a2:	f1ba 0f16 	cmp.w	sl, #22
 800a1a6:	d858      	bhi.n	800a25a <_dtoa_r+0x232>
 800a1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1ac:	4b57      	ldr	r3, [pc, #348]	; (800a30c <_dtoa_r+0x2e4>)
 800a1ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 fc0b 	bl	80009d0 <__aeabi_dcmplt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d04f      	beq.n	800a25e <_dtoa_r+0x236>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a1c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1c8:	1b1c      	subs	r4, r3, r4
 800a1ca:	1e63      	subs	r3, r4, #1
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	bf49      	itett	mi
 800a1d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a1d4:	2300      	movpl	r3, #0
 800a1d6:	9306      	strmi	r3, [sp, #24]
 800a1d8:	2300      	movmi	r3, #0
 800a1da:	bf54      	ite	pl
 800a1dc:	9306      	strpl	r3, [sp, #24]
 800a1de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a1e0:	f1ba 0f00 	cmp.w	sl, #0
 800a1e4:	db3d      	blt.n	800a262 <_dtoa_r+0x23a>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a1ec:	4453      	add	r3, sl
 800a1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	f200 808c 	bhi.w	800a314 <_dtoa_r+0x2ec>
 800a1fc:	2b05      	cmp	r3, #5
 800a1fe:	bfc4      	itt	gt
 800a200:	3b04      	subgt	r3, #4
 800a202:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a206:	bfc8      	it	gt
 800a208:	2400      	movgt	r4, #0
 800a20a:	f1a3 0302 	sub.w	r3, r3, #2
 800a20e:	bfd8      	it	le
 800a210:	2401      	movle	r4, #1
 800a212:	2b03      	cmp	r3, #3
 800a214:	f200 808a 	bhi.w	800a32c <_dtoa_r+0x304>
 800a218:	e8df f003 	tbb	[pc, r3]
 800a21c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a220:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a224:	441c      	add	r4, r3
 800a226:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	bfc3      	ittte	gt
 800a22e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a232:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a236:	fa09 f303 	lslgt.w	r3, r9, r3
 800a23a:	f1c3 0320 	rsble	r3, r3, #32
 800a23e:	bfc6      	itte	gt
 800a240:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a244:	4318      	orrgt	r0, r3
 800a246:	fa06 f003 	lslle.w	r0, r6, r3
 800a24a:	f7f6 f8d5 	bl	80003f8 <__aeabi_ui2d>
 800a24e:	2301      	movs	r3, #1
 800a250:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a254:	3c01      	subs	r4, #1
 800a256:	9313      	str	r3, [sp, #76]	; 0x4c
 800a258:	e76f      	b.n	800a13a <_dtoa_r+0x112>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e7b2      	b.n	800a1c4 <_dtoa_r+0x19c>
 800a25e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a260:	e7b1      	b.n	800a1c6 <_dtoa_r+0x19e>
 800a262:	9b06      	ldr	r3, [sp, #24]
 800a264:	eba3 030a 	sub.w	r3, r3, sl
 800a268:	9306      	str	r3, [sp, #24]
 800a26a:	f1ca 0300 	rsb	r3, sl, #0
 800a26e:	930a      	str	r3, [sp, #40]	; 0x28
 800a270:	2300      	movs	r3, #0
 800a272:	930e      	str	r3, [sp, #56]	; 0x38
 800a274:	e7be      	b.n	800a1f4 <_dtoa_r+0x1cc>
 800a276:	2300      	movs	r3, #0
 800a278:	930b      	str	r3, [sp, #44]	; 0x2c
 800a27a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dc58      	bgt.n	800a332 <_dtoa_r+0x30a>
 800a280:	f04f 0901 	mov.w	r9, #1
 800a284:	464b      	mov	r3, r9
 800a286:	f8cd 9020 	str.w	r9, [sp, #32]
 800a28a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a28e:	2200      	movs	r2, #0
 800a290:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a292:	6042      	str	r2, [r0, #4]
 800a294:	2204      	movs	r2, #4
 800a296:	f102 0614 	add.w	r6, r2, #20
 800a29a:	429e      	cmp	r6, r3
 800a29c:	6841      	ldr	r1, [r0, #4]
 800a29e:	d94e      	bls.n	800a33e <_dtoa_r+0x316>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 fcd7 	bl	800ac54 <_Balloc>
 800a2a6:	9003      	str	r0, [sp, #12]
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d14c      	bne.n	800a346 <_dtoa_r+0x31e>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2b2:	4b17      	ldr	r3, [pc, #92]	; (800a310 <_dtoa_r+0x2e8>)
 800a2b4:	e6cc      	b.n	800a050 <_dtoa_r+0x28>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7de      	b.n	800a278 <_dtoa_r+0x250>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2c0:	eb0a 0903 	add.w	r9, sl, r3
 800a2c4:	f109 0301 	add.w	r3, r9, #1
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	9308      	str	r3, [sp, #32]
 800a2cc:	bfb8      	it	lt
 800a2ce:	2301      	movlt	r3, #1
 800a2d0:	e7dd      	b.n	800a28e <_dtoa_r+0x266>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e7f2      	b.n	800a2bc <_dtoa_r+0x294>
 800a2d6:	bf00      	nop
 800a2d8:	636f4361 	.word	0x636f4361
 800a2dc:	3fd287a7 	.word	0x3fd287a7
 800a2e0:	8b60c8b3 	.word	0x8b60c8b3
 800a2e4:	3fc68a28 	.word	0x3fc68a28
 800a2e8:	509f79fb 	.word	0x509f79fb
 800a2ec:	3fd34413 	.word	0x3fd34413
 800a2f0:	0800cb45 	.word	0x0800cb45
 800a2f4:	0800cb5c 	.word	0x0800cb5c
 800a2f8:	7ff00000 	.word	0x7ff00000
 800a2fc:	0800cb41 	.word	0x0800cb41
 800a300:	0800cb38 	.word	0x0800cb38
 800a304:	0800cb15 	.word	0x0800cb15
 800a308:	3ff80000 	.word	0x3ff80000
 800a30c:	0800cc50 	.word	0x0800cc50
 800a310:	0800cbb7 	.word	0x0800cbb7
 800a314:	2401      	movs	r4, #1
 800a316:	2300      	movs	r3, #0
 800a318:	940b      	str	r4, [sp, #44]	; 0x2c
 800a31a:	9322      	str	r3, [sp, #136]	; 0x88
 800a31c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a320:	2200      	movs	r2, #0
 800a322:	2312      	movs	r3, #18
 800a324:	f8cd 9020 	str.w	r9, [sp, #32]
 800a328:	9223      	str	r2, [sp, #140]	; 0x8c
 800a32a:	e7b0      	b.n	800a28e <_dtoa_r+0x266>
 800a32c:	2301      	movs	r3, #1
 800a32e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a330:	e7f4      	b.n	800a31c <_dtoa_r+0x2f4>
 800a332:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a336:	464b      	mov	r3, r9
 800a338:	f8cd 9020 	str.w	r9, [sp, #32]
 800a33c:	e7a7      	b.n	800a28e <_dtoa_r+0x266>
 800a33e:	3101      	adds	r1, #1
 800a340:	6041      	str	r1, [r0, #4]
 800a342:	0052      	lsls	r2, r2, #1
 800a344:	e7a7      	b.n	800a296 <_dtoa_r+0x26e>
 800a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a348:	9a03      	ldr	r2, [sp, #12]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	2b0e      	cmp	r3, #14
 800a350:	f200 80a8 	bhi.w	800a4a4 <_dtoa_r+0x47c>
 800a354:	2c00      	cmp	r4, #0
 800a356:	f000 80a5 	beq.w	800a4a4 <_dtoa_r+0x47c>
 800a35a:	f1ba 0f00 	cmp.w	sl, #0
 800a35e:	dd34      	ble.n	800a3ca <_dtoa_r+0x3a2>
 800a360:	4a9a      	ldr	r2, [pc, #616]	; (800a5cc <_dtoa_r+0x5a4>)
 800a362:	f00a 030f 	and.w	r3, sl, #15
 800a366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a36a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a36e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a376:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a37a:	d016      	beq.n	800a3aa <_dtoa_r+0x382>
 800a37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a380:	4b93      	ldr	r3, [pc, #588]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a382:	2703      	movs	r7, #3
 800a384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a388:	f7f6 f9da 	bl	8000740 <__aeabi_ddiv>
 800a38c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a390:	f004 040f 	and.w	r4, r4, #15
 800a394:	4e8e      	ldr	r6, [pc, #568]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a396:	b954      	cbnz	r4, 800a3ae <_dtoa_r+0x386>
 800a398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a0:	f7f6 f9ce 	bl	8000740 <__aeabi_ddiv>
 800a3a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a8:	e029      	b.n	800a3fe <_dtoa_r+0x3d6>
 800a3aa:	2702      	movs	r7, #2
 800a3ac:	e7f2      	b.n	800a394 <_dtoa_r+0x36c>
 800a3ae:	07e1      	lsls	r1, r4, #31
 800a3b0:	d508      	bpl.n	800a3c4 <_dtoa_r+0x39c>
 800a3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3ba:	f7f6 f897 	bl	80004ec <__aeabi_dmul>
 800a3be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3c2:	3701      	adds	r7, #1
 800a3c4:	1064      	asrs	r4, r4, #1
 800a3c6:	3608      	adds	r6, #8
 800a3c8:	e7e5      	b.n	800a396 <_dtoa_r+0x36e>
 800a3ca:	f000 80a5 	beq.w	800a518 <_dtoa_r+0x4f0>
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3d2:	f1ca 0400 	rsb	r4, sl, #0
 800a3d6:	4b7d      	ldr	r3, [pc, #500]	; (800a5cc <_dtoa_r+0x5a4>)
 800a3d8:	f004 020f 	and.w	r2, r4, #15
 800a3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f6 f882 	bl	80004ec <__aeabi_dmul>
 800a3e8:	2702      	movs	r7, #2
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f0:	4e77      	ldr	r6, [pc, #476]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a3f2:	1124      	asrs	r4, r4, #4
 800a3f4:	2c00      	cmp	r4, #0
 800a3f6:	f040 8084 	bne.w	800a502 <_dtoa_r+0x4da>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1d2      	bne.n	800a3a4 <_dtoa_r+0x37c>
 800a3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 808b 	beq.w	800a51c <_dtoa_r+0x4f4>
 800a406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a40a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a40e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a412:	2200      	movs	r2, #0
 800a414:	4b6f      	ldr	r3, [pc, #444]	; (800a5d4 <_dtoa_r+0x5ac>)
 800a416:	f7f6 fadb 	bl	80009d0 <__aeabi_dcmplt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d07e      	beq.n	800a51c <_dtoa_r+0x4f4>
 800a41e:	9b08      	ldr	r3, [sp, #32]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d07b      	beq.n	800a51c <_dtoa_r+0x4f4>
 800a424:	f1b9 0f00 	cmp.w	r9, #0
 800a428:	dd38      	ble.n	800a49c <_dtoa_r+0x474>
 800a42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a42e:	2200      	movs	r2, #0
 800a430:	4b69      	ldr	r3, [pc, #420]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a432:	f7f6 f85b 	bl	80004ec <__aeabi_dmul>
 800a436:	464c      	mov	r4, r9
 800a438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a43c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a440:	3701      	adds	r7, #1
 800a442:	4638      	mov	r0, r7
 800a444:	f7f5 ffe8 	bl	8000418 <__aeabi_i2d>
 800a448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44c:	f7f6 f84e 	bl	80004ec <__aeabi_dmul>
 800a450:	2200      	movs	r2, #0
 800a452:	4b62      	ldr	r3, [pc, #392]	; (800a5dc <_dtoa_r+0x5b4>)
 800a454:	f7f5 fe94 	bl	8000180 <__adddf3>
 800a458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a45c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a460:	9611      	str	r6, [sp, #68]	; 0x44
 800a462:	2c00      	cmp	r4, #0
 800a464:	d15d      	bne.n	800a522 <_dtoa_r+0x4fa>
 800a466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46a:	2200      	movs	r2, #0
 800a46c:	4b5c      	ldr	r3, [pc, #368]	; (800a5e0 <_dtoa_r+0x5b8>)
 800a46e:	f7f5 fe85 	bl	800017c <__aeabi_dsub>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a47a:	4633      	mov	r3, r6
 800a47c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a47e:	f7f6 fac5 	bl	8000a0c <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	f040 829c 	bne.w	800a9c0 <_dtoa_r+0x998>
 800a488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a48e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a492:	f7f6 fa9d 	bl	80009d0 <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8290 	bne.w	800a9bc <_dtoa_r+0x994>
 800a49c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a4a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a4a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f2c0 8152 	blt.w	800a750 <_dtoa_r+0x728>
 800a4ac:	f1ba 0f0e 	cmp.w	sl, #14
 800a4b0:	f300 814e 	bgt.w	800a750 <_dtoa_r+0x728>
 800a4b4:	4b45      	ldr	r3, [pc, #276]	; (800a5cc <_dtoa_r+0x5a4>)
 800a4b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a4c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f280 80db 	bge.w	800a680 <_dtoa_r+0x658>
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f300 80d7 	bgt.w	800a680 <_dtoa_r+0x658>
 800a4d2:	f040 8272 	bne.w	800a9ba <_dtoa_r+0x992>
 800a4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4b40      	ldr	r3, [pc, #256]	; (800a5e0 <_dtoa_r+0x5b8>)
 800a4de:	f7f6 f805 	bl	80004ec <__aeabi_dmul>
 800a4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e6:	f7f6 fa87 	bl	80009f8 <__aeabi_dcmpge>
 800a4ea:	9c08      	ldr	r4, [sp, #32]
 800a4ec:	4626      	mov	r6, r4
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f040 8248 	bne.w	800a984 <_dtoa_r+0x95c>
 800a4f4:	2331      	movs	r3, #49	; 0x31
 800a4f6:	9f03      	ldr	r7, [sp, #12]
 800a4f8:	f10a 0a01 	add.w	sl, sl, #1
 800a4fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a500:	e244      	b.n	800a98c <_dtoa_r+0x964>
 800a502:	07e2      	lsls	r2, r4, #31
 800a504:	d505      	bpl.n	800a512 <_dtoa_r+0x4ea>
 800a506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a50a:	f7f5 ffef 	bl	80004ec <__aeabi_dmul>
 800a50e:	2301      	movs	r3, #1
 800a510:	3701      	adds	r7, #1
 800a512:	1064      	asrs	r4, r4, #1
 800a514:	3608      	adds	r6, #8
 800a516:	e76d      	b.n	800a3f4 <_dtoa_r+0x3cc>
 800a518:	2702      	movs	r7, #2
 800a51a:	e770      	b.n	800a3fe <_dtoa_r+0x3d6>
 800a51c:	46d0      	mov	r8, sl
 800a51e:	9c08      	ldr	r4, [sp, #32]
 800a520:	e78f      	b.n	800a442 <_dtoa_r+0x41a>
 800a522:	9903      	ldr	r1, [sp, #12]
 800a524:	4b29      	ldr	r3, [pc, #164]	; (800a5cc <_dtoa_r+0x5a4>)
 800a526:	4421      	add	r1, r4
 800a528:	9112      	str	r1, [sp, #72]	; 0x48
 800a52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a52c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a538:	2900      	cmp	r1, #0
 800a53a:	d055      	beq.n	800a5e8 <_dtoa_r+0x5c0>
 800a53c:	2000      	movs	r0, #0
 800a53e:	4929      	ldr	r1, [pc, #164]	; (800a5e4 <_dtoa_r+0x5bc>)
 800a540:	f7f6 f8fe 	bl	8000740 <__aeabi_ddiv>
 800a544:	463b      	mov	r3, r7
 800a546:	4632      	mov	r2, r6
 800a548:	f7f5 fe18 	bl	800017c <__aeabi_dsub>
 800a54c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a550:	9f03      	ldr	r7, [sp, #12]
 800a552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a556:	f7f6 fa79 	bl	8000a4c <__aeabi_d2iz>
 800a55a:	4604      	mov	r4, r0
 800a55c:	f7f5 ff5c 	bl	8000418 <__aeabi_i2d>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a568:	f7f5 fe08 	bl	800017c <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	3430      	adds	r4, #48	; 0x30
 800a572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a57a:	f807 4b01 	strb.w	r4, [r7], #1
 800a57e:	f7f6 fa27 	bl	80009d0 <__aeabi_dcmplt>
 800a582:	2800      	cmp	r0, #0
 800a584:	d174      	bne.n	800a670 <_dtoa_r+0x648>
 800a586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58a:	2000      	movs	r0, #0
 800a58c:	4911      	ldr	r1, [pc, #68]	; (800a5d4 <_dtoa_r+0x5ac>)
 800a58e:	f7f5 fdf5 	bl	800017c <__aeabi_dsub>
 800a592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a596:	f7f6 fa1b 	bl	80009d0 <__aeabi_dcmplt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f040 80b7 	bne.w	800a70e <_dtoa_r+0x6e6>
 800a5a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5a2:	429f      	cmp	r7, r3
 800a5a4:	f43f af7a 	beq.w	800a49c <_dtoa_r+0x474>
 800a5a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a5b0:	f7f5 ff9c 	bl	80004ec <__aeabi_dmul>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a5c0:	f7f5 ff94 	bl	80004ec <__aeabi_dmul>
 800a5c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c8:	e7c3      	b.n	800a552 <_dtoa_r+0x52a>
 800a5ca:	bf00      	nop
 800a5cc:	0800cc50 	.word	0x0800cc50
 800a5d0:	0800cc28 	.word	0x0800cc28
 800a5d4:	3ff00000 	.word	0x3ff00000
 800a5d8:	40240000 	.word	0x40240000
 800a5dc:	401c0000 	.word	0x401c0000
 800a5e0:	40140000 	.word	0x40140000
 800a5e4:	3fe00000 	.word	0x3fe00000
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 ff7e 	bl	80004ec <__aeabi_dmul>
 800a5f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5f6:	9c03      	ldr	r4, [sp, #12]
 800a5f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5fe:	f7f6 fa25 	bl	8000a4c <__aeabi_d2iz>
 800a602:	9015      	str	r0, [sp, #84]	; 0x54
 800a604:	f7f5 ff08 	bl	8000418 <__aeabi_i2d>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a610:	f7f5 fdb4 	bl	800017c <__aeabi_dsub>
 800a614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a616:	4606      	mov	r6, r0
 800a618:	3330      	adds	r3, #48	; 0x30
 800a61a:	f804 3b01 	strb.w	r3, [r4], #1
 800a61e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a620:	460f      	mov	r7, r1
 800a622:	429c      	cmp	r4, r3
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	d124      	bne.n	800a674 <_dtoa_r+0x64c>
 800a62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a62e:	4bb0      	ldr	r3, [pc, #704]	; (800a8f0 <_dtoa_r+0x8c8>)
 800a630:	f7f5 fda6 	bl	8000180 <__adddf3>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4630      	mov	r0, r6
 800a63a:	4639      	mov	r1, r7
 800a63c:	f7f6 f9e6 	bl	8000a0c <__aeabi_dcmpgt>
 800a640:	2800      	cmp	r0, #0
 800a642:	d163      	bne.n	800a70c <_dtoa_r+0x6e4>
 800a644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a648:	2000      	movs	r0, #0
 800a64a:	49a9      	ldr	r1, [pc, #676]	; (800a8f0 <_dtoa_r+0x8c8>)
 800a64c:	f7f5 fd96 	bl	800017c <__aeabi_dsub>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f6 f9ba 	bl	80009d0 <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f43f af1d 	beq.w	800a49c <_dtoa_r+0x474>
 800a662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a664:	1e7b      	subs	r3, r7, #1
 800a666:	9314      	str	r3, [sp, #80]	; 0x50
 800a668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a66c:	2b30      	cmp	r3, #48	; 0x30
 800a66e:	d0f8      	beq.n	800a662 <_dtoa_r+0x63a>
 800a670:	46c2      	mov	sl, r8
 800a672:	e03b      	b.n	800a6ec <_dtoa_r+0x6c4>
 800a674:	4b9f      	ldr	r3, [pc, #636]	; (800a8f4 <_dtoa_r+0x8cc>)
 800a676:	f7f5 ff39 	bl	80004ec <__aeabi_dmul>
 800a67a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a67e:	e7bc      	b.n	800a5fa <_dtoa_r+0x5d2>
 800a680:	9f03      	ldr	r7, [sp, #12]
 800a682:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f6 f857 	bl	8000740 <__aeabi_ddiv>
 800a692:	f7f6 f9db 	bl	8000a4c <__aeabi_d2iz>
 800a696:	4604      	mov	r4, r0
 800a698:	f7f5 febe 	bl	8000418 <__aeabi_i2d>
 800a69c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6a0:	f7f5 ff24 	bl	80004ec <__aeabi_dmul>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	f7f5 fd66 	bl	800017c <__aeabi_dsub>
 800a6b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a6b4:	f807 6b01 	strb.w	r6, [r7], #1
 800a6b8:	9e03      	ldr	r6, [sp, #12]
 800a6ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a6be:	1bbe      	subs	r6, r7, r6
 800a6c0:	45b4      	cmp	ip, r6
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	d136      	bne.n	800a736 <_dtoa_r+0x70e>
 800a6c8:	f7f5 fd5a 	bl	8000180 <__adddf3>
 800a6cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	f7f6 f99a 	bl	8000a0c <__aeabi_dcmpgt>
 800a6d8:	bb58      	cbnz	r0, 800a732 <_dtoa_r+0x70a>
 800a6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f6 f96b 	bl	80009bc <__aeabi_dcmpeq>
 800a6e6:	b108      	cbz	r0, 800a6ec <_dtoa_r+0x6c4>
 800a6e8:	07e1      	lsls	r1, r4, #31
 800a6ea:	d422      	bmi.n	800a732 <_dtoa_r+0x70a>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	f000 faf0 	bl	800acd4 <_Bfree>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	703b      	strb	r3, [r7, #0]
 800a6f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6fa:	f10a 0001 	add.w	r0, sl, #1
 800a6fe:	6018      	str	r0, [r3, #0]
 800a700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a702:	2b00      	cmp	r3, #0
 800a704:	f43f acde 	beq.w	800a0c4 <_dtoa_r+0x9c>
 800a708:	601f      	str	r7, [r3, #0]
 800a70a:	e4db      	b.n	800a0c4 <_dtoa_r+0x9c>
 800a70c:	4627      	mov	r7, r4
 800a70e:	463b      	mov	r3, r7
 800a710:	461f      	mov	r7, r3
 800a712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a716:	2a39      	cmp	r2, #57	; 0x39
 800a718:	d107      	bne.n	800a72a <_dtoa_r+0x702>
 800a71a:	9a03      	ldr	r2, [sp, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d1f7      	bne.n	800a710 <_dtoa_r+0x6e8>
 800a720:	2230      	movs	r2, #48	; 0x30
 800a722:	9903      	ldr	r1, [sp, #12]
 800a724:	f108 0801 	add.w	r8, r8, #1
 800a728:	700a      	strb	r2, [r1, #0]
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	3201      	adds	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	e79e      	b.n	800a670 <_dtoa_r+0x648>
 800a732:	46d0      	mov	r8, sl
 800a734:	e7eb      	b.n	800a70e <_dtoa_r+0x6e6>
 800a736:	2200      	movs	r2, #0
 800a738:	4b6e      	ldr	r3, [pc, #440]	; (800a8f4 <_dtoa_r+0x8cc>)
 800a73a:	f7f5 fed7 	bl	80004ec <__aeabi_dmul>
 800a73e:	2200      	movs	r2, #0
 800a740:	2300      	movs	r3, #0
 800a742:	4680      	mov	r8, r0
 800a744:	4689      	mov	r9, r1
 800a746:	f7f6 f939 	bl	80009bc <__aeabi_dcmpeq>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d09b      	beq.n	800a686 <_dtoa_r+0x65e>
 800a74e:	e7cd      	b.n	800a6ec <_dtoa_r+0x6c4>
 800a750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a752:	2a00      	cmp	r2, #0
 800a754:	f000 80d0 	beq.w	800a8f8 <_dtoa_r+0x8d0>
 800a758:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a75a:	2a01      	cmp	r2, #1
 800a75c:	f300 80ae 	bgt.w	800a8bc <_dtoa_r+0x894>
 800a760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a762:	2a00      	cmp	r2, #0
 800a764:	f000 80a6 	beq.w	800a8b4 <_dtoa_r+0x88c>
 800a768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a76c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a76e:	9f06      	ldr	r7, [sp, #24]
 800a770:	9a06      	ldr	r2, [sp, #24]
 800a772:	2101      	movs	r1, #1
 800a774:	441a      	add	r2, r3
 800a776:	9206      	str	r2, [sp, #24]
 800a778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77a:	4628      	mov	r0, r5
 800a77c:	441a      	add	r2, r3
 800a77e:	9209      	str	r2, [sp, #36]	; 0x24
 800a780:	f000 fb5e 	bl	800ae40 <__i2b>
 800a784:	4606      	mov	r6, r0
 800a786:	2f00      	cmp	r7, #0
 800a788:	dd0c      	ble.n	800a7a4 <_dtoa_r+0x77c>
 800a78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd09      	ble.n	800a7a4 <_dtoa_r+0x77c>
 800a790:	42bb      	cmp	r3, r7
 800a792:	bfa8      	it	ge
 800a794:	463b      	movge	r3, r7
 800a796:	9a06      	ldr	r2, [sp, #24]
 800a798:	1aff      	subs	r7, r7, r3
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	9206      	str	r2, [sp, #24]
 800a79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	b1f3      	cbz	r3, 800a7e6 <_dtoa_r+0x7be>
 800a7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 80a8 	beq.w	800a900 <_dtoa_r+0x8d8>
 800a7b0:	2c00      	cmp	r4, #0
 800a7b2:	dd10      	ble.n	800a7d6 <_dtoa_r+0x7ae>
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f000 fbff 	bl	800afbc <__pow5mult>
 800a7be:	465a      	mov	r2, fp
 800a7c0:	4601      	mov	r1, r0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f000 fb51 	bl	800ae6c <__multiply>
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f000 fa80 	bl	800acd4 <_Bfree>
 800a7d4:	46c3      	mov	fp, r8
 800a7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d8:	1b1a      	subs	r2, r3, r4
 800a7da:	d004      	beq.n	800a7e6 <_dtoa_r+0x7be>
 800a7dc:	4659      	mov	r1, fp
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 fbec 	bl	800afbc <__pow5mult>
 800a7e4:	4683      	mov	fp, r0
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f000 fb29 	bl	800ae40 <__i2b>
 800a7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f340 8086 	ble.w	800a904 <_dtoa_r+0x8dc>
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 fbdd 	bl	800afbc <__pow5mult>
 800a802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a804:	4604      	mov	r4, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	dd7f      	ble.n	800a90a <_dtoa_r+0x8e2>
 800a80a:	f04f 0800 	mov.w	r8, #0
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a814:	6918      	ldr	r0, [r3, #16]
 800a816:	f000 fac5 	bl	800ada4 <__hi0bits>
 800a81a:	f1c0 0020 	rsb	r0, r0, #32
 800a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a820:	4418      	add	r0, r3
 800a822:	f010 001f 	ands.w	r0, r0, #31
 800a826:	f000 8092 	beq.w	800a94e <_dtoa_r+0x926>
 800a82a:	f1c0 0320 	rsb	r3, r0, #32
 800a82e:	2b04      	cmp	r3, #4
 800a830:	f340 808a 	ble.w	800a948 <_dtoa_r+0x920>
 800a834:	f1c0 001c 	rsb	r0, r0, #28
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	4407      	add	r7, r0
 800a83c:	4403      	add	r3, r0
 800a83e:	9306      	str	r3, [sp, #24]
 800a840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a842:	4403      	add	r3, r0
 800a844:	9309      	str	r3, [sp, #36]	; 0x24
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dd05      	ble.n	800a858 <_dtoa_r+0x830>
 800a84c:	4659      	mov	r1, fp
 800a84e:	461a      	mov	r2, r3
 800a850:	4628      	mov	r0, r5
 800a852:	f000 fc0d 	bl	800b070 <__lshift>
 800a856:	4683      	mov	fp, r0
 800a858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dd05      	ble.n	800a86a <_dtoa_r+0x842>
 800a85e:	4621      	mov	r1, r4
 800a860:	461a      	mov	r2, r3
 800a862:	4628      	mov	r0, r5
 800a864:	f000 fc04 	bl	800b070 <__lshift>
 800a868:	4604      	mov	r4, r0
 800a86a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d070      	beq.n	800a952 <_dtoa_r+0x92a>
 800a870:	4621      	mov	r1, r4
 800a872:	4658      	mov	r0, fp
 800a874:	f000 fc6c 	bl	800b150 <__mcmp>
 800a878:	2800      	cmp	r0, #0
 800a87a:	da6a      	bge.n	800a952 <_dtoa_r+0x92a>
 800a87c:	2300      	movs	r3, #0
 800a87e:	4659      	mov	r1, fp
 800a880:	220a      	movs	r2, #10
 800a882:	4628      	mov	r0, r5
 800a884:	f000 fa48 	bl	800ad18 <__multadd>
 800a888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88a:	4683      	mov	fp, r0
 800a88c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8194 	beq.w	800abbe <_dtoa_r+0xb96>
 800a896:	4631      	mov	r1, r6
 800a898:	2300      	movs	r3, #0
 800a89a:	220a      	movs	r2, #10
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 fa3b 	bl	800ad18 <__multadd>
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	f300 8093 	bgt.w	800a9d2 <_dtoa_r+0x9aa>
 800a8ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	dc57      	bgt.n	800a962 <_dtoa_r+0x93a>
 800a8b2:	e08e      	b.n	800a9d2 <_dtoa_r+0x9aa>
 800a8b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8ba:	e757      	b.n	800a76c <_dtoa_r+0x744>
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	1e5c      	subs	r4, r3, #1
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	bfb7      	itett	lt
 800a8c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8c8:	1b1c      	subge	r4, r3, r4
 800a8ca:	1ae2      	sublt	r2, r4, r3
 800a8cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a8ce:	bfbe      	ittt	lt
 800a8d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a8d2:	189b      	addlt	r3, r3, r2
 800a8d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a8d6:	9b08      	ldr	r3, [sp, #32]
 800a8d8:	bfb8      	it	lt
 800a8da:	2400      	movlt	r4, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bfbb      	ittet	lt
 800a8e0:	9b06      	ldrlt	r3, [sp, #24]
 800a8e2:	9a08      	ldrlt	r2, [sp, #32]
 800a8e4:	9f06      	ldrge	r7, [sp, #24]
 800a8e6:	1a9f      	sublt	r7, r3, r2
 800a8e8:	bfac      	ite	ge
 800a8ea:	9b08      	ldrge	r3, [sp, #32]
 800a8ec:	2300      	movlt	r3, #0
 800a8ee:	e73f      	b.n	800a770 <_dtoa_r+0x748>
 800a8f0:	3fe00000 	.word	0x3fe00000
 800a8f4:	40240000 	.word	0x40240000
 800a8f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8fa:	9f06      	ldr	r7, [sp, #24]
 800a8fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a8fe:	e742      	b.n	800a786 <_dtoa_r+0x75e>
 800a900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a902:	e76b      	b.n	800a7dc <_dtoa_r+0x7b4>
 800a904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a906:	2b01      	cmp	r3, #1
 800a908:	dc19      	bgt.n	800a93e <_dtoa_r+0x916>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	b9bb      	cbnz	r3, 800a93e <_dtoa_r+0x916>
 800a90e:	9b05      	ldr	r3, [sp, #20]
 800a910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a914:	b99b      	cbnz	r3, 800a93e <_dtoa_r+0x916>
 800a916:	9b05      	ldr	r3, [sp, #20]
 800a918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a91c:	0d1b      	lsrs	r3, r3, #20
 800a91e:	051b      	lsls	r3, r3, #20
 800a920:	b183      	cbz	r3, 800a944 <_dtoa_r+0x91c>
 800a922:	f04f 0801 	mov.w	r8, #1
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	3301      	adds	r3, #1
 800a92a:	9306      	str	r3, [sp, #24]
 800a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92e:	3301      	adds	r3, #1
 800a930:	9309      	str	r3, [sp, #36]	; 0x24
 800a932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	f47f af6a 	bne.w	800a80e <_dtoa_r+0x7e6>
 800a93a:	2001      	movs	r0, #1
 800a93c:	e76f      	b.n	800a81e <_dtoa_r+0x7f6>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	e7f6      	b.n	800a932 <_dtoa_r+0x90a>
 800a944:	4698      	mov	r8, r3
 800a946:	e7f4      	b.n	800a932 <_dtoa_r+0x90a>
 800a948:	f43f af7d 	beq.w	800a846 <_dtoa_r+0x81e>
 800a94c:	4618      	mov	r0, r3
 800a94e:	301c      	adds	r0, #28
 800a950:	e772      	b.n	800a838 <_dtoa_r+0x810>
 800a952:	9b08      	ldr	r3, [sp, #32]
 800a954:	2b00      	cmp	r3, #0
 800a956:	dc36      	bgt.n	800a9c6 <_dtoa_r+0x99e>
 800a958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	dd33      	ble.n	800a9c6 <_dtoa_r+0x99e>
 800a95e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a962:	f1b9 0f00 	cmp.w	r9, #0
 800a966:	d10d      	bne.n	800a984 <_dtoa_r+0x95c>
 800a968:	4621      	mov	r1, r4
 800a96a:	464b      	mov	r3, r9
 800a96c:	2205      	movs	r2, #5
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f9d2 	bl	800ad18 <__multadd>
 800a974:	4601      	mov	r1, r0
 800a976:	4604      	mov	r4, r0
 800a978:	4658      	mov	r0, fp
 800a97a:	f000 fbe9 	bl	800b150 <__mcmp>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f73f adb8 	bgt.w	800a4f4 <_dtoa_r+0x4cc>
 800a984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a986:	9f03      	ldr	r7, [sp, #12]
 800a988:	ea6f 0a03 	mvn.w	sl, r3
 800a98c:	f04f 0800 	mov.w	r8, #0
 800a990:	4621      	mov	r1, r4
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f99e 	bl	800acd4 <_Bfree>
 800a998:	2e00      	cmp	r6, #0
 800a99a:	f43f aea7 	beq.w	800a6ec <_dtoa_r+0x6c4>
 800a99e:	f1b8 0f00 	cmp.w	r8, #0
 800a9a2:	d005      	beq.n	800a9b0 <_dtoa_r+0x988>
 800a9a4:	45b0      	cmp	r8, r6
 800a9a6:	d003      	beq.n	800a9b0 <_dtoa_r+0x988>
 800a9a8:	4641      	mov	r1, r8
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 f992 	bl	800acd4 <_Bfree>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 f98e 	bl	800acd4 <_Bfree>
 800a9b8:	e698      	b.n	800a6ec <_dtoa_r+0x6c4>
 800a9ba:	2400      	movs	r4, #0
 800a9bc:	4626      	mov	r6, r4
 800a9be:	e7e1      	b.n	800a984 <_dtoa_r+0x95c>
 800a9c0:	46c2      	mov	sl, r8
 800a9c2:	4626      	mov	r6, r4
 800a9c4:	e596      	b.n	800a4f4 <_dtoa_r+0x4cc>
 800a9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 80fd 	beq.w	800abcc <_dtoa_r+0xba4>
 800a9d2:	2f00      	cmp	r7, #0
 800a9d4:	dd05      	ble.n	800a9e2 <_dtoa_r+0x9ba>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	463a      	mov	r2, r7
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 fb48 	bl	800b070 <__lshift>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	f1b8 0f00 	cmp.w	r8, #0
 800a9e6:	d05c      	beq.n	800aaa2 <_dtoa_r+0xa7a>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	6871      	ldr	r1, [r6, #4]
 800a9ec:	f000 f932 	bl	800ac54 <_Balloc>
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	b928      	cbnz	r0, 800aa00 <_dtoa_r+0x9d8>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9fa:	4b7f      	ldr	r3, [pc, #508]	; (800abf8 <_dtoa_r+0xbd0>)
 800a9fc:	f7ff bb28 	b.w	800a050 <_dtoa_r+0x28>
 800aa00:	6932      	ldr	r2, [r6, #16]
 800aa02:	f106 010c 	add.w	r1, r6, #12
 800aa06:	3202      	adds	r2, #2
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	300c      	adds	r0, #12
 800aa0c:	f000 f914 	bl	800ac38 <memcpy>
 800aa10:	2201      	movs	r2, #1
 800aa12:	4639      	mov	r1, r7
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 fb2b 	bl	800b070 <__lshift>
 800aa1a:	46b0      	mov	r8, r6
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	3301      	adds	r3, #1
 800aa22:	9308      	str	r3, [sp, #32]
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	444b      	add	r3, r9
 800aa28:	930a      	str	r3, [sp, #40]	; 0x28
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	9309      	str	r3, [sp, #36]	; 0x24
 800aa32:	9b08      	ldr	r3, [sp, #32]
 800aa34:	4621      	mov	r1, r4
 800aa36:	3b01      	subs	r3, #1
 800aa38:	4658      	mov	r0, fp
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	f7ff fa66 	bl	8009f0c <quorem>
 800aa40:	4603      	mov	r3, r0
 800aa42:	4641      	mov	r1, r8
 800aa44:	3330      	adds	r3, #48	; 0x30
 800aa46:	9006      	str	r0, [sp, #24]
 800aa48:	4658      	mov	r0, fp
 800aa4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4c:	f000 fb80 	bl	800b150 <__mcmp>
 800aa50:	4632      	mov	r2, r6
 800aa52:	4681      	mov	r9, r0
 800aa54:	4621      	mov	r1, r4
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 fb96 	bl	800b188 <__mdiff>
 800aa5c:	68c2      	ldr	r2, [r0, #12]
 800aa5e:	4607      	mov	r7, r0
 800aa60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa62:	bb02      	cbnz	r2, 800aaa6 <_dtoa_r+0xa7e>
 800aa64:	4601      	mov	r1, r0
 800aa66:	4658      	mov	r0, fp
 800aa68:	f000 fb72 	bl	800b150 <__mcmp>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa70:	4639      	mov	r1, r7
 800aa72:	4628      	mov	r0, r5
 800aa74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aa78:	f000 f92c 	bl	800acd4 <_Bfree>
 800aa7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa80:	9f08      	ldr	r7, [sp, #32]
 800aa82:	ea43 0102 	orr.w	r1, r3, r2
 800aa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8c:	d10d      	bne.n	800aaaa <_dtoa_r+0xa82>
 800aa8e:	2b39      	cmp	r3, #57	; 0x39
 800aa90:	d029      	beq.n	800aae6 <_dtoa_r+0xabe>
 800aa92:	f1b9 0f00 	cmp.w	r9, #0
 800aa96:	dd01      	ble.n	800aa9c <_dtoa_r+0xa74>
 800aa98:	9b06      	ldr	r3, [sp, #24]
 800aa9a:	3331      	adds	r3, #49	; 0x31
 800aa9c:	9a04      	ldr	r2, [sp, #16]
 800aa9e:	7013      	strb	r3, [r2, #0]
 800aaa0:	e776      	b.n	800a990 <_dtoa_r+0x968>
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	e7b9      	b.n	800aa1a <_dtoa_r+0x9f2>
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	e7e2      	b.n	800aa70 <_dtoa_r+0xa48>
 800aaaa:	f1b9 0f00 	cmp.w	r9, #0
 800aaae:	db06      	blt.n	800aabe <_dtoa_r+0xa96>
 800aab0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aab2:	ea41 0909 	orr.w	r9, r1, r9
 800aab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aab8:	ea59 0101 	orrs.w	r1, r9, r1
 800aabc:	d120      	bne.n	800ab00 <_dtoa_r+0xad8>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	ddec      	ble.n	800aa9c <_dtoa_r+0xa74>
 800aac2:	4659      	mov	r1, fp
 800aac4:	2201      	movs	r2, #1
 800aac6:	4628      	mov	r0, r5
 800aac8:	9308      	str	r3, [sp, #32]
 800aaca:	f000 fad1 	bl	800b070 <__lshift>
 800aace:	4621      	mov	r1, r4
 800aad0:	4683      	mov	fp, r0
 800aad2:	f000 fb3d 	bl	800b150 <__mcmp>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	dc02      	bgt.n	800aae2 <_dtoa_r+0xaba>
 800aadc:	d1de      	bne.n	800aa9c <_dtoa_r+0xa74>
 800aade:	07da      	lsls	r2, r3, #31
 800aae0:	d5dc      	bpl.n	800aa9c <_dtoa_r+0xa74>
 800aae2:	2b39      	cmp	r3, #57	; 0x39
 800aae4:	d1d8      	bne.n	800aa98 <_dtoa_r+0xa70>
 800aae6:	2339      	movs	r3, #57	; 0x39
 800aae8:	9a04      	ldr	r2, [sp, #16]
 800aaea:	7013      	strb	r3, [r2, #0]
 800aaec:	463b      	mov	r3, r7
 800aaee:	461f      	mov	r7, r3
 800aaf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2a39      	cmp	r2, #57	; 0x39
 800aaf8:	d050      	beq.n	800ab9c <_dtoa_r+0xb74>
 800aafa:	3201      	adds	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	e747      	b.n	800a990 <_dtoa_r+0x968>
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	dd03      	ble.n	800ab0c <_dtoa_r+0xae4>
 800ab04:	2b39      	cmp	r3, #57	; 0x39
 800ab06:	d0ee      	beq.n	800aae6 <_dtoa_r+0xabe>
 800ab08:	3301      	adds	r3, #1
 800ab0a:	e7c7      	b.n	800aa9c <_dtoa_r+0xa74>
 800ab0c:	9a08      	ldr	r2, [sp, #32]
 800ab0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d02a      	beq.n	800ab6e <_dtoa_r+0xb46>
 800ab18:	4659      	mov	r1, fp
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	220a      	movs	r2, #10
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 f8fa 	bl	800ad18 <__multadd>
 800ab24:	45b0      	cmp	r8, r6
 800ab26:	4683      	mov	fp, r0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	f04f 020a 	mov.w	r2, #10
 800ab30:	4641      	mov	r1, r8
 800ab32:	4628      	mov	r0, r5
 800ab34:	d107      	bne.n	800ab46 <_dtoa_r+0xb1e>
 800ab36:	f000 f8ef 	bl	800ad18 <__multadd>
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	9b08      	ldr	r3, [sp, #32]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9308      	str	r3, [sp, #32]
 800ab44:	e775      	b.n	800aa32 <_dtoa_r+0xa0a>
 800ab46:	f000 f8e7 	bl	800ad18 <__multadd>
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	220a      	movs	r2, #10
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 f8e0 	bl	800ad18 <__multadd>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	e7f0      	b.n	800ab3e <_dtoa_r+0xb16>
 800ab5c:	f1b9 0f00 	cmp.w	r9, #0
 800ab60:	bfcc      	ite	gt
 800ab62:	464f      	movgt	r7, r9
 800ab64:	2701      	movle	r7, #1
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	9a03      	ldr	r2, [sp, #12]
 800ab6c:	4417      	add	r7, r2
 800ab6e:	4659      	mov	r1, fp
 800ab70:	2201      	movs	r2, #1
 800ab72:	4628      	mov	r0, r5
 800ab74:	9308      	str	r3, [sp, #32]
 800ab76:	f000 fa7b 	bl	800b070 <__lshift>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4683      	mov	fp, r0
 800ab7e:	f000 fae7 	bl	800b150 <__mcmp>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dcb2      	bgt.n	800aaec <_dtoa_r+0xac4>
 800ab86:	d102      	bne.n	800ab8e <_dtoa_r+0xb66>
 800ab88:	9b08      	ldr	r3, [sp, #32]
 800ab8a:	07db      	lsls	r3, r3, #31
 800ab8c:	d4ae      	bmi.n	800aaec <_dtoa_r+0xac4>
 800ab8e:	463b      	mov	r3, r7
 800ab90:	461f      	mov	r7, r3
 800ab92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab96:	2a30      	cmp	r2, #48	; 0x30
 800ab98:	d0fa      	beq.n	800ab90 <_dtoa_r+0xb68>
 800ab9a:	e6f9      	b.n	800a990 <_dtoa_r+0x968>
 800ab9c:	9a03      	ldr	r2, [sp, #12]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d1a5      	bne.n	800aaee <_dtoa_r+0xac6>
 800aba2:	2331      	movs	r3, #49	; 0x31
 800aba4:	f10a 0a01 	add.w	sl, sl, #1
 800aba8:	e779      	b.n	800aa9e <_dtoa_r+0xa76>
 800abaa:	4b14      	ldr	r3, [pc, #80]	; (800abfc <_dtoa_r+0xbd4>)
 800abac:	f7ff baa8 	b.w	800a100 <_dtoa_r+0xd8>
 800abb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f47f aa81 	bne.w	800a0ba <_dtoa_r+0x92>
 800abb8:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <_dtoa_r+0xbd8>)
 800abba:	f7ff baa1 	b.w	800a100 <_dtoa_r+0xd8>
 800abbe:	f1b9 0f00 	cmp.w	r9, #0
 800abc2:	dc03      	bgt.n	800abcc <_dtoa_r+0xba4>
 800abc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	f73f aecb 	bgt.w	800a962 <_dtoa_r+0x93a>
 800abcc:	9f03      	ldr	r7, [sp, #12]
 800abce:	4621      	mov	r1, r4
 800abd0:	4658      	mov	r0, fp
 800abd2:	f7ff f99b 	bl	8009f0c <quorem>
 800abd6:	9a03      	ldr	r2, [sp, #12]
 800abd8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abdc:	f807 3b01 	strb.w	r3, [r7], #1
 800abe0:	1aba      	subs	r2, r7, r2
 800abe2:	4591      	cmp	r9, r2
 800abe4:	ddba      	ble.n	800ab5c <_dtoa_r+0xb34>
 800abe6:	4659      	mov	r1, fp
 800abe8:	2300      	movs	r3, #0
 800abea:	220a      	movs	r2, #10
 800abec:	4628      	mov	r0, r5
 800abee:	f000 f893 	bl	800ad18 <__multadd>
 800abf2:	4683      	mov	fp, r0
 800abf4:	e7eb      	b.n	800abce <_dtoa_r+0xba6>
 800abf6:	bf00      	nop
 800abf8:	0800cbb7 	.word	0x0800cbb7
 800abfc:	0800cb14 	.word	0x0800cb14
 800ac00:	0800cb38 	.word	0x0800cb38

0800ac04 <_localeconv_r>:
 800ac04:	4800      	ldr	r0, [pc, #0]	; (800ac08 <_localeconv_r+0x4>)
 800ac06:	4770      	bx	lr
 800ac08:	2000020c 	.word	0x2000020c

0800ac0c <malloc>:
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <malloc+0xc>)
 800ac0e:	4601      	mov	r1, r0
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f000 bc1d 	b.w	800b450 <_malloc_r>
 800ac16:	bf00      	nop
 800ac18:	200000b8 	.word	0x200000b8

0800ac1c <memchr>:
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	b510      	push	{r4, lr}
 800ac20:	b2c9      	uxtb	r1, r1
 800ac22:	4402      	add	r2, r0
 800ac24:	4293      	cmp	r3, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	d101      	bne.n	800ac2e <memchr+0x12>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e003      	b.n	800ac36 <memchr+0x1a>
 800ac2e:	7804      	ldrb	r4, [r0, #0]
 800ac30:	3301      	adds	r3, #1
 800ac32:	428c      	cmp	r4, r1
 800ac34:	d1f6      	bne.n	800ac24 <memchr+0x8>
 800ac36:	bd10      	pop	{r4, pc}

0800ac38 <memcpy>:
 800ac38:	440a      	add	r2, r1
 800ac3a:	4291      	cmp	r1, r2
 800ac3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac40:	d100      	bne.n	800ac44 <memcpy+0xc>
 800ac42:	4770      	bx	lr
 800ac44:	b510      	push	{r4, lr}
 800ac46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac4a:	4291      	cmp	r1, r2
 800ac4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac50:	d1f9      	bne.n	800ac46 <memcpy+0xe>
 800ac52:	bd10      	pop	{r4, pc}

0800ac54 <_Balloc>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	b976      	cbnz	r6, 800ac7c <_Balloc+0x28>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7ff ffd4 	bl	800ac0c <malloc>
 800ac64:	4602      	mov	r2, r0
 800ac66:	6260      	str	r0, [r4, #36]	; 0x24
 800ac68:	b920      	cbnz	r0, 800ac74 <_Balloc+0x20>
 800ac6a:	2166      	movs	r1, #102	; 0x66
 800ac6c:	4b17      	ldr	r3, [pc, #92]	; (800accc <_Balloc+0x78>)
 800ac6e:	4818      	ldr	r0, [pc, #96]	; (800acd0 <_Balloc+0x7c>)
 800ac70:	f000 fdce 	bl	800b810 <__assert_func>
 800ac74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac78:	6006      	str	r6, [r0, #0]
 800ac7a:	60c6      	str	r6, [r0, #12]
 800ac7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac7e:	68f3      	ldr	r3, [r6, #12]
 800ac80:	b183      	cbz	r3, 800aca4 <_Balloc+0x50>
 800ac82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac8a:	b9b8      	cbnz	r0, 800acbc <_Balloc+0x68>
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac92:	1d72      	adds	r2, r6, #5
 800ac94:	4620      	mov	r0, r4
 800ac96:	0092      	lsls	r2, r2, #2
 800ac98:	f000 fb5e 	bl	800b358 <_calloc_r>
 800ac9c:	b160      	cbz	r0, 800acb8 <_Balloc+0x64>
 800ac9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aca2:	e00e      	b.n	800acc2 <_Balloc+0x6e>
 800aca4:	2221      	movs	r2, #33	; 0x21
 800aca6:	2104      	movs	r1, #4
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 fb55 	bl	800b358 <_calloc_r>
 800acae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb0:	60f0      	str	r0, [r6, #12]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e4      	bne.n	800ac82 <_Balloc+0x2e>
 800acb8:	2000      	movs	r0, #0
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	6802      	ldr	r2, [r0, #0]
 800acbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acc2:	2300      	movs	r3, #0
 800acc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acc8:	e7f7      	b.n	800acba <_Balloc+0x66>
 800acca:	bf00      	nop
 800accc:	0800cb45 	.word	0x0800cb45
 800acd0:	0800cbc8 	.word	0x0800cbc8

0800acd4 <_Bfree>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acd8:	4605      	mov	r5, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	b976      	cbnz	r6, 800acfc <_Bfree+0x28>
 800acde:	2010      	movs	r0, #16
 800ace0:	f7ff ff94 	bl	800ac0c <malloc>
 800ace4:	4602      	mov	r2, r0
 800ace6:	6268      	str	r0, [r5, #36]	; 0x24
 800ace8:	b920      	cbnz	r0, 800acf4 <_Bfree+0x20>
 800acea:	218a      	movs	r1, #138	; 0x8a
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <_Bfree+0x3c>)
 800acee:	4809      	ldr	r0, [pc, #36]	; (800ad14 <_Bfree+0x40>)
 800acf0:	f000 fd8e 	bl	800b810 <__assert_func>
 800acf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf8:	6006      	str	r6, [r0, #0]
 800acfa:	60c6      	str	r6, [r0, #12]
 800acfc:	b13c      	cbz	r4, 800ad0e <_Bfree+0x3a>
 800acfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad00:	6862      	ldr	r2, [r4, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad08:	6021      	str	r1, [r4, #0]
 800ad0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	0800cb45 	.word	0x0800cb45
 800ad14:	0800cbc8 	.word	0x0800cbc8

0800ad18 <__multadd>:
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	461e      	mov	r6, r3
 800ad22:	2000      	movs	r0, #0
 800ad24:	690d      	ldr	r5, [r1, #16]
 800ad26:	f101 0c14 	add.w	ip, r1, #20
 800ad2a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad2e:	3001      	adds	r0, #1
 800ad30:	b299      	uxth	r1, r3
 800ad32:	fb02 6101 	mla	r1, r2, r1, r6
 800ad36:	0c1e      	lsrs	r6, r3, #16
 800ad38:	0c0b      	lsrs	r3, r1, #16
 800ad3a:	fb02 3306 	mla	r3, r2, r6, r3
 800ad3e:	b289      	uxth	r1, r1
 800ad40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad44:	4285      	cmp	r5, r0
 800ad46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad4e:	dcec      	bgt.n	800ad2a <__multadd+0x12>
 800ad50:	b30e      	cbz	r6, 800ad96 <__multadd+0x7e>
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	42ab      	cmp	r3, r5
 800ad56:	dc19      	bgt.n	800ad8c <__multadd+0x74>
 800ad58:	6861      	ldr	r1, [r4, #4]
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	f7ff ff79 	bl	800ac54 <_Balloc>
 800ad62:	4680      	mov	r8, r0
 800ad64:	b928      	cbnz	r0, 800ad72 <__multadd+0x5a>
 800ad66:	4602      	mov	r2, r0
 800ad68:	21b5      	movs	r1, #181	; 0xb5
 800ad6a:	4b0c      	ldr	r3, [pc, #48]	; (800ad9c <__multadd+0x84>)
 800ad6c:	480c      	ldr	r0, [pc, #48]	; (800ada0 <__multadd+0x88>)
 800ad6e:	f000 fd4f 	bl	800b810 <__assert_func>
 800ad72:	6922      	ldr	r2, [r4, #16]
 800ad74:	f104 010c 	add.w	r1, r4, #12
 800ad78:	3202      	adds	r2, #2
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	300c      	adds	r0, #12
 800ad7e:	f7ff ff5b 	bl	800ac38 <memcpy>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4638      	mov	r0, r7
 800ad86:	f7ff ffa5 	bl	800acd4 <_Bfree>
 800ad8a:	4644      	mov	r4, r8
 800ad8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad90:	3501      	adds	r5, #1
 800ad92:	615e      	str	r6, [r3, #20]
 800ad94:	6125      	str	r5, [r4, #16]
 800ad96:	4620      	mov	r0, r4
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	0800cbb7 	.word	0x0800cbb7
 800ada0:	0800cbc8 	.word	0x0800cbc8

0800ada4 <__hi0bits>:
 800ada4:	0c02      	lsrs	r2, r0, #16
 800ada6:	0412      	lsls	r2, r2, #16
 800ada8:	4603      	mov	r3, r0
 800adaa:	b9ca      	cbnz	r2, 800ade0 <__hi0bits+0x3c>
 800adac:	0403      	lsls	r3, r0, #16
 800adae:	2010      	movs	r0, #16
 800adb0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800adb4:	bf04      	itt	eq
 800adb6:	021b      	lsleq	r3, r3, #8
 800adb8:	3008      	addeq	r0, #8
 800adba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800adbe:	bf04      	itt	eq
 800adc0:	011b      	lsleq	r3, r3, #4
 800adc2:	3004      	addeq	r0, #4
 800adc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800adc8:	bf04      	itt	eq
 800adca:	009b      	lsleq	r3, r3, #2
 800adcc:	3002      	addeq	r0, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	db05      	blt.n	800adde <__hi0bits+0x3a>
 800add2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800add6:	f100 0001 	add.w	r0, r0, #1
 800adda:	bf08      	it	eq
 800addc:	2020      	moveq	r0, #32
 800adde:	4770      	bx	lr
 800ade0:	2000      	movs	r0, #0
 800ade2:	e7e5      	b.n	800adb0 <__hi0bits+0xc>

0800ade4 <__lo0bits>:
 800ade4:	6803      	ldr	r3, [r0, #0]
 800ade6:	4602      	mov	r2, r0
 800ade8:	f013 0007 	ands.w	r0, r3, #7
 800adec:	d00b      	beq.n	800ae06 <__lo0bits+0x22>
 800adee:	07d9      	lsls	r1, r3, #31
 800adf0:	d421      	bmi.n	800ae36 <__lo0bits+0x52>
 800adf2:	0798      	lsls	r0, r3, #30
 800adf4:	bf49      	itett	mi
 800adf6:	085b      	lsrmi	r3, r3, #1
 800adf8:	089b      	lsrpl	r3, r3, #2
 800adfa:	2001      	movmi	r0, #1
 800adfc:	6013      	strmi	r3, [r2, #0]
 800adfe:	bf5c      	itt	pl
 800ae00:	2002      	movpl	r0, #2
 800ae02:	6013      	strpl	r3, [r2, #0]
 800ae04:	4770      	bx	lr
 800ae06:	b299      	uxth	r1, r3
 800ae08:	b909      	cbnz	r1, 800ae0e <__lo0bits+0x2a>
 800ae0a:	2010      	movs	r0, #16
 800ae0c:	0c1b      	lsrs	r3, r3, #16
 800ae0e:	b2d9      	uxtb	r1, r3
 800ae10:	b909      	cbnz	r1, 800ae16 <__lo0bits+0x32>
 800ae12:	3008      	adds	r0, #8
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	0719      	lsls	r1, r3, #28
 800ae18:	bf04      	itt	eq
 800ae1a:	091b      	lsreq	r3, r3, #4
 800ae1c:	3004      	addeq	r0, #4
 800ae1e:	0799      	lsls	r1, r3, #30
 800ae20:	bf04      	itt	eq
 800ae22:	089b      	lsreq	r3, r3, #2
 800ae24:	3002      	addeq	r0, #2
 800ae26:	07d9      	lsls	r1, r3, #31
 800ae28:	d403      	bmi.n	800ae32 <__lo0bits+0x4e>
 800ae2a:	085b      	lsrs	r3, r3, #1
 800ae2c:	f100 0001 	add.w	r0, r0, #1
 800ae30:	d003      	beq.n	800ae3a <__lo0bits+0x56>
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	4770      	bx	lr
 800ae36:	2000      	movs	r0, #0
 800ae38:	4770      	bx	lr
 800ae3a:	2020      	movs	r0, #32
 800ae3c:	4770      	bx	lr
	...

0800ae40 <__i2b>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	460c      	mov	r4, r1
 800ae44:	2101      	movs	r1, #1
 800ae46:	f7ff ff05 	bl	800ac54 <_Balloc>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	b928      	cbnz	r0, 800ae5a <__i2b+0x1a>
 800ae4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae52:	4b04      	ldr	r3, [pc, #16]	; (800ae64 <__i2b+0x24>)
 800ae54:	4804      	ldr	r0, [pc, #16]	; (800ae68 <__i2b+0x28>)
 800ae56:	f000 fcdb 	bl	800b810 <__assert_func>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	6144      	str	r4, [r0, #20]
 800ae5e:	6103      	str	r3, [r0, #16]
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	0800cbb7 	.word	0x0800cbb7
 800ae68:	0800cbc8 	.word	0x0800cbc8

0800ae6c <__multiply>:
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	4691      	mov	r9, r2
 800ae72:	690a      	ldr	r2, [r1, #16]
 800ae74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae78:	460c      	mov	r4, r1
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	bfbe      	ittt	lt
 800ae7e:	460b      	movlt	r3, r1
 800ae80:	464c      	movlt	r4, r9
 800ae82:	4699      	movlt	r9, r3
 800ae84:	6927      	ldr	r7, [r4, #16]
 800ae86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	eb07 060a 	add.w	r6, r7, sl
 800ae92:	42b3      	cmp	r3, r6
 800ae94:	b085      	sub	sp, #20
 800ae96:	bfb8      	it	lt
 800ae98:	3101      	addlt	r1, #1
 800ae9a:	f7ff fedb 	bl	800ac54 <_Balloc>
 800ae9e:	b930      	cbnz	r0, 800aeae <__multiply+0x42>
 800aea0:	4602      	mov	r2, r0
 800aea2:	f240 115d 	movw	r1, #349	; 0x15d
 800aea6:	4b43      	ldr	r3, [pc, #268]	; (800afb4 <__multiply+0x148>)
 800aea8:	4843      	ldr	r0, [pc, #268]	; (800afb8 <__multiply+0x14c>)
 800aeaa:	f000 fcb1 	bl	800b810 <__assert_func>
 800aeae:	f100 0514 	add.w	r5, r0, #20
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aeba:	4543      	cmp	r3, r8
 800aebc:	d321      	bcc.n	800af02 <__multiply+0x96>
 800aebe:	f104 0314 	add.w	r3, r4, #20
 800aec2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aec6:	f109 0314 	add.w	r3, r9, #20
 800aeca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aece:	9202      	str	r2, [sp, #8]
 800aed0:	1b3a      	subs	r2, r7, r4
 800aed2:	3a15      	subs	r2, #21
 800aed4:	f022 0203 	bic.w	r2, r2, #3
 800aed8:	3204      	adds	r2, #4
 800aeda:	f104 0115 	add.w	r1, r4, #21
 800aede:	428f      	cmp	r7, r1
 800aee0:	bf38      	it	cc
 800aee2:	2204      	movcc	r2, #4
 800aee4:	9201      	str	r2, [sp, #4]
 800aee6:	9a02      	ldr	r2, [sp, #8]
 800aee8:	9303      	str	r3, [sp, #12]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d80c      	bhi.n	800af08 <__multiply+0x9c>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	dd03      	ble.n	800aefa <__multiply+0x8e>
 800aef2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d059      	beq.n	800afae <__multiply+0x142>
 800aefa:	6106      	str	r6, [r0, #16]
 800aefc:	b005      	add	sp, #20
 800aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af02:	f843 2b04 	str.w	r2, [r3], #4
 800af06:	e7d8      	b.n	800aeba <__multiply+0x4e>
 800af08:	f8b3 a000 	ldrh.w	sl, [r3]
 800af0c:	f1ba 0f00 	cmp.w	sl, #0
 800af10:	d023      	beq.n	800af5a <__multiply+0xee>
 800af12:	46a9      	mov	r9, r5
 800af14:	f04f 0c00 	mov.w	ip, #0
 800af18:	f104 0e14 	add.w	lr, r4, #20
 800af1c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af20:	f8d9 1000 	ldr.w	r1, [r9]
 800af24:	fa1f fb82 	uxth.w	fp, r2
 800af28:	b289      	uxth	r1, r1
 800af2a:	fb0a 110b 	mla	r1, sl, fp, r1
 800af2e:	4461      	add	r1, ip
 800af30:	f8d9 c000 	ldr.w	ip, [r9]
 800af34:	0c12      	lsrs	r2, r2, #16
 800af36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800af3a:	fb0a c202 	mla	r2, sl, r2, ip
 800af3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af42:	b289      	uxth	r1, r1
 800af44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af48:	4577      	cmp	r7, lr
 800af4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af4e:	f849 1b04 	str.w	r1, [r9], #4
 800af52:	d8e3      	bhi.n	800af1c <__multiply+0xb0>
 800af54:	9a01      	ldr	r2, [sp, #4]
 800af56:	f845 c002 	str.w	ip, [r5, r2]
 800af5a:	9a03      	ldr	r2, [sp, #12]
 800af5c:	3304      	adds	r3, #4
 800af5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af62:	f1b9 0f00 	cmp.w	r9, #0
 800af66:	d020      	beq.n	800afaa <__multiply+0x13e>
 800af68:	46ae      	mov	lr, r5
 800af6a:	f04f 0a00 	mov.w	sl, #0
 800af6e:	6829      	ldr	r1, [r5, #0]
 800af70:	f104 0c14 	add.w	ip, r4, #20
 800af74:	f8bc b000 	ldrh.w	fp, [ip]
 800af78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af7c:	b289      	uxth	r1, r1
 800af7e:	fb09 220b 	mla	r2, r9, fp, r2
 800af82:	4492      	add	sl, r2
 800af84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af88:	f84e 1b04 	str.w	r1, [lr], #4
 800af8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af90:	f8be 1000 	ldrh.w	r1, [lr]
 800af94:	0c12      	lsrs	r2, r2, #16
 800af96:	fb09 1102 	mla	r1, r9, r2, r1
 800af9a:	4567      	cmp	r7, ip
 800af9c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800afa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afa4:	d8e6      	bhi.n	800af74 <__multiply+0x108>
 800afa6:	9a01      	ldr	r2, [sp, #4]
 800afa8:	50a9      	str	r1, [r5, r2]
 800afaa:	3504      	adds	r5, #4
 800afac:	e79b      	b.n	800aee6 <__multiply+0x7a>
 800afae:	3e01      	subs	r6, #1
 800afb0:	e79d      	b.n	800aeee <__multiply+0x82>
 800afb2:	bf00      	nop
 800afb4:	0800cbb7 	.word	0x0800cbb7
 800afb8:	0800cbc8 	.word	0x0800cbc8

0800afbc <__pow5mult>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4615      	mov	r5, r2
 800afc2:	f012 0203 	ands.w	r2, r2, #3
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
 800afca:	d007      	beq.n	800afdc <__pow5mult+0x20>
 800afcc:	4c25      	ldr	r4, [pc, #148]	; (800b064 <__pow5mult+0xa8>)
 800afce:	3a01      	subs	r2, #1
 800afd0:	2300      	movs	r3, #0
 800afd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afd6:	f7ff fe9f 	bl	800ad18 <__multadd>
 800afda:	4607      	mov	r7, r0
 800afdc:	10ad      	asrs	r5, r5, #2
 800afde:	d03d      	beq.n	800b05c <__pow5mult+0xa0>
 800afe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afe2:	b97c      	cbnz	r4, 800b004 <__pow5mult+0x48>
 800afe4:	2010      	movs	r0, #16
 800afe6:	f7ff fe11 	bl	800ac0c <malloc>
 800afea:	4602      	mov	r2, r0
 800afec:	6270      	str	r0, [r6, #36]	; 0x24
 800afee:	b928      	cbnz	r0, 800affc <__pow5mult+0x40>
 800aff0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aff4:	4b1c      	ldr	r3, [pc, #112]	; (800b068 <__pow5mult+0xac>)
 800aff6:	481d      	ldr	r0, [pc, #116]	; (800b06c <__pow5mult+0xb0>)
 800aff8:	f000 fc0a 	bl	800b810 <__assert_func>
 800affc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b000:	6004      	str	r4, [r0, #0]
 800b002:	60c4      	str	r4, [r0, #12]
 800b004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b00c:	b94c      	cbnz	r4, 800b022 <__pow5mult+0x66>
 800b00e:	f240 2171 	movw	r1, #625	; 0x271
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff ff14 	bl	800ae40 <__i2b>
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	f04f 0900 	mov.w	r9, #0
 800b026:	07eb      	lsls	r3, r5, #31
 800b028:	d50a      	bpl.n	800b040 <__pow5mult+0x84>
 800b02a:	4639      	mov	r1, r7
 800b02c:	4622      	mov	r2, r4
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff1c 	bl	800ae6c <__multiply>
 800b034:	4680      	mov	r8, r0
 800b036:	4639      	mov	r1, r7
 800b038:	4630      	mov	r0, r6
 800b03a:	f7ff fe4b 	bl	800acd4 <_Bfree>
 800b03e:	4647      	mov	r7, r8
 800b040:	106d      	asrs	r5, r5, #1
 800b042:	d00b      	beq.n	800b05c <__pow5mult+0xa0>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	b938      	cbnz	r0, 800b058 <__pow5mult+0x9c>
 800b048:	4622      	mov	r2, r4
 800b04a:	4621      	mov	r1, r4
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff ff0d 	bl	800ae6c <__multiply>
 800b052:	6020      	str	r0, [r4, #0]
 800b054:	f8c0 9000 	str.w	r9, [r0]
 800b058:	4604      	mov	r4, r0
 800b05a:	e7e4      	b.n	800b026 <__pow5mult+0x6a>
 800b05c:	4638      	mov	r0, r7
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	bf00      	nop
 800b064:	0800cd18 	.word	0x0800cd18
 800b068:	0800cb45 	.word	0x0800cb45
 800b06c:	0800cbc8 	.word	0x0800cbc8

0800b070 <__lshift>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	4607      	mov	r7, r0
 800b078:	4691      	mov	r9, r2
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	6849      	ldr	r1, [r1, #4]
 800b07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b088:	f108 0601 	add.w	r6, r8, #1
 800b08c:	42b3      	cmp	r3, r6
 800b08e:	db0b      	blt.n	800b0a8 <__lshift+0x38>
 800b090:	4638      	mov	r0, r7
 800b092:	f7ff fddf 	bl	800ac54 <_Balloc>
 800b096:	4605      	mov	r5, r0
 800b098:	b948      	cbnz	r0, 800b0ae <__lshift+0x3e>
 800b09a:	4602      	mov	r2, r0
 800b09c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0a0:	4b29      	ldr	r3, [pc, #164]	; (800b148 <__lshift+0xd8>)
 800b0a2:	482a      	ldr	r0, [pc, #168]	; (800b14c <__lshift+0xdc>)
 800b0a4:	f000 fbb4 	bl	800b810 <__assert_func>
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	e7ee      	b.n	800b08c <__lshift+0x1c>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	f100 0114 	add.w	r1, r0, #20
 800b0b4:	f100 0210 	add.w	r2, r0, #16
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	4553      	cmp	r3, sl
 800b0bc:	db37      	blt.n	800b12e <__lshift+0xbe>
 800b0be:	6920      	ldr	r0, [r4, #16]
 800b0c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0c4:	f104 0314 	add.w	r3, r4, #20
 800b0c8:	f019 091f 	ands.w	r9, r9, #31
 800b0cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0d4:	d02f      	beq.n	800b136 <__lshift+0xc6>
 800b0d6:	468a      	mov	sl, r1
 800b0d8:	f04f 0c00 	mov.w	ip, #0
 800b0dc:	f1c9 0e20 	rsb	lr, r9, #32
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	fa02 f209 	lsl.w	r2, r2, r9
 800b0e6:	ea42 020c 	orr.w	r2, r2, ip
 800b0ea:	f84a 2b04 	str.w	r2, [sl], #4
 800b0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f2:	4298      	cmp	r0, r3
 800b0f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b0f8:	d8f2      	bhi.n	800b0e0 <__lshift+0x70>
 800b0fa:	1b03      	subs	r3, r0, r4
 800b0fc:	3b15      	subs	r3, #21
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	3304      	adds	r3, #4
 800b104:	f104 0215 	add.w	r2, r4, #21
 800b108:	4290      	cmp	r0, r2
 800b10a:	bf38      	it	cc
 800b10c:	2304      	movcc	r3, #4
 800b10e:	f841 c003 	str.w	ip, [r1, r3]
 800b112:	f1bc 0f00 	cmp.w	ip, #0
 800b116:	d001      	beq.n	800b11c <__lshift+0xac>
 800b118:	f108 0602 	add.w	r6, r8, #2
 800b11c:	3e01      	subs	r6, #1
 800b11e:	4638      	mov	r0, r7
 800b120:	4621      	mov	r1, r4
 800b122:	612e      	str	r6, [r5, #16]
 800b124:	f7ff fdd6 	bl	800acd4 <_Bfree>
 800b128:	4628      	mov	r0, r5
 800b12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b132:	3301      	adds	r3, #1
 800b134:	e7c1      	b.n	800b0ba <__lshift+0x4a>
 800b136:	3904      	subs	r1, #4
 800b138:	f853 2b04 	ldr.w	r2, [r3], #4
 800b13c:	4298      	cmp	r0, r3
 800b13e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b142:	d8f9      	bhi.n	800b138 <__lshift+0xc8>
 800b144:	e7ea      	b.n	800b11c <__lshift+0xac>
 800b146:	bf00      	nop
 800b148:	0800cbb7 	.word	0x0800cbb7
 800b14c:	0800cbc8 	.word	0x0800cbc8

0800b150 <__mcmp>:
 800b150:	4603      	mov	r3, r0
 800b152:	690a      	ldr	r2, [r1, #16]
 800b154:	6900      	ldr	r0, [r0, #16]
 800b156:	b530      	push	{r4, r5, lr}
 800b158:	1a80      	subs	r0, r0, r2
 800b15a:	d10d      	bne.n	800b178 <__mcmp+0x28>
 800b15c:	3314      	adds	r3, #20
 800b15e:	3114      	adds	r1, #20
 800b160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b16c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b170:	4295      	cmp	r5, r2
 800b172:	d002      	beq.n	800b17a <__mcmp+0x2a>
 800b174:	d304      	bcc.n	800b180 <__mcmp+0x30>
 800b176:	2001      	movs	r0, #1
 800b178:	bd30      	pop	{r4, r5, pc}
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	d3f4      	bcc.n	800b168 <__mcmp+0x18>
 800b17e:	e7fb      	b.n	800b178 <__mcmp+0x28>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b184:	e7f8      	b.n	800b178 <__mcmp+0x28>
	...

0800b188 <__mdiff>:
 800b188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	460d      	mov	r5, r1
 800b18e:	4607      	mov	r7, r0
 800b190:	4611      	mov	r1, r2
 800b192:	4628      	mov	r0, r5
 800b194:	4614      	mov	r4, r2
 800b196:	f7ff ffdb 	bl	800b150 <__mcmp>
 800b19a:	1e06      	subs	r6, r0, #0
 800b19c:	d111      	bne.n	800b1c2 <__mdiff+0x3a>
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	f7ff fd57 	bl	800ac54 <_Balloc>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	b928      	cbnz	r0, 800b1b6 <__mdiff+0x2e>
 800b1aa:	f240 2132 	movw	r1, #562	; 0x232
 800b1ae:	4b3a      	ldr	r3, [pc, #232]	; (800b298 <__mdiff+0x110>)
 800b1b0:	483a      	ldr	r0, [pc, #232]	; (800b29c <__mdiff+0x114>)
 800b1b2:	f000 fb2d 	bl	800b810 <__assert_func>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b1bc:	4610      	mov	r0, r2
 800b1be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c2:	bfa4      	itt	ge
 800b1c4:	4623      	movge	r3, r4
 800b1c6:	462c      	movge	r4, r5
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	6861      	ldr	r1, [r4, #4]
 800b1cc:	bfa6      	itte	ge
 800b1ce:	461d      	movge	r5, r3
 800b1d0:	2600      	movge	r6, #0
 800b1d2:	2601      	movlt	r6, #1
 800b1d4:	f7ff fd3e 	bl	800ac54 <_Balloc>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	b918      	cbnz	r0, 800b1e4 <__mdiff+0x5c>
 800b1dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1e0:	4b2d      	ldr	r3, [pc, #180]	; (800b298 <__mdiff+0x110>)
 800b1e2:	e7e5      	b.n	800b1b0 <__mdiff+0x28>
 800b1e4:	f102 0814 	add.w	r8, r2, #20
 800b1e8:	46c2      	mov	sl, r8
 800b1ea:	f04f 0c00 	mov.w	ip, #0
 800b1ee:	6927      	ldr	r7, [r4, #16]
 800b1f0:	60c6      	str	r6, [r0, #12]
 800b1f2:	692e      	ldr	r6, [r5, #16]
 800b1f4:	f104 0014 	add.w	r0, r4, #20
 800b1f8:	f105 0914 	add.w	r9, r5, #20
 800b1fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b204:	3410      	adds	r4, #16
 800b206:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b20a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b20e:	fa1f f18b 	uxth.w	r1, fp
 800b212:	448c      	add	ip, r1
 800b214:	b299      	uxth	r1, r3
 800b216:	0c1b      	lsrs	r3, r3, #16
 800b218:	ebac 0101 	sub.w	r1, ip, r1
 800b21c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b220:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b224:	b289      	uxth	r1, r1
 800b226:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b22a:	454e      	cmp	r6, r9
 800b22c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b230:	f84a 3b04 	str.w	r3, [sl], #4
 800b234:	d8e7      	bhi.n	800b206 <__mdiff+0x7e>
 800b236:	1b73      	subs	r3, r6, r5
 800b238:	3b15      	subs	r3, #21
 800b23a:	f023 0303 	bic.w	r3, r3, #3
 800b23e:	3515      	adds	r5, #21
 800b240:	3304      	adds	r3, #4
 800b242:	42ae      	cmp	r6, r5
 800b244:	bf38      	it	cc
 800b246:	2304      	movcc	r3, #4
 800b248:	4418      	add	r0, r3
 800b24a:	4443      	add	r3, r8
 800b24c:	461e      	mov	r6, r3
 800b24e:	4605      	mov	r5, r0
 800b250:	4575      	cmp	r5, lr
 800b252:	d30e      	bcc.n	800b272 <__mdiff+0xea>
 800b254:	f10e 0103 	add.w	r1, lr, #3
 800b258:	1a09      	subs	r1, r1, r0
 800b25a:	f021 0103 	bic.w	r1, r1, #3
 800b25e:	3803      	subs	r0, #3
 800b260:	4586      	cmp	lr, r0
 800b262:	bf38      	it	cc
 800b264:	2100      	movcc	r1, #0
 800b266:	4419      	add	r1, r3
 800b268:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b26c:	b18b      	cbz	r3, 800b292 <__mdiff+0x10a>
 800b26e:	6117      	str	r7, [r2, #16]
 800b270:	e7a4      	b.n	800b1bc <__mdiff+0x34>
 800b272:	f855 8b04 	ldr.w	r8, [r5], #4
 800b276:	fa1f f188 	uxth.w	r1, r8
 800b27a:	4461      	add	r1, ip
 800b27c:	140c      	asrs	r4, r1, #16
 800b27e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b282:	b289      	uxth	r1, r1
 800b284:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b288:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b28c:	f846 1b04 	str.w	r1, [r6], #4
 800b290:	e7de      	b.n	800b250 <__mdiff+0xc8>
 800b292:	3f01      	subs	r7, #1
 800b294:	e7e8      	b.n	800b268 <__mdiff+0xe0>
 800b296:	bf00      	nop
 800b298:	0800cbb7 	.word	0x0800cbb7
 800b29c:	0800cbc8 	.word	0x0800cbc8

0800b2a0 <__d2b>:
 800b2a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b2aa:	4690      	mov	r8, r2
 800b2ac:	461d      	mov	r5, r3
 800b2ae:	f7ff fcd1 	bl	800ac54 <_Balloc>
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	b930      	cbnz	r0, 800b2c4 <__d2b+0x24>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	f240 310a 	movw	r1, #778	; 0x30a
 800b2bc:	4b24      	ldr	r3, [pc, #144]	; (800b350 <__d2b+0xb0>)
 800b2be:	4825      	ldr	r0, [pc, #148]	; (800b354 <__d2b+0xb4>)
 800b2c0:	f000 faa6 	bl	800b810 <__assert_func>
 800b2c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b2c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b2cc:	bb2d      	cbnz	r5, 800b31a <__d2b+0x7a>
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2d4:	d026      	beq.n	800b324 <__d2b+0x84>
 800b2d6:	4668      	mov	r0, sp
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	f7ff fd83 	bl	800ade4 <__lo0bits>
 800b2de:	9900      	ldr	r1, [sp, #0]
 800b2e0:	b1f0      	cbz	r0, 800b320 <__d2b+0x80>
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	f1c0 0320 	rsb	r3, r0, #32
 800b2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	40c2      	lsrs	r2, r0
 800b2f0:	6163      	str	r3, [r4, #20]
 800b2f2:	9201      	str	r2, [sp, #4]
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2102      	movne	r1, #2
 800b2fc:	2101      	moveq	r1, #1
 800b2fe:	61a3      	str	r3, [r4, #24]
 800b300:	6121      	str	r1, [r4, #16]
 800b302:	b1c5      	cbz	r5, 800b336 <__d2b+0x96>
 800b304:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b308:	4405      	add	r5, r0
 800b30a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b30e:	603d      	str	r5, [r7, #0]
 800b310:	6030      	str	r0, [r6, #0]
 800b312:	4620      	mov	r0, r4
 800b314:	b002      	add	sp, #8
 800b316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b31e:	e7d6      	b.n	800b2ce <__d2b+0x2e>
 800b320:	6161      	str	r1, [r4, #20]
 800b322:	e7e7      	b.n	800b2f4 <__d2b+0x54>
 800b324:	a801      	add	r0, sp, #4
 800b326:	f7ff fd5d 	bl	800ade4 <__lo0bits>
 800b32a:	2101      	movs	r1, #1
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	6121      	str	r1, [r4, #16]
 800b330:	6163      	str	r3, [r4, #20]
 800b332:	3020      	adds	r0, #32
 800b334:	e7e5      	b.n	800b302 <__d2b+0x62>
 800b336:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b33a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b33e:	6038      	str	r0, [r7, #0]
 800b340:	6918      	ldr	r0, [r3, #16]
 800b342:	f7ff fd2f 	bl	800ada4 <__hi0bits>
 800b346:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b34a:	6031      	str	r1, [r6, #0]
 800b34c:	e7e1      	b.n	800b312 <__d2b+0x72>
 800b34e:	bf00      	nop
 800b350:	0800cbb7 	.word	0x0800cbb7
 800b354:	0800cbc8 	.word	0x0800cbc8

0800b358 <_calloc_r>:
 800b358:	b570      	push	{r4, r5, r6, lr}
 800b35a:	fba1 5402 	umull	r5, r4, r1, r2
 800b35e:	b934      	cbnz	r4, 800b36e <_calloc_r+0x16>
 800b360:	4629      	mov	r1, r5
 800b362:	f000 f875 	bl	800b450 <_malloc_r>
 800b366:	4606      	mov	r6, r0
 800b368:	b928      	cbnz	r0, 800b376 <_calloc_r+0x1e>
 800b36a:	4630      	mov	r0, r6
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
 800b36e:	220c      	movs	r2, #12
 800b370:	2600      	movs	r6, #0
 800b372:	6002      	str	r2, [r0, #0]
 800b374:	e7f9      	b.n	800b36a <_calloc_r+0x12>
 800b376:	462a      	mov	r2, r5
 800b378:	4621      	mov	r1, r4
 800b37a:	f7fe f93f 	bl	80095fc <memset>
 800b37e:	e7f4      	b.n	800b36a <_calloc_r+0x12>

0800b380 <_free_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4605      	mov	r5, r0
 800b384:	2900      	cmp	r1, #0
 800b386:	d040      	beq.n	800b40a <_free_r+0x8a>
 800b388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38c:	1f0c      	subs	r4, r1, #4
 800b38e:	2b00      	cmp	r3, #0
 800b390:	bfb8      	it	lt
 800b392:	18e4      	addlt	r4, r4, r3
 800b394:	f000 fa98 	bl	800b8c8 <__malloc_lock>
 800b398:	4a1c      	ldr	r2, [pc, #112]	; (800b40c <_free_r+0x8c>)
 800b39a:	6813      	ldr	r3, [r2, #0]
 800b39c:	b933      	cbnz	r3, 800b3ac <_free_r+0x2c>
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	6014      	str	r4, [r2, #0]
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a8:	f000 ba94 	b.w	800b8d4 <__malloc_unlock>
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d908      	bls.n	800b3c2 <_free_r+0x42>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	1821      	adds	r1, r4, r0
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	bf01      	itttt	eq
 800b3b8:	6819      	ldreq	r1, [r3, #0]
 800b3ba:	685b      	ldreq	r3, [r3, #4]
 800b3bc:	1809      	addeq	r1, r1, r0
 800b3be:	6021      	streq	r1, [r4, #0]
 800b3c0:	e7ed      	b.n	800b39e <_free_r+0x1e>
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	b10b      	cbz	r3, 800b3cc <_free_r+0x4c>
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	d9fa      	bls.n	800b3c2 <_free_r+0x42>
 800b3cc:	6811      	ldr	r1, [r2, #0]
 800b3ce:	1850      	adds	r0, r2, r1
 800b3d0:	42a0      	cmp	r0, r4
 800b3d2:	d10b      	bne.n	800b3ec <_free_r+0x6c>
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	4401      	add	r1, r0
 800b3d8:	1850      	adds	r0, r2, r1
 800b3da:	4283      	cmp	r3, r0
 800b3dc:	6011      	str	r1, [r2, #0]
 800b3de:	d1e0      	bne.n	800b3a2 <_free_r+0x22>
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	4401      	add	r1, r0
 800b3e6:	6011      	str	r1, [r2, #0]
 800b3e8:	6053      	str	r3, [r2, #4]
 800b3ea:	e7da      	b.n	800b3a2 <_free_r+0x22>
 800b3ec:	d902      	bls.n	800b3f4 <_free_r+0x74>
 800b3ee:	230c      	movs	r3, #12
 800b3f0:	602b      	str	r3, [r5, #0]
 800b3f2:	e7d6      	b.n	800b3a2 <_free_r+0x22>
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	1821      	adds	r1, r4, r0
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	bf01      	itttt	eq
 800b3fc:	6819      	ldreq	r1, [r3, #0]
 800b3fe:	685b      	ldreq	r3, [r3, #4]
 800b400:	1809      	addeq	r1, r1, r0
 800b402:	6021      	streq	r1, [r4, #0]
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	6054      	str	r4, [r2, #4]
 800b408:	e7cb      	b.n	800b3a2 <_free_r+0x22>
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	20000590 	.word	0x20000590

0800b410 <sbrk_aligned>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	4e0e      	ldr	r6, [pc, #56]	; (800b44c <sbrk_aligned+0x3c>)
 800b414:	460c      	mov	r4, r1
 800b416:	6831      	ldr	r1, [r6, #0]
 800b418:	4605      	mov	r5, r0
 800b41a:	b911      	cbnz	r1, 800b422 <sbrk_aligned+0x12>
 800b41c:	f000 f9e8 	bl	800b7f0 <_sbrk_r>
 800b420:	6030      	str	r0, [r6, #0]
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f000 f9e3 	bl	800b7f0 <_sbrk_r>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d00a      	beq.n	800b444 <sbrk_aligned+0x34>
 800b42e:	1cc4      	adds	r4, r0, #3
 800b430:	f024 0403 	bic.w	r4, r4, #3
 800b434:	42a0      	cmp	r0, r4
 800b436:	d007      	beq.n	800b448 <sbrk_aligned+0x38>
 800b438:	1a21      	subs	r1, r4, r0
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f9d8 	bl	800b7f0 <_sbrk_r>
 800b440:	3001      	adds	r0, #1
 800b442:	d101      	bne.n	800b448 <sbrk_aligned+0x38>
 800b444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b448:	4620      	mov	r0, r4
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	20000594 	.word	0x20000594

0800b450 <_malloc_r>:
 800b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b454:	1ccd      	adds	r5, r1, #3
 800b456:	f025 0503 	bic.w	r5, r5, #3
 800b45a:	3508      	adds	r5, #8
 800b45c:	2d0c      	cmp	r5, #12
 800b45e:	bf38      	it	cc
 800b460:	250c      	movcc	r5, #12
 800b462:	2d00      	cmp	r5, #0
 800b464:	4607      	mov	r7, r0
 800b466:	db01      	blt.n	800b46c <_malloc_r+0x1c>
 800b468:	42a9      	cmp	r1, r5
 800b46a:	d905      	bls.n	800b478 <_malloc_r+0x28>
 800b46c:	230c      	movs	r3, #12
 800b46e:	2600      	movs	r6, #0
 800b470:	603b      	str	r3, [r7, #0]
 800b472:	4630      	mov	r0, r6
 800b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b478:	4e2e      	ldr	r6, [pc, #184]	; (800b534 <_malloc_r+0xe4>)
 800b47a:	f000 fa25 	bl	800b8c8 <__malloc_lock>
 800b47e:	6833      	ldr	r3, [r6, #0]
 800b480:	461c      	mov	r4, r3
 800b482:	bb34      	cbnz	r4, 800b4d2 <_malloc_r+0x82>
 800b484:	4629      	mov	r1, r5
 800b486:	4638      	mov	r0, r7
 800b488:	f7ff ffc2 	bl	800b410 <sbrk_aligned>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	4604      	mov	r4, r0
 800b490:	d14d      	bne.n	800b52e <_malloc_r+0xde>
 800b492:	6834      	ldr	r4, [r6, #0]
 800b494:	4626      	mov	r6, r4
 800b496:	2e00      	cmp	r6, #0
 800b498:	d140      	bne.n	800b51c <_malloc_r+0xcc>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	4631      	mov	r1, r6
 800b49e:	4638      	mov	r0, r7
 800b4a0:	eb04 0803 	add.w	r8, r4, r3
 800b4a4:	f000 f9a4 	bl	800b7f0 <_sbrk_r>
 800b4a8:	4580      	cmp	r8, r0
 800b4aa:	d13a      	bne.n	800b522 <_malloc_r+0xd2>
 800b4ac:	6821      	ldr	r1, [r4, #0]
 800b4ae:	3503      	adds	r5, #3
 800b4b0:	1a6d      	subs	r5, r5, r1
 800b4b2:	f025 0503 	bic.w	r5, r5, #3
 800b4b6:	3508      	adds	r5, #8
 800b4b8:	2d0c      	cmp	r5, #12
 800b4ba:	bf38      	it	cc
 800b4bc:	250c      	movcc	r5, #12
 800b4be:	4638      	mov	r0, r7
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7ff ffa5 	bl	800b410 <sbrk_aligned>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d02b      	beq.n	800b522 <_malloc_r+0xd2>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	442b      	add	r3, r5
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	e00e      	b.n	800b4f0 <_malloc_r+0xa0>
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	1b52      	subs	r2, r2, r5
 800b4d6:	d41e      	bmi.n	800b516 <_malloc_r+0xc6>
 800b4d8:	2a0b      	cmp	r2, #11
 800b4da:	d916      	bls.n	800b50a <_malloc_r+0xba>
 800b4dc:	1961      	adds	r1, r4, r5
 800b4de:	42a3      	cmp	r3, r4
 800b4e0:	6025      	str	r5, [r4, #0]
 800b4e2:	bf18      	it	ne
 800b4e4:	6059      	strne	r1, [r3, #4]
 800b4e6:	6863      	ldr	r3, [r4, #4]
 800b4e8:	bf08      	it	eq
 800b4ea:	6031      	streq	r1, [r6, #0]
 800b4ec:	5162      	str	r2, [r4, r5]
 800b4ee:	604b      	str	r3, [r1, #4]
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f104 060b 	add.w	r6, r4, #11
 800b4f6:	f000 f9ed 	bl	800b8d4 <__malloc_unlock>
 800b4fa:	f026 0607 	bic.w	r6, r6, #7
 800b4fe:	1d23      	adds	r3, r4, #4
 800b500:	1af2      	subs	r2, r6, r3
 800b502:	d0b6      	beq.n	800b472 <_malloc_r+0x22>
 800b504:	1b9b      	subs	r3, r3, r6
 800b506:	50a3      	str	r3, [r4, r2]
 800b508:	e7b3      	b.n	800b472 <_malloc_r+0x22>
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	bf0c      	ite	eq
 800b510:	6032      	streq	r2, [r6, #0]
 800b512:	605a      	strne	r2, [r3, #4]
 800b514:	e7ec      	b.n	800b4f0 <_malloc_r+0xa0>
 800b516:	4623      	mov	r3, r4
 800b518:	6864      	ldr	r4, [r4, #4]
 800b51a:	e7b2      	b.n	800b482 <_malloc_r+0x32>
 800b51c:	4634      	mov	r4, r6
 800b51e:	6876      	ldr	r6, [r6, #4]
 800b520:	e7b9      	b.n	800b496 <_malloc_r+0x46>
 800b522:	230c      	movs	r3, #12
 800b524:	4638      	mov	r0, r7
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	f000 f9d4 	bl	800b8d4 <__malloc_unlock>
 800b52c:	e7a1      	b.n	800b472 <_malloc_r+0x22>
 800b52e:	6025      	str	r5, [r4, #0]
 800b530:	e7de      	b.n	800b4f0 <_malloc_r+0xa0>
 800b532:	bf00      	nop
 800b534:	20000590 	.word	0x20000590

0800b538 <__ssputs_r>:
 800b538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	688e      	ldr	r6, [r1, #8]
 800b53e:	4682      	mov	sl, r0
 800b540:	429e      	cmp	r6, r3
 800b542:	460c      	mov	r4, r1
 800b544:	4690      	mov	r8, r2
 800b546:	461f      	mov	r7, r3
 800b548:	d838      	bhi.n	800b5bc <__ssputs_r+0x84>
 800b54a:	898a      	ldrh	r2, [r1, #12]
 800b54c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b550:	d032      	beq.n	800b5b8 <__ssputs_r+0x80>
 800b552:	6825      	ldr	r5, [r4, #0]
 800b554:	6909      	ldr	r1, [r1, #16]
 800b556:	3301      	adds	r3, #1
 800b558:	eba5 0901 	sub.w	r9, r5, r1
 800b55c:	6965      	ldr	r5, [r4, #20]
 800b55e:	444b      	add	r3, r9
 800b560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b568:	106d      	asrs	r5, r5, #1
 800b56a:	429d      	cmp	r5, r3
 800b56c:	bf38      	it	cc
 800b56e:	461d      	movcc	r5, r3
 800b570:	0553      	lsls	r3, r2, #21
 800b572:	d531      	bpl.n	800b5d8 <__ssputs_r+0xa0>
 800b574:	4629      	mov	r1, r5
 800b576:	f7ff ff6b 	bl	800b450 <_malloc_r>
 800b57a:	4606      	mov	r6, r0
 800b57c:	b950      	cbnz	r0, 800b594 <__ssputs_r+0x5c>
 800b57e:	230c      	movs	r3, #12
 800b580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b584:	f8ca 3000 	str.w	r3, [sl]
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b594:	464a      	mov	r2, r9
 800b596:	6921      	ldr	r1, [r4, #16]
 800b598:	f7ff fb4e 	bl	800ac38 <memcpy>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	6126      	str	r6, [r4, #16]
 800b5aa:	444e      	add	r6, r9
 800b5ac:	6026      	str	r6, [r4, #0]
 800b5ae:	463e      	mov	r6, r7
 800b5b0:	6165      	str	r5, [r4, #20]
 800b5b2:	eba5 0509 	sub.w	r5, r5, r9
 800b5b6:	60a5      	str	r5, [r4, #8]
 800b5b8:	42be      	cmp	r6, r7
 800b5ba:	d900      	bls.n	800b5be <__ssputs_r+0x86>
 800b5bc:	463e      	mov	r6, r7
 800b5be:	4632      	mov	r2, r6
 800b5c0:	4641      	mov	r1, r8
 800b5c2:	6820      	ldr	r0, [r4, #0]
 800b5c4:	f000 f966 	bl	800b894 <memmove>
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	1b9b      	subs	r3, r3, r6
 800b5ce:	60a3      	str	r3, [r4, #8]
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	4433      	add	r3, r6
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	e7db      	b.n	800b590 <__ssputs_r+0x58>
 800b5d8:	462a      	mov	r2, r5
 800b5da:	f000 f981 	bl	800b8e0 <_realloc_r>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d1e1      	bne.n	800b5a8 <__ssputs_r+0x70>
 800b5e4:	4650      	mov	r0, sl
 800b5e6:	6921      	ldr	r1, [r4, #16]
 800b5e8:	f7ff feca 	bl	800b380 <_free_r>
 800b5ec:	e7c7      	b.n	800b57e <__ssputs_r+0x46>
	...

0800b5f0 <_svfiprintf_r>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	4698      	mov	r8, r3
 800b5f6:	898b      	ldrh	r3, [r1, #12]
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	061b      	lsls	r3, r3, #24
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	4614      	mov	r4, r2
 800b600:	b09d      	sub	sp, #116	; 0x74
 800b602:	d50e      	bpl.n	800b622 <_svfiprintf_r+0x32>
 800b604:	690b      	ldr	r3, [r1, #16]
 800b606:	b963      	cbnz	r3, 800b622 <_svfiprintf_r+0x32>
 800b608:	2140      	movs	r1, #64	; 0x40
 800b60a:	f7ff ff21 	bl	800b450 <_malloc_r>
 800b60e:	6028      	str	r0, [r5, #0]
 800b610:	6128      	str	r0, [r5, #16]
 800b612:	b920      	cbnz	r0, 800b61e <_svfiprintf_r+0x2e>
 800b614:	230c      	movs	r3, #12
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b61c:	e0d1      	b.n	800b7c2 <_svfiprintf_r+0x1d2>
 800b61e:	2340      	movs	r3, #64	; 0x40
 800b620:	616b      	str	r3, [r5, #20]
 800b622:	2300      	movs	r3, #0
 800b624:	9309      	str	r3, [sp, #36]	; 0x24
 800b626:	2320      	movs	r3, #32
 800b628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b62c:	2330      	movs	r3, #48	; 0x30
 800b62e:	f04f 0901 	mov.w	r9, #1
 800b632:	f8cd 800c 	str.w	r8, [sp, #12]
 800b636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7dc <_svfiprintf_r+0x1ec>
 800b63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b63e:	4623      	mov	r3, r4
 800b640:	469a      	mov	sl, r3
 800b642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b646:	b10a      	cbz	r2, 800b64c <_svfiprintf_r+0x5c>
 800b648:	2a25      	cmp	r2, #37	; 0x25
 800b64a:	d1f9      	bne.n	800b640 <_svfiprintf_r+0x50>
 800b64c:	ebba 0b04 	subs.w	fp, sl, r4
 800b650:	d00b      	beq.n	800b66a <_svfiprintf_r+0x7a>
 800b652:	465b      	mov	r3, fp
 800b654:	4622      	mov	r2, r4
 800b656:	4629      	mov	r1, r5
 800b658:	4638      	mov	r0, r7
 800b65a:	f7ff ff6d 	bl	800b538 <__ssputs_r>
 800b65e:	3001      	adds	r0, #1
 800b660:	f000 80aa 	beq.w	800b7b8 <_svfiprintf_r+0x1c8>
 800b664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b666:	445a      	add	r2, fp
 800b668:	9209      	str	r2, [sp, #36]	; 0x24
 800b66a:	f89a 3000 	ldrb.w	r3, [sl]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 80a2 	beq.w	800b7b8 <_svfiprintf_r+0x1c8>
 800b674:	2300      	movs	r3, #0
 800b676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b67e:	f10a 0a01 	add.w	sl, sl, #1
 800b682:	9304      	str	r3, [sp, #16]
 800b684:	9307      	str	r3, [sp, #28]
 800b686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b68a:	931a      	str	r3, [sp, #104]	; 0x68
 800b68c:	4654      	mov	r4, sl
 800b68e:	2205      	movs	r2, #5
 800b690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b694:	4851      	ldr	r0, [pc, #324]	; (800b7dc <_svfiprintf_r+0x1ec>)
 800b696:	f7ff fac1 	bl	800ac1c <memchr>
 800b69a:	9a04      	ldr	r2, [sp, #16]
 800b69c:	b9d8      	cbnz	r0, 800b6d6 <_svfiprintf_r+0xe6>
 800b69e:	06d0      	lsls	r0, r2, #27
 800b6a0:	bf44      	itt	mi
 800b6a2:	2320      	movmi	r3, #32
 800b6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6a8:	0711      	lsls	r1, r2, #28
 800b6aa:	bf44      	itt	mi
 800b6ac:	232b      	movmi	r3, #43	; 0x2b
 800b6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6b8:	d015      	beq.n	800b6e6 <_svfiprintf_r+0xf6>
 800b6ba:	4654      	mov	r4, sl
 800b6bc:	2000      	movs	r0, #0
 800b6be:	f04f 0c0a 	mov.w	ip, #10
 800b6c2:	9a07      	ldr	r2, [sp, #28]
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ca:	3b30      	subs	r3, #48	; 0x30
 800b6cc:	2b09      	cmp	r3, #9
 800b6ce:	d94e      	bls.n	800b76e <_svfiprintf_r+0x17e>
 800b6d0:	b1b0      	cbz	r0, 800b700 <_svfiprintf_r+0x110>
 800b6d2:	9207      	str	r2, [sp, #28]
 800b6d4:	e014      	b.n	800b700 <_svfiprintf_r+0x110>
 800b6d6:	eba0 0308 	sub.w	r3, r0, r8
 800b6da:	fa09 f303 	lsl.w	r3, r9, r3
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	46a2      	mov	sl, r4
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	e7d2      	b.n	800b68c <_svfiprintf_r+0x9c>
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	1d19      	adds	r1, r3, #4
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	9103      	str	r1, [sp, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	bfbb      	ittet	lt
 800b6f2:	425b      	neglt	r3, r3
 800b6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6f8:	9307      	strge	r3, [sp, #28]
 800b6fa:	9307      	strlt	r3, [sp, #28]
 800b6fc:	bfb8      	it	lt
 800b6fe:	9204      	strlt	r2, [sp, #16]
 800b700:	7823      	ldrb	r3, [r4, #0]
 800b702:	2b2e      	cmp	r3, #46	; 0x2e
 800b704:	d10c      	bne.n	800b720 <_svfiprintf_r+0x130>
 800b706:	7863      	ldrb	r3, [r4, #1]
 800b708:	2b2a      	cmp	r3, #42	; 0x2a
 800b70a:	d135      	bne.n	800b778 <_svfiprintf_r+0x188>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	3402      	adds	r4, #2
 800b710:	1d1a      	adds	r2, r3, #4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	9203      	str	r2, [sp, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfb8      	it	lt
 800b71a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b7e0 <_svfiprintf_r+0x1f0>
 800b724:	2203      	movs	r2, #3
 800b726:	4650      	mov	r0, sl
 800b728:	7821      	ldrb	r1, [r4, #0]
 800b72a:	f7ff fa77 	bl	800ac1c <memchr>
 800b72e:	b140      	cbz	r0, 800b742 <_svfiprintf_r+0x152>
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	eba0 000a 	sub.w	r0, r0, sl
 800b736:	fa03 f000 	lsl.w	r0, r3, r0
 800b73a:	9b04      	ldr	r3, [sp, #16]
 800b73c:	3401      	adds	r4, #1
 800b73e:	4303      	orrs	r3, r0
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b746:	2206      	movs	r2, #6
 800b748:	4826      	ldr	r0, [pc, #152]	; (800b7e4 <_svfiprintf_r+0x1f4>)
 800b74a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b74e:	f7ff fa65 	bl	800ac1c <memchr>
 800b752:	2800      	cmp	r0, #0
 800b754:	d038      	beq.n	800b7c8 <_svfiprintf_r+0x1d8>
 800b756:	4b24      	ldr	r3, [pc, #144]	; (800b7e8 <_svfiprintf_r+0x1f8>)
 800b758:	bb1b      	cbnz	r3, 800b7a2 <_svfiprintf_r+0x1b2>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	3307      	adds	r3, #7
 800b75e:	f023 0307 	bic.w	r3, r3, #7
 800b762:	3308      	adds	r3, #8
 800b764:	9303      	str	r3, [sp, #12]
 800b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b768:	4433      	add	r3, r6
 800b76a:	9309      	str	r3, [sp, #36]	; 0x24
 800b76c:	e767      	b.n	800b63e <_svfiprintf_r+0x4e>
 800b76e:	460c      	mov	r4, r1
 800b770:	2001      	movs	r0, #1
 800b772:	fb0c 3202 	mla	r2, ip, r2, r3
 800b776:	e7a5      	b.n	800b6c4 <_svfiprintf_r+0xd4>
 800b778:	2300      	movs	r3, #0
 800b77a:	f04f 0c0a 	mov.w	ip, #10
 800b77e:	4619      	mov	r1, r3
 800b780:	3401      	adds	r4, #1
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	4620      	mov	r0, r4
 800b786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b78a:	3a30      	subs	r2, #48	; 0x30
 800b78c:	2a09      	cmp	r2, #9
 800b78e:	d903      	bls.n	800b798 <_svfiprintf_r+0x1a8>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d0c5      	beq.n	800b720 <_svfiprintf_r+0x130>
 800b794:	9105      	str	r1, [sp, #20]
 800b796:	e7c3      	b.n	800b720 <_svfiprintf_r+0x130>
 800b798:	4604      	mov	r4, r0
 800b79a:	2301      	movs	r3, #1
 800b79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7a0:	e7f0      	b.n	800b784 <_svfiprintf_r+0x194>
 800b7a2:	ab03      	add	r3, sp, #12
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <_svfiprintf_r+0x1fc>)
 800b7ac:	a904      	add	r1, sp, #16
 800b7ae:	f7fd ffcb 	bl	8009748 <_printf_float>
 800b7b2:	1c42      	adds	r2, r0, #1
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	d1d6      	bne.n	800b766 <_svfiprintf_r+0x176>
 800b7b8:	89ab      	ldrh	r3, [r5, #12]
 800b7ba:	065b      	lsls	r3, r3, #25
 800b7bc:	f53f af2c 	bmi.w	800b618 <_svfiprintf_r+0x28>
 800b7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7c2:	b01d      	add	sp, #116	; 0x74
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	ab03      	add	r3, sp, #12
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <_svfiprintf_r+0x1fc>)
 800b7d2:	a904      	add	r1, sp, #16
 800b7d4:	f7fe fa54 	bl	8009c80 <_printf_i>
 800b7d8:	e7eb      	b.n	800b7b2 <_svfiprintf_r+0x1c2>
 800b7da:	bf00      	nop
 800b7dc:	0800cd24 	.word	0x0800cd24
 800b7e0:	0800cd2a 	.word	0x0800cd2a
 800b7e4:	0800cd2e 	.word	0x0800cd2e
 800b7e8:	08009749 	.word	0x08009749
 800b7ec:	0800b539 	.word	0x0800b539

0800b7f0 <_sbrk_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	4d05      	ldr	r5, [pc, #20]	; (800b80c <_sbrk_r+0x1c>)
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f9 f88a 	bl	8004914 <_sbrk>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_sbrk_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_sbrk_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20000598 	.word	0x20000598

0800b810 <__assert_func>:
 800b810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b812:	4614      	mov	r4, r2
 800b814:	461a      	mov	r2, r3
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <__assert_func+0x2c>)
 800b818:	4605      	mov	r5, r0
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68d8      	ldr	r0, [r3, #12]
 800b81e:	b14c      	cbz	r4, 800b834 <__assert_func+0x24>
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <__assert_func+0x30>)
 800b822:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b826:	9100      	str	r1, [sp, #0]
 800b828:	462b      	mov	r3, r5
 800b82a:	4906      	ldr	r1, [pc, #24]	; (800b844 <__assert_func+0x34>)
 800b82c:	f000 f80e 	bl	800b84c <fiprintf>
 800b830:	f000 faaa 	bl	800bd88 <abort>
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <__assert_func+0x38>)
 800b836:	461c      	mov	r4, r3
 800b838:	e7f3      	b.n	800b822 <__assert_func+0x12>
 800b83a:	bf00      	nop
 800b83c:	200000b8 	.word	0x200000b8
 800b840:	0800cd35 	.word	0x0800cd35
 800b844:	0800cd42 	.word	0x0800cd42
 800b848:	0800cd70 	.word	0x0800cd70

0800b84c <fiprintf>:
 800b84c:	b40e      	push	{r1, r2, r3}
 800b84e:	b503      	push	{r0, r1, lr}
 800b850:	4601      	mov	r1, r0
 800b852:	ab03      	add	r3, sp, #12
 800b854:	4805      	ldr	r0, [pc, #20]	; (800b86c <fiprintf+0x20>)
 800b856:	f853 2b04 	ldr.w	r2, [r3], #4
 800b85a:	6800      	ldr	r0, [r0, #0]
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	f000 f895 	bl	800b98c <_vfiprintf_r>
 800b862:	b002      	add	sp, #8
 800b864:	f85d eb04 	ldr.w	lr, [sp], #4
 800b868:	b003      	add	sp, #12
 800b86a:	4770      	bx	lr
 800b86c:	200000b8 	.word	0x200000b8

0800b870 <__ascii_mbtowc>:
 800b870:	b082      	sub	sp, #8
 800b872:	b901      	cbnz	r1, 800b876 <__ascii_mbtowc+0x6>
 800b874:	a901      	add	r1, sp, #4
 800b876:	b142      	cbz	r2, 800b88a <__ascii_mbtowc+0x1a>
 800b878:	b14b      	cbz	r3, 800b88e <__ascii_mbtowc+0x1e>
 800b87a:	7813      	ldrb	r3, [r2, #0]
 800b87c:	600b      	str	r3, [r1, #0]
 800b87e:	7812      	ldrb	r2, [r2, #0]
 800b880:	1e10      	subs	r0, r2, #0
 800b882:	bf18      	it	ne
 800b884:	2001      	movne	r0, #1
 800b886:	b002      	add	sp, #8
 800b888:	4770      	bx	lr
 800b88a:	4610      	mov	r0, r2
 800b88c:	e7fb      	b.n	800b886 <__ascii_mbtowc+0x16>
 800b88e:	f06f 0001 	mvn.w	r0, #1
 800b892:	e7f8      	b.n	800b886 <__ascii_mbtowc+0x16>

0800b894 <memmove>:
 800b894:	4288      	cmp	r0, r1
 800b896:	b510      	push	{r4, lr}
 800b898:	eb01 0402 	add.w	r4, r1, r2
 800b89c:	d902      	bls.n	800b8a4 <memmove+0x10>
 800b89e:	4284      	cmp	r4, r0
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	d807      	bhi.n	800b8b4 <memmove+0x20>
 800b8a4:	1e43      	subs	r3, r0, #1
 800b8a6:	42a1      	cmp	r1, r4
 800b8a8:	d008      	beq.n	800b8bc <memmove+0x28>
 800b8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b2:	e7f8      	b.n	800b8a6 <memmove+0x12>
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	4402      	add	r2, r0
 800b8b8:	428a      	cmp	r2, r1
 800b8ba:	d100      	bne.n	800b8be <memmove+0x2a>
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8c6:	e7f7      	b.n	800b8b8 <memmove+0x24>

0800b8c8 <__malloc_lock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_lock+0x8>)
 800b8ca:	f000 bc19 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	2000059c 	.word	0x2000059c

0800b8d4 <__malloc_unlock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__malloc_unlock+0x8>)
 800b8d6:	f000 bc14 	b.w	800c102 <__retarget_lock_release_recursive>
 800b8da:	bf00      	nop
 800b8dc:	2000059c 	.word	0x2000059c

0800b8e0 <_realloc_r>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	460e      	mov	r6, r1
 800b8ea:	b921      	cbnz	r1, 800b8f6 <_realloc_r+0x16>
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f2:	f7ff bdad 	b.w	800b450 <_malloc_r>
 800b8f6:	b92a      	cbnz	r2, 800b904 <_realloc_r+0x24>
 800b8f8:	f7ff fd42 	bl	800b380 <_free_r>
 800b8fc:	4625      	mov	r5, r4
 800b8fe:	4628      	mov	r0, r5
 800b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b904:	f000 fc64 	bl	800c1d0 <_malloc_usable_size_r>
 800b908:	4284      	cmp	r4, r0
 800b90a:	4607      	mov	r7, r0
 800b90c:	d802      	bhi.n	800b914 <_realloc_r+0x34>
 800b90e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b912:	d812      	bhi.n	800b93a <_realloc_r+0x5a>
 800b914:	4621      	mov	r1, r4
 800b916:	4640      	mov	r0, r8
 800b918:	f7ff fd9a 	bl	800b450 <_malloc_r>
 800b91c:	4605      	mov	r5, r0
 800b91e:	2800      	cmp	r0, #0
 800b920:	d0ed      	beq.n	800b8fe <_realloc_r+0x1e>
 800b922:	42bc      	cmp	r4, r7
 800b924:	4622      	mov	r2, r4
 800b926:	4631      	mov	r1, r6
 800b928:	bf28      	it	cs
 800b92a:	463a      	movcs	r2, r7
 800b92c:	f7ff f984 	bl	800ac38 <memcpy>
 800b930:	4631      	mov	r1, r6
 800b932:	4640      	mov	r0, r8
 800b934:	f7ff fd24 	bl	800b380 <_free_r>
 800b938:	e7e1      	b.n	800b8fe <_realloc_r+0x1e>
 800b93a:	4635      	mov	r5, r6
 800b93c:	e7df      	b.n	800b8fe <_realloc_r+0x1e>

0800b93e <__sfputc_r>:
 800b93e:	6893      	ldr	r3, [r2, #8]
 800b940:	b410      	push	{r4}
 800b942:	3b01      	subs	r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	6093      	str	r3, [r2, #8]
 800b948:	da07      	bge.n	800b95a <__sfputc_r+0x1c>
 800b94a:	6994      	ldr	r4, [r2, #24]
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	db01      	blt.n	800b954 <__sfputc_r+0x16>
 800b950:	290a      	cmp	r1, #10
 800b952:	d102      	bne.n	800b95a <__sfputc_r+0x1c>
 800b954:	bc10      	pop	{r4}
 800b956:	f000 b949 	b.w	800bbec <__swbuf_r>
 800b95a:	6813      	ldr	r3, [r2, #0]
 800b95c:	1c58      	adds	r0, r3, #1
 800b95e:	6010      	str	r0, [r2, #0]
 800b960:	7019      	strb	r1, [r3, #0]
 800b962:	4608      	mov	r0, r1
 800b964:	bc10      	pop	{r4}
 800b966:	4770      	bx	lr

0800b968 <__sfputs_r>:
 800b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96a:	4606      	mov	r6, r0
 800b96c:	460f      	mov	r7, r1
 800b96e:	4614      	mov	r4, r2
 800b970:	18d5      	adds	r5, r2, r3
 800b972:	42ac      	cmp	r4, r5
 800b974:	d101      	bne.n	800b97a <__sfputs_r+0x12>
 800b976:	2000      	movs	r0, #0
 800b978:	e007      	b.n	800b98a <__sfputs_r+0x22>
 800b97a:	463a      	mov	r2, r7
 800b97c:	4630      	mov	r0, r6
 800b97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b982:	f7ff ffdc 	bl	800b93e <__sfputc_r>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d1f3      	bne.n	800b972 <__sfputs_r+0xa>
 800b98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b98c <_vfiprintf_r>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	460d      	mov	r5, r1
 800b992:	4614      	mov	r4, r2
 800b994:	4698      	mov	r8, r3
 800b996:	4606      	mov	r6, r0
 800b998:	b09d      	sub	sp, #116	; 0x74
 800b99a:	b118      	cbz	r0, 800b9a4 <_vfiprintf_r+0x18>
 800b99c:	6983      	ldr	r3, [r0, #24]
 800b99e:	b90b      	cbnz	r3, 800b9a4 <_vfiprintf_r+0x18>
 800b9a0:	f000 fb10 	bl	800bfc4 <__sinit>
 800b9a4:	4b89      	ldr	r3, [pc, #548]	; (800bbcc <_vfiprintf_r+0x240>)
 800b9a6:	429d      	cmp	r5, r3
 800b9a8:	d11b      	bne.n	800b9e2 <_vfiprintf_r+0x56>
 800b9aa:	6875      	ldr	r5, [r6, #4]
 800b9ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ae:	07d9      	lsls	r1, r3, #31
 800b9b0:	d405      	bmi.n	800b9be <_vfiprintf_r+0x32>
 800b9b2:	89ab      	ldrh	r3, [r5, #12]
 800b9b4:	059a      	lsls	r2, r3, #22
 800b9b6:	d402      	bmi.n	800b9be <_vfiprintf_r+0x32>
 800b9b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ba:	f000 fba1 	bl	800c100 <__retarget_lock_acquire_recursive>
 800b9be:	89ab      	ldrh	r3, [r5, #12]
 800b9c0:	071b      	lsls	r3, r3, #28
 800b9c2:	d501      	bpl.n	800b9c8 <_vfiprintf_r+0x3c>
 800b9c4:	692b      	ldr	r3, [r5, #16]
 800b9c6:	b9eb      	cbnz	r3, 800ba04 <_vfiprintf_r+0x78>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 f96e 	bl	800bcac <__swsetup_r>
 800b9d0:	b1c0      	cbz	r0, 800ba04 <_vfiprintf_r+0x78>
 800b9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9d4:	07dc      	lsls	r4, r3, #31
 800b9d6:	d50e      	bpl.n	800b9f6 <_vfiprintf_r+0x6a>
 800b9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9dc:	b01d      	add	sp, #116	; 0x74
 800b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e2:	4b7b      	ldr	r3, [pc, #492]	; (800bbd0 <_vfiprintf_r+0x244>)
 800b9e4:	429d      	cmp	r5, r3
 800b9e6:	d101      	bne.n	800b9ec <_vfiprintf_r+0x60>
 800b9e8:	68b5      	ldr	r5, [r6, #8]
 800b9ea:	e7df      	b.n	800b9ac <_vfiprintf_r+0x20>
 800b9ec:	4b79      	ldr	r3, [pc, #484]	; (800bbd4 <_vfiprintf_r+0x248>)
 800b9ee:	429d      	cmp	r5, r3
 800b9f0:	bf08      	it	eq
 800b9f2:	68f5      	ldreq	r5, [r6, #12]
 800b9f4:	e7da      	b.n	800b9ac <_vfiprintf_r+0x20>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	0598      	lsls	r0, r3, #22
 800b9fa:	d4ed      	bmi.n	800b9d8 <_vfiprintf_r+0x4c>
 800b9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9fe:	f000 fb80 	bl	800c102 <__retarget_lock_release_recursive>
 800ba02:	e7e9      	b.n	800b9d8 <_vfiprintf_r+0x4c>
 800ba04:	2300      	movs	r3, #0
 800ba06:	9309      	str	r3, [sp, #36]	; 0x24
 800ba08:	2320      	movs	r3, #32
 800ba0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba0e:	2330      	movs	r3, #48	; 0x30
 800ba10:	f04f 0901 	mov.w	r9, #1
 800ba14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bbd8 <_vfiprintf_r+0x24c>
 800ba1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba20:	4623      	mov	r3, r4
 800ba22:	469a      	mov	sl, r3
 800ba24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba28:	b10a      	cbz	r2, 800ba2e <_vfiprintf_r+0xa2>
 800ba2a:	2a25      	cmp	r2, #37	; 0x25
 800ba2c:	d1f9      	bne.n	800ba22 <_vfiprintf_r+0x96>
 800ba2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba32:	d00b      	beq.n	800ba4c <_vfiprintf_r+0xc0>
 800ba34:	465b      	mov	r3, fp
 800ba36:	4622      	mov	r2, r4
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ff94 	bl	800b968 <__sfputs_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	f000 80aa 	beq.w	800bb9a <_vfiprintf_r+0x20e>
 800ba46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba48:	445a      	add	r2, fp
 800ba4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 80a2 	beq.w	800bb9a <_vfiprintf_r+0x20e>
 800ba56:	2300      	movs	r3, #0
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba60:	f10a 0a01 	add.w	sl, sl, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba6e:	4654      	mov	r4, sl
 800ba70:	2205      	movs	r2, #5
 800ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba76:	4858      	ldr	r0, [pc, #352]	; (800bbd8 <_vfiprintf_r+0x24c>)
 800ba78:	f7ff f8d0 	bl	800ac1c <memchr>
 800ba7c:	9a04      	ldr	r2, [sp, #16]
 800ba7e:	b9d8      	cbnz	r0, 800bab8 <_vfiprintf_r+0x12c>
 800ba80:	06d1      	lsls	r1, r2, #27
 800ba82:	bf44      	itt	mi
 800ba84:	2320      	movmi	r3, #32
 800ba86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba8a:	0713      	lsls	r3, r2, #28
 800ba8c:	bf44      	itt	mi
 800ba8e:	232b      	movmi	r3, #43	; 0x2b
 800ba90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba94:	f89a 3000 	ldrb.w	r3, [sl]
 800ba98:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9a:	d015      	beq.n	800bac8 <_vfiprintf_r+0x13c>
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	2000      	movs	r0, #0
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	9a07      	ldr	r2, [sp, #28]
 800baa6:	4621      	mov	r1, r4
 800baa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baac:	3b30      	subs	r3, #48	; 0x30
 800baae:	2b09      	cmp	r3, #9
 800bab0:	d94e      	bls.n	800bb50 <_vfiprintf_r+0x1c4>
 800bab2:	b1b0      	cbz	r0, 800bae2 <_vfiprintf_r+0x156>
 800bab4:	9207      	str	r2, [sp, #28]
 800bab6:	e014      	b.n	800bae2 <_vfiprintf_r+0x156>
 800bab8:	eba0 0308 	sub.w	r3, r0, r8
 800babc:	fa09 f303 	lsl.w	r3, r9, r3
 800bac0:	4313      	orrs	r3, r2
 800bac2:	46a2      	mov	sl, r4
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	e7d2      	b.n	800ba6e <_vfiprintf_r+0xe2>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	1d19      	adds	r1, r3, #4
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	9103      	str	r1, [sp, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bfbb      	ittet	lt
 800bad4:	425b      	neglt	r3, r3
 800bad6:	f042 0202 	orrlt.w	r2, r2, #2
 800bada:	9307      	strge	r3, [sp, #28]
 800badc:	9307      	strlt	r3, [sp, #28]
 800bade:	bfb8      	it	lt
 800bae0:	9204      	strlt	r2, [sp, #16]
 800bae2:	7823      	ldrb	r3, [r4, #0]
 800bae4:	2b2e      	cmp	r3, #46	; 0x2e
 800bae6:	d10c      	bne.n	800bb02 <_vfiprintf_r+0x176>
 800bae8:	7863      	ldrb	r3, [r4, #1]
 800baea:	2b2a      	cmp	r3, #42	; 0x2a
 800baec:	d135      	bne.n	800bb5a <_vfiprintf_r+0x1ce>
 800baee:	9b03      	ldr	r3, [sp, #12]
 800baf0:	3402      	adds	r4, #2
 800baf2:	1d1a      	adds	r2, r3, #4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	9203      	str	r2, [sp, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfb8      	it	lt
 800bafc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bbdc <_vfiprintf_r+0x250>
 800bb06:	2203      	movs	r2, #3
 800bb08:	4650      	mov	r0, sl
 800bb0a:	7821      	ldrb	r1, [r4, #0]
 800bb0c:	f7ff f886 	bl	800ac1c <memchr>
 800bb10:	b140      	cbz	r0, 800bb24 <_vfiprintf_r+0x198>
 800bb12:	2340      	movs	r3, #64	; 0x40
 800bb14:	eba0 000a 	sub.w	r0, r0, sl
 800bb18:	fa03 f000 	lsl.w	r0, r3, r0
 800bb1c:	9b04      	ldr	r3, [sp, #16]
 800bb1e:	3401      	adds	r4, #1
 800bb20:	4303      	orrs	r3, r0
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb28:	2206      	movs	r2, #6
 800bb2a:	482d      	ldr	r0, [pc, #180]	; (800bbe0 <_vfiprintf_r+0x254>)
 800bb2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb30:	f7ff f874 	bl	800ac1c <memchr>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d03f      	beq.n	800bbb8 <_vfiprintf_r+0x22c>
 800bb38:	4b2a      	ldr	r3, [pc, #168]	; (800bbe4 <_vfiprintf_r+0x258>)
 800bb3a:	bb1b      	cbnz	r3, 800bb84 <_vfiprintf_r+0x1f8>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	3307      	adds	r3, #7
 800bb40:	f023 0307 	bic.w	r3, r3, #7
 800bb44:	3308      	adds	r3, #8
 800bb46:	9303      	str	r3, [sp, #12]
 800bb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4a:	443b      	add	r3, r7
 800bb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4e:	e767      	b.n	800ba20 <_vfiprintf_r+0x94>
 800bb50:	460c      	mov	r4, r1
 800bb52:	2001      	movs	r0, #1
 800bb54:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb58:	e7a5      	b.n	800baa6 <_vfiprintf_r+0x11a>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f04f 0c0a 	mov.w	ip, #10
 800bb60:	4619      	mov	r1, r3
 800bb62:	3401      	adds	r4, #1
 800bb64:	9305      	str	r3, [sp, #20]
 800bb66:	4620      	mov	r0, r4
 800bb68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb6c:	3a30      	subs	r2, #48	; 0x30
 800bb6e:	2a09      	cmp	r2, #9
 800bb70:	d903      	bls.n	800bb7a <_vfiprintf_r+0x1ee>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0c5      	beq.n	800bb02 <_vfiprintf_r+0x176>
 800bb76:	9105      	str	r1, [sp, #20]
 800bb78:	e7c3      	b.n	800bb02 <_vfiprintf_r+0x176>
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb82:	e7f0      	b.n	800bb66 <_vfiprintf_r+0x1da>
 800bb84:	ab03      	add	r3, sp, #12
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	462a      	mov	r2, r5
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4b16      	ldr	r3, [pc, #88]	; (800bbe8 <_vfiprintf_r+0x25c>)
 800bb8e:	a904      	add	r1, sp, #16
 800bb90:	f7fd fdda 	bl	8009748 <_printf_float>
 800bb94:	4607      	mov	r7, r0
 800bb96:	1c78      	adds	r0, r7, #1
 800bb98:	d1d6      	bne.n	800bb48 <_vfiprintf_r+0x1bc>
 800bb9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb9c:	07d9      	lsls	r1, r3, #31
 800bb9e:	d405      	bmi.n	800bbac <_vfiprintf_r+0x220>
 800bba0:	89ab      	ldrh	r3, [r5, #12]
 800bba2:	059a      	lsls	r2, r3, #22
 800bba4:	d402      	bmi.n	800bbac <_vfiprintf_r+0x220>
 800bba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba8:	f000 faab 	bl	800c102 <__retarget_lock_release_recursive>
 800bbac:	89ab      	ldrh	r3, [r5, #12]
 800bbae:	065b      	lsls	r3, r3, #25
 800bbb0:	f53f af12 	bmi.w	800b9d8 <_vfiprintf_r+0x4c>
 800bbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbb6:	e711      	b.n	800b9dc <_vfiprintf_r+0x50>
 800bbb8:	ab03      	add	r3, sp, #12
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <_vfiprintf_r+0x25c>)
 800bbc2:	a904      	add	r1, sp, #16
 800bbc4:	f7fe f85c 	bl	8009c80 <_printf_i>
 800bbc8:	e7e4      	b.n	800bb94 <_vfiprintf_r+0x208>
 800bbca:	bf00      	nop
 800bbcc:	0800ce9c 	.word	0x0800ce9c
 800bbd0:	0800cebc 	.word	0x0800cebc
 800bbd4:	0800ce7c 	.word	0x0800ce7c
 800bbd8:	0800cd24 	.word	0x0800cd24
 800bbdc:	0800cd2a 	.word	0x0800cd2a
 800bbe0:	0800cd2e 	.word	0x0800cd2e
 800bbe4:	08009749 	.word	0x08009749
 800bbe8:	0800b969 	.word	0x0800b969

0800bbec <__swbuf_r>:
 800bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbee:	460e      	mov	r6, r1
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	b118      	cbz	r0, 800bbfe <__swbuf_r+0x12>
 800bbf6:	6983      	ldr	r3, [r0, #24]
 800bbf8:	b90b      	cbnz	r3, 800bbfe <__swbuf_r+0x12>
 800bbfa:	f000 f9e3 	bl	800bfc4 <__sinit>
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <__swbuf_r+0x98>)
 800bc00:	429c      	cmp	r4, r3
 800bc02:	d12b      	bne.n	800bc5c <__swbuf_r+0x70>
 800bc04:	686c      	ldr	r4, [r5, #4]
 800bc06:	69a3      	ldr	r3, [r4, #24]
 800bc08:	60a3      	str	r3, [r4, #8]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	071a      	lsls	r2, r3, #28
 800bc0e:	d52f      	bpl.n	800bc70 <__swbuf_r+0x84>
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	b36b      	cbz	r3, 800bc70 <__swbuf_r+0x84>
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	6820      	ldr	r0, [r4, #0]
 800bc18:	b2f6      	uxtb	r6, r6
 800bc1a:	1ac0      	subs	r0, r0, r3
 800bc1c:	6963      	ldr	r3, [r4, #20]
 800bc1e:	4637      	mov	r7, r6
 800bc20:	4283      	cmp	r3, r0
 800bc22:	dc04      	bgt.n	800bc2e <__swbuf_r+0x42>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 f938 	bl	800be9c <_fflush_r>
 800bc2c:	bb30      	cbnz	r0, 800bc7c <__swbuf_r+0x90>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	3001      	adds	r0, #1
 800bc32:	3b01      	subs	r3, #1
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	6022      	str	r2, [r4, #0]
 800bc3c:	701e      	strb	r6, [r3, #0]
 800bc3e:	6963      	ldr	r3, [r4, #20]
 800bc40:	4283      	cmp	r3, r0
 800bc42:	d004      	beq.n	800bc4e <__swbuf_r+0x62>
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	07db      	lsls	r3, r3, #31
 800bc48:	d506      	bpl.n	800bc58 <__swbuf_r+0x6c>
 800bc4a:	2e0a      	cmp	r6, #10
 800bc4c:	d104      	bne.n	800bc58 <__swbuf_r+0x6c>
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4628      	mov	r0, r5
 800bc52:	f000 f923 	bl	800be9c <_fflush_r>
 800bc56:	b988      	cbnz	r0, 800bc7c <__swbuf_r+0x90>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <__swbuf_r+0x9c>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	d101      	bne.n	800bc66 <__swbuf_r+0x7a>
 800bc62:	68ac      	ldr	r4, [r5, #8]
 800bc64:	e7cf      	b.n	800bc06 <__swbuf_r+0x1a>
 800bc66:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <__swbuf_r+0xa0>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	bf08      	it	eq
 800bc6c:	68ec      	ldreq	r4, [r5, #12]
 800bc6e:	e7ca      	b.n	800bc06 <__swbuf_r+0x1a>
 800bc70:	4621      	mov	r1, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 f81a 	bl	800bcac <__swsetup_r>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d0cb      	beq.n	800bc14 <__swbuf_r+0x28>
 800bc7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc80:	e7ea      	b.n	800bc58 <__swbuf_r+0x6c>
 800bc82:	bf00      	nop
 800bc84:	0800ce9c 	.word	0x0800ce9c
 800bc88:	0800cebc 	.word	0x0800cebc
 800bc8c:	0800ce7c 	.word	0x0800ce7c

0800bc90 <__ascii_wctomb>:
 800bc90:	4603      	mov	r3, r0
 800bc92:	4608      	mov	r0, r1
 800bc94:	b141      	cbz	r1, 800bca8 <__ascii_wctomb+0x18>
 800bc96:	2aff      	cmp	r2, #255	; 0xff
 800bc98:	d904      	bls.n	800bca4 <__ascii_wctomb+0x14>
 800bc9a:	228a      	movs	r2, #138	; 0x8a
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	4770      	bx	lr
 800bca4:	2001      	movs	r0, #1
 800bca6:	700a      	strb	r2, [r1, #0]
 800bca8:	4770      	bx	lr
	...

0800bcac <__swsetup_r>:
 800bcac:	4b32      	ldr	r3, [pc, #200]	; (800bd78 <__swsetup_r+0xcc>)
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	681d      	ldr	r5, [r3, #0]
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	b125      	cbz	r5, 800bcc2 <__swsetup_r+0x16>
 800bcb8:	69ab      	ldr	r3, [r5, #24]
 800bcba:	b913      	cbnz	r3, 800bcc2 <__swsetup_r+0x16>
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f000 f981 	bl	800bfc4 <__sinit>
 800bcc2:	4b2e      	ldr	r3, [pc, #184]	; (800bd7c <__swsetup_r+0xd0>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	d10f      	bne.n	800bce8 <__swsetup_r+0x3c>
 800bcc8:	686c      	ldr	r4, [r5, #4]
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcd0:	0719      	lsls	r1, r3, #28
 800bcd2:	d42c      	bmi.n	800bd2e <__swsetup_r+0x82>
 800bcd4:	06dd      	lsls	r5, r3, #27
 800bcd6:	d411      	bmi.n	800bcfc <__swsetup_r+0x50>
 800bcd8:	2309      	movs	r3, #9
 800bcda:	6033      	str	r3, [r6, #0]
 800bcdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bce4:	81a3      	strh	r3, [r4, #12]
 800bce6:	e03e      	b.n	800bd66 <__swsetup_r+0xba>
 800bce8:	4b25      	ldr	r3, [pc, #148]	; (800bd80 <__swsetup_r+0xd4>)
 800bcea:	429c      	cmp	r4, r3
 800bcec:	d101      	bne.n	800bcf2 <__swsetup_r+0x46>
 800bcee:	68ac      	ldr	r4, [r5, #8]
 800bcf0:	e7eb      	b.n	800bcca <__swsetup_r+0x1e>
 800bcf2:	4b24      	ldr	r3, [pc, #144]	; (800bd84 <__swsetup_r+0xd8>)
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	bf08      	it	eq
 800bcf8:	68ec      	ldreq	r4, [r5, #12]
 800bcfa:	e7e6      	b.n	800bcca <__swsetup_r+0x1e>
 800bcfc:	0758      	lsls	r0, r3, #29
 800bcfe:	d512      	bpl.n	800bd26 <__swsetup_r+0x7a>
 800bd00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd02:	b141      	cbz	r1, 800bd16 <__swsetup_r+0x6a>
 800bd04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd08:	4299      	cmp	r1, r3
 800bd0a:	d002      	beq.n	800bd12 <__swsetup_r+0x66>
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff fb37 	bl	800b380 <_free_r>
 800bd12:	2300      	movs	r3, #0
 800bd14:	6363      	str	r3, [r4, #52]	; 0x34
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd1c:	81a3      	strh	r3, [r4, #12]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	6063      	str	r3, [r4, #4]
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	f043 0308 	orr.w	r3, r3, #8
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	b94b      	cbnz	r3, 800bd46 <__swsetup_r+0x9a>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd3c:	d003      	beq.n	800bd46 <__swsetup_r+0x9a>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4630      	mov	r0, r6
 800bd42:	f000 fa05 	bl	800c150 <__smakebuf_r>
 800bd46:	89a0      	ldrh	r0, [r4, #12]
 800bd48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd4c:	f010 0301 	ands.w	r3, r0, #1
 800bd50:	d00a      	beq.n	800bd68 <__swsetup_r+0xbc>
 800bd52:	2300      	movs	r3, #0
 800bd54:	60a3      	str	r3, [r4, #8]
 800bd56:	6963      	ldr	r3, [r4, #20]
 800bd58:	425b      	negs	r3, r3
 800bd5a:	61a3      	str	r3, [r4, #24]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	b943      	cbnz	r3, 800bd72 <__swsetup_r+0xc6>
 800bd60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd64:	d1ba      	bne.n	800bcdc <__swsetup_r+0x30>
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	0781      	lsls	r1, r0, #30
 800bd6a:	bf58      	it	pl
 800bd6c:	6963      	ldrpl	r3, [r4, #20]
 800bd6e:	60a3      	str	r3, [r4, #8]
 800bd70:	e7f4      	b.n	800bd5c <__swsetup_r+0xb0>
 800bd72:	2000      	movs	r0, #0
 800bd74:	e7f7      	b.n	800bd66 <__swsetup_r+0xba>
 800bd76:	bf00      	nop
 800bd78:	200000b8 	.word	0x200000b8
 800bd7c:	0800ce9c 	.word	0x0800ce9c
 800bd80:	0800cebc 	.word	0x0800cebc
 800bd84:	0800ce7c 	.word	0x0800ce7c

0800bd88 <abort>:
 800bd88:	2006      	movs	r0, #6
 800bd8a:	b508      	push	{r3, lr}
 800bd8c:	f000 fa50 	bl	800c230 <raise>
 800bd90:	2001      	movs	r0, #1
 800bd92:	f7f8 fd68 	bl	8004866 <_exit>
	...

0800bd98 <__sflush_r>:
 800bd98:	898a      	ldrh	r2, [r1, #12]
 800bd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	0710      	lsls	r0, r2, #28
 800bda0:	460c      	mov	r4, r1
 800bda2:	d457      	bmi.n	800be54 <__sflush_r+0xbc>
 800bda4:	684b      	ldr	r3, [r1, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	dc04      	bgt.n	800bdb4 <__sflush_r+0x1c>
 800bdaa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	dc01      	bgt.n	800bdb4 <__sflush_r+0x1c>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	d0fa      	beq.n	800bdb0 <__sflush_r+0x18>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdc0:	682f      	ldr	r7, [r5, #0]
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	d032      	beq.n	800be2c <__sflush_r+0x94>
 800bdc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	075a      	lsls	r2, r3, #29
 800bdcc:	d505      	bpl.n	800bdda <__sflush_r+0x42>
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	1ac0      	subs	r0, r0, r3
 800bdd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdd4:	b10b      	cbz	r3, 800bdda <__sflush_r+0x42>
 800bdd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdd8:	1ac0      	subs	r0, r0, r3
 800bdda:	2300      	movs	r3, #0
 800bddc:	4602      	mov	r2, r0
 800bdde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bde0:	4628      	mov	r0, r5
 800bde2:	6a21      	ldr	r1, [r4, #32]
 800bde4:	47b0      	blx	r6
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	d106      	bne.n	800bdfa <__sflush_r+0x62>
 800bdec:	6829      	ldr	r1, [r5, #0]
 800bdee:	291d      	cmp	r1, #29
 800bdf0:	d82c      	bhi.n	800be4c <__sflush_r+0xb4>
 800bdf2:	4a29      	ldr	r2, [pc, #164]	; (800be98 <__sflush_r+0x100>)
 800bdf4:	40ca      	lsrs	r2, r1
 800bdf6:	07d6      	lsls	r6, r2, #31
 800bdf8:	d528      	bpl.n	800be4c <__sflush_r+0xb4>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	6062      	str	r2, [r4, #4]
 800bdfe:	6922      	ldr	r2, [r4, #16]
 800be00:	04d9      	lsls	r1, r3, #19
 800be02:	6022      	str	r2, [r4, #0]
 800be04:	d504      	bpl.n	800be10 <__sflush_r+0x78>
 800be06:	1c42      	adds	r2, r0, #1
 800be08:	d101      	bne.n	800be0e <__sflush_r+0x76>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b903      	cbnz	r3, 800be10 <__sflush_r+0x78>
 800be0e:	6560      	str	r0, [r4, #84]	; 0x54
 800be10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be12:	602f      	str	r7, [r5, #0]
 800be14:	2900      	cmp	r1, #0
 800be16:	d0cb      	beq.n	800bdb0 <__sflush_r+0x18>
 800be18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be1c:	4299      	cmp	r1, r3
 800be1e:	d002      	beq.n	800be26 <__sflush_r+0x8e>
 800be20:	4628      	mov	r0, r5
 800be22:	f7ff faad 	bl	800b380 <_free_r>
 800be26:	2000      	movs	r0, #0
 800be28:	6360      	str	r0, [r4, #52]	; 0x34
 800be2a:	e7c2      	b.n	800bdb2 <__sflush_r+0x1a>
 800be2c:	6a21      	ldr	r1, [r4, #32]
 800be2e:	2301      	movs	r3, #1
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	1c41      	adds	r1, r0, #1
 800be36:	d1c7      	bne.n	800bdc8 <__sflush_r+0x30>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d0c4      	beq.n	800bdc8 <__sflush_r+0x30>
 800be3e:	2b1d      	cmp	r3, #29
 800be40:	d001      	beq.n	800be46 <__sflush_r+0xae>
 800be42:	2b16      	cmp	r3, #22
 800be44:	d101      	bne.n	800be4a <__sflush_r+0xb2>
 800be46:	602f      	str	r7, [r5, #0]
 800be48:	e7b2      	b.n	800bdb0 <__sflush_r+0x18>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	e7ae      	b.n	800bdb2 <__sflush_r+0x1a>
 800be54:	690f      	ldr	r7, [r1, #16]
 800be56:	2f00      	cmp	r7, #0
 800be58:	d0aa      	beq.n	800bdb0 <__sflush_r+0x18>
 800be5a:	0793      	lsls	r3, r2, #30
 800be5c:	bf18      	it	ne
 800be5e:	2300      	movne	r3, #0
 800be60:	680e      	ldr	r6, [r1, #0]
 800be62:	bf08      	it	eq
 800be64:	694b      	ldreq	r3, [r1, #20]
 800be66:	1bf6      	subs	r6, r6, r7
 800be68:	600f      	str	r7, [r1, #0]
 800be6a:	608b      	str	r3, [r1, #8]
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	dd9f      	ble.n	800bdb0 <__sflush_r+0x18>
 800be70:	4633      	mov	r3, r6
 800be72:	463a      	mov	r2, r7
 800be74:	4628      	mov	r0, r5
 800be76:	6a21      	ldr	r1, [r4, #32]
 800be78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800be7c:	47e0      	blx	ip
 800be7e:	2800      	cmp	r0, #0
 800be80:	dc06      	bgt.n	800be90 <__sflush_r+0xf8>
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	e790      	b.n	800bdb2 <__sflush_r+0x1a>
 800be90:	4407      	add	r7, r0
 800be92:	1a36      	subs	r6, r6, r0
 800be94:	e7ea      	b.n	800be6c <__sflush_r+0xd4>
 800be96:	bf00      	nop
 800be98:	20400001 	.word	0x20400001

0800be9c <_fflush_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	4605      	mov	r5, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	b913      	cbnz	r3, 800beac <_fflush_r+0x10>
 800bea6:	2500      	movs	r5, #0
 800bea8:	4628      	mov	r0, r5
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	b118      	cbz	r0, 800beb6 <_fflush_r+0x1a>
 800beae:	6983      	ldr	r3, [r0, #24]
 800beb0:	b90b      	cbnz	r3, 800beb6 <_fflush_r+0x1a>
 800beb2:	f000 f887 	bl	800bfc4 <__sinit>
 800beb6:	4b14      	ldr	r3, [pc, #80]	; (800bf08 <_fflush_r+0x6c>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	d11b      	bne.n	800bef4 <_fflush_r+0x58>
 800bebc:	686c      	ldr	r4, [r5, #4]
 800bebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0ef      	beq.n	800bea6 <_fflush_r+0xa>
 800bec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bec8:	07d0      	lsls	r0, r2, #31
 800beca:	d404      	bmi.n	800bed6 <_fflush_r+0x3a>
 800becc:	0599      	lsls	r1, r3, #22
 800bece:	d402      	bmi.n	800bed6 <_fflush_r+0x3a>
 800bed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed2:	f000 f915 	bl	800c100 <__retarget_lock_acquire_recursive>
 800bed6:	4628      	mov	r0, r5
 800bed8:	4621      	mov	r1, r4
 800beda:	f7ff ff5d 	bl	800bd98 <__sflush_r>
 800bede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bee0:	4605      	mov	r5, r0
 800bee2:	07da      	lsls	r2, r3, #31
 800bee4:	d4e0      	bmi.n	800bea8 <_fflush_r+0xc>
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	059b      	lsls	r3, r3, #22
 800beea:	d4dd      	bmi.n	800bea8 <_fflush_r+0xc>
 800beec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beee:	f000 f908 	bl	800c102 <__retarget_lock_release_recursive>
 800bef2:	e7d9      	b.n	800bea8 <_fflush_r+0xc>
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <_fflush_r+0x70>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <_fflush_r+0x62>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7df      	b.n	800bebe <_fflush_r+0x22>
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <_fflush_r+0x74>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7da      	b.n	800bebe <_fflush_r+0x22>
 800bf08:	0800ce9c 	.word	0x0800ce9c
 800bf0c:	0800cebc 	.word	0x0800cebc
 800bf10:	0800ce7c 	.word	0x0800ce7c

0800bf14 <std>:
 800bf14:	2300      	movs	r3, #0
 800bf16:	b510      	push	{r4, lr}
 800bf18:	4604      	mov	r4, r0
 800bf1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf22:	6083      	str	r3, [r0, #8]
 800bf24:	8181      	strh	r1, [r0, #12]
 800bf26:	6643      	str	r3, [r0, #100]	; 0x64
 800bf28:	81c2      	strh	r2, [r0, #14]
 800bf2a:	6183      	str	r3, [r0, #24]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	2208      	movs	r2, #8
 800bf30:	305c      	adds	r0, #92	; 0x5c
 800bf32:	f7fd fb63 	bl	80095fc <memset>
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <std+0x38>)
 800bf38:	6224      	str	r4, [r4, #32]
 800bf3a:	6263      	str	r3, [r4, #36]	; 0x24
 800bf3c:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <std+0x3c>)
 800bf3e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf40:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <std+0x40>)
 800bf42:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf44:	4b04      	ldr	r3, [pc, #16]	; (800bf58 <std+0x44>)
 800bf46:	6323      	str	r3, [r4, #48]	; 0x30
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800c269 	.word	0x0800c269
 800bf50:	0800c28b 	.word	0x0800c28b
 800bf54:	0800c2c3 	.word	0x0800c2c3
 800bf58:	0800c2e7 	.word	0x0800c2e7

0800bf5c <_cleanup_r>:
 800bf5c:	4901      	ldr	r1, [pc, #4]	; (800bf64 <_cleanup_r+0x8>)
 800bf5e:	f000 b8af 	b.w	800c0c0 <_fwalk_reent>
 800bf62:	bf00      	nop
 800bf64:	0800be9d 	.word	0x0800be9d

0800bf68 <__sfmoreglue>:
 800bf68:	2268      	movs	r2, #104	; 0x68
 800bf6a:	b570      	push	{r4, r5, r6, lr}
 800bf6c:	1e4d      	subs	r5, r1, #1
 800bf6e:	4355      	muls	r5, r2
 800bf70:	460e      	mov	r6, r1
 800bf72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf76:	f7ff fa6b 	bl	800b450 <_malloc_r>
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	b140      	cbz	r0, 800bf90 <__sfmoreglue+0x28>
 800bf7e:	2100      	movs	r1, #0
 800bf80:	e9c0 1600 	strd	r1, r6, [r0]
 800bf84:	300c      	adds	r0, #12
 800bf86:	60a0      	str	r0, [r4, #8]
 800bf88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf8c:	f7fd fb36 	bl	80095fc <memset>
 800bf90:	4620      	mov	r0, r4
 800bf92:	bd70      	pop	{r4, r5, r6, pc}

0800bf94 <__sfp_lock_acquire>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__sfp_lock_acquire+0x8>)
 800bf96:	f000 b8b3 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	2000059d 	.word	0x2000059d

0800bfa0 <__sfp_lock_release>:
 800bfa0:	4801      	ldr	r0, [pc, #4]	; (800bfa8 <__sfp_lock_release+0x8>)
 800bfa2:	f000 b8ae 	b.w	800c102 <__retarget_lock_release_recursive>
 800bfa6:	bf00      	nop
 800bfa8:	2000059d 	.word	0x2000059d

0800bfac <__sinit_lock_acquire>:
 800bfac:	4801      	ldr	r0, [pc, #4]	; (800bfb4 <__sinit_lock_acquire+0x8>)
 800bfae:	f000 b8a7 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	2000059e 	.word	0x2000059e

0800bfb8 <__sinit_lock_release>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <__sinit_lock_release+0x8>)
 800bfba:	f000 b8a2 	b.w	800c102 <__retarget_lock_release_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	2000059e 	.word	0x2000059e

0800bfc4 <__sinit>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f7ff fff0 	bl	800bfac <__sinit_lock_acquire>
 800bfcc:	69a3      	ldr	r3, [r4, #24]
 800bfce:	b11b      	cbz	r3, 800bfd8 <__sinit+0x14>
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f7ff bff0 	b.w	800bfb8 <__sinit_lock_release>
 800bfd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfdc:	6523      	str	r3, [r4, #80]	; 0x50
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <__sinit+0x68>)
 800bfe0:	4a13      	ldr	r2, [pc, #76]	; (800c030 <__sinit+0x6c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	bf08      	it	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	4620      	mov	r0, r4
 800bfee:	bf08      	it	eq
 800bff0:	61a3      	streq	r3, [r4, #24]
 800bff2:	f000 f81f 	bl	800c034 <__sfp>
 800bff6:	6060      	str	r0, [r4, #4]
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 f81b 	bl	800c034 <__sfp>
 800bffe:	60a0      	str	r0, [r4, #8]
 800c000:	4620      	mov	r0, r4
 800c002:	f000 f817 	bl	800c034 <__sfp>
 800c006:	2200      	movs	r2, #0
 800c008:	2104      	movs	r1, #4
 800c00a:	60e0      	str	r0, [r4, #12]
 800c00c:	6860      	ldr	r0, [r4, #4]
 800c00e:	f7ff ff81 	bl	800bf14 <std>
 800c012:	2201      	movs	r2, #1
 800c014:	2109      	movs	r1, #9
 800c016:	68a0      	ldr	r0, [r4, #8]
 800c018:	f7ff ff7c 	bl	800bf14 <std>
 800c01c:	2202      	movs	r2, #2
 800c01e:	2112      	movs	r1, #18
 800c020:	68e0      	ldr	r0, [r4, #12]
 800c022:	f7ff ff77 	bl	800bf14 <std>
 800c026:	2301      	movs	r3, #1
 800c028:	61a3      	str	r3, [r4, #24]
 800c02a:	e7d1      	b.n	800bfd0 <__sinit+0xc>
 800c02c:	0800cb00 	.word	0x0800cb00
 800c030:	0800bf5d 	.word	0x0800bf5d

0800c034 <__sfp>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	4607      	mov	r7, r0
 800c038:	f7ff ffac 	bl	800bf94 <__sfp_lock_acquire>
 800c03c:	4b1e      	ldr	r3, [pc, #120]	; (800c0b8 <__sfp+0x84>)
 800c03e:	681e      	ldr	r6, [r3, #0]
 800c040:	69b3      	ldr	r3, [r6, #24]
 800c042:	b913      	cbnz	r3, 800c04a <__sfp+0x16>
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff ffbd 	bl	800bfc4 <__sinit>
 800c04a:	3648      	adds	r6, #72	; 0x48
 800c04c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c050:	3b01      	subs	r3, #1
 800c052:	d503      	bpl.n	800c05c <__sfp+0x28>
 800c054:	6833      	ldr	r3, [r6, #0]
 800c056:	b30b      	cbz	r3, 800c09c <__sfp+0x68>
 800c058:	6836      	ldr	r6, [r6, #0]
 800c05a:	e7f7      	b.n	800c04c <__sfp+0x18>
 800c05c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c060:	b9d5      	cbnz	r5, 800c098 <__sfp+0x64>
 800c062:	4b16      	ldr	r3, [pc, #88]	; (800c0bc <__sfp+0x88>)
 800c064:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c068:	60e3      	str	r3, [r4, #12]
 800c06a:	6665      	str	r5, [r4, #100]	; 0x64
 800c06c:	f000 f847 	bl	800c0fe <__retarget_lock_init_recursive>
 800c070:	f7ff ff96 	bl	800bfa0 <__sfp_lock_release>
 800c074:	2208      	movs	r2, #8
 800c076:	4629      	mov	r1, r5
 800c078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c07c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c080:	6025      	str	r5, [r4, #0]
 800c082:	61a5      	str	r5, [r4, #24]
 800c084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c088:	f7fd fab8 	bl	80095fc <memset>
 800c08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c094:	4620      	mov	r0, r4
 800c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c098:	3468      	adds	r4, #104	; 0x68
 800c09a:	e7d9      	b.n	800c050 <__sfp+0x1c>
 800c09c:	2104      	movs	r1, #4
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7ff ff62 	bl	800bf68 <__sfmoreglue>
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	6030      	str	r0, [r6, #0]
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1d5      	bne.n	800c058 <__sfp+0x24>
 800c0ac:	f7ff ff78 	bl	800bfa0 <__sfp_lock_release>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	e7ee      	b.n	800c094 <__sfp+0x60>
 800c0b6:	bf00      	nop
 800c0b8:	0800cb00 	.word	0x0800cb00
 800c0bc:	ffff0001 	.word	0xffff0001

0800c0c0 <_fwalk_reent>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	4688      	mov	r8, r1
 800c0c8:	2700      	movs	r7, #0
 800c0ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0d6:	d505      	bpl.n	800c0e4 <_fwalk_reent+0x24>
 800c0d8:	6824      	ldr	r4, [r4, #0]
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	d1f7      	bne.n	800c0ce <_fwalk_reent+0xe>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e4:	89ab      	ldrh	r3, [r5, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d907      	bls.n	800c0fa <_fwalk_reent+0x3a>
 800c0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	d003      	beq.n	800c0fa <_fwalk_reent+0x3a>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	47c0      	blx	r8
 800c0f8:	4307      	orrs	r7, r0
 800c0fa:	3568      	adds	r5, #104	; 0x68
 800c0fc:	e7e9      	b.n	800c0d2 <_fwalk_reent+0x12>

0800c0fe <__retarget_lock_init_recursive>:
 800c0fe:	4770      	bx	lr

0800c100 <__retarget_lock_acquire_recursive>:
 800c100:	4770      	bx	lr

0800c102 <__retarget_lock_release_recursive>:
 800c102:	4770      	bx	lr

0800c104 <__swhatbuf_r>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	460e      	mov	r6, r1
 800c108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10c:	4614      	mov	r4, r2
 800c10e:	2900      	cmp	r1, #0
 800c110:	461d      	mov	r5, r3
 800c112:	b096      	sub	sp, #88	; 0x58
 800c114:	da08      	bge.n	800c128 <__swhatbuf_r+0x24>
 800c116:	2200      	movs	r2, #0
 800c118:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c11c:	602a      	str	r2, [r5, #0]
 800c11e:	061a      	lsls	r2, r3, #24
 800c120:	d410      	bmi.n	800c144 <__swhatbuf_r+0x40>
 800c122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c126:	e00e      	b.n	800c146 <__swhatbuf_r+0x42>
 800c128:	466a      	mov	r2, sp
 800c12a:	f000 f903 	bl	800c334 <_fstat_r>
 800c12e:	2800      	cmp	r0, #0
 800c130:	dbf1      	blt.n	800c116 <__swhatbuf_r+0x12>
 800c132:	9a01      	ldr	r2, [sp, #4]
 800c134:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c138:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c13c:	425a      	negs	r2, r3
 800c13e:	415a      	adcs	r2, r3
 800c140:	602a      	str	r2, [r5, #0]
 800c142:	e7ee      	b.n	800c122 <__swhatbuf_r+0x1e>
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	2000      	movs	r0, #0
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	b016      	add	sp, #88	; 0x58
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c150 <__smakebuf_r>:
 800c150:	898b      	ldrh	r3, [r1, #12]
 800c152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c154:	079d      	lsls	r5, r3, #30
 800c156:	4606      	mov	r6, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	d507      	bpl.n	800c16c <__smakebuf_r+0x1c>
 800c15c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	2301      	movs	r3, #1
 800c166:	6163      	str	r3, [r4, #20]
 800c168:	b002      	add	sp, #8
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	466a      	mov	r2, sp
 800c16e:	ab01      	add	r3, sp, #4
 800c170:	f7ff ffc8 	bl	800c104 <__swhatbuf_r>
 800c174:	9900      	ldr	r1, [sp, #0]
 800c176:	4605      	mov	r5, r0
 800c178:	4630      	mov	r0, r6
 800c17a:	f7ff f969 	bl	800b450 <_malloc_r>
 800c17e:	b948      	cbnz	r0, 800c194 <__smakebuf_r+0x44>
 800c180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c184:	059a      	lsls	r2, r3, #22
 800c186:	d4ef      	bmi.n	800c168 <__smakebuf_r+0x18>
 800c188:	f023 0303 	bic.w	r3, r3, #3
 800c18c:	f043 0302 	orr.w	r3, r3, #2
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	e7e3      	b.n	800c15c <__smakebuf_r+0xc>
 800c194:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <__smakebuf_r+0x7c>)
 800c196:	62b3      	str	r3, [r6, #40]	; 0x28
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	6020      	str	r0, [r4, #0]
 800c19c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	9b00      	ldr	r3, [sp, #0]
 800c1a4:	6120      	str	r0, [r4, #16]
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	b15b      	cbz	r3, 800c1c4 <__smakebuf_r+0x74>
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1b2:	f000 f8d1 	bl	800c358 <_isatty_r>
 800c1b6:	b128      	cbz	r0, 800c1c4 <__smakebuf_r+0x74>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f023 0303 	bic.w	r3, r3, #3
 800c1be:	f043 0301 	orr.w	r3, r3, #1
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	89a0      	ldrh	r0, [r4, #12]
 800c1c6:	4305      	orrs	r5, r0
 800c1c8:	81a5      	strh	r5, [r4, #12]
 800c1ca:	e7cd      	b.n	800c168 <__smakebuf_r+0x18>
 800c1cc:	0800bf5d 	.word	0x0800bf5d

0800c1d0 <_malloc_usable_size_r>:
 800c1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d4:	1f18      	subs	r0, r3, #4
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bfbc      	itt	lt
 800c1da:	580b      	ldrlt	r3, [r1, r0]
 800c1dc:	18c0      	addlt	r0, r0, r3
 800c1de:	4770      	bx	lr

0800c1e0 <_raise_r>:
 800c1e0:	291f      	cmp	r1, #31
 800c1e2:	b538      	push	{r3, r4, r5, lr}
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	d904      	bls.n	800c1f4 <_raise_r+0x14>
 800c1ea:	2316      	movs	r3, #22
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1f6:	b112      	cbz	r2, 800c1fe <_raise_r+0x1e>
 800c1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1fc:	b94b      	cbnz	r3, 800c212 <_raise_r+0x32>
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 f830 	bl	800c264 <_getpid_r>
 800c204:	462a      	mov	r2, r5
 800c206:	4601      	mov	r1, r0
 800c208:	4620      	mov	r0, r4
 800c20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c20e:	f000 b817 	b.w	800c240 <_kill_r>
 800c212:	2b01      	cmp	r3, #1
 800c214:	d00a      	beq.n	800c22c <_raise_r+0x4c>
 800c216:	1c59      	adds	r1, r3, #1
 800c218:	d103      	bne.n	800c222 <_raise_r+0x42>
 800c21a:	2316      	movs	r3, #22
 800c21c:	6003      	str	r3, [r0, #0]
 800c21e:	2001      	movs	r0, #1
 800c220:	e7e7      	b.n	800c1f2 <_raise_r+0x12>
 800c222:	2400      	movs	r4, #0
 800c224:	4628      	mov	r0, r5
 800c226:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c22a:	4798      	blx	r3
 800c22c:	2000      	movs	r0, #0
 800c22e:	e7e0      	b.n	800c1f2 <_raise_r+0x12>

0800c230 <raise>:
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <raise+0xc>)
 800c232:	4601      	mov	r1, r0
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f7ff bfd3 	b.w	800c1e0 <_raise_r>
 800c23a:	bf00      	nop
 800c23c:	200000b8 	.word	0x200000b8

0800c240 <_kill_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	2300      	movs	r3, #0
 800c244:	4d06      	ldr	r5, [pc, #24]	; (800c260 <_kill_r+0x20>)
 800c246:	4604      	mov	r4, r0
 800c248:	4608      	mov	r0, r1
 800c24a:	4611      	mov	r1, r2
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	f7f8 fafa 	bl	8004846 <_kill>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	d102      	bne.n	800c25c <_kill_r+0x1c>
 800c256:	682b      	ldr	r3, [r5, #0]
 800c258:	b103      	cbz	r3, 800c25c <_kill_r+0x1c>
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	bd38      	pop	{r3, r4, r5, pc}
 800c25e:	bf00      	nop
 800c260:	20000598 	.word	0x20000598

0800c264 <_getpid_r>:
 800c264:	f7f8 bae8 	b.w	8004838 <_getpid>

0800c268 <__sread>:
 800c268:	b510      	push	{r4, lr}
 800c26a:	460c      	mov	r4, r1
 800c26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c270:	f000 f894 	bl	800c39c <_read_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	bfab      	itete	ge
 800c278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c27a:	89a3      	ldrhlt	r3, [r4, #12]
 800c27c:	181b      	addge	r3, r3, r0
 800c27e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c282:	bfac      	ite	ge
 800c284:	6563      	strge	r3, [r4, #84]	; 0x54
 800c286:	81a3      	strhlt	r3, [r4, #12]
 800c288:	bd10      	pop	{r4, pc}

0800c28a <__swrite>:
 800c28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	461f      	mov	r7, r3
 800c290:	898b      	ldrh	r3, [r1, #12]
 800c292:	4605      	mov	r5, r0
 800c294:	05db      	lsls	r3, r3, #23
 800c296:	460c      	mov	r4, r1
 800c298:	4616      	mov	r6, r2
 800c29a:	d505      	bpl.n	800c2a8 <__swrite+0x1e>
 800c29c:	2302      	movs	r3, #2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a4:	f000 f868 	bl	800c378 <_lseek_r>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	463b      	mov	r3, r7
 800c2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2be:	f000 b817 	b.w	800c2f0 <_write_r>

0800c2c2 <__sseek>:
 800c2c2:	b510      	push	{r4, lr}
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ca:	f000 f855 	bl	800c378 <_lseek_r>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	bf15      	itete	ne
 800c2d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2de:	81a3      	strheq	r3, [r4, #12]
 800c2e0:	bf18      	it	ne
 800c2e2:	81a3      	strhne	r3, [r4, #12]
 800c2e4:	bd10      	pop	{r4, pc}

0800c2e6 <__sclose>:
 800c2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ea:	f000 b813 	b.w	800c314 <_close_r>
	...

0800c2f0 <_write_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4d05      	ldr	r5, [pc, #20]	; (800c310 <_write_r+0x20>)
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f7 fa8e 	bl	8003820 <_write>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_write_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_write_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20000598 	.word	0x20000598

0800c314 <_close_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	2300      	movs	r3, #0
 800c318:	4d05      	ldr	r5, [pc, #20]	; (800c330 <_close_r+0x1c>)
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f8 fac8 	bl	80048b4 <_close>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_close_r+0x1a>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_close_r+0x1a>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20000598 	.word	0x20000598

0800c334 <_fstat_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	2300      	movs	r3, #0
 800c338:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_fstat_r+0x20>)
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	4611      	mov	r1, r2
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	f7f8 fac2 	bl	80048ca <_fstat>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	d102      	bne.n	800c350 <_fstat_r+0x1c>
 800c34a:	682b      	ldr	r3, [r5, #0]
 800c34c:	b103      	cbz	r3, 800c350 <_fstat_r+0x1c>
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	bf00      	nop
 800c354:	20000598 	.word	0x20000598

0800c358 <_isatty_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	2300      	movs	r3, #0
 800c35c:	4d05      	ldr	r5, [pc, #20]	; (800c374 <_isatty_r+0x1c>)
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f8 fac0 	bl	80048e8 <_isatty>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_isatty_r+0x1a>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_isatty_r+0x1a>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20000598 	.word	0x20000598

0800c378 <_lseek_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	2200      	movs	r2, #0
 800c382:	4d05      	ldr	r5, [pc, #20]	; (800c398 <_lseek_r+0x20>)
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f8 fab8 	bl	80048fc <_lseek>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_lseek_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_lseek_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	20000598 	.word	0x20000598

0800c39c <_read_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	4d05      	ldr	r5, [pc, #20]	; (800c3bc <_read_r+0x20>)
 800c3a8:	602a      	str	r2, [r5, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f7f8 fa65 	bl	800487a <_read>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_read_r+0x1e>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_read_r+0x1e>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20000598 	.word	0x20000598

0800c3c0 <asinf>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	f000 f838 	bl	800c438 <__ieee754_asinf>
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f7f4 fe59 	bl	8001084 <__aeabi_fcmpun>
 800c3d2:	b980      	cbnz	r0, 800c3f6 <asinf+0x36>
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 fb57 	bl	800ca88 <fabsf>
 800c3da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3de:	f7f4 fe47 	bl	8001070 <__aeabi_fcmpgt>
 800c3e2:	b140      	cbz	r0, 800c3f6 <asinf+0x36>
 800c3e4:	f7fd f8e0 	bl	80095a8 <__errno>
 800c3e8:	2321      	movs	r3, #33	; 0x21
 800c3ea:	6003      	str	r3, [r0, #0]
 800c3ec:	4803      	ldr	r0, [pc, #12]	; (800c3fc <asinf+0x3c>)
 800c3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f2:	f000 bb4d 	b.w	800ca90 <nanf>
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	bd38      	pop	{r3, r4, r5, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800cd70 	.word	0x0800cd70

0800c400 <atan2f>:
 800c400:	f000 b95e 	b.w	800c6c0 <__ieee754_atan2f>

0800c404 <sqrtf>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4605      	mov	r5, r0
 800c408:	f000 f9e0 	bl	800c7cc <__ieee754_sqrtf>
 800c40c:	4629      	mov	r1, r5
 800c40e:	4604      	mov	r4, r0
 800c410:	4628      	mov	r0, r5
 800c412:	f7f4 fe37 	bl	8001084 <__aeabi_fcmpun>
 800c416:	b968      	cbnz	r0, 800c434 <sqrtf+0x30>
 800c418:	2100      	movs	r1, #0
 800c41a:	4628      	mov	r0, r5
 800c41c:	f7f4 fe0a 	bl	8001034 <__aeabi_fcmplt>
 800c420:	b140      	cbz	r0, 800c434 <sqrtf+0x30>
 800c422:	f7fd f8c1 	bl	80095a8 <__errno>
 800c426:	2321      	movs	r3, #33	; 0x21
 800c428:	2100      	movs	r1, #0
 800c42a:	6003      	str	r3, [r0, #0]
 800c42c:	4608      	mov	r0, r1
 800c42e:	f7f4 fd17 	bl	8000e60 <__aeabi_fdiv>
 800c432:	4604      	mov	r4, r0
 800c434:	4620      	mov	r0, r4
 800c436:	bd38      	pop	{r3, r4, r5, pc}

0800c438 <__ieee754_asinf>:
 800c438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c43c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c440:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c444:	4604      	mov	r4, r0
 800c446:	4605      	mov	r5, r0
 800c448:	d10c      	bne.n	800c464 <__ieee754_asinf+0x2c>
 800c44a:	498d      	ldr	r1, [pc, #564]	; (800c680 <__ieee754_asinf+0x248>)
 800c44c:	f7f4 fc54 	bl	8000cf8 <__aeabi_fmul>
 800c450:	498c      	ldr	r1, [pc, #560]	; (800c684 <__ieee754_asinf+0x24c>)
 800c452:	4605      	mov	r5, r0
 800c454:	4620      	mov	r0, r4
 800c456:	f7f4 fc4f 	bl	8000cf8 <__aeabi_fmul>
 800c45a:	4601      	mov	r1, r0
 800c45c:	4628      	mov	r0, r5
 800c45e:	f7f4 fb43 	bl	8000ae8 <__addsf3>
 800c462:	e006      	b.n	800c472 <__ieee754_asinf+0x3a>
 800c464:	dd07      	ble.n	800c476 <__ieee754_asinf+0x3e>
 800c466:	4601      	mov	r1, r0
 800c468:	f7f4 fb3c 	bl	8000ae4 <__aeabi_fsub>
 800c46c:	4601      	mov	r1, r0
 800c46e:	f7f4 fcf7 	bl	8000e60 <__aeabi_fdiv>
 800c472:	4604      	mov	r4, r0
 800c474:	e00e      	b.n	800c494 <__ieee754_asinf+0x5c>
 800c476:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c47a:	da58      	bge.n	800c52e <__ieee754_asinf+0xf6>
 800c47c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c480:	da0b      	bge.n	800c49a <__ieee754_asinf+0x62>
 800c482:	4981      	ldr	r1, [pc, #516]	; (800c688 <__ieee754_asinf+0x250>)
 800c484:	f7f4 fb30 	bl	8000ae8 <__addsf3>
 800c488:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c48c:	f7f4 fdf0 	bl	8001070 <__aeabi_fcmpgt>
 800c490:	2800      	cmp	r0, #0
 800c492:	d04c      	beq.n	800c52e <__ieee754_asinf+0xf6>
 800c494:	4620      	mov	r0, r4
 800c496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49a:	4601      	mov	r1, r0
 800c49c:	f7f4 fc2c 	bl	8000cf8 <__aeabi_fmul>
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	497a      	ldr	r1, [pc, #488]	; (800c68c <__ieee754_asinf+0x254>)
 800c4a4:	f7f4 fc28 	bl	8000cf8 <__aeabi_fmul>
 800c4a8:	4979      	ldr	r1, [pc, #484]	; (800c690 <__ieee754_asinf+0x258>)
 800c4aa:	f7f4 fb1d 	bl	8000ae8 <__addsf3>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7f4 fc22 	bl	8000cf8 <__aeabi_fmul>
 800c4b4:	4977      	ldr	r1, [pc, #476]	; (800c694 <__ieee754_asinf+0x25c>)
 800c4b6:	f7f4 fb15 	bl	8000ae4 <__aeabi_fsub>
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7f4 fc1c 	bl	8000cf8 <__aeabi_fmul>
 800c4c0:	4975      	ldr	r1, [pc, #468]	; (800c698 <__ieee754_asinf+0x260>)
 800c4c2:	f7f4 fb11 	bl	8000ae8 <__addsf3>
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 fc16 	bl	8000cf8 <__aeabi_fmul>
 800c4cc:	4973      	ldr	r1, [pc, #460]	; (800c69c <__ieee754_asinf+0x264>)
 800c4ce:	f7f4 fb09 	bl	8000ae4 <__aeabi_fsub>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f7f4 fc10 	bl	8000cf8 <__aeabi_fmul>
 800c4d8:	4971      	ldr	r1, [pc, #452]	; (800c6a0 <__ieee754_asinf+0x268>)
 800c4da:	f7f4 fb05 	bl	8000ae8 <__addsf3>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 fc0a 	bl	8000cf8 <__aeabi_fmul>
 800c4e4:	496f      	ldr	r1, [pc, #444]	; (800c6a4 <__ieee754_asinf+0x26c>)
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f7f4 fc05 	bl	8000cf8 <__aeabi_fmul>
 800c4ee:	496e      	ldr	r1, [pc, #440]	; (800c6a8 <__ieee754_asinf+0x270>)
 800c4f0:	f7f4 faf8 	bl	8000ae4 <__aeabi_fsub>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7f4 fbff 	bl	8000cf8 <__aeabi_fmul>
 800c4fa:	496c      	ldr	r1, [pc, #432]	; (800c6ac <__ieee754_asinf+0x274>)
 800c4fc:	f7f4 faf4 	bl	8000ae8 <__addsf3>
 800c500:	4629      	mov	r1, r5
 800c502:	f7f4 fbf9 	bl	8000cf8 <__aeabi_fmul>
 800c506:	496a      	ldr	r1, [pc, #424]	; (800c6b0 <__ieee754_asinf+0x278>)
 800c508:	f7f4 faec 	bl	8000ae4 <__aeabi_fsub>
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7f4 fbf3 	bl	8000cf8 <__aeabi_fmul>
 800c512:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c516:	f7f4 fae7 	bl	8000ae8 <__addsf3>
 800c51a:	4601      	mov	r1, r0
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7f4 fc9f 	bl	8000e60 <__aeabi_fdiv>
 800c522:	4621      	mov	r1, r4
 800c524:	f7f4 fbe8 	bl	8000cf8 <__aeabi_fmul>
 800c528:	4601      	mov	r1, r0
 800c52a:	4620      	mov	r0, r4
 800c52c:	e797      	b.n	800c45e <__ieee754_asinf+0x26>
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 faaa 	bl	800ca88 <fabsf>
 800c534:	4601      	mov	r1, r0
 800c536:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c53a:	f7f4 fad3 	bl	8000ae4 <__aeabi_fsub>
 800c53e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c542:	f7f4 fbd9 	bl	8000cf8 <__aeabi_fmul>
 800c546:	4606      	mov	r6, r0
 800c548:	4950      	ldr	r1, [pc, #320]	; (800c68c <__ieee754_asinf+0x254>)
 800c54a:	f7f4 fbd5 	bl	8000cf8 <__aeabi_fmul>
 800c54e:	4950      	ldr	r1, [pc, #320]	; (800c690 <__ieee754_asinf+0x258>)
 800c550:	f7f4 faca 	bl	8000ae8 <__addsf3>
 800c554:	4631      	mov	r1, r6
 800c556:	f7f4 fbcf 	bl	8000cf8 <__aeabi_fmul>
 800c55a:	494e      	ldr	r1, [pc, #312]	; (800c694 <__ieee754_asinf+0x25c>)
 800c55c:	f7f4 fac2 	bl	8000ae4 <__aeabi_fsub>
 800c560:	4631      	mov	r1, r6
 800c562:	f7f4 fbc9 	bl	8000cf8 <__aeabi_fmul>
 800c566:	494c      	ldr	r1, [pc, #304]	; (800c698 <__ieee754_asinf+0x260>)
 800c568:	f7f4 fabe 	bl	8000ae8 <__addsf3>
 800c56c:	4631      	mov	r1, r6
 800c56e:	f7f4 fbc3 	bl	8000cf8 <__aeabi_fmul>
 800c572:	494a      	ldr	r1, [pc, #296]	; (800c69c <__ieee754_asinf+0x264>)
 800c574:	f7f4 fab6 	bl	8000ae4 <__aeabi_fsub>
 800c578:	4631      	mov	r1, r6
 800c57a:	f7f4 fbbd 	bl	8000cf8 <__aeabi_fmul>
 800c57e:	4948      	ldr	r1, [pc, #288]	; (800c6a0 <__ieee754_asinf+0x268>)
 800c580:	f7f4 fab2 	bl	8000ae8 <__addsf3>
 800c584:	4631      	mov	r1, r6
 800c586:	f7f4 fbb7 	bl	8000cf8 <__aeabi_fmul>
 800c58a:	4946      	ldr	r1, [pc, #280]	; (800c6a4 <__ieee754_asinf+0x26c>)
 800c58c:	4681      	mov	r9, r0
 800c58e:	4630      	mov	r0, r6
 800c590:	f7f4 fbb2 	bl	8000cf8 <__aeabi_fmul>
 800c594:	4944      	ldr	r1, [pc, #272]	; (800c6a8 <__ieee754_asinf+0x270>)
 800c596:	f7f4 faa5 	bl	8000ae4 <__aeabi_fsub>
 800c59a:	4631      	mov	r1, r6
 800c59c:	f7f4 fbac 	bl	8000cf8 <__aeabi_fmul>
 800c5a0:	4942      	ldr	r1, [pc, #264]	; (800c6ac <__ieee754_asinf+0x274>)
 800c5a2:	f7f4 faa1 	bl	8000ae8 <__addsf3>
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	f7f4 fba6 	bl	8000cf8 <__aeabi_fmul>
 800c5ac:	4940      	ldr	r1, [pc, #256]	; (800c6b0 <__ieee754_asinf+0x278>)
 800c5ae:	f7f4 fa99 	bl	8000ae4 <__aeabi_fsub>
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	f7f4 fba0 	bl	8000cf8 <__aeabi_fmul>
 800c5b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5bc:	f7f4 fa94 	bl	8000ae8 <__addsf3>
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f000 f902 	bl	800c7cc <__ieee754_sqrtf>
 800c5c8:	4b3a      	ldr	r3, [pc, #232]	; (800c6b4 <__ieee754_asinf+0x27c>)
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	4598      	cmp	r8, r3
 800c5ce:	dd1a      	ble.n	800c606 <__ieee754_asinf+0x1ce>
 800c5d0:	4651      	mov	r1, sl
 800c5d2:	4648      	mov	r0, r9
 800c5d4:	f7f4 fc44 	bl	8000e60 <__aeabi_fdiv>
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f4 fb8d 	bl	8000cf8 <__aeabi_fmul>
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f4 fa82 	bl	8000ae8 <__addsf3>
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	f7f4 fa7f 	bl	8000ae8 <__addsf3>
 800c5ea:	4933      	ldr	r1, [pc, #204]	; (800c6b8 <__ieee754_asinf+0x280>)
 800c5ec:	f7f4 fa7c 	bl	8000ae8 <__addsf3>
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	4823      	ldr	r0, [pc, #140]	; (800c680 <__ieee754_asinf+0x248>)
 800c5f4:	f7f4 fa76 	bl	8000ae4 <__aeabi_fsub>
 800c5f8:	2d00      	cmp	r5, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	f73f af4a 	bgt.w	800c494 <__ieee754_asinf+0x5c>
 800c600:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c604:	e735      	b.n	800c472 <__ieee754_asinf+0x3a>
 800c606:	4601      	mov	r1, r0
 800c608:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c60c:	f7f4 fa6c 	bl	8000ae8 <__addsf3>
 800c610:	4651      	mov	r1, sl
 800c612:	4604      	mov	r4, r0
 800c614:	4648      	mov	r0, r9
 800c616:	f7f4 fc23 	bl	8000e60 <__aeabi_fdiv>
 800c61a:	4601      	mov	r1, r0
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7f4 fb6b 	bl	8000cf8 <__aeabi_fmul>
 800c622:	f028 080f 	bic.w	r8, r8, #15
 800c626:	4681      	mov	r9, r0
 800c628:	4641      	mov	r1, r8
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7f4 fb64 	bl	8000cf8 <__aeabi_fmul>
 800c630:	4601      	mov	r1, r0
 800c632:	4630      	mov	r0, r6
 800c634:	f7f4 fa56 	bl	8000ae4 <__aeabi_fsub>
 800c638:	4641      	mov	r1, r8
 800c63a:	4604      	mov	r4, r0
 800c63c:	4638      	mov	r0, r7
 800c63e:	f7f4 fa53 	bl	8000ae8 <__addsf3>
 800c642:	4601      	mov	r1, r0
 800c644:	4620      	mov	r0, r4
 800c646:	f7f4 fc0b 	bl	8000e60 <__aeabi_fdiv>
 800c64a:	4601      	mov	r1, r0
 800c64c:	f7f4 fa4c 	bl	8000ae8 <__addsf3>
 800c650:	4601      	mov	r1, r0
 800c652:	480c      	ldr	r0, [pc, #48]	; (800c684 <__ieee754_asinf+0x24c>)
 800c654:	f7f4 fa46 	bl	8000ae4 <__aeabi_fsub>
 800c658:	4601      	mov	r1, r0
 800c65a:	4648      	mov	r0, r9
 800c65c:	f7f4 fa42 	bl	8000ae4 <__aeabi_fsub>
 800c660:	4641      	mov	r1, r8
 800c662:	4604      	mov	r4, r0
 800c664:	4640      	mov	r0, r8
 800c666:	f7f4 fa3f 	bl	8000ae8 <__addsf3>
 800c66a:	4601      	mov	r1, r0
 800c66c:	4813      	ldr	r0, [pc, #76]	; (800c6bc <__ieee754_asinf+0x284>)
 800c66e:	f7f4 fa39 	bl	8000ae4 <__aeabi_fsub>
 800c672:	4601      	mov	r1, r0
 800c674:	4620      	mov	r0, r4
 800c676:	f7f4 fa35 	bl	8000ae4 <__aeabi_fsub>
 800c67a:	4601      	mov	r1, r0
 800c67c:	480f      	ldr	r0, [pc, #60]	; (800c6bc <__ieee754_asinf+0x284>)
 800c67e:	e7b9      	b.n	800c5f4 <__ieee754_asinf+0x1bc>
 800c680:	3fc90fdb 	.word	0x3fc90fdb
 800c684:	b33bbd2e 	.word	0xb33bbd2e
 800c688:	7149f2ca 	.word	0x7149f2ca
 800c68c:	3811ef08 	.word	0x3811ef08
 800c690:	3a4f7f04 	.word	0x3a4f7f04
 800c694:	3d241146 	.word	0x3d241146
 800c698:	3e4e0aa8 	.word	0x3e4e0aa8
 800c69c:	3ea6b090 	.word	0x3ea6b090
 800c6a0:	3e2aaaab 	.word	0x3e2aaaab
 800c6a4:	3d9dc62e 	.word	0x3d9dc62e
 800c6a8:	3f303361 	.word	0x3f303361
 800c6ac:	4001572d 	.word	0x4001572d
 800c6b0:	4019d139 	.word	0x4019d139
 800c6b4:	3f799999 	.word	0x3f799999
 800c6b8:	333bbd2e 	.word	0x333bbd2e
 800c6bc:	3f490fdb 	.word	0x3f490fdb

0800c6c0 <__ieee754_atan2f>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c6c6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	dc05      	bgt.n	800c6da <__ieee754_atan2f+0x1a>
 800c6ce:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c6d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	dd04      	ble.n	800c6e4 <__ieee754_atan2f+0x24>
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7f4 fa04 	bl	8000ae8 <__addsf3>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	e011      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c6e4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c6e8:	d103      	bne.n	800c6f2 <__ieee754_atan2f+0x32>
 800c6ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6ee:	f000 b8bf 	b.w	800c870 <atanf>
 800c6f2:	178c      	asrs	r4, r1, #30
 800c6f4:	f004 0402 	and.w	r4, r4, #2
 800c6f8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c6fc:	b932      	cbnz	r2, 800c70c <__ieee754_atan2f+0x4c>
 800c6fe:	2c02      	cmp	r4, #2
 800c700:	d04c      	beq.n	800c79c <__ieee754_atan2f+0xdc>
 800c702:	2c03      	cmp	r4, #3
 800c704:	d100      	bne.n	800c708 <__ieee754_atan2f+0x48>
 800c706:	4b29      	ldr	r3, [pc, #164]	; (800c7ac <__ieee754_atan2f+0xec>)
 800c708:	4618      	mov	r0, r3
 800c70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70c:	b91e      	cbnz	r6, 800c716 <__ieee754_atan2f+0x56>
 800c70e:	2f00      	cmp	r7, #0
 800c710:	da4a      	bge.n	800c7a8 <__ieee754_atan2f+0xe8>
 800c712:	4b27      	ldr	r3, [pc, #156]	; (800c7b0 <__ieee754_atan2f+0xf0>)
 800c714:	e7f8      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c716:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c71a:	d10e      	bne.n	800c73a <__ieee754_atan2f+0x7a>
 800c71c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c720:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c724:	d105      	bne.n	800c732 <__ieee754_atan2f+0x72>
 800c726:	2c02      	cmp	r4, #2
 800c728:	d83a      	bhi.n	800c7a0 <__ieee754_atan2f+0xe0>
 800c72a:	4b22      	ldr	r3, [pc, #136]	; (800c7b4 <__ieee754_atan2f+0xf4>)
 800c72c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c730:	e7ea      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c732:	2c02      	cmp	r4, #2
 800c734:	d836      	bhi.n	800c7a4 <__ieee754_atan2f+0xe4>
 800c736:	4b20      	ldr	r3, [pc, #128]	; (800c7b8 <__ieee754_atan2f+0xf8>)
 800c738:	e7f8      	b.n	800c72c <__ieee754_atan2f+0x6c>
 800c73a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c73e:	d0e6      	beq.n	800c70e <__ieee754_atan2f+0x4e>
 800c740:	1b92      	subs	r2, r2, r6
 800c742:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800c746:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800c74a:	da17      	bge.n	800c77c <__ieee754_atan2f+0xbc>
 800c74c:	2900      	cmp	r1, #0
 800c74e:	da01      	bge.n	800c754 <__ieee754_atan2f+0x94>
 800c750:	303c      	adds	r0, #60	; 0x3c
 800c752:	db15      	blt.n	800c780 <__ieee754_atan2f+0xc0>
 800c754:	4618      	mov	r0, r3
 800c756:	f7f4 fb83 	bl	8000e60 <__aeabi_fdiv>
 800c75a:	f000 f995 	bl	800ca88 <fabsf>
 800c75e:	f000 f887 	bl	800c870 <atanf>
 800c762:	4603      	mov	r3, r0
 800c764:	2c01      	cmp	r4, #1
 800c766:	d00d      	beq.n	800c784 <__ieee754_atan2f+0xc4>
 800c768:	2c02      	cmp	r4, #2
 800c76a:	d00e      	beq.n	800c78a <__ieee754_atan2f+0xca>
 800c76c:	2c00      	cmp	r4, #0
 800c76e:	d0cb      	beq.n	800c708 <__ieee754_atan2f+0x48>
 800c770:	4912      	ldr	r1, [pc, #72]	; (800c7bc <__ieee754_atan2f+0xfc>)
 800c772:	4618      	mov	r0, r3
 800c774:	f7f4 f9b8 	bl	8000ae8 <__addsf3>
 800c778:	4911      	ldr	r1, [pc, #68]	; (800c7c0 <__ieee754_atan2f+0x100>)
 800c77a:	e00c      	b.n	800c796 <__ieee754_atan2f+0xd6>
 800c77c:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <__ieee754_atan2f+0x104>)
 800c77e:	e7f1      	b.n	800c764 <__ieee754_atan2f+0xa4>
 800c780:	2300      	movs	r3, #0
 800c782:	e7ef      	b.n	800c764 <__ieee754_atan2f+0xa4>
 800c784:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c788:	e7be      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c78a:	490c      	ldr	r1, [pc, #48]	; (800c7bc <__ieee754_atan2f+0xfc>)
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7f4 f9ab 	bl	8000ae8 <__addsf3>
 800c792:	4601      	mov	r1, r0
 800c794:	480a      	ldr	r0, [pc, #40]	; (800c7c0 <__ieee754_atan2f+0x100>)
 800c796:	f7f4 f9a5 	bl	8000ae4 <__aeabi_fsub>
 800c79a:	e7a1      	b.n	800c6e0 <__ieee754_atan2f+0x20>
 800c79c:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <__ieee754_atan2f+0x100>)
 800c79e:	e7b3      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c7a0:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <__ieee754_atan2f+0x108>)
 800c7a2:	e7b1      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e7af      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c7a8:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <__ieee754_atan2f+0x104>)
 800c7aa:	e7ad      	b.n	800c708 <__ieee754_atan2f+0x48>
 800c7ac:	c0490fdb 	.word	0xc0490fdb
 800c7b0:	bfc90fdb 	.word	0xbfc90fdb
 800c7b4:	0800cedc 	.word	0x0800cedc
 800c7b8:	0800cee8 	.word	0x0800cee8
 800c7bc:	33bbbd2e 	.word	0x33bbbd2e
 800c7c0:	40490fdb 	.word	0x40490fdb
 800c7c4:	3fc90fdb 	.word	0x3fc90fdb
 800c7c8:	3f490fdb 	.word	0x3f490fdb

0800c7cc <__ieee754_sqrtf>:
 800c7cc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c7d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4604      	mov	r4, r0
 800c7da:	d309      	bcc.n	800c7f0 <__ieee754_sqrtf+0x24>
 800c7dc:	4601      	mov	r1, r0
 800c7de:	f7f4 fa8b 	bl	8000cf8 <__aeabi_fmul>
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f7f4 f97f 	bl	8000ae8 <__addsf3>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}
 800c7f0:	2a00      	cmp	r2, #0
 800c7f2:	d0fb      	beq.n	800c7ec <__ieee754_sqrtf+0x20>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	da06      	bge.n	800c806 <__ieee754_sqrtf+0x3a>
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	f7f4 f973 	bl	8000ae4 <__aeabi_fsub>
 800c7fe:	4601      	mov	r1, r0
 800c800:	f7f4 fb2e 	bl	8000e60 <__aeabi_fdiv>
 800c804:	e7f1      	b.n	800c7ea <__ieee754_sqrtf+0x1e>
 800c806:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c80a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c80e:	d029      	beq.n	800c864 <__ieee754_sqrtf+0x98>
 800c810:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c814:	07cb      	lsls	r3, r1, #31
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c81e:	f04f 0419 	mov.w	r4, #25
 800c822:	461e      	mov	r6, r3
 800c824:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c828:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c82c:	bf58      	it	pl
 800c82e:	0052      	lslpl	r2, r2, #1
 800c830:	1040      	asrs	r0, r0, #1
 800c832:	0052      	lsls	r2, r2, #1
 800c834:	1875      	adds	r5, r6, r1
 800c836:	4295      	cmp	r5, r2
 800c838:	bfde      	ittt	le
 800c83a:	186e      	addle	r6, r5, r1
 800c83c:	1b52      	suble	r2, r2, r5
 800c83e:	185b      	addle	r3, r3, r1
 800c840:	3c01      	subs	r4, #1
 800c842:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c846:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c84a:	d1f3      	bne.n	800c834 <__ieee754_sqrtf+0x68>
 800c84c:	b112      	cbz	r2, 800c854 <__ieee754_sqrtf+0x88>
 800c84e:	3301      	adds	r3, #1
 800c850:	f023 0301 	bic.w	r3, r3, #1
 800c854:	105c      	asrs	r4, r3, #1
 800c856:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c85a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c85e:	e7c5      	b.n	800c7ec <__ieee754_sqrtf+0x20>
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	3201      	adds	r2, #1
 800c864:	0218      	lsls	r0, r3, #8
 800c866:	d5fb      	bpl.n	800c860 <__ieee754_sqrtf+0x94>
 800c868:	3a01      	subs	r2, #1
 800c86a:	1a89      	subs	r1, r1, r2
 800c86c:	e7d0      	b.n	800c810 <__ieee754_sqrtf+0x44>
	...

0800c870 <atanf>:
 800c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c874:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c878:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c87c:	4604      	mov	r4, r0
 800c87e:	4680      	mov	r8, r0
 800c880:	db0e      	blt.n	800c8a0 <atanf+0x30>
 800c882:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c886:	dd04      	ble.n	800c892 <atanf+0x22>
 800c888:	4601      	mov	r1, r0
 800c88a:	f7f4 f92d 	bl	8000ae8 <__addsf3>
 800c88e:	4604      	mov	r4, r0
 800c890:	e003      	b.n	800c89a <atanf+0x2a>
 800c892:	2800      	cmp	r0, #0
 800c894:	f300 80ce 	bgt.w	800ca34 <atanf+0x1c4>
 800c898:	4c67      	ldr	r4, [pc, #412]	; (800ca38 <atanf+0x1c8>)
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	4b66      	ldr	r3, [pc, #408]	; (800ca3c <atanf+0x1cc>)
 800c8a2:	429d      	cmp	r5, r3
 800c8a4:	dc0e      	bgt.n	800c8c4 <atanf+0x54>
 800c8a6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c8aa:	da08      	bge.n	800c8be <atanf+0x4e>
 800c8ac:	4964      	ldr	r1, [pc, #400]	; (800ca40 <atanf+0x1d0>)
 800c8ae:	f7f4 f91b 	bl	8000ae8 <__addsf3>
 800c8b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c8b6:	f7f4 fbdb 	bl	8001070 <__aeabi_fcmpgt>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d1ed      	bne.n	800c89a <atanf+0x2a>
 800c8be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c8c2:	e01c      	b.n	800c8fe <atanf+0x8e>
 800c8c4:	f000 f8e0 	bl	800ca88 <fabsf>
 800c8c8:	4b5e      	ldr	r3, [pc, #376]	; (800ca44 <atanf+0x1d4>)
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	429d      	cmp	r5, r3
 800c8ce:	dc7c      	bgt.n	800c9ca <atanf+0x15a>
 800c8d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c8d4:	429d      	cmp	r5, r3
 800c8d6:	dc67      	bgt.n	800c9a8 <atanf+0x138>
 800c8d8:	4601      	mov	r1, r0
 800c8da:	f7f4 f905 	bl	8000ae8 <__addsf3>
 800c8de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c8e2:	f7f4 f8ff 	bl	8000ae4 <__aeabi_fsub>
 800c8e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7f4 f8fb 	bl	8000ae8 <__addsf3>
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f7f4 fab3 	bl	8000e60 <__aeabi_fdiv>
 800c8fa:	2600      	movs	r6, #0
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	4621      	mov	r1, r4
 800c900:	4620      	mov	r0, r4
 800c902:	f7f4 f9f9 	bl	8000cf8 <__aeabi_fmul>
 800c906:	4601      	mov	r1, r0
 800c908:	4607      	mov	r7, r0
 800c90a:	f7f4 f9f5 	bl	8000cf8 <__aeabi_fmul>
 800c90e:	4605      	mov	r5, r0
 800c910:	494d      	ldr	r1, [pc, #308]	; (800ca48 <atanf+0x1d8>)
 800c912:	f7f4 f9f1 	bl	8000cf8 <__aeabi_fmul>
 800c916:	494d      	ldr	r1, [pc, #308]	; (800ca4c <atanf+0x1dc>)
 800c918:	f7f4 f8e6 	bl	8000ae8 <__addsf3>
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f4 f9eb 	bl	8000cf8 <__aeabi_fmul>
 800c922:	494b      	ldr	r1, [pc, #300]	; (800ca50 <atanf+0x1e0>)
 800c924:	f7f4 f8e0 	bl	8000ae8 <__addsf3>
 800c928:	4629      	mov	r1, r5
 800c92a:	f7f4 f9e5 	bl	8000cf8 <__aeabi_fmul>
 800c92e:	4949      	ldr	r1, [pc, #292]	; (800ca54 <atanf+0x1e4>)
 800c930:	f7f4 f8da 	bl	8000ae8 <__addsf3>
 800c934:	4629      	mov	r1, r5
 800c936:	f7f4 f9df 	bl	8000cf8 <__aeabi_fmul>
 800c93a:	4947      	ldr	r1, [pc, #284]	; (800ca58 <atanf+0x1e8>)
 800c93c:	f7f4 f8d4 	bl	8000ae8 <__addsf3>
 800c940:	4629      	mov	r1, r5
 800c942:	f7f4 f9d9 	bl	8000cf8 <__aeabi_fmul>
 800c946:	4945      	ldr	r1, [pc, #276]	; (800ca5c <atanf+0x1ec>)
 800c948:	f7f4 f8ce 	bl	8000ae8 <__addsf3>
 800c94c:	4639      	mov	r1, r7
 800c94e:	f7f4 f9d3 	bl	8000cf8 <__aeabi_fmul>
 800c952:	4943      	ldr	r1, [pc, #268]	; (800ca60 <atanf+0x1f0>)
 800c954:	4607      	mov	r7, r0
 800c956:	4628      	mov	r0, r5
 800c958:	f7f4 f9ce 	bl	8000cf8 <__aeabi_fmul>
 800c95c:	4941      	ldr	r1, [pc, #260]	; (800ca64 <atanf+0x1f4>)
 800c95e:	f7f4 f8c1 	bl	8000ae4 <__aeabi_fsub>
 800c962:	4629      	mov	r1, r5
 800c964:	f7f4 f9c8 	bl	8000cf8 <__aeabi_fmul>
 800c968:	493f      	ldr	r1, [pc, #252]	; (800ca68 <atanf+0x1f8>)
 800c96a:	f7f4 f8bb 	bl	8000ae4 <__aeabi_fsub>
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f4 f9c2 	bl	8000cf8 <__aeabi_fmul>
 800c974:	493d      	ldr	r1, [pc, #244]	; (800ca6c <atanf+0x1fc>)
 800c976:	f7f4 f8b5 	bl	8000ae4 <__aeabi_fsub>
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f4 f9bc 	bl	8000cf8 <__aeabi_fmul>
 800c980:	493b      	ldr	r1, [pc, #236]	; (800ca70 <atanf+0x200>)
 800c982:	f7f4 f8af 	bl	8000ae4 <__aeabi_fsub>
 800c986:	4629      	mov	r1, r5
 800c988:	f7f4 f9b6 	bl	8000cf8 <__aeabi_fmul>
 800c98c:	4601      	mov	r1, r0
 800c98e:	4638      	mov	r0, r7
 800c990:	f7f4 f8aa 	bl	8000ae8 <__addsf3>
 800c994:	4621      	mov	r1, r4
 800c996:	f7f4 f9af 	bl	8000cf8 <__aeabi_fmul>
 800c99a:	1c73      	adds	r3, r6, #1
 800c99c:	4601      	mov	r1, r0
 800c99e:	d133      	bne.n	800ca08 <atanf+0x198>
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f7f4 f89f 	bl	8000ae4 <__aeabi_fsub>
 800c9a6:	e772      	b.n	800c88e <atanf+0x1e>
 800c9a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9ac:	f7f4 f89a 	bl	8000ae4 <__aeabi_fsub>
 800c9b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f7f4 f896 	bl	8000ae8 <__addsf3>
 800c9bc:	4601      	mov	r1, r0
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f7f4 fa4e 	bl	8000e60 <__aeabi_fdiv>
 800c9c4:	2601      	movs	r6, #1
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	e799      	b.n	800c8fe <atanf+0x8e>
 800c9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ca74 <atanf+0x204>)
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	dc14      	bgt.n	800c9fa <atanf+0x18a>
 800c9d0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c9d4:	f7f4 f886 	bl	8000ae4 <__aeabi_fsub>
 800c9d8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c9dc:	4605      	mov	r5, r0
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f7f4 f98a 	bl	8000cf8 <__aeabi_fmul>
 800c9e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c9e8:	f7f4 f87e 	bl	8000ae8 <__addsf3>
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f7f4 fa36 	bl	8000e60 <__aeabi_fdiv>
 800c9f4:	2602      	movs	r6, #2
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	e781      	b.n	800c8fe <atanf+0x8e>
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	481e      	ldr	r0, [pc, #120]	; (800ca78 <atanf+0x208>)
 800c9fe:	f7f4 fa2f 	bl	8000e60 <__aeabi_fdiv>
 800ca02:	2603      	movs	r6, #3
 800ca04:	4604      	mov	r4, r0
 800ca06:	e77a      	b.n	800c8fe <atanf+0x8e>
 800ca08:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <atanf+0x20c>)
 800ca0a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ca0e:	f7f4 f869 	bl	8000ae4 <__aeabi_fsub>
 800ca12:	4621      	mov	r1, r4
 800ca14:	f7f4 f866 	bl	8000ae4 <__aeabi_fsub>
 800ca18:	4b19      	ldr	r3, [pc, #100]	; (800ca80 <atanf+0x210>)
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ca20:	f7f4 f860 	bl	8000ae4 <__aeabi_fsub>
 800ca24:	f1b8 0f00 	cmp.w	r8, #0
 800ca28:	4604      	mov	r4, r0
 800ca2a:	f6bf af36 	bge.w	800c89a <atanf+0x2a>
 800ca2e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca32:	e72c      	b.n	800c88e <atanf+0x1e>
 800ca34:	4c13      	ldr	r4, [pc, #76]	; (800ca84 <atanf+0x214>)
 800ca36:	e730      	b.n	800c89a <atanf+0x2a>
 800ca38:	bfc90fdb 	.word	0xbfc90fdb
 800ca3c:	3edfffff 	.word	0x3edfffff
 800ca40:	7149f2ca 	.word	0x7149f2ca
 800ca44:	3f97ffff 	.word	0x3f97ffff
 800ca48:	3c8569d7 	.word	0x3c8569d7
 800ca4c:	3d4bda59 	.word	0x3d4bda59
 800ca50:	3d886b35 	.word	0x3d886b35
 800ca54:	3dba2e6e 	.word	0x3dba2e6e
 800ca58:	3e124925 	.word	0x3e124925
 800ca5c:	3eaaaaab 	.word	0x3eaaaaab
 800ca60:	bd15a221 	.word	0xbd15a221
 800ca64:	3d6ef16b 	.word	0x3d6ef16b
 800ca68:	3d9d8795 	.word	0x3d9d8795
 800ca6c:	3de38e38 	.word	0x3de38e38
 800ca70:	3e4ccccd 	.word	0x3e4ccccd
 800ca74:	401bffff 	.word	0x401bffff
 800ca78:	bf800000 	.word	0xbf800000
 800ca7c:	0800cf04 	.word	0x0800cf04
 800ca80:	0800cef4 	.word	0x0800cef4
 800ca84:	3fc90fdb 	.word	0x3fc90fdb

0800ca88 <fabsf>:
 800ca88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ca8c:	4770      	bx	lr
	...

0800ca90 <nanf>:
 800ca90:	4800      	ldr	r0, [pc, #0]	; (800ca94 <nanf+0x4>)
 800ca92:	4770      	bx	lr
 800ca94:	7fc00000 	.word	0x7fc00000

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr
