
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000977c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009890  08009890  00019890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c94  08009c94  000202a0  2**0
                  CONTENTS
  4 .ARM          00000000  08009c94  08009c94  000202a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c94  08009c94  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c94  08009c94  00019c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08009c9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200002a0  08009f3c  000202a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08009f3c  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cbe  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5a  00000000  00000000  00032f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00035de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d0  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ceb  00000000  00000000  000532f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938cc  00000000  00000000  00069fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd8af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  000fd900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a0 	.word	0x200002a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009874 	.word	0x08009874

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a4 	.word	0x200002a4
 800014c:	08009874 	.word	0x08009874

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <drive_forward+0x84>)
 8000ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ade:	f7ff fe25 	bl	800072c <__aeabi_ddiv>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <drive_forward+0x88>)
 8000af0:	f7ff fb3c 	bl	800016c <__adddf3>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <drive_forward+0x8c>)
 8000b02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b06:	f7ff fe11 	bl	800072c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <drive_forward+0x90>)
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	f7ff fcde 	bl	80004d8 <__aeabi_dmul>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	460b      	mov	r3, r1
 8000b20:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 8000b24:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b2c:	f7ff ffac 	bl	8000a88 <__aeabi_d2uiz>
 8000b30:	4603      	mov	r3, r0
 8000b32:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 8000b34:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b3c:	f7ff ffa4 	bl	8000a88 <__aeabi_d2uiz>
 8000b40:	4603      	mov	r3, r0
 8000b42:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000b44:	bf00      	nop
 8000b46:	3724      	adds	r7, #36	; 0x24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40590000 	.word	0x40590000
 8000b50:	3ff00000 	.word	0x3ff00000
 8000b54:	40340000 	.word	0x40340000
 8000b58:	20000000 	.word	0x20000000

08000b5c <stop>:

void stop (TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	drive_forward (htim, 0);
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffab 	bl	8000ac8 <drive_forward>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <turn_right>:

// turn right
void turn_right (TIM_HandleTypeDef *htim)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	// spin left motor
	double speed = 10;
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <turn_right+0xbc>)
 8000b8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double pulse_width = 1.0 + (speed/100.0);
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <turn_right+0xc0>)
 8000b94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b98:	f7ff fdc8 	bl	800072c <__aeabi_ddiv>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <turn_right+0xc4>)
 8000baa:	f7ff fadf 	bl	800016c <__adddf3>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double command = (pulse_width/20.0)*ARR;
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <turn_right+0xc8>)
 8000bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bc0:	f7ff fdb4 	bl	800072c <__aeabi_ddiv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <turn_right+0xcc>)
 8000bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd2:	f7ff fc81 	bl	80004d8 <__aeabi_dmul>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR1 = command;
 8000bde:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000be6:	f7ff ff4f 	bl	8000a88 <__aeabi_d2uiz>
 8000bea:	4603      	mov	r3, r0
 8000bec:	6363      	str	r3, [r4, #52]	; 0x34

	// hold right motor
	pulse_width = 1.0;
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <turn_right+0xc4>)
 8000bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	command = (pulse_width/20.0)*ARR;
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <turn_right+0xc8>)
 8000bfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c02:	f7ff fd93 	bl	800072c <__aeabi_ddiv>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <turn_right+0xcc>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fc60 	bl	80004d8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR2 = command;
 8000c20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c28:	f7ff ff2e 	bl	8000a88 <__aeabi_d2uiz>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000c30:	bf00      	nop
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40240000 	.word	0x40240000
 8000c3c:	40590000 	.word	0x40590000
 8000c40:	3ff00000 	.word	0x3ff00000
 8000c44:	40340000 	.word	0x40340000
 8000c48:	20000000 	.word	0x20000000

08000c4c <accelerate>:

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fbc0 	bl	80003e4 <__aeabi_ui2d>
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <accelerate+0xa8>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fd5f 	bl	800072c <__aeabi_ddiv>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <accelerate+0xac>)
 8000c7c:	f7ff fc2c 	bl	80004d8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <accelerate+0xb0>)
 8000c8e:	f7ff fa6b 	bl	8000168 <__aeabi_dsub>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <accelerate+0xb4>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 8000cac:	e013      	b.n	8000cd6 <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 8000cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f7ff ff08 	bl	8000ac8 <drive_forward>
		speed += 2;
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cc4:	f7ff fa52 	bl	800016c <__adddf3>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 fd63 	bl	800279c <HAL_Delay>
	while (speed < final_speed)
 8000cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cde:	f7ff fe6d 	bl	80009bc <__aeabi_dcmplt>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e2      	bne.n	8000cae <accelerate+0x62>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	40340000 	.word	0x40340000
 8000cfc:	3ff00000 	.word	0x3ff00000
 8000d00:	40590000 	.word	0x40590000

08000d04 <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8000d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fb66 	bl	80003e4 <__aeabi_ui2d>
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <decelerate+0xa8>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fd05 	bl	800072c <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <decelerate+0xac>)
 8000d30:	f7ff fbd2 	bl	80004d8 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <decelerate+0xb0>)
 8000d42:	f7ff fa11 	bl	8000168 <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <decelerate+0xb4>)
 8000d54:	f7ff fbc0 	bl	80004d8 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8000d60:	e013      	b.n	8000d8a <decelerate+0x86>
	{
		drive_forward(htim, speed);
 8000d62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff feae 	bl	8000ac8 <drive_forward>
		speed -= 2;
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d78:	f7ff f9f6 	bl	8000168 <__aeabi_dsub>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 8000d84:	200a      	movs	r0, #10
 8000d86:	f001 fd09 	bl	800279c <HAL_Delay>
	while (speed > 0)
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d96:	f7ff fe2f 	bl	80009f8 <__aeabi_dcmpgt>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e0      	bne.n	8000d62 <decelerate+0x5e>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40340000 	.word	0x40340000
 8000db4:	3ff00000 	.word	0x3ff00000
 8000db8:	40590000 	.word	0x40590000

08000dbc <ESP_Receive>:
char turn_right_com[] = "turn_r";
char accelerate_com[] = "acc";
char decelerate_com[] = "decel";


void ESP_Receive(TIM_HandleTypeDef *htim, uint8_t *UART2_rxBuffer) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	//esp command: "df_030 " where 030 is the speed percentage
//	char *received_buff = (char*)UART2_rxBuffer;
	if(strncmp((char *)UART2_rxBuffer, drive_forward_com, strlen(drive_forward_com)) == 0) {
 8000dc6:	4833      	ldr	r0, [pc, #204]	; (8000e94 <ESP_Receive+0xd8>)
 8000dc8:	f7ff f9c2 	bl	8000150 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4930      	ldr	r1, [pc, #192]	; (8000e94 <ESP_Receive+0xd8>)
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f006 fc14 	bl	8007600 <strncmp>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10d      	bne.n	8000dfa <ESP_Receive+0x3e>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, drive_forward_com);
 8000dde:	492d      	ldr	r1, [pc, #180]	; (8000e94 <ESP_Receive+0xd8>)
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f000 f861 	bl	8000ea8 <get_integer_from_string>
 8000de6:	60b8      	str	r0, [r7, #8]

		drive_forward(htim, speed);
 8000de8:	68b8      	ldr	r0, [r7, #8]
 8000dea:	f7ff fb0b 	bl	8000404 <__aeabi_i2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe68 	bl	8000ac8 <drive_forward>

	//esp command: "decel-" add dashes so length is met
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
		decelerate(htim);
	}
}
 8000df8:	e048      	b.n	8000e8c <ESP_Receive+0xd0>
	else if(strncmp((char *)UART2_rxBuffer, stop_com, strlen(stop_com))== 0) {
 8000dfa:	4827      	ldr	r0, [pc, #156]	; (8000e98 <ESP_Receive+0xdc>)
 8000dfc:	f7ff f9a8 	bl	8000150 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4924      	ldr	r1, [pc, #144]	; (8000e98 <ESP_Receive+0xdc>)
 8000e06:	6838      	ldr	r0, [r7, #0]
 8000e08:	f006 fbfa 	bl	8007600 <strncmp>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <ESP_Receive+0x5e>
		stop(htim);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fea2 	bl	8000b5c <stop>
}
 8000e18:	e038      	b.n	8000e8c <ESP_Receive+0xd0>
	else if(strncmp((char *)UART2_rxBuffer, turn_right_com, strlen(turn_right_com))== 0) {
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <ESP_Receive+0xe0>)
 8000e1c:	f7ff f998 	bl	8000150 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	491d      	ldr	r1, [pc, #116]	; (8000e9c <ESP_Receive+0xe0>)
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f006 fbea 	bl	8007600 <strncmp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d103      	bne.n	8000e3a <ESP_Receive+0x7e>
		turn_right(htim);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fea2 	bl	8000b7c <turn_right>
}
 8000e38:	e028      	b.n	8000e8c <ESP_Receive+0xd0>
	else if(strncmp((char *)UART2_rxBuffer, accelerate_com, strlen(accelerate_com))== 0) {
 8000e3a:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <ESP_Receive+0xe4>)
 8000e3c:	f7ff f988 	bl	8000150 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4916      	ldr	r1, [pc, #88]	; (8000ea0 <ESP_Receive+0xe4>)
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f006 fbda 	bl	8007600 <strncmp>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10d      	bne.n	8000e6e <ESP_Receive+0xb2>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, accelerate_com);
 8000e52:	4913      	ldr	r1, [pc, #76]	; (8000ea0 <ESP_Receive+0xe4>)
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f000 f827 	bl	8000ea8 <get_integer_from_string>
 8000e5a:	60f8      	str	r0, [r7, #12]
		accelerate(htim, speed);
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fad1 	bl	8000404 <__aeabi_i2d>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fef0 	bl	8000c4c <accelerate>
}
 8000e6c:	e00e      	b.n	8000e8c <ESP_Receive+0xd0>
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <ESP_Receive+0xe8>)
 8000e70:	f7ff f96e 	bl	8000150 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	490a      	ldr	r1, [pc, #40]	; (8000ea4 <ESP_Receive+0xe8>)
 8000e7a:	6838      	ldr	r0, [r7, #0]
 8000e7c:	f006 fbc0 	bl	8007600 <strncmp>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <ESP_Receive+0xd0>
		decelerate(htim);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff3c 	bl	8000d04 <decelerate>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	20000014 	.word	0x20000014
 8000ea0:	2000001c 	.word	0x2000001c
 8000ea4:	20000020 	.word	0x20000020

08000ea8 <get_integer_from_string>:

//3 digits numbers currently
int get_integer_from_string(char *buffer_msg, char *string_command){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	char int_substr[4];
	memcpy(int_substr, &buffer_msg[strlen(string_command)+1], 3 );
 8000eb2:	6838      	ldr	r0, [r7, #0]
 8000eb4:	f7ff f94c 	bl	8000150 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	3301      	adds	r3, #1
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	18d1      	adds	r1, r2, r3
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 ff24 	bl	8006d14 <memcpy>
	int_substr[3] = '\0';
 8000ecc:	2300      	movs	r3, #0
 8000ece:	72fb      	strb	r3, [r7, #11]

	int int_value = atoi(int_substr);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 feef 	bl	8006cb8 <atoi>
 8000eda:	60f8      	str	r0, [r7, #12]
	return int_value;
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b088      	sub	sp, #32
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	72fb      	strb	r3, [r7, #11]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f00:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8000f06:	f107 0214 	add.w	r2, r7, #20
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	21d2      	movs	r1, #210	; 0xd2
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f002 fb2f 	bl	8003578 <HAL_I2C_Master_Transmit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	21d2      	movs	r1, #210	; 0xd2
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f002 fc22 	bl	8003774 <HAL_I2C_Master_Receive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	75fb      	strb	r3, [r7, #23]
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ICM_WriteOneByte>:
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
}

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f52:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	733b      	strb	r3, [r7, #12]
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8000f5c:	f107 020c 	add.w	r2, r7, #12
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2302      	movs	r3, #2
 8000f68:	21d2      	movs	r1, #210	; 0xd2
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 fb04 	bl	8003578 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8000f88:	2230      	movs	r2, #48	; 0x30
 8000f8a:	217f      	movs	r1, #127	; 0x7f
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffd5 	bl	8000f3c <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f001 fc02 	bl	800279c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8000f98:	220c      	movs	r2, #12
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffcd 	bl	8000f3c <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f001 fbfa 	bl	800279c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	461a      	mov	r2, r3
 8000fac:	2104      	movs	r1, #4
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffc4 	bl	8000f3c <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f001 fbf1 	bl	800279c <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8000fba:	78bb      	ldrb	r3, [r7, #2]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2106      	movs	r1, #6
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffbb 	bl	8000f3c <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f001 fbe8 	bl	800279c <HAL_Delay>
  }
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f001 fbdd 	bl	800279c <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f8e1 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f001 fbd6 	bl	800279c <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8eb 	bl	80011cc <ICM_Enable_I2C>
	HAL_Delay(10);
 8000ff6:	200a      	movs	r0, #10
 8000ff8:	f001 fbd0 	bl	800279c <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f8f1 	bl	80011e6 <ICM_SetClock>
	HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f001 fbc9 	bl	800279c <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f8fb 	bl	8001206 <ICM_AccelGyroOff>
	HAL_Delay(20);
 8001010:	2014      	movs	r0, #20
 8001012:	f001 fbc3 	bl	800279c <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f902 	bl	8001220 <ICM_AccelGyroOn>
	HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f001 fbbd 	bl	800279c <HAL_Delay>
	ICM_Initialize(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f804 	bl	8001030 <ICM_Initialize>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 8001038:	2120      	movs	r1, #32
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f8b6 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(20);
 8001040:	2014      	movs	r0, #20
 8001042:	f001 fbab 	bl	800279c <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8001046:	2229      	movs	r2, #41	; 0x29
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8f5 	bl	800123a <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fba3 	bl	800279c <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 8001056:	220a      	movs	r2, #10
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff6e 	bl	8000f3c <ICM_WriteOneByte>
	HAL_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f001 fb9b 	bl	800279c <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8001066:	2215      	movs	r2, #21
 8001068:	2114      	movs	r1, #20
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff66 	bl	8000f3c <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff61 	bl	8000f3c <ICM_WriteOneByte>
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 fb8e 	bl	800279c <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 8001080:	220a      	movs	r2, #10
 8001082:	2111      	movs	r1, #17
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff59 	bl	8000f3c <ICM_WriteOneByte>
	HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f001 fb86 	bl	800279c <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 8001090:	2120      	movs	r1, #32
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f88a 	bl	80011ac <ICM_SelectBank>
	HAL_Delay(20);
 8001098:	2014      	movs	r0, #20
 800109a:	f001 fb7f 	bl	800279c <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 800109e:	2200      	movs	r2, #0
 80010a0:	217f      	movs	r1, #127	; 0x7f
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff4a 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80010a8:	2230      	movs	r2, #48	; 0x30
 80010aa:	210f      	movs	r1, #15
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff45 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 80010b2:	2220      	movs	r2, #32
 80010b4:	2103      	movs	r1, #3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff40 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 80010bc:	2230      	movs	r2, #48	; 0x30
 80010be:	217f      	movs	r1, #127	; 0x7f
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff3b 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80010c6:	224d      	movs	r2, #77	; 0x4d
 80010c8:	2101      	movs	r1, #1
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff36 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff31 	bl	8000f3c <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80010da:	2281      	movs	r2, #129	; 0x81
 80010dc:	2105      	movs	r1, #5
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff2c 	bl	8000f3c <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 80010e4:	2201      	movs	r2, #1
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff45 	bl	8000f78 <i2c_Mag_write>
	HAL_Delay(1000);
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	f001 fb53 	bl	800279c <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80010f6:	2202      	movs	r2, #2
 80010f8:	2131      	movs	r1, #49	; 0x31
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff3c 	bl	8000f78 <i2c_Mag_write>

	return 1337;
 8001100:	f240 5339 	movw	r3, #1337	; 0x539
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	230c      	movs	r3, #12
 800111a:	212d      	movs	r1, #45	; 0x2d
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fee2 	bl	8000ee6 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 8001134:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 8001148:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 800114a:	7c3b      	ldrb	r3, [r7, #16]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	7c7b      	ldrb	r3, [r7, #17]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <ICM_ReadAccelGyro+0x98>)
 800115c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800115e:	7cbb      	ldrb	r3, [r7, #18]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001170:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8001172:	7d3b      	ldrb	r3, [r7, #20]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21b      	sxth	r3, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001184:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8001186:	7dbb      	ldrb	r3, [r7, #22]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <ICM_ReadAccelGyro+0x9c>)
 8001198:	809a      	strh	r2, [r3, #4]
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002c4 	.word	0x200002c4
 80011a8:	200002cc 	.word	0x200002cc

080011ac <ICM_SelectBank>:
	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
}

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	461a      	mov	r2, r3
 80011bc:	217f      	movs	r1, #127	; 0x7f
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff febc 	bl	8000f3c <ICM_WriteOneByte>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 80011d4:	2220      	movs	r2, #32
 80011d6:	2103      	movs	r1, #3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff feaf 	bl	8000f3c <ICM_WriteOneByte>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2106      	movs	r1, #6
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fe9f 	bl	8000f3c <ICM_WriteOneByte>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 800120e:	223f      	movs	r2, #63	; 0x3f
 8001210:	2107      	movs	r1, #7
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe92 	bl	8000f3c <ICM_WriteOneByte>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8001228:	2200      	movs	r2, #0
 800122a:	2107      	movs	r1, #7
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fe85 	bl	8000f3c <ICM_WriteOneByte>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
 8001246:	4613      	mov	r3, r2
 8001248:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe70 	bl	8000f3c <ICM_WriteOneByte>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e029      	b.n	80012c6 <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff4a 	bl	800110c <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <ICM20948_Calibrate+0x190>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800128c:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ICM20948_Calibrate+0x190>)
 8001298:	885b      	ldrh	r3, [r3, #2]
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012a2:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <ICM20948_Calibrate+0x190>)
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012b8:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fa6e 	bl	800279c <HAL_Delay>
	for(int i=0; i<50; i++){
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b31      	cmp	r3, #49	; 0x31
 80012ca:	ddd2      	ble.n	8001272 <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80012d4:	fb82 1203 	smull	r1, r2, r2, r3
 80012d8:	1112      	asrs	r2, r2, #4
 80012da:	17db      	asrs	r3, r3, #31
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012e2:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ea:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1112      	asrs	r2, r2, #4
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012fa:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 80012fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <ICM20948_Calibrate+0x194>)
 8001304:	fb82 1203 	smull	r1, r2, r2, r3
 8001308:	1112      	asrs	r2, r2, #4
 800130a:	17db      	asrs	r3, r3, #31
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001312:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 8001316:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f872 	bl	8000404 <__aeabi_i2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <ICM20948_Calibrate+0x198>)
 8001326:	f7fe ff1f 	bl	8000168 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fb81 	bl	8000a38 <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <ICM20948_Calibrate+0x18c>)
 800133c:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	e029      	b.n	8001398 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fee1 	bl	800110c <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800135e:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001362:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001374:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <ICM20948_Calibrate+0x19c>)
 8001378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <ICM20948_Calibrate+0x1a0>)
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <ICM20948_Calibrate+0x19c>)
 800138a:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f001 fa05 	bl	800279c <HAL_Delay>
	for(int i=0; i<50; i++){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b31      	cmp	r3, #49	; 0x31
 800139c:	ddd2      	ble.n	8001344 <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013a6:	fb82 1203 	smull	r1, r2, r2, r3
 80013aa:	1112      	asrs	r2, r2, #4
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013b4:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	1112      	asrs	r2, r2, #4
 80013c4:	17db      	asrs	r3, r3, #31
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013cc:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <ICM20948_Calibrate+0x194>)
 80013d6:	fb82 1203 	smull	r1, r2, r2, r3
 80013da:	1112      	asrs	r2, r2, #4
 80013dc:	17db      	asrs	r3, r3, #31
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <ICM20948_Calibrate+0x19c>)
 80013e4:	809a      	strh	r2, [r3, #4]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002dc 	.word	0x200002dc
 80013f4:	200002c4 	.word	0x200002c4
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	40b00000 	.word	0x40b00000
 8001400:	200002d4 	.word	0x200002d4
 8001404:	200002cc 	.word	0x200002cc

08001408 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001414:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001420:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001424:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001428:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001430:	e000      	b.n	8001434 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001432:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f9      	beq.n	8001432 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800143e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e009      	b.n	800147e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60ba      	str	r2, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffc8 	bl	8001408 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	dbf1      	blt.n	800146a <_write+0x16>
  return len;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, RX_BUFF_SIZE);
 8001498:	2208      	movs	r2, #8
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <HAL_UART_RxCpltCallback+0x2c>)
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <HAL_UART_RxCpltCallback+0x30>)
 800149e:	f004 fffc 	bl	800649a <HAL_UART_Receive_IT>
    ESP_Receive(&htim2, &UART2_rxBuffer);
 80014a2:	4906      	ldr	r1, [pc, #24]	; (80014bc <HAL_UART_RxCpltCallback+0x2c>)
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <HAL_UART_RxCpltCallback+0x34>)
 80014a6:	f7ff fc89 	bl	8000dbc <ESP_Receive>
    memset(UART2_rxBuffer, 0, RX_BUFF_SIZE);
 80014aa:	2208      	movs	r2, #8
 80014ac:	2100      	movs	r1, #0
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <HAL_UART_RxCpltCallback+0x2c>)
 80014b0:	f005 fc3e 	bl	8006d30 <memset>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200002bc 	.word	0x200002bc
 80014c0:	20000440 	.word	0x20000440
 80014c4:	200003b0 	.word	0x200003b0

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f001 f904 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f858 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f000 fa94 	bl	8001a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d8:	f000 fa68 	bl	80019ac <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80014dc:	f000 f8e2 	bl	80016a4 <MX_I2C2_Init>
  MX_ADC1_Init();
 80014e0:	f000 f8a2 	bl	8001628 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014e4:	f000 f964 	bl	80017b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014e8:	f000 f9e4 	bl	80018b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014ec:	f000 f908 	bl	8001700 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80014f0:	213c      	movs	r1, #60	; 0x3c
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <main+0xa0>)
 80014f4:	f003 ff2e 	bl	8005354 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <main+0xa4>)
 80014fa:	f003 fbe7 	bl	8004ccc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 80014fe:	2104      	movs	r1, #4
 8001500:	481a      	ldr	r0, [pc, #104]	; (800156c <main+0xa4>)
 8001502:	f003 fd7f 	bl	8005004 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8001506:	2108      	movs	r1, #8
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <main+0xa4>)
 800150a:	f003 fd7b 	bl	8005004 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <main+0xa8>)
 8001510:	f003 fbdc 	bl	8004ccc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8001514:	2104      	movs	r1, #4
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <main+0xa8>)
 8001518:	f003 fc7a 	bl	8004e10 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 800151c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001520:	f001 f93c 	bl	800279c <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8001524:	2100      	movs	r1, #0
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <main+0xac>)
 8001528:	f7ff fe40 	bl	80011ac <ICM_SelectBank>
  HAL_Delay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f001 f935 	bl	800279c <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <main+0xac>)
 8001534:	f7ff fd4e 	bl	8000fd4 <ICM_PowerOn>
  HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f001 f92f 	bl	800279c <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <main+0xac>)
 8001540:	f7ff fe90 	bl	8001264 <ICM20948_Calibrate>
  HAL_Delay(100);
 8001544:	2064      	movs	r0, #100	; 0x64
 8001546:	f001 f929 	bl	800279c <HAL_Delay>

  HAL_UART_Receive_IT (&huart2, UART2_rxBuffer, RX_BUFF_SIZE);
 800154a:	2208      	movs	r2, #8
 800154c:	490a      	ldr	r1, [pc, #40]	; (8001578 <main+0xb0>)
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <main+0xb4>)
 8001550:	f004 ffa3 	bl	800649a <HAL_UART_Receive_IT>
////	  drive_forward(&htim2, speed);
//      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(3000);
//	  decelerate(&htim2);
////	  stop(&htim2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <main+0xb8>)
 800155a:	f001 feaf 	bl	80032bc <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 800155e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001562:	f001 f91b 	bl	800279c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001566:	e7f5      	b.n	8001554 <main+0x8c>
 8001568:	20000368 	.word	0x20000368
 800156c:	200003f8 	.word	0x200003f8
 8001570:	200003b0 	.word	0x200003b0
 8001574:	20000314 	.word	0x20000314
 8001578:	200002bc 	.word	0x200002bc
 800157c:	20000440 	.word	0x20000440
 8001580:	40011000 	.word	0x40011000

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fbcc 	bl	8006d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fe5f 	bl	800428c <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015d4:	f000 fab0 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f8cb 	bl	8004790 <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001600:	f000 fa9a 	bl	8001b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001604:	2302      	movs	r3, #2
 8001606:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fa56 	bl	8004ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800161a:	f000 fa8d 	bl	8001b38 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_ADC1_Init+0x74>)
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <MX_ADC1_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_ADC1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_ADC1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_ADC1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_ADC1_Init+0x74>)
 8001652:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001656:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_ADC1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_ADC1_Init+0x74>)
 8001660:	2201      	movs	r2, #1
 8001662:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_ADC1_Init+0x74>)
 8001666:	f001 f8bd 	bl	80027e4 <HAL_ADC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001670:	f000 fa62 	bl	8001b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001674:	2304      	movs	r3, #4
 8001676:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001678:	2301      	movs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_ADC1_Init+0x74>)
 8001686:	f001 f985 	bl	8002994 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001690:	f000 fa52 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002e4 	.word	0x200002e4
 80016a0:	40012400 	.word	0x40012400

080016a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MX_I2C2_Init+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_I2C2_Init+0x58>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016bc:	22d2      	movs	r2, #210	; 0xd2
 80016be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_I2C2_Init+0x50>)
 80016e2:	f001 fe05 	bl	80032f0 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 fa24 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000314 	.word	0x20000314
 80016f8:	40005800 	.word	0x40005800
 80016fc:	00061a80 	.word	0x00061a80

08001700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fb0e 	bl	8006d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_TIM1_Init+0xa8>)
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MX_TIM1_Init+0xac>)
 8001720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_TIM1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001748:	2303      	movs	r3, #3
 800174a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001760:	2301      	movs	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001774:	f003 fd4c 	bl	8005210 <HAL_TIM_Encoder_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800177e:	f000 f9db 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM1_Init+0xa8>)
 8001790:	f004 fdc6 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800179a:	f000 f9cd 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000368 	.word	0x20000368
 80017ac:	40012c00 	.word	0x40012c00

080017b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <MX_TIM2_Init+0x100>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MX_TIM2_Init+0x100>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <MX_TIM2_Init+0x100>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <MX_TIM2_Init+0x100>)
 80017f6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <MX_TIM2_Init+0x100>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <MX_TIM2_Init+0x100>)
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	4829      	ldr	r0, [pc, #164]	; (80018b0 <MX_TIM2_Init+0x100>)
 800180a:	f003 fa0f 	bl	8004c2c <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001814:	f000 f990 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001822:	4619      	mov	r1, r3
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <MX_TIM2_Init+0x100>)
 8001826:	f004 f89d 	bl	8005964 <HAL_TIM_ConfigClockSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001830:	f000 f982 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001834:	481e      	ldr	r0, [pc, #120]	; (80018b0 <MX_TIM2_Init+0x100>)
 8001836:	f003 fa93 	bl	8004d60 <HAL_TIM_PWM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001840:	f000 f97a 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4619      	mov	r1, r3
 8001852:	4817      	ldr	r0, [pc, #92]	; (80018b0 <MX_TIM2_Init+0x100>)
 8001854:	f004 fd64 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800185e:	f000 f96b 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8001866:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800186a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM2_Init+0x100>)
 800187c:	f003 ffb4 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001886:	f000 f957 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2204      	movs	r2, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM2_Init+0x100>)
 8001892:	f003 ffa9 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800189c:	f000 f94c 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM2_Init+0x100>)
 80018a2:	f000 facf 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 80018a6:	bf00      	nop
 80018a8:	3738      	adds	r7, #56	; 0x38
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200003b0 	.word	0x200003b0

080018b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_TIM3_Init+0xf0>)
 80018e0:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <MX_TIM3_Init+0xf4>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_TIM3_Init+0xf0>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_TIM3_Init+0xf0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_TIM3_Init+0xf0>)
 80018f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_TIM3_Init+0xf0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fe:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001904:	4827      	ldr	r0, [pc, #156]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001906:	f003 f991 	bl	8004c2c <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001910:	f000 f912 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	4619      	mov	r1, r3
 8001920:	4820      	ldr	r0, [pc, #128]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001922:	f004 f81f 	bl	8005964 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800192c:	f000 f904 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001930:	481c      	ldr	r0, [pc, #112]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001932:	f003 fb0f 	bl	8004f54 <HAL_TIM_IC_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800193c:	f000 f8fc 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	4815      	ldr	r0, [pc, #84]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001950:	f004 fce6 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800195a:	f000 f8ed 	bl	8001b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001962:	2301      	movs	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	2204      	movs	r2, #4
 8001972:	4619      	mov	r1, r3
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <MX_TIM3_Init+0xf0>)
 8001976:	f003 fea3 	bl	80056c0 <HAL_TIM_IC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001980:	f000 f8da 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	2208      	movs	r2, #8
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_TIM3_Init+0xf0>)
 800198c:	f003 fe98 	bl	80056c0 <HAL_TIM_IC_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001996:	f000 f8cf 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200003f8 	.word	0x200003f8
 80019a8:	40000400 	.word	0x40000400

080019ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_USART2_UART_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f004 fd0c 	bl	8006400 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ee:	f000 f8a3 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000440 	.word	0x20000440
 80019fc:	40004400 	.word	0x40004400

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a32:	f043 0320 	orr.w	r3, r3, #32
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a31      	ldr	r2, [pc, #196]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <MX_GPIO_Init+0x128>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7a:	482c      	ldr	r0, [pc, #176]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a7c:	f001 fc06 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	482a      	ldr	r0, [pc, #168]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001a86:	f001 fc01 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIDE_TRIG_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	215a      	movs	r1, #90	; 0x5a
 8001a8e:	4829      	ldr	r0, [pc, #164]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001a90:	f001 fbfc 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481f      	ldr	r0, [pc, #124]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001aae:	f001 fa69 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481a      	ldr	r0, [pc, #104]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001ac6:	f001 fa5d 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4813      	ldr	r0, [pc, #76]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001ae2:	f001 fa4f 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	4619      	mov	r1, r3
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001afe:	f001 fa41 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8001b02:	2358      	movs	r3, #88	; 0x58
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001b1a:	f001 fa33 	bl	8002f84 <HAL_GPIO_Init>

}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6193      	str	r3, [r2, #24]
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_MspInit+0x60>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_MspInit+0x60>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_ADC_MspInit+0x6c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d121      	bne.n	8001c0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_ADC_MspInit+0x70>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_ADC_MspInit+0x74>)
 8001c08:	f001 f9bc 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40012400 	.word	0x40012400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_I2C_MspInit+0x74>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d124      	bne.n	8001c8a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8001c58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_I2C_MspInit+0x7c>)
 8001c6e:	f001 f989 	bl	8002f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0x78>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010c00 	.word	0x40010c00

08001ca0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d144      	bne.n	8001d4a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4619      	mov	r1, r3
 8001d04:	4815      	ldr	r0, [pc, #84]	; (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001d06:	f001 f93d 	bl	8002f84 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2018      	movs	r0, #24
 8001d10:	f001 f851 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001d14:	2018      	movs	r0, #24
 8001d16:	f001 f86a 	bl	8002dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f001 f849 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d24:	2019      	movs	r0, #25
 8001d26:	f001 f862 	bl	8002dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f001 f841 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001d34:	201a      	movs	r0, #26
 8001d36:	f001 f85a 	bl	8002dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	201b      	movs	r0, #27
 8001d40:	f001 f839 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d44:	201b      	movs	r0, #27
 8001d46:	f001 f852 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010800 	.word	0x40010800

08001d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d10c      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	61d3      	str	r3, [r2, #28]
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d98:	e048      	b.n	8001e2c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <HAL_TIM_Base_MspInit+0xd8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d143      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	61d3      	str	r3, [r2, #28]
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_TIM_Base_MspInit+0xd4>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480f      	ldr	r0, [pc, #60]	; (8001e3c <HAL_TIM_Base_MspInit+0xdc>)
 8001e00:	f001 f8c0 	bl	8002f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4619      	mov	r1, r3
 8001e16:	480a      	ldr	r0, [pc, #40]	; (8001e40 <HAL_TIM_Base_MspInit+0xe0>)
 8001e18:	f001 f8b4 	bl	8002f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	201d      	movs	r0, #29
 8001e22:	f000 ffc8 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e26:	201d      	movs	r0, #29
 8001e28:	f000 ffe1 	bl	8002dee <HAL_NVIC_EnableIRQ>
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00

08001e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d117      	bne.n	8001e94 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_MspPostInit+0x58>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_TIM_MspPostInit+0x58>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_TIM_MspPostInit+0x58>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <HAL_TIM_MspPostInit+0x5c>)
 8001e90:	f001 f878 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010800 	.word	0x40010800

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_UART_MspInit+0x98>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d137      	bne.n	8001f34 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ece:	61d3      	str	r3, [r2, #28]
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_UART_MspInit+0x9c>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	480f      	ldr	r0, [pc, #60]	; (8001f44 <HAL_UART_MspInit+0xa0>)
 8001f08:	f001 f83c 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <HAL_UART_MspInit+0xa0>)
 8001f20:	f001 f830 	bl	8002f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2026      	movs	r0, #38	; 0x26
 8001f2a:	f000 ff44 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f2e:	2026      	movs	r0, #38	; 0x26
 8001f30:	f000 ff5d 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40004400 	.word	0x40004400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010800 	.word	0x40010800

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	0000      	movs	r0, r0
 8001f8c:	0000      	movs	r0, r0
	...

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <SysTick_Handler+0xe0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <SysTick_Handler+0xe0>)
 8001f9c:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <SysTick_Handler+0xe0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fa6:	d159      	bne.n	800205c <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <SysTick_Handler+0xe4>)
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <SysTick_Handler+0xe8>)
 8001fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa22 	bl	8000404 <__aeabi_i2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	492d      	ldr	r1, [pc, #180]	; (800207c <SysTick_Handler+0xec>)
 8001fc6:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <SysTick_Handler+0xec>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	492b      	ldr	r1, [pc, #172]	; (8002080 <SysTick_Handler+0xf0>)
 8001fd2:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <SysTick_Handler+0xe4>)
 8001fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa11 	bl	8000404 <__aeabi_i2d>
 8001fe2:	a321      	add	r3, pc, #132	; (adr r3, 8002068 <SysTick_Handler+0xd8>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fa76 	bl	80004d8 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4924      	ldr	r1, [pc, #144]	; (8002084 <SysTick_Handler+0xf4>)
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <SysTick_Handler+0xe8>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa01 	bl	8000404 <__aeabi_i2d>
 8002002:	a319      	add	r3, pc, #100	; (adr r3, 8002068 <SysTick_Handler+0xd8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fa66 	bl	80004d8 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	491d      	ldr	r1, [pc, #116]	; (8002088 <SysTick_Handler+0xf8>)
 8002012:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <SysTick_Handler+0xf4>)
 8002018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <SysTick_Handler+0xf8>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe f8a1 	bl	8000168 <__aeabi_dsub>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f7fe f89b 	bl	800016c <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4914      	ldr	r1, [pc, #80]	; (800208c <SysTick_Handler+0xfc>)
 800203c:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <SysTick_Handler+0xfc>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	490e      	ldr	r1, [pc, #56]	; (8002080 <SysTick_Handler+0xf0>)
 8002048:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <SysTick_Handler+0xe4>)
 800204e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <SysTick_Handler+0xe8>)
 8002054:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SysTick_Handler+0xe0>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 fb82 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	05f68f13 	.word	0x05f68f13
 800206c:	3fdc5115 	.word	0x3fdc5115
 8002070:	200004ac 	.word	0x200004ac
 8002074:	2000048a 	.word	0x2000048a
 8002078:	200004a8 	.word	0x200004a8
 800207c:	20000490 	.word	0x20000490
 8002080:	20000028 	.word	0x20000028
 8002084:	200004b0 	.word	0x200004b0
 8002088:	200004b8 	.word	0x200004b8
 800208c:	20000498 	.word	0x20000498

08002090 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM1_BRK_IRQHandler+0x10>)
 8002096:	f003 fa0b 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000368 	.word	0x20000368

080020a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM1_UP_IRQHandler+0x10>)
 80020aa:	f003 fa01 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000368 	.word	0x20000368

080020b8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80020be:	f003 f9f7 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000368 	.word	0x20000368

080020cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM1_CC_IRQHandler+0x10>)
 80020d2:	f003 f9ed 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000368 	.word	0x20000368

080020e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM3_IRQHandler+0x10>)
 80020e6:	f003 f9e3 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200003f8 	.word	0x200003f8

080020f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <USART2_IRQHandler+0x10>)
 80020fa:	f004 f9ff 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
//  HAL_UART_RxCpltCallback(&huart2);
//  }
  /* USER CODE END USART2_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000440 	.word	0x20000440

08002108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <_kill>:

int _kill(int pid, int sig)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002120:	f004 fdce 	bl	8006cc0 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	2216      	movs	r2, #22
 8002128:	601a      	str	r2, [r3, #0]
	return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_exit>:

void _exit (int status)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800213e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffe7 	bl	8002116 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002148:	e7fe      	b.n	8002148 <_exit+0x12>

0800214a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e00a      	b.n	8002172 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800215c:	f3af 8000 	nop.w
 8002160:	4601      	mov	r1, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	60ba      	str	r2, [r7, #8]
 8002168:	b2ca      	uxtb	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	dbf0      	blt.n	800215c <_read+0x12>
	}

return len;
 800217a:	687b      	ldr	r3, [r7, #4]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
	return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <_isatty>:

int _isatty(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f004 fd54 	bl	8006cc0 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20005000 	.word	0x20005000
 8002244:	00000400 	.word	0x00000400
 8002248:	200004c0 	.word	0x200004c0
 800224c:	200004d8 	.word	0x200004d8

08002250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	0000      	movs	r0, r0
	...

08002260 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a86      	ldr	r2, [pc, #536]	; (8002488 <HAL_TIM_IC_CaptureCallback+0x228>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d147      	bne.n	8002302 <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 8002272:	4b86      	ldr	r3, [pc, #536]	; (800248c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002274:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	4a84      	ldr	r2, [pc, #528]	; (8002490 <HAL_TIM_IC_CaptureCallback+0x230>)
 800227e:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8002280:	4b83      	ldr	r3, [pc, #524]	; (8002490 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_TIM_IC_CaptureCallback+0x230>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b21a      	sxth	r2, r3
 800228e:	4b81      	ldr	r3, [pc, #516]	; (8002494 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002290:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 8002292:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002294:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 800229c:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <HAL_TIM_IC_CaptureCallback+0x234>)
 800229e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da00      	bge.n	80022a8 <HAL_TIM_IC_CaptureCallback+0x48>
 80022a6:	3303      	adds	r3, #3
 80022a8:	109b      	asrs	r3, r3, #2
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_TIM_IC_CaptureCallback+0x238>)
 80022ae:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 80022b0:	4b79      	ldr	r3, [pc, #484]	; (8002498 <HAL_TIM_IC_CaptureCallback+0x238>)
 80022b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80022c0:	a36f      	add	r3, pc, #444	; (adr r3, 8002480 <HAL_TIM_IC_CaptureCallback+0x220>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe f907 	bl	80004d8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	4b71      	ldr	r3, [pc, #452]	; (8002498 <HAL_TIM_IC_CaptureCallback+0x238>)
 80022d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f893 	bl	8000404 <__aeabi_i2d>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fe f8f7 	bl	80004d8 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	496b      	ldr	r1, [pc, #428]	; (800249c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80022f0:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 80022f4:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 8002300:	e17c      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a66      	ldr	r2, [pc, #408]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002308:	4293      	cmp	r3, r2
 800230a:	f040 8177 	bne.w	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7f1b      	ldrb	r3, [r3, #28]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d102      	bne.n	800231c <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e005      	b.n	8002328 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d101      	bne.n	8002328 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002326:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	d171      	bne.n	8002416 <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f003 fbd7 	bl	8005aec <HAL_TIM_ReadCapturedValue>
 800233e:	4603      	mov	r3, r0
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f84f 	bl	80003e4 <__aeabi_ui2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	69f9      	ldr	r1, [r7, #28]
 800234c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_TIM_IC_CaptureCallback+0x112>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020a 	bic.w	r2, r2, #10
 800236e:	621a      	str	r2, [r3, #32]
 8002370:	e021      	b.n	80023b6 <HAL_TIM_IC_CaptureCallback+0x156>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d108      	bne.n	800238c <HAL_TIM_IC_CaptureCallback+0x12c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	e014      	b.n	80023b6 <HAL_TIM_IC_CaptureCallback+0x156>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d108      	bne.n	80023a6 <HAL_TIM_IC_CaptureCallback+0x146>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e007      	b.n	80023b6 <HAL_TIM_IC_CaptureCallback+0x156>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d108      	bne.n	80023d0 <HAL_TIM_IC_CaptureCallback+0x170>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0202 	orr.w	r2, r2, #2
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	e115      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d108      	bne.n	80023ea <HAL_TIM_IC_CaptureCallback+0x18a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	f043 0320 	orr.w	r3, r3, #32
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e108      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d108      	bne.n	8002404 <HAL_TIM_IC_CaptureCallback+0x1a4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e0fb      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002412:	6213      	str	r3, [r2, #32]
}
 8002414:	e0f2      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 80ed 	bne.w	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4619      	mov	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f003 fb5f 	bl	8005aec <HAL_TIM_ReadCapturedValue>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ffd7 	bl	80003e4 <__aeabi_ui2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	69f9      	ldr	r1, [r7, #28]
 800243c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002454:	f7fe fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d026      	beq.n	80024ac <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800246a:	f7fd fe7d 	bl	8000168 <__aeabi_dsub>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	69f9      	ldr	r1, [r7, #28]
 8002474:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002478:	e039      	b.n	80024ee <HAL_TIM_IC_CaptureCallback+0x28e>
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
 8002480:	c083126f 	.word	0xc083126f
 8002484:	401921ca 	.word	0x401921ca
 8002488:	40012c00 	.word	0x40012c00
 800248c:	20000028 	.word	0x20000028
 8002490:	20000484 	.word	0x20000484
 8002494:	20000488 	.word	0x20000488
 8002498:	2000048a 	.word	0x2000048a
 800249c:	200004a0 	.word	0x200004a0
 80024a0:	40000400 	.word	0x40000400
 80024a4:	20000058 	.word	0x20000058
 80024a8:	20000090 	.word	0x20000090
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024b8:	f7fe fa9e 	bl	80009f8 <__aeabi_dcmpgt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d015      	beq.n	80024ee <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024c8:	a14f      	add	r1, pc, #316	; (adr r1, 8002608 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 80024ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ce:	f7fd fe4b 	bl	8000168 <__aeabi_dsub>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024e0:	f7fd fe44 	bl	800016c <__adddf3>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	69f9      	ldr	r1, [r7, #28]
 80024ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024f4:	a346      	add	r3, pc, #280	; (adr r3, 8002610 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fd ffed 	bl	80004d8 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250e:	f7fe f90d 	bl	800072c <__aeabi_ddiv>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002520:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002524:	f000 f878 	bl	8002618 <filter>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	69f9      	ldr	r1, [r7, #28]
 800252e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 020a 	bic.w	r2, r2, #10
 8002550:	621a      	str	r2, [r3, #32]
 8002552:	e021      	b.n	8002598 <HAL_TIM_IC_CaptureCallback+0x338>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d108      	bne.n	800256e <HAL_TIM_IC_CaptureCallback+0x30e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	e014      	b.n	8002598 <HAL_TIM_IC_CaptureCallback+0x338>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d108      	bne.n	8002588 <HAL_TIM_IC_CaptureCallback+0x328>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	e007      	b.n	8002598 <HAL_TIM_IC_CaptureCallback+0x338>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_TIM_IC_CaptureCallback+0x34e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a12      	ldr	r2, [r2, #32]
 80025aa:	621a      	str	r2, [r3, #32]
 80025ac:	e01b      	b.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x386>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d106      	bne.n	80025c4 <HAL_TIM_IC_CaptureCallback+0x364>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	e010      	b.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x386>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d106      	bne.n	80025da <HAL_TIM_IC_CaptureCallback+0x37a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x386>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
}
 80025fa:	e7ff      	b.n	80025fc <HAL_TIM_IC_CaptureCallback+0x39c>
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bdb0      	pop	{r4, r5, r7, pc}
 8002604:	f3af 8000 	nop.w
 8002608:	00000000 	.word	0x00000000
 800260c:	40efffe0 	.word	0x40efffe0
 8002610:	b020c49c 	.word	0xb020c49c
 8002614:	3fa16872 	.word	0x3fa16872

08002618 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002622:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8002626:	a116      	add	r1, pc, #88	; (adr r1, 8002680 <filter+0x68>)
 8002628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800262c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002630:	f7fd ff52 	bl	80004d8 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4614      	mov	r4, r2
 800263a:	461d      	mov	r5, r3
 800263c:	a310      	add	r3, pc, #64	; (adr r3, 8002680 <filter+0x68>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	4910      	ldr	r1, [pc, #64]	; (8002688 <filter+0x70>)
 8002648:	f7fd fd8e 	bl	8000168 <__aeabi_dsub>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002658:	f7fd ff3e 	bl	80004d8 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fd fd82 	bl	800016c <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8002670:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bdb0      	pop	{r4, r5, r7, pc}
 800267e:	bf00      	nop
 8002680:	47ae147b 	.word	0x47ae147b
 8002684:	3f847ae1 	.word	0x3f847ae1
 8002688:	3ff00000 	.word	0x3ff00000

0800268c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800268c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800268e:	e003      	b.n	8002698 <LoopCopyDataInit>

08002690 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002692:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002694:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002696:	3104      	adds	r1, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800269c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800269e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026a0:	d3f6      	bcc.n	8002690 <CopyDataInit>
  ldr r2, =_sbss
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026a4:	e002      	b.n	80026ac <LoopFillZerobss>

080026a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026a8:	f842 3b04 	str.w	r3, [r2], #4

080026ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026b0:	d3f9      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026b2:	f7ff fdcd 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f004 fb09 	bl	8006ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ba:	f7fe ff05 	bl	80014c8 <main>
  bx lr
 80026be:	4770      	bx	lr
  ldr r3, =_sidata
 80026c0:	08009c9c 	.word	0x08009c9c
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026c8:	200002a0 	.word	0x200002a0
  ldr r2, =_sbss
 80026cc:	200002a0 	.word	0x200002a0
  ldr r3, = _ebss
 80026d0:	200004d8 	.word	0x200004d8

080026d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_2_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_Init+0x28>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_Init+0x28>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 fb59 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7ff fa26 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fb71 	bl	8002e0a <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002740:	f000 fb39 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000050 	.word	0x20000050
 800275c:	200000cc 	.word	0x200000cc
 8002760:	200000c8 	.word	0x200000c8

08002764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_IncTick+0x1c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_IncTick+0x20>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <HAL_IncTick+0x20>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	200000cc 	.word	0x200000cc
 8002784:	200004c4 	.word	0x200004c4

08002788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_GetTick+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	200004c4 	.word	0x200004c4

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fff0 	bl	8002788 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffe0 	bl	8002788 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200000cc 	.word	0x200000cc

080027e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0be      	b.n	8002984 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff f9c0 	bl	8001ba8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f9ab 	bl	8002b84 <ADC_ConversionStop_Disable>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8099 	bne.w	8002972 <HAL_ADC_Init+0x18e>
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 8095 	bne.w	8002972 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002850:	f023 0302 	bic.w	r3, r3, #2
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002864:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7b1b      	ldrb	r3, [r3, #12]
 800286a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800286c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287c:	d003      	beq.n	8002886 <HAL_ADC_Init+0xa2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_ADC_Init+0xa8>
 8002886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288a:	e000      	b.n	800288e <HAL_ADC_Init+0xaa>
 800288c:	2300      	movs	r3, #0
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7d1b      	ldrb	r3, [r3, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d119      	bne.n	80028d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7b1b      	ldrb	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	035a      	lsls	r2, r3, #13
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e00b      	b.n	80028d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_ADC_Init+0x1a8>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002900:	d003      	beq.n	800290a <HAL_ADC_Init+0x126>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d104      	bne.n	8002914 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	3b01      	subs	r3, #1
 8002910:	051b      	lsls	r3, r3, #20
 8002912:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	430a      	orrs	r2, r1
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_ADC_Init+0x1ac>)
 8002930:	4013      	ands	r3, r2
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d10b      	bne.n	8002950 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800294e:	e018      	b.n	8002982 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	f023 0312 	bic.w	r3, r3, #18
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002970:	e007      	b.n	8002982 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	ffe1f7fd 	.word	0xffe1f7fd
 8002990:	ff1f0efe 	.word	0xff1f0efe

08002994 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x20>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0dc      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1da>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d81c      	bhi.n	80029fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b05      	subs	r3, #5
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b05      	subs	r3, #5
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
 80029fc:	e03c      	b.n	8002a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d81c      	bhi.n	8002a40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b23      	subs	r3, #35	; 0x23
 8002a18:	221f      	movs	r2, #31
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4019      	ands	r1, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b23      	subs	r3, #35	; 0x23
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3e:	e01b      	b.n	8002a78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b41      	subs	r3, #65	; 0x41
 8002a52:	221f      	movs	r2, #31
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b41      	subs	r3, #65	; 0x41
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d91c      	bls.n	8002aba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	2207      	movs	r2, #7
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4019      	ands	r1, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6898      	ldr	r0, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b1e      	subs	r3, #30
 8002aac:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	e019      	b.n	8002aee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6898      	ldr	r0, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d003      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d132      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d125      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d126      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d11a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0c9a      	lsrs	r2, r3, #18
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b44:	e002      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x1b2>
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012400 	.word	0x40012400
 8002b7c:	20000050 	.word	0x20000050
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d12e      	bne.n	8002bfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bae:	f7ff fdeb 	bl	8002788 <HAL_GetTick>
 8002bb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb4:	e01b      	b.n	8002bee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bb6:	f7ff fde7 	bl	8002788 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d914      	bls.n	8002bee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e007      	b.n	8002bfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d0dc      	beq.n	8002bb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <__NVIC_SetPriorityGrouping>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <__NVIC_EnableIRQ+0x34>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <SysTick_Config>:
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	f7ff ff90 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff2d 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff42 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff90 	bl	8002cf8 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5f 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff35 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e020      	b.n	8002e8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 020e 	bic.w	r2, r2, #14
 8002e58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d005      	beq.n	8002eba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e051      	b.n	8002f5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 020e 	bic.w	r2, r2, #14
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <HAL_DMA_Abort_IT+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d029      	beq.n	8002f38 <HAL_DMA_Abort_IT+0xa0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_DMA_Abort_IT+0xd4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d022      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x9c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_DMA_Abort_IT+0xd8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01a      	beq.n	8002f2e <HAL_DMA_Abort_IT+0x96>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_DMA_Abort_IT+0xdc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d012      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x90>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_DMA_Abort_IT+0xe0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00a      	beq.n	8002f22 <HAL_DMA_Abort_IT+0x8a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_DMA_Abort_IT+0xe4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d102      	bne.n	8002f1c <HAL_DMA_Abort_IT+0x84>
 8002f16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f1a:	e00e      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f20:	e00b      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f26:	e008      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2c:	e005      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f32:	e002      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f34:	2310      	movs	r3, #16
 8002f36:	e000      	b.n	8002f3a <HAL_DMA_Abort_IT+0xa2>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_DMA_Abort_IT+0xe8>)
 8002f3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
    } 
  }
  return status;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40020008 	.word	0x40020008
 8002f6c:	4002001c 	.word	0x4002001c
 8002f70:	40020030 	.word	0x40020030
 8002f74:	40020044 	.word	0x40020044
 8002f78:	40020058 	.word	0x40020058
 8002f7c:	4002006c 	.word	0x4002006c
 8002f80:	40020000 	.word	0x40020000

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08b      	sub	sp, #44	; 0x2c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e169      	b.n	800326c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8158 	bne.w	8003266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4a9a      	ldr	r2, [pc, #616]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a98      	ldr	r2, [pc, #608]	; (8003224 <HAL_GPIO_Init+0x2a0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d875      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fc6:	4a98      	ldr	r2, [pc, #608]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d058      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fcc:	4a96      	ldr	r2, [pc, #600]	; (8003228 <HAL_GPIO_Init+0x2a4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d86f      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fd2:	4a96      	ldr	r2, [pc, #600]	; (800322c <HAL_GPIO_Init+0x2a8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d052      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fd8:	4a94      	ldr	r2, [pc, #592]	; (800322c <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d869      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fde:	4a94      	ldr	r2, [pc, #592]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04c      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002fe4:	4a92      	ldr	r2, [pc, #584]	; (8003230 <HAL_GPIO_Init+0x2ac>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d863      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002fea:	4a92      	ldr	r2, [pc, #584]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d046      	beq.n	800307e <HAL_GPIO_Init+0xfa>
 8002ff0:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_GPIO_Init+0x2b0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d85d      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ff6:	2b12      	cmp	r3, #18
 8002ff8:	d82a      	bhi.n	8003050 <HAL_GPIO_Init+0xcc>
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d859      	bhi.n	80030b2 <HAL_GPIO_Init+0x12e>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_GPIO_Init+0x80>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800307f 	.word	0x0800307f
 8003008:	08003059 	.word	0x08003059
 800300c:	0800306b 	.word	0x0800306b
 8003010:	080030ad 	.word	0x080030ad
 8003014:	080030b3 	.word	0x080030b3
 8003018:	080030b3 	.word	0x080030b3
 800301c:	080030b3 	.word	0x080030b3
 8003020:	080030b3 	.word	0x080030b3
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030b3 	.word	0x080030b3
 800302c:	080030b3 	.word	0x080030b3
 8003030:	080030b3 	.word	0x080030b3
 8003034:	080030b3 	.word	0x080030b3
 8003038:	080030b3 	.word	0x080030b3
 800303c:	080030b3 	.word	0x080030b3
 8003040:	080030b3 	.word	0x080030b3
 8003044:	080030b3 	.word	0x080030b3
 8003048:	08003061 	.word	0x08003061
 800304c:	08003075 	.word	0x08003075
 8003050:	4a79      	ldr	r2, [pc, #484]	; (8003238 <HAL_GPIO_Init+0x2b4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003056:	e02c      	b.n	80030b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e029      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	3304      	adds	r3, #4
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e024      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	3308      	adds	r3, #8
 8003070:	623b      	str	r3, [r7, #32]
          break;
 8003072:	e01f      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	330c      	adds	r3, #12
 800307a:	623b      	str	r3, [r7, #32]
          break;
 800307c:	e01a      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003086:	2304      	movs	r3, #4
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e013      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003094:	2308      	movs	r3, #8
 8003096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	611a      	str	r2, [r3, #16]
          break;
 800309e:	e009      	b.n	80030b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030a0:	2308      	movs	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	615a      	str	r2, [r3, #20]
          break;
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x130>
          break;
 80030b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d801      	bhi.n	80030be <HAL_GPIO_Init+0x13a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e001      	b.n	80030c2 <HAL_GPIO_Init+0x13e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d802      	bhi.n	80030d0 <HAL_GPIO_Init+0x14c>
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x152>
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3b08      	subs	r3, #8
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	210f      	movs	r1, #15
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80b1 	beq.w	8003266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x2b8>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1ec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <HAL_GPIO_Init+0x2c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3e      	ldr	r2, [pc, #248]	; (800324c <HAL_GPIO_Init+0x2c8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1e4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <HAL_GPIO_Init+0x2cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1e0>
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003164:	2304      	movs	r3, #4
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1ee>
 8003170:	2300      	movs	r3, #0
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003182:	492f      	ldr	r1, [pc, #188]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	492c      	ldr	r1, [pc, #176]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4928      	ldr	r1, [pc, #160]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4922      	ldr	r1, [pc, #136]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	491e      	ldr	r1, [pc, #120]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4918      	ldr	r1, [pc, #96]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	43db      	mvns	r3, r3
 8003202:	4914      	ldr	r1, [pc, #80]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 8003204:	4013      	ands	r3, r2
 8003206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d021      	beq.n	8003258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
 8003220:	e021      	b.n	8003266 <HAL_GPIO_Init+0x2e2>
 8003222:	bf00      	nop
 8003224:	10320000 	.word	0x10320000
 8003228:	10310000 	.word	0x10310000
 800322c:	10220000 	.word	0x10220000
 8003230:	10210000 	.word	0x10210000
 8003234:	10120000 	.word	0x10120000
 8003238:	10110000 	.word	0x10110000
 800323c:	40021000 	.word	0x40021000
 8003240:	40010000 	.word	0x40010000
 8003244:	40010800 	.word	0x40010800
 8003248:	40010c00 	.word	0x40010c00
 800324c:	40011000 	.word	0x40011000
 8003250:	40011400 	.word	0x40011400
 8003254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_GPIO_Init+0x304>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	43db      	mvns	r3, r3
 8003260:	4909      	ldr	r1, [pc, #36]	; (8003288 <HAL_GPIO_Init+0x304>)
 8003262:	4013      	ands	r3, r2
 8003264:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	3301      	adds	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f ae8e 	bne.w	8002f98 <HAL_GPIO_Init+0x14>
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	372c      	adds	r7, #44	; 0x2c
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43d9      	mvns	r1, r3
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	400b      	ands	r3, r1
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	611a      	str	r2, [r3, #16]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e12b      	b.n	800355a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fc82 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003354:	f001 fb6e 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8003358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4a81      	ldr	r2, [pc, #516]	; (8003564 <HAL_I2C_Init+0x274>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d807      	bhi.n	8003374 <HAL_I2C_Init+0x84>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a80      	ldr	r2, [pc, #512]	; (8003568 <HAL_I2C_Init+0x278>)
 8003368:	4293      	cmp	r3, r2
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e006      	b.n	8003382 <HAL_I2C_Init+0x92>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a7d      	ldr	r2, [pc, #500]	; (800356c <HAL_I2C_Init+0x27c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	bf94      	ite	ls
 800337c:	2301      	movls	r3, #1
 800337e:	2300      	movhi	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0e7      	b.n	800355a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a78      	ldr	r2, [pc, #480]	; (8003570 <HAL_I2C_Init+0x280>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	0c9b      	lsrs	r3, r3, #18
 8003394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a6a      	ldr	r2, [pc, #424]	; (8003564 <HAL_I2C_Init+0x274>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d802      	bhi.n	80033c4 <HAL_I2C_Init+0xd4>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3301      	adds	r3, #1
 80033c2:	e009      	b.n	80033d8 <HAL_I2C_Init+0xe8>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a69      	ldr	r2, [pc, #420]	; (8003574 <HAL_I2C_Init+0x284>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	3301      	adds	r3, #1
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	495c      	ldr	r1, [pc, #368]	; (8003564 <HAL_I2C_Init+0x274>)
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d819      	bhi.n	800342c <HAL_I2C_Init+0x13c>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e59      	subs	r1, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fbb1 f3f3 	udiv	r3, r1, r3
 8003406:	1c59      	adds	r1, r3, #1
 8003408:	f640 73fc 	movw	r3, #4092	; 0xffc
 800340c:	400b      	ands	r3, r1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_I2C_Init+0x138>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e59      	subs	r1, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003420:	3301      	adds	r3, #1
 8003422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003426:	e051      	b.n	80034cc <HAL_I2C_Init+0x1dc>
 8003428:	2304      	movs	r3, #4
 800342a:	e04f      	b.n	80034cc <HAL_I2C_Init+0x1dc>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d111      	bne.n	8003458 <HAL_I2C_Init+0x168>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e012      	b.n	800347e <HAL_I2C_Init+0x18e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Init+0x196>
 8003482:	2301      	movs	r3, #1
 8003484:	e022      	b.n	80034cc <HAL_I2C_Init+0x1dc>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10e      	bne.n	80034ac <HAL_I2C_Init+0x1bc>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e58      	subs	r0, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	440b      	add	r3, r1
 800349c:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	e00f      	b.n	80034cc <HAL_I2C_Init+0x1dc>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1e58      	subs	r0, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	0099      	lsls	r1, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	6809      	ldr	r1, [r1, #0]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6911      	ldr	r1, [r2, #16]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	000186a0 	.word	0x000186a0
 8003568:	001e847f 	.word	0x001e847f
 800356c:	003d08ff 	.word	0x003d08ff
 8003570:	431bde83 	.word	0x431bde83
 8003574:	10624dd3 	.word	0x10624dd3

08003578 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	460b      	mov	r3, r1
 8003586:	817b      	strh	r3, [r7, #10]
 8003588:	4613      	mov	r3, r2
 800358a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff f8fc 	bl	8002788 <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 80e0 	bne.w	8003760 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	4970      	ldr	r1, [pc, #448]	; (800376c <HAL_I2C_Master_Transmit+0x1f4>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fc92 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0d3      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2C_Master_Transmit+0x50>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0cc      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d007      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2221      	movs	r2, #33	; 0x21
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2210      	movs	r2, #16
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	893a      	ldrh	r2, [r7, #8]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a50      	ldr	r2, [pc, #320]	; (8003770 <HAL_I2C_Master_Transmit+0x1f8>)
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fafc 	bl	8003c34 <I2C_MasterRequestWrite>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e08d      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800365c:	e066      	b.n	800372c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fd0c 	bl	8004080 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06b      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d11b      	bne.n	8003700 <HAL_I2C_Master_Transmit+0x188>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fcfc 	bl	8004102 <I2C_WaitOnBTFFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	2b04      	cmp	r3, #4
 8003716:	d107      	bne.n	8003728 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e01a      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d194      	bne.n	800365e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	e000      	b.n	8003762 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003760:	2302      	movs	r3, #2
  }
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	00100002 	.word	0x00100002
 8003770:	ffff0000 	.word	0xffff0000

08003774 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	460b      	mov	r3, r1
 8003782:	817b      	strh	r3, [r7, #10]
 8003784:	4613      	mov	r3, r2
 8003786:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fe fffc 	bl	8002788 <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	f040 823f 	bne.w	8003c1e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2319      	movs	r3, #25
 80037a6:	2201      	movs	r2, #1
 80037a8:	497f      	ldr	r1, [pc, #508]	; (80039a8 <HAL_I2C_Master_Receive+0x234>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb92 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	e232      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2C_Master_Receive+0x54>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e22b      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d007      	beq.n	80037ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2222      	movs	r2, #34	; 0x22
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2210      	movs	r2, #16
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a5f      	ldr	r2, [pc, #380]	; (80039ac <HAL_I2C_Master_Receive+0x238>)
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa7e 	bl	8003d38 <I2C_MasterRequestRead>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1ec      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d113      	bne.n	8003876 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e1c0      	b.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	2b01      	cmp	r3, #1
 800387c:	d11e      	bne.n	80038bc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800388e:	b672      	cpsid	i
}
 8003890:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b8:	b662      	cpsie	i
}
 80038ba:	e035      	b.n	8003928 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11e      	bne.n	8003902 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038d4:	b672      	cpsid	i
}
 80038d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038fe:	b662      	cpsie	i
}
 8003900:	e012      	b.n	8003928 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003928:	e166      	b.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	2b03      	cmp	r3, #3
 8003930:	f200 811f 	bhi.w	8003b72 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b01      	cmp	r3, #1
 800393a:	d123      	bne.n	8003984 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fc1f 	bl	8004184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e167      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003982:	e139      	b.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b02      	cmp	r3, #2
 800398a:	d152      	bne.n	8003a32 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	4906      	ldr	r1, [pc, #24]	; (80039b0 <HAL_I2C_Master_Receive+0x23c>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa9c 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e13c      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
 80039a6:	bf00      	nop
 80039a8:	00100002 	.word	0x00100002
 80039ac:	ffff0000 	.word	0xffff0000
 80039b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039b4:	b672      	cpsid	i
}
 80039b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039fa:	b662      	cpsie	i
}
 80039fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a30:	e0e2      	b.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	497b      	ldr	r1, [pc, #492]	; (8003c28 <HAL_I2C_Master_Receive+0x4b4>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fa49 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0e9      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a92:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_I2C_Master_Receive+0x4b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	4a65      	ldr	r2, [pc, #404]	; (8003c30 <HAL_I2C_Master_Receive+0x4bc>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a1a      	lsrs	r2, r3, #8
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d118      	bne.n	8003aea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ada:	b662      	cpsie	i
}
 8003adc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e09a      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d1d9      	bne.n	8003aac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3a:	b662      	cpsie	i
}
 8003b3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b70:	e042      	b.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fb04 	bl	8004184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e04c      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d118      	bne.n	8003bf8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f ae94 	bne.w	800392a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3728      	adds	r7, #40	; 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	00010004 	.word	0x00010004
 8003c2c:	20000050 	.word	0x20000050
 8003c30:	14f8b589 	.word	0x14f8b589

08003c34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	460b      	mov	r3, r1
 8003c42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d006      	beq.n	8003c5e <I2C_MasterRequestWrite+0x2a>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d003      	beq.n	8003c5e <I2C_MasterRequestWrite+0x2a>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c5c:	d108      	bne.n	8003c70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00b      	b.n	8003c88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b12      	cmp	r3, #18
 8003c76:	d107      	bne.n	8003c88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f91d 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d103      	bne.n	8003cb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e035      	b.n	8003d28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc4:	d108      	bne.n	8003cd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	e01b      	b.n	8003d10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	11db      	asrs	r3, r3, #7
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0306 	and.w	r3, r3, #6
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f063 030f 	orn	r3, r3, #15
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	490e      	ldr	r1, [pc, #56]	; (8003d30 <I2C_MasterRequestWrite+0xfc>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f943 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e010      	b.n	8003d28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <I2C_MasterRequestWrite+0x100>)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f933 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	00010008 	.word	0x00010008
 8003d34:	00010002 	.word	0x00010002

08003d38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d006      	beq.n	8003d72 <I2C_MasterRequestRead+0x3a>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d003      	beq.n	8003d72 <I2C_MasterRequestRead+0x3a>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d70:	d108      	bne.n	8003d84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e00b      	b.n	8003d9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d107      	bne.n	8003d9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f893 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d103      	bne.n	8003dcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e079      	b.n	8003ec4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd8:	d108      	bne.n	8003dec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dda:	897b      	ldrh	r3, [r7, #10]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	e05f      	b.n	8003eac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	11db      	asrs	r3, r3, #7
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0306 	and.w	r3, r3, #6
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f063 030f 	orn	r3, r3, #15
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4930      	ldr	r1, [pc, #192]	; (8003ecc <I2C_MasterRequestRead+0x194>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8b9 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e054      	b.n	8003ec4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <I2C_MasterRequestRead+0x198>)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f8a9 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e044      	b.n	8003ec4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f831 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d103      	bne.n	8003e90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e017      	b.n	8003ec4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e94:	897b      	ldrh	r3, [r7, #10]
 8003e96:	11db      	asrs	r3, r3, #7
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f003 0306 	and.w	r3, r3, #6
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f063 030e 	orn	r3, r3, #14
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <I2C_MasterRequestRead+0x198>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f865 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010008 	.word	0x00010008
 8003ed0:	00010002 	.word	0x00010002

08003ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee4:	e025      	b.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eec:	d021      	beq.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fc4b 	bl	8002788 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e023      	b.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10d      	bne.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	e00c      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d0b6      	beq.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f90:	e051      	b.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d123      	bne.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e046      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff0:	d021      	beq.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe fbc9 	bl	8002788 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e020      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10c      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e00b      	b.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d18d      	bne.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408c:	e02d      	b.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f8ce 	bl	8004230 <I2C_IsAcknowledgeFailed>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e02d      	b.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d021      	beq.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe fb6f 	bl	8002788 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d1ca      	bne.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410e:	e02d      	b.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f88d 	bl	8004230 <I2C_IsAcknowledgeFailed>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e02d      	b.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004126:	d021      	beq.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fe fb2e 	bl	8002788 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d116      	bne.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e007      	b.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d1ca      	bne.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004190:	e042      	b.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d119      	bne.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e029      	b.n	8004228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d4:	f7fe fad8 	bl	8002788 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d302      	bcc.n	80041ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e007      	b.n	8004228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d1b5      	bne.n	8004192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d11b      	bne.n	8004280 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004250:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e272      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8087 	beq.w	80043ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ac:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d00c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042b8:	4b8f      	ldr	r3, [pc, #572]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d112      	bne.n	80042ea <HAL_RCC_OscConfig+0x5e>
 80042c4:	4b8c      	ldr	r3, [pc, #560]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d10b      	bne.n	80042ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x12c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d168      	bne.n	80043b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e24c      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x76>
 80042f4:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e02e      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x98>
 800430a:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a77      	ldr	r2, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0xbc>
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a71      	ldr	r2, [pc, #452]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004348:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6a      	ldr	r2, [pc, #424]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a67      	ldr	r2, [pc, #412]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fa0e 	bl	8002788 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fa0a 	bl	8002788 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e200      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xe4>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe f9fa 	bl	8002788 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe f9f6 	bl	8002788 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1ec      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x10c>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043d2:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d11c      	bne.n	8004418 <HAL_RCC_OscConfig+0x18c>
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x176>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c0      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4939      	ldr	r1, [pc, #228]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e03a      	b.n	800448e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x270>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fe f9af 	bl	8002788 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fe f9ab 	bl	8002788 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1a1      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4927      	ldr	r1, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	e015      	b.n	800448e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x270>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe f98e 	bl	8002788 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004470:	f7fe f98a 	bl	8002788 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e180      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03a      	beq.n	8004510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_RCC_OscConfig+0x274>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fe f96e 	bl	8002788 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fe f96a 	bl	8002788 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e160      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f000 fad8 	bl	8004a84 <RCC_Delay>
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCC_OscConfig+0x274>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fe f954 	bl	8002788 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e2:	e00f      	b.n	8004504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fe f950 	bl	8002788 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d908      	bls.n	8004504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e146      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	42420000 	.word	0x42420000
 8004500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b92      	ldr	r3, [pc, #584]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e9      	bne.n	80044e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a6 	beq.w	800466a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10d      	bne.n	800454a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4a87      	ldr	r2, [pc, #540]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	61d3      	str	r3, [r2, #28]
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b7f      	ldr	r3, [pc, #508]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7e      	ldr	r2, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fe f911 	bl	8002788 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fe f90d 	bl	8002788 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e103      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b75      	ldr	r3, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x312>
 8004590:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6213      	str	r3, [r2, #32]
 800459c:	e02d      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x334>
 80045a6:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a69      	ldr	r2, [pc, #420]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	4b67      	ldr	r3, [pc, #412]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a66      	ldr	r2, [pc, #408]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	e01c      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCC_OscConfig+0x356>
 80045c8:	4b61      	ldr	r3, [pc, #388]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a60      	ldr	r2, [pc, #384]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	4b5e      	ldr	r3, [pc, #376]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a5d      	ldr	r2, [pc, #372]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	e00b      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a57      	ldr	r2, [pc, #348]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d015      	beq.n	800462e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fe f8c1 	bl	8002788 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fe f8bd 	bl	8002788 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	; 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0b1      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	4b4b      	ldr	r3, [pc, #300]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ee      	beq.n	800460a <HAL_RCC_OscConfig+0x37e>
 800462c:	e014      	b.n	8004658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fe f8ab 	bl	8002788 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fe f8a7 	bl	8002788 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e09b      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ee      	bne.n	8004636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d105      	bne.n	800466a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465e:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4a3b      	ldr	r2, [pc, #236]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8087 	beq.w	8004782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b08      	cmp	r3, #8
 800467e:	d061      	beq.n	8004744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d146      	bne.n	8004716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fe f87b 	bl	8002788 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fe f877 	bl	8002788 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e06d      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d108      	bne.n	80046d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4921      	ldr	r1, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a19      	ldr	r1, [r3, #32]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	430b      	orrs	r3, r1
 80046e2:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fe f84b 	bl	8002788 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fe f847 	bl	8002788 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e03d      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x46a>
 8004714:	e035      	b.n	8004782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fe f834 	bl	8002788 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fe f830 	bl	8002788 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e026      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x498>
 8004742:	e01e      	b.n	8004782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e019      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
 8004758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_OscConfig+0x500>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	429a      	cmp	r2, r3
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0d0      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d910      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0207 	bic.w	r2, r3, #7
 80047ba:	4965      	ldr	r1, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800480e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d040      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d115      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e073      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06b      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f023 0203 	bic.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4936      	ldr	r1, [pc, #216]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004880:	f7fd ff82 	bl	8002788 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fd ff7e 	bl	8002788 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e053      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 020c 	and.w	r2, r3, #12
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1eb      	bne.n	8004888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d210      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 0207 	bic.w	r2, r3, #7
 80048c6:	4922      	ldr	r1, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1cc>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1d0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fee0 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40022000 	.word	0x40022000
 8004954:	40021000 	.word	0x40021000
 8004958:	080098a0 	.word	0x080098a0
 800495c:	20000050 	.word	0x20000050
 8004960:	200000c8 	.word	0x200000c8

08004964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b490      	push	{r4, r7}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xac>)
 800496c:	1d3c      	adds	r4, r7, #4
 800496e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004974:	f240 2301 	movw	r3, #513	; 0x201
 8004978:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498e:	4b21      	ldr	r3, [pc, #132]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x46>
 80049a2:	e02b      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a6:	623b      	str	r3, [r7, #32]
      break;
 80049a8:	e02b      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	0c9b      	lsrs	r3, r3, #18
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3328      	adds	r3, #40	; 0x28
 80049b4:	443b      	add	r3, r7
 80049b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d012      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	0c5b      	lsrs	r3, r3, #17
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	3328      	adds	r3, #40	; 0x28
 80049d2:	443b      	add	r3, r7
 80049d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049de:	fb03 f202 	mul.w	r2, r3, r2
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	e004      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	623b      	str	r3, [r7, #32]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049fe:	623b      	str	r3, [r7, #32]
      break;
 8004a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a02:	6a3b      	ldr	r3, [r7, #32]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc90      	pop	{r4, r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	08009890 	.word	0x08009890
 8004a14:	40021000 	.word	0x40021000
 8004a18:	007a1200 	.word	0x007a1200
 8004a1c:	003d0900 	.word	0x003d0900

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	20000050 	.word	0x20000050

08004a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a38:	f7ff fff2 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	080098b0 	.word	0x080098b0

08004a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a60:	f7ff ffde 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0adb      	lsrs	r3, r3, #11
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	080098b0 	.word	0x080098b0

08004a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCC_Delay+0x34>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <RCC_Delay+0x38>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0a5b      	lsrs	r3, r3, #9
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aa0:	bf00      	nop
  }
  while (Delay --);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1e5a      	subs	r2, r3, #1
 8004aa6:	60fa      	str	r2, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f9      	bne.n	8004aa0 <RCC_Delay+0x1c>
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000050 	.word	0x20000050
 8004abc:	10624dd3 	.word	0x10624dd3

08004ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d07d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae0:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10d      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b4c      	ldr	r3, [pc, #304]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af6:	61d3      	str	r3, [r2, #28]
 8004af8:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d118      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b14:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a42      	ldr	r2, [pc, #264]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b20:	f7fd fe32 	bl	8002788 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b28:	f7fd fe2e 	bl	8002788 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e06d      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b3a      	ldr	r3, [pc, #232]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b46:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d027      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b64:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b74:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b7a:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d014      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fdfd 	bl	8002788 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd fdf9 	bl	8002788 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e036      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ee      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4917      	ldr	r1, [pc, #92]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bcc:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	490b      	ldr	r1, [pc, #44]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4904      	ldr	r1, [pc, #16]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42420440 	.word	0x42420440

08004c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e041      	b.n	8004cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd f884 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f000 ffa6 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d001      	beq.n	8004ce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e032      	b.n	8004d4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIM_Base_Start+0x88>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start+0x48>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <HAL_TIM_Base_Start+0x8c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start+0x48>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <HAL_TIM_Base_Start+0x90>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d010      	beq.n	8004d48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e007      	b.n	8004d48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800

08004d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e041      	b.n	8004df6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f839 	bl	8004dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 ff0c 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <HAL_TIM_PWM_Start+0x24>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e022      	b.n	8004e7a <HAL_TIM_PWM_Start+0x6a>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d109      	bne.n	8004e4e <HAL_TIM_PWM_Start+0x3e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e015      	b.n	8004e7a <HAL_TIM_PWM_Start+0x6a>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start+0x58>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e008      	b.n	8004e7a <HAL_TIM_PWM_Start+0x6a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e05e      	b.n	8004f40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0x82>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e90:	e013      	b.n	8004eba <HAL_TIM_PWM_Start+0xaa>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0x92>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea0:	e00b      	b.n	8004eba <HAL_TIM_PWM_Start+0xaa>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0xa2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	e003      	b.n	8004eba <HAL_TIM_PWM_Start+0xaa>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fa07 	bl	80062d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_TIM_PWM_Start+0x138>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d107      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIM_PWM_Start+0x138>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_TIM_PWM_Start+0xfa>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d009      	beq.n	8004f0a <HAL_TIM_PWM_Start+0xfa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <HAL_TIM_PWM_Start+0x13c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_PWM_Start+0xfa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <HAL_TIM_PWM_Start+0x140>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d010      	beq.n	8004f3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	e007      	b.n	8004f3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800

08004f54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e041      	b.n	8004fea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f839 	bl	8004ff2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f000 fe12 	bl	8005bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_TIM_IC_Start_IT+0x1a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e013      	b.n	8005046 <HAL_TIM_IC_Start_IT+0x42>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d104      	bne.n	800502e <HAL_TIM_IC_Start_IT+0x2a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e00b      	b.n	8005046 <HAL_TIM_IC_Start_IT+0x42>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d104      	bne.n	800503e <HAL_TIM_IC_Start_IT+0x3a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e003      	b.n	8005046 <HAL_TIM_IC_Start_IT+0x42>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_TIM_IC_Start_IT+0x54>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e013      	b.n	8005080 <HAL_TIM_IC_Start_IT+0x7c>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d104      	bne.n	8005068 <HAL_TIM_IC_Start_IT+0x64>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e00b      	b.n	8005080 <HAL_TIM_IC_Start_IT+0x7c>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b08      	cmp	r3, #8
 800506c:	d104      	bne.n	8005078 <HAL_TIM_IC_Start_IT+0x74>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e003      	b.n	8005080 <HAL_TIM_IC_Start_IT+0x7c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507e:	b2db      	uxtb	r3, r3
 8005080:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d102      	bne.n	800508e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0b3      	b.n	80051fa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_IC_Start_IT+0x9e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	e013      	b.n	80050ca <HAL_TIM_IC_Start_IT+0xc6>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_IC_Start_IT+0xae>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b0:	e00b      	b.n	80050ca <HAL_TIM_IC_Start_IT+0xc6>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0xbe>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c0:	e003      	b.n	80050ca <HAL_TIM_IC_Start_IT+0xc6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start_IT+0xd6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d8:	e013      	b.n	8005102 <HAL_TIM_IC_Start_IT+0xfe>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0xe6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_IC_Start_IT+0xfe>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start_IT+0xf6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	e003      	b.n	8005102 <HAL_TIM_IC_Start_IT+0xfe>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d841      	bhi.n	800518c <HAL_TIM_IC_Start_IT+0x188>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <HAL_TIM_IC_Start_IT+0x10c>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005145 	.word	0x08005145
 8005114:	0800518d 	.word	0x0800518d
 8005118:	0800518d 	.word	0x0800518d
 800511c:	0800518d 	.word	0x0800518d
 8005120:	08005157 	.word	0x08005157
 8005124:	0800518d 	.word	0x0800518d
 8005128:	0800518d 	.word	0x0800518d
 800512c:	0800518d 	.word	0x0800518d
 8005130:	08005169 	.word	0x08005169
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800518d 	.word	0x0800518d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	0800517b 	.word	0x0800517b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0202 	orr.w	r2, r2, #2
 8005152:	60da      	str	r2, [r3, #12]
      break;
 8005154:	e01b      	b.n	800518e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0204 	orr.w	r2, r2, #4
 8005164:	60da      	str	r2, [r3, #12]
      break;
 8005166:	e012      	b.n	800518e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0208 	orr.w	r2, r2, #8
 8005176:	60da      	str	r2, [r3, #12]
      break;
 8005178:	e009      	b.n	800518e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0210 	orr.w	r2, r2, #16
 8005188:	60da      	str	r2, [r3, #12]
      break;
 800518a:	e000      	b.n	800518e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800518c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f001 f89d 	bl	80062d6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_TIM_IC_Start_IT+0x200>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_IC_Start_IT+0x1c0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_IC_Start_IT+0x1c0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <HAL_TIM_IC_Start_IT+0x204>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_IC_Start_IT+0x1c0>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_TIM_IC_Start_IT+0x208>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d111      	bne.n	80051e8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d010      	beq.n	80051f8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e007      	b.n	80051f8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e093      	b.n	800534c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc fd31 	bl	8001ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005254:	f023 0307 	bic.w	r3, r3, #7
 8005258:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 fca9 	bl	8005bbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	4313      	orrs	r3, r2
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052b0:	f023 030c 	bic.w	r3, r3, #12
 80052b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	4313      	orrs	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	031b      	lsls	r3, r3, #12
 80052e0:	4313      	orrs	r3, r2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	4313      	orrs	r3, r2
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005364:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800536c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005374:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800537c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d110      	bne.n	80053a6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d102      	bne.n	8005390 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800538a:	7b7b      	ldrb	r3, [r7, #13]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e089      	b.n	80054a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a4:	e031      	b.n	800540a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d110      	bne.n	80053ce <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053b2:	7b3b      	ldrb	r3, [r7, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d001      	beq.n	80053bc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e075      	b.n	80054a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053cc:	e01d      	b.n	800540a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d105      	bne.n	80053e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053da:	7b7b      	ldrb	r3, [r7, #13]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d102      	bne.n	80053e6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053e0:	7b3b      	ldrb	r3, [r7, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e05e      	b.n	80054a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d010      	beq.n	8005438 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005416:	e01f      	b.n	8005458 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f000 ff58 	bl	80062d6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0202 	orr.w	r2, r2, #2
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e02e      	b.n	8005496 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	2104      	movs	r1, #4
 8005440:	4618      	mov	r0, r3
 8005442:	f000 ff48 	bl	80062d6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0204 	orr.w	r2, r2, #4
 8005454:	60da      	str	r2, [r3, #12]
      break;
 8005456:	e01e      	b.n	8005496 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2201      	movs	r2, #1
 800545e:	2100      	movs	r1, #0
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ff38 	bl	80062d6 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2201      	movs	r2, #1
 800546c:	2104      	movs	r1, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ff31 	bl	80062d6 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0202 	orr.w	r2, r2, #2
 8005482:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0204 	orr.w	r2, r2, #4
 8005492:	60da      	str	r2, [r3, #12]
      break;
 8005494:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d122      	bne.n	800550c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0202 	mvn.w	r2, #2
 80054dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc feb4 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb43 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb49 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b04      	cmp	r3, #4
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fe8a 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb19 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb1f 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b08      	cmp	r3, #8
 800556c:	d122      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0208 	mvn.w	r2, #8
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2204      	movs	r2, #4
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fe60 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 faef 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 faf5 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0210 	mvn.w	r2, #16
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2208      	movs	r2, #8
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fe36 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fac5 	bl	8005b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 facb 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0201 	mvn.w	r2, #1
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 faa0 	bl	8005b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d10e      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d107      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fec7 	bl	80063ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d10e      	bne.n	800568c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d107      	bne.n	800568c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa8f 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b20      	cmp	r3, #32
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0220 	mvn.w	r2, #32
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fe92 	bl	80063dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_TIM_IC_ConfigChannel+0x1a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e082      	b.n	80057e0 <HAL_TIM_IC_ConfigChannel+0x120>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f000 fc4a 	bl	8005f90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 020c 	bic.w	r2, r2, #12
 800570a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
 800571e:	e05a      	b.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d11c      	bne.n	8005760 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6819      	ldr	r1, [r3, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f000 fcb3 	bl	80060a0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	619a      	str	r2, [r3, #24]
 800575e:	e03a      	b.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b08      	cmp	r3, #8
 8005764:	d11b      	bne.n	800579e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 fcfe 	bl	8006176 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 020c 	bic.w	r2, r2, #12
 8005788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
 800579c:	e01b      	b.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f000 fd1d 	bl	80061ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69d9      	ldr	r1, [r3, #28]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	021a      	lsls	r2, r3, #8
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ac      	b.n	800595c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	f200 809f 	bhi.w	8005950 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005951 	.word	0x08005951
 8005820:	08005951 	.word	0x08005951
 8005824:	08005951 	.word	0x08005951
 8005828:	0800588d 	.word	0x0800588d
 800582c:	08005951 	.word	0x08005951
 8005830:	08005951 	.word	0x08005951
 8005834:	08005951 	.word	0x08005951
 8005838:	080058cf 	.word	0x080058cf
 800583c:	08005951 	.word	0x08005951
 8005840:	08005951 	.word	0x08005951
 8005844:	08005951 	.word	0x08005951
 8005848:	0800590f 	.word	0x0800590f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fa14 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
      break;
 800588a:	e062      	b.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fa5a 	bl	8005d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]
      break;
 80058cc:	e041      	b.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 faa3 	bl	8005e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	61da      	str	r2, [r3, #28]
      break;
 800590c:	e021      	b.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 faed 	bl	8005ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	61da      	str	r2, [r3, #28]
      break;
 800594e:	e000      	b.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIM_ConfigClockSource+0x18>
 8005978:	2302      	movs	r3, #2
 800597a:	e0b3      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x180>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800599a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b4:	d03e      	beq.n	8005a34 <HAL_TIM_ConfigClockSource+0xd0>
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ba:	f200 8087 	bhi.w	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	f000 8085 	beq.w	8005ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d87f      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059cc:	2b70      	cmp	r3, #112	; 0x70
 80059ce:	d01a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0xa2>
 80059d0:	2b70      	cmp	r3, #112	; 0x70
 80059d2:	d87b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059d4:	2b60      	cmp	r3, #96	; 0x60
 80059d6:	d050      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x116>
 80059d8:	2b60      	cmp	r3, #96	; 0x60
 80059da:	d877      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059dc:	2b50      	cmp	r3, #80	; 0x50
 80059de:	d03c      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0xf6>
 80059e0:	2b50      	cmp	r3, #80	; 0x50
 80059e2:	d873      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d058      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x136>
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d86f      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d064      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x156>
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d86b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d060      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x156>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d867      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05c      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x156>
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d05a      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a04:	e062      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6899      	ldr	r1, [r3, #8]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f000 fc3f 	bl	8006298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	609a      	str	r2, [r3, #8]
      break;
 8005a32:	e04e      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f000 fc28 	bl	8006298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a56:	609a      	str	r2, [r3, #8]
      break;
 8005a58:	e03b      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 faec 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2150      	movs	r1, #80	; 0x50
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fbf6 	bl	8006264 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e02b      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6859      	ldr	r1, [r3, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f000 fb46 	bl	8006118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2160      	movs	r1, #96	; 0x60
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fbe6 	bl	8006264 <TIM_ITRx_SetConfig>
      break;
 8005a98:	e01b      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f000 facc 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2140      	movs	r1, #64	; 0x40
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fbd6 	bl	8006264 <TIM_ITRx_SetConfig>
      break;
 8005ab8:	e00b      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f000 fbcd 	bl	8006264 <TIM_ITRx_SetConfig>
        break;
 8005aca:	e002      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005acc:	bf00      	nop
 8005ace:	e000      	b.n	8005ad2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ad0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	d831      	bhi.n	8005b64 <HAL_TIM_ReadCapturedValue+0x78>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b3d 	.word	0x08005b3d
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005b65 	.word	0x08005b65
 8005b18:	08005b47 	.word	0x08005b47
 8005b1c:	08005b65 	.word	0x08005b65
 8005b20:	08005b65 	.word	0x08005b65
 8005b24:	08005b65 	.word	0x08005b65
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b65 	.word	0x08005b65
 8005b30:	08005b65 	.word	0x08005b65
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b5b 	.word	0x08005b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	60fb      	str	r3, [r7, #12]

      break;
 8005b44:	e00f      	b.n	8005b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	60fb      	str	r3, [r7, #12]

      break;
 8005b4e:	e00a      	b.n	8005b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	60fb      	str	r3, [r7, #12]

      break;
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	60fb      	str	r3, [r7, #12]

      break;
 8005b62:	e000      	b.n	8005b66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b64:	bf00      	nop
  }

  return tmpreg;
 8005b66:	68fb      	ldr	r3, [r7, #12]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop

08005b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d007      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <TIM_Base_SetConfig+0xbc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_Base_SetConfig+0x30>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a25      	ldr	r2, [pc, #148]	; (8005c7c <TIM_Base_SetConfig+0xc0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d007      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <TIM_Base_SetConfig+0xbc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_Base_SetConfig+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <TIM_Base_SetConfig+0xc0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <TIM_Base_SetConfig+0xb8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d103      	bne.n	8005c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	615a      	str	r2, [r3, #20]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <TIM_OC1_SetConfig+0xc8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10c      	bne.n	8005cf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0308 	bic.w	r3, r3, #8
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0304 	bic.w	r3, r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <TIM_OC1_SetConfig+0xc8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d111      	bne.n	8005d22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00

08005d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f023 0210 	bic.w	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0320 	bic.w	r3, r3, #32
 8005d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <TIM_OC2_SetConfig+0xd0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10d      	bne.n	8005dc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <TIM_OC2_SetConfig+0xd0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d113      	bne.n	8005df8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	40012c00 	.word	0x40012c00

08005e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <TIM_OC3_SetConfig+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d10d      	bne.n	8005e9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <TIM_OC3_SetConfig+0xd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d113      	bne.n	8005eca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40012c00 	.word	0x40012c00

08005ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	031b      	lsls	r3, r3, #12
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <TIM_OC4_SetConfig+0x98>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d109      	bne.n	8005f68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00

08005f90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <TIM_TI1_SetConfig+0xa8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_TI1_SetConfig+0x46>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc4:	d007      	beq.n	8005fd6 <TIM_TI1_SetConfig+0x46>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <TIM_TI1_SetConfig+0xac>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_TI1_SetConfig+0x46>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <TIM_TI1_SetConfig+0xb0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <TIM_TI1_SetConfig+0x4a>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <TIM_TI1_SetConfig+0x4c>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e003      	b.n	8005ffa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	b2db      	uxtb	r3, r3
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f023 030a 	bic.w	r3, r3, #10
 8006014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 030a 	and.w	r3, r3, #10
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f023 0210 	bic.w	r2, r3, #16
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	031b      	lsls	r3, r3, #12
 8006230:	b29b      	uxth	r3, r3
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800623e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	031b      	lsls	r3, r3, #12
 8006244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	f043 0307 	orr.w	r3, r3, #7
 8006286:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4313      	orrs	r3, r2
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	609a      	str	r2, [r3, #8]
}
 80062cc:	bf00      	nop
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr

080062d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b087      	sub	sp, #28
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2201      	movs	r2, #1
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	401a      	ands	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	fa01 f303 	lsl.w	r3, r1, r3
 800630e:	431a      	orrs	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
	...

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e046      	b.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d009      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10c      	bne.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800

080063dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e03f      	b.n	8006492 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fb fd3c 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fba9 	bl	8006b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d11d      	bne.n	80064f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Receive_IT+0x26>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e016      	b.n	80064f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Receive_IT+0x38>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e00f      	b.n	80064f2 <HAL_UART_Receive_IT+0x58>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f9cf 	bl	800688a <UART_Start_Receive_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	e000      	b.n	80064f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_UART_IRQHandler+0x52>
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa7f 	bl	8006a4a <UART_Receive_IT>
      return;
 800654c:	e17b      	b.n	8006846 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80b1 	beq.w	80066b8 <HAL_UART_IRQHandler+0x1bc>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_UART_IRQHandler+0x70>
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80a6 	beq.w	80066b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_UART_IRQHandler+0x90>
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_UART_IRQHandler+0xb0>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	f043 0202 	orr.w	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_UART_IRQHandler+0xd0>
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	f043 0204 	orr.w	r2, r3, #4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <HAL_UART_IRQHandler+0xfa>
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <HAL_UART_IRQHandler+0xee>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f043 0208 	orr.w	r2, r3, #8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 811e 	beq.w	800683c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_UART_IRQHandler+0x11e>
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa18 	bl	8006a4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <HAL_UART_IRQHandler+0x146>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d031      	beq.n	80066a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f95a 	bl	80068fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d023      	beq.n	800669e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006664:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d013      	beq.n	8006696 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	4a76      	ldr	r2, [pc, #472]	; (800684c <HAL_UART_IRQHandler+0x350>)
 8006674:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fc fc0c 	bl	8002e98 <HAL_DMA_Abort_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	e00e      	b.n	80066b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8e3 	bl	8006862 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00a      	b.n	80066b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8df 	bl	8006862 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e006      	b.n	80066b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f8db 	bl	8006862 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066b2:	e0c3      	b.n	800683c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	bf00      	nop
    return;
 80066b6:	e0c1      	b.n	800683c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80a1 	bne.w	8006804 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 809b 	beq.w	8006804 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8095 	beq.w	8006804 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d04e      	beq.n	800679c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006708:	8a3b      	ldrh	r3, [r7, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8098 	beq.w	8006840 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006714:	8a3a      	ldrh	r2, [r7, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	f080 8092 	bcs.w	8006840 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8a3a      	ldrh	r2, [r7, #16]
 8006720:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b20      	cmp	r3, #32
 800672a:	d02b      	beq.n	8006784 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0201 	bic.w	r2, r2, #1
 800674a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0210 	bic.w	r2, r2, #16
 8006778:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	4618      	mov	r0, r3
 8006780:	f7fc fb4f 	bl	8002e22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678c:	b29b      	uxth	r3, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f86d 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800679a:	e051      	b.n	8006840 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d047      	beq.n	8006844 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80067b4:	8a7b      	ldrh	r3, [r7, #18]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d044      	beq.n	8006844 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0210 	bic.w	r2, r2, #16
 80067f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067f8:	8a7b      	ldrh	r3, [r7, #18]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f839 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006802:	e01f      	b.n	8006844 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_UART_IRQHandler+0x324>
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f8af 	bl	800697c <UART_Transmit_IT>
    return;
 800681e:	e012      	b.n	8006846 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <HAL_UART_IRQHandler+0x34a>
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8f0 	bl	8006a1a <UART_EndTransmit_IT>
    return;
 800683a:	e004      	b.n	8006846 <HAL_UART_IRQHandler+0x34a>
    return;
 800683c:	bf00      	nop
 800683e:	e002      	b.n	8006846 <HAL_UART_IRQHandler+0x34a>
      return;
 8006840:	bf00      	nop
 8006842:	e000      	b.n	8006846 <HAL_UART_IRQHandler+0x34a>
      return;
 8006844:	bf00      	nop
  }
}
 8006846:	3728      	adds	r7, #40	; 0x28
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	08006955 	.word	0x08006955

08006850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	4613      	mov	r3, r2
 8006896:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2222      	movs	r2, #34	; 0x22
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0220 	orr.w	r2, r2, #32
 80068ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006912:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0210 	bic.w	r2, r2, #16
 800693a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr

08006954 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff77 	bl	8006862 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b21      	cmp	r3, #33	; 0x21
 800698e:	d13e      	bne.n	8006a0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d114      	bne.n	80069c4 <UART_Transmit_IT+0x48>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d110      	bne.n	80069c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]
 80069c2:	e008      	b.n	80069d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6211      	str	r1, [r2, #32]
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4619      	mov	r1, r3
 80069e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e000      	b.n	8006a10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff ff08 	bl	8006850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b22      	cmp	r3, #34	; 0x22
 8006a5c:	f040 8099 	bne.w	8006b92 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a68:	d117      	bne.n	8006a9a <UART_Receive_IT+0x50>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d113      	bne.n	8006a9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	629a      	str	r2, [r3, #40]	; 0x28
 8006a98:	e026      	b.n	8006ae8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aac:	d007      	beq.n	8006abe <UART_Receive_IT+0x74>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <UART_Receive_IT+0x82>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e008      	b.n	8006ade <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4619      	mov	r1, r3
 8006af6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d148      	bne.n	8006b8e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0220 	bic.w	r2, r2, #32
 8006b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d123      	bne.n	8006b84 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0210 	bic.w	r2, r2, #16
 8006b50:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d10a      	bne.n	8006b76 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fe79 	bl	8006874 <HAL_UARTEx_RxEventCallback>
 8006b82:	e002      	b.n	8006b8a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fa fc83 	bl	8001490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e002      	b.n	8006b94 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bd6:	f023 030c 	bic.w	r3, r3, #12
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	430b      	orrs	r3, r1
 8006be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <UART_SetConfig+0x114>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d103      	bne.n	8006c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7fd ff2a 	bl	8004a5c <HAL_RCC_GetPCLK2Freq>
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	e002      	b.n	8006c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd ff12 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8006c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009a      	lsls	r2, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <UART_SetConfig+0x118>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	0119      	lsls	r1, r3, #4
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c48:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <UART_SetConfig+0x118>)
 8006c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2064      	movs	r0, #100	; 0x64
 8006c52:	fb00 f303 	mul.w	r3, r0, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	3332      	adds	r3, #50	; 0x32
 8006c5c:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <UART_SetConfig+0x118>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c68:	4419      	add	r1, r3
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009a      	lsls	r2, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <UART_SetConfig+0x118>)
 8006c82:	fba3 0302 	umull	r0, r3, r3, r2
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	2064      	movs	r0, #100	; 0x64
 8006c8a:	fb00 f303 	mul.w	r3, r0, r3
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	3332      	adds	r3, #50	; 0x32
 8006c94:	4a07      	ldr	r2, [pc, #28]	; (8006cb4 <UART_SetConfig+0x118>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40013800 	.word	0x40013800
 8006cb4:	51eb851f 	.word	0x51eb851f

08006cb8 <atoi>:
 8006cb8:	220a      	movs	r2, #10
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f000 bd30 	b.w	8007720 <strtol>

08006cc0 <__errno>:
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <__errno+0x8>)
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	200000d0 	.word	0x200000d0

08006ccc <__libc_init_array>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	2600      	movs	r6, #0
 8006cd0:	4d0c      	ldr	r5, [pc, #48]	; (8006d04 <__libc_init_array+0x38>)
 8006cd2:	4c0d      	ldr	r4, [pc, #52]	; (8006d08 <__libc_init_array+0x3c>)
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	42a6      	cmp	r6, r4
 8006cda:	d109      	bne.n	8006cf0 <__libc_init_array+0x24>
 8006cdc:	f002 fdca 	bl	8009874 <_init>
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	4d0a      	ldr	r5, [pc, #40]	; (8006d0c <__libc_init_array+0x40>)
 8006ce4:	4c0a      	ldr	r4, [pc, #40]	; (8006d10 <__libc_init_array+0x44>)
 8006ce6:	1b64      	subs	r4, r4, r5
 8006ce8:	10a4      	asrs	r4, r4, #2
 8006cea:	42a6      	cmp	r6, r4
 8006cec:	d105      	bne.n	8006cfa <__libc_init_array+0x2e>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf4:	4798      	blx	r3
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7ee      	b.n	8006cd8 <__libc_init_array+0xc>
 8006cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfe:	4798      	blx	r3
 8006d00:	3601      	adds	r6, #1
 8006d02:	e7f2      	b.n	8006cea <__libc_init_array+0x1e>
 8006d04:	08009c94 	.word	0x08009c94
 8006d08:	08009c94 	.word	0x08009c94
 8006d0c:	08009c94 	.word	0x08009c94
 8006d10:	08009c98 	.word	0x08009c98

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <memset>:
 8006d30:	4603      	mov	r3, r0
 8006d32:	4402      	add	r2, r0
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d100      	bne.n	8006d3a <memset+0xa>
 8006d38:	4770      	bx	lr
 8006d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3e:	e7f9      	b.n	8006d34 <memset+0x4>

08006d40 <__cvt>:
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d46:	461f      	mov	r7, r3
 8006d48:	bfbb      	ittet	lt
 8006d4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d4e:	461f      	movlt	r7, r3
 8006d50:	2300      	movge	r3, #0
 8006d52:	232d      	movlt	r3, #45	; 0x2d
 8006d54:	b088      	sub	sp, #32
 8006d56:	4614      	mov	r4, r2
 8006d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d5c:	7013      	strb	r3, [r2, #0]
 8006d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d64:	f023 0820 	bic.w	r8, r3, #32
 8006d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d6c:	d005      	beq.n	8006d7a <__cvt+0x3a>
 8006d6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d72:	d100      	bne.n	8006d76 <__cvt+0x36>
 8006d74:	3501      	adds	r5, #1
 8006d76:	2302      	movs	r3, #2
 8006d78:	e000      	b.n	8006d7c <__cvt+0x3c>
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	aa07      	add	r2, sp, #28
 8006d7e:	9204      	str	r2, [sp, #16]
 8006d80:	aa06      	add	r2, sp, #24
 8006d82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d86:	e9cd 3500 	strd	r3, r5, [sp]
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	f000 fd5f 	bl	8007850 <_dtoa_r>
 8006d92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d96:	4606      	mov	r6, r0
 8006d98:	d102      	bne.n	8006da0 <__cvt+0x60>
 8006d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d9c:	07db      	lsls	r3, r3, #31
 8006d9e:	d522      	bpl.n	8006de6 <__cvt+0xa6>
 8006da0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006da4:	eb06 0905 	add.w	r9, r6, r5
 8006da8:	d110      	bne.n	8006dcc <__cvt+0x8c>
 8006daa:	7833      	ldrb	r3, [r6, #0]
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	d10a      	bne.n	8006dc6 <__cvt+0x86>
 8006db0:	2200      	movs	r2, #0
 8006db2:	2300      	movs	r3, #0
 8006db4:	4620      	mov	r0, r4
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8006dbc:	b918      	cbnz	r0, 8006dc6 <__cvt+0x86>
 8006dbe:	f1c5 0501 	rsb	r5, r5, #1
 8006dc2:	f8ca 5000 	str.w	r5, [sl]
 8006dc6:	f8da 3000 	ldr.w	r3, [sl]
 8006dca:	4499      	add	r9, r3
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	b108      	cbz	r0, 8006dde <__cvt+0x9e>
 8006dda:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dde:	2230      	movs	r2, #48	; 0x30
 8006de0:	9b07      	ldr	r3, [sp, #28]
 8006de2:	454b      	cmp	r3, r9
 8006de4:	d307      	bcc.n	8006df6 <__cvt+0xb6>
 8006de6:	4630      	mov	r0, r6
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dec:	1b9b      	subs	r3, r3, r6
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	b008      	add	sp, #32
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	9107      	str	r1, [sp, #28]
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e7f0      	b.n	8006de0 <__cvt+0xa0>

08006dfe <__exponent>:
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e02:	2900      	cmp	r1, #0
 8006e04:	f803 2b02 	strb.w	r2, [r3], #2
 8006e08:	bfb6      	itet	lt
 8006e0a:	222d      	movlt	r2, #45	; 0x2d
 8006e0c:	222b      	movge	r2, #43	; 0x2b
 8006e0e:	4249      	neglt	r1, r1
 8006e10:	2909      	cmp	r1, #9
 8006e12:	7042      	strb	r2, [r0, #1]
 8006e14:	dd2b      	ble.n	8006e6e <__exponent+0x70>
 8006e16:	f10d 0407 	add.w	r4, sp, #7
 8006e1a:	46a4      	mov	ip, r4
 8006e1c:	270a      	movs	r7, #10
 8006e1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e22:	460a      	mov	r2, r1
 8006e24:	46a6      	mov	lr, r4
 8006e26:	fb07 1516 	mls	r5, r7, r6, r1
 8006e2a:	2a63      	cmp	r2, #99	; 0x63
 8006e2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e30:	4631      	mov	r1, r6
 8006e32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006e36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e3a:	dcf0      	bgt.n	8006e1e <__exponent+0x20>
 8006e3c:	3130      	adds	r1, #48	; 0x30
 8006e3e:	f1ae 0502 	sub.w	r5, lr, #2
 8006e42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e46:	4629      	mov	r1, r5
 8006e48:	1c44      	adds	r4, r0, #1
 8006e4a:	4561      	cmp	r1, ip
 8006e4c:	d30a      	bcc.n	8006e64 <__exponent+0x66>
 8006e4e:	f10d 0209 	add.w	r2, sp, #9
 8006e52:	eba2 020e 	sub.w	r2, r2, lr
 8006e56:	4565      	cmp	r5, ip
 8006e58:	bf88      	it	hi
 8006e5a:	2200      	movhi	r2, #0
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1a18      	subs	r0, r3, r0
 8006e60:	b003      	add	sp, #12
 8006e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e6c:	e7ed      	b.n	8006e4a <__exponent+0x4c>
 8006e6e:	2330      	movs	r3, #48	; 0x30
 8006e70:	3130      	adds	r1, #48	; 0x30
 8006e72:	7083      	strb	r3, [r0, #2]
 8006e74:	70c1      	strb	r1, [r0, #3]
 8006e76:	1d03      	adds	r3, r0, #4
 8006e78:	e7f1      	b.n	8006e5e <__exponent+0x60>
	...

08006e7c <_printf_float>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	b091      	sub	sp, #68	; 0x44
 8006e82:	460c      	mov	r4, r1
 8006e84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e88:	4616      	mov	r6, r2
 8006e8a:	461f      	mov	r7, r3
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	f001 facd 	bl	800842c <_localeconv_r>
 8006e92:	6803      	ldr	r3, [r0, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	9309      	str	r3, [sp, #36]	; 0x24
 8006e98:	f7f9 f95a 	bl	8000150 <strlen>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	f023 0307 	bic.w	r3, r3, #7
 8006eac:	f103 0208 	add.w	r2, r3, #8
 8006eb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8006eb8:	f8c8 2000 	str.w	r2, [r8]
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ec4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ec8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4b9c      	ldr	r3, [pc, #624]	; (8007148 <_printf_float+0x2cc>)
 8006ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed8:	f7f9 fd98 	bl	8000a0c <__aeabi_dcmpun>
 8006edc:	bb70      	cbnz	r0, 8006f3c <_printf_float+0xc0>
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4b98      	ldr	r3, [pc, #608]	; (8007148 <_printf_float+0x2cc>)
 8006ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ee8:	f7f9 fd72 	bl	80009d0 <__aeabi_dcmple>
 8006eec:	bb30      	cbnz	r0, 8006f3c <_printf_float+0xc0>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	f7f9 fd61 	bl	80009bc <__aeabi_dcmplt>
 8006efa:	b110      	cbz	r0, 8006f02 <_printf_float+0x86>
 8006efc:	232d      	movs	r3, #45	; 0x2d
 8006efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f02:	4b92      	ldr	r3, [pc, #584]	; (800714c <_printf_float+0x2d0>)
 8006f04:	4892      	ldr	r0, [pc, #584]	; (8007150 <_printf_float+0x2d4>)
 8006f06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f0a:	bf94      	ite	ls
 8006f0c:	4698      	movls	r8, r3
 8006f0e:	4680      	movhi	r8, r0
 8006f10:	2303      	movs	r3, #3
 8006f12:	f04f 0a00 	mov.w	sl, #0
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	f02b 0304 	bic.w	r3, fp, #4
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	4633      	mov	r3, r6
 8006f20:	4621      	mov	r1, r4
 8006f22:	4628      	mov	r0, r5
 8006f24:	9700      	str	r7, [sp, #0]
 8006f26:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f28:	f000 f9d4 	bl	80072d4 <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f040 8090 	bne.w	8007052 <_printf_float+0x1d6>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f36:	b011      	add	sp, #68	; 0x44
 8006f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	4653      	mov	r3, sl
 8006f40:	4640      	mov	r0, r8
 8006f42:	4651      	mov	r1, sl
 8006f44:	f7f9 fd62 	bl	8000a0c <__aeabi_dcmpun>
 8006f48:	b148      	cbz	r0, 8006f5e <_printf_float+0xe2>
 8006f4a:	f1ba 0f00 	cmp.w	sl, #0
 8006f4e:	bfb8      	it	lt
 8006f50:	232d      	movlt	r3, #45	; 0x2d
 8006f52:	4880      	ldr	r0, [pc, #512]	; (8007154 <_printf_float+0x2d8>)
 8006f54:	bfb8      	it	lt
 8006f56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f5a:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <_printf_float+0x2dc>)
 8006f5c:	e7d3      	b.n	8006f06 <_printf_float+0x8a>
 8006f5e:	6863      	ldr	r3, [r4, #4]
 8006f60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	d142      	bne.n	8006fee <_printf_float+0x172>
 8006f68:	2306      	movs	r3, #6
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	9206      	str	r2, [sp, #24]
 8006f70:	aa0e      	add	r2, sp, #56	; 0x38
 8006f72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f76:	aa0d      	add	r2, sp, #52	; 0x34
 8006f78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f7c:	9203      	str	r2, [sp, #12]
 8006f7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	4653      	mov	r3, sl
 8006f92:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f94:	f7ff fed4 	bl	8006d40 <__cvt>
 8006f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	2947      	cmp	r1, #71	; 0x47
 8006f9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fa0:	d108      	bne.n	8006fb4 <_printf_float+0x138>
 8006fa2:	1cc8      	adds	r0, r1, #3
 8006fa4:	db02      	blt.n	8006fac <_printf_float+0x130>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	dd40      	ble.n	800702e <_printf_float+0x1b2>
 8006fac:	f1a9 0902 	sub.w	r9, r9, #2
 8006fb0:	fa5f f989 	uxtb.w	r9, r9
 8006fb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fb8:	d81f      	bhi.n	8006ffa <_printf_float+0x17e>
 8006fba:	464a      	mov	r2, r9
 8006fbc:	3901      	subs	r1, #1
 8006fbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8006fc4:	f7ff ff1b 	bl	8006dfe <__exponent>
 8006fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fca:	4682      	mov	sl, r0
 8006fcc:	1813      	adds	r3, r2, r0
 8006fce:	2a01      	cmp	r2, #1
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	dc02      	bgt.n	8006fda <_printf_float+0x15e>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	07d2      	lsls	r2, r2, #31
 8006fd8:	d501      	bpl.n	8006fde <_printf_float+0x162>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d09b      	beq.n	8006f1e <_printf_float+0xa2>
 8006fe6:	232d      	movs	r3, #45	; 0x2d
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fec:	e797      	b.n	8006f1e <_printf_float+0xa2>
 8006fee:	2947      	cmp	r1, #71	; 0x47
 8006ff0:	d1bc      	bne.n	8006f6c <_printf_float+0xf0>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1ba      	bne.n	8006f6c <_printf_float+0xf0>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7b7      	b.n	8006f6a <_printf_float+0xee>
 8006ffa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006ffe:	d118      	bne.n	8007032 <_printf_float+0x1b6>
 8007000:	2900      	cmp	r1, #0
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	dd0b      	ble.n	800701e <_printf_float+0x1a2>
 8007006:	6121      	str	r1, [r4, #16]
 8007008:	b913      	cbnz	r3, 8007010 <_printf_float+0x194>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	d502      	bpl.n	8007016 <_printf_float+0x19a>
 8007010:	3301      	adds	r3, #1
 8007012:	440b      	add	r3, r1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	f04f 0a00 	mov.w	sl, #0
 800701a:	65a1      	str	r1, [r4, #88]	; 0x58
 800701c:	e7df      	b.n	8006fde <_printf_float+0x162>
 800701e:	b913      	cbnz	r3, 8007026 <_printf_float+0x1aa>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	07d2      	lsls	r2, r2, #31
 8007024:	d501      	bpl.n	800702a <_printf_float+0x1ae>
 8007026:	3302      	adds	r3, #2
 8007028:	e7f4      	b.n	8007014 <_printf_float+0x198>
 800702a:	2301      	movs	r3, #1
 800702c:	e7f2      	b.n	8007014 <_printf_float+0x198>
 800702e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007034:	4299      	cmp	r1, r3
 8007036:	db05      	blt.n	8007044 <_printf_float+0x1c8>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	6121      	str	r1, [r4, #16]
 800703c:	07d8      	lsls	r0, r3, #31
 800703e:	d5ea      	bpl.n	8007016 <_printf_float+0x19a>
 8007040:	1c4b      	adds	r3, r1, #1
 8007042:	e7e7      	b.n	8007014 <_printf_float+0x198>
 8007044:	2900      	cmp	r1, #0
 8007046:	bfcc      	ite	gt
 8007048:	2201      	movgt	r2, #1
 800704a:	f1c1 0202 	rsble	r2, r1, #2
 800704e:	4413      	add	r3, r2
 8007050:	e7e0      	b.n	8007014 <_printf_float+0x198>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	055a      	lsls	r2, r3, #21
 8007056:	d407      	bmi.n	8007068 <_printf_float+0x1ec>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	4642      	mov	r2, r8
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	d12b      	bne.n	80070be <_printf_float+0x242>
 8007066:	e764      	b.n	8006f32 <_printf_float+0xb6>
 8007068:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800706c:	f240 80dd 	bls.w	800722a <_printf_float+0x3ae>
 8007070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	f7f9 fc96 	bl	80009a8 <__aeabi_dcmpeq>
 800707c:	2800      	cmp	r0, #0
 800707e:	d033      	beq.n	80070e8 <_printf_float+0x26c>
 8007080:	2301      	movs	r3, #1
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	4a35      	ldr	r2, [pc, #212]	; (800715c <_printf_float+0x2e0>)
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af51 	beq.w	8006f32 <_printf_float+0xb6>
 8007090:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007094:	429a      	cmp	r2, r3
 8007096:	db02      	blt.n	800709e <_printf_float+0x222>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	07d8      	lsls	r0, r3, #31
 800709c:	d50f      	bpl.n	80070be <_printf_float+0x242>
 800709e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f af42 	beq.w	8006f32 <_printf_float+0xb6>
 80070ae:	f04f 0800 	mov.w	r8, #0
 80070b2:	f104 091a 	add.w	r9, r4, #26
 80070b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b8:	3b01      	subs	r3, #1
 80070ba:	4543      	cmp	r3, r8
 80070bc:	dc09      	bgt.n	80070d2 <_printf_float+0x256>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	079b      	lsls	r3, r3, #30
 80070c2:	f100 8102 	bmi.w	80072ca <_printf_float+0x44e>
 80070c6:	68e0      	ldr	r0, [r4, #12]
 80070c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ca:	4298      	cmp	r0, r3
 80070cc:	bfb8      	it	lt
 80070ce:	4618      	movlt	r0, r3
 80070d0:	e731      	b.n	8006f36 <_printf_float+0xba>
 80070d2:	2301      	movs	r3, #1
 80070d4:	464a      	mov	r2, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f af28 	beq.w	8006f32 <_printf_float+0xb6>
 80070e2:	f108 0801 	add.w	r8, r8, #1
 80070e6:	e7e6      	b.n	80070b6 <_printf_float+0x23a>
 80070e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	dc38      	bgt.n	8007160 <_printf_float+0x2e4>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <_printf_float+0x2e0>)
 80070f6:	47b8      	blx	r7
 80070f8:	3001      	adds	r0, #1
 80070fa:	f43f af1a 	beq.w	8006f32 <_printf_float+0xb6>
 80070fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007102:	4313      	orrs	r3, r2
 8007104:	d102      	bne.n	800710c <_printf_float+0x290>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	07d9      	lsls	r1, r3, #31
 800710a:	d5d8      	bpl.n	80070be <_printf_float+0x242>
 800710c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af0b 	beq.w	8006f32 <_printf_float+0xb6>
 800711c:	f04f 0900 	mov.w	r9, #0
 8007120:	f104 0a1a 	add.w	sl, r4, #26
 8007124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007126:	425b      	negs	r3, r3
 8007128:	454b      	cmp	r3, r9
 800712a:	dc01      	bgt.n	8007130 <_printf_float+0x2b4>
 800712c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800712e:	e794      	b.n	800705a <_printf_float+0x1de>
 8007130:	2301      	movs	r3, #1
 8007132:	4652      	mov	r2, sl
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f aef9 	beq.w	8006f32 <_printf_float+0xb6>
 8007140:	f109 0901 	add.w	r9, r9, #1
 8007144:	e7ee      	b.n	8007124 <_printf_float+0x2a8>
 8007146:	bf00      	nop
 8007148:	7fefffff 	.word	0x7fefffff
 800714c:	080098bc 	.word	0x080098bc
 8007150:	080098c0 	.word	0x080098c0
 8007154:	080098c8 	.word	0x080098c8
 8007158:	080098c4 	.word	0x080098c4
 800715c:	080098cc 	.word	0x080098cc
 8007160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007164:	429a      	cmp	r2, r3
 8007166:	bfa8      	it	ge
 8007168:	461a      	movge	r2, r3
 800716a:	2a00      	cmp	r2, #0
 800716c:	4691      	mov	r9, r2
 800716e:	dc37      	bgt.n	80071e0 <_printf_float+0x364>
 8007170:	f04f 0b00 	mov.w	fp, #0
 8007174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007178:	f104 021a 	add.w	r2, r4, #26
 800717c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007180:	ebaa 0309 	sub.w	r3, sl, r9
 8007184:	455b      	cmp	r3, fp
 8007186:	dc33      	bgt.n	80071f0 <_printf_float+0x374>
 8007188:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800718c:	429a      	cmp	r2, r3
 800718e:	db3b      	blt.n	8007208 <_printf_float+0x38c>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07da      	lsls	r2, r3, #31
 8007194:	d438      	bmi.n	8007208 <_printf_float+0x38c>
 8007196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800719a:	eba3 020a 	sub.w	r2, r3, sl
 800719e:	eba3 0901 	sub.w	r9, r3, r1
 80071a2:	4591      	cmp	r9, r2
 80071a4:	bfa8      	it	ge
 80071a6:	4691      	movge	r9, r2
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	dc34      	bgt.n	8007218 <_printf_float+0x39c>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b6:	f104 0a1a 	add.w	sl, r4, #26
 80071ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	eba3 0309 	sub.w	r3, r3, r9
 80071c4:	4543      	cmp	r3, r8
 80071c6:	f77f af7a 	ble.w	80070be <_printf_float+0x242>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f aeac 	beq.w	8006f32 <_printf_float+0xb6>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	e7ec      	b.n	80071ba <_printf_float+0x33e>
 80071e0:	4613      	mov	r3, r2
 80071e2:	4631      	mov	r1, r6
 80071e4:	4642      	mov	r2, r8
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d1c0      	bne.n	8007170 <_printf_float+0x2f4>
 80071ee:	e6a0      	b.n	8006f32 <_printf_float+0xb6>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	f43f ae99 	beq.w	8006f32 <_printf_float+0xb6>
 8007200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e7b9      	b.n	800717c <_printf_float+0x300>
 8007208:	4631      	mov	r1, r6
 800720a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800720e:	4628      	mov	r0, r5
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	d1bf      	bne.n	8007196 <_printf_float+0x31a>
 8007216:	e68c      	b.n	8006f32 <_printf_float+0xb6>
 8007218:	464b      	mov	r3, r9
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	eb08 020a 	add.w	r2, r8, sl
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	d1c2      	bne.n	80071ae <_printf_float+0x332>
 8007228:	e683      	b.n	8006f32 <_printf_float+0xb6>
 800722a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800722c:	2a01      	cmp	r2, #1
 800722e:	dc01      	bgt.n	8007234 <_printf_float+0x3b8>
 8007230:	07db      	lsls	r3, r3, #31
 8007232:	d537      	bpl.n	80072a4 <_printf_float+0x428>
 8007234:	2301      	movs	r3, #1
 8007236:	4642      	mov	r2, r8
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f ae77 	beq.w	8006f32 <_printf_float+0xb6>
 8007244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f ae6f 	beq.w	8006f32 <_printf_float+0xb6>
 8007254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007258:	2200      	movs	r2, #0
 800725a:	2300      	movs	r3, #0
 800725c:	f7f9 fba4 	bl	80009a8 <__aeabi_dcmpeq>
 8007260:	b9d8      	cbnz	r0, 800729a <_printf_float+0x41e>
 8007262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007264:	f108 0201 	add.w	r2, r8, #1
 8007268:	3b01      	subs	r3, #1
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	d10e      	bne.n	8007292 <_printf_float+0x416>
 8007274:	e65d      	b.n	8006f32 <_printf_float+0xb6>
 8007276:	2301      	movs	r3, #1
 8007278:	464a      	mov	r2, r9
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f ae56 	beq.w	8006f32 <_printf_float+0xb6>
 8007286:	f108 0801 	add.w	r8, r8, #1
 800728a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800728c:	3b01      	subs	r3, #1
 800728e:	4543      	cmp	r3, r8
 8007290:	dcf1      	bgt.n	8007276 <_printf_float+0x3fa>
 8007292:	4653      	mov	r3, sl
 8007294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007298:	e6e0      	b.n	800705c <_printf_float+0x1e0>
 800729a:	f04f 0800 	mov.w	r8, #0
 800729e:	f104 091a 	add.w	r9, r4, #26
 80072a2:	e7f2      	b.n	800728a <_printf_float+0x40e>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4642      	mov	r2, r8
 80072a8:	e7df      	b.n	800726a <_printf_float+0x3ee>
 80072aa:	2301      	movs	r3, #1
 80072ac:	464a      	mov	r2, r9
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae3c 	beq.w	8006f32 <_printf_float+0xb6>
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	68e3      	ldr	r3, [r4, #12]
 80072c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	4543      	cmp	r3, r8
 80072c6:	dcf0      	bgt.n	80072aa <_printf_float+0x42e>
 80072c8:	e6fd      	b.n	80070c6 <_printf_float+0x24a>
 80072ca:	f04f 0800 	mov.w	r8, #0
 80072ce:	f104 0919 	add.w	r9, r4, #25
 80072d2:	e7f4      	b.n	80072be <_printf_float+0x442>

080072d4 <_printf_common>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	4616      	mov	r6, r2
 80072da:	4699      	mov	r9, r3
 80072dc:	688a      	ldr	r2, [r1, #8]
 80072de:	690b      	ldr	r3, [r1, #16]
 80072e0:	4607      	mov	r7, r0
 80072e2:	4293      	cmp	r3, r2
 80072e4:	bfb8      	it	lt
 80072e6:	4613      	movlt	r3, r2
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ee:	460c      	mov	r4, r1
 80072f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f4:	b10a      	cbz	r2, 80072fa <_printf_common+0x26>
 80072f6:	3301      	adds	r3, #1
 80072f8:	6033      	str	r3, [r6, #0]
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	0699      	lsls	r1, r3, #26
 80072fe:	bf42      	ittt	mi
 8007300:	6833      	ldrmi	r3, [r6, #0]
 8007302:	3302      	addmi	r3, #2
 8007304:	6033      	strmi	r3, [r6, #0]
 8007306:	6825      	ldr	r5, [r4, #0]
 8007308:	f015 0506 	ands.w	r5, r5, #6
 800730c:	d106      	bne.n	800731c <_printf_common+0x48>
 800730e:	f104 0a19 	add.w	sl, r4, #25
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	6832      	ldr	r2, [r6, #0]
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	42ab      	cmp	r3, r5
 800731a:	dc28      	bgt.n	800736e <_printf_common+0x9a>
 800731c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007320:	1e13      	subs	r3, r2, #0
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	bf18      	it	ne
 8007326:	2301      	movne	r3, #1
 8007328:	0692      	lsls	r2, r2, #26
 800732a:	d42d      	bmi.n	8007388 <_printf_common+0xb4>
 800732c:	4649      	mov	r1, r9
 800732e:	4638      	mov	r0, r7
 8007330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d020      	beq.n	800737c <_printf_common+0xa8>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	68e5      	ldr	r5, [r4, #12]
 800733e:	f003 0306 	and.w	r3, r3, #6
 8007342:	2b04      	cmp	r3, #4
 8007344:	bf18      	it	ne
 8007346:	2500      	movne	r5, #0
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	f04f 0600 	mov.w	r6, #0
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	bf08      	it	eq
 8007352:	1aad      	subeq	r5, r5, r2
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	bf08      	it	eq
 8007358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800735c:	4293      	cmp	r3, r2
 800735e:	bfc4      	itt	gt
 8007360:	1a9b      	subgt	r3, r3, r2
 8007362:	18ed      	addgt	r5, r5, r3
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xcc>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xac>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4649      	mov	r1, r9
 8007374:	4638      	mov	r0, r7
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xb0>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c4      	b.n	8007312 <_printf_common+0x3e>
 8007388:	2030      	movs	r0, #48	; 0x30
 800738a:	18e1      	adds	r1, r4, r3
 800738c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007396:	4422      	add	r2, r4
 8007398:	3302      	adds	r3, #2
 800739a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739e:	e7c5      	b.n	800732c <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa8>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x92>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	4691      	mov	r9, r2
 80073bc:	2f78      	cmp	r7, #120	; 0x78
 80073be:	4680      	mov	r8, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	469a      	mov	sl, r3
 80073c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	; 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d9 	beq.w	8007588 <_printf_i+0x1d4>
 80073d6:	2f58      	cmp	r7, #88	; 0x58
 80073d8:	f000 80a4 	beq.w	8007524 <_printf_i+0x170>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	; (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	0800756f 	.word	0x0800756f
 8007424:	08007491 	.word	0x08007491
 8007428:	08007551 	.word	0x08007551
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	08007591 	.word	0x08007591
 8007438:	080073dd 	.word	0x080073dd
 800743c:	08007491 	.word	0x08007491
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007559 	.word	0x08007559
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e0a4      	b.n	80075aa <_printf_i+0x1f6>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	0606      	lsls	r6, r0, #24
 8007466:	f101 0304 	add.w	r3, r1, #4
 800746a:	d50a      	bpl.n	8007482 <_printf_i+0xce>
 800746c:	680e      	ldr	r6, [r1, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	2e00      	cmp	r6, #0
 8007472:	da03      	bge.n	800747c <_printf_i+0xc8>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	4276      	negs	r6, r6
 8007478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747c:	230a      	movs	r3, #10
 800747e:	485e      	ldr	r0, [pc, #376]	; (80075f8 <_printf_i+0x244>)
 8007480:	e019      	b.n	80074b6 <_printf_i+0x102>
 8007482:	680e      	ldr	r6, [r1, #0]
 8007484:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	bf18      	it	ne
 800748c:	b236      	sxthne	r6, r6
 800748e:	e7ef      	b.n	8007470 <_printf_i+0xbc>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6029      	str	r1, [r5, #0]
 8007498:	0601      	lsls	r1, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xec>
 800749c:	681e      	ldr	r6, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0xf2>
 80074a0:	0646      	lsls	r6, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xe8>
 80074a4:	881e      	ldrh	r6, [r3, #0]
 80074a6:	2f6f      	cmp	r7, #111	; 0x6f
 80074a8:	bf0c      	ite	eq
 80074aa:	2308      	moveq	r3, #8
 80074ac:	230a      	movne	r3, #10
 80074ae:	4852      	ldr	r0, [pc, #328]	; (80075f8 <_printf_i+0x244>)
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b6:	6865      	ldr	r5, [r4, #4]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	bfa8      	it	ge
 80074bc:	6821      	ldrge	r1, [r4, #0]
 80074be:	60a5      	str	r5, [r4, #8]
 80074c0:	bfa4      	itt	ge
 80074c2:	f021 0104 	bicge.w	r1, r1, #4
 80074c6:	6021      	strge	r1, [r4, #0]
 80074c8:	b90e      	cbnz	r6, 80074ce <_printf_i+0x11a>
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	d04d      	beq.n	800756a <_printf_i+0x1b6>
 80074ce:	4615      	mov	r5, r2
 80074d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d4:	fb03 6711 	mls	r7, r3, r1, r6
 80074d8:	5dc7      	ldrb	r7, [r0, r7]
 80074da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074de:	4637      	mov	r7, r6
 80074e0:	42bb      	cmp	r3, r7
 80074e2:	460e      	mov	r6, r1
 80074e4:	d9f4      	bls.n	80074d0 <_printf_i+0x11c>
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d10b      	bne.n	8007502 <_printf_i+0x14e>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	07de      	lsls	r6, r3, #31
 80074ee:	d508      	bpl.n	8007502 <_printf_i+0x14e>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	6861      	ldr	r1, [r4, #4]
 80074f4:	4299      	cmp	r1, r3
 80074f6:	bfde      	ittt	le
 80074f8:	2330      	movle	r3, #48	; 0x30
 80074fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007502:	1b52      	subs	r2, r2, r5
 8007504:	6122      	str	r2, [r4, #16]
 8007506:	464b      	mov	r3, r9
 8007508:	4621      	mov	r1, r4
 800750a:	4640      	mov	r0, r8
 800750c:	f8cd a000 	str.w	sl, [sp]
 8007510:	aa03      	add	r2, sp, #12
 8007512:	f7ff fedf 	bl	80072d4 <_printf_common>
 8007516:	3001      	adds	r0, #1
 8007518:	d14c      	bne.n	80075b4 <_printf_i+0x200>
 800751a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751e:	b004      	add	sp, #16
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	4834      	ldr	r0, [pc, #208]	; (80075f8 <_printf_i+0x244>)
 8007526:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800752a:	6829      	ldr	r1, [r5, #0]
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007532:	6029      	str	r1, [r5, #0]
 8007534:	061d      	lsls	r5, r3, #24
 8007536:	d514      	bpl.n	8007562 <_printf_i+0x1ae>
 8007538:	07df      	lsls	r7, r3, #31
 800753a:	bf44      	itt	mi
 800753c:	f043 0320 	orrmi.w	r3, r3, #32
 8007540:	6023      	strmi	r3, [r4, #0]
 8007542:	b91e      	cbnz	r6, 800754c <_printf_i+0x198>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	f023 0320 	bic.w	r3, r3, #32
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	2310      	movs	r3, #16
 800754e:	e7af      	b.n	80074b0 <_printf_i+0xfc>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	f043 0320 	orr.w	r3, r3, #32
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	2378      	movs	r3, #120	; 0x78
 800755a:	4828      	ldr	r0, [pc, #160]	; (80075fc <_printf_i+0x248>)
 800755c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007560:	e7e3      	b.n	800752a <_printf_i+0x176>
 8007562:	0659      	lsls	r1, r3, #25
 8007564:	bf48      	it	mi
 8007566:	b2b6      	uxthmi	r6, r6
 8007568:	e7e6      	b.n	8007538 <_printf_i+0x184>
 800756a:	4615      	mov	r5, r2
 800756c:	e7bb      	b.n	80074e6 <_printf_i+0x132>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	6826      	ldr	r6, [r4, #0]
 8007572:	1d18      	adds	r0, r3, #4
 8007574:	6961      	ldr	r1, [r4, #20]
 8007576:	6028      	str	r0, [r5, #0]
 8007578:	0635      	lsls	r5, r6, #24
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	d501      	bpl.n	8007582 <_printf_i+0x1ce>
 800757e:	6019      	str	r1, [r3, #0]
 8007580:	e002      	b.n	8007588 <_printf_i+0x1d4>
 8007582:	0670      	lsls	r0, r6, #25
 8007584:	d5fb      	bpl.n	800757e <_printf_i+0x1ca>
 8007586:	8019      	strh	r1, [r3, #0]
 8007588:	2300      	movs	r3, #0
 800758a:	4615      	mov	r5, r2
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	e7ba      	b.n	8007506 <_printf_i+0x152>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	2100      	movs	r1, #0
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	602a      	str	r2, [r5, #0]
 8007598:	681d      	ldr	r5, [r3, #0]
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	4628      	mov	r0, r5
 800759e:	f000 ff51 	bl	8008444 <memchr>
 80075a2:	b108      	cbz	r0, 80075a8 <_printf_i+0x1f4>
 80075a4:	1b40      	subs	r0, r0, r5
 80075a6:	6060      	str	r0, [r4, #4]
 80075a8:	6863      	ldr	r3, [r4, #4]
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	2300      	movs	r3, #0
 80075ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b2:	e7a8      	b.n	8007506 <_printf_i+0x152>
 80075b4:	462a      	mov	r2, r5
 80075b6:	4649      	mov	r1, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	47d0      	blx	sl
 80075be:	3001      	adds	r0, #1
 80075c0:	d0ab      	beq.n	800751a <_printf_i+0x166>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	079b      	lsls	r3, r3, #30
 80075c6:	d413      	bmi.n	80075f0 <_printf_i+0x23c>
 80075c8:	68e0      	ldr	r0, [r4, #12]
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	4298      	cmp	r0, r3
 80075ce:	bfb8      	it	lt
 80075d0:	4618      	movlt	r0, r3
 80075d2:	e7a4      	b.n	800751e <_printf_i+0x16a>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4632      	mov	r2, r6
 80075d8:	4649      	mov	r1, r9
 80075da:	4640      	mov	r0, r8
 80075dc:	47d0      	blx	sl
 80075de:	3001      	adds	r0, #1
 80075e0:	d09b      	beq.n	800751a <_printf_i+0x166>
 80075e2:	3501      	adds	r5, #1
 80075e4:	68e3      	ldr	r3, [r4, #12]
 80075e6:	9903      	ldr	r1, [sp, #12]
 80075e8:	1a5b      	subs	r3, r3, r1
 80075ea:	42ab      	cmp	r3, r5
 80075ec:	dcf2      	bgt.n	80075d4 <_printf_i+0x220>
 80075ee:	e7eb      	b.n	80075c8 <_printf_i+0x214>
 80075f0:	2500      	movs	r5, #0
 80075f2:	f104 0619 	add.w	r6, r4, #25
 80075f6:	e7f5      	b.n	80075e4 <_printf_i+0x230>
 80075f8:	080098ce 	.word	0x080098ce
 80075fc:	080098df 	.word	0x080098df

08007600 <strncmp>:
 8007600:	4603      	mov	r3, r0
 8007602:	b510      	push	{r4, lr}
 8007604:	b172      	cbz	r2, 8007624 <strncmp+0x24>
 8007606:	3901      	subs	r1, #1
 8007608:	1884      	adds	r4, r0, r2
 800760a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800760e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007612:	4290      	cmp	r0, r2
 8007614:	d101      	bne.n	800761a <strncmp+0x1a>
 8007616:	42a3      	cmp	r3, r4
 8007618:	d101      	bne.n	800761e <strncmp+0x1e>
 800761a:	1a80      	subs	r0, r0, r2
 800761c:	bd10      	pop	{r4, pc}
 800761e:	2800      	cmp	r0, #0
 8007620:	d1f3      	bne.n	800760a <strncmp+0xa>
 8007622:	e7fa      	b.n	800761a <strncmp+0x1a>
 8007624:	4610      	mov	r0, r2
 8007626:	e7f9      	b.n	800761c <strncmp+0x1c>

08007628 <_strtol_l.constprop.0>:
 8007628:	2b01      	cmp	r3, #1
 800762a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762e:	4680      	mov	r8, r0
 8007630:	d001      	beq.n	8007636 <_strtol_l.constprop.0+0xe>
 8007632:	2b24      	cmp	r3, #36	; 0x24
 8007634:	d906      	bls.n	8007644 <_strtol_l.constprop.0+0x1c>
 8007636:	f7ff fb43 	bl	8006cc0 <__errno>
 800763a:	2316      	movs	r3, #22
 800763c:	6003      	str	r3, [r0, #0]
 800763e:	2000      	movs	r0, #0
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	460d      	mov	r5, r1
 8007646:	4f35      	ldr	r7, [pc, #212]	; (800771c <_strtol_l.constprop.0+0xf4>)
 8007648:	4628      	mov	r0, r5
 800764a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800764e:	5de6      	ldrb	r6, [r4, r7]
 8007650:	f016 0608 	ands.w	r6, r6, #8
 8007654:	d1f8      	bne.n	8007648 <_strtol_l.constprop.0+0x20>
 8007656:	2c2d      	cmp	r4, #45	; 0x2d
 8007658:	d12f      	bne.n	80076ba <_strtol_l.constprop.0+0x92>
 800765a:	2601      	movs	r6, #1
 800765c:	782c      	ldrb	r4, [r5, #0]
 800765e:	1c85      	adds	r5, r0, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d057      	beq.n	8007714 <_strtol_l.constprop.0+0xec>
 8007664:	2b10      	cmp	r3, #16
 8007666:	d109      	bne.n	800767c <_strtol_l.constprop.0+0x54>
 8007668:	2c30      	cmp	r4, #48	; 0x30
 800766a:	d107      	bne.n	800767c <_strtol_l.constprop.0+0x54>
 800766c:	7828      	ldrb	r0, [r5, #0]
 800766e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007672:	2858      	cmp	r0, #88	; 0x58
 8007674:	d149      	bne.n	800770a <_strtol_l.constprop.0+0xe2>
 8007676:	2310      	movs	r3, #16
 8007678:	786c      	ldrb	r4, [r5, #1]
 800767a:	3502      	adds	r5, #2
 800767c:	2700      	movs	r7, #0
 800767e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007682:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8007686:	fbbe f9f3 	udiv	r9, lr, r3
 800768a:	4638      	mov	r0, r7
 800768c:	fb03 ea19 	mls	sl, r3, r9, lr
 8007690:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007694:	f1bc 0f09 	cmp.w	ip, #9
 8007698:	d814      	bhi.n	80076c4 <_strtol_l.constprop.0+0x9c>
 800769a:	4664      	mov	r4, ip
 800769c:	42a3      	cmp	r3, r4
 800769e:	dd22      	ble.n	80076e6 <_strtol_l.constprop.0+0xbe>
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	db1d      	blt.n	80076e0 <_strtol_l.constprop.0+0xb8>
 80076a4:	4581      	cmp	r9, r0
 80076a6:	d31b      	bcc.n	80076e0 <_strtol_l.constprop.0+0xb8>
 80076a8:	d101      	bne.n	80076ae <_strtol_l.constprop.0+0x86>
 80076aa:	45a2      	cmp	sl, r4
 80076ac:	db18      	blt.n	80076e0 <_strtol_l.constprop.0+0xb8>
 80076ae:	2701      	movs	r7, #1
 80076b0:	fb00 4003 	mla	r0, r0, r3, r4
 80076b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076b8:	e7ea      	b.n	8007690 <_strtol_l.constprop.0+0x68>
 80076ba:	2c2b      	cmp	r4, #43	; 0x2b
 80076bc:	bf04      	itt	eq
 80076be:	782c      	ldrbeq	r4, [r5, #0]
 80076c0:	1c85      	addeq	r5, r0, #2
 80076c2:	e7cd      	b.n	8007660 <_strtol_l.constprop.0+0x38>
 80076c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80076c8:	f1bc 0f19 	cmp.w	ip, #25
 80076cc:	d801      	bhi.n	80076d2 <_strtol_l.constprop.0+0xaa>
 80076ce:	3c37      	subs	r4, #55	; 0x37
 80076d0:	e7e4      	b.n	800769c <_strtol_l.constprop.0+0x74>
 80076d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80076d6:	f1bc 0f19 	cmp.w	ip, #25
 80076da:	d804      	bhi.n	80076e6 <_strtol_l.constprop.0+0xbe>
 80076dc:	3c57      	subs	r4, #87	; 0x57
 80076de:	e7dd      	b.n	800769c <_strtol_l.constprop.0+0x74>
 80076e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80076e4:	e7e6      	b.n	80076b4 <_strtol_l.constprop.0+0x8c>
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	da07      	bge.n	80076fa <_strtol_l.constprop.0+0xd2>
 80076ea:	2322      	movs	r3, #34	; 0x22
 80076ec:	4670      	mov	r0, lr
 80076ee:	f8c8 3000 	str.w	r3, [r8]
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d0a4      	beq.n	8007640 <_strtol_l.constprop.0+0x18>
 80076f6:	1e69      	subs	r1, r5, #1
 80076f8:	e005      	b.n	8007706 <_strtol_l.constprop.0+0xde>
 80076fa:	b106      	cbz	r6, 80076fe <_strtol_l.constprop.0+0xd6>
 80076fc:	4240      	negs	r0, r0
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d09e      	beq.n	8007640 <_strtol_l.constprop.0+0x18>
 8007702:	2f00      	cmp	r7, #0
 8007704:	d1f7      	bne.n	80076f6 <_strtol_l.constprop.0+0xce>
 8007706:	6011      	str	r1, [r2, #0]
 8007708:	e79a      	b.n	8007640 <_strtol_l.constprop.0+0x18>
 800770a:	2430      	movs	r4, #48	; 0x30
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1b5      	bne.n	800767c <_strtol_l.constprop.0+0x54>
 8007710:	2308      	movs	r3, #8
 8007712:	e7b3      	b.n	800767c <_strtol_l.constprop.0+0x54>
 8007714:	2c30      	cmp	r4, #48	; 0x30
 8007716:	d0a9      	beq.n	800766c <_strtol_l.constprop.0+0x44>
 8007718:	230a      	movs	r3, #10
 800771a:	e7af      	b.n	800767c <_strtol_l.constprop.0+0x54>
 800771c:	080098f1 	.word	0x080098f1

08007720 <strtol>:
 8007720:	4613      	mov	r3, r2
 8007722:	460a      	mov	r2, r1
 8007724:	4601      	mov	r1, r0
 8007726:	4802      	ldr	r0, [pc, #8]	; (8007730 <strtol+0x10>)
 8007728:	6800      	ldr	r0, [r0, #0]
 800772a:	f7ff bf7d 	b.w	8007628 <_strtol_l.constprop.0>
 800772e:	bf00      	nop
 8007730:	200000d0 	.word	0x200000d0

08007734 <quorem>:
 8007734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	6903      	ldr	r3, [r0, #16]
 800773a:	690c      	ldr	r4, [r1, #16]
 800773c:	4607      	mov	r7, r0
 800773e:	42a3      	cmp	r3, r4
 8007740:	f2c0 8082 	blt.w	8007848 <quorem+0x114>
 8007744:	3c01      	subs	r4, #1
 8007746:	f100 0514 	add.w	r5, r0, #20
 800774a:	f101 0814 	add.w	r8, r1, #20
 800774e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800775c:	3301      	adds	r3, #1
 800775e:	429a      	cmp	r2, r3
 8007760:	fbb2 f6f3 	udiv	r6, r2, r3
 8007764:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800776c:	d331      	bcc.n	80077d2 <quorem+0x9e>
 800776e:	f04f 0e00 	mov.w	lr, #0
 8007772:	4640      	mov	r0, r8
 8007774:	46ac      	mov	ip, r5
 8007776:	46f2      	mov	sl, lr
 8007778:	f850 2b04 	ldr.w	r2, [r0], #4
 800777c:	b293      	uxth	r3, r2
 800777e:	fb06 e303 	mla	r3, r6, r3, lr
 8007782:	0c12      	lsrs	r2, r2, #16
 8007784:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007788:	b29b      	uxth	r3, r3
 800778a:	fb06 e202 	mla	r2, r6, r2, lr
 800778e:	ebaa 0303 	sub.w	r3, sl, r3
 8007792:	f8dc a000 	ldr.w	sl, [ip]
 8007796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800779a:	fa1f fa8a 	uxth.w	sl, sl
 800779e:	4453      	add	r3, sl
 80077a0:	f8dc a000 	ldr.w	sl, [ip]
 80077a4:	b292      	uxth	r2, r2
 80077a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b4:	4581      	cmp	r9, r0
 80077b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077ba:	f84c 3b04 	str.w	r3, [ip], #4
 80077be:	d2db      	bcs.n	8007778 <quorem+0x44>
 80077c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80077c4:	b92b      	cbnz	r3, 80077d2 <quorem+0x9e>
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	429d      	cmp	r5, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	d32f      	bcc.n	8007830 <quorem+0xfc>
 80077d0:	613c      	str	r4, [r7, #16]
 80077d2:	4638      	mov	r0, r7
 80077d4:	f001 f8c2 	bl	800895c <__mcmp>
 80077d8:	2800      	cmp	r0, #0
 80077da:	db25      	blt.n	8007828 <quorem+0xf4>
 80077dc:	4628      	mov	r0, r5
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	3601      	adds	r6, #1
 80077e4:	f858 1b04 	ldr.w	r1, [r8], #4
 80077e8:	f8d0 e000 	ldr.w	lr, [r0]
 80077ec:	b28b      	uxth	r3, r1
 80077ee:	ebac 0303 	sub.w	r3, ip, r3
 80077f2:	fa1f f28e 	uxth.w	r2, lr
 80077f6:	4413      	add	r3, r2
 80077f8:	0c0a      	lsrs	r2, r1, #16
 80077fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007802:	b29b      	uxth	r3, r3
 8007804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007808:	45c1      	cmp	r9, r8
 800780a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800780e:	f840 3b04 	str.w	r3, [r0], #4
 8007812:	d2e7      	bcs.n	80077e4 <quorem+0xb0>
 8007814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781c:	b922      	cbnz	r2, 8007828 <quorem+0xf4>
 800781e:	3b04      	subs	r3, #4
 8007820:	429d      	cmp	r5, r3
 8007822:	461a      	mov	r2, r3
 8007824:	d30a      	bcc.n	800783c <quorem+0x108>
 8007826:	613c      	str	r4, [r7, #16]
 8007828:	4630      	mov	r0, r6
 800782a:	b003      	add	sp, #12
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	3b04      	subs	r3, #4
 8007834:	2a00      	cmp	r2, #0
 8007836:	d1cb      	bne.n	80077d0 <quorem+0x9c>
 8007838:	3c01      	subs	r4, #1
 800783a:	e7c6      	b.n	80077ca <quorem+0x96>
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	3b04      	subs	r3, #4
 8007840:	2a00      	cmp	r2, #0
 8007842:	d1f0      	bne.n	8007826 <quorem+0xf2>
 8007844:	3c01      	subs	r4, #1
 8007846:	e7eb      	b.n	8007820 <quorem+0xec>
 8007848:	2000      	movs	r0, #0
 800784a:	e7ee      	b.n	800782a <quorem+0xf6>
 800784c:	0000      	movs	r0, r0
	...

08007850 <_dtoa_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	4616      	mov	r6, r2
 8007856:	461f      	mov	r7, r3
 8007858:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800785a:	b099      	sub	sp, #100	; 0x64
 800785c:	4605      	mov	r5, r0
 800785e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007862:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007866:	b974      	cbnz	r4, 8007886 <_dtoa_r+0x36>
 8007868:	2010      	movs	r0, #16
 800786a:	f000 fde3 	bl	8008434 <malloc>
 800786e:	4602      	mov	r2, r0
 8007870:	6268      	str	r0, [r5, #36]	; 0x24
 8007872:	b920      	cbnz	r0, 800787e <_dtoa_r+0x2e>
 8007874:	21ea      	movs	r1, #234	; 0xea
 8007876:	4ba8      	ldr	r3, [pc, #672]	; (8007b18 <_dtoa_r+0x2c8>)
 8007878:	48a8      	ldr	r0, [pc, #672]	; (8007b1c <_dtoa_r+0x2cc>)
 800787a:	f001 fa73 	bl	8008d64 <__assert_func>
 800787e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007882:	6004      	str	r4, [r0, #0]
 8007884:	60c4      	str	r4, [r0, #12]
 8007886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	b151      	cbz	r1, 80078a2 <_dtoa_r+0x52>
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	2301      	movs	r3, #1
 8007890:	4093      	lsls	r3, r2
 8007892:	604a      	str	r2, [r1, #4]
 8007894:	608b      	str	r3, [r1, #8]
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fe22 	bl	80084e0 <_Bfree>
 800789c:	2200      	movs	r2, #0
 800789e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	1e3b      	subs	r3, r7, #0
 80078a4:	bfaf      	iteee	ge
 80078a6:	2300      	movge	r3, #0
 80078a8:	2201      	movlt	r2, #1
 80078aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ae:	9305      	strlt	r3, [sp, #20]
 80078b0:	bfa8      	it	ge
 80078b2:	f8c8 3000 	strge.w	r3, [r8]
 80078b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80078ba:	4b99      	ldr	r3, [pc, #612]	; (8007b20 <_dtoa_r+0x2d0>)
 80078bc:	bfb8      	it	lt
 80078be:	f8c8 2000 	strlt.w	r2, [r8]
 80078c2:	ea33 0309 	bics.w	r3, r3, r9
 80078c6:	d119      	bne.n	80078fc <_dtoa_r+0xac>
 80078c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80078cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078d4:	4333      	orrs	r3, r6
 80078d6:	f000 857f 	beq.w	80083d8 <_dtoa_r+0xb88>
 80078da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078dc:	b953      	cbnz	r3, 80078f4 <_dtoa_r+0xa4>
 80078de:	4b91      	ldr	r3, [pc, #580]	; (8007b24 <_dtoa_r+0x2d4>)
 80078e0:	e022      	b.n	8007928 <_dtoa_r+0xd8>
 80078e2:	4b91      	ldr	r3, [pc, #580]	; (8007b28 <_dtoa_r+0x2d8>)
 80078e4:	9303      	str	r3, [sp, #12]
 80078e6:	3308      	adds	r3, #8
 80078e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	9803      	ldr	r0, [sp, #12]
 80078ee:	b019      	add	sp, #100	; 0x64
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	4b8b      	ldr	r3, [pc, #556]	; (8007b24 <_dtoa_r+0x2d4>)
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	3303      	adds	r3, #3
 80078fa:	e7f5      	b.n	80078e8 <_dtoa_r+0x98>
 80078fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007900:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	2300      	movs	r3, #0
 800790c:	f7f9 f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8007910:	4680      	mov	r8, r0
 8007912:	b158      	cbz	r0, 800792c <_dtoa_r+0xdc>
 8007914:	2301      	movs	r3, #1
 8007916:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8558 	beq.w	80083d2 <_dtoa_r+0xb82>
 8007922:	4882      	ldr	r0, [pc, #520]	; (8007b2c <_dtoa_r+0x2dc>)
 8007924:	6018      	str	r0, [r3, #0]
 8007926:	1e43      	subs	r3, r0, #1
 8007928:	9303      	str	r3, [sp, #12]
 800792a:	e7df      	b.n	80078ec <_dtoa_r+0x9c>
 800792c:	ab16      	add	r3, sp, #88	; 0x58
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	ab17      	add	r3, sp, #92	; 0x5c
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4628      	mov	r0, r5
 8007936:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800793a:	f001 f8b7 	bl	8008aac <__d2b>
 800793e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007942:	4683      	mov	fp, r0
 8007944:	2c00      	cmp	r4, #0
 8007946:	d07f      	beq.n	8007a48 <_dtoa_r+0x1f8>
 8007948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800794c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800794e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007956:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800795a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800795e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007962:	2200      	movs	r2, #0
 8007964:	4b72      	ldr	r3, [pc, #456]	; (8007b30 <_dtoa_r+0x2e0>)
 8007966:	f7f8 fbff 	bl	8000168 <__aeabi_dsub>
 800796a:	a365      	add	r3, pc, #404	; (adr r3, 8007b00 <_dtoa_r+0x2b0>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fdb2 	bl	80004d8 <__aeabi_dmul>
 8007974:	a364      	add	r3, pc, #400	; (adr r3, 8007b08 <_dtoa_r+0x2b8>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fbf7 	bl	800016c <__adddf3>
 800797e:	4606      	mov	r6, r0
 8007980:	4620      	mov	r0, r4
 8007982:	460f      	mov	r7, r1
 8007984:	f7f8 fd3e 	bl	8000404 <__aeabi_i2d>
 8007988:	a361      	add	r3, pc, #388	; (adr r3, 8007b10 <_dtoa_r+0x2c0>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 fda3 	bl	80004d8 <__aeabi_dmul>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fbe7 	bl	800016c <__adddf3>
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	f7f9 f849 	bl	8000a38 <__aeabi_d2iz>
 80079a6:	2200      	movs	r2, #0
 80079a8:	4682      	mov	sl, r0
 80079aa:	2300      	movs	r3, #0
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f9 f804 	bl	80009bc <__aeabi_dcmplt>
 80079b4:	b148      	cbz	r0, 80079ca <_dtoa_r+0x17a>
 80079b6:	4650      	mov	r0, sl
 80079b8:	f7f8 fd24 	bl	8000404 <__aeabi_i2d>
 80079bc:	4632      	mov	r2, r6
 80079be:	463b      	mov	r3, r7
 80079c0:	f7f8 fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80079c4:	b908      	cbnz	r0, 80079ca <_dtoa_r+0x17a>
 80079c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80079ca:	f1ba 0f16 	cmp.w	sl, #22
 80079ce:	d858      	bhi.n	8007a82 <_dtoa_r+0x232>
 80079d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079d4:	4b57      	ldr	r3, [pc, #348]	; (8007b34 <_dtoa_r+0x2e4>)
 80079d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 ffed 	bl	80009bc <__aeabi_dcmplt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d04f      	beq.n	8007a86 <_dtoa_r+0x236>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80079ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079f0:	1b1c      	subs	r4, r3, r4
 80079f2:	1e63      	subs	r3, r4, #1
 80079f4:	9309      	str	r3, [sp, #36]	; 0x24
 80079f6:	bf49      	itett	mi
 80079f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80079fc:	2300      	movpl	r3, #0
 80079fe:	9306      	strmi	r3, [sp, #24]
 8007a00:	2300      	movmi	r3, #0
 8007a02:	bf54      	ite	pl
 8007a04:	9306      	strpl	r3, [sp, #24]
 8007a06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a08:	f1ba 0f00 	cmp.w	sl, #0
 8007a0c:	db3d      	blt.n	8007a8a <_dtoa_r+0x23a>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007a14:	4453      	add	r3, sl
 8007a16:	9309      	str	r3, [sp, #36]	; 0x24
 8007a18:	2300      	movs	r3, #0
 8007a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	f200 808c 	bhi.w	8007b3c <_dtoa_r+0x2ec>
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	bfc4      	itt	gt
 8007a28:	3b04      	subgt	r3, #4
 8007a2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2e:	bfc8      	it	gt
 8007a30:	2400      	movgt	r4, #0
 8007a32:	f1a3 0302 	sub.w	r3, r3, #2
 8007a36:	bfd8      	it	le
 8007a38:	2401      	movle	r4, #1
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	f200 808a 	bhi.w	8007b54 <_dtoa_r+0x304>
 8007a40:	e8df f003 	tbb	[pc, r3]
 8007a44:	5b4d4f2d 	.word	0x5b4d4f2d
 8007a48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a4c:	441c      	add	r4, r3
 8007a4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	bfc3      	ittte	gt
 8007a56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007a5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a62:	f1c3 0320 	rsble	r3, r3, #32
 8007a66:	bfc6      	itte	gt
 8007a68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a6c:	4318      	orrgt	r0, r3
 8007a6e:	fa06 f003 	lslle.w	r0, r6, r3
 8007a72:	f7f8 fcb7 	bl	80003e4 <__aeabi_ui2d>
 8007a76:	2301      	movs	r3, #1
 8007a78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a7c:	3c01      	subs	r4, #1
 8007a7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a80:	e76f      	b.n	8007962 <_dtoa_r+0x112>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e7b2      	b.n	80079ec <_dtoa_r+0x19c>
 8007a86:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a88:	e7b1      	b.n	80079ee <_dtoa_r+0x19e>
 8007a8a:	9b06      	ldr	r3, [sp, #24]
 8007a8c:	eba3 030a 	sub.w	r3, r3, sl
 8007a90:	9306      	str	r3, [sp, #24]
 8007a92:	f1ca 0300 	rsb	r3, sl, #0
 8007a96:	930a      	str	r3, [sp, #40]	; 0x28
 8007a98:	2300      	movs	r3, #0
 8007a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a9c:	e7be      	b.n	8007a1c <_dtoa_r+0x1cc>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc58      	bgt.n	8007b5a <_dtoa_r+0x30a>
 8007aa8:	f04f 0901 	mov.w	r9, #1
 8007aac:	464b      	mov	r3, r9
 8007aae:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ab2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007aba:	6042      	str	r2, [r0, #4]
 8007abc:	2204      	movs	r2, #4
 8007abe:	f102 0614 	add.w	r6, r2, #20
 8007ac2:	429e      	cmp	r6, r3
 8007ac4:	6841      	ldr	r1, [r0, #4]
 8007ac6:	d94e      	bls.n	8007b66 <_dtoa_r+0x316>
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 fcc9 	bl	8008460 <_Balloc>
 8007ace:	9003      	str	r0, [sp, #12]
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d14c      	bne.n	8007b6e <_dtoa_r+0x31e>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ada:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <_dtoa_r+0x2e8>)
 8007adc:	e6cc      	b.n	8007878 <_dtoa_r+0x28>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7de      	b.n	8007aa0 <_dtoa_r+0x250>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ae8:	eb0a 0903 	add.w	r9, sl, r3
 8007aec:	f109 0301 	add.w	r3, r9, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	9308      	str	r3, [sp, #32]
 8007af4:	bfb8      	it	lt
 8007af6:	2301      	movlt	r3, #1
 8007af8:	e7dd      	b.n	8007ab6 <_dtoa_r+0x266>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7f2      	b.n	8007ae4 <_dtoa_r+0x294>
 8007afe:	bf00      	nop
 8007b00:	636f4361 	.word	0x636f4361
 8007b04:	3fd287a7 	.word	0x3fd287a7
 8007b08:	8b60c8b3 	.word	0x8b60c8b3
 8007b0c:	3fc68a28 	.word	0x3fc68a28
 8007b10:	509f79fb 	.word	0x509f79fb
 8007b14:	3fd34413 	.word	0x3fd34413
 8007b18:	080099fe 	.word	0x080099fe
 8007b1c:	08009a15 	.word	0x08009a15
 8007b20:	7ff00000 	.word	0x7ff00000
 8007b24:	080099fa 	.word	0x080099fa
 8007b28:	080099f1 	.word	0x080099f1
 8007b2c:	080098cd 	.word	0x080098cd
 8007b30:	3ff80000 	.word	0x3ff80000
 8007b34:	08009b08 	.word	0x08009b08
 8007b38:	08009a70 	.word	0x08009a70
 8007b3c:	2401      	movs	r4, #1
 8007b3e:	2300      	movs	r3, #0
 8007b40:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b42:	9322      	str	r3, [sp, #136]	; 0x88
 8007b44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2312      	movs	r3, #18
 8007b4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007b50:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b52:	e7b0      	b.n	8007ab6 <_dtoa_r+0x266>
 8007b54:	2301      	movs	r3, #1
 8007b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b58:	e7f4      	b.n	8007b44 <_dtoa_r+0x2f4>
 8007b5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007b5e:	464b      	mov	r3, r9
 8007b60:	f8cd 9020 	str.w	r9, [sp, #32]
 8007b64:	e7a7      	b.n	8007ab6 <_dtoa_r+0x266>
 8007b66:	3101      	adds	r1, #1
 8007b68:	6041      	str	r1, [r0, #4]
 8007b6a:	0052      	lsls	r2, r2, #1
 8007b6c:	e7a7      	b.n	8007abe <_dtoa_r+0x26e>
 8007b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b70:	9a03      	ldr	r2, [sp, #12]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	2b0e      	cmp	r3, #14
 8007b78:	f200 80a8 	bhi.w	8007ccc <_dtoa_r+0x47c>
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	f000 80a5 	beq.w	8007ccc <_dtoa_r+0x47c>
 8007b82:	f1ba 0f00 	cmp.w	sl, #0
 8007b86:	dd34      	ble.n	8007bf2 <_dtoa_r+0x3a2>
 8007b88:	4a9a      	ldr	r2, [pc, #616]	; (8007df4 <_dtoa_r+0x5a4>)
 8007b8a:	f00a 030f 	and.w	r3, sl, #15
 8007b8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007ba2:	d016      	beq.n	8007bd2 <_dtoa_r+0x382>
 8007ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ba8:	4b93      	ldr	r3, [pc, #588]	; (8007df8 <_dtoa_r+0x5a8>)
 8007baa:	2703      	movs	r7, #3
 8007bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bb0:	f7f8 fdbc 	bl	800072c <__aeabi_ddiv>
 8007bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb8:	f004 040f 	and.w	r4, r4, #15
 8007bbc:	4e8e      	ldr	r6, [pc, #568]	; (8007df8 <_dtoa_r+0x5a8>)
 8007bbe:	b954      	cbnz	r4, 8007bd6 <_dtoa_r+0x386>
 8007bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc8:	f7f8 fdb0 	bl	800072c <__aeabi_ddiv>
 8007bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd0:	e029      	b.n	8007c26 <_dtoa_r+0x3d6>
 8007bd2:	2702      	movs	r7, #2
 8007bd4:	e7f2      	b.n	8007bbc <_dtoa_r+0x36c>
 8007bd6:	07e1      	lsls	r1, r4, #31
 8007bd8:	d508      	bpl.n	8007bec <_dtoa_r+0x39c>
 8007bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007be2:	f7f8 fc79 	bl	80004d8 <__aeabi_dmul>
 8007be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bea:	3701      	adds	r7, #1
 8007bec:	1064      	asrs	r4, r4, #1
 8007bee:	3608      	adds	r6, #8
 8007bf0:	e7e5      	b.n	8007bbe <_dtoa_r+0x36e>
 8007bf2:	f000 80a5 	beq.w	8007d40 <_dtoa_r+0x4f0>
 8007bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bfa:	f1ca 0400 	rsb	r4, sl, #0
 8007bfe:	4b7d      	ldr	r3, [pc, #500]	; (8007df4 <_dtoa_r+0x5a4>)
 8007c00:	f004 020f 	and.w	r2, r4, #15
 8007c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fc64 	bl	80004d8 <__aeabi_dmul>
 8007c10:	2702      	movs	r7, #2
 8007c12:	2300      	movs	r3, #0
 8007c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c18:	4e77      	ldr	r6, [pc, #476]	; (8007df8 <_dtoa_r+0x5a8>)
 8007c1a:	1124      	asrs	r4, r4, #4
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	f040 8084 	bne.w	8007d2a <_dtoa_r+0x4da>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1d2      	bne.n	8007bcc <_dtoa_r+0x37c>
 8007c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 808b 	beq.w	8007d44 <_dtoa_r+0x4f4>
 8007c2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4b6f      	ldr	r3, [pc, #444]	; (8007dfc <_dtoa_r+0x5ac>)
 8007c3e:	f7f8 febd 	bl	80009bc <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d07e      	beq.n	8007d44 <_dtoa_r+0x4f4>
 8007c46:	9b08      	ldr	r3, [sp, #32]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d07b      	beq.n	8007d44 <_dtoa_r+0x4f4>
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	dd38      	ble.n	8007cc4 <_dtoa_r+0x474>
 8007c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c56:	2200      	movs	r2, #0
 8007c58:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <_dtoa_r+0x5b0>)
 8007c5a:	f7f8 fc3d 	bl	80004d8 <__aeabi_dmul>
 8007c5e:	464c      	mov	r4, r9
 8007c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c64:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007c68:	3701      	adds	r7, #1
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f7f8 fbca 	bl	8000404 <__aeabi_i2d>
 8007c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c74:	f7f8 fc30 	bl	80004d8 <__aeabi_dmul>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4b62      	ldr	r3, [pc, #392]	; (8007e04 <_dtoa_r+0x5b4>)
 8007c7c:	f7f8 fa76 	bl	800016c <__adddf3>
 8007c80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c88:	9611      	str	r6, [sp, #68]	; 0x44
 8007c8a:	2c00      	cmp	r4, #0
 8007c8c:	d15d      	bne.n	8007d4a <_dtoa_r+0x4fa>
 8007c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b5c      	ldr	r3, [pc, #368]	; (8007e08 <_dtoa_r+0x5b8>)
 8007c96:	f7f8 fa67 	bl	8000168 <__aeabi_dsub>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ca2:	4633      	mov	r3, r6
 8007ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ca6:	f7f8 fea7 	bl	80009f8 <__aeabi_dcmpgt>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f040 829c 	bne.w	80081e8 <_dtoa_r+0x998>
 8007cb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007cba:	f7f8 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f040 8290 	bne.w	80081e4 <_dtoa_r+0x994>
 8007cc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007cc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f2c0 8152 	blt.w	8007f78 <_dtoa_r+0x728>
 8007cd4:	f1ba 0f0e 	cmp.w	sl, #14
 8007cd8:	f300 814e 	bgt.w	8007f78 <_dtoa_r+0x728>
 8007cdc:	4b45      	ldr	r3, [pc, #276]	; (8007df4 <_dtoa_r+0x5a4>)
 8007cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ce6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007cea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f280 80db 	bge.w	8007ea8 <_dtoa_r+0x658>
 8007cf2:	9b08      	ldr	r3, [sp, #32]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f300 80d7 	bgt.w	8007ea8 <_dtoa_r+0x658>
 8007cfa:	f040 8272 	bne.w	80081e2 <_dtoa_r+0x992>
 8007cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d02:	2200      	movs	r2, #0
 8007d04:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <_dtoa_r+0x5b8>)
 8007d06:	f7f8 fbe7 	bl	80004d8 <__aeabi_dmul>
 8007d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d0e:	f7f8 fe69 	bl	80009e4 <__aeabi_dcmpge>
 8007d12:	9c08      	ldr	r4, [sp, #32]
 8007d14:	4626      	mov	r6, r4
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f040 8248 	bne.w	80081ac <_dtoa_r+0x95c>
 8007d1c:	2331      	movs	r3, #49	; 0x31
 8007d1e:	9f03      	ldr	r7, [sp, #12]
 8007d20:	f10a 0a01 	add.w	sl, sl, #1
 8007d24:	f807 3b01 	strb.w	r3, [r7], #1
 8007d28:	e244      	b.n	80081b4 <_dtoa_r+0x964>
 8007d2a:	07e2      	lsls	r2, r4, #31
 8007d2c:	d505      	bpl.n	8007d3a <_dtoa_r+0x4ea>
 8007d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d32:	f7f8 fbd1 	bl	80004d8 <__aeabi_dmul>
 8007d36:	2301      	movs	r3, #1
 8007d38:	3701      	adds	r7, #1
 8007d3a:	1064      	asrs	r4, r4, #1
 8007d3c:	3608      	adds	r6, #8
 8007d3e:	e76d      	b.n	8007c1c <_dtoa_r+0x3cc>
 8007d40:	2702      	movs	r7, #2
 8007d42:	e770      	b.n	8007c26 <_dtoa_r+0x3d6>
 8007d44:	46d0      	mov	r8, sl
 8007d46:	9c08      	ldr	r4, [sp, #32]
 8007d48:	e78f      	b.n	8007c6a <_dtoa_r+0x41a>
 8007d4a:	9903      	ldr	r1, [sp, #12]
 8007d4c:	4b29      	ldr	r3, [pc, #164]	; (8007df4 <_dtoa_r+0x5a4>)
 8007d4e:	4421      	add	r1, r4
 8007d50:	9112      	str	r1, [sp, #72]	; 0x48
 8007d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d60:	2900      	cmp	r1, #0
 8007d62:	d055      	beq.n	8007e10 <_dtoa_r+0x5c0>
 8007d64:	2000      	movs	r0, #0
 8007d66:	4929      	ldr	r1, [pc, #164]	; (8007e0c <_dtoa_r+0x5bc>)
 8007d68:	f7f8 fce0 	bl	800072c <__aeabi_ddiv>
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	4632      	mov	r2, r6
 8007d70:	f7f8 f9fa 	bl	8000168 <__aeabi_dsub>
 8007d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d78:	9f03      	ldr	r7, [sp, #12]
 8007d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d7e:	f7f8 fe5b 	bl	8000a38 <__aeabi_d2iz>
 8007d82:	4604      	mov	r4, r0
 8007d84:	f7f8 fb3e 	bl	8000404 <__aeabi_i2d>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d90:	f7f8 f9ea 	bl	8000168 <__aeabi_dsub>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	3430      	adds	r4, #48	; 0x30
 8007d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007da2:	f807 4b01 	strb.w	r4, [r7], #1
 8007da6:	f7f8 fe09 	bl	80009bc <__aeabi_dcmplt>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d174      	bne.n	8007e98 <_dtoa_r+0x648>
 8007dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db2:	2000      	movs	r0, #0
 8007db4:	4911      	ldr	r1, [pc, #68]	; (8007dfc <_dtoa_r+0x5ac>)
 8007db6:	f7f8 f9d7 	bl	8000168 <__aeabi_dsub>
 8007dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dbe:	f7f8 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f040 80b7 	bne.w	8007f36 <_dtoa_r+0x6e6>
 8007dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dca:	429f      	cmp	r7, r3
 8007dcc:	f43f af7a 	beq.w	8007cc4 <_dtoa_r+0x474>
 8007dd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <_dtoa_r+0x5b0>)
 8007dd8:	f7f8 fb7e 	bl	80004d8 <__aeabi_dmul>
 8007ddc:	2200      	movs	r2, #0
 8007dde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de6:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <_dtoa_r+0x5b0>)
 8007de8:	f7f8 fb76 	bl	80004d8 <__aeabi_dmul>
 8007dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007df0:	e7c3      	b.n	8007d7a <_dtoa_r+0x52a>
 8007df2:	bf00      	nop
 8007df4:	08009b08 	.word	0x08009b08
 8007df8:	08009ae0 	.word	0x08009ae0
 8007dfc:	3ff00000 	.word	0x3ff00000
 8007e00:	40240000 	.word	0x40240000
 8007e04:	401c0000 	.word	0x401c0000
 8007e08:	40140000 	.word	0x40140000
 8007e0c:	3fe00000 	.word	0x3fe00000
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fb60 	bl	80004d8 <__aeabi_dmul>
 8007e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e1e:	9c03      	ldr	r4, [sp, #12]
 8007e20:	9314      	str	r3, [sp, #80]	; 0x50
 8007e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e26:	f7f8 fe07 	bl	8000a38 <__aeabi_d2iz>
 8007e2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007e2c:	f7f8 faea 	bl	8000404 <__aeabi_i2d>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e38:	f7f8 f996 	bl	8000168 <__aeabi_dsub>
 8007e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e3e:	4606      	mov	r6, r0
 8007e40:	3330      	adds	r3, #48	; 0x30
 8007e42:	f804 3b01 	strb.w	r3, [r4], #1
 8007e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e48:	460f      	mov	r7, r1
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	d124      	bne.n	8007e9c <_dtoa_r+0x64c>
 8007e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e56:	4bb0      	ldr	r3, [pc, #704]	; (8008118 <_dtoa_r+0x8c8>)
 8007e58:	f7f8 f988 	bl	800016c <__adddf3>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4630      	mov	r0, r6
 8007e62:	4639      	mov	r1, r7
 8007e64:	f7f8 fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d163      	bne.n	8007f34 <_dtoa_r+0x6e4>
 8007e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e70:	2000      	movs	r0, #0
 8007e72:	49a9      	ldr	r1, [pc, #676]	; (8008118 <_dtoa_r+0x8c8>)
 8007e74:	f7f8 f978 	bl	8000168 <__aeabi_dsub>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fd9c 	bl	80009bc <__aeabi_dcmplt>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f43f af1d 	beq.w	8007cc4 <_dtoa_r+0x474>
 8007e8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e8c:	1e7b      	subs	r3, r7, #1
 8007e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007e90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e94:	2b30      	cmp	r3, #48	; 0x30
 8007e96:	d0f8      	beq.n	8007e8a <_dtoa_r+0x63a>
 8007e98:	46c2      	mov	sl, r8
 8007e9a:	e03b      	b.n	8007f14 <_dtoa_r+0x6c4>
 8007e9c:	4b9f      	ldr	r3, [pc, #636]	; (800811c <_dtoa_r+0x8cc>)
 8007e9e:	f7f8 fb1b 	bl	80004d8 <__aeabi_dmul>
 8007ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ea6:	e7bc      	b.n	8007e22 <_dtoa_r+0x5d2>
 8007ea8:	9f03      	ldr	r7, [sp, #12]
 8007eaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	f7f8 fc39 	bl	800072c <__aeabi_ddiv>
 8007eba:	f7f8 fdbd 	bl	8000a38 <__aeabi_d2iz>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f7f8 faa0 	bl	8000404 <__aeabi_i2d>
 8007ec4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ec8:	f7f8 fb06 	bl	80004d8 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4640      	mov	r0, r8
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	f7f8 f948 	bl	8000168 <__aeabi_dsub>
 8007ed8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007edc:	f807 6b01 	strb.w	r6, [r7], #1
 8007ee0:	9e03      	ldr	r6, [sp, #12]
 8007ee2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ee6:	1bbe      	subs	r6, r7, r6
 8007ee8:	45b4      	cmp	ip, r6
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	d136      	bne.n	8007f5e <_dtoa_r+0x70e>
 8007ef0:	f7f8 f93c 	bl	800016c <__adddf3>
 8007ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4689      	mov	r9, r1
 8007efc:	f7f8 fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f00:	bb58      	cbnz	r0, 8007f5a <_dtoa_r+0x70a>
 8007f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f06:	4640      	mov	r0, r8
 8007f08:	4649      	mov	r1, r9
 8007f0a:	f7f8 fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f0e:	b108      	cbz	r0, 8007f14 <_dtoa_r+0x6c4>
 8007f10:	07e1      	lsls	r1, r4, #31
 8007f12:	d422      	bmi.n	8007f5a <_dtoa_r+0x70a>
 8007f14:	4628      	mov	r0, r5
 8007f16:	4659      	mov	r1, fp
 8007f18:	f000 fae2 	bl	80084e0 <_Bfree>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	703b      	strb	r3, [r7, #0]
 8007f20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f22:	f10a 0001 	add.w	r0, sl, #1
 8007f26:	6018      	str	r0, [r3, #0]
 8007f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f43f acde 	beq.w	80078ec <_dtoa_r+0x9c>
 8007f30:	601f      	str	r7, [r3, #0]
 8007f32:	e4db      	b.n	80078ec <_dtoa_r+0x9c>
 8007f34:	4627      	mov	r7, r4
 8007f36:	463b      	mov	r3, r7
 8007f38:	461f      	mov	r7, r3
 8007f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3e:	2a39      	cmp	r2, #57	; 0x39
 8007f40:	d107      	bne.n	8007f52 <_dtoa_r+0x702>
 8007f42:	9a03      	ldr	r2, [sp, #12]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d1f7      	bne.n	8007f38 <_dtoa_r+0x6e8>
 8007f48:	2230      	movs	r2, #48	; 0x30
 8007f4a:	9903      	ldr	r1, [sp, #12]
 8007f4c:	f108 0801 	add.w	r8, r8, #1
 8007f50:	700a      	strb	r2, [r1, #0]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	3201      	adds	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	e79e      	b.n	8007e98 <_dtoa_r+0x648>
 8007f5a:	46d0      	mov	r8, sl
 8007f5c:	e7eb      	b.n	8007f36 <_dtoa_r+0x6e6>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4b6e      	ldr	r3, [pc, #440]	; (800811c <_dtoa_r+0x8cc>)
 8007f62:	f7f8 fab9 	bl	80004d8 <__aeabi_dmul>
 8007f66:	2200      	movs	r2, #0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	f7f8 fd1b 	bl	80009a8 <__aeabi_dcmpeq>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d09b      	beq.n	8007eae <_dtoa_r+0x65e>
 8007f76:	e7cd      	b.n	8007f14 <_dtoa_r+0x6c4>
 8007f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	f000 80d0 	beq.w	8008120 <_dtoa_r+0x8d0>
 8007f80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f82:	2a01      	cmp	r2, #1
 8007f84:	f300 80ae 	bgt.w	80080e4 <_dtoa_r+0x894>
 8007f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	f000 80a6 	beq.w	80080dc <_dtoa_r+0x88c>
 8007f90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f96:	9f06      	ldr	r7, [sp, #24]
 8007f98:	9a06      	ldr	r2, [sp, #24]
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	9206      	str	r2, [sp, #24]
 8007fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	441a      	add	r2, r3
 8007fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa8:	f000 fb50 	bl	800864c <__i2b>
 8007fac:	4606      	mov	r6, r0
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	dd0c      	ble.n	8007fcc <_dtoa_r+0x77c>
 8007fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dd09      	ble.n	8007fcc <_dtoa_r+0x77c>
 8007fb8:	42bb      	cmp	r3, r7
 8007fba:	bfa8      	it	ge
 8007fbc:	463b      	movge	r3, r7
 8007fbe:	9a06      	ldr	r2, [sp, #24]
 8007fc0:	1aff      	subs	r7, r7, r3
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	9206      	str	r2, [sp, #24]
 8007fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	9309      	str	r3, [sp, #36]	; 0x24
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fce:	b1f3      	cbz	r3, 800800e <_dtoa_r+0x7be>
 8007fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80a8 	beq.w	8008128 <_dtoa_r+0x8d8>
 8007fd8:	2c00      	cmp	r4, #0
 8007fda:	dd10      	ble.n	8007ffe <_dtoa_r+0x7ae>
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 fbf1 	bl	80087c8 <__pow5mult>
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4606      	mov	r6, r0
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 fb43 	bl	8008678 <__multiply>
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fa72 	bl	80084e0 <_Bfree>
 8007ffc:	46c3      	mov	fp, r8
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	1b1a      	subs	r2, r3, r4
 8008002:	d004      	beq.n	800800e <_dtoa_r+0x7be>
 8008004:	4659      	mov	r1, fp
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fbde 	bl	80087c8 <__pow5mult>
 800800c:	4683      	mov	fp, r0
 800800e:	2101      	movs	r1, #1
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fb1b 	bl	800864c <__i2b>
 8008016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008018:	4604      	mov	r4, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f340 8086 	ble.w	800812c <_dtoa_r+0x8dc>
 8008020:	461a      	mov	r2, r3
 8008022:	4601      	mov	r1, r0
 8008024:	4628      	mov	r0, r5
 8008026:	f000 fbcf 	bl	80087c8 <__pow5mult>
 800802a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800802c:	4604      	mov	r4, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	dd7f      	ble.n	8008132 <_dtoa_r+0x8e2>
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800803c:	6918      	ldr	r0, [r3, #16]
 800803e:	f000 fab7 	bl	80085b0 <__hi0bits>
 8008042:	f1c0 0020 	rsb	r0, r0, #32
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	4418      	add	r0, r3
 800804a:	f010 001f 	ands.w	r0, r0, #31
 800804e:	f000 8092 	beq.w	8008176 <_dtoa_r+0x926>
 8008052:	f1c0 0320 	rsb	r3, r0, #32
 8008056:	2b04      	cmp	r3, #4
 8008058:	f340 808a 	ble.w	8008170 <_dtoa_r+0x920>
 800805c:	f1c0 001c 	rsb	r0, r0, #28
 8008060:	9b06      	ldr	r3, [sp, #24]
 8008062:	4407      	add	r7, r0
 8008064:	4403      	add	r3, r0
 8008066:	9306      	str	r3, [sp, #24]
 8008068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806a:	4403      	add	r3, r0
 800806c:	9309      	str	r3, [sp, #36]	; 0x24
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dd05      	ble.n	8008080 <_dtoa_r+0x830>
 8008074:	4659      	mov	r1, fp
 8008076:	461a      	mov	r2, r3
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fbff 	bl	800887c <__lshift>
 800807e:	4683      	mov	fp, r0
 8008080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008082:	2b00      	cmp	r3, #0
 8008084:	dd05      	ble.n	8008092 <_dtoa_r+0x842>
 8008086:	4621      	mov	r1, r4
 8008088:	461a      	mov	r2, r3
 800808a:	4628      	mov	r0, r5
 800808c:	f000 fbf6 	bl	800887c <__lshift>
 8008090:	4604      	mov	r4, r0
 8008092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d070      	beq.n	800817a <_dtoa_r+0x92a>
 8008098:	4621      	mov	r1, r4
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc5e 	bl	800895c <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	da6a      	bge.n	800817a <_dtoa_r+0x92a>
 80080a4:	2300      	movs	r3, #0
 80080a6:	4659      	mov	r1, fp
 80080a8:	220a      	movs	r2, #10
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 fa3a 	bl	8008524 <__multadd>
 80080b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b2:	4683      	mov	fp, r0
 80080b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8194 	beq.w	80083e6 <_dtoa_r+0xb96>
 80080be:	4631      	mov	r1, r6
 80080c0:	2300      	movs	r3, #0
 80080c2:	220a      	movs	r2, #10
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fa2d 	bl	8008524 <__multadd>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	4606      	mov	r6, r0
 80080d0:	f300 8093 	bgt.w	80081fa <_dtoa_r+0x9aa>
 80080d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	dc57      	bgt.n	800818a <_dtoa_r+0x93a>
 80080da:	e08e      	b.n	80081fa <_dtoa_r+0x9aa>
 80080dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080e2:	e757      	b.n	8007f94 <_dtoa_r+0x744>
 80080e4:	9b08      	ldr	r3, [sp, #32]
 80080e6:	1e5c      	subs	r4, r3, #1
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	bfb7      	itett	lt
 80080ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080f0:	1b1c      	subge	r4, r3, r4
 80080f2:	1ae2      	sublt	r2, r4, r3
 80080f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80080f6:	bfbe      	ittt	lt
 80080f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80080fa:	189b      	addlt	r3, r3, r2
 80080fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	bfb8      	it	lt
 8008102:	2400      	movlt	r4, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfbb      	ittet	lt
 8008108:	9b06      	ldrlt	r3, [sp, #24]
 800810a:	9a08      	ldrlt	r2, [sp, #32]
 800810c:	9f06      	ldrge	r7, [sp, #24]
 800810e:	1a9f      	sublt	r7, r3, r2
 8008110:	bfac      	ite	ge
 8008112:	9b08      	ldrge	r3, [sp, #32]
 8008114:	2300      	movlt	r3, #0
 8008116:	e73f      	b.n	8007f98 <_dtoa_r+0x748>
 8008118:	3fe00000 	.word	0x3fe00000
 800811c:	40240000 	.word	0x40240000
 8008120:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008122:	9f06      	ldr	r7, [sp, #24]
 8008124:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008126:	e742      	b.n	8007fae <_dtoa_r+0x75e>
 8008128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812a:	e76b      	b.n	8008004 <_dtoa_r+0x7b4>
 800812c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800812e:	2b01      	cmp	r3, #1
 8008130:	dc19      	bgt.n	8008166 <_dtoa_r+0x916>
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	b9bb      	cbnz	r3, 8008166 <_dtoa_r+0x916>
 8008136:	9b05      	ldr	r3, [sp, #20]
 8008138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800813c:	b99b      	cbnz	r3, 8008166 <_dtoa_r+0x916>
 800813e:	9b05      	ldr	r3, [sp, #20]
 8008140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008144:	0d1b      	lsrs	r3, r3, #20
 8008146:	051b      	lsls	r3, r3, #20
 8008148:	b183      	cbz	r3, 800816c <_dtoa_r+0x91c>
 800814a:	f04f 0801 	mov.w	r8, #1
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	3301      	adds	r3, #1
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	9309      	str	r3, [sp, #36]	; 0x24
 800815a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	f47f af6a 	bne.w	8008036 <_dtoa_r+0x7e6>
 8008162:	2001      	movs	r0, #1
 8008164:	e76f      	b.n	8008046 <_dtoa_r+0x7f6>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	e7f6      	b.n	800815a <_dtoa_r+0x90a>
 800816c:	4698      	mov	r8, r3
 800816e:	e7f4      	b.n	800815a <_dtoa_r+0x90a>
 8008170:	f43f af7d 	beq.w	800806e <_dtoa_r+0x81e>
 8008174:	4618      	mov	r0, r3
 8008176:	301c      	adds	r0, #28
 8008178:	e772      	b.n	8008060 <_dtoa_r+0x810>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc36      	bgt.n	80081ee <_dtoa_r+0x99e>
 8008180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008182:	2b02      	cmp	r3, #2
 8008184:	dd33      	ble.n	80081ee <_dtoa_r+0x99e>
 8008186:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800818a:	f1b9 0f00 	cmp.w	r9, #0
 800818e:	d10d      	bne.n	80081ac <_dtoa_r+0x95c>
 8008190:	4621      	mov	r1, r4
 8008192:	464b      	mov	r3, r9
 8008194:	2205      	movs	r2, #5
 8008196:	4628      	mov	r0, r5
 8008198:	f000 f9c4 	bl	8008524 <__multadd>
 800819c:	4601      	mov	r1, r0
 800819e:	4604      	mov	r4, r0
 80081a0:	4658      	mov	r0, fp
 80081a2:	f000 fbdb 	bl	800895c <__mcmp>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f73f adb8 	bgt.w	8007d1c <_dtoa_r+0x4cc>
 80081ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081ae:	9f03      	ldr	r7, [sp, #12]
 80081b0:	ea6f 0a03 	mvn.w	sl, r3
 80081b4:	f04f 0800 	mov.w	r8, #0
 80081b8:	4621      	mov	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 f990 	bl	80084e0 <_Bfree>
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	f43f aea7 	beq.w	8007f14 <_dtoa_r+0x6c4>
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	d005      	beq.n	80081d8 <_dtoa_r+0x988>
 80081cc:	45b0      	cmp	r8, r6
 80081ce:	d003      	beq.n	80081d8 <_dtoa_r+0x988>
 80081d0:	4641      	mov	r1, r8
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f984 	bl	80084e0 <_Bfree>
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	f000 f980 	bl	80084e0 <_Bfree>
 80081e0:	e698      	b.n	8007f14 <_dtoa_r+0x6c4>
 80081e2:	2400      	movs	r4, #0
 80081e4:	4626      	mov	r6, r4
 80081e6:	e7e1      	b.n	80081ac <_dtoa_r+0x95c>
 80081e8:	46c2      	mov	sl, r8
 80081ea:	4626      	mov	r6, r4
 80081ec:	e596      	b.n	8007d1c <_dtoa_r+0x4cc>
 80081ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 80fd 	beq.w	80083f4 <_dtoa_r+0xba4>
 80081fa:	2f00      	cmp	r7, #0
 80081fc:	dd05      	ble.n	800820a <_dtoa_r+0x9ba>
 80081fe:	4631      	mov	r1, r6
 8008200:	463a      	mov	r2, r7
 8008202:	4628      	mov	r0, r5
 8008204:	f000 fb3a 	bl	800887c <__lshift>
 8008208:	4606      	mov	r6, r0
 800820a:	f1b8 0f00 	cmp.w	r8, #0
 800820e:	d05c      	beq.n	80082ca <_dtoa_r+0xa7a>
 8008210:	4628      	mov	r0, r5
 8008212:	6871      	ldr	r1, [r6, #4]
 8008214:	f000 f924 	bl	8008460 <_Balloc>
 8008218:	4607      	mov	r7, r0
 800821a:	b928      	cbnz	r0, 8008228 <_dtoa_r+0x9d8>
 800821c:	4602      	mov	r2, r0
 800821e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008222:	4b7f      	ldr	r3, [pc, #508]	; (8008420 <_dtoa_r+0xbd0>)
 8008224:	f7ff bb28 	b.w	8007878 <_dtoa_r+0x28>
 8008228:	6932      	ldr	r2, [r6, #16]
 800822a:	f106 010c 	add.w	r1, r6, #12
 800822e:	3202      	adds	r2, #2
 8008230:	0092      	lsls	r2, r2, #2
 8008232:	300c      	adds	r0, #12
 8008234:	f7fe fd6e 	bl	8006d14 <memcpy>
 8008238:	2201      	movs	r2, #1
 800823a:	4639      	mov	r1, r7
 800823c:	4628      	mov	r0, r5
 800823e:	f000 fb1d 	bl	800887c <__lshift>
 8008242:	46b0      	mov	r8, r6
 8008244:	4606      	mov	r6, r0
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	9308      	str	r3, [sp, #32]
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	444b      	add	r3, r9
 8008250:	930a      	str	r3, [sp, #40]	; 0x28
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	9b08      	ldr	r3, [sp, #32]
 800825c:	4621      	mov	r1, r4
 800825e:	3b01      	subs	r3, #1
 8008260:	4658      	mov	r0, fp
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f7ff fa66 	bl	8007734 <quorem>
 8008268:	4603      	mov	r3, r0
 800826a:	4641      	mov	r1, r8
 800826c:	3330      	adds	r3, #48	; 0x30
 800826e:	9006      	str	r0, [sp, #24]
 8008270:	4658      	mov	r0, fp
 8008272:	930b      	str	r3, [sp, #44]	; 0x2c
 8008274:	f000 fb72 	bl	800895c <__mcmp>
 8008278:	4632      	mov	r2, r6
 800827a:	4681      	mov	r9, r0
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 fb88 	bl	8008994 <__mdiff>
 8008284:	68c2      	ldr	r2, [r0, #12]
 8008286:	4607      	mov	r7, r0
 8008288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828a:	bb02      	cbnz	r2, 80082ce <_dtoa_r+0xa7e>
 800828c:	4601      	mov	r1, r0
 800828e:	4658      	mov	r0, fp
 8008290:	f000 fb64 	bl	800895c <__mcmp>
 8008294:	4602      	mov	r2, r0
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	4639      	mov	r1, r7
 800829a:	4628      	mov	r0, r5
 800829c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80082a0:	f000 f91e 	bl	80084e0 <_Bfree>
 80082a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082a8:	9f08      	ldr	r7, [sp, #32]
 80082aa:	ea43 0102 	orr.w	r1, r3, r2
 80082ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b0:	430b      	orrs	r3, r1
 80082b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b4:	d10d      	bne.n	80082d2 <_dtoa_r+0xa82>
 80082b6:	2b39      	cmp	r3, #57	; 0x39
 80082b8:	d029      	beq.n	800830e <_dtoa_r+0xabe>
 80082ba:	f1b9 0f00 	cmp.w	r9, #0
 80082be:	dd01      	ble.n	80082c4 <_dtoa_r+0xa74>
 80082c0:	9b06      	ldr	r3, [sp, #24]
 80082c2:	3331      	adds	r3, #49	; 0x31
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	7013      	strb	r3, [r2, #0]
 80082c8:	e776      	b.n	80081b8 <_dtoa_r+0x968>
 80082ca:	4630      	mov	r0, r6
 80082cc:	e7b9      	b.n	8008242 <_dtoa_r+0x9f2>
 80082ce:	2201      	movs	r2, #1
 80082d0:	e7e2      	b.n	8008298 <_dtoa_r+0xa48>
 80082d2:	f1b9 0f00 	cmp.w	r9, #0
 80082d6:	db06      	blt.n	80082e6 <_dtoa_r+0xa96>
 80082d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80082da:	ea41 0909 	orr.w	r9, r1, r9
 80082de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082e0:	ea59 0101 	orrs.w	r1, r9, r1
 80082e4:	d120      	bne.n	8008328 <_dtoa_r+0xad8>
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	ddec      	ble.n	80082c4 <_dtoa_r+0xa74>
 80082ea:	4659      	mov	r1, fp
 80082ec:	2201      	movs	r2, #1
 80082ee:	4628      	mov	r0, r5
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	f000 fac3 	bl	800887c <__lshift>
 80082f6:	4621      	mov	r1, r4
 80082f8:	4683      	mov	fp, r0
 80082fa:	f000 fb2f 	bl	800895c <__mcmp>
 80082fe:	2800      	cmp	r0, #0
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	dc02      	bgt.n	800830a <_dtoa_r+0xaba>
 8008304:	d1de      	bne.n	80082c4 <_dtoa_r+0xa74>
 8008306:	07da      	lsls	r2, r3, #31
 8008308:	d5dc      	bpl.n	80082c4 <_dtoa_r+0xa74>
 800830a:	2b39      	cmp	r3, #57	; 0x39
 800830c:	d1d8      	bne.n	80082c0 <_dtoa_r+0xa70>
 800830e:	2339      	movs	r3, #57	; 0x39
 8008310:	9a04      	ldr	r2, [sp, #16]
 8008312:	7013      	strb	r3, [r2, #0]
 8008314:	463b      	mov	r3, r7
 8008316:	461f      	mov	r7, r3
 8008318:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800831c:	3b01      	subs	r3, #1
 800831e:	2a39      	cmp	r2, #57	; 0x39
 8008320:	d050      	beq.n	80083c4 <_dtoa_r+0xb74>
 8008322:	3201      	adds	r2, #1
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e747      	b.n	80081b8 <_dtoa_r+0x968>
 8008328:	2a00      	cmp	r2, #0
 800832a:	dd03      	ble.n	8008334 <_dtoa_r+0xae4>
 800832c:	2b39      	cmp	r3, #57	; 0x39
 800832e:	d0ee      	beq.n	800830e <_dtoa_r+0xabe>
 8008330:	3301      	adds	r3, #1
 8008332:	e7c7      	b.n	80082c4 <_dtoa_r+0xa74>
 8008334:	9a08      	ldr	r2, [sp, #32]
 8008336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008338:	f802 3c01 	strb.w	r3, [r2, #-1]
 800833c:	428a      	cmp	r2, r1
 800833e:	d02a      	beq.n	8008396 <_dtoa_r+0xb46>
 8008340:	4659      	mov	r1, fp
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f8ec 	bl	8008524 <__multadd>
 800834c:	45b0      	cmp	r8, r6
 800834e:	4683      	mov	fp, r0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	f04f 020a 	mov.w	r2, #10
 8008358:	4641      	mov	r1, r8
 800835a:	4628      	mov	r0, r5
 800835c:	d107      	bne.n	800836e <_dtoa_r+0xb1e>
 800835e:	f000 f8e1 	bl	8008524 <__multadd>
 8008362:	4680      	mov	r8, r0
 8008364:	4606      	mov	r6, r0
 8008366:	9b08      	ldr	r3, [sp, #32]
 8008368:	3301      	adds	r3, #1
 800836a:	9308      	str	r3, [sp, #32]
 800836c:	e775      	b.n	800825a <_dtoa_r+0xa0a>
 800836e:	f000 f8d9 	bl	8008524 <__multadd>
 8008372:	4631      	mov	r1, r6
 8008374:	4680      	mov	r8, r0
 8008376:	2300      	movs	r3, #0
 8008378:	220a      	movs	r2, #10
 800837a:	4628      	mov	r0, r5
 800837c:	f000 f8d2 	bl	8008524 <__multadd>
 8008380:	4606      	mov	r6, r0
 8008382:	e7f0      	b.n	8008366 <_dtoa_r+0xb16>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	bfcc      	ite	gt
 800838a:	464f      	movgt	r7, r9
 800838c:	2701      	movle	r7, #1
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	9a03      	ldr	r2, [sp, #12]
 8008394:	4417      	add	r7, r2
 8008396:	4659      	mov	r1, fp
 8008398:	2201      	movs	r2, #1
 800839a:	4628      	mov	r0, r5
 800839c:	9308      	str	r3, [sp, #32]
 800839e:	f000 fa6d 	bl	800887c <__lshift>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4683      	mov	fp, r0
 80083a6:	f000 fad9 	bl	800895c <__mcmp>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	dcb2      	bgt.n	8008314 <_dtoa_r+0xac4>
 80083ae:	d102      	bne.n	80083b6 <_dtoa_r+0xb66>
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	07db      	lsls	r3, r3, #31
 80083b4:	d4ae      	bmi.n	8008314 <_dtoa_r+0xac4>
 80083b6:	463b      	mov	r3, r7
 80083b8:	461f      	mov	r7, r3
 80083ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083be:	2a30      	cmp	r2, #48	; 0x30
 80083c0:	d0fa      	beq.n	80083b8 <_dtoa_r+0xb68>
 80083c2:	e6f9      	b.n	80081b8 <_dtoa_r+0x968>
 80083c4:	9a03      	ldr	r2, [sp, #12]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d1a5      	bne.n	8008316 <_dtoa_r+0xac6>
 80083ca:	2331      	movs	r3, #49	; 0x31
 80083cc:	f10a 0a01 	add.w	sl, sl, #1
 80083d0:	e779      	b.n	80082c6 <_dtoa_r+0xa76>
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <_dtoa_r+0xbd4>)
 80083d4:	f7ff baa8 	b.w	8007928 <_dtoa_r+0xd8>
 80083d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f47f aa81 	bne.w	80078e2 <_dtoa_r+0x92>
 80083e0:	4b11      	ldr	r3, [pc, #68]	; (8008428 <_dtoa_r+0xbd8>)
 80083e2:	f7ff baa1 	b.w	8007928 <_dtoa_r+0xd8>
 80083e6:	f1b9 0f00 	cmp.w	r9, #0
 80083ea:	dc03      	bgt.n	80083f4 <_dtoa_r+0xba4>
 80083ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	f73f aecb 	bgt.w	800818a <_dtoa_r+0x93a>
 80083f4:	9f03      	ldr	r7, [sp, #12]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4658      	mov	r0, fp
 80083fa:	f7ff f99b 	bl	8007734 <quorem>
 80083fe:	9a03      	ldr	r2, [sp, #12]
 8008400:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008404:	f807 3b01 	strb.w	r3, [r7], #1
 8008408:	1aba      	subs	r2, r7, r2
 800840a:	4591      	cmp	r9, r2
 800840c:	ddba      	ble.n	8008384 <_dtoa_r+0xb34>
 800840e:	4659      	mov	r1, fp
 8008410:	2300      	movs	r3, #0
 8008412:	220a      	movs	r2, #10
 8008414:	4628      	mov	r0, r5
 8008416:	f000 f885 	bl	8008524 <__multadd>
 800841a:	4683      	mov	fp, r0
 800841c:	e7eb      	b.n	80083f6 <_dtoa_r+0xba6>
 800841e:	bf00      	nop
 8008420:	08009a70 	.word	0x08009a70
 8008424:	080098cc 	.word	0x080098cc
 8008428:	080099f1 	.word	0x080099f1

0800842c <_localeconv_r>:
 800842c:	4800      	ldr	r0, [pc, #0]	; (8008430 <_localeconv_r+0x4>)
 800842e:	4770      	bx	lr
 8008430:	20000224 	.word	0x20000224

08008434 <malloc>:
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <malloc+0xc>)
 8008436:	4601      	mov	r1, r0
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f000 bc0f 	b.w	8008c5c <_malloc_r>
 800843e:	bf00      	nop
 8008440:	200000d0 	.word	0x200000d0

08008444 <memchr>:
 8008444:	4603      	mov	r3, r0
 8008446:	b510      	push	{r4, lr}
 8008448:	b2c9      	uxtb	r1, r1
 800844a:	4402      	add	r2, r0
 800844c:	4293      	cmp	r3, r2
 800844e:	4618      	mov	r0, r3
 8008450:	d101      	bne.n	8008456 <memchr+0x12>
 8008452:	2000      	movs	r0, #0
 8008454:	e003      	b.n	800845e <memchr+0x1a>
 8008456:	7804      	ldrb	r4, [r0, #0]
 8008458:	3301      	adds	r3, #1
 800845a:	428c      	cmp	r4, r1
 800845c:	d1f6      	bne.n	800844c <memchr+0x8>
 800845e:	bd10      	pop	{r4, pc}

08008460 <_Balloc>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	b976      	cbnz	r6, 8008488 <_Balloc+0x28>
 800846a:	2010      	movs	r0, #16
 800846c:	f7ff ffe2 	bl	8008434 <malloc>
 8008470:	4602      	mov	r2, r0
 8008472:	6260      	str	r0, [r4, #36]	; 0x24
 8008474:	b920      	cbnz	r0, 8008480 <_Balloc+0x20>
 8008476:	2166      	movs	r1, #102	; 0x66
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <_Balloc+0x78>)
 800847a:	4818      	ldr	r0, [pc, #96]	; (80084dc <_Balloc+0x7c>)
 800847c:	f000 fc72 	bl	8008d64 <__assert_func>
 8008480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008484:	6006      	str	r6, [r0, #0]
 8008486:	60c6      	str	r6, [r0, #12]
 8008488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800848a:	68f3      	ldr	r3, [r6, #12]
 800848c:	b183      	cbz	r3, 80084b0 <_Balloc+0x50>
 800848e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008496:	b9b8      	cbnz	r0, 80084c8 <_Balloc+0x68>
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f605 	lsl.w	r6, r1, r5
 800849e:	1d72      	adds	r2, r6, #5
 80084a0:	4620      	mov	r0, r4
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	f000 fb5e 	bl	8008b64 <_calloc_r>
 80084a8:	b160      	cbz	r0, 80084c4 <_Balloc+0x64>
 80084aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084ae:	e00e      	b.n	80084ce <_Balloc+0x6e>
 80084b0:	2221      	movs	r2, #33	; 0x21
 80084b2:	2104      	movs	r1, #4
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fb55 	bl	8008b64 <_calloc_r>
 80084ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084bc:	60f0      	str	r0, [r6, #12]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <_Balloc+0x2e>
 80084c4:	2000      	movs	r0, #0
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	6802      	ldr	r2, [r0, #0]
 80084ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ce:	2300      	movs	r3, #0
 80084d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d4:	e7f7      	b.n	80084c6 <_Balloc+0x66>
 80084d6:	bf00      	nop
 80084d8:	080099fe 	.word	0x080099fe
 80084dc:	08009a81 	.word	0x08009a81

080084e0 <_Bfree>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	b976      	cbnz	r6, 8008508 <_Bfree+0x28>
 80084ea:	2010      	movs	r0, #16
 80084ec:	f7ff ffa2 	bl	8008434 <malloc>
 80084f0:	4602      	mov	r2, r0
 80084f2:	6268      	str	r0, [r5, #36]	; 0x24
 80084f4:	b920      	cbnz	r0, 8008500 <_Bfree+0x20>
 80084f6:	218a      	movs	r1, #138	; 0x8a
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <_Bfree+0x3c>)
 80084fa:	4809      	ldr	r0, [pc, #36]	; (8008520 <_Bfree+0x40>)
 80084fc:	f000 fc32 	bl	8008d64 <__assert_func>
 8008500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008504:	6006      	str	r6, [r0, #0]
 8008506:	60c6      	str	r6, [r0, #12]
 8008508:	b13c      	cbz	r4, 800851a <_Bfree+0x3a>
 800850a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800850c:	6862      	ldr	r2, [r4, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008514:	6021      	str	r1, [r4, #0]
 8008516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	080099fe 	.word	0x080099fe
 8008520:	08009a81 	.word	0x08009a81

08008524 <__multadd>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4607      	mov	r7, r0
 800852a:	460c      	mov	r4, r1
 800852c:	461e      	mov	r6, r3
 800852e:	2000      	movs	r0, #0
 8008530:	690d      	ldr	r5, [r1, #16]
 8008532:	f101 0c14 	add.w	ip, r1, #20
 8008536:	f8dc 3000 	ldr.w	r3, [ip]
 800853a:	3001      	adds	r0, #1
 800853c:	b299      	uxth	r1, r3
 800853e:	fb02 6101 	mla	r1, r2, r1, r6
 8008542:	0c1e      	lsrs	r6, r3, #16
 8008544:	0c0b      	lsrs	r3, r1, #16
 8008546:	fb02 3306 	mla	r3, r2, r6, r3
 800854a:	b289      	uxth	r1, r1
 800854c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008550:	4285      	cmp	r5, r0
 8008552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008556:	f84c 1b04 	str.w	r1, [ip], #4
 800855a:	dcec      	bgt.n	8008536 <__multadd+0x12>
 800855c:	b30e      	cbz	r6, 80085a2 <__multadd+0x7e>
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc19      	bgt.n	8008598 <__multadd+0x74>
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4638      	mov	r0, r7
 8008568:	3101      	adds	r1, #1
 800856a:	f7ff ff79 	bl	8008460 <_Balloc>
 800856e:	4680      	mov	r8, r0
 8008570:	b928      	cbnz	r0, 800857e <__multadd+0x5a>
 8008572:	4602      	mov	r2, r0
 8008574:	21b5      	movs	r1, #181	; 0xb5
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <__multadd+0x84>)
 8008578:	480c      	ldr	r0, [pc, #48]	; (80085ac <__multadd+0x88>)
 800857a:	f000 fbf3 	bl	8008d64 <__assert_func>
 800857e:	6922      	ldr	r2, [r4, #16]
 8008580:	f104 010c 	add.w	r1, r4, #12
 8008584:	3202      	adds	r2, #2
 8008586:	0092      	lsls	r2, r2, #2
 8008588:	300c      	adds	r0, #12
 800858a:	f7fe fbc3 	bl	8006d14 <memcpy>
 800858e:	4621      	mov	r1, r4
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ffa5 	bl	80084e0 <_Bfree>
 8008596:	4644      	mov	r4, r8
 8008598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800859c:	3501      	adds	r5, #1
 800859e:	615e      	str	r6, [r3, #20]
 80085a0:	6125      	str	r5, [r4, #16]
 80085a2:	4620      	mov	r0, r4
 80085a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a8:	08009a70 	.word	0x08009a70
 80085ac:	08009a81 	.word	0x08009a81

080085b0 <__hi0bits>:
 80085b0:	0c02      	lsrs	r2, r0, #16
 80085b2:	0412      	lsls	r2, r2, #16
 80085b4:	4603      	mov	r3, r0
 80085b6:	b9ca      	cbnz	r2, 80085ec <__hi0bits+0x3c>
 80085b8:	0403      	lsls	r3, r0, #16
 80085ba:	2010      	movs	r0, #16
 80085bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085c0:	bf04      	itt	eq
 80085c2:	021b      	lsleq	r3, r3, #8
 80085c4:	3008      	addeq	r0, #8
 80085c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085ca:	bf04      	itt	eq
 80085cc:	011b      	lsleq	r3, r3, #4
 80085ce:	3004      	addeq	r0, #4
 80085d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085d4:	bf04      	itt	eq
 80085d6:	009b      	lsleq	r3, r3, #2
 80085d8:	3002      	addeq	r0, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db05      	blt.n	80085ea <__hi0bits+0x3a>
 80085de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085e2:	f100 0001 	add.w	r0, r0, #1
 80085e6:	bf08      	it	eq
 80085e8:	2020      	moveq	r0, #32
 80085ea:	4770      	bx	lr
 80085ec:	2000      	movs	r0, #0
 80085ee:	e7e5      	b.n	80085bc <__hi0bits+0xc>

080085f0 <__lo0bits>:
 80085f0:	6803      	ldr	r3, [r0, #0]
 80085f2:	4602      	mov	r2, r0
 80085f4:	f013 0007 	ands.w	r0, r3, #7
 80085f8:	d00b      	beq.n	8008612 <__lo0bits+0x22>
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d421      	bmi.n	8008642 <__lo0bits+0x52>
 80085fe:	0798      	lsls	r0, r3, #30
 8008600:	bf49      	itett	mi
 8008602:	085b      	lsrmi	r3, r3, #1
 8008604:	089b      	lsrpl	r3, r3, #2
 8008606:	2001      	movmi	r0, #1
 8008608:	6013      	strmi	r3, [r2, #0]
 800860a:	bf5c      	itt	pl
 800860c:	2002      	movpl	r0, #2
 800860e:	6013      	strpl	r3, [r2, #0]
 8008610:	4770      	bx	lr
 8008612:	b299      	uxth	r1, r3
 8008614:	b909      	cbnz	r1, 800861a <__lo0bits+0x2a>
 8008616:	2010      	movs	r0, #16
 8008618:	0c1b      	lsrs	r3, r3, #16
 800861a:	b2d9      	uxtb	r1, r3
 800861c:	b909      	cbnz	r1, 8008622 <__lo0bits+0x32>
 800861e:	3008      	adds	r0, #8
 8008620:	0a1b      	lsrs	r3, r3, #8
 8008622:	0719      	lsls	r1, r3, #28
 8008624:	bf04      	itt	eq
 8008626:	091b      	lsreq	r3, r3, #4
 8008628:	3004      	addeq	r0, #4
 800862a:	0799      	lsls	r1, r3, #30
 800862c:	bf04      	itt	eq
 800862e:	089b      	lsreq	r3, r3, #2
 8008630:	3002      	addeq	r0, #2
 8008632:	07d9      	lsls	r1, r3, #31
 8008634:	d403      	bmi.n	800863e <__lo0bits+0x4e>
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	f100 0001 	add.w	r0, r0, #1
 800863c:	d003      	beq.n	8008646 <__lo0bits+0x56>
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	4770      	bx	lr
 8008642:	2000      	movs	r0, #0
 8008644:	4770      	bx	lr
 8008646:	2020      	movs	r0, #32
 8008648:	4770      	bx	lr
	...

0800864c <__i2b>:
 800864c:	b510      	push	{r4, lr}
 800864e:	460c      	mov	r4, r1
 8008650:	2101      	movs	r1, #1
 8008652:	f7ff ff05 	bl	8008460 <_Balloc>
 8008656:	4602      	mov	r2, r0
 8008658:	b928      	cbnz	r0, 8008666 <__i2b+0x1a>
 800865a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800865e:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__i2b+0x24>)
 8008660:	4804      	ldr	r0, [pc, #16]	; (8008674 <__i2b+0x28>)
 8008662:	f000 fb7f 	bl	8008d64 <__assert_func>
 8008666:	2301      	movs	r3, #1
 8008668:	6144      	str	r4, [r0, #20]
 800866a:	6103      	str	r3, [r0, #16]
 800866c:	bd10      	pop	{r4, pc}
 800866e:	bf00      	nop
 8008670:	08009a70 	.word	0x08009a70
 8008674:	08009a81 	.word	0x08009a81

08008678 <__multiply>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	4691      	mov	r9, r2
 800867e:	690a      	ldr	r2, [r1, #16]
 8008680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008684:	460c      	mov	r4, r1
 8008686:	429a      	cmp	r2, r3
 8008688:	bfbe      	ittt	lt
 800868a:	460b      	movlt	r3, r1
 800868c:	464c      	movlt	r4, r9
 800868e:	4699      	movlt	r9, r3
 8008690:	6927      	ldr	r7, [r4, #16]
 8008692:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	eb07 060a 	add.w	r6, r7, sl
 800869e:	42b3      	cmp	r3, r6
 80086a0:	b085      	sub	sp, #20
 80086a2:	bfb8      	it	lt
 80086a4:	3101      	addlt	r1, #1
 80086a6:	f7ff fedb 	bl	8008460 <_Balloc>
 80086aa:	b930      	cbnz	r0, 80086ba <__multiply+0x42>
 80086ac:	4602      	mov	r2, r0
 80086ae:	f240 115d 	movw	r1, #349	; 0x15d
 80086b2:	4b43      	ldr	r3, [pc, #268]	; (80087c0 <__multiply+0x148>)
 80086b4:	4843      	ldr	r0, [pc, #268]	; (80087c4 <__multiply+0x14c>)
 80086b6:	f000 fb55 	bl	8008d64 <__assert_func>
 80086ba:	f100 0514 	add.w	r5, r0, #20
 80086be:	462b      	mov	r3, r5
 80086c0:	2200      	movs	r2, #0
 80086c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086c6:	4543      	cmp	r3, r8
 80086c8:	d321      	bcc.n	800870e <__multiply+0x96>
 80086ca:	f104 0314 	add.w	r3, r4, #20
 80086ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086d2:	f109 0314 	add.w	r3, r9, #20
 80086d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086da:	9202      	str	r2, [sp, #8]
 80086dc:	1b3a      	subs	r2, r7, r4
 80086de:	3a15      	subs	r2, #21
 80086e0:	f022 0203 	bic.w	r2, r2, #3
 80086e4:	3204      	adds	r2, #4
 80086e6:	f104 0115 	add.w	r1, r4, #21
 80086ea:	428f      	cmp	r7, r1
 80086ec:	bf38      	it	cc
 80086ee:	2204      	movcc	r2, #4
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9a02      	ldr	r2, [sp, #8]
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d80c      	bhi.n	8008714 <__multiply+0x9c>
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	dd03      	ble.n	8008706 <__multiply+0x8e>
 80086fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008702:	2b00      	cmp	r3, #0
 8008704:	d059      	beq.n	80087ba <__multiply+0x142>
 8008706:	6106      	str	r6, [r0, #16]
 8008708:	b005      	add	sp, #20
 800870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870e:	f843 2b04 	str.w	r2, [r3], #4
 8008712:	e7d8      	b.n	80086c6 <__multiply+0x4e>
 8008714:	f8b3 a000 	ldrh.w	sl, [r3]
 8008718:	f1ba 0f00 	cmp.w	sl, #0
 800871c:	d023      	beq.n	8008766 <__multiply+0xee>
 800871e:	46a9      	mov	r9, r5
 8008720:	f04f 0c00 	mov.w	ip, #0
 8008724:	f104 0e14 	add.w	lr, r4, #20
 8008728:	f85e 2b04 	ldr.w	r2, [lr], #4
 800872c:	f8d9 1000 	ldr.w	r1, [r9]
 8008730:	fa1f fb82 	uxth.w	fp, r2
 8008734:	b289      	uxth	r1, r1
 8008736:	fb0a 110b 	mla	r1, sl, fp, r1
 800873a:	4461      	add	r1, ip
 800873c:	f8d9 c000 	ldr.w	ip, [r9]
 8008740:	0c12      	lsrs	r2, r2, #16
 8008742:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008746:	fb0a c202 	mla	r2, sl, r2, ip
 800874a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800874e:	b289      	uxth	r1, r1
 8008750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008754:	4577      	cmp	r7, lr
 8008756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875a:	f849 1b04 	str.w	r1, [r9], #4
 800875e:	d8e3      	bhi.n	8008728 <__multiply+0xb0>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	f845 c002 	str.w	ip, [r5, r2]
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	3304      	adds	r3, #4
 800876a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800876e:	f1b9 0f00 	cmp.w	r9, #0
 8008772:	d020      	beq.n	80087b6 <__multiply+0x13e>
 8008774:	46ae      	mov	lr, r5
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	6829      	ldr	r1, [r5, #0]
 800877c:	f104 0c14 	add.w	ip, r4, #20
 8008780:	f8bc b000 	ldrh.w	fp, [ip]
 8008784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008788:	b289      	uxth	r1, r1
 800878a:	fb09 220b 	mla	r2, r9, fp, r2
 800878e:	4492      	add	sl, r2
 8008790:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008794:	f84e 1b04 	str.w	r1, [lr], #4
 8008798:	f85c 2b04 	ldr.w	r2, [ip], #4
 800879c:	f8be 1000 	ldrh.w	r1, [lr]
 80087a0:	0c12      	lsrs	r2, r2, #16
 80087a2:	fb09 1102 	mla	r1, r9, r2, r1
 80087a6:	4567      	cmp	r7, ip
 80087a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087b0:	d8e6      	bhi.n	8008780 <__multiply+0x108>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	50a9      	str	r1, [r5, r2]
 80087b6:	3504      	adds	r5, #4
 80087b8:	e79b      	b.n	80086f2 <__multiply+0x7a>
 80087ba:	3e01      	subs	r6, #1
 80087bc:	e79d      	b.n	80086fa <__multiply+0x82>
 80087be:	bf00      	nop
 80087c0:	08009a70 	.word	0x08009a70
 80087c4:	08009a81 	.word	0x08009a81

080087c8 <__pow5mult>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4615      	mov	r5, r2
 80087ce:	f012 0203 	ands.w	r2, r2, #3
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	d007      	beq.n	80087e8 <__pow5mult+0x20>
 80087d8:	4c25      	ldr	r4, [pc, #148]	; (8008870 <__pow5mult+0xa8>)
 80087da:	3a01      	subs	r2, #1
 80087dc:	2300      	movs	r3, #0
 80087de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e2:	f7ff fe9f 	bl	8008524 <__multadd>
 80087e6:	4607      	mov	r7, r0
 80087e8:	10ad      	asrs	r5, r5, #2
 80087ea:	d03d      	beq.n	8008868 <__pow5mult+0xa0>
 80087ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087ee:	b97c      	cbnz	r4, 8008810 <__pow5mult+0x48>
 80087f0:	2010      	movs	r0, #16
 80087f2:	f7ff fe1f 	bl	8008434 <malloc>
 80087f6:	4602      	mov	r2, r0
 80087f8:	6270      	str	r0, [r6, #36]	; 0x24
 80087fa:	b928      	cbnz	r0, 8008808 <__pow5mult+0x40>
 80087fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008800:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <__pow5mult+0xac>)
 8008802:	481d      	ldr	r0, [pc, #116]	; (8008878 <__pow5mult+0xb0>)
 8008804:	f000 faae 	bl	8008d64 <__assert_func>
 8008808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800880c:	6004      	str	r4, [r0, #0]
 800880e:	60c4      	str	r4, [r0, #12]
 8008810:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008818:	b94c      	cbnz	r4, 800882e <__pow5mult+0x66>
 800881a:	f240 2171 	movw	r1, #625	; 0x271
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ff14 	bl	800864c <__i2b>
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	f8c8 0008 	str.w	r0, [r8, #8]
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	f04f 0900 	mov.w	r9, #0
 8008832:	07eb      	lsls	r3, r5, #31
 8008834:	d50a      	bpl.n	800884c <__pow5mult+0x84>
 8008836:	4639      	mov	r1, r7
 8008838:	4622      	mov	r2, r4
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ff1c 	bl	8008678 <__multiply>
 8008840:	4680      	mov	r8, r0
 8008842:	4639      	mov	r1, r7
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fe4b 	bl	80084e0 <_Bfree>
 800884a:	4647      	mov	r7, r8
 800884c:	106d      	asrs	r5, r5, #1
 800884e:	d00b      	beq.n	8008868 <__pow5mult+0xa0>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	b938      	cbnz	r0, 8008864 <__pow5mult+0x9c>
 8008854:	4622      	mov	r2, r4
 8008856:	4621      	mov	r1, r4
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ff0d 	bl	8008678 <__multiply>
 800885e:	6020      	str	r0, [r4, #0]
 8008860:	f8c0 9000 	str.w	r9, [r0]
 8008864:	4604      	mov	r4, r0
 8008866:	e7e4      	b.n	8008832 <__pow5mult+0x6a>
 8008868:	4638      	mov	r0, r7
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	bf00      	nop
 8008870:	08009bd0 	.word	0x08009bd0
 8008874:	080099fe 	.word	0x080099fe
 8008878:	08009a81 	.word	0x08009a81

0800887c <__lshift>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	4607      	mov	r7, r0
 8008884:	4691      	mov	r9, r2
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6849      	ldr	r1, [r1, #4]
 800888a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008894:	f108 0601 	add.w	r6, r8, #1
 8008898:	42b3      	cmp	r3, r6
 800889a:	db0b      	blt.n	80088b4 <__lshift+0x38>
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff fddf 	bl	8008460 <_Balloc>
 80088a2:	4605      	mov	r5, r0
 80088a4:	b948      	cbnz	r0, 80088ba <__lshift+0x3e>
 80088a6:	4602      	mov	r2, r0
 80088a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088ac:	4b29      	ldr	r3, [pc, #164]	; (8008954 <__lshift+0xd8>)
 80088ae:	482a      	ldr	r0, [pc, #168]	; (8008958 <__lshift+0xdc>)
 80088b0:	f000 fa58 	bl	8008d64 <__assert_func>
 80088b4:	3101      	adds	r1, #1
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	e7ee      	b.n	8008898 <__lshift+0x1c>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f100 0114 	add.w	r1, r0, #20
 80088c0:	f100 0210 	add.w	r2, r0, #16
 80088c4:	4618      	mov	r0, r3
 80088c6:	4553      	cmp	r3, sl
 80088c8:	db37      	blt.n	800893a <__lshift+0xbe>
 80088ca:	6920      	ldr	r0, [r4, #16]
 80088cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088d0:	f104 0314 	add.w	r3, r4, #20
 80088d4:	f019 091f 	ands.w	r9, r9, #31
 80088d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088e0:	d02f      	beq.n	8008942 <__lshift+0xc6>
 80088e2:	468a      	mov	sl, r1
 80088e4:	f04f 0c00 	mov.w	ip, #0
 80088e8:	f1c9 0e20 	rsb	lr, r9, #32
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	fa02 f209 	lsl.w	r2, r2, r9
 80088f2:	ea42 020c 	orr.w	r2, r2, ip
 80088f6:	f84a 2b04 	str.w	r2, [sl], #4
 80088fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fe:	4298      	cmp	r0, r3
 8008900:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008904:	d8f2      	bhi.n	80088ec <__lshift+0x70>
 8008906:	1b03      	subs	r3, r0, r4
 8008908:	3b15      	subs	r3, #21
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	3304      	adds	r3, #4
 8008910:	f104 0215 	add.w	r2, r4, #21
 8008914:	4290      	cmp	r0, r2
 8008916:	bf38      	it	cc
 8008918:	2304      	movcc	r3, #4
 800891a:	f841 c003 	str.w	ip, [r1, r3]
 800891e:	f1bc 0f00 	cmp.w	ip, #0
 8008922:	d001      	beq.n	8008928 <__lshift+0xac>
 8008924:	f108 0602 	add.w	r6, r8, #2
 8008928:	3e01      	subs	r6, #1
 800892a:	4638      	mov	r0, r7
 800892c:	4621      	mov	r1, r4
 800892e:	612e      	str	r6, [r5, #16]
 8008930:	f7ff fdd6 	bl	80084e0 <_Bfree>
 8008934:	4628      	mov	r0, r5
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	f842 0f04 	str.w	r0, [r2, #4]!
 800893e:	3301      	adds	r3, #1
 8008940:	e7c1      	b.n	80088c6 <__lshift+0x4a>
 8008942:	3904      	subs	r1, #4
 8008944:	f853 2b04 	ldr.w	r2, [r3], #4
 8008948:	4298      	cmp	r0, r3
 800894a:	f841 2f04 	str.w	r2, [r1, #4]!
 800894e:	d8f9      	bhi.n	8008944 <__lshift+0xc8>
 8008950:	e7ea      	b.n	8008928 <__lshift+0xac>
 8008952:	bf00      	nop
 8008954:	08009a70 	.word	0x08009a70
 8008958:	08009a81 	.word	0x08009a81

0800895c <__mcmp>:
 800895c:	4603      	mov	r3, r0
 800895e:	690a      	ldr	r2, [r1, #16]
 8008960:	6900      	ldr	r0, [r0, #16]
 8008962:	b530      	push	{r4, r5, lr}
 8008964:	1a80      	subs	r0, r0, r2
 8008966:	d10d      	bne.n	8008984 <__mcmp+0x28>
 8008968:	3314      	adds	r3, #20
 800896a:	3114      	adds	r1, #20
 800896c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008970:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800897c:	4295      	cmp	r5, r2
 800897e:	d002      	beq.n	8008986 <__mcmp+0x2a>
 8008980:	d304      	bcc.n	800898c <__mcmp+0x30>
 8008982:	2001      	movs	r0, #1
 8008984:	bd30      	pop	{r4, r5, pc}
 8008986:	42a3      	cmp	r3, r4
 8008988:	d3f4      	bcc.n	8008974 <__mcmp+0x18>
 800898a:	e7fb      	b.n	8008984 <__mcmp+0x28>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008990:	e7f8      	b.n	8008984 <__mcmp+0x28>
	...

08008994 <__mdiff>:
 8008994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	460d      	mov	r5, r1
 800899a:	4607      	mov	r7, r0
 800899c:	4611      	mov	r1, r2
 800899e:	4628      	mov	r0, r5
 80089a0:	4614      	mov	r4, r2
 80089a2:	f7ff ffdb 	bl	800895c <__mcmp>
 80089a6:	1e06      	subs	r6, r0, #0
 80089a8:	d111      	bne.n	80089ce <__mdiff+0x3a>
 80089aa:	4631      	mov	r1, r6
 80089ac:	4638      	mov	r0, r7
 80089ae:	f7ff fd57 	bl	8008460 <_Balloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	b928      	cbnz	r0, 80089c2 <__mdiff+0x2e>
 80089b6:	f240 2132 	movw	r1, #562	; 0x232
 80089ba:	4b3a      	ldr	r3, [pc, #232]	; (8008aa4 <__mdiff+0x110>)
 80089bc:	483a      	ldr	r0, [pc, #232]	; (8008aa8 <__mdiff+0x114>)
 80089be:	f000 f9d1 	bl	8008d64 <__assert_func>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089c8:	4610      	mov	r0, r2
 80089ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	bfa4      	itt	ge
 80089d0:	4623      	movge	r3, r4
 80089d2:	462c      	movge	r4, r5
 80089d4:	4638      	mov	r0, r7
 80089d6:	6861      	ldr	r1, [r4, #4]
 80089d8:	bfa6      	itte	ge
 80089da:	461d      	movge	r5, r3
 80089dc:	2600      	movge	r6, #0
 80089de:	2601      	movlt	r6, #1
 80089e0:	f7ff fd3e 	bl	8008460 <_Balloc>
 80089e4:	4602      	mov	r2, r0
 80089e6:	b918      	cbnz	r0, 80089f0 <__mdiff+0x5c>
 80089e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089ec:	4b2d      	ldr	r3, [pc, #180]	; (8008aa4 <__mdiff+0x110>)
 80089ee:	e7e5      	b.n	80089bc <__mdiff+0x28>
 80089f0:	f102 0814 	add.w	r8, r2, #20
 80089f4:	46c2      	mov	sl, r8
 80089f6:	f04f 0c00 	mov.w	ip, #0
 80089fa:	6927      	ldr	r7, [r4, #16]
 80089fc:	60c6      	str	r6, [r0, #12]
 80089fe:	692e      	ldr	r6, [r5, #16]
 8008a00:	f104 0014 	add.w	r0, r4, #20
 8008a04:	f105 0914 	add.w	r9, r5, #20
 8008a08:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a10:	3410      	adds	r4, #16
 8008a12:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a16:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a1a:	fa1f f18b 	uxth.w	r1, fp
 8008a1e:	448c      	add	ip, r1
 8008a20:	b299      	uxth	r1, r3
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	ebac 0101 	sub.w	r1, ip, r1
 8008a28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a2c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a30:	b289      	uxth	r1, r1
 8008a32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a36:	454e      	cmp	r6, r9
 8008a38:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a3c:	f84a 3b04 	str.w	r3, [sl], #4
 8008a40:	d8e7      	bhi.n	8008a12 <__mdiff+0x7e>
 8008a42:	1b73      	subs	r3, r6, r5
 8008a44:	3b15      	subs	r3, #21
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	3515      	adds	r5, #21
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	42ae      	cmp	r6, r5
 8008a50:	bf38      	it	cc
 8008a52:	2304      	movcc	r3, #4
 8008a54:	4418      	add	r0, r3
 8008a56:	4443      	add	r3, r8
 8008a58:	461e      	mov	r6, r3
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	4575      	cmp	r5, lr
 8008a5e:	d30e      	bcc.n	8008a7e <__mdiff+0xea>
 8008a60:	f10e 0103 	add.w	r1, lr, #3
 8008a64:	1a09      	subs	r1, r1, r0
 8008a66:	f021 0103 	bic.w	r1, r1, #3
 8008a6a:	3803      	subs	r0, #3
 8008a6c:	4586      	cmp	lr, r0
 8008a6e:	bf38      	it	cc
 8008a70:	2100      	movcc	r1, #0
 8008a72:	4419      	add	r1, r3
 8008a74:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a78:	b18b      	cbz	r3, 8008a9e <__mdiff+0x10a>
 8008a7a:	6117      	str	r7, [r2, #16]
 8008a7c:	e7a4      	b.n	80089c8 <__mdiff+0x34>
 8008a7e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a82:	fa1f f188 	uxth.w	r1, r8
 8008a86:	4461      	add	r1, ip
 8008a88:	140c      	asrs	r4, r1, #16
 8008a8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a8e:	b289      	uxth	r1, r1
 8008a90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a94:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008a98:	f846 1b04 	str.w	r1, [r6], #4
 8008a9c:	e7de      	b.n	8008a5c <__mdiff+0xc8>
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	e7e8      	b.n	8008a74 <__mdiff+0xe0>
 8008aa2:	bf00      	nop
 8008aa4:	08009a70 	.word	0x08009a70
 8008aa8:	08009a81 	.word	0x08009a81

08008aac <__d2b>:
 8008aac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008ab6:	4690      	mov	r8, r2
 8008ab8:	461d      	mov	r5, r3
 8008aba:	f7ff fcd1 	bl	8008460 <_Balloc>
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b930      	cbnz	r0, 8008ad0 <__d2b+0x24>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	f240 310a 	movw	r1, #778	; 0x30a
 8008ac8:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <__d2b+0xb0>)
 8008aca:	4825      	ldr	r0, [pc, #148]	; (8008b60 <__d2b+0xb4>)
 8008acc:	f000 f94a 	bl	8008d64 <__assert_func>
 8008ad0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008ad4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008ad8:	bb2d      	cbnz	r5, 8008b26 <__d2b+0x7a>
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f1b8 0300 	subs.w	r3, r8, #0
 8008ae0:	d026      	beq.n	8008b30 <__d2b+0x84>
 8008ae2:	4668      	mov	r0, sp
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	f7ff fd83 	bl	80085f0 <__lo0bits>
 8008aea:	9900      	ldr	r1, [sp, #0]
 8008aec:	b1f0      	cbz	r0, 8008b2c <__d2b+0x80>
 8008aee:	9a01      	ldr	r2, [sp, #4]
 8008af0:	f1c0 0320 	rsb	r3, r0, #32
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	430b      	orrs	r3, r1
 8008afa:	40c2      	lsrs	r2, r0
 8008afc:	6163      	str	r3, [r4, #20]
 8008afe:	9201      	str	r2, [sp, #4]
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bf14      	ite	ne
 8008b06:	2102      	movne	r1, #2
 8008b08:	2101      	moveq	r1, #1
 8008b0a:	61a3      	str	r3, [r4, #24]
 8008b0c:	6121      	str	r1, [r4, #16]
 8008b0e:	b1c5      	cbz	r5, 8008b42 <__d2b+0x96>
 8008b10:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b14:	4405      	add	r5, r0
 8008b16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b1a:	603d      	str	r5, [r7, #0]
 8008b1c:	6030      	str	r0, [r6, #0]
 8008b1e:	4620      	mov	r0, r4
 8008b20:	b002      	add	sp, #8
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2a:	e7d6      	b.n	8008ada <__d2b+0x2e>
 8008b2c:	6161      	str	r1, [r4, #20]
 8008b2e:	e7e7      	b.n	8008b00 <__d2b+0x54>
 8008b30:	a801      	add	r0, sp, #4
 8008b32:	f7ff fd5d 	bl	80085f0 <__lo0bits>
 8008b36:	2101      	movs	r1, #1
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	6121      	str	r1, [r4, #16]
 8008b3c:	6163      	str	r3, [r4, #20]
 8008b3e:	3020      	adds	r0, #32
 8008b40:	e7e5      	b.n	8008b0e <__d2b+0x62>
 8008b42:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b4a:	6038      	str	r0, [r7, #0]
 8008b4c:	6918      	ldr	r0, [r3, #16]
 8008b4e:	f7ff fd2f 	bl	80085b0 <__hi0bits>
 8008b52:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	e7e1      	b.n	8008b1e <__d2b+0x72>
 8008b5a:	bf00      	nop
 8008b5c:	08009a70 	.word	0x08009a70
 8008b60:	08009a81 	.word	0x08009a81

08008b64 <_calloc_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	fba1 5402 	umull	r5, r4, r1, r2
 8008b6a:	b934      	cbnz	r4, 8008b7a <_calloc_r+0x16>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f000 f875 	bl	8008c5c <_malloc_r>
 8008b72:	4606      	mov	r6, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <_calloc_r+0x1e>
 8008b76:	4630      	mov	r0, r6
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	220c      	movs	r2, #12
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	6002      	str	r2, [r0, #0]
 8008b80:	e7f9      	b.n	8008b76 <_calloc_r+0x12>
 8008b82:	462a      	mov	r2, r5
 8008b84:	4621      	mov	r1, r4
 8008b86:	f7fe f8d3 	bl	8006d30 <memset>
 8008b8a:	e7f4      	b.n	8008b76 <_calloc_r+0x12>

08008b8c <_free_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4605      	mov	r5, r0
 8008b90:	2900      	cmp	r1, #0
 8008b92:	d040      	beq.n	8008c16 <_free_r+0x8a>
 8008b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b98:	1f0c      	subs	r4, r1, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfb8      	it	lt
 8008b9e:	18e4      	addlt	r4, r4, r3
 8008ba0:	f000 f922 	bl	8008de8 <__malloc_lock>
 8008ba4:	4a1c      	ldr	r2, [pc, #112]	; (8008c18 <_free_r+0x8c>)
 8008ba6:	6813      	ldr	r3, [r2, #0]
 8008ba8:	b933      	cbnz	r3, 8008bb8 <_free_r+0x2c>
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	6014      	str	r4, [r2, #0]
 8008bae:	4628      	mov	r0, r5
 8008bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb4:	f000 b91e 	b.w	8008df4 <__malloc_unlock>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d908      	bls.n	8008bce <_free_r+0x42>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	1821      	adds	r1, r4, r0
 8008bc0:	428b      	cmp	r3, r1
 8008bc2:	bf01      	itttt	eq
 8008bc4:	6819      	ldreq	r1, [r3, #0]
 8008bc6:	685b      	ldreq	r3, [r3, #4]
 8008bc8:	1809      	addeq	r1, r1, r0
 8008bca:	6021      	streq	r1, [r4, #0]
 8008bcc:	e7ed      	b.n	8008baa <_free_r+0x1e>
 8008bce:	461a      	mov	r2, r3
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	b10b      	cbz	r3, 8008bd8 <_free_r+0x4c>
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d9fa      	bls.n	8008bce <_free_r+0x42>
 8008bd8:	6811      	ldr	r1, [r2, #0]
 8008bda:	1850      	adds	r0, r2, r1
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d10b      	bne.n	8008bf8 <_free_r+0x6c>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	4401      	add	r1, r0
 8008be4:	1850      	adds	r0, r2, r1
 8008be6:	4283      	cmp	r3, r0
 8008be8:	6011      	str	r1, [r2, #0]
 8008bea:	d1e0      	bne.n	8008bae <_free_r+0x22>
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4401      	add	r1, r0
 8008bf2:	6011      	str	r1, [r2, #0]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	e7da      	b.n	8008bae <_free_r+0x22>
 8008bf8:	d902      	bls.n	8008c00 <_free_r+0x74>
 8008bfa:	230c      	movs	r3, #12
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	e7d6      	b.n	8008bae <_free_r+0x22>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	6054      	str	r4, [r2, #4]
 8008c14:	e7cb      	b.n	8008bae <_free_r+0x22>
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	200004c8 	.word	0x200004c8

08008c1c <sbrk_aligned>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4e0e      	ldr	r6, [pc, #56]	; (8008c58 <sbrk_aligned+0x3c>)
 8008c20:	460c      	mov	r4, r1
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	4605      	mov	r5, r0
 8008c26:	b911      	cbnz	r1, 8008c2e <sbrk_aligned+0x12>
 8008c28:	f000 f88c 	bl	8008d44 <_sbrk_r>
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f887 	bl	8008d44 <_sbrk_r>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d00a      	beq.n	8008c50 <sbrk_aligned+0x34>
 8008c3a:	1cc4      	adds	r4, r0, #3
 8008c3c:	f024 0403 	bic.w	r4, r4, #3
 8008c40:	42a0      	cmp	r0, r4
 8008c42:	d007      	beq.n	8008c54 <sbrk_aligned+0x38>
 8008c44:	1a21      	subs	r1, r4, r0
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f87c 	bl	8008d44 <_sbrk_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d101      	bne.n	8008c54 <sbrk_aligned+0x38>
 8008c50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	200004cc 	.word	0x200004cc

08008c5c <_malloc_r>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	1ccd      	adds	r5, r1, #3
 8008c62:	f025 0503 	bic.w	r5, r5, #3
 8008c66:	3508      	adds	r5, #8
 8008c68:	2d0c      	cmp	r5, #12
 8008c6a:	bf38      	it	cc
 8008c6c:	250c      	movcc	r5, #12
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	4607      	mov	r7, r0
 8008c72:	db01      	blt.n	8008c78 <_malloc_r+0x1c>
 8008c74:	42a9      	cmp	r1, r5
 8008c76:	d905      	bls.n	8008c84 <_malloc_r+0x28>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	603b      	str	r3, [r7, #0]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	4e2e      	ldr	r6, [pc, #184]	; (8008d40 <_malloc_r+0xe4>)
 8008c86:	f000 f8af 	bl	8008de8 <__malloc_lock>
 8008c8a:	6833      	ldr	r3, [r6, #0]
 8008c8c:	461c      	mov	r4, r3
 8008c8e:	bb34      	cbnz	r4, 8008cde <_malloc_r+0x82>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff ffc2 	bl	8008c1c <sbrk_aligned>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	d14d      	bne.n	8008d3a <_malloc_r+0xde>
 8008c9e:	6834      	ldr	r4, [r6, #0]
 8008ca0:	4626      	mov	r6, r4
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d140      	bne.n	8008d28 <_malloc_r+0xcc>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4638      	mov	r0, r7
 8008cac:	eb04 0803 	add.w	r8, r4, r3
 8008cb0:	f000 f848 	bl	8008d44 <_sbrk_r>
 8008cb4:	4580      	cmp	r8, r0
 8008cb6:	d13a      	bne.n	8008d2e <_malloc_r+0xd2>
 8008cb8:	6821      	ldr	r1, [r4, #0]
 8008cba:	3503      	adds	r5, #3
 8008cbc:	1a6d      	subs	r5, r5, r1
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	4638      	mov	r0, r7
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff ffa5 	bl	8008c1c <sbrk_aligned>
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d02b      	beq.n	8008d2e <_malloc_r+0xd2>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	442b      	add	r3, r5
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e00e      	b.n	8008cfc <_malloc_r+0xa0>
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	1b52      	subs	r2, r2, r5
 8008ce2:	d41e      	bmi.n	8008d22 <_malloc_r+0xc6>
 8008ce4:	2a0b      	cmp	r2, #11
 8008ce6:	d916      	bls.n	8008d16 <_malloc_r+0xba>
 8008ce8:	1961      	adds	r1, r4, r5
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	6025      	str	r5, [r4, #0]
 8008cee:	bf18      	it	ne
 8008cf0:	6059      	strne	r1, [r3, #4]
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	bf08      	it	eq
 8008cf6:	6031      	streq	r1, [r6, #0]
 8008cf8:	5162      	str	r2, [r4, r5]
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f104 060b 	add.w	r6, r4, #11
 8008d02:	f000 f877 	bl	8008df4 <__malloc_unlock>
 8008d06:	f026 0607 	bic.w	r6, r6, #7
 8008d0a:	1d23      	adds	r3, r4, #4
 8008d0c:	1af2      	subs	r2, r6, r3
 8008d0e:	d0b6      	beq.n	8008c7e <_malloc_r+0x22>
 8008d10:	1b9b      	subs	r3, r3, r6
 8008d12:	50a3      	str	r3, [r4, r2]
 8008d14:	e7b3      	b.n	8008c7e <_malloc_r+0x22>
 8008d16:	6862      	ldr	r2, [r4, #4]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	bf0c      	ite	eq
 8008d1c:	6032      	streq	r2, [r6, #0]
 8008d1e:	605a      	strne	r2, [r3, #4]
 8008d20:	e7ec      	b.n	8008cfc <_malloc_r+0xa0>
 8008d22:	4623      	mov	r3, r4
 8008d24:	6864      	ldr	r4, [r4, #4]
 8008d26:	e7b2      	b.n	8008c8e <_malloc_r+0x32>
 8008d28:	4634      	mov	r4, r6
 8008d2a:	6876      	ldr	r6, [r6, #4]
 8008d2c:	e7b9      	b.n	8008ca2 <_malloc_r+0x46>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	4638      	mov	r0, r7
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f000 f85e 	bl	8008df4 <__malloc_unlock>
 8008d38:	e7a1      	b.n	8008c7e <_malloc_r+0x22>
 8008d3a:	6025      	str	r5, [r4, #0]
 8008d3c:	e7de      	b.n	8008cfc <_malloc_r+0xa0>
 8008d3e:	bf00      	nop
 8008d40:	200004c8 	.word	0x200004c8

08008d44 <_sbrk_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	2300      	movs	r3, #0
 8008d48:	4d05      	ldr	r5, [pc, #20]	; (8008d60 <_sbrk_r+0x1c>)
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f9 fa48 	bl	80021e4 <_sbrk>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_sbrk_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_sbrk_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200004d0 	.word	0x200004d0

08008d64 <__assert_func>:
 8008d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d66:	4614      	mov	r4, r2
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <__assert_func+0x2c>)
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68d8      	ldr	r0, [r3, #12]
 8008d72:	b14c      	cbz	r4, 8008d88 <__assert_func+0x24>
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <__assert_func+0x30>)
 8008d76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d7a:	9100      	str	r1, [sp, #0]
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	4906      	ldr	r1, [pc, #24]	; (8008d98 <__assert_func+0x34>)
 8008d80:	f000 f80e 	bl	8008da0 <fiprintf>
 8008d84:	f000 fa62 	bl	800924c <abort>
 8008d88:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <__assert_func+0x38>)
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	e7f3      	b.n	8008d76 <__assert_func+0x12>
 8008d8e:	bf00      	nop
 8008d90:	200000d0 	.word	0x200000d0
 8008d94:	08009bdc 	.word	0x08009bdc
 8008d98:	08009be9 	.word	0x08009be9
 8008d9c:	08009c17 	.word	0x08009c17

08008da0 <fiprintf>:
 8008da0:	b40e      	push	{r1, r2, r3}
 8008da2:	b503      	push	{r0, r1, lr}
 8008da4:	4601      	mov	r1, r0
 8008da6:	ab03      	add	r3, sp, #12
 8008da8:	4805      	ldr	r0, [pc, #20]	; (8008dc0 <fiprintf+0x20>)
 8008daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dae:	6800      	ldr	r0, [r0, #0]
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	f000 f84d 	bl	8008e50 <_vfiprintf_r>
 8008db6:	b002      	add	sp, #8
 8008db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dbc:	b003      	add	sp, #12
 8008dbe:	4770      	bx	lr
 8008dc0:	200000d0 	.word	0x200000d0

08008dc4 <__ascii_mbtowc>:
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	b901      	cbnz	r1, 8008dca <__ascii_mbtowc+0x6>
 8008dc8:	a901      	add	r1, sp, #4
 8008dca:	b142      	cbz	r2, 8008dde <__ascii_mbtowc+0x1a>
 8008dcc:	b14b      	cbz	r3, 8008de2 <__ascii_mbtowc+0x1e>
 8008dce:	7813      	ldrb	r3, [r2, #0]
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	1e10      	subs	r0, r2, #0
 8008dd6:	bf18      	it	ne
 8008dd8:	2001      	movne	r0, #1
 8008dda:	b002      	add	sp, #8
 8008ddc:	4770      	bx	lr
 8008dde:	4610      	mov	r0, r2
 8008de0:	e7fb      	b.n	8008dda <__ascii_mbtowc+0x16>
 8008de2:	f06f 0001 	mvn.w	r0, #1
 8008de6:	e7f8      	b.n	8008dda <__ascii_mbtowc+0x16>

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__malloc_lock+0x8>)
 8008dea:	f000 bbeb 	b.w	80095c4 <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	200004d4 	.word	0x200004d4

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f000 bbe6 	b.w	80095c6 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	200004d4 	.word	0x200004d4

08008e00 <__sfputc_r>:
 8008e00:	6893      	ldr	r3, [r2, #8]
 8008e02:	b410      	push	{r4}
 8008e04:	3b01      	subs	r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	6093      	str	r3, [r2, #8]
 8008e0a:	da07      	bge.n	8008e1c <__sfputc_r+0x1c>
 8008e0c:	6994      	ldr	r4, [r2, #24]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	db01      	blt.n	8008e16 <__sfputc_r+0x16>
 8008e12:	290a      	cmp	r1, #10
 8008e14:	d102      	bne.n	8008e1c <__sfputc_r+0x1c>
 8008e16:	bc10      	pop	{r4}
 8008e18:	f000 b94a 	b.w	80090b0 <__swbuf_r>
 8008e1c:	6813      	ldr	r3, [r2, #0]
 8008e1e:	1c58      	adds	r0, r3, #1
 8008e20:	6010      	str	r0, [r2, #0]
 8008e22:	7019      	strb	r1, [r3, #0]
 8008e24:	4608      	mov	r0, r1
 8008e26:	bc10      	pop	{r4}
 8008e28:	4770      	bx	lr

08008e2a <__sfputs_r>:
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	4614      	mov	r4, r2
 8008e32:	18d5      	adds	r5, r2, r3
 8008e34:	42ac      	cmp	r4, r5
 8008e36:	d101      	bne.n	8008e3c <__sfputs_r+0x12>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e007      	b.n	8008e4c <__sfputs_r+0x22>
 8008e3c:	463a      	mov	r2, r7
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e44:	f7ff ffdc 	bl	8008e00 <__sfputc_r>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d1f3      	bne.n	8008e34 <__sfputs_r+0xa>
 8008e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e50 <_vfiprintf_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	460d      	mov	r5, r1
 8008e56:	4614      	mov	r4, r2
 8008e58:	4698      	mov	r8, r3
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	b09d      	sub	sp, #116	; 0x74
 8008e5e:	b118      	cbz	r0, 8008e68 <_vfiprintf_r+0x18>
 8008e60:	6983      	ldr	r3, [r0, #24]
 8008e62:	b90b      	cbnz	r3, 8008e68 <_vfiprintf_r+0x18>
 8008e64:	f000 fb10 	bl	8009488 <__sinit>
 8008e68:	4b89      	ldr	r3, [pc, #548]	; (8009090 <_vfiprintf_r+0x240>)
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	d11b      	bne.n	8008ea6 <_vfiprintf_r+0x56>
 8008e6e:	6875      	ldr	r5, [r6, #4]
 8008e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	d405      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	059a      	lsls	r2, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_vfiprintf_r+0x32>
 8008e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7e:	f000 fba1 	bl	80095c4 <__retarget_lock_acquire_recursive>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	071b      	lsls	r3, r3, #28
 8008e86:	d501      	bpl.n	8008e8c <_vfiprintf_r+0x3c>
 8008e88:	692b      	ldr	r3, [r5, #16]
 8008e8a:	b9eb      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x78>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f000 f96e 	bl	8009170 <__swsetup_r>
 8008e94:	b1c0      	cbz	r0, 8008ec8 <_vfiprintf_r+0x78>
 8008e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e98:	07dc      	lsls	r4, r3, #31
 8008e9a:	d50e      	bpl.n	8008eba <_vfiprintf_r+0x6a>
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea0:	b01d      	add	sp, #116	; 0x74
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	4b7b      	ldr	r3, [pc, #492]	; (8009094 <_vfiprintf_r+0x244>)
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	d101      	bne.n	8008eb0 <_vfiprintf_r+0x60>
 8008eac:	68b5      	ldr	r5, [r6, #8]
 8008eae:	e7df      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eb0:	4b79      	ldr	r3, [pc, #484]	; (8009098 <_vfiprintf_r+0x248>)
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	bf08      	it	eq
 8008eb6:	68f5      	ldreq	r5, [r6, #12]
 8008eb8:	e7da      	b.n	8008e70 <_vfiprintf_r+0x20>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	0598      	lsls	r0, r3, #22
 8008ebe:	d4ed      	bmi.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f000 fb80 	bl	80095c6 <__retarget_lock_release_recursive>
 8008ec6:	e7e9      	b.n	8008e9c <_vfiprintf_r+0x4c>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ecc:	2320      	movs	r3, #32
 8008ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed2:	2330      	movs	r3, #48	; 0x30
 8008ed4:	f04f 0901 	mov.w	r9, #1
 8008ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008edc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800909c <_vfiprintf_r+0x24c>
 8008ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	469a      	mov	sl, r3
 8008ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eec:	b10a      	cbz	r2, 8008ef2 <_vfiprintf_r+0xa2>
 8008eee:	2a25      	cmp	r2, #37	; 0x25
 8008ef0:	d1f9      	bne.n	8008ee6 <_vfiprintf_r+0x96>
 8008ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef6:	d00b      	beq.n	8008f10 <_vfiprintf_r+0xc0>
 8008ef8:	465b      	mov	r3, fp
 8008efa:	4622      	mov	r2, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7ff ff93 	bl	8008e2a <__sfputs_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	f000 80aa 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f0c:	445a      	add	r2, fp
 8008f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f10:	f89a 3000 	ldrb.w	r3, [sl]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80a2 	beq.w	800905e <_vfiprintf_r+0x20e>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f24:	f10a 0a01 	add.w	sl, sl, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f30:	931a      	str	r3, [sp, #104]	; 0x68
 8008f32:	4654      	mov	r4, sl
 8008f34:	2205      	movs	r2, #5
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4858      	ldr	r0, [pc, #352]	; (800909c <_vfiprintf_r+0x24c>)
 8008f3c:	f7ff fa82 	bl	8008444 <memchr>
 8008f40:	9a04      	ldr	r2, [sp, #16]
 8008f42:	b9d8      	cbnz	r0, 8008f7c <_vfiprintf_r+0x12c>
 8008f44:	06d1      	lsls	r1, r2, #27
 8008f46:	bf44      	itt	mi
 8008f48:	2320      	movmi	r3, #32
 8008f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4e:	0713      	lsls	r3, r2, #28
 8008f50:	bf44      	itt	mi
 8008f52:	232b      	movmi	r3, #43	; 0x2b
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5e:	d015      	beq.n	8008f8c <_vfiprintf_r+0x13c>
 8008f60:	4654      	mov	r4, sl
 8008f62:	2000      	movs	r0, #0
 8008f64:	f04f 0c0a 	mov.w	ip, #10
 8008f68:	9a07      	ldr	r2, [sp, #28]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f70:	3b30      	subs	r3, #48	; 0x30
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d94e      	bls.n	8009014 <_vfiprintf_r+0x1c4>
 8008f76:	b1b0      	cbz	r0, 8008fa6 <_vfiprintf_r+0x156>
 8008f78:	9207      	str	r2, [sp, #28]
 8008f7a:	e014      	b.n	8008fa6 <_vfiprintf_r+0x156>
 8008f7c:	eba0 0308 	sub.w	r3, r0, r8
 8008f80:	fa09 f303 	lsl.w	r3, r9, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	46a2      	mov	sl, r4
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	e7d2      	b.n	8008f32 <_vfiprintf_r+0xe2>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d19      	adds	r1, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9103      	str	r1, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbb      	ittet	lt
 8008f98:	425b      	neglt	r3, r3
 8008f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9e:	9307      	strge	r3, [sp, #28]
 8008fa0:	9307      	strlt	r3, [sp, #28]
 8008fa2:	bfb8      	it	lt
 8008fa4:	9204      	strlt	r2, [sp, #16]
 8008fa6:	7823      	ldrb	r3, [r4, #0]
 8008fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8008faa:	d10c      	bne.n	8008fc6 <_vfiprintf_r+0x176>
 8008fac:	7863      	ldrb	r3, [r4, #1]
 8008fae:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb0:	d135      	bne.n	800901e <_vfiprintf_r+0x1ce>
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	3402      	adds	r4, #2
 8008fb6:	1d1a      	adds	r2, r3, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	9203      	str	r2, [sp, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	bfb8      	it	lt
 8008fc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80090a0 <_vfiprintf_r+0x250>
 8008fca:	2203      	movs	r2, #3
 8008fcc:	4650      	mov	r0, sl
 8008fce:	7821      	ldrb	r1, [r4, #0]
 8008fd0:	f7ff fa38 	bl	8008444 <memchr>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_vfiprintf_r+0x198>
 8008fd6:	2340      	movs	r3, #64	; 0x40
 8008fd8:	eba0 000a 	sub.w	r0, r0, sl
 8008fdc:	fa03 f000 	lsl.w	r0, r3, r0
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	3401      	adds	r4, #1
 8008fe4:	4303      	orrs	r3, r0
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	2206      	movs	r2, #6
 8008fee:	482d      	ldr	r0, [pc, #180]	; (80090a4 <_vfiprintf_r+0x254>)
 8008ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ff4:	f7ff fa26 	bl	8008444 <memchr>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d03f      	beq.n	800907c <_vfiprintf_r+0x22c>
 8008ffc:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <_vfiprintf_r+0x258>)
 8008ffe:	bb1b      	cbnz	r3, 8009048 <_vfiprintf_r+0x1f8>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	3307      	adds	r3, #7
 8009004:	f023 0307 	bic.w	r3, r3, #7
 8009008:	3308      	adds	r3, #8
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900e:	443b      	add	r3, r7
 8009010:	9309      	str	r3, [sp, #36]	; 0x24
 8009012:	e767      	b.n	8008ee4 <_vfiprintf_r+0x94>
 8009014:	460c      	mov	r4, r1
 8009016:	2001      	movs	r0, #1
 8009018:	fb0c 3202 	mla	r2, ip, r2, r3
 800901c:	e7a5      	b.n	8008f6a <_vfiprintf_r+0x11a>
 800901e:	2300      	movs	r3, #0
 8009020:	f04f 0c0a 	mov.w	ip, #10
 8009024:	4619      	mov	r1, r3
 8009026:	3401      	adds	r4, #1
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	4620      	mov	r0, r4
 800902c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009030:	3a30      	subs	r2, #48	; 0x30
 8009032:	2a09      	cmp	r2, #9
 8009034:	d903      	bls.n	800903e <_vfiprintf_r+0x1ee>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0c5      	beq.n	8008fc6 <_vfiprintf_r+0x176>
 800903a:	9105      	str	r1, [sp, #20]
 800903c:	e7c3      	b.n	8008fc6 <_vfiprintf_r+0x176>
 800903e:	4604      	mov	r4, r0
 8009040:	2301      	movs	r3, #1
 8009042:	fb0c 2101 	mla	r1, ip, r1, r2
 8009046:	e7f0      	b.n	800902a <_vfiprintf_r+0x1da>
 8009048:	ab03      	add	r3, sp, #12
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	462a      	mov	r2, r5
 800904e:	4630      	mov	r0, r6
 8009050:	4b16      	ldr	r3, [pc, #88]	; (80090ac <_vfiprintf_r+0x25c>)
 8009052:	a904      	add	r1, sp, #16
 8009054:	f7fd ff12 	bl	8006e7c <_printf_float>
 8009058:	4607      	mov	r7, r0
 800905a:	1c78      	adds	r0, r7, #1
 800905c:	d1d6      	bne.n	800900c <_vfiprintf_r+0x1bc>
 800905e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009060:	07d9      	lsls	r1, r3, #31
 8009062:	d405      	bmi.n	8009070 <_vfiprintf_r+0x220>
 8009064:	89ab      	ldrh	r3, [r5, #12]
 8009066:	059a      	lsls	r2, r3, #22
 8009068:	d402      	bmi.n	8009070 <_vfiprintf_r+0x220>
 800906a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906c:	f000 faab 	bl	80095c6 <__retarget_lock_release_recursive>
 8009070:	89ab      	ldrh	r3, [r5, #12]
 8009072:	065b      	lsls	r3, r3, #25
 8009074:	f53f af12 	bmi.w	8008e9c <_vfiprintf_r+0x4c>
 8009078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907a:	e711      	b.n	8008ea0 <_vfiprintf_r+0x50>
 800907c:	ab03      	add	r3, sp, #12
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	462a      	mov	r2, r5
 8009082:	4630      	mov	r0, r6
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <_vfiprintf_r+0x25c>)
 8009086:	a904      	add	r1, sp, #16
 8009088:	f7fe f994 	bl	80073b4 <_printf_i>
 800908c:	e7e4      	b.n	8009058 <_vfiprintf_r+0x208>
 800908e:	bf00      	nop
 8009090:	08009c54 	.word	0x08009c54
 8009094:	08009c74 	.word	0x08009c74
 8009098:	08009c34 	.word	0x08009c34
 800909c:	08009c22 	.word	0x08009c22
 80090a0:	08009c28 	.word	0x08009c28
 80090a4:	08009c2c 	.word	0x08009c2c
 80090a8:	08006e7d 	.word	0x08006e7d
 80090ac:	08008e2b 	.word	0x08008e2b

080090b0 <__swbuf_r>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	460e      	mov	r6, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	4605      	mov	r5, r0
 80090b8:	b118      	cbz	r0, 80090c2 <__swbuf_r+0x12>
 80090ba:	6983      	ldr	r3, [r0, #24]
 80090bc:	b90b      	cbnz	r3, 80090c2 <__swbuf_r+0x12>
 80090be:	f000 f9e3 	bl	8009488 <__sinit>
 80090c2:	4b21      	ldr	r3, [pc, #132]	; (8009148 <__swbuf_r+0x98>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	d12b      	bne.n	8009120 <__swbuf_r+0x70>
 80090c8:	686c      	ldr	r4, [r5, #4]
 80090ca:	69a3      	ldr	r3, [r4, #24]
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	071a      	lsls	r2, r3, #28
 80090d2:	d52f      	bpl.n	8009134 <__swbuf_r+0x84>
 80090d4:	6923      	ldr	r3, [r4, #16]
 80090d6:	b36b      	cbz	r3, 8009134 <__swbuf_r+0x84>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	6820      	ldr	r0, [r4, #0]
 80090dc:	b2f6      	uxtb	r6, r6
 80090de:	1ac0      	subs	r0, r0, r3
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	4637      	mov	r7, r6
 80090e4:	4283      	cmp	r3, r0
 80090e6:	dc04      	bgt.n	80090f2 <__swbuf_r+0x42>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 f938 	bl	8009360 <_fflush_r>
 80090f0:	bb30      	cbnz	r0, 8009140 <__swbuf_r+0x90>
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	3001      	adds	r0, #1
 80090f6:	3b01      	subs	r3, #1
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	6022      	str	r2, [r4, #0]
 8009100:	701e      	strb	r6, [r3, #0]
 8009102:	6963      	ldr	r3, [r4, #20]
 8009104:	4283      	cmp	r3, r0
 8009106:	d004      	beq.n	8009112 <__swbuf_r+0x62>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	07db      	lsls	r3, r3, #31
 800910c:	d506      	bpl.n	800911c <__swbuf_r+0x6c>
 800910e:	2e0a      	cmp	r6, #10
 8009110:	d104      	bne.n	800911c <__swbuf_r+0x6c>
 8009112:	4621      	mov	r1, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f000 f923 	bl	8009360 <_fflush_r>
 800911a:	b988      	cbnz	r0, 8009140 <__swbuf_r+0x90>
 800911c:	4638      	mov	r0, r7
 800911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <__swbuf_r+0x9c>)
 8009122:	429c      	cmp	r4, r3
 8009124:	d101      	bne.n	800912a <__swbuf_r+0x7a>
 8009126:	68ac      	ldr	r4, [r5, #8]
 8009128:	e7cf      	b.n	80090ca <__swbuf_r+0x1a>
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <__swbuf_r+0xa0>)
 800912c:	429c      	cmp	r4, r3
 800912e:	bf08      	it	eq
 8009130:	68ec      	ldreq	r4, [r5, #12]
 8009132:	e7ca      	b.n	80090ca <__swbuf_r+0x1a>
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f81a 	bl	8009170 <__swsetup_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0cb      	beq.n	80090d8 <__swbuf_r+0x28>
 8009140:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009144:	e7ea      	b.n	800911c <__swbuf_r+0x6c>
 8009146:	bf00      	nop
 8009148:	08009c54 	.word	0x08009c54
 800914c:	08009c74 	.word	0x08009c74
 8009150:	08009c34 	.word	0x08009c34

08009154 <__ascii_wctomb>:
 8009154:	4603      	mov	r3, r0
 8009156:	4608      	mov	r0, r1
 8009158:	b141      	cbz	r1, 800916c <__ascii_wctomb+0x18>
 800915a:	2aff      	cmp	r2, #255	; 0xff
 800915c:	d904      	bls.n	8009168 <__ascii_wctomb+0x14>
 800915e:	228a      	movs	r2, #138	; 0x8a
 8009160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	4770      	bx	lr
 8009168:	2001      	movs	r0, #1
 800916a:	700a      	strb	r2, [r1, #0]
 800916c:	4770      	bx	lr
	...

08009170 <__swsetup_r>:
 8009170:	4b32      	ldr	r3, [pc, #200]	; (800923c <__swsetup_r+0xcc>)
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	681d      	ldr	r5, [r3, #0]
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	b125      	cbz	r5, 8009186 <__swsetup_r+0x16>
 800917c:	69ab      	ldr	r3, [r5, #24]
 800917e:	b913      	cbnz	r3, 8009186 <__swsetup_r+0x16>
 8009180:	4628      	mov	r0, r5
 8009182:	f000 f981 	bl	8009488 <__sinit>
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <__swsetup_r+0xd0>)
 8009188:	429c      	cmp	r4, r3
 800918a:	d10f      	bne.n	80091ac <__swsetup_r+0x3c>
 800918c:	686c      	ldr	r4, [r5, #4]
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009194:	0719      	lsls	r1, r3, #28
 8009196:	d42c      	bmi.n	80091f2 <__swsetup_r+0x82>
 8009198:	06dd      	lsls	r5, r3, #27
 800919a:	d411      	bmi.n	80091c0 <__swsetup_r+0x50>
 800919c:	2309      	movs	r3, #9
 800919e:	6033      	str	r3, [r6, #0]
 80091a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	e03e      	b.n	800922a <__swsetup_r+0xba>
 80091ac:	4b25      	ldr	r3, [pc, #148]	; (8009244 <__swsetup_r+0xd4>)
 80091ae:	429c      	cmp	r4, r3
 80091b0:	d101      	bne.n	80091b6 <__swsetup_r+0x46>
 80091b2:	68ac      	ldr	r4, [r5, #8]
 80091b4:	e7eb      	b.n	800918e <__swsetup_r+0x1e>
 80091b6:	4b24      	ldr	r3, [pc, #144]	; (8009248 <__swsetup_r+0xd8>)
 80091b8:	429c      	cmp	r4, r3
 80091ba:	bf08      	it	eq
 80091bc:	68ec      	ldreq	r4, [r5, #12]
 80091be:	e7e6      	b.n	800918e <__swsetup_r+0x1e>
 80091c0:	0758      	lsls	r0, r3, #29
 80091c2:	d512      	bpl.n	80091ea <__swsetup_r+0x7a>
 80091c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c6:	b141      	cbz	r1, 80091da <__swsetup_r+0x6a>
 80091c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <__swsetup_r+0x66>
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff fcdb 	bl	8008b8c <_free_r>
 80091d6:	2300      	movs	r3, #0
 80091d8:	6363      	str	r3, [r4, #52]	; 0x34
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	2300      	movs	r3, #0
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0308 	orr.w	r3, r3, #8
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	b94b      	cbnz	r3, 800920a <__swsetup_r+0x9a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009200:	d003      	beq.n	800920a <__swsetup_r+0x9a>
 8009202:	4621      	mov	r1, r4
 8009204:	4630      	mov	r0, r6
 8009206:	f000 fa05 	bl	8009614 <__smakebuf_r>
 800920a:	89a0      	ldrh	r0, [r4, #12]
 800920c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009210:	f010 0301 	ands.w	r3, r0, #1
 8009214:	d00a      	beq.n	800922c <__swsetup_r+0xbc>
 8009216:	2300      	movs	r3, #0
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	425b      	negs	r3, r3
 800921e:	61a3      	str	r3, [r4, #24]
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	b943      	cbnz	r3, 8009236 <__swsetup_r+0xc6>
 8009224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009228:	d1ba      	bne.n	80091a0 <__swsetup_r+0x30>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	0781      	lsls	r1, r0, #30
 800922e:	bf58      	it	pl
 8009230:	6963      	ldrpl	r3, [r4, #20]
 8009232:	60a3      	str	r3, [r4, #8]
 8009234:	e7f4      	b.n	8009220 <__swsetup_r+0xb0>
 8009236:	2000      	movs	r0, #0
 8009238:	e7f7      	b.n	800922a <__swsetup_r+0xba>
 800923a:	bf00      	nop
 800923c:	200000d0 	.word	0x200000d0
 8009240:	08009c54 	.word	0x08009c54
 8009244:	08009c74 	.word	0x08009c74
 8009248:	08009c34 	.word	0x08009c34

0800924c <abort>:
 800924c:	2006      	movs	r0, #6
 800924e:	b508      	push	{r3, lr}
 8009250:	f000 fa48 	bl	80096e4 <raise>
 8009254:	2001      	movs	r0, #1
 8009256:	f7f8 ff6e 	bl	8002136 <_exit>
	...

0800925c <__sflush_r>:
 800925c:	898a      	ldrh	r2, [r1, #12]
 800925e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009260:	4605      	mov	r5, r0
 8009262:	0710      	lsls	r0, r2, #28
 8009264:	460c      	mov	r4, r1
 8009266:	d457      	bmi.n	8009318 <__sflush_r+0xbc>
 8009268:	684b      	ldr	r3, [r1, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	dc04      	bgt.n	8009278 <__sflush_r+0x1c>
 800926e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	dc01      	bgt.n	8009278 <__sflush_r+0x1c>
 8009274:	2000      	movs	r0, #0
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800927a:	2e00      	cmp	r6, #0
 800927c:	d0fa      	beq.n	8009274 <__sflush_r+0x18>
 800927e:	2300      	movs	r3, #0
 8009280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009284:	682f      	ldr	r7, [r5, #0]
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	d032      	beq.n	80092f0 <__sflush_r+0x94>
 800928a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	075a      	lsls	r2, r3, #29
 8009290:	d505      	bpl.n	800929e <__sflush_r+0x42>
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	1ac0      	subs	r0, r0, r3
 8009296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009298:	b10b      	cbz	r3, 800929e <__sflush_r+0x42>
 800929a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800929c:	1ac0      	subs	r0, r0, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	4602      	mov	r2, r0
 80092a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092a4:	4628      	mov	r0, r5
 80092a6:	6a21      	ldr	r1, [r4, #32]
 80092a8:	47b0      	blx	r6
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	d106      	bne.n	80092be <__sflush_r+0x62>
 80092b0:	6829      	ldr	r1, [r5, #0]
 80092b2:	291d      	cmp	r1, #29
 80092b4:	d82c      	bhi.n	8009310 <__sflush_r+0xb4>
 80092b6:	4a29      	ldr	r2, [pc, #164]	; (800935c <__sflush_r+0x100>)
 80092b8:	40ca      	lsrs	r2, r1
 80092ba:	07d6      	lsls	r6, r2, #31
 80092bc:	d528      	bpl.n	8009310 <__sflush_r+0xb4>
 80092be:	2200      	movs	r2, #0
 80092c0:	6062      	str	r2, [r4, #4]
 80092c2:	6922      	ldr	r2, [r4, #16]
 80092c4:	04d9      	lsls	r1, r3, #19
 80092c6:	6022      	str	r2, [r4, #0]
 80092c8:	d504      	bpl.n	80092d4 <__sflush_r+0x78>
 80092ca:	1c42      	adds	r2, r0, #1
 80092cc:	d101      	bne.n	80092d2 <__sflush_r+0x76>
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	b903      	cbnz	r3, 80092d4 <__sflush_r+0x78>
 80092d2:	6560      	str	r0, [r4, #84]	; 0x54
 80092d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092d6:	602f      	str	r7, [r5, #0]
 80092d8:	2900      	cmp	r1, #0
 80092da:	d0cb      	beq.n	8009274 <__sflush_r+0x18>
 80092dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092e0:	4299      	cmp	r1, r3
 80092e2:	d002      	beq.n	80092ea <__sflush_r+0x8e>
 80092e4:	4628      	mov	r0, r5
 80092e6:	f7ff fc51 	bl	8008b8c <_free_r>
 80092ea:	2000      	movs	r0, #0
 80092ec:	6360      	str	r0, [r4, #52]	; 0x34
 80092ee:	e7c2      	b.n	8009276 <__sflush_r+0x1a>
 80092f0:	6a21      	ldr	r1, [r4, #32]
 80092f2:	2301      	movs	r3, #1
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b0      	blx	r6
 80092f8:	1c41      	adds	r1, r0, #1
 80092fa:	d1c7      	bne.n	800928c <__sflush_r+0x30>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0c4      	beq.n	800928c <__sflush_r+0x30>
 8009302:	2b1d      	cmp	r3, #29
 8009304:	d001      	beq.n	800930a <__sflush_r+0xae>
 8009306:	2b16      	cmp	r3, #22
 8009308:	d101      	bne.n	800930e <__sflush_r+0xb2>
 800930a:	602f      	str	r7, [r5, #0]
 800930c:	e7b2      	b.n	8009274 <__sflush_r+0x18>
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	e7ae      	b.n	8009276 <__sflush_r+0x1a>
 8009318:	690f      	ldr	r7, [r1, #16]
 800931a:	2f00      	cmp	r7, #0
 800931c:	d0aa      	beq.n	8009274 <__sflush_r+0x18>
 800931e:	0793      	lsls	r3, r2, #30
 8009320:	bf18      	it	ne
 8009322:	2300      	movne	r3, #0
 8009324:	680e      	ldr	r6, [r1, #0]
 8009326:	bf08      	it	eq
 8009328:	694b      	ldreq	r3, [r1, #20]
 800932a:	1bf6      	subs	r6, r6, r7
 800932c:	600f      	str	r7, [r1, #0]
 800932e:	608b      	str	r3, [r1, #8]
 8009330:	2e00      	cmp	r6, #0
 8009332:	dd9f      	ble.n	8009274 <__sflush_r+0x18>
 8009334:	4633      	mov	r3, r6
 8009336:	463a      	mov	r2, r7
 8009338:	4628      	mov	r0, r5
 800933a:	6a21      	ldr	r1, [r4, #32]
 800933c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009340:	47e0      	blx	ip
 8009342:	2800      	cmp	r0, #0
 8009344:	dc06      	bgt.n	8009354 <__sflush_r+0xf8>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800934c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	e790      	b.n	8009276 <__sflush_r+0x1a>
 8009354:	4407      	add	r7, r0
 8009356:	1a36      	subs	r6, r6, r0
 8009358:	e7ea      	b.n	8009330 <__sflush_r+0xd4>
 800935a:	bf00      	nop
 800935c:	20400001 	.word	0x20400001

08009360 <_fflush_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	690b      	ldr	r3, [r1, #16]
 8009364:	4605      	mov	r5, r0
 8009366:	460c      	mov	r4, r1
 8009368:	b913      	cbnz	r3, 8009370 <_fflush_r+0x10>
 800936a:	2500      	movs	r5, #0
 800936c:	4628      	mov	r0, r5
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	b118      	cbz	r0, 800937a <_fflush_r+0x1a>
 8009372:	6983      	ldr	r3, [r0, #24]
 8009374:	b90b      	cbnz	r3, 800937a <_fflush_r+0x1a>
 8009376:	f000 f887 	bl	8009488 <__sinit>
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <_fflush_r+0x6c>)
 800937c:	429c      	cmp	r4, r3
 800937e:	d11b      	bne.n	80093b8 <_fflush_r+0x58>
 8009380:	686c      	ldr	r4, [r5, #4]
 8009382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0ef      	beq.n	800936a <_fflush_r+0xa>
 800938a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800938c:	07d0      	lsls	r0, r2, #31
 800938e:	d404      	bmi.n	800939a <_fflush_r+0x3a>
 8009390:	0599      	lsls	r1, r3, #22
 8009392:	d402      	bmi.n	800939a <_fflush_r+0x3a>
 8009394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009396:	f000 f915 	bl	80095c4 <__retarget_lock_acquire_recursive>
 800939a:	4628      	mov	r0, r5
 800939c:	4621      	mov	r1, r4
 800939e:	f7ff ff5d 	bl	800925c <__sflush_r>
 80093a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093a4:	4605      	mov	r5, r0
 80093a6:	07da      	lsls	r2, r3, #31
 80093a8:	d4e0      	bmi.n	800936c <_fflush_r+0xc>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	059b      	lsls	r3, r3, #22
 80093ae:	d4dd      	bmi.n	800936c <_fflush_r+0xc>
 80093b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093b2:	f000 f908 	bl	80095c6 <__retarget_lock_release_recursive>
 80093b6:	e7d9      	b.n	800936c <_fflush_r+0xc>
 80093b8:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <_fflush_r+0x70>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d101      	bne.n	80093c2 <_fflush_r+0x62>
 80093be:	68ac      	ldr	r4, [r5, #8]
 80093c0:	e7df      	b.n	8009382 <_fflush_r+0x22>
 80093c2:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <_fflush_r+0x74>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	bf08      	it	eq
 80093c8:	68ec      	ldreq	r4, [r5, #12]
 80093ca:	e7da      	b.n	8009382 <_fflush_r+0x22>
 80093cc:	08009c54 	.word	0x08009c54
 80093d0:	08009c74 	.word	0x08009c74
 80093d4:	08009c34 	.word	0x08009c34

080093d8 <std>:
 80093d8:	2300      	movs	r3, #0
 80093da:	b510      	push	{r4, lr}
 80093dc:	4604      	mov	r4, r0
 80093de:	e9c0 3300 	strd	r3, r3, [r0]
 80093e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093e6:	6083      	str	r3, [r0, #8]
 80093e8:	8181      	strh	r1, [r0, #12]
 80093ea:	6643      	str	r3, [r0, #100]	; 0x64
 80093ec:	81c2      	strh	r2, [r0, #14]
 80093ee:	6183      	str	r3, [r0, #24]
 80093f0:	4619      	mov	r1, r3
 80093f2:	2208      	movs	r2, #8
 80093f4:	305c      	adds	r0, #92	; 0x5c
 80093f6:	f7fd fc9b 	bl	8006d30 <memset>
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <std+0x38>)
 80093fc:	6224      	str	r4, [r4, #32]
 80093fe:	6263      	str	r3, [r4, #36]	; 0x24
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <std+0x3c>)
 8009402:	62a3      	str	r3, [r4, #40]	; 0x28
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <std+0x40>)
 8009406:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <std+0x44>)
 800940a:	6323      	str	r3, [r4, #48]	; 0x30
 800940c:	bd10      	pop	{r4, pc}
 800940e:	bf00      	nop
 8009410:	0800971d 	.word	0x0800971d
 8009414:	0800973f 	.word	0x0800973f
 8009418:	08009777 	.word	0x08009777
 800941c:	0800979b 	.word	0x0800979b

08009420 <_cleanup_r>:
 8009420:	4901      	ldr	r1, [pc, #4]	; (8009428 <_cleanup_r+0x8>)
 8009422:	f000 b8af 	b.w	8009584 <_fwalk_reent>
 8009426:	bf00      	nop
 8009428:	08009361 	.word	0x08009361

0800942c <__sfmoreglue>:
 800942c:	2268      	movs	r2, #104	; 0x68
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	1e4d      	subs	r5, r1, #1
 8009432:	4355      	muls	r5, r2
 8009434:	460e      	mov	r6, r1
 8009436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800943a:	f7ff fc0f 	bl	8008c5c <_malloc_r>
 800943e:	4604      	mov	r4, r0
 8009440:	b140      	cbz	r0, 8009454 <__sfmoreglue+0x28>
 8009442:	2100      	movs	r1, #0
 8009444:	e9c0 1600 	strd	r1, r6, [r0]
 8009448:	300c      	adds	r0, #12
 800944a:	60a0      	str	r0, [r4, #8]
 800944c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009450:	f7fd fc6e 	bl	8006d30 <memset>
 8009454:	4620      	mov	r0, r4
 8009456:	bd70      	pop	{r4, r5, r6, pc}

08009458 <__sfp_lock_acquire>:
 8009458:	4801      	ldr	r0, [pc, #4]	; (8009460 <__sfp_lock_acquire+0x8>)
 800945a:	f000 b8b3 	b.w	80095c4 <__retarget_lock_acquire_recursive>
 800945e:	bf00      	nop
 8009460:	200004d5 	.word	0x200004d5

08009464 <__sfp_lock_release>:
 8009464:	4801      	ldr	r0, [pc, #4]	; (800946c <__sfp_lock_release+0x8>)
 8009466:	f000 b8ae 	b.w	80095c6 <__retarget_lock_release_recursive>
 800946a:	bf00      	nop
 800946c:	200004d5 	.word	0x200004d5

08009470 <__sinit_lock_acquire>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__sinit_lock_acquire+0x8>)
 8009472:	f000 b8a7 	b.w	80095c4 <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	200004d6 	.word	0x200004d6

0800947c <__sinit_lock_release>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__sinit_lock_release+0x8>)
 800947e:	f000 b8a2 	b.w	80095c6 <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	200004d6 	.word	0x200004d6

08009488 <__sinit>:
 8009488:	b510      	push	{r4, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	f7ff fff0 	bl	8009470 <__sinit_lock_acquire>
 8009490:	69a3      	ldr	r3, [r4, #24]
 8009492:	b11b      	cbz	r3, 800949c <__sinit+0x14>
 8009494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009498:	f7ff bff0 	b.w	800947c <__sinit_lock_release>
 800949c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094a0:	6523      	str	r3, [r4, #80]	; 0x50
 80094a2:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <__sinit+0x68>)
 80094a4:	4a13      	ldr	r2, [pc, #76]	; (80094f4 <__sinit+0x6c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094aa:	42a3      	cmp	r3, r4
 80094ac:	bf08      	it	eq
 80094ae:	2301      	moveq	r3, #1
 80094b0:	4620      	mov	r0, r4
 80094b2:	bf08      	it	eq
 80094b4:	61a3      	streq	r3, [r4, #24]
 80094b6:	f000 f81f 	bl	80094f8 <__sfp>
 80094ba:	6060      	str	r0, [r4, #4]
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 f81b 	bl	80094f8 <__sfp>
 80094c2:	60a0      	str	r0, [r4, #8]
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 f817 	bl	80094f8 <__sfp>
 80094ca:	2200      	movs	r2, #0
 80094cc:	2104      	movs	r1, #4
 80094ce:	60e0      	str	r0, [r4, #12]
 80094d0:	6860      	ldr	r0, [r4, #4]
 80094d2:	f7ff ff81 	bl	80093d8 <std>
 80094d6:	2201      	movs	r2, #1
 80094d8:	2109      	movs	r1, #9
 80094da:	68a0      	ldr	r0, [r4, #8]
 80094dc:	f7ff ff7c 	bl	80093d8 <std>
 80094e0:	2202      	movs	r2, #2
 80094e2:	2112      	movs	r1, #18
 80094e4:	68e0      	ldr	r0, [r4, #12]
 80094e6:	f7ff ff77 	bl	80093d8 <std>
 80094ea:	2301      	movs	r3, #1
 80094ec:	61a3      	str	r3, [r4, #24]
 80094ee:	e7d1      	b.n	8009494 <__sinit+0xc>
 80094f0:	080098b8 	.word	0x080098b8
 80094f4:	08009421 	.word	0x08009421

080094f8 <__sfp>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	4607      	mov	r7, r0
 80094fc:	f7ff ffac 	bl	8009458 <__sfp_lock_acquire>
 8009500:	4b1e      	ldr	r3, [pc, #120]	; (800957c <__sfp+0x84>)
 8009502:	681e      	ldr	r6, [r3, #0]
 8009504:	69b3      	ldr	r3, [r6, #24]
 8009506:	b913      	cbnz	r3, 800950e <__sfp+0x16>
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff ffbd 	bl	8009488 <__sinit>
 800950e:	3648      	adds	r6, #72	; 0x48
 8009510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009514:	3b01      	subs	r3, #1
 8009516:	d503      	bpl.n	8009520 <__sfp+0x28>
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	b30b      	cbz	r3, 8009560 <__sfp+0x68>
 800951c:	6836      	ldr	r6, [r6, #0]
 800951e:	e7f7      	b.n	8009510 <__sfp+0x18>
 8009520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009524:	b9d5      	cbnz	r5, 800955c <__sfp+0x64>
 8009526:	4b16      	ldr	r3, [pc, #88]	; (8009580 <__sfp+0x88>)
 8009528:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800952c:	60e3      	str	r3, [r4, #12]
 800952e:	6665      	str	r5, [r4, #100]	; 0x64
 8009530:	f000 f847 	bl	80095c2 <__retarget_lock_init_recursive>
 8009534:	f7ff ff96 	bl	8009464 <__sfp_lock_release>
 8009538:	2208      	movs	r2, #8
 800953a:	4629      	mov	r1, r5
 800953c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009540:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009544:	6025      	str	r5, [r4, #0]
 8009546:	61a5      	str	r5, [r4, #24]
 8009548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800954c:	f7fd fbf0 	bl	8006d30 <memset>
 8009550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009558:	4620      	mov	r0, r4
 800955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955c:	3468      	adds	r4, #104	; 0x68
 800955e:	e7d9      	b.n	8009514 <__sfp+0x1c>
 8009560:	2104      	movs	r1, #4
 8009562:	4638      	mov	r0, r7
 8009564:	f7ff ff62 	bl	800942c <__sfmoreglue>
 8009568:	4604      	mov	r4, r0
 800956a:	6030      	str	r0, [r6, #0]
 800956c:	2800      	cmp	r0, #0
 800956e:	d1d5      	bne.n	800951c <__sfp+0x24>
 8009570:	f7ff ff78 	bl	8009464 <__sfp_lock_release>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	e7ee      	b.n	8009558 <__sfp+0x60>
 800957a:	bf00      	nop
 800957c:	080098b8 	.word	0x080098b8
 8009580:	ffff0001 	.word	0xffff0001

08009584 <_fwalk_reent>:
 8009584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009588:	4606      	mov	r6, r0
 800958a:	4688      	mov	r8, r1
 800958c:	2700      	movs	r7, #0
 800958e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009596:	f1b9 0901 	subs.w	r9, r9, #1
 800959a:	d505      	bpl.n	80095a8 <_fwalk_reent+0x24>
 800959c:	6824      	ldr	r4, [r4, #0]
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d1f7      	bne.n	8009592 <_fwalk_reent+0xe>
 80095a2:	4638      	mov	r0, r7
 80095a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a8:	89ab      	ldrh	r3, [r5, #12]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d907      	bls.n	80095be <_fwalk_reent+0x3a>
 80095ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095b2:	3301      	adds	r3, #1
 80095b4:	d003      	beq.n	80095be <_fwalk_reent+0x3a>
 80095b6:	4629      	mov	r1, r5
 80095b8:	4630      	mov	r0, r6
 80095ba:	47c0      	blx	r8
 80095bc:	4307      	orrs	r7, r0
 80095be:	3568      	adds	r5, #104	; 0x68
 80095c0:	e7e9      	b.n	8009596 <_fwalk_reent+0x12>

080095c2 <__retarget_lock_init_recursive>:
 80095c2:	4770      	bx	lr

080095c4 <__retarget_lock_acquire_recursive>:
 80095c4:	4770      	bx	lr

080095c6 <__retarget_lock_release_recursive>:
 80095c6:	4770      	bx	lr

080095c8 <__swhatbuf_r>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	460e      	mov	r6, r1
 80095cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d0:	4614      	mov	r4, r2
 80095d2:	2900      	cmp	r1, #0
 80095d4:	461d      	mov	r5, r3
 80095d6:	b096      	sub	sp, #88	; 0x58
 80095d8:	da08      	bge.n	80095ec <__swhatbuf_r+0x24>
 80095da:	2200      	movs	r2, #0
 80095dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095e0:	602a      	str	r2, [r5, #0]
 80095e2:	061a      	lsls	r2, r3, #24
 80095e4:	d410      	bmi.n	8009608 <__swhatbuf_r+0x40>
 80095e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ea:	e00e      	b.n	800960a <__swhatbuf_r+0x42>
 80095ec:	466a      	mov	r2, sp
 80095ee:	f000 f8fb 	bl	80097e8 <_fstat_r>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	dbf1      	blt.n	80095da <__swhatbuf_r+0x12>
 80095f6:	9a01      	ldr	r2, [sp, #4]
 80095f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009600:	425a      	negs	r2, r3
 8009602:	415a      	adcs	r2, r3
 8009604:	602a      	str	r2, [r5, #0]
 8009606:	e7ee      	b.n	80095e6 <__swhatbuf_r+0x1e>
 8009608:	2340      	movs	r3, #64	; 0x40
 800960a:	2000      	movs	r0, #0
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	b016      	add	sp, #88	; 0x58
 8009610:	bd70      	pop	{r4, r5, r6, pc}
	...

08009614 <__smakebuf_r>:
 8009614:	898b      	ldrh	r3, [r1, #12]
 8009616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009618:	079d      	lsls	r5, r3, #30
 800961a:	4606      	mov	r6, r0
 800961c:	460c      	mov	r4, r1
 800961e:	d507      	bpl.n	8009630 <__smakebuf_r+0x1c>
 8009620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	6123      	str	r3, [r4, #16]
 8009628:	2301      	movs	r3, #1
 800962a:	6163      	str	r3, [r4, #20]
 800962c:	b002      	add	sp, #8
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	466a      	mov	r2, sp
 8009632:	ab01      	add	r3, sp, #4
 8009634:	f7ff ffc8 	bl	80095c8 <__swhatbuf_r>
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	4605      	mov	r5, r0
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff fb0d 	bl	8008c5c <_malloc_r>
 8009642:	b948      	cbnz	r0, 8009658 <__smakebuf_r+0x44>
 8009644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009648:	059a      	lsls	r2, r3, #22
 800964a:	d4ef      	bmi.n	800962c <__smakebuf_r+0x18>
 800964c:	f023 0303 	bic.w	r3, r3, #3
 8009650:	f043 0302 	orr.w	r3, r3, #2
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	e7e3      	b.n	8009620 <__smakebuf_r+0xc>
 8009658:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <__smakebuf_r+0x7c>)
 800965a:	62b3      	str	r3, [r6, #40]	; 0x28
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	6020      	str	r0, [r4, #0]
 8009660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	9b00      	ldr	r3, [sp, #0]
 8009668:	6120      	str	r0, [r4, #16]
 800966a:	6163      	str	r3, [r4, #20]
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	b15b      	cbz	r3, 8009688 <__smakebuf_r+0x74>
 8009670:	4630      	mov	r0, r6
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	f000 f8c9 	bl	800980c <_isatty_r>
 800967a:	b128      	cbz	r0, 8009688 <__smakebuf_r+0x74>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f023 0303 	bic.w	r3, r3, #3
 8009682:	f043 0301 	orr.w	r3, r3, #1
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	89a0      	ldrh	r0, [r4, #12]
 800968a:	4305      	orrs	r5, r0
 800968c:	81a5      	strh	r5, [r4, #12]
 800968e:	e7cd      	b.n	800962c <__smakebuf_r+0x18>
 8009690:	08009421 	.word	0x08009421

08009694 <_raise_r>:
 8009694:	291f      	cmp	r1, #31
 8009696:	b538      	push	{r3, r4, r5, lr}
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	d904      	bls.n	80096a8 <_raise_r+0x14>
 800969e:	2316      	movs	r3, #22
 80096a0:	6003      	str	r3, [r0, #0]
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096aa:	b112      	cbz	r2, 80096b2 <_raise_r+0x1e>
 80096ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096b0:	b94b      	cbnz	r3, 80096c6 <_raise_r+0x32>
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f830 	bl	8009718 <_getpid_r>
 80096b8:	462a      	mov	r2, r5
 80096ba:	4601      	mov	r1, r0
 80096bc:	4620      	mov	r0, r4
 80096be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c2:	f000 b817 	b.w	80096f4 <_kill_r>
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d00a      	beq.n	80096e0 <_raise_r+0x4c>
 80096ca:	1c59      	adds	r1, r3, #1
 80096cc:	d103      	bne.n	80096d6 <_raise_r+0x42>
 80096ce:	2316      	movs	r3, #22
 80096d0:	6003      	str	r3, [r0, #0]
 80096d2:	2001      	movs	r0, #1
 80096d4:	e7e7      	b.n	80096a6 <_raise_r+0x12>
 80096d6:	2400      	movs	r4, #0
 80096d8:	4628      	mov	r0, r5
 80096da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096de:	4798      	blx	r3
 80096e0:	2000      	movs	r0, #0
 80096e2:	e7e0      	b.n	80096a6 <_raise_r+0x12>

080096e4 <raise>:
 80096e4:	4b02      	ldr	r3, [pc, #8]	; (80096f0 <raise+0xc>)
 80096e6:	4601      	mov	r1, r0
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	f7ff bfd3 	b.w	8009694 <_raise_r>
 80096ee:	bf00      	nop
 80096f0:	200000d0 	.word	0x200000d0

080096f4 <_kill_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	2300      	movs	r3, #0
 80096f8:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_kill_r+0x20>)
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	4611      	mov	r1, r2
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	f7f8 fd08 	bl	8002116 <_kill>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d102      	bne.n	8009710 <_kill_r+0x1c>
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	b103      	cbz	r3, 8009710 <_kill_r+0x1c>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	bd38      	pop	{r3, r4, r5, pc}
 8009712:	bf00      	nop
 8009714:	200004d0 	.word	0x200004d0

08009718 <_getpid_r>:
 8009718:	f7f8 bcf6 	b.w	8002108 <_getpid>

0800971c <__sread>:
 800971c:	b510      	push	{r4, lr}
 800971e:	460c      	mov	r4, r1
 8009720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009724:	f000 f894 	bl	8009850 <_read_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	bfab      	itete	ge
 800972c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800972e:	89a3      	ldrhlt	r3, [r4, #12]
 8009730:	181b      	addge	r3, r3, r0
 8009732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009736:	bfac      	ite	ge
 8009738:	6563      	strge	r3, [r4, #84]	; 0x54
 800973a:	81a3      	strhlt	r3, [r4, #12]
 800973c:	bd10      	pop	{r4, pc}

0800973e <__swrite>:
 800973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009742:	461f      	mov	r7, r3
 8009744:	898b      	ldrh	r3, [r1, #12]
 8009746:	4605      	mov	r5, r0
 8009748:	05db      	lsls	r3, r3, #23
 800974a:	460c      	mov	r4, r1
 800974c:	4616      	mov	r6, r2
 800974e:	d505      	bpl.n	800975c <__swrite+0x1e>
 8009750:	2302      	movs	r3, #2
 8009752:	2200      	movs	r2, #0
 8009754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009758:	f000 f868 	bl	800982c <_lseek_r>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	4632      	mov	r2, r6
 8009760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	4628      	mov	r0, r5
 8009768:	463b      	mov	r3, r7
 800976a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	f000 b817 	b.w	80097a4 <_write_r>

08009776 <__sseek>:
 8009776:	b510      	push	{r4, lr}
 8009778:	460c      	mov	r4, r1
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 f855 	bl	800982c <_lseek_r>
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	bf15      	itete	ne
 8009788:	6560      	strne	r0, [r4, #84]	; 0x54
 800978a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800978e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009792:	81a3      	strheq	r3, [r4, #12]
 8009794:	bf18      	it	ne
 8009796:	81a3      	strhne	r3, [r4, #12]
 8009798:	bd10      	pop	{r4, pc}

0800979a <__sclose>:
 800979a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979e:	f000 b813 	b.w	80097c8 <_close_r>
	...

080097a4 <_write_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	2200      	movs	r2, #0
 80097ae:	4d05      	ldr	r5, [pc, #20]	; (80097c4 <_write_r+0x20>)
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f7f7 fe4e 	bl	8001454 <_write>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_write_r+0x1e>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_write_r+0x1e>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	200004d0 	.word	0x200004d0

080097c8 <_close_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	2300      	movs	r3, #0
 80097cc:	4d05      	ldr	r5, [pc, #20]	; (80097e4 <_close_r+0x1c>)
 80097ce:	4604      	mov	r4, r0
 80097d0:	4608      	mov	r0, r1
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	f7f8 fcd6 	bl	8002184 <_close>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_close_r+0x1a>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_close_r+0x1a>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	200004d0 	.word	0x200004d0

080097e8 <_fstat_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	2300      	movs	r3, #0
 80097ec:	4d06      	ldr	r5, [pc, #24]	; (8009808 <_fstat_r+0x20>)
 80097ee:	4604      	mov	r4, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	4611      	mov	r1, r2
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	f7f8 fcd0 	bl	800219a <_fstat>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d102      	bne.n	8009804 <_fstat_r+0x1c>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	b103      	cbz	r3, 8009804 <_fstat_r+0x1c>
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	bd38      	pop	{r3, r4, r5, pc}
 8009806:	bf00      	nop
 8009808:	200004d0 	.word	0x200004d0

0800980c <_isatty_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	2300      	movs	r3, #0
 8009810:	4d05      	ldr	r5, [pc, #20]	; (8009828 <_isatty_r+0x1c>)
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7f8 fcce 	bl	80021b8 <_isatty>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_isatty_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_isatty_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200004d0 	.word	0x200004d0

0800982c <_lseek_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	2200      	movs	r2, #0
 8009836:	4d05      	ldr	r5, [pc, #20]	; (800984c <_lseek_r+0x20>)
 8009838:	602a      	str	r2, [r5, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f7f8 fcc6 	bl	80021cc <_lseek>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_lseek_r+0x1e>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_lseek_r+0x1e>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	200004d0 	.word	0x200004d0

08009850 <_read_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	4611      	mov	r1, r2
 8009858:	2200      	movs	r2, #0
 800985a:	4d05      	ldr	r5, [pc, #20]	; (8009870 <_read_r+0x20>)
 800985c:	602a      	str	r2, [r5, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f7f8 fc73 	bl	800214a <_read>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d102      	bne.n	800986e <_read_r+0x1e>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	b103      	cbz	r3, 800986e <_read_r+0x1e>
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	200004d0 	.word	0x200004d0

08009874 <_init>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	bf00      	nop
 8009878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987a:	bc08      	pop	{r3}
 800987c:	469e      	mov	lr, r3
 800987e:	4770      	bx	lr

08009880 <_fini>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr
