
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d40  08004d40  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d40  08004d40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08004db8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004db8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001349a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002619  00000000  00000000  00033533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00036d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195e5  00000000  00000000  00037e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f73  00000000  00000000  00051445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f81  00000000  00000000  000653b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000f938c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c6c 	.word	0x08004c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c6c 	.word	0x08004c6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ICM_readBytes>:
#include "stm32f103xb.h"
#include "main.h"
#include <string.h>

void ICM_readBytes(I2C_HandleTypeDef *hi2c2, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af02      	add	r7, sp, #8
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607a      	str	r2, [r7, #4]
 8000166:	461a      	mov	r2, r3
 8000168:	460b      	mov	r3, r1
 800016a:	72fb      	strb	r3, [r7, #11]
 800016c:	4613      	mov	r3, r2
 800016e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000170:	7afb      	ldrb	r3, [r7, #11]
 8000172:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000176:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8000178:	7afb      	ldrb	r3, [r7, #11]
 800017a:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c2,ICM20948_ADDRESS << 1,Trans,1,1000);
 800017c:	f107 0214 	add.w	r2, r7, #20
 8000180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000184:	9300      	str	r3, [sp, #0]
 8000186:	2301      	movs	r3, #1
 8000188:	21d0      	movs	r1, #208	; 0xd0
 800018a:	68f8      	ldr	r0, [r7, #12]
 800018c:	f001 fe64 	bl	8001e58 <HAL_I2C_Master_Transmit>
 8000190:	4603      	mov	r3, r0
 8000192:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c2,ICM20948_ADDRESS << 1,pData,Size,1000);
 8000194:	893b      	ldrh	r3, [r7, #8]
 8000196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800019a:	9200      	str	r2, [sp, #0]
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	21d0      	movs	r1, #208	; 0xd0
 80001a0:	68f8      	ldr	r0, [r7, #12]
 80001a2:	f001 ff57 	bl	8002054 <HAL_I2C_Master_Receive>
 80001a6:	4603      	mov	r3, r0
 80001a8:	75fb      	strb	r3, [r7, #23]
}
 80001aa:	bf00      	nop
 80001ac:	3718      	adds	r7, #24
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}

080001b2 <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c2,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c2, uint8_t reg, uint8_t* pData) // ***
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b088      	sub	sp, #32
 80001b6:	af02      	add	r7, sp, #8
 80001b8:	60f8      	str	r0, [r7, #12]
 80001ba:	460b      	mov	r3, r1
 80001bc:	607a      	str	r2, [r7, #4]
 80001be:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 80001c0:	7afb      	ldrb	r3, [r7, #11]
 80001c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001c6:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 80001c8:	7afb      	ldrb	r3, [r7, #11]
 80001ca:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c2,ICM20948_ADDRESS << 1,Trans,1,1000);
 80001cc:	f107 0214 	add.w	r2, r7, #20
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	21d0      	movs	r1, #208	; 0xd0
 80001da:	68f8      	ldr	r0, [r7, #12]
 80001dc:	f001 fe3c 	bl	8001e58 <HAL_I2C_Master_Transmit>
 80001e0:	4603      	mov	r3, r0
 80001e2:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c2,ICM20948_ADDRESS << 1,pData,1,1000);
 80001e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2301      	movs	r3, #1
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	21d0      	movs	r1, #208	; 0xd0
 80001f0:	68f8      	ldr	r0, [r7, #12]
 80001f2:	f001 ff2f 	bl	8002054 <HAL_I2C_Master_Receive>
 80001f6:	4603      	mov	r3, r0
 80001f8:	75fb      	strb	r3, [r7, #23]
}
 80001fa:	bf00      	nop
 80001fc:	3718      	adds	r7, #24
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c2, uint8_t reg, uint8_t Data) // ***
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b086      	sub	sp, #24
 8000206:	af02      	add	r7, sp, #8
 8000208:	6078      	str	r0, [r7, #4]
 800020a:	460b      	mov	r3, r1
 800020c:	70fb      	strb	r3, [r7, #3]
 800020e:	4613      	mov	r3, r2
 8000210:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8000212:	78fb      	ldrb	r3, [r7, #3]
 8000214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000218:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 800021a:	78fb      	ldrb	r3, [r7, #3]
 800021c:	733b      	strb	r3, [r7, #12]
 800021e:	78bb      	ldrb	r3, [r7, #2]
 8000220:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c2,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8000222:	f107 020c 	add.w	r2, r7, #12
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2302      	movs	r3, #2
 800022e:	21d0      	movs	r1, #208	; 0xd0
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f001 fe11 	bl	8001e58 <HAL_I2C_Master_Transmit>
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c2, uint8_t reg,uint8_t value)
  {
 800023e:	b580      	push	{r7, lr}
 8000240:	b082      	sub	sp, #8
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	460b      	mov	r3, r1
 8000248:	70fb      	strb	r3, [r7, #3]
 800024a:	4613      	mov	r3, r2
 800024c:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c2, 0x7F, 0x30);
 800024e:	2230      	movs	r2, #48	; 0x30
 8000250:	217f      	movs	r1, #127	; 0x7f
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f7ff ffd5 	bl	8000202 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 ffe9 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x03 ,0x0C);//mode: write
 800025e:	220c      	movs	r2, #12
 8000260:	2103      	movs	r1, #3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f7ff ffcd 	bl	8000202 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f000 ffe1 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x04 ,reg);//set reg addr
 800026e:	78fb      	ldrb	r3, [r7, #3]
 8000270:	461a      	mov	r2, r3
 8000272:	2104      	movs	r1, #4
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f7ff ffc4 	bl	8000202 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 ffd8 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x06 ,value);//send value
 8000280:	78bb      	ldrb	r3, [r7, #2]
 8000282:	461a      	mov	r2, r3
 8000284:	2106      	movs	r1, #6
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ffbb 	bl	8000202 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f000 ffcf 	bl	8001230 <HAL_Delay>
  }
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c2, uint8_t reg)
  {
 800029a:	b580      	push	{r7, lr}
 800029c:	b084      	sub	sp, #16
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
 80002a2:	460b      	mov	r3, r1
 80002a4:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c2, 0x7F, 0x30);
 80002a6:	2230      	movs	r2, #48	; 0x30
 80002a8:	217f      	movs	r1, #127	; 0x7f
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f7ff ffa9 	bl	8000202 <ICM_WriteOneByte>
    HAL_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 ffbd 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x03 ,0x0C|0x80);
 80002b6:	228c      	movs	r2, #140	; 0x8c
 80002b8:	2103      	movs	r1, #3
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f7ff ffa1 	bl	8000202 <ICM_WriteOneByte>
    HAL_Delay(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 ffb5 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x04 ,reg);// set reg addr
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	461a      	mov	r2, r3
 80002ca:	2104      	movs	r1, #4
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f7ff ff98 	bl	8000202 <ICM_WriteOneByte>
    HAL_Delay(1);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 ffac 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x06 ,0xff);//read
 80002d8:	22ff      	movs	r2, #255	; 0xff
 80002da:	2106      	movs	r1, #6
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ff90 	bl	8000202 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 ffa4 	bl	8001230 <HAL_Delay>
  	ICM_WriteOneByte(hi2c2, 0x7F, 0x00);
 80002e8:	2200      	movs	r2, #0
 80002ea:	217f      	movs	r1, #127	; 0x7f
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff88 	bl	8000202 <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c2, 0x3B,&Data);
 80002f2:	f107 030f 	add.w	r3, r7, #15
 80002f6:	461a      	mov	r2, r3
 80002f8:	213b      	movs	r1, #59	; 0x3b
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f7ff ff59 	bl	80001b2 <ICM_ReadOneByte>
    HAL_Delay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 ff95 	bl	8001230 <HAL_Delay>
  	return Data;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000308:	4618      	mov	r0, r3
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c2, int16_t magn[3]) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(hi2c2, 0x01);
 800031a:	2101      	movs	r1, #1
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f7ff ffbc 	bl	800029a <ICM_Mag_Read>
 8000322:	4603      	mov	r3, r0
 8000324:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(hi2c2, 0x11);
 8000326:	2111      	movs	r1, #17
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ffb6 	bl	800029a <ICM_Mag_Read>
 800032e:	4603      	mov	r3, r0
 8000330:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(hi2c2, 0x12);
 8000332:	2112      	movs	r1, #18
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ffb0 	bl	800029a <ICM_Mag_Read>
 800033a:	4603      	mov	r3, r0
 800033c:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 800033e:	7b7b      	ldrb	r3, [r7, #13]
 8000340:	b21a      	sxth	r2, r3
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	021b      	lsls	r3, r3, #8
 8000346:	b21b      	sxth	r3, r3
 8000348:	4313      	orrs	r3, r2
 800034a:	b21a      	sxth	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(hi2c2, 0x13);
 8000350:	2113      	movs	r1, #19
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f7ff ffa1 	bl	800029a <ICM_Mag_Read>
 8000358:	4603      	mov	r3, r0
 800035a:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(hi2c2, 0x14);
 800035c:	2114      	movs	r1, #20
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff9b 	bl	800029a <ICM_Mag_Read>
 8000364:	4603      	mov	r3, r0
 8000366:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	b219      	sxth	r1, r3
 800036c:	7c3b      	ldrb	r3, [r7, #16]
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	b21a      	sxth	r2, r3
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	3302      	adds	r3, #2
 8000376:	430a      	orrs	r2, r1
 8000378:	b212      	sxth	r2, r2
 800037a:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(hi2c2, 0x15);
 800037c:	2115      	movs	r1, #21
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff8b 	bl	800029a <ICM_Mag_Read>
 8000384:	4603      	mov	r3, r0
 8000386:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(hi2c2, 0x16);
 8000388:	2116      	movs	r1, #22
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f7ff ff85 	bl	800029a <ICM_Mag_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8000394:	7c7b      	ldrb	r3, [r7, #17]
 8000396:	b219      	sxth	r1, r3
 8000398:	7cbb      	ldrb	r3, [r7, #18]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21a      	sxth	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	3304      	adds	r3, #4
 80003a2:	430a      	orrs	r2, r1
 80003a4:	b212      	sxth	r2, r2
 80003a6:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(hi2c2, 0x31,0x01);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2131      	movs	r1, #49	; 0x31
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff46 	bl	800023e <i2c_Mag_write>
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c2) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b084      	sub	sp, #16
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
//	char uart_buffer[200];
//	uint8_t whoami = 0xEA;
	uint8_t test = ICM_WHOAMI(hi2c2);
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f000 f95f 	bl	8000686 <ICM_WHOAMI>
 80003c8:	4603      	mov	r3, r0
 80003ca:	73fb      	strb	r3, [r7, #15]
	//if (test == whoami) {
//		ICM_CSHigh();
		HAL_Delay(10);
 80003cc:	200a      	movs	r0, #10
 80003ce:	f000 ff2f 	bl	8001230 <HAL_Delay>
		ICM_SelectBank(hi2c2, USER_BANK_0);
 80003d2:	2100      	movs	r1, #0
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f90f 	bl	80005f8 <ICM_SelectBank>
		HAL_Delay(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f000 ff28 	bl	8001230 <HAL_Delay>
		ICM_Disable_I2C(hi2c2);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 f919 	bl	8000618 <ICM_Disable_I2C>
		HAL_Delay(10);
 80003e6:	200a      	movs	r0, #10
 80003e8:	f000 ff22 	bl	8001230 <HAL_Delay>
		ICM_SetClock(hi2c2, (uint8_t)CLK_BEST_AVAIL);
 80003ec:	2101      	movs	r1, #1
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f000 f91f 	bl	8000632 <ICM_SetClock>
		HAL_Delay(10);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f000 ff1b 	bl	8001230 <HAL_Delay>
		ICM_AccelGyroOff(hi2c2);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f929 	bl	8000652 <ICM_AccelGyroOff>
		HAL_Delay(20);
 8000400:	2014      	movs	r0, #20
 8000402:	f000 ff15 	bl	8001230 <HAL_Delay>
		ICM_AccelGyroOn(hi2c2);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f930 	bl	800066c <ICM_AccelGyroOn>
		HAL_Delay(10);
 800040c:	200a      	movs	r0, #10
 800040e:	f000 ff0f 	bl	8001230 <HAL_Delay>
		ICM_Initialize(hi2c2);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f000 f804 	bl	8000420 <ICM_Initialize>
	//} else {
		//sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		//HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		//HAL_Delay(100);
	//}
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <ICM_Initialize>:
uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c2) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c2, USER_BANK_2);
 8000428:	2120      	movs	r1, #32
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f8e4 	bl	80005f8 <ICM_SelectBank>
	HAL_Delay(20);
 8000430:	2014      	movs	r0, #20
 8000432:	f000 fefd 	bl	8001230 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c2, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000436:	2229      	movs	r2, #41	; 0x29
 8000438:	2100      	movs	r1, #0
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f000 f935 	bl	80006aa <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f000 fef5 	bl	8001230 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c2, 0x00, 0x0A);
 8000446:	220a      	movs	r2, #10
 8000448:	2100      	movs	r1, #0
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff fed9 	bl	8000202 <ICM_WriteOneByte>
	HAL_Delay(10);
 8000450:	200a      	movs	r0, #10
 8000452:	f000 feed 	bl	8001230 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c2, 0x14, (0x04 | 0x11));
 8000456:	2215      	movs	r2, #21
 8000458:	2114      	movs	r1, #20
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff fed1 	bl	8000202 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c2, 0x10, 0x00);
 8000460:	2200      	movs	r2, #0
 8000462:	2110      	movs	r1, #16
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff fecc 	bl	8000202 <ICM_WriteOneByte>
	HAL_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f000 fee0 	bl	8001230 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c2, 0x11, 0x0A);
 8000470:	220a      	movs	r2, #10
 8000472:	2111      	movs	r1, #17
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff fec4 	bl	8000202 <ICM_WriteOneByte>
	HAL_Delay(10);
 800047a:	200a      	movs	r0, #10
 800047c:	f000 fed8 	bl	8001230 <HAL_Delay>

	ICM_SelectBank(hi2c2, USER_BANK_2);
 8000480:	2120      	movs	r1, #32
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f000 f8b8 	bl	80005f8 <ICM_SelectBank>
	HAL_Delay(20);
 8000488:	2014      	movs	r0, #20
 800048a:	f000 fed1 	bl	8001230 <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c2, 0x7F, 0x00); // Select user bank 0
 800048e:	2200      	movs	r2, #0
 8000490:	217f      	movs	r1, #127	; 0x7f
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff feb5 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000498:	2230      	movs	r2, #48	; 0x30
 800049a:	210f      	movs	r1, #15
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff feb0 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x03, 0x20); // I2C_MST_EN
 80004a2:	2220      	movs	r2, #32
 80004a4:	2103      	movs	r1, #3
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff feab 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x7F, 0x30); // Select user bank 3
 80004ac:	2230      	movs	r2, #48	; 0x30
 80004ae:	217f      	movs	r1, #127	; 0x7f
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff fea6 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80004b6:	224d      	movs	r2, #77	; 0x4d
 80004b8:	2101      	movs	r1, #1
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff fea1 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80004c0:	2201      	movs	r2, #1
 80004c2:	2102      	movs	r1, #2
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff fe9c 	bl	8000202 <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c2, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80004ca:	2281      	movs	r2, #129	; 0x81
 80004cc:	2105      	movs	r1, #5
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fe97 	bl	8000202 <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c2, 0x32, 0x01); // Reset AK8963
 80004d4:	2201      	movs	r2, #1
 80004d6:	2132      	movs	r1, #50	; 0x32
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff feb0 	bl	800023e <i2c_Mag_write>
	HAL_Delay(1000);
 80004de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e2:	f000 fea5 	bl	8001230 <HAL_Delay>
	i2c_Mag_write(hi2c2, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80004e6:	2202      	movs	r2, #2
 80004e8:	2131      	movs	r1, #49	; 0x31
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff fea7 	bl	800023e <i2c_Mag_write>

	return 1337;
 80004f0:	f240 5339 	movw	r3, #1337	; 0x539
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c2) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c2, 0x2D, raw_data, 12);
 8000504:	f107 020c 	add.w	r2, r7, #12
 8000508:	230c      	movs	r3, #12
 800050a:	212d      	movs	r1, #45	; 0x2d
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff fe25 	bl	800015c <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8000512:	7b3b      	ldrb	r3, [r7, #12]
 8000514:	021b      	lsls	r3, r3, #8
 8000516:	b21a      	sxth	r2, r3
 8000518:	7b7b      	ldrb	r3, [r7, #13]
 800051a:	b21b      	sxth	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b21b      	sxth	r3, r3
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 8000524:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	b21a      	sxth	r2, r3
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	b21b      	sxth	r3, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	b21b      	sxth	r3, r3
 8000534:	b29a      	uxth	r2, r3
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 8000538:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 800053a:	7c3b      	ldrb	r3, [r7, #16]
 800053c:	021b      	lsls	r3, r3, #8
 800053e:	b21a      	sxth	r2, r3
 8000540:	7c7b      	ldrb	r3, [r7, #17]
 8000542:	b21b      	sxth	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b21b      	sxth	r3, r3
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 800054c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800054e:	7cbb      	ldrb	r3, [r7, #18]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	b21a      	sxth	r2, r3
 8000554:	7cfb      	ldrb	r3, [r7, #19]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21b      	sxth	r3, r3
 800055c:	b29a      	uxth	r2, r3
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 8000560:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8000562:	7d3b      	ldrb	r3, [r7, #20]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b21a      	sxth	r2, r3
 8000568:	7d7b      	ldrb	r3, [r7, #21]
 800056a:	b21b      	sxth	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b21b      	sxth	r3, r3
 8000570:	b29a      	uxth	r2, r3
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 8000574:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8000576:	7dbb      	ldrb	r3, [r7, #22]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	b21b      	sxth	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29a      	uxth	r2, r3
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 8000588:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 8000594:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 8000598:	885b      	ldrh	r3, [r3, #2]
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 80005a0:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 80005a4:	889b      	ldrh	r3, [r3, #4]
 80005a6:	08db      	lsrs	r3, r3, #3
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <ICM_ReadAccelGyro+0xf0>)
 80005ac:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <ICM_ReadAccelGyro+0xf8>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	091b      	lsrs	r3, r3, #4
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005be:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005c2:	885b      	ldrh	r3, [r3, #2]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <ICM_ReadAccelGyro+0xf8>)
 80005c6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ca:	091b      	lsrs	r3, r3, #4
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005d0:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005d4:	889b      	ldrh	r3, [r3, #4]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <ICM_ReadAccelGyro+0xf8>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <ICM_ReadAccelGyro+0xf4>)
 80005e2:	809a      	strh	r2, [r3, #4]
}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000098 	.word	0x20000098
 80005f0:	200000a0 	.word	0x200000a0
 80005f4:	10624dd3 	.word	0x10624dd3

080005f8 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c2, uint8_t bank) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c2, USER_BANK_SEL, bank);
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	461a      	mov	r2, r3
 8000608:	217f      	movs	r1, #127	; 0x7f
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff fdf9 	bl	8000202 <ICM_WriteOneByte>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <ICM_Disable_I2C>:

void ICM_Disable_I2C(I2C_HandleTypeDef *hi2c2) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c2, 0x03, 0x20);
 8000620:	2220      	movs	r2, #32
 8000622:	2103      	movs	r1, #3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fdec 	bl	8000202 <ICM_WriteOneByte>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c2, uint8_t clk) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c2, PWR_MGMT_1, clk);
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	461a      	mov	r2, r3
 8000642:	2106      	movs	r1, #6
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fddc 	bl	8000202 <ICM_WriteOneByte>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c2) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c2, PWR_MGMT_2, (0x38 | 0x07));
 800065a:	223f      	movs	r2, #63	; 0x3f
 800065c:	2107      	movs	r1, #7
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff fdcf 	bl	8000202 <ICM_WriteOneByte>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c2) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c2, 0x07, (0x00 | 0x00));
 8000674:	2200      	movs	r2, #0
 8000676:	2107      	movs	r1, #7
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fdc2 	bl	8000202 <ICM_WriteOneByte>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(I2C_HandleTypeDef *hi2c2) {
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(hi2c2, 0x00, &spiData);
 8000692:	f107 030f 	add.w	r3, r7, #15
 8000696:	461a      	mov	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff fd89 	bl	80001b2 <ICM_ReadOneByte>
	return spiData;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c2, uint8_t rate, uint8_t lpf) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	460b      	mov	r3, r1
 80006b4:	70fb      	strb	r3, [r7, #3]
 80006b6:	4613      	mov	r3, r2
 80006b8:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c2, GYRO_CONFIG_1, (rate|lpf));
 80006ba:	78fa      	ldrb	r2, [r7, #3]
 80006bc:	78bb      	ldrb	r3, [r7, #2]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	2101      	movs	r1, #1
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff fd9b 	bl	8000202 <ICM_WriteOneByte>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006d8:	b0c6      	sub	sp, #280	; 0x118
 80006da:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
  char uart_buffer[200];
   uint8_t MSG[35] = {'\0'};
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	221f      	movs	r2, #31
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fe7d 	bl	80043e8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fd3d 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f879 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 fa47 	bl	8000b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 fa1b 	bl	8000b34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006fe:	f000 f907 	bl	8000910 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000702:	f000 f933 	bl	800096c <MX_I2C2_Init>
  MX_ADC1_Init();
 8000706:	f000 f8c5 	bl	8000894 <MX_ADC1_Init>
  MX_SPI2_Init();
 800070a:	f000 f95d 	bl	80009c8 <MX_SPI2_Init>
  MX_TIM2_Init();
 800070e:	f000 f991 	bl	8000a34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8000712:	2100      	movs	r1, #0
 8000714:	482e      	ldr	r0, [pc, #184]	; (80007d0 <main+0xfc>)
 8000716:	f7ff ff6f 	bl	80005f8 <ICM_SelectBank>
  	HAL_Delay(10);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 fd88 	bl	8001230 <HAL_Delay>
  	ICM_PowerOn(&hi2c2);
 8000720:	482b      	ldr	r0, [pc, #172]	; (80007d0 <main+0xfc>)
 8000722:	f7ff fe4a 	bl	80003ba <ICM_PowerOn>
  	HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fd82 	bl	8001230 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <main+0x100>)
 8000732:	f001 fa33 	bl	8001b9c <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 8000736:	2019      	movs	r0, #25
 8000738:	f000 fd7a 	bl	8001230 <HAL_Delay>
//	  sprintf(MSG, "should be 0xEA: %d\r\n", who_am_i);
//	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
//	  HAL_Delay(10);

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800073c:	2100      	movs	r1, #0
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <main+0xfc>)
 8000740:	f7ff ff5a 	bl	80005f8 <ICM_SelectBank>
	  HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fd73 	bl	8001230 <HAL_Delay>

	  // Obtain accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <main+0xfc>)
 800074c:	f7ff fed6 	bl	80004fc <ICM_ReadAccelGyro>

	  // Obtain magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	481e      	ldr	r0, [pc, #120]	; (80007d0 <main+0xfc>)
 8000756:	f7ff fddb 	bl	8000310 <ICM_ReadMag>
	  sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u) \n   "
			"(Gx: %u | Gy: %u | Gz: %u) \n   "
			"(Mx: %i | My: %i | Mz: %i) \n"
			" \r\n",
			accel_data[0], accel_data[1], accel_data[2],
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <main+0x104>)
 800075c:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 800075e:	469c      	mov	ip, r3
			accel_data[0], accel_data[1], accel_data[2],
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <main+0x104>)
 8000762:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 8000764:	469e      	mov	lr, r3
			accel_data[0], accel_data[1], accel_data[2],
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <main+0x104>)
 8000768:	889b      	ldrh	r3, [r3, #4]
	  sprintf(uart_buffer,
 800076a:	461a      	mov	r2, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <main+0x108>)
 800076e:	881b      	ldrh	r3, [r3, #0]
	  sprintf(uart_buffer,
 8000770:	4619      	mov	r1, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <main+0x108>)
 8000774:	885b      	ldrh	r3, [r3, #2]
	  sprintf(uart_buffer,
 8000776:	461c      	mov	r4, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0x108>)
 800077a:	889b      	ldrh	r3, [r3, #4]
			mag_data[0], mag_data[1], mag_data[2]);
 800077c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
	  sprintf(uart_buffer,
 8000780:	4605      	mov	r5, r0
			mag_data[0], mag_data[1], mag_data[2]);
 8000782:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
	  sprintf(uart_buffer,
 8000786:	4606      	mov	r6, r0
			mag_data[0], mag_data[1], mag_data[2]);
 8000788:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
	  sprintf(uart_buffer,
 800078c:	f107 0830 	add.w	r8, r7, #48	; 0x30
 8000790:	9006      	str	r0, [sp, #24]
 8000792:	9605      	str	r6, [sp, #20]
 8000794:	9504      	str	r5, [sp, #16]
 8000796:	9303      	str	r3, [sp, #12]
 8000798:	9402      	str	r4, [sp, #8]
 800079a:	9101      	str	r1, [sp, #4]
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	4673      	mov	r3, lr
 80007a0:	4662      	mov	r2, ip
 80007a2:	490f      	ldr	r1, [pc, #60]	; (80007e0 <main+0x10c>)
 80007a4:	4640      	mov	r0, r8
 80007a6:	f003 fe27 	bl	80043f8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fccc 	bl	800014c <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <main+0x110>)
 80007c2:	f003 fc7c 	bl	80040be <HAL_UART_Transmit>
	  HAL_Delay(5);
 80007c6:	2005      	movs	r0, #5
 80007c8:	f000 fd32 	bl	8001230 <HAL_Delay>
  {
 80007cc:	e7ae      	b.n	800072c <main+0x58>
 80007ce:	bf00      	nop
 80007d0:	2000015c 	.word	0x2000015c
 80007d4:	40011000 	.word	0x40011000
 80007d8:	20000098 	.word	0x20000098
 80007dc:	200000a0 	.word	0x200000a0
 80007e0:	08004c84 	.word	0x08004c84
 80007e4:	20000228 	.word	0x20000228

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2228      	movs	r2, #40	; 0x28
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fdf6 	bl	80043e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000828:	2300      	movs	r3, #0
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	4618      	mov	r0, r3
 8000836:	f002 f999 	bl	8002b6c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000840:	f000 fa38 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fc03 	bl	800306c <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800086c:	f000 fa22 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000870:	2302      	movs	r3, #2
 8000872:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fd90 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000886:	f000 fa15 	bl	8000cb4 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_ADC1_Init+0x74>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <MX_ADC1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADC1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_ADC1_Init+0x74>)
 80008be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_ADC1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_ADC1_Init+0x74>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_ADC1_Init+0x74>)
 80008d2:	f000 fcd1 	bl	8001278 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f9ea 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC1_Init+0x74>)
 80008f2:	f000 fd99 	bl	8001428 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008fc:	f000 f9da 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001b0 	.word	0x200001b0
 800090c:	40012400 	.word	0x40012400

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2C1_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_I2C1_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2C1_Init+0x50>)
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_I2C1_Init+0x58>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_I2C1_Init+0x50>)
 800092e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000932:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_I2C1_Init+0x50>)
 800094e:	f001 f93f 	bl	8001bd0 <HAL_I2C_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000958:	f000 f9ac 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000108 	.word	0x20000108
 8000964:	40005400 	.word	0x40005400
 8000968:	000186a0 	.word	0x000186a0

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C2_Init+0x50>)
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <MX_I2C2_Init+0x54>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C2_Init+0x50>)
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_I2C2_Init+0x58>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C2_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 208;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2C2_Init+0x50>)
 8000984:	22d0      	movs	r2, #208	; 0xd0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_I2C2_Init+0x50>)
 800098a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_I2C2_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2C2_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_I2C2_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2C2_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_I2C2_Init+0x50>)
 80009aa:	f001 f911 	bl	8001bd0 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f97e 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000015c 	.word	0x2000015c
 80009c0:	40005800 	.word	0x40005800
 80009c4:	00061a80 	.word	0x00061a80

080009c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <MX_SPI2_Init+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_SPI2_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_SPI2_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_SPI2_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_SPI2_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_SPI2_Init+0x64>)
 8000a14:	220a      	movs	r2, #10
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_SPI2_Init+0x64>)
 8000a1a:	f002 fd77 	bl	800350c <HAL_SPI_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a24:	f000 f946 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000b0 	.word	0x200000b0
 8000a30:	40003800 	.word	0x40003800

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8c:	4828      	ldr	r0, [pc, #160]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000a8e:	f002 fdc1 	bl	8003614 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a98:	f000 f90c 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000aaa:	f002 ff19 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ab4:	f000 f8fe 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab8:	481d      	ldr	r0, [pc, #116]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000aba:	f002 fdfa 	bl	80036b2 <HAL_TIM_PWM_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f000 f8f6 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000ad8:	f003 fa46 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 f8e7 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2360      	movs	r3, #96	; 0x60
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000afe:	f002 fe31 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b08:	f000 f8d4 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2204      	movs	r2, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000b14:	f002 fe26 	bl	8003764 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000b1e:	f000 f8c9 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM2_Init+0xfc>)
 8000b24:	f000 fa1e 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001e0 	.word	0x200001e0

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f003 fa5a 	bl	8004024 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f89d 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000228 	.word	0x20000228
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a3f      	ldr	r2, [pc, #252]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0x118>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c02:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <MX_GPIO_Init+0x11c>)
 8000c04:	f000 ffb2 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2158      	movs	r1, #88	; 0x58
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0x120>)
 8000c0e:	f000 ffad 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0x11c>)
 8000c2c:	f000 fe1a 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin FRONT_TRIG_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|FRONT_TRIG_Pin|FRONT_ECHO_Pin;
 8000c30:	23e0      	movs	r3, #224	; 0xe0
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <MX_GPIO_Init+0x124>)
 8000c44:	f000 fe0e 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|SIDE_TRIG_Pin;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <MX_GPIO_Init+0x120>)
 8000c5c:	f000 fe02 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_A_Pin RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8000c60:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_GPIO_Init+0x124>)
 8000c76:	f000 fdf5 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000c7a:	2358      	movs	r3, #88	; 0x58
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_GPIO_Init+0x120>)
 8000c92:	f000 fde7 	bl	8001864 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	10110000 	.word	0x10110000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_MspInit+0x5c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_MspInit+0x5c>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_MspInit+0x5c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_MspInit+0x5c>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_MspInit+0x60>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_MspInit+0x60>)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010000 	.word	0x40010000

08000d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_ADC_MspInit+0x6c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d121      	bne.n	8000d88 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_ADC_MspInit+0x70>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8000d74:	2310      	movs	r3, #16
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_ADC_MspInit+0x74>)
 8000d84:	f000 fd6e 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40012400 	.word	0x40012400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <HAL_I2C_MspInit+0xe4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d133      	bne.n	8000e24 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8000dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4827      	ldr	r0, [pc, #156]	; (8000e88 <HAL_I2C_MspInit+0xec>)
 8000dea:	f000 fd3b 	bl	8001864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_I2C_MspInit+0xf0>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <HAL_I2C_MspInit+0xf0>)
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e22:	e029      	b.n	8000e78 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_I2C_MspInit+0xf4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d124      	bne.n	8000e78 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8000e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0xec>)
 8000e5c:	f000 fd02 	bl	8001864 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e6a:	61d3      	str	r3, [r2, #28]
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_I2C_MspInit+0xe8>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40005800 	.word	0x40005800

08000e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_SPI_MspInit+0x8c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d131      	bne.n	8000f18 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebe:	61d3      	str	r3, [r2, #28]
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_SPI_MspInit+0x90>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ee4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <HAL_SPI_MspInit+0x94>)
 8000efa:	f000 fcb3 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_SPI_MspInit+0x94>)
 8000f14:	f000 fca6 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40003800 	.word	0x40003800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010c00 	.word	0x40010c00

08000f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_TIM_Base_MspInit+0x34>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_TIM_Base_MspInit+0x34>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_TIM_Base_MspInit+0x34>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f82:	d117      	bne.n	8000fb4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_TIM_MspPostInit+0x58>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_TIM_MspPostInit+0x58>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_TIM_MspPostInit+0x58>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <HAL_TIM_MspPostInit+0x5c>)
 8000fb0:	f000 fc58 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_UART_MspInit+0x88>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d12f      	bne.n	8001044 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_UART_MspInit+0x8c>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x8c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001014:	2304      	movs	r3, #4
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_UART_MspInit+0x90>)
 8001028:	f000 fc1c 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800102c:	2308      	movs	r3, #8
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x90>)
 8001040:	f000 fc10 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8ab 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 f95c 	bl	8004394 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20005000 	.word	0x20005000
 8001108:	00000400 	.word	0x00000400
 800110c:	2000008c 	.word	0x2000008c
 8001110:	20000280 	.word	0x20000280

08001114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800113c:	f842 3b04 	str.w	r3, [r2], #4

08001140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f7ff ffe5 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f003 f929 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fac1 	bl	80006d4 <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r3, =_sidata
 8001154:	08004d48 	.word	0x08004d48
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800115c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001160:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001164:	20000280 	.word	0x20000280

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fb3d 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fd9a 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fb47 	bl	800184a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 fb1d 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000008 	.word	0x20000008
 8001218:	2000026c 	.word	0x2000026c

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000026c 	.word	0x2000026c

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffe0 	bl	800121c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0be      	b.n	8001418 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d109      	bne.n	80012bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd34 	bl	8000d24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f9ab 	bl	8001618 <ADC_ConversionStop_Disable>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8099 	bne.w	8001406 <HAL_ADC_Init+0x18e>
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 8095 	bne.w	8001406 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012e4:	f023 0302 	bic.w	r3, r3, #2
 80012e8:	f043 0202 	orr.w	r2, r3, #2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b1b      	ldrb	r3, [r3, #12]
 80012fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001300:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	4313      	orrs	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001310:	d003      	beq.n	800131a <HAL_ADC_Init+0xa2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <HAL_ADC_Init+0xa8>
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	e000      	b.n	8001322 <HAL_ADC_Init+0xaa>
 8001320:	2300      	movs	r3, #0
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7d1b      	ldrb	r3, [r3, #20]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d119      	bne.n	8001364 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7b1b      	ldrb	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	035a      	lsls	r2, r3, #13
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	e00b      	b.n	8001364 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_ADC_Init+0x1a8>)
 8001380:	4013      	ands	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	430b      	orrs	r3, r1
 800138a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d003      	beq.n	800139e <HAL_ADC_Init+0x126>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d104      	bne.n	80013a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	051b      	lsls	r3, r3, #20
 80013a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_Init+0x1ac>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e2:	e018      	b.n	8001416 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f023 0312 	bic.w	r3, r3, #18
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001404:	e007      	b.n	8001416 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	f043 0210 	orr.w	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	ffe1f7fd 	.word	0xffe1f7fd
 8001424:	ff1f0efe 	.word	0xff1f0efe

08001428 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x20>
 8001444:	2302      	movs	r3, #2
 8001446:	e0dc      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1da>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b06      	cmp	r3, #6
 8001456:	d81c      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b05      	subs	r3, #5
 800146a:	221f      	movs	r2, #31
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	4019      	ands	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b05      	subs	r3, #5
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
 8001490:	e03c      	b.n	800150c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	d81c      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4019      	ands	r1, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b23      	subs	r3, #35	; 0x23
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
 80014d2:	e01b      	b.n	800150c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	221f      	movs	r2, #31
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4019      	ands	r1, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	; 0x41
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d91c      	bls.n	800154e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d9      	ldr	r1, [r3, #12]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	3b1e      	subs	r3, #30
 8001526:	2207      	movs	r2, #7
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6898      	ldr	r0, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	3b1e      	subs	r3, #30
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	e019      	b.n	8001582 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6919      	ldr	r1, [r3, #16]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	4019      	ands	r1, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	fa00 f203 	lsl.w	r2, r0, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d003      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158e:	2b11      	cmp	r3, #17
 8001590:	d132      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_ADC_ConfigChannel+0x1e4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d125      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d126      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d11a      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_ADC_ConfigChannel+0x1e8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_ADC_ConfigChannel+0x1ec>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9a      	lsrs	r2, r3, #18
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_ConfigChannel+0x1b2>
 80015e6:	e007      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f043 0220 	orr.w	r2, r3, #32
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40012400 	.word	0x40012400
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d12e      	bne.n	8001690 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001642:	f7ff fdeb 	bl	800121c <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001648:	e01b      	b.n	8001682 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164a:	f7ff fde7 	bl	800121c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d914      	bls.n	8001682 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10d      	bne.n	8001682 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e007      	b.n	8001692 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d0dc      	beq.n	800164a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017dc:	f7ff ff90 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff49 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff5e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffb0 	bl	80017b8 <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e169      	b.n	8001b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8158 	bne.w	8001b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a9a      	ldr	r2, [pc, #616]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018a0:	4a98      	ldr	r2, [pc, #608]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d875      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018a6:	4a98      	ldr	r2, [pc, #608]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d058      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018ac:	4a96      	ldr	r2, [pc, #600]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d86f      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018b2:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d052      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018b8:	4a94      	ldr	r2, [pc, #592]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d869      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018be:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04c      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018c4:	4a92      	ldr	r2, [pc, #584]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d863      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018ca:	4a92      	ldr	r2, [pc, #584]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d046      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018d0:	4a90      	ldr	r2, [pc, #576]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d85d      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d82a      	bhi.n	8001930 <HAL_GPIO_Init+0xcc>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d859      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_GPIO_Init+0x80>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	08001939 	.word	0x08001939
 80018ec:	0800194b 	.word	0x0800194b
 80018f0:	0800198d 	.word	0x0800198d
 80018f4:	08001993 	.word	0x08001993
 80018f8:	08001993 	.word	0x08001993
 80018fc:	08001993 	.word	0x08001993
 8001900:	08001993 	.word	0x08001993
 8001904:	08001993 	.word	0x08001993
 8001908:	08001993 	.word	0x08001993
 800190c:	08001993 	.word	0x08001993
 8001910:	08001993 	.word	0x08001993
 8001914:	08001993 	.word	0x08001993
 8001918:	08001993 	.word	0x08001993
 800191c:	08001993 	.word	0x08001993
 8001920:	08001993 	.word	0x08001993
 8001924:	08001993 	.word	0x08001993
 8001928:	08001941 	.word	0x08001941
 800192c:	08001955 	.word	0x08001955
 8001930:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <HAL_GPIO_Init+0x2b4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001936:	e02c      	b.n	8001992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e029      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e024      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	3308      	adds	r3, #8
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e01f      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	330c      	adds	r3, #12
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e01a      	b.n	8001994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001966:	2304      	movs	r3, #4
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e013      	b.n	8001994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	611a      	str	r2, [r3, #16]
          break;
 800197e:	e009      	b.n	8001994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	615a      	str	r2, [r3, #20]
          break;
 800198a:	e003      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x130>
          break;
 8001992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d801      	bhi.n	800199e <HAL_GPIO_Init+0x13a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_Init+0x13e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d802      	bhi.n	80019b0 <HAL_GPIO_Init+0x14c>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x152>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3b08      	subs	r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	210f      	movs	r1, #15
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80b1 	beq.w	8001b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_GPIO_Init+0x2bc>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <HAL_GPIO_Init+0x2c0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_GPIO_Init+0x1ec>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3f      	ldr	r2, [pc, #252]	; (8001b28 <HAL_GPIO_Init+0x2c4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1e8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3e      	ldr	r2, [pc, #248]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_GPIO_Init+0x2cc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1e0>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a50:	2300      	movs	r3, #0
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a62:	492f      	ldr	r1, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x2bc>)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	492c      	ldr	r1, [pc, #176]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4928      	ldr	r1, [pc, #160]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4922      	ldr	r1, [pc, #136]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	491e      	ldr	r1, [pc, #120]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4918      	ldr	r1, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4914      	ldr	r1, [pc, #80]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e021      	b.n	8001b46 <HAL_GPIO_Init+0x2e2>
 8001b02:	bf00      	nop
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10220000 	.word	0x10220000
 8001b10:	10210000 	.word	0x10210000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f47f ae8e 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	372c      	adds	r7, #44	; 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43d9      	mvns	r1, r3
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e12b      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff f8d0 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c34:	f001 fb6e 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d807      	bhi.n	8001c54 <HAL_I2C_Init+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_I2C_Init+0x278>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e006      	b.n	8001c62 <HAL_I2C_Init+0x92>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a7d      	ldr	r2, [pc, #500]	; (8001e4c <HAL_I2C_Init+0x27c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0e7      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_I2C_Init+0x280>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_I2C_Init+0xd4>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <HAL_I2C_Init+0xe8>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_I2C_Init+0x284>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	495c      	ldr	r1, [pc, #368]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d819      	bhi.n	8001d0c <HAL_I2C_Init+0x13c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e59      	subs	r1, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cec:	400b      	ands	r3, r1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_I2C_Init+0x138>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e59      	subs	r1, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	e051      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e04f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_I2C_Init+0x168>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e012      	b.n	8001d5e <HAL_I2C_Init+0x18e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x196>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_I2C_Init+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e58      	subs	r0, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6809      	ldr	r1, [r1, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6911      	ldr	r1, [r2, #16]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	000186a0 	.word	0x000186a0
 8001e48:	001e847f 	.word	0x001e847f
 8001e4c:	003d08ff 	.word	0x003d08ff
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	461a      	mov	r2, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	817b      	strh	r3, [r7, #10]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff f9d6 	bl	800121c <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	f040 80e0 	bne.w	8002040 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	2201      	movs	r2, #1
 8001e88:	4970      	ldr	r1, [pc, #448]	; (800204c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fc92 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0d3      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Transmit+0x50>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0cc      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d007      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fafc 	bl	8002514 <I2C_MasterRequestWrite>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08d      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f3c:	e066      	b.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fd0c 	bl	8002960 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fcfc 	bl	80029e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e01a      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d194      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	461a      	mov	r2, r3
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
 8002064:	4613      	mov	r3, r2
 8002066:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff f8d6 	bl	800121c <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	f040 823f 	bne.w	80024fe <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2319      	movs	r3, #25
 8002086:	2201      	movs	r2, #1
 8002088:	497f      	ldr	r1, [pc, #508]	; (8002288 <HAL_I2C_Master_Receive+0x234>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fb92 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	e232      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_I2C_Master_Receive+0x54>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e22b      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d007      	beq.n	80020ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2222      	movs	r2, #34	; 0x22
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2210      	movs	r2, #16
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	893a      	ldrh	r2, [r7, #8]
 80020fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_I2C_Master_Receive+0x238>)
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002110:	8979      	ldrh	r1, [r7, #10]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa7e 	bl	8002618 <I2C_MasterRequestRead>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1ec      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d113      	bne.n	8002156 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e1c0      	b.n	80024d8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b01      	cmp	r3, #1
 800215c:	d11e      	bne.n	800219c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800216e:	b672      	cpsid	i
}
 8002170:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002198:	b662      	cpsie	i
}
 800219a:	e035      	b.n	8002208 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d11e      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021de:	b662      	cpsie	i
}
 80021e0:	e012      	b.n	8002208 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002208:	e166      	b.n	80024d8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b03      	cmp	r3, #3
 8002210:	f200 811f 	bhi.w	8002452 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b01      	cmp	r3, #1
 800221a:	d123      	bne.n	8002264 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fc1f 	bl	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e167      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002262:	e139      	b.n	80024d8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b02      	cmp	r3, #2
 800226a:	d152      	bne.n	8002312 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	2200      	movs	r2, #0
 8002274:	4906      	ldr	r1, [pc, #24]	; (8002290 <HAL_I2C_Master_Receive+0x23c>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa9c 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e13c      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
 8002286:	bf00      	nop
 8002288:	00100002 	.word	0x00100002
 800228c:	ffff0000 	.word	0xffff0000
 8002290:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002310:	e0e2      	b.n	80024d8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	2200      	movs	r2, #0
 800231a:	497b      	ldr	r1, [pc, #492]	; (8002508 <HAL_I2C_Master_Receive+0x4b4>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fa49 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0e9      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002372:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_I2C_Master_Receive+0x4b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_I2C_Master_Receive+0x4bc>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a1a      	lsrs	r2, r3, #8
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00da      	lsls	r2, r3, #3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	3b01      	subs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023ba:	b662      	cpsie	i
}
 80023bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e09a      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d1d9      	bne.n	800238c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800241a:	b662      	cpsie	i
}
 800241c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002450:	e042      	b.n	80024d8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fb04 	bl	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e04c      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d118      	bne.n	80024d8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae94 	bne.w	800220a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010004 	.word	0x00010004
 800250c:	20000000 	.word	0x20000000
 8002510:	14f8b589 	.word	0x14f8b589

08002514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d006      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d003      	beq.n	800253e <I2C_MasterRequestWrite+0x2a>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800253c:	d108      	bne.n	8002550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	2b12      	cmp	r3, #18
 8002556:	d107      	bne.n	8002568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f91d 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d103      	bne.n	8002598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e035      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e01b      	b.n	80025f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	11db      	asrs	r3, r3, #7
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0306 	and.w	r3, r3, #6
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f063 030f 	orn	r3, r3, #15
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <I2C_MasterRequestWrite+0xfc>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f943 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e010      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <I2C_MasterRequestWrite+0x100>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f933 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010008 	.word	0x00010008
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d006      	beq.n	8002652 <I2C_MasterRequestRead+0x3a>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d003      	beq.n	8002652 <I2C_MasterRequestRead+0x3a>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002650:	d108      	bne.n	8002664 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00b      	b.n	800267c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b11      	cmp	r3, #17
 800266a:	d107      	bne.n	800267c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f893 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a2:	d103      	bne.n	80026ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e079      	b.n	80027a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b8:	d108      	bne.n	80026cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]
 80026ca:	e05f      	b.n	800278c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026cc:	897b      	ldrh	r3, [r7, #10]
 80026ce:	11db      	asrs	r3, r3, #7
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0306 	and.w	r3, r3, #6
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f063 030f 	orn	r3, r3, #15
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4930      	ldr	r1, [pc, #192]	; (80027ac <I2C_MasterRequestRead+0x194>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f8b9 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e054      	b.n	80027a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4929      	ldr	r1, [pc, #164]	; (80027b0 <I2C_MasterRequestRead+0x198>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8a9 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e044      	b.n	80027a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f831 	bl	80027b4 <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d103      	bne.n	8002770 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e017      	b.n	80027a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	11db      	asrs	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f063 030e 	orn	r3, r3, #14
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <I2C_MasterRequestRead+0x198>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f865 	bl	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00010008 	.word	0x00010008
 80027b0:	00010002 	.word	0x00010002

080027b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c4:	e025      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d021      	beq.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7fe fd25 	bl	800121c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e023      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10d      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	e00c      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	429a      	cmp	r2, r3
 8002856:	d0b6      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002870:	e051      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d123      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800289a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e046      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d0:	d021      	beq.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fca3 	bl	800121c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e020      	b.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10c      	bne.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e00b      	b.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d18d      	bne.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296c:	e02d      	b.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8ce 	bl	8002b10 <I2C_IsAcknowledgeFailed>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e02d      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe fc49 	bl	800121c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d1ca      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ee:	e02d      	b.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f88d 	bl	8002b10 <I2C_IsAcknowledgeFailed>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e02d      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a06:	d021      	beq.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7fe fc08 	bl	800121c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d1ca      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a70:	e042      	b.n	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d119      	bne.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0210 	mvn.w	r2, #16
 8002a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e029      	b.n	8002b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab4:	f7fe fbb2 	bl	800121c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d302      	bcc.n	8002aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d1b5      	bne.n	8002a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b26:	d11b      	bne.n	8002b60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e26c      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x12c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e246      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x76>
 8002bd4:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7f      	ldr	r2, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7a      	ldr	r2, [pc, #488]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a77      	ldr	r2, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xbc>
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a71      	ldr	r2, [pc, #452]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fae8 	bl	800121c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fae4 	bl	800121c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1fa      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe4>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fad4 	bl	800121c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fad0 	bl	800121c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1e6      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x10c>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1ba      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4939      	ldr	r1, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe fa89 	bl	800121c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fa85 	bl	800121c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e19b      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4927      	ldr	r1, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa68 	bl	800121c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fa64 	bl	800121c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e17a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03a      	beq.n	8002df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d019      	beq.n	8002db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fa48 	bl	800121c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fa44 	bl	800121c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e15a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dae:	2001      	movs	r0, #1
 8002db0:	f000 fad8 	bl	8003364 <RCC_Delay>
 8002db4:	e01c      	b.n	8002df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fa2e 	bl	800121c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fa2a 	bl	800121c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e140      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	42420000 	.word	0x42420000
 8002de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e9      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a6 	beq.w	8002f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b97      	ldr	r3, [pc, #604]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10d      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b94      	ldr	r3, [pc, #592]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a93      	ldr	r2, [pc, #588]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b8e      	ldr	r3, [pc, #568]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a8a      	ldr	r2, [pc, #552]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe f9eb 	bl	800121c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe f9e7 	bl	800121c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0fd      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x312>
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e02d      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a72      	ldr	r2, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	e01c      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x356>
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f99b 	bl	800121c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f997 	bl	800121c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0ab      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCC_OscConfig+0x37e>
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe f985 	bl	800121c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe f981 	bl	800121c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e095      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ee      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8081 	beq.w	8003056 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d061      	beq.n	8003024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d146      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe f955 	bl	800121c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe f951 	bl	800121c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e067      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	492d      	ldr	r1, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a19      	ldr	r1, [r3, #32]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	4927      	ldr	r1, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe f925 	bl	800121c <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe f921 	bl	800121c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e037      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x46a>
 8002ff4:	e02f      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f90e 	bl	800121c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f90a 	bl	800121c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e020      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x498>
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	429a      	cmp	r2, r3
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060

0800306c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d0      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4965      	ldr	r1, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d040      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d115      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e073      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06b      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4936      	ldr	r1, [pc, #216]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fe f85e 	bl	800121c <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fe f85a 	bl	800121c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e053      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d210      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4922      	ldr	r1, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd ffbc 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40022000 	.word	0x40022000
 8003230:	40021000 	.word	0x40021000
 8003234:	08004cf4 	.word	0x08004cf4
 8003238:	20000000 	.word	0x20000000
 800323c:	20000004 	.word	0x20000004

08003240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003248:	1d3c      	adds	r4, r7, #4
 800324a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800324c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003250:	f240 2301 	movw	r3, #513	; 0x201
 8003254:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x46>
 800327e:	e02d      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003282:	623b      	str	r3, [r7, #32]
      break;
 8003284:	e02d      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003298:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c5b      	lsrs	r3, r3, #17
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032be:	fb02 f203 	mul.w	r2, r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e004      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	623b      	str	r3, [r7, #32]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032de:	623b      	str	r3, [r7, #32]
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6a3b      	ldr	r3, [r7, #32]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc90      	pop	{r4, r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	08004ce4 	.word	0x08004ce4
 80032f4:	40021000 	.word	0x40021000
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	003d0900 	.word	0x003d0900

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <HAL_RCC_GetHCLKFreq+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff2 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	08004d04 	.word	0x08004d04

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffde 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	08004d04 	.word	0x08004d04

08003364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCC_Delay+0x34>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <RCC_Delay+0x38>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003380:	bf00      	nop
  }
  while (Delay --);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <RCC_Delay+0x1c>
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000000 	.word	0x20000000
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07d      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fd ff0c 	bl	800121c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fd ff08 	bl	800121c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e06d      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d02e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d027      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800345a:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d014      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fd fed7 	bl	800121c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd fed3 	bl	800121c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e036      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ee      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	42420440 	.word	0x42420440

0800350c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e076      	b.n	800360c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d009      	beq.n	8003544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
 8003536:	e005      	b.n	8003544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd fc98 	bl	8000e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	ea42 0103 	orr.w	r1, r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	0c1a      	lsrs	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 0204 	and.w	r2, r2, #4
 80035ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fc76 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fa08 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e041      	b.n	8003748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f839 	bl	8003750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 f9b9 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800377a:	2302      	movs	r3, #2
 800377c:	e0ac      	b.n	80038d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	f200 809f 	bhi.w	80038cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080038cd 	.word	0x080038cd
 800379c:	080038cd 	.word	0x080038cd
 80037a0:	080038cd 	.word	0x080038cd
 80037a4:	08003809 	.word	0x08003809
 80037a8:	080038cd 	.word	0x080038cd
 80037ac:	080038cd 	.word	0x080038cd
 80037b0:	080038cd 	.word	0x080038cd
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	080038cd 	.word	0x080038cd
 80037bc:	080038cd 	.word	0x080038cd
 80037c0:	080038cd 	.word	0x080038cd
 80037c4:	0800388b 	.word	0x0800388b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f9ac 	bl	8003b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0208 	orr.w	r2, r2, #8
 80037e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	619a      	str	r2, [r3, #24]
      break;
 8003806:	e062      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f9f2 	bl	8003bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	619a      	str	r2, [r3, #24]
      break;
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fa3b 	bl	8003ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0208 	orr.w	r2, r2, #8
 8003864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0204 	bic.w	r2, r2, #4
 8003874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69d9      	ldr	r1, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]
      break;
 8003888:	e021      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fa85 	bl	8003da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	021a      	lsls	r2, r3, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80038cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIM_ConfigClockSource+0x18>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0b3      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x180>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800391e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003930:	d03e      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xd0>
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	f200 8087 	bhi.w	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	f000 8085 	beq.w	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d87f      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003948:	2b70      	cmp	r3, #112	; 0x70
 800394a:	d01a      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0xa2>
 800394c:	2b70      	cmp	r3, #112	; 0x70
 800394e:	d87b      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003950:	2b60      	cmp	r3, #96	; 0x60
 8003952:	d050      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x116>
 8003954:	2b60      	cmp	r3, #96	; 0x60
 8003956:	d877      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003958:	2b50      	cmp	r3, #80	; 0x50
 800395a:	d03c      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xf6>
 800395c:	2b50      	cmp	r3, #80	; 0x50
 800395e:	d873      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d058      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x136>
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d86f      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003968:	2b30      	cmp	r3, #48	; 0x30
 800396a:	d064      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x156>
 800396c:	2b30      	cmp	r3, #48	; 0x30
 800396e:	d86b      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003970:	2b20      	cmp	r3, #32
 8003972:	d060      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x156>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d867      	bhi.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05c      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x156>
 800397c:	2b10      	cmp	r3, #16
 800397e:	d05a      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003980:	e062      	b.n	8003a48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f000 faca 	bl	8003f2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
      break;
 80039ae:	e04e      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6899      	ldr	r1, [r3, #8]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f000 fab3 	bl	8003f2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e03b      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f000 fa2a 	bl	8003e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2150      	movs	r1, #80	; 0x50
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fa81 	bl	8003ef6 <TIM_ITRx_SetConfig>
      break;
 80039f4:	e02b      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f000 fa48 	bl	8003e98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2160      	movs	r1, #96	; 0x60
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa71 	bl	8003ef6 <TIM_ITRx_SetConfig>
      break;
 8003a14:	e01b      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 fa0a 	bl	8003e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2140      	movs	r1, #64	; 0x40
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa61 	bl	8003ef6 <TIM_ITRx_SetConfig>
      break;
 8003a34:	e00b      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f000 fa58 	bl	8003ef6 <TIM_ITRx_SetConfig>
        break;
 8003a46:	e002      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <TIM_Base_SetConfig+0xbc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <TIM_Base_SetConfig+0xc0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_Base_SetConfig+0xbc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x62>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_Base_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <TIM_Base_SetConfig+0xb8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0308 	bic.w	r3, r3, #8
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00

08003bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0210 	bic.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0320 	bic.w	r3, r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <TIM_OC2_SetConfig+0xd0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10d      	bne.n	8003c74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <TIM_OC2_SetConfig+0xd0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <TIM_OC3_SetConfig+0xd0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10d      	bne.n	8003d46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <TIM_OC3_SetConfig+0xd0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d113      	bne.n	8003d76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00

08003da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <TIM_OC4_SetConfig+0x98>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d109      	bne.n	8003e14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 030a 	bic.w	r3, r3, #10
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 0210 	bic.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	031b      	lsls	r3, r3, #12
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f043 0307 	orr.w	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	609a      	str	r2, [r3, #8]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e046      	b.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d009      	beq.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a12      	ldr	r2, [pc, #72]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a10      	ldr	r2, [pc, #64]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10c      	bne.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800

08004024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e03f      	b.n	80040b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fc ffba 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f905 	bl	8004278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08a      	sub	sp, #40	; 0x28
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d17c      	bne.n	80041d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_UART_Transmit+0x2c>
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e075      	b.n	80041da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Transmit+0x3e>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e06e      	b.n	80041da <HAL_UART_Transmit+0x11c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2221      	movs	r2, #33	; 0x21
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004112:	f7fd f883 	bl	800121c <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	88fa      	ldrh	r2, [r7, #6]
 8004122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d108      	bne.n	8004140 <HAL_UART_Transmit+0x82>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e003      	b.n	8004148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004150:	e02a      	b.n	80041a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f840 	bl	80041e2 <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e036      	b.n	80041da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3302      	adds	r3, #2
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e007      	b.n	800419a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3301      	adds	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1cf      	bne.n	8004152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2140      	movs	r1, #64	; 0x40
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f810 	bl	80041e2 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e006      	b.n	80041da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f2:	e02c      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fa:	d028      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <UART_WaitOnFlagUntilTimeout+0x30>
 8004202:	f7fd f80b 	bl	800121c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	429a      	cmp	r2, r3
 8004210:	d21d      	bcs.n	800424e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004220:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00f      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0c3      	beq.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042b2:	f023 030c 	bic.w	r3, r3, #12
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	430b      	orrs	r3, r1
 80042be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2c      	ldr	r2, [pc, #176]	; (800438c <UART_SetConfig+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff f82c 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	e002      	b.n	80042ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042e8:	f7ff f814 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80042ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	4a22      	ldr	r2, [pc, #136]	; (8004390 <UART_SetConfig+0x118>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	0119      	lsls	r1, r3, #4
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	fbb2 f2f3 	udiv	r2, r2, r3
 8004324:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <UART_SetConfig+0x118>)
 8004326:	fba3 0302 	umull	r0, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2064      	movs	r0, #100	; 0x64
 800432e:	fb00 f303 	mul.w	r3, r0, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <UART_SetConfig+0x118>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004344:	4419      	add	r1, r3
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <UART_SetConfig+0x118>)
 800435e:	fba3 0302 	umull	r0, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2064      	movs	r0, #100	; 0x64
 8004366:	fb00 f303 	mul.w	r3, r0, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <UART_SetConfig+0x118>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	440a      	add	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40013800 	.word	0x40013800
 8004390:	51eb851f 	.word	0x51eb851f

08004394 <__errno>:
 8004394:	4b01      	ldr	r3, [pc, #4]	; (800439c <__errno+0x8>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	2000000c 	.word	0x2000000c

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	2600      	movs	r6, #0
 80043a4:	4d0c      	ldr	r5, [pc, #48]	; (80043d8 <__libc_init_array+0x38>)
 80043a6:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a8:	1b64      	subs	r4, r4, r5
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	42a6      	cmp	r6, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	f000 fc5c 	bl	8004c6c <_init>
 80043b4:	2600      	movs	r6, #0
 80043b6:	4d0a      	ldr	r5, [pc, #40]	; (80043e0 <__libc_init_array+0x40>)
 80043b8:	4c0a      	ldr	r4, [pc, #40]	; (80043e4 <__libc_init_array+0x44>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	42a6      	cmp	r6, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c8:	4798      	blx	r3
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d2:	4798      	blx	r3
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08004d40 	.word	0x08004d40
 80043dc:	08004d40 	.word	0x08004d40
 80043e0:	08004d40 	.word	0x08004d40
 80043e4:	08004d44 	.word	0x08004d44

080043e8 <memset>:
 80043e8:	4603      	mov	r3, r0
 80043ea:	4402      	add	r2, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <siprintf>:
 80043f8:	b40e      	push	{r1, r2, r3}
 80043fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043fe:	b500      	push	{lr}
 8004400:	b09c      	sub	sp, #112	; 0x70
 8004402:	ab1d      	add	r3, sp, #116	; 0x74
 8004404:	9002      	str	r0, [sp, #8]
 8004406:	9006      	str	r0, [sp, #24]
 8004408:	9107      	str	r1, [sp, #28]
 800440a:	9104      	str	r1, [sp, #16]
 800440c:	4808      	ldr	r0, [pc, #32]	; (8004430 <siprintf+0x38>)
 800440e:	4909      	ldr	r1, [pc, #36]	; (8004434 <siprintf+0x3c>)
 8004410:	f853 2b04 	ldr.w	r2, [r3], #4
 8004414:	9105      	str	r1, [sp, #20]
 8004416:	6800      	ldr	r0, [r0, #0]
 8004418:	a902      	add	r1, sp, #8
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	f000 f868 	bl	80044f0 <_svfiprintf_r>
 8004420:	2200      	movs	r2, #0
 8004422:	9b02      	ldr	r3, [sp, #8]
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	b01c      	add	sp, #112	; 0x70
 8004428:	f85d eb04 	ldr.w	lr, [sp], #4
 800442c:	b003      	add	sp, #12
 800442e:	4770      	bx	lr
 8004430:	2000000c 	.word	0x2000000c
 8004434:	ffff0208 	.word	0xffff0208

08004438 <__ssputs_r>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	688e      	ldr	r6, [r1, #8]
 800443e:	4682      	mov	sl, r0
 8004440:	429e      	cmp	r6, r3
 8004442:	460c      	mov	r4, r1
 8004444:	4690      	mov	r8, r2
 8004446:	461f      	mov	r7, r3
 8004448:	d838      	bhi.n	80044bc <__ssputs_r+0x84>
 800444a:	898a      	ldrh	r2, [r1, #12]
 800444c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004450:	d032      	beq.n	80044b8 <__ssputs_r+0x80>
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	6909      	ldr	r1, [r1, #16]
 8004456:	3301      	adds	r3, #1
 8004458:	eba5 0901 	sub.w	r9, r5, r1
 800445c:	6965      	ldr	r5, [r4, #20]
 800445e:	444b      	add	r3, r9
 8004460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004468:	106d      	asrs	r5, r5, #1
 800446a:	429d      	cmp	r5, r3
 800446c:	bf38      	it	cc
 800446e:	461d      	movcc	r5, r3
 8004470:	0553      	lsls	r3, r2, #21
 8004472:	d531      	bpl.n	80044d8 <__ssputs_r+0xa0>
 8004474:	4629      	mov	r1, r5
 8004476:	f000 fb53 	bl	8004b20 <_malloc_r>
 800447a:	4606      	mov	r6, r0
 800447c:	b950      	cbnz	r0, 8004494 <__ssputs_r+0x5c>
 800447e:	230c      	movs	r3, #12
 8004480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004484:	f8ca 3000 	str.w	r3, [sl]
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004494:	464a      	mov	r2, r9
 8004496:	6921      	ldr	r1, [r4, #16]
 8004498:	f000 face 	bl	8004a38 <memcpy>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	6126      	str	r6, [r4, #16]
 80044aa:	444e      	add	r6, r9
 80044ac:	6026      	str	r6, [r4, #0]
 80044ae:	463e      	mov	r6, r7
 80044b0:	6165      	str	r5, [r4, #20]
 80044b2:	eba5 0509 	sub.w	r5, r5, r9
 80044b6:	60a5      	str	r5, [r4, #8]
 80044b8:	42be      	cmp	r6, r7
 80044ba:	d900      	bls.n	80044be <__ssputs_r+0x86>
 80044bc:	463e      	mov	r6, r7
 80044be:	4632      	mov	r2, r6
 80044c0:	4641      	mov	r1, r8
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	f000 fac6 	bl	8004a54 <memmove>
 80044c8:	68a3      	ldr	r3, [r4, #8]
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	1b9b      	subs	r3, r3, r6
 80044ce:	4432      	add	r2, r6
 80044d0:	2000      	movs	r0, #0
 80044d2:	60a3      	str	r3, [r4, #8]
 80044d4:	6022      	str	r2, [r4, #0]
 80044d6:	e7db      	b.n	8004490 <__ssputs_r+0x58>
 80044d8:	462a      	mov	r2, r5
 80044da:	f000 fb7b 	bl	8004bd4 <_realloc_r>
 80044de:	4606      	mov	r6, r0
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d1e1      	bne.n	80044a8 <__ssputs_r+0x70>
 80044e4:	4650      	mov	r0, sl
 80044e6:	6921      	ldr	r1, [r4, #16]
 80044e8:	f000 face 	bl	8004a88 <_free_r>
 80044ec:	e7c7      	b.n	800447e <__ssputs_r+0x46>
	...

080044f0 <_svfiprintf_r>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	4698      	mov	r8, r3
 80044f6:	898b      	ldrh	r3, [r1, #12]
 80044f8:	4607      	mov	r7, r0
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	460d      	mov	r5, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	b09d      	sub	sp, #116	; 0x74
 8004502:	d50e      	bpl.n	8004522 <_svfiprintf_r+0x32>
 8004504:	690b      	ldr	r3, [r1, #16]
 8004506:	b963      	cbnz	r3, 8004522 <_svfiprintf_r+0x32>
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	f000 fb09 	bl	8004b20 <_malloc_r>
 800450e:	6028      	str	r0, [r5, #0]
 8004510:	6128      	str	r0, [r5, #16]
 8004512:	b920      	cbnz	r0, 800451e <_svfiprintf_r+0x2e>
 8004514:	230c      	movs	r3, #12
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800451c:	e0d1      	b.n	80046c2 <_svfiprintf_r+0x1d2>
 800451e:	2340      	movs	r3, #64	; 0x40
 8004520:	616b      	str	r3, [r5, #20]
 8004522:	2300      	movs	r3, #0
 8004524:	9309      	str	r3, [sp, #36]	; 0x24
 8004526:	2320      	movs	r3, #32
 8004528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800452c:	2330      	movs	r3, #48	; 0x30
 800452e:	f04f 0901 	mov.w	r9, #1
 8004532:	f8cd 800c 	str.w	r8, [sp, #12]
 8004536:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046dc <_svfiprintf_r+0x1ec>
 800453a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800453e:	4623      	mov	r3, r4
 8004540:	469a      	mov	sl, r3
 8004542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004546:	b10a      	cbz	r2, 800454c <_svfiprintf_r+0x5c>
 8004548:	2a25      	cmp	r2, #37	; 0x25
 800454a:	d1f9      	bne.n	8004540 <_svfiprintf_r+0x50>
 800454c:	ebba 0b04 	subs.w	fp, sl, r4
 8004550:	d00b      	beq.n	800456a <_svfiprintf_r+0x7a>
 8004552:	465b      	mov	r3, fp
 8004554:	4622      	mov	r2, r4
 8004556:	4629      	mov	r1, r5
 8004558:	4638      	mov	r0, r7
 800455a:	f7ff ff6d 	bl	8004438 <__ssputs_r>
 800455e:	3001      	adds	r0, #1
 8004560:	f000 80aa 	beq.w	80046b8 <_svfiprintf_r+0x1c8>
 8004564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004566:	445a      	add	r2, fp
 8004568:	9209      	str	r2, [sp, #36]	; 0x24
 800456a:	f89a 3000 	ldrb.w	r3, [sl]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80a2 	beq.w	80046b8 <_svfiprintf_r+0x1c8>
 8004574:	2300      	movs	r3, #0
 8004576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800457a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800457e:	f10a 0a01 	add.w	sl, sl, #1
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	9307      	str	r3, [sp, #28]
 8004586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800458a:	931a      	str	r3, [sp, #104]	; 0x68
 800458c:	4654      	mov	r4, sl
 800458e:	2205      	movs	r2, #5
 8004590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004594:	4851      	ldr	r0, [pc, #324]	; (80046dc <_svfiprintf_r+0x1ec>)
 8004596:	f000 fa41 	bl	8004a1c <memchr>
 800459a:	9a04      	ldr	r2, [sp, #16]
 800459c:	b9d8      	cbnz	r0, 80045d6 <_svfiprintf_r+0xe6>
 800459e:	06d0      	lsls	r0, r2, #27
 80045a0:	bf44      	itt	mi
 80045a2:	2320      	movmi	r3, #32
 80045a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a8:	0711      	lsls	r1, r2, #28
 80045aa:	bf44      	itt	mi
 80045ac:	232b      	movmi	r3, #43	; 0x2b
 80045ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b2:	f89a 3000 	ldrb.w	r3, [sl]
 80045b6:	2b2a      	cmp	r3, #42	; 0x2a
 80045b8:	d015      	beq.n	80045e6 <_svfiprintf_r+0xf6>
 80045ba:	4654      	mov	r4, sl
 80045bc:	2000      	movs	r0, #0
 80045be:	f04f 0c0a 	mov.w	ip, #10
 80045c2:	9a07      	ldr	r2, [sp, #28]
 80045c4:	4621      	mov	r1, r4
 80045c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ca:	3b30      	subs	r3, #48	; 0x30
 80045cc:	2b09      	cmp	r3, #9
 80045ce:	d94e      	bls.n	800466e <_svfiprintf_r+0x17e>
 80045d0:	b1b0      	cbz	r0, 8004600 <_svfiprintf_r+0x110>
 80045d2:	9207      	str	r2, [sp, #28]
 80045d4:	e014      	b.n	8004600 <_svfiprintf_r+0x110>
 80045d6:	eba0 0308 	sub.w	r3, r0, r8
 80045da:	fa09 f303 	lsl.w	r3, r9, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	46a2      	mov	sl, r4
 80045e2:	9304      	str	r3, [sp, #16]
 80045e4:	e7d2      	b.n	800458c <_svfiprintf_r+0x9c>
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	1d19      	adds	r1, r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	9103      	str	r1, [sp, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfbb      	ittet	lt
 80045f2:	425b      	neglt	r3, r3
 80045f4:	f042 0202 	orrlt.w	r2, r2, #2
 80045f8:	9307      	strge	r3, [sp, #28]
 80045fa:	9307      	strlt	r3, [sp, #28]
 80045fc:	bfb8      	it	lt
 80045fe:	9204      	strlt	r2, [sp, #16]
 8004600:	7823      	ldrb	r3, [r4, #0]
 8004602:	2b2e      	cmp	r3, #46	; 0x2e
 8004604:	d10c      	bne.n	8004620 <_svfiprintf_r+0x130>
 8004606:	7863      	ldrb	r3, [r4, #1]
 8004608:	2b2a      	cmp	r3, #42	; 0x2a
 800460a:	d135      	bne.n	8004678 <_svfiprintf_r+0x188>
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	3402      	adds	r4, #2
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	9203      	str	r2, [sp, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	bfb8      	it	lt
 800461a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046ec <_svfiprintf_r+0x1fc>
 8004624:	2203      	movs	r2, #3
 8004626:	4650      	mov	r0, sl
 8004628:	7821      	ldrb	r1, [r4, #0]
 800462a:	f000 f9f7 	bl	8004a1c <memchr>
 800462e:	b140      	cbz	r0, 8004642 <_svfiprintf_r+0x152>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	eba0 000a 	sub.w	r0, r0, sl
 8004636:	fa03 f000 	lsl.w	r0, r3, r0
 800463a:	9b04      	ldr	r3, [sp, #16]
 800463c:	3401      	adds	r4, #1
 800463e:	4303      	orrs	r3, r0
 8004640:	9304      	str	r3, [sp, #16]
 8004642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004646:	2206      	movs	r2, #6
 8004648:	4825      	ldr	r0, [pc, #148]	; (80046e0 <_svfiprintf_r+0x1f0>)
 800464a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800464e:	f000 f9e5 	bl	8004a1c <memchr>
 8004652:	2800      	cmp	r0, #0
 8004654:	d038      	beq.n	80046c8 <_svfiprintf_r+0x1d8>
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <_svfiprintf_r+0x1f4>)
 8004658:	bb1b      	cbnz	r3, 80046a2 <_svfiprintf_r+0x1b2>
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	3307      	adds	r3, #7
 800465e:	f023 0307 	bic.w	r3, r3, #7
 8004662:	3308      	adds	r3, #8
 8004664:	9303      	str	r3, [sp, #12]
 8004666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004668:	4433      	add	r3, r6
 800466a:	9309      	str	r3, [sp, #36]	; 0x24
 800466c:	e767      	b.n	800453e <_svfiprintf_r+0x4e>
 800466e:	460c      	mov	r4, r1
 8004670:	2001      	movs	r0, #1
 8004672:	fb0c 3202 	mla	r2, ip, r2, r3
 8004676:	e7a5      	b.n	80045c4 <_svfiprintf_r+0xd4>
 8004678:	2300      	movs	r3, #0
 800467a:	f04f 0c0a 	mov.w	ip, #10
 800467e:	4619      	mov	r1, r3
 8004680:	3401      	adds	r4, #1
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	4620      	mov	r0, r4
 8004686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468a:	3a30      	subs	r2, #48	; 0x30
 800468c:	2a09      	cmp	r2, #9
 800468e:	d903      	bls.n	8004698 <_svfiprintf_r+0x1a8>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0c5      	beq.n	8004620 <_svfiprintf_r+0x130>
 8004694:	9105      	str	r1, [sp, #20]
 8004696:	e7c3      	b.n	8004620 <_svfiprintf_r+0x130>
 8004698:	4604      	mov	r4, r0
 800469a:	2301      	movs	r3, #1
 800469c:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a0:	e7f0      	b.n	8004684 <_svfiprintf_r+0x194>
 80046a2:	ab03      	add	r3, sp, #12
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	462a      	mov	r2, r5
 80046a8:	4638      	mov	r0, r7
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <_svfiprintf_r+0x1f8>)
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	f3af 8000 	nop.w
 80046b2:	1c42      	adds	r2, r0, #1
 80046b4:	4606      	mov	r6, r0
 80046b6:	d1d6      	bne.n	8004666 <_svfiprintf_r+0x176>
 80046b8:	89ab      	ldrh	r3, [r5, #12]
 80046ba:	065b      	lsls	r3, r3, #25
 80046bc:	f53f af2c 	bmi.w	8004518 <_svfiprintf_r+0x28>
 80046c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c2:	b01d      	add	sp, #116	; 0x74
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c8:	ab03      	add	r3, sp, #12
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	462a      	mov	r2, r5
 80046ce:	4638      	mov	r0, r7
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_svfiprintf_r+0x1f8>)
 80046d2:	a904      	add	r1, sp, #16
 80046d4:	f000 f87c 	bl	80047d0 <_printf_i>
 80046d8:	e7eb      	b.n	80046b2 <_svfiprintf_r+0x1c2>
 80046da:	bf00      	nop
 80046dc:	08004d0c 	.word	0x08004d0c
 80046e0:	08004d16 	.word	0x08004d16
 80046e4:	00000000 	.word	0x00000000
 80046e8:	08004439 	.word	0x08004439
 80046ec:	08004d12 	.word	0x08004d12

080046f0 <_printf_common>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4616      	mov	r6, r2
 80046f6:	4699      	mov	r9, r3
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	690b      	ldr	r3, [r1, #16]
 80046fc:	4607      	mov	r7, r0
 80046fe:	4293      	cmp	r3, r2
 8004700:	bfb8      	it	lt
 8004702:	4613      	movlt	r3, r2
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800470a:	460c      	mov	r4, r1
 800470c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004710:	b10a      	cbz	r2, 8004716 <_printf_common+0x26>
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	0699      	lsls	r1, r3, #26
 800471a:	bf42      	ittt	mi
 800471c:	6833      	ldrmi	r3, [r6, #0]
 800471e:	3302      	addmi	r3, #2
 8004720:	6033      	strmi	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d106      	bne.n	8004738 <_printf_common+0x48>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	6832      	ldr	r2, [r6, #0]
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	42ab      	cmp	r3, r5
 8004736:	dc28      	bgt.n	800478a <_printf_common+0x9a>
 8004738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800473c:	1e13      	subs	r3, r2, #0
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d42d      	bmi.n	80047a4 <_printf_common+0xb4>
 8004748:	4649      	mov	r1, r9
 800474a:	4638      	mov	r0, r7
 800474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d020      	beq.n	8004798 <_printf_common+0xa8>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	68e5      	ldr	r5, [r4, #12]
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf18      	it	ne
 8004762:	2500      	movne	r5, #0
 8004764:	6832      	ldr	r2, [r6, #0]
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	bf08      	it	eq
 800476e:	1aad      	subeq	r5, r5, r2
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	bf08      	it	eq
 8004774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004778:	4293      	cmp	r3, r2
 800477a:	bfc4      	itt	gt
 800477c:	1a9b      	subgt	r3, r3, r2
 800477e:	18ed      	addgt	r5, r5, r3
 8004780:	341a      	adds	r4, #26
 8004782:	42b5      	cmp	r5, r6
 8004784:	d11a      	bne.n	80047bc <_printf_common+0xcc>
 8004786:	2000      	movs	r0, #0
 8004788:	e008      	b.n	800479c <_printf_common+0xac>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4649      	mov	r1, r9
 8004790:	4638      	mov	r0, r7
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d103      	bne.n	80047a0 <_printf_common+0xb0>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7c4      	b.n	800472e <_printf_common+0x3e>
 80047a4:	2030      	movs	r0, #48	; 0x30
 80047a6:	18e1      	adds	r1, r4, r3
 80047a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b2:	4422      	add	r2, r4
 80047b4:	3302      	adds	r3, #2
 80047b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ba:	e7c5      	b.n	8004748 <_printf_common+0x58>
 80047bc:	2301      	movs	r3, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d0e6      	beq.n	8004798 <_printf_common+0xa8>
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7d9      	b.n	8004782 <_printf_common+0x92>
	...

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	460c      	mov	r4, r1
 80047d6:	7e27      	ldrb	r7, [r4, #24]
 80047d8:	4691      	mov	r9, r2
 80047da:	2f78      	cmp	r7, #120	; 0x78
 80047dc:	4680      	mov	r8, r0
 80047de:	469a      	mov	sl, r3
 80047e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	; 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d9 	beq.w	80049a4 <_printf_i+0x1d4>
 80047f2:	2f58      	cmp	r7, #88	; 0x58
 80047f4:	f000 80a4 	beq.w	8004940 <_printf_i+0x170>
 80047f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a001      	add	r0, pc, #4	; (adr r0, 8004810 <_printf_i+0x40>)
 800480c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	0800498b 	.word	0x0800498b
 8004840:	080048ad 	.word	0x080048ad
 8004844:	0800496d 	.word	0x0800496d
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049ad 	.word	0x080049ad
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004975 	.word	0x08004975
 8004868:	680b      	ldr	r3, [r1, #0]
 800486a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	600a      	str	r2, [r1, #0]
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e0a4      	b.n	80049c6 <_printf_i+0x1f6>
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	6808      	ldr	r0, [r1, #0]
 8004880:	062e      	lsls	r6, r5, #24
 8004882:	f100 0304 	add.w	r3, r0, #4
 8004886:	d50a      	bpl.n	800489e <_printf_i+0xce>
 8004888:	6805      	ldr	r5, [r0, #0]
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	2d00      	cmp	r5, #0
 800488e:	da03      	bge.n	8004898 <_printf_i+0xc8>
 8004890:	232d      	movs	r3, #45	; 0x2d
 8004892:	426d      	negs	r5, r5
 8004894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004898:	230a      	movs	r3, #10
 800489a:	485e      	ldr	r0, [pc, #376]	; (8004a14 <_printf_i+0x244>)
 800489c:	e019      	b.n	80048d2 <_printf_i+0x102>
 800489e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048a2:	6805      	ldr	r5, [r0, #0]
 80048a4:	600b      	str	r3, [r1, #0]
 80048a6:	bf18      	it	ne
 80048a8:	b22d      	sxthne	r5, r5
 80048aa:	e7ef      	b.n	800488c <_printf_i+0xbc>
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	1d18      	adds	r0, r3, #4
 80048b2:	6008      	str	r0, [r1, #0]
 80048b4:	0628      	lsls	r0, r5, #24
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0xec>
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0xf2>
 80048bc:	0669      	lsls	r1, r5, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0xe8>
 80048c0:	881d      	ldrh	r5, [r3, #0]
 80048c2:	2f6f      	cmp	r7, #111	; 0x6f
 80048c4:	bf0c      	ite	eq
 80048c6:	2308      	moveq	r3, #8
 80048c8:	230a      	movne	r3, #10
 80048ca:	4852      	ldr	r0, [pc, #328]	; (8004a14 <_printf_i+0x244>)
 80048cc:	2100      	movs	r1, #0
 80048ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048d2:	6866      	ldr	r6, [r4, #4]
 80048d4:	2e00      	cmp	r6, #0
 80048d6:	bfa8      	it	ge
 80048d8:	6821      	ldrge	r1, [r4, #0]
 80048da:	60a6      	str	r6, [r4, #8]
 80048dc:	bfa4      	itt	ge
 80048de:	f021 0104 	bicge.w	r1, r1, #4
 80048e2:	6021      	strge	r1, [r4, #0]
 80048e4:	b90d      	cbnz	r5, 80048ea <_printf_i+0x11a>
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	d04d      	beq.n	8004986 <_printf_i+0x1b6>
 80048ea:	4616      	mov	r6, r2
 80048ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80048f0:	fb03 5711 	mls	r7, r3, r1, r5
 80048f4:	5dc7      	ldrb	r7, [r0, r7]
 80048f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048fa:	462f      	mov	r7, r5
 80048fc:	42bb      	cmp	r3, r7
 80048fe:	460d      	mov	r5, r1
 8004900:	d9f4      	bls.n	80048ec <_printf_i+0x11c>
 8004902:	2b08      	cmp	r3, #8
 8004904:	d10b      	bne.n	800491e <_printf_i+0x14e>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	07df      	lsls	r7, r3, #31
 800490a:	d508      	bpl.n	800491e <_printf_i+0x14e>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	6861      	ldr	r1, [r4, #4]
 8004910:	4299      	cmp	r1, r3
 8004912:	bfde      	ittt	le
 8004914:	2330      	movle	r3, #48	; 0x30
 8004916:	f806 3c01 	strble.w	r3, [r6, #-1]
 800491a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800491e:	1b92      	subs	r2, r2, r6
 8004920:	6122      	str	r2, [r4, #16]
 8004922:	464b      	mov	r3, r9
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f8cd a000 	str.w	sl, [sp]
 800492c:	aa03      	add	r2, sp, #12
 800492e:	f7ff fedf 	bl	80046f0 <_printf_common>
 8004932:	3001      	adds	r0, #1
 8004934:	d14c      	bne.n	80049d0 <_printf_i+0x200>
 8004936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800493a:	b004      	add	sp, #16
 800493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004940:	4834      	ldr	r0, [pc, #208]	; (8004a14 <_printf_i+0x244>)
 8004942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004946:	680e      	ldr	r6, [r1, #0]
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f856 5b04 	ldr.w	r5, [r6], #4
 800494e:	061f      	lsls	r7, r3, #24
 8004950:	600e      	str	r6, [r1, #0]
 8004952:	d514      	bpl.n	800497e <_printf_i+0x1ae>
 8004954:	07d9      	lsls	r1, r3, #31
 8004956:	bf44      	itt	mi
 8004958:	f043 0320 	orrmi.w	r3, r3, #32
 800495c:	6023      	strmi	r3, [r4, #0]
 800495e:	b91d      	cbnz	r5, 8004968 <_printf_i+0x198>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2310      	movs	r3, #16
 800496a:	e7af      	b.n	80048cc <_printf_i+0xfc>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	f043 0320 	orr.w	r3, r3, #32
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2378      	movs	r3, #120	; 0x78
 8004976:	4828      	ldr	r0, [pc, #160]	; (8004a18 <_printf_i+0x248>)
 8004978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800497c:	e7e3      	b.n	8004946 <_printf_i+0x176>
 800497e:	065e      	lsls	r6, r3, #25
 8004980:	bf48      	it	mi
 8004982:	b2ad      	uxthmi	r5, r5
 8004984:	e7e6      	b.n	8004954 <_printf_i+0x184>
 8004986:	4616      	mov	r6, r2
 8004988:	e7bb      	b.n	8004902 <_printf_i+0x132>
 800498a:	680b      	ldr	r3, [r1, #0]
 800498c:	6826      	ldr	r6, [r4, #0]
 800498e:	1d1d      	adds	r5, r3, #4
 8004990:	6960      	ldr	r0, [r4, #20]
 8004992:	600d      	str	r5, [r1, #0]
 8004994:	0635      	lsls	r5, r6, #24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	d501      	bpl.n	800499e <_printf_i+0x1ce>
 800499a:	6018      	str	r0, [r3, #0]
 800499c:	e002      	b.n	80049a4 <_printf_i+0x1d4>
 800499e:	0671      	lsls	r1, r6, #25
 80049a0:	d5fb      	bpl.n	800499a <_printf_i+0x1ca>
 80049a2:	8018      	strh	r0, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	4616      	mov	r6, r2
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	e7ba      	b.n	8004922 <_printf_i+0x152>
 80049ac:	680b      	ldr	r3, [r1, #0]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	600a      	str	r2, [r1, #0]
 80049b2:	681e      	ldr	r6, [r3, #0]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4630      	mov	r0, r6
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	f000 f82f 	bl	8004a1c <memchr>
 80049be:	b108      	cbz	r0, 80049c4 <_printf_i+0x1f4>
 80049c0:	1b80      	subs	r0, r0, r6
 80049c2:	6060      	str	r0, [r4, #4]
 80049c4:	6863      	ldr	r3, [r4, #4]
 80049c6:	6123      	str	r3, [r4, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ce:	e7a8      	b.n	8004922 <_printf_i+0x152>
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	47d0      	blx	sl
 80049da:	3001      	adds	r0, #1
 80049dc:	d0ab      	beq.n	8004936 <_printf_i+0x166>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	079b      	lsls	r3, r3, #30
 80049e2:	d413      	bmi.n	8004a0c <_printf_i+0x23c>
 80049e4:	68e0      	ldr	r0, [r4, #12]
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	4298      	cmp	r0, r3
 80049ea:	bfb8      	it	lt
 80049ec:	4618      	movlt	r0, r3
 80049ee:	e7a4      	b.n	800493a <_printf_i+0x16a>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4632      	mov	r2, r6
 80049f4:	4649      	mov	r1, r9
 80049f6:	4640      	mov	r0, r8
 80049f8:	47d0      	blx	sl
 80049fa:	3001      	adds	r0, #1
 80049fc:	d09b      	beq.n	8004936 <_printf_i+0x166>
 80049fe:	3501      	adds	r5, #1
 8004a00:	68e3      	ldr	r3, [r4, #12]
 8004a02:	9903      	ldr	r1, [sp, #12]
 8004a04:	1a5b      	subs	r3, r3, r1
 8004a06:	42ab      	cmp	r3, r5
 8004a08:	dcf2      	bgt.n	80049f0 <_printf_i+0x220>
 8004a0a:	e7eb      	b.n	80049e4 <_printf_i+0x214>
 8004a0c:	2500      	movs	r5, #0
 8004a0e:	f104 0619 	add.w	r6, r4, #25
 8004a12:	e7f5      	b.n	8004a00 <_printf_i+0x230>
 8004a14:	08004d1d 	.word	0x08004d1d
 8004a18:	08004d2e 	.word	0x08004d2e

08004a1c <memchr>:
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	b2c9      	uxtb	r1, r1
 8004a22:	4402      	add	r2, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	d101      	bne.n	8004a2e <memchr+0x12>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e003      	b.n	8004a36 <memchr+0x1a>
 8004a2e:	7804      	ldrb	r4, [r0, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	428c      	cmp	r4, r1
 8004a34:	d1f6      	bne.n	8004a24 <memchr+0x8>
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <memcpy>:
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	4770      	bx	lr
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a50:	d1f9      	bne.n	8004a46 <memcpy+0xe>
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <memmove>:
 8004a54:	4288      	cmp	r0, r1
 8004a56:	b510      	push	{r4, lr}
 8004a58:	eb01 0402 	add.w	r4, r1, r2
 8004a5c:	d902      	bls.n	8004a64 <memmove+0x10>
 8004a5e:	4284      	cmp	r4, r0
 8004a60:	4623      	mov	r3, r4
 8004a62:	d807      	bhi.n	8004a74 <memmove+0x20>
 8004a64:	1e43      	subs	r3, r0, #1
 8004a66:	42a1      	cmp	r1, r4
 8004a68:	d008      	beq.n	8004a7c <memmove+0x28>
 8004a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a72:	e7f8      	b.n	8004a66 <memmove+0x12>
 8004a74:	4601      	mov	r1, r0
 8004a76:	4402      	add	r2, r0
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d100      	bne.n	8004a7e <memmove+0x2a>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a86:	e7f7      	b.n	8004a78 <memmove+0x24>

08004a88 <_free_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d043      	beq.n	8004b18 <_free_r+0x90>
 8004a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a94:	1f0c      	subs	r4, r1, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfb8      	it	lt
 8004a9a:	18e4      	addlt	r4, r4, r3
 8004a9c:	f000 f8d0 	bl	8004c40 <__malloc_lock>
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <_free_r+0x94>)
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	b933      	cbnz	r3, 8004ab6 <_free_r+0x2e>
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	6014      	str	r4, [r2, #0]
 8004aac:	4628      	mov	r0, r5
 8004aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab2:	f000 b8cb 	b.w	8004c4c <__malloc_unlock>
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	d90a      	bls.n	8004ad0 <_free_r+0x48>
 8004aba:	6821      	ldr	r1, [r4, #0]
 8004abc:	1862      	adds	r2, r4, r1
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	bf01      	itttt	eq
 8004ac2:	681a      	ldreq	r2, [r3, #0]
 8004ac4:	685b      	ldreq	r3, [r3, #4]
 8004ac6:	1852      	addeq	r2, r2, r1
 8004ac8:	6022      	streq	r2, [r4, #0]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6004      	str	r4, [r0, #0]
 8004ace:	e7ed      	b.n	8004aac <_free_r+0x24>
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b10b      	cbz	r3, 8004ada <_free_r+0x52>
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	d9fa      	bls.n	8004ad0 <_free_r+0x48>
 8004ada:	6811      	ldr	r1, [r2, #0]
 8004adc:	1850      	adds	r0, r2, r1
 8004ade:	42a0      	cmp	r0, r4
 8004ae0:	d10b      	bne.n	8004afa <_free_r+0x72>
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	4401      	add	r1, r0
 8004ae6:	1850      	adds	r0, r2, r1
 8004ae8:	4283      	cmp	r3, r0
 8004aea:	6011      	str	r1, [r2, #0]
 8004aec:	d1de      	bne.n	8004aac <_free_r+0x24>
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4401      	add	r1, r0
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	6053      	str	r3, [r2, #4]
 8004af8:	e7d8      	b.n	8004aac <_free_r+0x24>
 8004afa:	d902      	bls.n	8004b02 <_free_r+0x7a>
 8004afc:	230c      	movs	r3, #12
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	e7d4      	b.n	8004aac <_free_r+0x24>
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	1821      	adds	r1, r4, r0
 8004b06:	428b      	cmp	r3, r1
 8004b08:	bf01      	itttt	eq
 8004b0a:	6819      	ldreq	r1, [r3, #0]
 8004b0c:	685b      	ldreq	r3, [r3, #4]
 8004b0e:	1809      	addeq	r1, r1, r0
 8004b10:	6021      	streq	r1, [r4, #0]
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	6054      	str	r4, [r2, #4]
 8004b16:	e7c9      	b.n	8004aac <_free_r+0x24>
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000090 	.word	0x20000090

08004b20 <_malloc_r>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	1ccd      	adds	r5, r1, #3
 8004b24:	f025 0503 	bic.w	r5, r5, #3
 8004b28:	3508      	adds	r5, #8
 8004b2a:	2d0c      	cmp	r5, #12
 8004b2c:	bf38      	it	cc
 8004b2e:	250c      	movcc	r5, #12
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	4606      	mov	r6, r0
 8004b34:	db01      	blt.n	8004b3a <_malloc_r+0x1a>
 8004b36:	42a9      	cmp	r1, r5
 8004b38:	d903      	bls.n	8004b42 <_malloc_r+0x22>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b42:	f000 f87d 	bl	8004c40 <__malloc_lock>
 8004b46:	4921      	ldr	r1, [pc, #132]	; (8004bcc <_malloc_r+0xac>)
 8004b48:	680a      	ldr	r2, [r1, #0]
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	b99c      	cbnz	r4, 8004b76 <_malloc_r+0x56>
 8004b4e:	4f20      	ldr	r7, [pc, #128]	; (8004bd0 <_malloc_r+0xb0>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b923      	cbnz	r3, 8004b5e <_malloc_r+0x3e>
 8004b54:	4621      	mov	r1, r4
 8004b56:	4630      	mov	r0, r6
 8004b58:	f000 f862 	bl	8004c20 <_sbrk_r>
 8004b5c:	6038      	str	r0, [r7, #0]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 f85d 	bl	8004c20 <_sbrk_r>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d123      	bne.n	8004bb2 <_malloc_r+0x92>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	f000 f86c 	bl	8004c4c <__malloc_unlock>
 8004b74:	e7e3      	b.n	8004b3e <_malloc_r+0x1e>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	1b5b      	subs	r3, r3, r5
 8004b7a:	d417      	bmi.n	8004bac <_malloc_r+0x8c>
 8004b7c:	2b0b      	cmp	r3, #11
 8004b7e:	d903      	bls.n	8004b88 <_malloc_r+0x68>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	441c      	add	r4, r3
 8004b84:	6025      	str	r5, [r4, #0]
 8004b86:	e004      	b.n	8004b92 <_malloc_r+0x72>
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	42a2      	cmp	r2, r4
 8004b8c:	bf0c      	ite	eq
 8004b8e:	600b      	streq	r3, [r1, #0]
 8004b90:	6053      	strne	r3, [r2, #4]
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f85a 	bl	8004c4c <__malloc_unlock>
 8004b98:	f104 000b 	add.w	r0, r4, #11
 8004b9c:	1d23      	adds	r3, r4, #4
 8004b9e:	f020 0007 	bic.w	r0, r0, #7
 8004ba2:	1ac2      	subs	r2, r0, r3
 8004ba4:	d0cc      	beq.n	8004b40 <_malloc_r+0x20>
 8004ba6:	1a1b      	subs	r3, r3, r0
 8004ba8:	50a3      	str	r3, [r4, r2]
 8004baa:	e7c9      	b.n	8004b40 <_malloc_r+0x20>
 8004bac:	4622      	mov	r2, r4
 8004bae:	6864      	ldr	r4, [r4, #4]
 8004bb0:	e7cc      	b.n	8004b4c <_malloc_r+0x2c>
 8004bb2:	1cc4      	adds	r4, r0, #3
 8004bb4:	f024 0403 	bic.w	r4, r4, #3
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d0e3      	beq.n	8004b84 <_malloc_r+0x64>
 8004bbc:	1a21      	subs	r1, r4, r0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f000 f82e 	bl	8004c20 <_sbrk_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1dd      	bne.n	8004b84 <_malloc_r+0x64>
 8004bc8:	e7cf      	b.n	8004b6a <_malloc_r+0x4a>
 8004bca:	bf00      	nop
 8004bcc:	20000090 	.word	0x20000090
 8004bd0:	20000094 	.word	0x20000094

08004bd4 <_realloc_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	4614      	mov	r4, r2
 8004bda:	460e      	mov	r6, r1
 8004bdc:	b921      	cbnz	r1, 8004be8 <_realloc_r+0x14>
 8004bde:	4611      	mov	r1, r2
 8004be0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004be4:	f7ff bf9c 	b.w	8004b20 <_malloc_r>
 8004be8:	b922      	cbnz	r2, 8004bf4 <_realloc_r+0x20>
 8004bea:	f7ff ff4d 	bl	8004a88 <_free_r>
 8004bee:	4625      	mov	r5, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	f000 f830 	bl	8004c58 <_malloc_usable_size_r>
 8004bf8:	42a0      	cmp	r0, r4
 8004bfa:	d20f      	bcs.n	8004c1c <_realloc_r+0x48>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f7ff ff8e 	bl	8004b20 <_malloc_r>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d0f2      	beq.n	8004bf0 <_realloc_r+0x1c>
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	f7ff ff13 	bl	8004a38 <memcpy>
 8004c12:	4631      	mov	r1, r6
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ff37 	bl	8004a88 <_free_r>
 8004c1a:	e7e9      	b.n	8004bf0 <_realloc_r+0x1c>
 8004c1c:	4635      	mov	r5, r6
 8004c1e:	e7e7      	b.n	8004bf0 <_realloc_r+0x1c>

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	2300      	movs	r3, #0
 8004c24:	4d05      	ldr	r5, [pc, #20]	; (8004c3c <_sbrk_r+0x1c>)
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fa3c 	bl	80010a8 <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000270 	.word	0x20000270

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_lock+0x8>)
 8004c42:	f000 b811 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000278 	.word	0x20000278

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f000 b80c 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	20000278 	.word	0x20000278

08004c58 <_malloc_usable_size_r>:
 8004c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c5c:	1f18      	subs	r0, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfbc      	itt	lt
 8004c62:	580b      	ldrlt	r3, [r1, r0]
 8004c64:	18c0      	addlt	r0, r0, r3
 8004c66:	4770      	bx	lr

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
