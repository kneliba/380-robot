
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800cd80  0800cd80  0001cd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  000202c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1cc  0800d1cc  000202c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1cc  0800d1cc  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d0  0800d1d0  0001d1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800d1d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200002c8  0800d49c  000202c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800d49c  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015257  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003285  00000000  00000000  00035548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  000387d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00039cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb1b  00000000  00000000  0003b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dc1  00000000  00000000  00056b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ed0  00000000  00000000  0007094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010681c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  0010686c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c8 	.word	0x200002c8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd68 	.word	0x0800cd68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002cc 	.word	0x200002cc
 800014c:	0800cd68 	.word	0x0800cd68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <drive_forward>:

static double ARR = 40000.0;

// drive forward - speed %
void drive_forward (TIM_HandleTypeDef *htim, double speed)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	e9c7 2300 	strd	r2, r3, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <drive_forward+0x84>)
 80010ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b2:	f7ff fb3b 	bl	800072c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <drive_forward+0x88>)
 80010c4:	f7ff f852 	bl	800016c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double command = (pulse_width/20.0)*ARR;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <drive_forward+0x8c>)
 80010d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010da:	f7ff fb27 	bl	800072c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <drive_forward+0x90>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f9f4 	bl	80004d8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	TIM2->CCR1 = command; // left
 80010f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80010fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001100:	f7ff fcc2 	bl	8000a88 <__aeabi_d2uiz>
 8001104:	4603      	mov	r3, r0
 8001106:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = command; // right
 8001108:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800110c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001110:	f7ff fcba 	bl	8000a88 <__aeabi_d2uiz>
 8001114:	4603      	mov	r3, r0
 8001116:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	40590000 	.word	0x40590000
 8001124:	3ff00000 	.word	0x3ff00000
 8001128:	40340000 	.word	0x40340000
 800112c:	20000000 	.word	0x20000000

08001130 <stop>:

void stop (TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	drive_forward (htim, 0);
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffab 	bl	800109c <drive_forward>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <turn_right>:

// turn right
void turn_right (TIM_HandleTypeDef *htim)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	// spin left motor
	double speed = 10;
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <turn_right+0xbc>)
 800115e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double pulse_width = 1.0 + (speed/100.0);
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <turn_right+0xc0>)
 8001168:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800116c:	f7ff fade 	bl	800072c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <turn_right+0xc4>)
 800117e:	f7fe fff5 	bl	800016c <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double command = (pulse_width/20.0)*ARR;
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <turn_right+0xc8>)
 8001190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001194:	f7ff faca 	bl	800072c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <turn_right+0xcc>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff f997 	bl	80004d8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR1 = command;
 80011b2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80011b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ba:	f7ff fc65 	bl	8000a88 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	6363      	str	r3, [r4, #52]	; 0x34

	// hold right motor
	pulse_width = 1.0;
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <turn_right+0xc4>)
 80011c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	command = (pulse_width/20.0)*ARR;
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <turn_right+0xc8>)
 80011d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d6:	f7ff faa9 	bl	800072c <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <turn_right+0xcc>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR2 = command;
 80011f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80011f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4603      	mov	r3, r0
 8001202:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001204:	bf00      	nop
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	40240000 	.word	0x40240000
 8001210:	40590000 	.word	0x40590000
 8001214:	3ff00000 	.word	0x3ff00000
 8001218:	40340000 	.word	0x40340000
 800121c:	20000000 	.word	0x20000000

08001220 <accelerate>:

// accelerate to desired speed
void accelerate (TIM_HandleTypeDef *htim, double final_speed)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 800122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8d6 	bl	80003e4 <__aeabi_ui2d>
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <accelerate+0xa8>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fa75 	bl	800072c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <accelerate+0xac>)
 8001250:	f7ff f942 	bl	80004d8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <accelerate+0xb0>)
 8001262:	f7fe ff81 	bl	8000168 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <accelerate+0xb4>)
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (speed < final_speed)
 8001280:	e013      	b.n	80012aa <accelerate+0x8a>
	{
		drive_forward(htim, speed);
 8001282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff ff08 	bl	800109c <drive_forward>
		speed += 2;
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001298:	f7fe ff68 	bl	800016c <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f003 fefd 	bl	80050a4 <HAL_Delay>
	while (speed < final_speed)
 80012aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b2:	f7ff fb83 	bl	80009bc <__aeabi_dcmplt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e2      	bne.n	8001282 <accelerate+0x62>
	}
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	40340000 	.word	0x40340000
 80012d0:	3ff00000 	.word	0x3ff00000
 80012d4:	40590000 	.word	0x40590000

080012d8 <decelerate>:

// decelerate to 0
void decelerate (TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f87c 	bl	80003e4 <__aeabi_ui2d>
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <decelerate+0xa8>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fa1b 	bl	800072c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <decelerate+0xac>)
 8001304:	f7ff f8e8 	bl	80004d8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <decelerate+0xb0>)
 8001316:	f7fe ff27 	bl	8000168 <__aeabi_dsub>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <decelerate+0xb4>)
 8001328:	f7ff f8d6 	bl	80004d8 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (speed > 0)
 8001334:	e013      	b.n	800135e <decelerate+0x86>
	{
		drive_forward(htim, speed);
 8001336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff feae 	bl	800109c <drive_forward>
		speed -= 2;
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134c:	f7fe ff0c 	bl	8000168 <__aeabi_dsub>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	e9c7 2302 	strd	r2, r3, [r7, #8]
		HAL_Delay(10);
 8001358:	200a      	movs	r0, #10
 800135a:	f003 fea3 	bl	80050a4 <HAL_Delay>
	while (speed > 0)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800136a:	f7ff fb45 	bl	80009f8 <__aeabi_dcmpgt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e0      	bne.n	8001336 <decelerate+0x5e>
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	40340000 	.word	0x40340000
 8001388:	3ff00000 	.word	0x3ff00000
 800138c:	40590000 	.word	0x40590000

08001390 <ESP_Receive>:
char turn_right_com[] = "turn_right";
char accelerate_com[] = "accelerate";
char decelerate_com[] = "decelerate";


void ESP_Receive(TIM_HandleTypeDef *htim) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	//esp command: "drive_forward_030 " where 030 is the speed percentage
	if(strncmp((char *)UART2_rxBuffer, drive_forward_com, strlen(drive_forward_com)) == 0) {
 8001398:	4833      	ldr	r0, [pc, #204]	; (8001468 <ESP_Receive+0xd8>)
 800139a:	f7fe fed9 	bl	8000150 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4931      	ldr	r1, [pc, #196]	; (8001468 <ESP_Receive+0xd8>)
 80013a4:	4831      	ldr	r0, [pc, #196]	; (800146c <ESP_Receive+0xdc>)
 80013a6:	f008 fe81 	bl	800a0ac <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10d      	bne.n	80013cc <ESP_Receive+0x3c>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, drive_forward_com);
 80013b0:	492d      	ldr	r1, [pc, #180]	; (8001468 <ESP_Receive+0xd8>)
 80013b2:	482e      	ldr	r0, [pc, #184]	; (800146c <ESP_Receive+0xdc>)
 80013b4:	f000 f864 	bl	8001480 <get_integer_from_string>
 80013b8:	60b8      	str	r0, [r7, #8]

		drive_forward(htim, speed);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f822 	bl	8000404 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe69 	bl	800109c <drive_forward>

	//esp command: "decelerate "
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
		decelerate(htim);
	}
}
 80013ca:	e048      	b.n	800145e <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, stop_com, strlen(stop_com))== 0) {
 80013cc:	4828      	ldr	r0, [pc, #160]	; (8001470 <ESP_Receive+0xe0>)
 80013ce:	f7fe febf 	bl	8000150 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4926      	ldr	r1, [pc, #152]	; (8001470 <ESP_Receive+0xe0>)
 80013d8:	4824      	ldr	r0, [pc, #144]	; (800146c <ESP_Receive+0xdc>)
 80013da:	f008 fe67 	bl	800a0ac <strncmp>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d103      	bne.n	80013ec <ESP_Receive+0x5c>
		stop(htim);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fea3 	bl	8001130 <stop>
}
 80013ea:	e038      	b.n	800145e <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, turn_right_com, strlen(turn_right_com))== 0) {
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <ESP_Receive+0xe4>)
 80013ee:	f7fe feaf 	bl	8000150 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	491f      	ldr	r1, [pc, #124]	; (8001474 <ESP_Receive+0xe4>)
 80013f8:	481c      	ldr	r0, [pc, #112]	; (800146c <ESP_Receive+0xdc>)
 80013fa:	f008 fe57 	bl	800a0ac <strncmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <ESP_Receive+0x7c>
		turn_right(htim);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fea3 	bl	8001150 <turn_right>
}
 800140a:	e028      	b.n	800145e <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, accelerate_com, strlen(accelerate_com))== 0) {
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <ESP_Receive+0xe8>)
 800140e:	f7fe fe9f 	bl	8000150 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4918      	ldr	r1, [pc, #96]	; (8001478 <ESP_Receive+0xe8>)
 8001418:	4814      	ldr	r0, [pc, #80]	; (800146c <ESP_Receive+0xdc>)
 800141a:	f008 fe47 	bl	800a0ac <strncmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10d      	bne.n	8001440 <ESP_Receive+0xb0>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, accelerate_com);
 8001424:	4914      	ldr	r1, [pc, #80]	; (8001478 <ESP_Receive+0xe8>)
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <ESP_Receive+0xdc>)
 8001428:	f000 f82a 	bl	8001480 <get_integer_from_string>
 800142c:	60f8      	str	r0, [r7, #12]
		accelerate(htim, speed);
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7fe ffe8 	bl	8000404 <__aeabi_i2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fef1 	bl	8001220 <accelerate>
}
 800143e:	e00e      	b.n	800145e <ESP_Receive+0xce>
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <ESP_Receive+0xec>)
 8001442:	f7fe fe85 	bl	8000150 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	490c      	ldr	r1, [pc, #48]	; (800147c <ESP_Receive+0xec>)
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <ESP_Receive+0xdc>)
 800144e:	f008 fe2d 	bl	800a0ac <strncmp>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <ESP_Receive+0xce>
		decelerate(htim);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff3d 	bl	80012d8 <decelerate>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	200002e4 	.word	0x200002e4
 8001470:	20000018 	.word	0x20000018
 8001474:	20000020 	.word	0x20000020
 8001478:	2000002c 	.word	0x2000002c
 800147c:	20000038 	.word	0x20000038

08001480 <get_integer_from_string>:

//3 digits numbers currently
int get_integer_from_string(char *buffer_msg, char *string_command){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	char int_substr[4];
	memcpy(int_substr, buffer_msg[strlen(string_command)+1], 4 );
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f7fe fe60 	bl	8000150 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	3301      	adds	r3, #1
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60bb      	str	r3, [r7, #8]
	int_substr[4] = '\0';
 800149e:	2300      	movs	r3, #0
 80014a0:	733b      	strb	r3, [r7, #12]

	int int_value = atoi(int_substr);
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4618      	mov	r0, r3
 80014a8:	f008 f94a 	bl	8009740 <atoi>
 80014ac:	60f8      	str	r0, [r7, #12]
	return int_value;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <invSqrt>:
// Functions

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80014c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fc0d 	bl	8000ce4 <__aeabi_fmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	617b      	str	r3, [r7, #20]
	float y = x;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	105a      	asrs	r2, r3, #1
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <invSqrt+0x74>)
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fbf7 	bl	8000ce4 <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff fbf0 	bl	8000ce4 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800150c:	f7ff fae0 	bl	8000ad0 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f7ff fbe3 	bl	8000ce4 <__aeabi_fmul>
 800151e:	4603      	mov	r3, r0
 8001520:	613b      	str	r3, [r7, #16]
	return y;
 8001522:	693b      	ldr	r3, [r7, #16]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	5f3759df 	.word	0x5f3759df

08001530 <MadgwickAHRSupdate>:

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b0ab      	sub	sp, #172	; 0xac
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800153e:	f04f 0100 	mov.w	r1, #0
 8001542:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001546:	f7ff fd61 	bl	800100c <__aeabi_fcmpeq>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01f      	beq.n	8001590 <MadgwickAHRSupdate+0x60>
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001558:	f7ff fd58 	bl	800100c <__aeabi_fcmpeq>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d016      	beq.n	8001590 <MadgwickAHRSupdate+0x60>
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800156a:	f7ff fd4f 	bl	800100c <__aeabi_fcmpeq>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f001 f948 	bl	800281c <MadgwickAHRSupdateIMU>
		return;
 800158c:	f001 b938 	b.w	8002800 <MadgwickAHRSupdate+0x12d0>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8001590:	49ae      	ldr	r1, [pc, #696]	; (800184c <MadgwickAHRSupdate+0x31c>)
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fba6 	bl	8000ce4 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 800159c:	49ab      	ldr	r1, [pc, #684]	; (800184c <MadgwickAHRSupdate+0x31c>)
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fba0 	bl	8000ce4 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 80015a8:	49a8      	ldr	r1, [pc, #672]	; (800184c <MadgwickAHRSupdate+0x31c>)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb9a 	bl	8000ce4 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80015b4:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <MadgwickAHRSupdate+0x320>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015bc:	68f9      	ldr	r1, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb90 	bl	8000ce4 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461c      	mov	r4, r3
 80015c8:	4ba2      	ldr	r3, [pc, #648]	; (8001854 <MadgwickAHRSupdate+0x324>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb88 	bl	8000ce4 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fa79 	bl	8000ad0 <__aeabi_fsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	461c      	mov	r4, r3
 80015e2:	4b9d      	ldr	r3, [pc, #628]	; (8001858 <MadgwickAHRSupdate+0x328>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fb7b 	bl	8000ce4 <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fa6c 	bl	8000ad0 <__aeabi_fsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb70 	bl	8000ce4 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800160a:	4b94      	ldr	r3, [pc, #592]	; (800185c <MadgwickAHRSupdate+0x32c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb67 	bl	8000ce4 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	461c      	mov	r4, r3
 800161a:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <MadgwickAHRSupdate+0x324>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb5f 	bl	8000ce4 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff fa52 	bl	8000ad4 <__addsf3>
 8001630:	4603      	mov	r3, r0
 8001632:	461c      	mov	r4, r3
 8001634:	4b88      	ldr	r3, [pc, #544]	; (8001858 <MadgwickAHRSupdate+0x328>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb52 	bl	8000ce4 <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fa43 	bl	8000ad0 <__aeabi_fsub>
 800164a:	4603      	mov	r3, r0
 800164c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb47 	bl	8000ce4 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800165c:	4b7f      	ldr	r3, [pc, #508]	; (800185c <MadgwickAHRSupdate+0x32c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb3e 	bl	8000ce4 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	461c      	mov	r4, r3
 800166c:	4b78      	ldr	r3, [pc, #480]	; (8001850 <MadgwickAHRSupdate+0x320>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb36 	bl	8000ce4 <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fa27 	bl	8000ad0 <__aeabi_fsub>
 8001682:	4603      	mov	r3, r0
 8001684:	461c      	mov	r4, r3
 8001686:	4b74      	ldr	r3, [pc, #464]	; (8001858 <MadgwickAHRSupdate+0x328>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb29 	bl	8000ce4 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fa1c 	bl	8000ad4 <__addsf3>
 800169c:	4603      	mov	r3, r0
 800169e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb1e 	bl	8000ce4 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <MadgwickAHRSupdate+0x32c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb15 	bl	8000ce4 <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461c      	mov	r4, r3
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <MadgwickAHRSupdate+0x320>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb0d 	bl	8000ce4 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fa00 	bl	8000ad4 <__addsf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461c      	mov	r4, r3
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <MadgwickAHRSupdate+0x324>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb00 	bl	8000ce4 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff f9f1 	bl	8000ad0 <__aeabi_fsub>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff faf5 	bl	8000ce4 <__aeabi_fmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7ff fc81 	bl	800100c <__aeabi_fcmpeq>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d012      	beq.n	8001736 <MadgwickAHRSupdate+0x206>
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001718:	f7ff fc78 	bl	800100c <__aeabi_fcmpeq>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <MadgwickAHRSupdate+0x206>
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800172a:	f7ff fc6f 	bl	800100c <__aeabi_fcmpeq>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 87b6 	bne.w	80026a2 <MadgwickAHRSupdate+0x1172>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7ff fad3 	bl	8000ce4 <__aeabi_fmul>
 800173e:	4603      	mov	r3, r0
 8001740:	461c      	mov	r4, r3
 8001742:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001746:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800174a:	f7ff facb 	bl	8000ce4 <__aeabi_fmul>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff f9be 	bl	8000ad4 <__addsf3>
 8001758:	4603      	mov	r3, r0
 800175a:	461c      	mov	r4, r3
 800175c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001760:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001764:	f7ff fabe 	bl	8000ce4 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	4619      	mov	r1, r3
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff f9b1 	bl	8000ad4 <__addsf3>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe9f 	bl	80014b8 <invSqrt>
 800177a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 800177e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001782:	6838      	ldr	r0, [r7, #0]
 8001784:	f7ff faae 	bl	8000ce4 <__aeabi_fmul>
 8001788:	4603      	mov	r3, r0
 800178a:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800178c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001790:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001794:	f7ff faa6 	bl	8000ce4 <__aeabi_fmul>
 8001798:	4603      	mov	r3, r0
 800179a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;
 800179e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80017a2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80017a6:	f7ff fa9d 	bl	8000ce4 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80017b0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80017b4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80017b8:	f7ff fa94 	bl	8000ce4 <__aeabi_fmul>
 80017bc:	4603      	mov	r3, r0
 80017be:	461c      	mov	r4, r3
 80017c0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80017c4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80017c8:	f7ff fa8c 	bl	8000ce4 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff f97f 	bl	8000ad4 <__addsf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461c      	mov	r4, r3
 80017da:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80017de:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017e2:	f7ff fa7f 	bl	8000ce4 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff f972 	bl	8000ad4 <__addsf3>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fe60 	bl	80014b8 <invSqrt>
 80017f8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 80017fc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001800:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001804:	f7ff fa6e 	bl	8000ce4 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 800180e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001812:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001816:	f7ff fa65 	bl	8000ce4 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 8001820:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001824:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001828:	f7ff fa5c 	bl	8000ce4 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MadgwickAHRSupdate+0x32c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f94b 	bl	8000ad4 <__addsf3>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001846:	f7ff fa4d 	bl	8000ce4 <__aeabi_fmul>
 800184a:	e009      	b.n	8001860 <MadgwickAHRSupdate+0x330>
 800184c:	3c8efa39 	.word	0x3c8efa39
 8001850:	20000308 	.word	0x20000308
 8001854:	2000030c 	.word	0x2000030c
 8001858:	20000310 	.word	0x20000310
 800185c:	20000048 	.word	0x20000048
 8001860:	4603      	mov	r3, r0
 8001862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 8001866:	4b99      	ldr	r3, [pc, #612]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f931 	bl	8000ad4 <__addsf3>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800187a:	f7ff fa33 	bl	8000ce4 <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 8001884:	4b91      	ldr	r3, [pc, #580]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f922 	bl	8000ad4 <__addsf3>
 8001890:	4603      	mov	r3, r0
 8001892:	4619      	mov	r1, r3
 8001894:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001898:	f7ff fa24 	bl	8000ce4 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f913 	bl	8000ad4 <__addsf3>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80018b6:	f7ff fa15 	bl	8000ce4 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 80018be:	4b83      	ldr	r3, [pc, #524]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f905 	bl	8000ad4 <__addsf3>
 80018ca:	4603      	mov	r3, r0
 80018cc:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 80018ce:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f8fd 	bl	8000ad4 <__addsf3>
 80018da:	4603      	mov	r3, r0
 80018dc:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8f5 	bl	8000ad4 <__addsf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 80018ee:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f8ed 	bl	8000ad4 <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f8e5 	bl	8000ad4 <__addsf3>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff f9e5 	bl	8000ce4 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f8d5 	bl	8000ad4 <__addsf3>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f7ff f9d5 	bl	8000ce4 <__aeabi_fmul>
 800193a:	4603      	mov	r3, r0
 800193c:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a62      	ldr	r2, [pc, #392]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9cb 	bl	8000ce4 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 8001952:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5e      	ldr	r2, [pc, #376]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9c1 	bl	8000ce4 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 8001966:	4b59      	ldr	r3, [pc, #356]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f9b7 	bl	8000ce4 <__aeabi_fmul>
 8001976:	4603      	mov	r3, r0
 8001978:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 800197a:	4b54      	ldr	r3, [pc, #336]	; (8001acc <MadgwickAHRSupdate+0x59c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a56      	ldr	r2, [pc, #344]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9ad 	bl	8000ce4 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f9a3 	bl	8000ce4 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f999 	bl	8000ce4 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <MadgwickAHRSupdate+0x5a0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f98f 	bl	8000ce4 <__aeabi_fmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 80019ca:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f985 	bl	8000ce4 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f97b 	bl	8000ce4 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f971 	bl	8000ce4 <__aeabi_fmul>
 8001a02:	4603      	mov	r3, r0
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001a06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a08:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001a0c:	f7ff f96a 	bl	8000ce4 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461c      	mov	r4, r3
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f961 	bl	8000ce4 <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff f852 	bl	8000ad0 <__aeabi_fsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461c      	mov	r4, r3
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f953 	bl	8000ce4 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff f846 	bl	8000ad4 <__addsf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461c      	mov	r4, r3
 8001a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a4e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001a52:	f7ff f947 	bl	8000ce4 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff f83a 	bl	8000ad4 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001a68:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a6a:	f7ff f93b 	bl	8000ce4 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MadgwickAHRSupdate+0x5a4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff f933 	bl	8000ce4 <__aeabi_fmul>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff f826 	bl	8000ad4 <__addsf3>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461c      	mov	r4, r3
 8001a8c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001a90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a92:	f7ff f927 	bl	8000ce4 <__aeabi_fmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MadgwickAHRSupdate+0x5a8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7ff f91f 	bl	8000ce4 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff f812 	bl	8000ad4 <__addsf3>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ab6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001aba:	f7ff f913 	bl	8000ce4 <__aeabi_fmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff f804 	bl	8000ad0 <__aeabi_fsub>
 8001ac8:	e008      	b.n	8001adc <MadgwickAHRSupdate+0x5ac>
 8001aca:	bf00      	nop
 8001acc:	20000048 	.word	0x20000048
 8001ad0:	20000308 	.word	0x20000308
 8001ad4:	2000030c 	.word	0x2000030c
 8001ad8:	20000310 	.word	0x20000310
 8001adc:	4603      	mov	r3, r0
 8001ade:	461c      	mov	r4, r3
 8001ae0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ae2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001ae6:	f7ff f8fd 	bl	8000ce4 <__aeabi_fmul>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7fe ffee 	bl	8000ad0 <__aeabi_fsub>
 8001af4:	4603      	mov	r3, r0
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001af8:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <MadgwickAHRSupdate+0x850>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f8ef 	bl	8000ce4 <__aeabi_fmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b0c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b10:	f7ff f8e8 	bl	8000ce4 <__aeabi_fmul>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7fe ffdb 	bl	8000ad4 <__addsf3>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461c      	mov	r4, r3
 8001b22:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <MadgwickAHRSupdate+0x854>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8da 	bl	8000ce4 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7fe ffcb 	bl	8000ad0 <__aeabi_fsub>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <MadgwickAHRSupdate+0x858>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f8cd 	bl	8000ce4 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7fe ffc0 	bl	8000ad4 <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461c      	mov	r4, r3
 8001b58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b5a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b5e:	f7ff f8c1 	bl	8000ce4 <__aeabi_fmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7fe ffb2 	bl	8000ad0 <__aeabi_fsub>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461c      	mov	r4, r3
 8001b70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b72:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b76:	f7ff f8b5 	bl	8000ce4 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7fe ffa8 	bl	8000ad4 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461c      	mov	r4, r3
 8001b88:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001b8c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001b8e:	f7ff f8a9 	bl	8000ce4 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <MadgwickAHRSupdate+0x850>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff f8a1 	bl	8000ce4 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7fe ff94 	bl	8000ad4 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461c      	mov	r4, r3
 8001bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bb2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001bb6:	f7ff f895 	bl	8000ce4 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7fe ff86 	bl	8000ad0 <__aeabi_fsub>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrtf(hx * hx + hy * hy);
 8001bc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bcc:	f7ff f88a 	bl	8000ce4 <__aeabi_fmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bd8:	f7ff f884 	bl	8000ce4 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7fe ff77 	bl	8000ad4 <__addsf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00a fd73 	bl	800c6d4 <sqrtf>
 8001bee:	6338      	str	r0, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bf8:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <MadgwickAHRSupdate+0x858>)
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f870 	bl	8000ce4 <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461c      	mov	r4, r3
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <MadgwickAHRSupdate+0x854>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f867 	bl	8000ce4 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7fe ff5a 	bl	8000ad4 <__addsf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461c      	mov	r4, r3
 8001c24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c26:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001c2a:	f7ff f85b 	bl	8000ce4 <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7fe ff4e 	bl	8000ad4 <__addsf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <MadgwickAHRSupdate+0x850>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f84e 	bl	8000ce4 <__aeabi_fmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7fe ff41 	bl	8000ad4 <__addsf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461c      	mov	r4, r3
 8001c56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c58:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001c5c:	f7ff f842 	bl	8000ce4 <__aeabi_fmul>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4619      	mov	r1, r3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7fe ff33 	bl	8000ad0 <__aeabi_fsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461c      	mov	r4, r3
 8001c6e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001c72:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c74:	f7ff f836 	bl	8000ce4 <__aeabi_fmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <MadgwickAHRSupdate+0x850>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff f82e 	bl	8000ce4 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7fe ff21 	bl	8000ad4 <__addsf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461c      	mov	r4, r3
 8001c96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c98:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001c9c:	f7ff f822 	bl	8000ce4 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7fe ff13 	bl	8000ad0 <__aeabi_fsub>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461c      	mov	r4, r3
 8001cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cb0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001cb4:	f7ff f816 	bl	8000ce4 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7fe ff09 	bl	8000ad4 <__addsf3>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff02 	bl	8000ad4 <__addsf3>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fefb 	bl	8000ad4 <__addsf3>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cea:	4619      	mov	r1, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fef1 	bl	8000ad4 <__addsf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe feea 	bl	8000ad0 <__aeabi_fsub>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fee5 	bl	8000ad0 <__aeabi_fsub>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7fe ffea 	bl	8000ce4 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461c      	mov	r4, r3
 8001d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d16:	4619      	mov	r1, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fedb 	bl	8000ad4 <__addsf3>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fed6 	bl	8000ad4 <__addsf3>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fece 	bl	8000ad0 <__aeabi_fsub>
 8001d34:	4603      	mov	r3, r0
 8001d36:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe ffd3 	bl	8000ce4 <__aeabi_fmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7fe fec6 	bl	8000ad4 <__addsf3>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461c      	mov	r4, r3
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MadgwickAHRSupdate+0x858>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ffc6 	bl	8000ce4 <__aeabi_fmul>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d5e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001d62:	f7fe feb5 	bl	8000ad0 <__aeabi_fsub>
 8001d66:	4603      	mov	r3, r0
 8001d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe feb0 	bl	8000ad0 <__aeabi_fsub>
 8001d70:	4603      	mov	r3, r0
 8001d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ffb5 	bl	8000ce4 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461e      	mov	r6, r3
 8001d7e:	e005      	b.n	8001d8c <MadgwickAHRSupdate+0x85c>
 8001d80:	20000310 	.word	0x20000310
 8001d84:	20000308 	.word	0x20000308
 8001d88:	2000030c 	.word	0x2000030c
 8001d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d90:	f7fe fe9e 	bl	8000ad0 <__aeabi_fsub>
 8001d94:	4603      	mov	r3, r0
 8001d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ffa3 	bl	8000ce4 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7fe fe96 	bl	8000ad4 <__addsf3>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fe8e 	bl	8000ad0 <__aeabi_fsub>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4628      	mov	r0, r5
 8001dba:	f7fe ff93 	bl	8000ce4 <__aeabi_fmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7fe fe84 	bl	8000ad0 <__aeabi_fsub>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461c      	mov	r4, r3
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dd2:	4a9f      	ldr	r2, [pc, #636]	; (8002050 <MadgwickAHRSupdate+0xb20>)
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ff83 	bl	8000ce4 <__aeabi_fmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461d      	mov	r5, r3
 8001de2:	4b9c      	ldr	r3, [pc, #624]	; (8002054 <MadgwickAHRSupdate+0xb24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe ff7b 	bl	8000ce4 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4628      	mov	r0, r5
 8001df4:	f7fe fe6e 	bl	8000ad4 <__addsf3>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dfe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e00:	f7fe fe66 	bl	8000ad0 <__aeabi_fsub>
 8001e04:	4603      	mov	r3, r0
 8001e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe ff6b 	bl	8000ce4 <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461e      	mov	r6, r3
 8001e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e14:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e16:	f7fe fe5d 	bl	8000ad4 <__addsf3>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ff60 	bl	8000ce4 <__aeabi_fmul>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4619      	mov	r1, r3
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f7fe fe53 	bl	8000ad4 <__addsf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fe4b 	bl	8000ad0 <__aeabi_fsub>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f7fe ff50 	bl	8000ce4 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7fe fe43 	bl	8000ad4 <__addsf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461c      	mov	r4, r3
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <MadgwickAHRSupdate+0xb28>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff43 	bl	8000ce4 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461d      	mov	r5, r3
 8001e62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001e64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001e66:	f7fe fe35 	bl	8000ad4 <__addsf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff38 	bl	8000ce4 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461e      	mov	r6, r3
 8001e78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e7a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e7e:	f7fe fe27 	bl	8000ad0 <__aeabi_fsub>
 8001e82:	4603      	mov	r3, r0
 8001e84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fe22 	bl	8000ad0 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff27 	bl	8000ce4 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	f7fe fe1a 	bl	8000ad4 <__addsf3>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fe12 	bl	8000ad0 <__aeabi_fsub>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f7fe ff17 	bl	8000ce4 <__aeabi_fmul>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7fe fe0a 	bl	8000ad4 <__addsf3>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fe03 	bl	8000ad4 <__addsf3>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fdfc 	bl	8000ad0 <__aeabi_fsub>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fdf7 	bl	8000ad0 <__aeabi_fsub>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fefc 	bl	8000ce4 <__aeabi_fmul>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461c      	mov	r4, r3
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fded 	bl	8000ad4 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fde8 	bl	8000ad4 <__addsf3>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fde0 	bl	8000ad0 <__aeabi_fsub>
 8001f10:	4603      	mov	r3, r0
 8001f12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fee5 	bl	8000ce4 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7fe fdd8 	bl	8000ad4 <__addsf3>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461c      	mov	r4, r3
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <MadgwickAHRSupdate+0xb24>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fed7 	bl	8000ce4 <__aeabi_fmul>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461d      	mov	r5, r3
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fdc8 	bl	8000ad4 <__addsf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f4c:	f7fe fdc0 	bl	8000ad0 <__aeabi_fsub>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461e      	mov	r6, r3
 8001f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f56:	4619      	mov	r1, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fdbb 	bl	8000ad4 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4630      	mov	r0, r6
 8001f64:	f7fe fdb4 	bl	8000ad0 <__aeabi_fsub>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fdae 	bl	8000ad0 <__aeabi_fsub>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7fe feb3 	bl	8000ce4 <__aeabi_fmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7fe fda4 	bl	8000ad0 <__aeabi_fsub>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <MadgwickAHRSupdate+0xb20>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fea6 	bl	8000ce4 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f9e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001fa2:	f7fe fd95 	bl	8000ad0 <__aeabi_fsub>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fd90 	bl	8000ad0 <__aeabi_fsub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe95 	bl	8000ce4 <__aeabi_fmul>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461e      	mov	r6, r3
 8001fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001fc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001fc2:	f7fe fd85 	bl	8000ad0 <__aeabi_fsub>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe8a 	bl	8000ce4 <__aeabi_fmul>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	f7fe fd7d 	bl	8000ad4 <__addsf3>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd75 	bl	8000ad0 <__aeabi_fsub>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4628      	mov	r0, r5
 8001fec:	f7fe fe7a 	bl	8000ce4 <__aeabi_fmul>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7fe fd6d 	bl	8000ad4 <__addsf3>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461c      	mov	r4, r3
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MadgwickAHRSupdate+0xb28>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fe6d 	bl	8000ce4 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	461d      	mov	r5, r3
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MadgwickAHRSupdate+0xb2c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fe65 	bl	8000ce4 <__aeabi_fmul>
 800201a:	4603      	mov	r3, r0
 800201c:	4619      	mov	r1, r3
 800201e:	4628      	mov	r0, r5
 8002020:	f7fe fd58 	bl	8000ad4 <__addsf3>
 8002024:	4603      	mov	r3, r0
 8002026:	461d      	mov	r5, r3
 8002028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800202a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800202c:	f7fe fd50 	bl	8000ad0 <__aeabi_fsub>
 8002030:	4603      	mov	r3, r0
 8002032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fe55 	bl	8000ce4 <__aeabi_fmul>
 800203a:	4603      	mov	r3, r0
 800203c:	461e      	mov	r6, r3
 800203e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002040:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002042:	f7fe fd47 	bl	8000ad4 <__addsf3>
 8002046:	4603      	mov	r3, r0
 8002048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800204a:	4618      	mov	r0, r3
 800204c:	e008      	b.n	8002060 <MadgwickAHRSupdate+0xb30>
 800204e:	bf00      	nop
 8002050:	20000310 	.word	0x20000310
 8002054:	20000308 	.word	0x20000308
 8002058:	2000030c 	.word	0x2000030c
 800205c:	20000048 	.word	0x20000048
 8002060:	f7fe fe40 	bl	8000ce4 <__aeabi_fmul>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	4630      	mov	r0, r6
 800206a:	f7fe fd33 	bl	8000ad4 <__addsf3>
 800206e:	4603      	mov	r3, r0
 8002070:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fd2b 	bl	8000ad0 <__aeabi_fsub>
 800207a:	4603      	mov	r3, r0
 800207c:	4619      	mov	r1, r3
 800207e:	4628      	mov	r0, r5
 8002080:	f7fe fe30 	bl	8000ce4 <__aeabi_fmul>
 8002084:	4603      	mov	r3, r0
 8002086:	4619      	mov	r1, r3
 8002088:	4620      	mov	r0, r4
 800208a:	f7fe fd23 	bl	8000ad4 <__addsf3>
 800208e:	4603      	mov	r3, r0
 8002090:	461c      	mov	r4, r3
 8002092:	4b9f      	ldr	r3, [pc, #636]	; (8002310 <MadgwickAHRSupdate+0xde0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fe23 	bl	8000ce4 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	461d      	mov	r5, r3
 80020a2:	4b9c      	ldr	r3, [pc, #624]	; (8002314 <MadgwickAHRSupdate+0xde4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe1b 	bl	8000ce4 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7fe fd0c 	bl	8000ad0 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461d      	mov	r5, r3
 80020bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80020be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80020c0:	f7fe fd08 	bl	8000ad4 <__addsf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe0b 	bl	8000ce4 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461e      	mov	r6, r3
 80020d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020d4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80020d8:	f7fe fcfa 	bl	8000ad0 <__aeabi_fsub>
 80020dc:	4603      	mov	r3, r0
 80020de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fcf5 	bl	8000ad0 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
 80020e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fdfa 	bl	8000ce4 <__aeabi_fmul>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4619      	mov	r1, r3
 80020f4:	4630      	mov	r0, r6
 80020f6:	f7fe fced 	bl	8000ad4 <__addsf3>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fce5 	bl	8000ad0 <__aeabi_fsub>
 8002106:	4603      	mov	r3, r0
 8002108:	4619      	mov	r1, r3
 800210a:	4628      	mov	r0, r5
 800210c:	f7fe fdea 	bl	8000ce4 <__aeabi_fmul>
 8002110:	4603      	mov	r3, r0
 8002112:	4619      	mov	r1, r3
 8002114:	4620      	mov	r0, r4
 8002116:	f7fe fcdd 	bl	8000ad4 <__addsf3>
 800211a:	4603      	mov	r3, r0
 800211c:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800211e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002120:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	4619      	mov	r1, r3
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fcd3 	bl	8000ad4 <__addsf3>
 800212e:	4603      	mov	r3, r0
 8002130:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fccc 	bl	8000ad0 <__aeabi_fsub>
 8002138:	4603      	mov	r3, r0
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fcc7 	bl	8000ad0 <__aeabi_fsub>
 8002142:	4603      	mov	r3, r0
 8002144:	4619      	mov	r1, r3
 8002146:	4620      	mov	r0, r4
 8002148:	f7fe fdcc 	bl	8000ce4 <__aeabi_fmul>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002152:	4619      	mov	r1, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fcbd 	bl	8000ad4 <__addsf3>
 800215a:	4603      	mov	r3, r0
 800215c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fcb8 	bl	8000ad4 <__addsf3>
 8002164:	4603      	mov	r3, r0
 8002166:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fcb0 	bl	8000ad0 <__aeabi_fsub>
 8002170:	4603      	mov	r3, r0
 8002172:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fdb5 	bl	8000ce4 <__aeabi_fmul>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fe fca8 	bl	8000ad4 <__addsf3>
 8002184:	4603      	mov	r3, r0
 8002186:	461c      	mov	r4, r3
 8002188:	4b63      	ldr	r3, [pc, #396]	; (8002318 <MadgwickAHRSupdate+0xde8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fda7 	bl	8000ce4 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	461d      	mov	r5, r3
 800219a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800219c:	4619      	mov	r1, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fc98 	bl	8000ad4 <__addsf3>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80021ac:	f7fe fc90 	bl	8000ad0 <__aeabi_fsub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461e      	mov	r6, r3
 80021b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b6:	4619      	mov	r1, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fc8b 	bl	8000ad4 <__addsf3>
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4630      	mov	r0, r6
 80021c4:	f7fe fc84 	bl	8000ad0 <__aeabi_fsub>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fc7e 	bl	8000ad0 <__aeabi_fsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4628      	mov	r0, r5
 80021da:	f7fe fd83 	bl	8000ce4 <__aeabi_fmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7fe fc74 	bl	8000ad0 <__aeabi_fsub>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461c      	mov	r4, r3
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021f2:	4a49      	ldr	r2, [pc, #292]	; (8002318 <MadgwickAHRSupdate+0xde8>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fd73 	bl	8000ce4 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	461d      	mov	r5, r3
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <MadgwickAHRSupdate+0xdec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fd6b 	bl	8000ce4 <__aeabi_fmul>
 800220e:	4603      	mov	r3, r0
 8002210:	4619      	mov	r1, r3
 8002212:	4628      	mov	r0, r5
 8002214:	f7fe fc5c 	bl	8000ad0 <__aeabi_fsub>
 8002218:	4603      	mov	r3, r0
 800221a:	461d      	mov	r5, r3
 800221c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800221e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002222:	f7fe fc55 	bl	8000ad0 <__aeabi_fsub>
 8002226:	4603      	mov	r3, r0
 8002228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fc50 	bl	8000ad0 <__aeabi_fsub>
 8002230:	4603      	mov	r3, r0
 8002232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fd55 	bl	8000ce4 <__aeabi_fmul>
 800223a:	4603      	mov	r3, r0
 800223c:	461e      	mov	r6, r3
 800223e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002240:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002242:	f7fe fc45 	bl	8000ad0 <__aeabi_fsub>
 8002246:	4603      	mov	r3, r0
 8002248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd4a 	bl	8000ce4 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4630      	mov	r0, r6
 8002256:	f7fe fc3d 	bl	8000ad4 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fc35 	bl	8000ad0 <__aeabi_fsub>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4628      	mov	r0, r5
 800226c:	f7fe fd3a 	bl	8000ce4 <__aeabi_fmul>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	4620      	mov	r0, r4
 8002276:	f7fe fc2d 	bl	8000ad4 <__addsf3>
 800227a:	4603      	mov	r3, r0
 800227c:	461c      	mov	r4, r3
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <MadgwickAHRSupdate+0xde4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fd2d 	bl	8000ce4 <__aeabi_fmul>
 800228a:	4603      	mov	r3, r0
 800228c:	461d      	mov	r5, r3
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <MadgwickAHRSupdate+0xde0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd25 	bl	8000ce4 <__aeabi_fmul>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	4628      	mov	r0, r5
 80022a0:	f7fe fc18 	bl	8000ad4 <__addsf3>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461d      	mov	r5, r3
 80022a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80022ac:	f7fe fc10 	bl	8000ad0 <__aeabi_fsub>
 80022b0:	4603      	mov	r3, r0
 80022b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd15 	bl	8000ce4 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461e      	mov	r6, r3
 80022be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022c2:	f7fe fc07 	bl	8000ad4 <__addsf3>
 80022c6:	4603      	mov	r3, r0
 80022c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fd0a 	bl	8000ce4 <__aeabi_fmul>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4619      	mov	r1, r3
 80022d4:	4630      	mov	r0, r6
 80022d6:	f7fe fbfd 	bl	8000ad4 <__addsf3>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fbf5 	bl	8000ad0 <__aeabi_fsub>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7fe fcfa 	bl	8000ce4 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7fe fbed 	bl	8000ad4 <__addsf3>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461c      	mov	r4, r3
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <MadgwickAHRSupdate+0xdec>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fced 	bl	8000ce4 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	461d      	mov	r5, r3
 800230e:	e007      	b.n	8002320 <MadgwickAHRSupdate+0xdf0>
 8002310:	20000310 	.word	0x20000310
 8002314:	20000308 	.word	0x20000308
 8002318:	2000030c 	.word	0x2000030c
 800231c:	20000048 	.word	0x20000048
 8002320:	4b9f      	ldr	r3, [pc, #636]	; (80025a0 <MadgwickAHRSupdate+0x1070>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fcdc 	bl	8000ce4 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	4619      	mov	r1, r3
 8002330:	4628      	mov	r0, r5
 8002332:	f7fe fbcd 	bl	8000ad0 <__aeabi_fsub>
 8002336:	4603      	mov	r3, r0
 8002338:	461d      	mov	r5, r3
 800233a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800233c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800233e:	f7fe fbc9 	bl	8000ad4 <__addsf3>
 8002342:	4603      	mov	r3, r0
 8002344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fccc 	bl	8000ce4 <__aeabi_fmul>
 800234c:	4603      	mov	r3, r0
 800234e:	461e      	mov	r6, r3
 8002350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002352:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002356:	f7fe fbbb 	bl	8000ad0 <__aeabi_fsub>
 800235a:	4603      	mov	r3, r0
 800235c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fbb6 	bl	8000ad0 <__aeabi_fsub>
 8002364:	4603      	mov	r3, r0
 8002366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fcbb 	bl	8000ce4 <__aeabi_fmul>
 800236e:	4603      	mov	r3, r0
 8002370:	4619      	mov	r1, r3
 8002372:	4630      	mov	r0, r6
 8002374:	f7fe fbae 	bl	8000ad4 <__addsf3>
 8002378:	4603      	mov	r3, r0
 800237a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fba6 	bl	8000ad0 <__aeabi_fsub>
 8002384:	4603      	mov	r3, r0
 8002386:	4619      	mov	r1, r3
 8002388:	4628      	mov	r0, r5
 800238a:	f7fe fcab 	bl	8000ce4 <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	4619      	mov	r1, r3
 8002392:	4620      	mov	r0, r4
 8002394:	f7fe fb9e 	bl	8000ad4 <__addsf3>
 8002398:	4603      	mov	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800239c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239e:	4619      	mov	r1, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fb97 	bl	8000ad4 <__addsf3>
 80023a6:	4603      	mov	r3, r0
 80023a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fb90 	bl	8000ad0 <__aeabi_fsub>
 80023b0:	4603      	mov	r3, r0
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fb8b 	bl	8000ad0 <__aeabi_fsub>
 80023ba:	4603      	mov	r3, r0
 80023bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fc90 	bl	8000ce4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461c      	mov	r4, r3
 80023c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ca:	4619      	mov	r1, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fb81 	bl	8000ad4 <__addsf3>
 80023d2:	4603      	mov	r3, r0
 80023d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fb7c 	bl	8000ad4 <__addsf3>
 80023dc:	4603      	mov	r3, r0
 80023de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fb74 	bl	8000ad0 <__aeabi_fsub>
 80023e8:	4603      	mov	r3, r0
 80023ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fc79 	bl	8000ce4 <__aeabi_fmul>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4619      	mov	r1, r3
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7fe fb6c 	bl	8000ad4 <__addsf3>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461c      	mov	r4, r3
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002406:	4a67      	ldr	r2, [pc, #412]	; (80025a4 <MadgwickAHRSupdate+0x1074>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fc69 	bl	8000ce4 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	461d      	mov	r5, r3
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <MadgwickAHRSupdate+0x1078>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fc61 	bl	8000ce4 <__aeabi_fmul>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	4628      	mov	r0, r5
 8002428:	f7fe fb54 	bl	8000ad4 <__addsf3>
 800242c:	4603      	mov	r3, r0
 800242e:	461d      	mov	r5, r3
 8002430:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002432:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002436:	f7fe fb4b 	bl	8000ad0 <__aeabi_fsub>
 800243a:	4603      	mov	r3, r0
 800243c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fb46 	bl	8000ad0 <__aeabi_fsub>
 8002444:	4603      	mov	r3, r0
 8002446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fc4b 	bl	8000ce4 <__aeabi_fmul>
 800244e:	4603      	mov	r3, r0
 8002450:	461e      	mov	r6, r3
 8002452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002454:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002456:	f7fe fb3b 	bl	8000ad0 <__aeabi_fsub>
 800245a:	4603      	mov	r3, r0
 800245c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fc40 	bl	8000ce4 <__aeabi_fmul>
 8002464:	4603      	mov	r3, r0
 8002466:	4619      	mov	r1, r3
 8002468:	4630      	mov	r0, r6
 800246a:	f7fe fb33 	bl	8000ad4 <__addsf3>
 800246e:	4603      	mov	r3, r0
 8002470:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fb2b 	bl	8000ad0 <__aeabi_fsub>
 800247a:	4603      	mov	r3, r0
 800247c:	4619      	mov	r1, r3
 800247e:	4628      	mov	r0, r5
 8002480:	f7fe fc30 	bl	8000ce4 <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	4619      	mov	r1, r3
 8002488:	4620      	mov	r0, r4
 800248a:	f7fe fb23 	bl	8000ad4 <__addsf3>
 800248e:	4603      	mov	r3, r0
 8002490:	461c      	mov	r4, r3
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002498:	4a44      	ldr	r2, [pc, #272]	; (80025ac <MadgwickAHRSupdate+0x107c>)
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc20 	bl	8000ce4 <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461d      	mov	r5, r3
 80024a8:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <MadgwickAHRSupdate+0x1070>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fc18 	bl	8000ce4 <__aeabi_fmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4619      	mov	r1, r3
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7fe fb0b 	bl	8000ad4 <__addsf3>
 80024be:	4603      	mov	r3, r0
 80024c0:	461d      	mov	r5, r3
 80024c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80024c6:	f7fe fb03 	bl	8000ad0 <__aeabi_fsub>
 80024ca:	4603      	mov	r3, r0
 80024cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fc08 	bl	8000ce4 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461e      	mov	r6, r3
 80024d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80024dc:	f7fe fafa 	bl	8000ad4 <__addsf3>
 80024e0:	4603      	mov	r3, r0
 80024e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fbfd 	bl	8000ce4 <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4630      	mov	r0, r6
 80024f0:	f7fe faf0 	bl	8000ad4 <__addsf3>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fae8 	bl	8000ad0 <__aeabi_fsub>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	4628      	mov	r0, r5
 8002506:	f7fe fbed 	bl	8000ce4 <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7fe fae0 	bl	8000ad4 <__addsf3>
 8002514:	4603      	mov	r3, r0
 8002516:	461c      	mov	r4, r3
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <MadgwickAHRSupdate+0x1078>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fbe0 	bl	8000ce4 <__aeabi_fmul>
 8002524:	4603      	mov	r3, r0
 8002526:	461d      	mov	r5, r3
 8002528:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800252a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800252c:	f7fe fad2 	bl	8000ad4 <__addsf3>
 8002530:	4603      	mov	r3, r0
 8002532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fbd5 	bl	8000ce4 <__aeabi_fmul>
 800253a:	4603      	mov	r3, r0
 800253c:	461e      	mov	r6, r3
 800253e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002540:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002544:	f7fe fac4 	bl	8000ad0 <__aeabi_fsub>
 8002548:	4603      	mov	r3, r0
 800254a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fabf 	bl	8000ad0 <__aeabi_fsub>
 8002552:	4603      	mov	r3, r0
 8002554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbc4 	bl	8000ce4 <__aeabi_fmul>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	4630      	mov	r0, r6
 8002562:	f7fe fab7 	bl	8000ad4 <__addsf3>
 8002566:	4603      	mov	r3, r0
 8002568:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe faaf 	bl	8000ad0 <__aeabi_fsub>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	4628      	mov	r0, r5
 8002578:	f7fe fbb4 	bl	8000ce4 <__aeabi_fmul>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	4620      	mov	r0, r4
 8002582:	f7fe faa7 	bl	8000ad4 <__addsf3>
 8002586:	4603      	mov	r3, r0
 8002588:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800258a:	6a39      	ldr	r1, [r7, #32]
 800258c:	6a38      	ldr	r0, [r7, #32]
 800258e:	f7fe fba9 	bl	8000ce4 <__aeabi_fmul>
 8002592:	4603      	mov	r3, r0
 8002594:	461c      	mov	r4, r3
 8002596:	69f9      	ldr	r1, [r7, #28]
 8002598:	69f8      	ldr	r0, [r7, #28]
 800259a:	f7fe fba3 	bl	8000ce4 <__aeabi_fmul>
 800259e:	e007      	b.n	80025b0 <MadgwickAHRSupdate+0x1080>
 80025a0:	2000030c 	.word	0x2000030c
 80025a4:	20000310 	.word	0x20000310
 80025a8:	20000308 	.word	0x20000308
 80025ac:	20000048 	.word	0x20000048
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7fe fa8d 	bl	8000ad4 <__addsf3>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461c      	mov	r4, r3
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	69b8      	ldr	r0, [r7, #24]
 80025c2:	f7fe fb8f 	bl	8000ce4 <__aeabi_fmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7fe fa82 	bl	8000ad4 <__addsf3>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461c      	mov	r4, r3
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7fe fb84 	bl	8000ce4 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	4619      	mov	r1, r3
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7fe fa77 	bl	8000ad4 <__addsf3>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe ff65 	bl	80014b8 <invSqrt>
 80025ee:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 80025f2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80025f6:	6a38      	ldr	r0, [r7, #32]
 80025f8:	f7fe fb74 	bl	8000ce4 <__aeabi_fmul>
 80025fc:	4603      	mov	r3, r0
 80025fe:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002600:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002604:	69f8      	ldr	r0, [r7, #28]
 8002606:	f7fe fb6d 	bl	8000ce4 <__aeabi_fmul>
 800260a:	4603      	mov	r3, r0
 800260c:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 800260e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	f7fe fb66 	bl	8000ce4 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 800261c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f7fe fb5f 	bl	8000ce4 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 800262a:	4b77      	ldr	r3, [pc, #476]	; (8002808 <MadgwickAHRSupdate+0x12d8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fb57 	bl	8000ce4 <__aeabi_fmul>
 8002636:	4603      	mov	r3, r0
 8002638:	4619      	mov	r1, r3
 800263a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800263e:	f7fe fa47 	bl	8000ad0 <__aeabi_fsub>
 8002642:	4603      	mov	r3, r0
 8002644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002648:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <MadgwickAHRSupdate+0x12d8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69f9      	ldr	r1, [r7, #28]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb48 	bl	8000ce4 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800265c:	f7fe fa38 	bl	8000ad0 <__aeabi_fsub>
 8002660:	4603      	mov	r3, r0
 8002662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <MadgwickAHRSupdate+0x12d8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fb39 	bl	8000ce4 <__aeabi_fmul>
 8002672:	4603      	mov	r3, r0
 8002674:	4619      	mov	r1, r3
 8002676:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800267a:	f7fe fa29 	bl	8000ad0 <__aeabi_fsub>
 800267e:	4603      	mov	r3, r0
 8002680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 8002684:	4b60      	ldr	r3, [pc, #384]	; (8002808 <MadgwickAHRSupdate+0x12d8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6979      	ldr	r1, [r7, #20]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fb2a 	bl	8000ce4 <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	4619      	mov	r1, r3
 8002694:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002698:	f7fe fa1a 	bl	8000ad0 <__aeabi_fsub>
 800269c:	4603      	mov	r3, r0
 800269e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80026a2:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80026a6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80026aa:	f7fe fb1b 	bl	8000ce4 <__aeabi_fmul>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f7fe fa0b 	bl	8000ad4 <__addsf3>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b52      	ldr	r3, [pc, #328]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 80026c4:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80026c6:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80026ca:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80026ce:	f7fe fb09 	bl	8000ce4 <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f7fe f9f9 	bl	8000ad4 <__addsf3>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 80026e8:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80026ea:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 80026ee:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80026f2:	f7fe faf7 	bl	8000ce4 <__aeabi_fmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7fe f9e7 	bl	8000ad4 <__addsf3>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 800270c:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 800270e:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002712:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002716:	f7fe fae5 	bl	8000ce4 <__aeabi_fmul>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f7fe f9d5 	bl	8000ad4 <__addsf3>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 8002730:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002732:	4b36      	ldr	r3, [pc, #216]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a35      	ldr	r2, [pc, #212]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fad1 	bl	8000ce4 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	461c      	mov	r4, r3
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a31      	ldr	r2, [pc, #196]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fac7 	bl	8000ce4 <__aeabi_fmul>
 8002756:	4603      	mov	r3, r0
 8002758:	4619      	mov	r1, r3
 800275a:	4620      	mov	r0, r4
 800275c:	f7fe f9ba 	bl	8000ad4 <__addsf3>
 8002760:	4603      	mov	r3, r0
 8002762:	461c      	mov	r4, r3
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fab8 	bl	8000ce4 <__aeabi_fmul>
 8002774:	4603      	mov	r3, r0
 8002776:	4619      	mov	r1, r3
 8002778:	4620      	mov	r0, r4
 800277a:	f7fe f9ab 	bl	8000ad4 <__addsf3>
 800277e:	4603      	mov	r3, r0
 8002780:	461c      	mov	r4, r3
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe faa9 	bl	8000ce4 <__aeabi_fmul>
 8002792:	4603      	mov	r3, r0
 8002794:	4619      	mov	r1, r3
 8002796:	4620      	mov	r0, r4
 8002798:	f7fe f99c 	bl	8000ad4 <__addsf3>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fe8a 	bl	80014b8 <invSqrt>
 80027a4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fa97 	bl	8000ce4 <__aeabi_fmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <MadgwickAHRSupdate+0x12dc>)
 80027bc:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fa8c 	bl	8000ce4 <__aeabi_fmul>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MadgwickAHRSupdate+0x12e0>)
 80027d2:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa81 	bl	8000ce4 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <MadgwickAHRSupdate+0x12e4>)
 80027e8:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fa76 	bl	8000ce4 <__aeabi_fmul>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MadgwickAHRSupdate+0x12e8>)
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	37a4      	adds	r7, #164	; 0xa4
 8002802:	46bd      	mov	sp, r7
 8002804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002806:	bf00      	nop
 8002808:	20000044 	.word	0x20000044
 800280c:	20000048 	.word	0x20000048
 8002810:	20000308 	.word	0x20000308
 8002814:	2000030c 	.word	0x2000030c
 8002818:	20000310 	.word	0x20000310

0800281c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b09b      	sub	sp, #108	; 0x6c
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fa55 	bl	8000ce4 <__aeabi_fmul>
 800283a:	4603      	mov	r3, r0
 800283c:	461c      	mov	r4, r3
 800283e:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fa4d 	bl	8000ce4 <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	4620      	mov	r0, r4
 8002850:	f7fe f93e 	bl	8000ad0 <__aeabi_fsub>
 8002854:	4603      	mov	r3, r0
 8002856:	461c      	mov	r4, r3
 8002858:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <MadgwickAHRSupdateIMU+0x28c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fa40 	bl	8000ce4 <__aeabi_fmul>
 8002864:	4603      	mov	r3, r0
 8002866:	4619      	mov	r1, r3
 8002868:	4620      	mov	r0, r4
 800286a:	f7fe f931 	bl	8000ad0 <__aeabi_fsub>
 800286e:	4603      	mov	r3, r0
 8002870:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fa35 	bl	8000ce4 <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800287e:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <MadgwickAHRSupdateIMU+0x290>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fa2d 	bl	8000ce4 <__aeabi_fmul>
 800288a:	4603      	mov	r3, r0
 800288c:	461c      	mov	r4, r3
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fa25 	bl	8000ce4 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fe f918 	bl	8000ad4 <__addsf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461c      	mov	r4, r3
 80028a8:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <MadgwickAHRSupdateIMU+0x28c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fa18 	bl	8000ce4 <__aeabi_fmul>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe f909 	bl	8000ad0 <__aeabi_fsub>
 80028be:	4603      	mov	r3, r0
 80028c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fa0d 	bl	8000ce4 <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80028ce:	4b77      	ldr	r3, [pc, #476]	; (8002aac <MadgwickAHRSupdateIMU+0x290>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fa05 	bl	8000ce4 <__aeabi_fmul>
 80028da:	4603      	mov	r3, r0
 80028dc:	461c      	mov	r4, r3
 80028de:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe f9fd 	bl	8000ce4 <__aeabi_fmul>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7fe f8ee 	bl	8000ad0 <__aeabi_fsub>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461c      	mov	r4, r3
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <MadgwickAHRSupdateIMU+0x28c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f9f0 	bl	8000ce4 <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	4620      	mov	r0, r4
 800290a:	f7fe f8e3 	bl	8000ad4 <__addsf3>
 800290e:	4603      	mov	r3, r0
 8002910:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f9e5 	bl	8000ce4 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <MadgwickAHRSupdateIMU+0x290>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9dd 	bl	8000ce4 <__aeabi_fmul>
 800292a:	4603      	mov	r3, r0
 800292c:	461c      	mov	r4, r3
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe f9d5 	bl	8000ce4 <__aeabi_fmul>
 800293a:	4603      	mov	r3, r0
 800293c:	4619      	mov	r1, r3
 800293e:	4620      	mov	r0, r4
 8002940:	f7fe f8c8 	bl	8000ad4 <__addsf3>
 8002944:	4603      	mov	r3, r0
 8002946:	461c      	mov	r4, r3
 8002948:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f9c8 	bl	8000ce4 <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4619      	mov	r1, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe f8b9 	bl	8000ad0 <__aeabi_fsub>
 800295e:	4603      	mov	r3, r0
 8002960:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe f9bd 	bl	8000ce4 <__aeabi_fmul>
 800296a:	4603      	mov	r3, r0
 800296c:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f7fe fb4a 	bl	800100c <__aeabi_fcmpeq>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <MadgwickAHRSupdateIMU+0x184>
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002984:	f7fe fb42 	bl	800100c <__aeabi_fcmpeq>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <MadgwickAHRSupdateIMU+0x184>
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002994:	f7fe fb3a 	bl	800100c <__aeabi_fcmpeq>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 823c 	bne.w	8002e18 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80029a0:	6839      	ldr	r1, [r7, #0]
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f7fe f99e 	bl	8000ce4 <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461c      	mov	r4, r3
 80029ac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80029ae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029b0:	f7fe f998 	bl	8000ce4 <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7fe f88b 	bl	8000ad4 <__addsf3>
 80029be:	4603      	mov	r3, r0
 80029c0:	461c      	mov	r4, r3
 80029c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80029c6:	f7fe f98d 	bl	8000ce4 <__aeabi_fmul>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4619      	mov	r1, r3
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7fe f880 	bl	8000ad4 <__addsf3>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fd6e 	bl	80014b8 <invSqrt>
 80029dc:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 80029de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029e0:	6838      	ldr	r0, [r7, #0]
 80029e2:	f7fe f97f 	bl	8000ce4 <__aeabi_fmul>
 80029e6:	4603      	mov	r3, r0
 80029e8:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80029ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029ee:	f7fe f979 	bl	8000ce4 <__aeabi_fmul>
 80029f2:	4603      	mov	r3, r0
 80029f4:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 80029f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80029fa:	f7fe f973 	bl	8000ce4 <__aeabi_fmul>
 80029fe:	4603      	mov	r3, r0
 8002a00:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <MadgwickAHRSupdateIMU+0x290>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f863 	bl	8000ad4 <__addsf3>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f85b 	bl	8000ad4 <__addsf3>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f853 	bl	8000ad4 <__addsf3>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MadgwickAHRSupdateIMU+0x28c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f84b 	bl	8000ad4 <__addsf3>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MadgwickAHRSupdateIMU+0x290>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f94a 	bl	8000ce4 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8002a54:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f941 	bl	8000ce4 <__aeabi_fmul>
 8002a62:	4603      	mov	r3, r0
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f938 	bl	8000ce4 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MadgwickAHRSupdateIMU+0x284>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f92f 	bl	8000ce4 <__aeabi_fmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MadgwickAHRSupdateIMU+0x288>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f926 	bl	8000ce4 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	e008      	b.n	8002ab0 <MadgwickAHRSupdateIMU+0x294>
 8002a9e:	bf00      	nop
 8002aa0:	20000308 	.word	0x20000308
 8002aa4:	2000030c 	.word	0x2000030c
 8002aa8:	20000310 	.word	0x20000310
 8002aac:	20000048 	.word	0x20000048
		q0q0 = q0 * q0;
 8002ab0:	4b9a      	ldr	r3, [pc, #616]	; (8002d1c <MadgwickAHRSupdateIMU+0x500>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a99      	ldr	r2, [pc, #612]	; (8002d1c <MadgwickAHRSupdateIMU+0x500>)
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f912 	bl	8000ce4 <__aeabi_fmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <MadgwickAHRSupdateIMU+0x504>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a95      	ldr	r2, [pc, #596]	; (8002d20 <MadgwickAHRSupdateIMU+0x504>)
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f908 	bl	8000ce4 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8002ad8:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <MadgwickAHRSupdateIMU+0x508>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a91      	ldr	r2, [pc, #580]	; (8002d24 <MadgwickAHRSupdateIMU+0x508>)
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe f8fe 	bl	8000ce4 <__aeabi_fmul>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8002aec:	4b8e      	ldr	r3, [pc, #568]	; (8002d28 <MadgwickAHRSupdateIMU+0x50c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a8d      	ldr	r2, [pc, #564]	; (8002d28 <MadgwickAHRSupdateIMU+0x50c>)
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe f8f4 	bl	8000ce4 <__aeabi_fmul>
 8002afc:	4603      	mov	r3, r0
 8002afe:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b04:	f7fe f8ee 	bl	8000ce4 <__aeabi_fmul>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b10:	f7fe f8e8 	bl	8000ce4 <__aeabi_fmul>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4619      	mov	r1, r3
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7fd ffdb 	bl	8000ad4 <__addsf3>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461c      	mov	r4, r3
 8002b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b26:	f7fe f8dd 	bl	8000ce4 <__aeabi_fmul>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fd ffd0 	bl	8000ad4 <__addsf3>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461c      	mov	r4, r3
 8002b38:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b3c:	f7fe f8d2 	bl	8000ce4 <__aeabi_fmul>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fd ffc3 	bl	8000ad0 <__aeabi_fsub>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002b4e:	6a39      	ldr	r1, [r7, #32]
 8002b50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b52:	f7fe f8c7 	bl	8000ce4 <__aeabi_fmul>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461c      	mov	r4, r3
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b5e:	f7fe f8c1 	bl	8000ce4 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4619      	mov	r1, r3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7fd ffb2 	bl	8000ad0 <__aeabi_fsub>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461c      	mov	r4, r3
 8002b70:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b76:	f7fe f8b5 	bl	8000ce4 <__aeabi_fmul>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <MadgwickAHRSupdateIMU+0x504>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7fe f8ad 	bl	8000ce4 <__aeabi_fmul>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f7fd ffa0 	bl	8000ad4 <__addsf3>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461c      	mov	r4, r3
 8002b98:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b9c:	f7fe f8a2 	bl	8000ce4 <__aeabi_fmul>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7fd ff93 	bl	8000ad0 <__aeabi_fsub>
 8002baa:	4603      	mov	r3, r0
 8002bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd ff8e 	bl	8000ad0 <__aeabi_fsub>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461c      	mov	r4, r3
 8002bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bbc:	f7fe f892 	bl	8000ce4 <__aeabi_fmul>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7fd ff85 	bl	8000ad4 <__addsf3>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461c      	mov	r4, r3
 8002bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bd2:	f7fe f887 	bl	8000ce4 <__aeabi_fmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7fd ff7a 	bl	8000ad4 <__addsf3>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461c      	mov	r4, r3
 8002be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002be6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002be8:	f7fe f87c 	bl	8000ce4 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7fd ff6f 	bl	8000ad4 <__addsf3>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002bfa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c00:	f7fe f870 	bl	8000ce4 <__aeabi_fmul>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <MadgwickAHRSupdateIMU+0x508>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7fe f868 	bl	8000ce4 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461c      	mov	r4, r3
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c1c:	f7fe f862 	bl	8000ce4 <__aeabi_fmul>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4619      	mov	r1, r3
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7fd ff55 	bl	8000ad4 <__addsf3>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	6a39      	ldr	r1, [r7, #32]
 8002c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c32:	f7fe f857 	bl	8000ce4 <__aeabi_fmul>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fd ff4a 	bl	8000ad4 <__addsf3>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461c      	mov	r4, r3
 8002c44:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002c46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c48:	f7fe f84c 	bl	8000ce4 <__aeabi_fmul>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7fd ff3d 	bl	8000ad0 <__aeabi_fsub>
 8002c56:	4603      	mov	r3, r0
 8002c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd ff38 	bl	8000ad0 <__aeabi_fsub>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461c      	mov	r4, r3
 8002c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c68:	f7fe f83c 	bl	8000ce4 <__aeabi_fmul>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7fd ff2f 	bl	8000ad4 <__addsf3>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461c      	mov	r4, r3
 8002c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7e:	f7fe f831 	bl	8000ce4 <__aeabi_fmul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4619      	mov	r1, r3
 8002c86:	4620      	mov	r0, r4
 8002c88:	f7fd ff24 	bl	8000ad4 <__addsf3>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461c      	mov	r4, r3
 8002c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c94:	f7fe f826 	bl	8000ce4 <__aeabi_fmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7fd ff19 	bl	8000ad4 <__addsf3>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002ca6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f7fe f81a 	bl	8000ce4 <__aeabi_fmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <MadgwickAHRSupdateIMU+0x50c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f7fe f812 	bl	8000ce4 <__aeabi_fmul>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cc8:	f7fe f80c 	bl	8000ce4 <__aeabi_fmul>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7fd fefd 	bl	8000ad0 <__aeabi_fsub>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce0:	f7fe f800 	bl	8000ce4 <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MadgwickAHRSupdateIMU+0x50c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7fd fff8 	bl	8000ce4 <__aeabi_fmul>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7fd feeb 	bl	8000ad4 <__addsf3>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461c      	mov	r4, r3
 8002d02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002d04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d06:	f7fd ffed 	bl	8000ce4 <__aeabi_fmul>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7fd fede 	bl	8000ad0 <__aeabi_fsub>
 8002d14:	4603      	mov	r3, r0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e008      	b.n	8002d2c <MadgwickAHRSupdateIMU+0x510>
 8002d1a:	bf00      	nop
 8002d1c:	20000048 	.word	0x20000048
 8002d20:	20000308 	.word	0x20000308
 8002d24:	2000030c 	.word	0x2000030c
 8002d28:	20000310 	.word	0x20000310
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002d2c:	69f9      	ldr	r1, [r7, #28]
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	f7fd ffd8 	bl	8000ce4 <__aeabi_fmul>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461c      	mov	r4, r3
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	69b8      	ldr	r0, [r7, #24]
 8002d3c:	f7fd ffd2 	bl	8000ce4 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7fd fec5 	bl	8000ad4 <__addsf3>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7fd ffc7 	bl	8000ce4 <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd feba 	bl	8000ad4 <__addsf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461c      	mov	r4, r3
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	6938      	ldr	r0, [r7, #16]
 8002d68:	f7fd ffbc 	bl	8000ce4 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7fd feaf 	bl	8000ad4 <__addsf3>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fb9d 	bl	80014b8 <invSqrt>
 8002d7e:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d82:	69f8      	ldr	r0, [r7, #28]
 8002d84:	f7fd ffae 	bl	8000ce4 <__aeabi_fmul>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f7fd ffa8 	bl	8000ce4 <__aeabi_fmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7fd ffa2 	bl	8000ce4 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002da6:	6938      	ldr	r0, [r7, #16]
 8002da8:	f7fd ff9c 	bl	8000ce4 <__aeabi_fmul>
 8002dac:	4603      	mov	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002db0:	4b6e      	ldr	r3, [pc, #440]	; (8002f6c <MadgwickAHRSupdateIMU+0x750>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff94 	bl	8000ce4 <__aeabi_fmul>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002dc2:	f7fd fe85 	bl	8000ad0 <__aeabi_fsub>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002dca:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <MadgwickAHRSupdateIMU+0x750>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd ff87 	bl	8000ce4 <__aeabi_fmul>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ddc:	f7fd fe78 	bl	8000ad0 <__aeabi_fsub>
 8002de0:	4603      	mov	r3, r0
 8002de2:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <MadgwickAHRSupdateIMU+0x750>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd ff7a 	bl	8000ce4 <__aeabi_fmul>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4619      	mov	r1, r3
 8002df4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002df6:	f7fd fe6b 	bl	8000ad0 <__aeabi_fsub>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <MadgwickAHRSupdateIMU+0x750>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6939      	ldr	r1, [r7, #16]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd ff6d 	bl	8000ce4 <__aeabi_fmul>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e10:	f7fd fe5e 	bl	8000ad0 <__aeabi_fsub>
 8002e14:	4603      	mov	r3, r0
 8002e16:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002e18:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002e1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e1e:	f7fd ff61 	bl	8000ce4 <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7fd fe51 	bl	8000ad4 <__addsf3>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002e38:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002e3a:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002e3e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002e40:	f7fd ff50 	bl	8000ce4 <__aeabi_fmul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f7fd fe40 	bl	8000ad4 <__addsf3>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002e5a:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002e5c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002e60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002e62:	f7fd ff3f 	bl	8000ce4 <__aeabi_fmul>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7fd fe2f 	bl	8000ad4 <__addsf3>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002e7c:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002e7e:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
 8002e82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e84:	f7fd ff2e 	bl	8000ce4 <__aeabi_fmul>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7fd fe1e 	bl	8000ad4 <__addsf3>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002e9e:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd ff1a 	bl	8000ce4 <__aeabi_fmul>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ff10 	bl	8000ce4 <__aeabi_fmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7fd fe03 	bl	8000ad4 <__addsf3>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461c      	mov	r4, r3
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd ff01 	bl	8000ce4 <__aeabi_fmul>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7fd fdf4 	bl	8000ad4 <__addsf3>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461c      	mov	r4, r3
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fef2 	bl	8000ce4 <__aeabi_fmul>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4619      	mov	r1, r3
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7fd fde5 	bl	8000ad4 <__addsf3>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fad3 	bl	80014b8 <invSqrt>
 8002f12:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fee2 	bl	8000ce4 <__aeabi_fmul>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MadgwickAHRSupdateIMU+0x754>)
 8002f26:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fed8 	bl	8000ce4 <__aeabi_fmul>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MadgwickAHRSupdateIMU+0x758>)
 8002f3a:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fece 	bl	8000ce4 <__aeabi_fmul>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <MadgwickAHRSupdateIMU+0x75c>)
 8002f4e:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fec4 	bl	8000ce4 <__aeabi_fmul>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MadgwickAHRSupdateIMU+0x760>)
 8002f62:	601a      	str	r2, [r3, #0]
}
 8002f64:	bf00      	nop
 8002f66:	376c      	adds	r7, #108	; 0x6c
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	20000044 	.word	0x20000044
 8002f70:	20000048 	.word	0x20000048
 8002f74:	20000308 	.word	0x20000308
 8002f78:	2000030c 	.word	0x2000030c
 8002f7c:	20000310 	.word	0x20000310

08002f80 <computeAngles>:

void computeAngles()
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * 57.29578f;
 8002f84:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <computeAngles+0x174>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <computeAngles+0x178>)
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd fea8 	bl	8000ce4 <__aeabi_fmul>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461c      	mov	r4, r3
 8002f98:	4b58      	ldr	r3, [pc, #352]	; (80030fc <computeAngles+0x17c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <computeAngles+0x180>)
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fe9e 	bl	8000ce4 <__aeabi_fmul>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4619      	mov	r1, r3
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7fd fd91 	bl	8000ad4 <__addsf3>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461c      	mov	r4, r3
 8002fb6:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <computeAngles+0x178>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4f      	ldr	r2, [pc, #316]	; (80030f8 <computeAngles+0x178>)
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fe8f 	bl	8000ce4 <__aeabi_fmul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002fce:	f7fd fd7f 	bl	8000ad0 <__aeabi_fsub>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <computeAngles+0x17c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a48      	ldr	r2, [pc, #288]	; (80030fc <computeAngles+0x17c>)
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fe7f 	bl	8000ce4 <__aeabi_fmul>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4628      	mov	r0, r5
 8002fec:	f7fd fd70 	bl	8000ad0 <__aeabi_fsub>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f009 fb6b 	bl	800c6d0 <atan2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4941      	ldr	r1, [pc, #260]	; (8003104 <computeAngles+0x184>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fe70 	bl	8000ce4 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <computeAngles+0x188>)
 800300a:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2)) * 57.29578f;
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <computeAngles+0x178>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <computeAngles+0x180>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fe64 	bl	8000ce4 <__aeabi_fmul>
 800301c:	4603      	mov	r3, r0
 800301e:	461c      	mov	r4, r3
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <computeAngles+0x174>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a35      	ldr	r2, [pc, #212]	; (80030fc <computeAngles+0x17c>)
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fe5a 	bl	8000ce4 <__aeabi_fmul>
 8003030:	4603      	mov	r3, r0
 8003032:	4619      	mov	r1, r3
 8003034:	4620      	mov	r0, r4
 8003036:	f7fd fd4b 	bl	8000ad0 <__aeabi_fsub>
 800303a:	4603      	mov	r3, r0
 800303c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fe4f 	bl	8000ce4 <__aeabi_fmul>
 8003046:	4603      	mov	r3, r0
 8003048:	4618      	mov	r0, r3
 800304a:	f009 fb21 	bl	800c690 <asinf>
 800304e:	4603      	mov	r3, r0
 8003050:	492c      	ldr	r1, [pc, #176]	; (8003104 <computeAngles+0x184>)
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fe46 	bl	8000ce4 <__aeabi_fmul>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <computeAngles+0x18c>)
 800305e:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3) * 57.29578f;
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <computeAngles+0x178>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a25      	ldr	r2, [pc, #148]	; (80030fc <computeAngles+0x17c>)
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fe3a 	bl	8000ce4 <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	461c      	mov	r4, r3
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <computeAngles+0x174>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <computeAngles+0x180>)
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fe30 	bl	8000ce4 <__aeabi_fmul>
 8003084:	4603      	mov	r3, r0
 8003086:	4619      	mov	r1, r3
 8003088:	4620      	mov	r0, r4
 800308a:	f7fd fd23 	bl	8000ad4 <__addsf3>
 800308e:	4603      	mov	r3, r0
 8003090:	461c      	mov	r4, r3
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <computeAngles+0x17c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <computeAngles+0x17c>)
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fe21 	bl	8000ce4 <__aeabi_fmul>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4619      	mov	r1, r3
 80030a6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80030aa:	f7fd fd11 	bl	8000ad0 <__aeabi_fsub>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461d      	mov	r5, r3
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <computeAngles+0x180>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <computeAngles+0x180>)
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fe11 	bl	8000ce4 <__aeabi_fmul>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4619      	mov	r1, r3
 80030c6:	4628      	mov	r0, r5
 80030c8:	f7fd fd02 	bl	8000ad0 <__aeabi_fsub>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f009 fafd 	bl	800c6d0 <atan2f>
 80030d6:	4603      	mov	r3, r0
 80030d8:	490a      	ldr	r1, [pc, #40]	; (8003104 <computeAngles+0x184>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fe02 	bl	8000ce4 <__aeabi_fmul>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <computeAngles+0x190>)
 80030e6:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <computeAngles+0x194>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	bdb0      	pop	{r4, r5, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000048 	.word	0x20000048
 80030f8:	20000308 	.word	0x20000308
 80030fc:	2000030c 	.word	0x2000030c
 8003100:	20000310 	.word	0x20000310
 8003104:	42652ee1 	.word	0x42652ee1
 8003108:	20000314 	.word	0x20000314
 800310c:	20000318 	.word	0x20000318
 8003110:	2000031c 	.word	0x2000031c
 8003114:	20000320 	.word	0x20000320

08003118 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	460b      	mov	r3, r1
 8003126:	72fb      	strb	r3, [r7, #11]
 8003128:	4613      	mov	r3, r2
 800312a:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003132:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8003138:	f107 0214 	add.w	r2, r7, #20
 800313c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2301      	movs	r3, #1
 8003144:	21d2      	movs	r1, #210	; 0xd2
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f002 ffd8 	bl	80060fc <HAL_I2C_Master_Transmit>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8003150:	893b      	ldrh	r3, [r7, #8]
 8003152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003156:	9200      	str	r2, [sp, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	21d2      	movs	r1, #210	; 0xd2
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f003 f8cb 	bl	80062f8 <HAL_I2C_Master_Receive>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b088      	sub	sp, #32
 8003172:	af02      	add	r7, sp, #8
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	460b      	mov	r3, r1
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003182:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8003184:	7afb      	ldrb	r3, [r7, #11]
 8003186:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8003188:	f107 0214 	add.w	r2, r7, #20
 800318c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2301      	movs	r3, #1
 8003194:	21d2      	movs	r1, #210	; 0xd2
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f002 ffb0 	bl	80060fc <HAL_I2C_Master_Transmit>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 80031a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2301      	movs	r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	21d2      	movs	r1, #210	; 0xd2
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f003 f8a3 	bl	80062f8 <HAL_I2C_Master_Receive>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af02      	add	r7, sp, #8
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
 80031ca:	4613      	mov	r3, r2
 80031cc:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d4:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	733b      	strb	r3, [r7, #12]
 80031da:	78bb      	ldrb	r3, [r7, #2]
 80031dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 80031de:	f107 020c 	add.w	r2, r7, #12
 80031e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2302      	movs	r3, #2
 80031ea:	21d2      	movs	r1, #210	; 0xd2
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f002 ff85 	bl	80060fc <HAL_I2C_Master_Transmit>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
 8003206:	4613      	mov	r3, r2
 8003208:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 800320a:	2230      	movs	r2, #48	; 0x30
 800320c:	217f      	movs	r1, #127	; 0x7f
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffd5 	bl	80031be <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003214:	2001      	movs	r0, #1
 8003216:	f001 ff45 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 800321a:	220c      	movs	r2, #12
 800321c:	2103      	movs	r1, #3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffcd 	bl	80031be <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003224:	2001      	movs	r0, #1
 8003226:	f001 ff3d 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	461a      	mov	r2, r3
 800322e:	2104      	movs	r1, #4
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ffc4 	bl	80031be <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003236:	2001      	movs	r0, #1
 8003238:	f001 ff34 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 800323c:	78bb      	ldrb	r3, [r7, #2]
 800323e:	461a      	mov	r2, r3
 8003240:	2106      	movs	r1, #6
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffbb 	bl	80031be <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f001 ff2b 	bl	80050a4 <HAL_Delay>
  }
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8003262:	2230      	movs	r2, #48	; 0x30
 8003264:	217f      	movs	r1, #127	; 0x7f
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa9 	bl	80031be <ICM_WriteOneByte>
    HAL_Delay(1);
 800326c:	2001      	movs	r0, #1
 800326e:	f001 ff19 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 8003272:	228c      	movs	r2, #140	; 0x8c
 8003274:	2103      	movs	r1, #3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ffa1 	bl	80031be <ICM_WriteOneByte>
    HAL_Delay(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f001 ff11 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	461a      	mov	r2, r3
 8003286:	2104      	movs	r1, #4
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff98 	bl	80031be <ICM_WriteOneByte>
    HAL_Delay(1);
 800328e:	2001      	movs	r0, #1
 8003290:	f001 ff08 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	2106      	movs	r1, #6
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff90 	bl	80031be <ICM_WriteOneByte>
  	HAL_Delay(1);
 800329e:	2001      	movs	r0, #1
 80032a0:	f001 ff00 	bl	80050a4 <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 80032a4:	2200      	movs	r2, #0
 80032a6:	217f      	movs	r1, #127	; 0x7f
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff88 	bl	80031be <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 80032ae:	f107 030f 	add.w	r3, r7, #15
 80032b2:	461a      	mov	r2, r3
 80032b4:	213b      	movs	r1, #59	; 0x3b
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff59 	bl	800316e <ICM_ReadOneByte>
    HAL_Delay(1);
 80032bc:	2001      	movs	r0, #1
 80032be:	f001 fef1 	bl	80050a4 <HAL_Delay>
  	return Data;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
  }
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 80032d6:	2101      	movs	r1, #1
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffbc 	bl	8003256 <ICM_Mag_Read>
 80032de:	4603      	mov	r3, r0
 80032e0:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 80032e2:	2111      	movs	r1, #17
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffb6 	bl	8003256 <ICM_Mag_Read>
 80032ea:	4603      	mov	r3, r0
 80032ec:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 80032ee:	2112      	movs	r1, #18
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ffb0 	bl	8003256 <ICM_Mag_Read>
 80032f6:	4603      	mov	r3, r0
 80032f8:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 80032fa:	7b7b      	ldrb	r3, [r7, #13]
 80032fc:	b21a      	sxth	r2, r3
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21b      	sxth	r3, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	b21a      	sxth	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 800330c:	2113      	movs	r1, #19
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa1 	bl	8003256 <ICM_Mag_Read>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8003318:	2114      	movs	r1, #20
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff9b 	bl	8003256 <ICM_Mag_Read>
 8003320:	4603      	mov	r3, r0
 8003322:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	b219      	sxth	r1, r3
 8003328:	7c3b      	ldrb	r3, [r7, #16]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b21a      	sxth	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	3302      	adds	r3, #2
 8003332:	430a      	orrs	r2, r1
 8003334:	b212      	sxth	r2, r2
 8003336:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 8003338:	2115      	movs	r1, #21
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff8b 	bl	8003256 <ICM_Mag_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 8003344:	2116      	movs	r1, #22
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff85 	bl	8003256 <ICM_Mag_Read>
 800334c:	4603      	mov	r3, r0
 800334e:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	b219      	sxth	r1, r3
 8003354:	7cbb      	ldrb	r3, [r7, #18]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	b21a      	sxth	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	3304      	adds	r3, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	b212      	sxth	r2, r2
 8003362:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 8003364:	2201      	movs	r2, #1
 8003366:	2131      	movs	r1, #49	; 0x31
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff46 	bl	80031fa <i2c_Mag_write>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 800337e:	200a      	movs	r0, #10
 8003380:	f001 fe90 	bl	80050a4 <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9c0 	bl	800370c <ICM_SelectBank>
	HAL_Delay(10);
 800338c:	200a      	movs	r0, #10
 800338e:	f001 fe89 	bl	80050a4 <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9ca 	bl	800372c <ICM_Enable_I2C>
	HAL_Delay(10);
 8003398:	200a      	movs	r0, #10
 800339a:	f001 fe83 	bl	80050a4 <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 800339e:	2101      	movs	r1, #1
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9d0 	bl	8003746 <ICM_SetClock>
	HAL_Delay(10);
 80033a6:	200a      	movs	r0, #10
 80033a8:	f001 fe7c 	bl	80050a4 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f9da 	bl	8003766 <ICM_AccelGyroOff>
	HAL_Delay(20);
 80033b2:	2014      	movs	r0, #20
 80033b4:	f001 fe76 	bl	80050a4 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f9e1 	bl	8003780 <ICM_AccelGyroOn>
	HAL_Delay(10);
 80033be:	200a      	movs	r0, #10
 80033c0:	f001 fe70 	bl	80050a4 <HAL_Delay>
	ICM_Initialize(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f804 	bl	80033d2 <ICM_Initialize>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 80033da:	2120      	movs	r1, #32
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f995 	bl	800370c <ICM_SelectBank>
	HAL_Delay(20);
 80033e2:	2014      	movs	r0, #20
 80033e4:	f001 fe5e 	bl	80050a4 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 80033e8:	2229      	movs	r2, #41	; 0x29
 80033ea:	2100      	movs	r1, #0
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f9d4 	bl	800379a <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80033f2:	200a      	movs	r0, #10
 80033f4:	f001 fe56 	bl	80050a4 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 80033f8:	220a      	movs	r2, #10
 80033fa:	2100      	movs	r1, #0
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fede 	bl	80031be <ICM_WriteOneByte>
	HAL_Delay(10);
 8003402:	200a      	movs	r0, #10
 8003404:	f001 fe4e 	bl	80050a4 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 8003408:	2215      	movs	r2, #21
 800340a:	2114      	movs	r1, #20
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fed6 	bl	80031be <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 8003412:	2200      	movs	r2, #0
 8003414:	2110      	movs	r1, #16
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fed1 	bl	80031be <ICM_WriteOneByte>
	HAL_Delay(10);
 800341c:	200a      	movs	r0, #10
 800341e:	f001 fe41 	bl	80050a4 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 8003422:	220a      	movs	r2, #10
 8003424:	2111      	movs	r1, #17
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fec9 	bl	80031be <ICM_WriteOneByte>
	HAL_Delay(10);
 800342c:	200a      	movs	r0, #10
 800342e:	f001 fe39 	bl	80050a4 <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_2);
 8003432:	2120      	movs	r1, #32
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f969 	bl	800370c <ICM_SelectBank>
	HAL_Delay(20);
 800343a:	2014      	movs	r0, #20
 800343c:	f001 fe32 	bl	80050a4 <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 8003440:	2200      	movs	r2, #0
 8003442:	217f      	movs	r1, #127	; 0x7f
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff feba 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 800344a:	2230      	movs	r2, #48	; 0x30
 800344c:	210f      	movs	r1, #15
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff feb5 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 8003454:	2220      	movs	r2, #32
 8003456:	2103      	movs	r1, #3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff feb0 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 800345e:	2230      	movs	r2, #48	; 0x30
 8003460:	217f      	movs	r1, #127	; 0x7f
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff feab 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8003468:	224d      	movs	r2, #77	; 0x4d
 800346a:	2101      	movs	r1, #1
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fea6 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8003472:	2201      	movs	r2, #1
 8003474:	2102      	movs	r1, #2
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fea1 	bl	80031be <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 800347c:	2281      	movs	r2, #129	; 0x81
 800347e:	2105      	movs	r1, #5
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fe9c 	bl	80031be <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 8003486:	2201      	movs	r2, #1
 8003488:	2132      	movs	r1, #50	; 0x32
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff feb5 	bl	80031fa <i2c_Mag_write>
	HAL_Delay(1000);
 8003490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003494:	f001 fe06 	bl	80050a4 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8003498:	2202      	movs	r2, #2
 800349a:	2131      	movs	r1, #49	; 0x31
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff feac 	bl	80031fa <i2c_Mag_write>

	return 1337;
 80034a2:	f240 5339 	movw	r3, #1337	; 0x539
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 80034b8:	f107 020c 	add.w	r2, r7, #12
 80034bc:	230c      	movs	r3, #12
 80034be:	212d      	movs	r1, #45	; 0x2d
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff fe29 	bl	8003118 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 80034c6:	7b3b      	ldrb	r3, [r7, #12]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	7b7b      	ldrb	r3, [r7, #13]
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <ICM_ReadAccelGyro+0x98>)
 80034d8:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	b21a      	sxth	r2, r3
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <ICM_ReadAccelGyro+0x98>)
 80034ec:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 80034ee:	7c3b      	ldrb	r3, [r7, #16]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	b21a      	sxth	r2, r3
 80034f4:	7c7b      	ldrb	r3, [r7, #17]
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <ICM_ReadAccelGyro+0x98>)
 8003500:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8003502:	7cbb      	ldrb	r3, [r7, #18]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b21a      	sxth	r2, r3
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	b21b      	sxth	r3, r3
 800350c:	4313      	orrs	r3, r2
 800350e:	b21b      	sxth	r3, r3
 8003510:	b29a      	uxth	r2, r3
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <ICM_ReadAccelGyro+0x9c>)
 8003514:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8003516:	7d3b      	ldrb	r3, [r7, #20]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	b21a      	sxth	r2, r3
 800351c:	7d7b      	ldrb	r3, [r7, #21]
 800351e:	b21b      	sxth	r3, r3
 8003520:	4313      	orrs	r3, r2
 8003522:	b21b      	sxth	r3, r3
 8003524:	b29a      	uxth	r2, r3
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <ICM_ReadAccelGyro+0x9c>)
 8003528:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 800352a:	7dbb      	ldrb	r3, [r7, #22]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	b21a      	sxth	r2, r3
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	b21b      	sxth	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b21b      	sxth	r3, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <ICM_ReadAccelGyro+0x9c>)
 800353c:	809a      	strh	r2, [r3, #4]
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000324 	.word	0x20000324
 800354c:	2000032c 	.word	0x2000032c

08003550 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, uint16_t raw_accel_data[3], uint16_t raw_gyro_data[3]) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <ICM_CorrectAccelGyro+0x1a0>)
 8003564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da00      	bge.n	800356e <ICM_CorrectAccelGyro+0x1e>
 800356c:	330f      	adds	r3, #15
 800356e:	111b      	asrs	r3, r3, #4
 8003570:	b21b      	sxth	r3, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ff44 	bl	8000404 <__aeabi_i2d>
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b5c      	ldr	r3, [pc, #368]	; (80036f4 <ICM_CorrectAccelGyro+0x1a4>)
 8003582:	f7fd f8d3 	bl	800072c <__aeabi_ddiv>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fa7b 	bl	8000a88 <__aeabi_d2uiz>
 8003592:	4603      	mov	r3, r0
 8003594:	b29a      	uxth	r2, r3
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <ICM_CorrectAccelGyro+0x1a8>)
 8003598:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	3302      	adds	r3, #2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <ICM_CorrectAccelGyro+0x1a0>)
 80035a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da00      	bge.n	80035ae <ICM_CorrectAccelGyro+0x5e>
 80035ac:	330f      	adds	r3, #15
 80035ae:	111b      	asrs	r3, r3, #4
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ff24 	bl	8000404 <__aeabi_i2d>
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b4c      	ldr	r3, [pc, #304]	; (80036f4 <ICM_CorrectAccelGyro+0x1a4>)
 80035c2:	f7fd f8b3 	bl	800072c <__aeabi_ddiv>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fa5b 	bl	8000a88 <__aeabi_d2uiz>
 80035d2:	4603      	mov	r3, r0
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <ICM_CorrectAccelGyro+0x1a8>)
 80035d8:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3304      	adds	r3, #4
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <ICM_CorrectAccelGyro+0x1a0>)
 80035e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da00      	bge.n	80035ee <ICM_CorrectAccelGyro+0x9e>
 80035ec:	330f      	adds	r3, #15
 80035ee:	111b      	asrs	r3, r3, #4
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc ff04 	bl	8000404 <__aeabi_i2d>
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <ICM_CorrectAccelGyro+0x1a4>)
 8003602:	f7fd f893 	bl	800072c <__aeabi_ddiv>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7fd fa3b 	bl	8000a88 <__aeabi_d2uiz>
 8003612:	4603      	mov	r3, r0
 8003614:	b29a      	uxth	r2, r3
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <ICM_CorrectAccelGyro+0x1a8>)
 8003618:	809a      	strh	r2, [r3, #4]

	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <ICM_CorrectAccelGyro+0x1ac>)
 8003622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc feeb 	bl	8000404 <__aeabi_i2d>
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <ICM_CorrectAccelGyro+0x1b0>)
 8003634:	f7fc ff50 	bl	80004d8 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <ICM_CorrectAccelGyro+0x1b4>)
 8003646:	f7fd f871 	bl	800072c <__aeabi_ddiv>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f7fd fa19 	bl	8000a88 <__aeabi_d2uiz>
 8003656:	4603      	mov	r3, r0
 8003658:	b29a      	uxth	r2, r3
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <ICM_CorrectAccelGyro+0x1b8>)
 800365c:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <ICM_CorrectAccelGyro+0x1ac>)
 8003666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc fec9 	bl	8000404 <__aeabi_i2d>
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <ICM_CorrectAccelGyro+0x1b0>)
 8003678:	f7fc ff2e 	bl	80004d8 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <ICM_CorrectAccelGyro+0x1b4>)
 800368a:	f7fd f84f 	bl	800072c <__aeabi_ddiv>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd f9f7 	bl	8000a88 <__aeabi_d2uiz>
 800369a:	4603      	mov	r3, r0
 800369c:	b29a      	uxth	r2, r3
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <ICM_CorrectAccelGyro+0x1b8>)
 80036a0:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <ICM_CorrectAccelGyro+0x1ac>)
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc fea7 	bl	8000404 <__aeabi_i2d>
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <ICM_CorrectAccelGyro+0x1b0>)
 80036bc:	f7fc ff0c 	bl	80004d8 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <ICM_CorrectAccelGyro+0x1b4>)
 80036ce:	f7fd f82d 	bl	800072c <__aeabi_ddiv>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd f9d5 	bl	8000a88 <__aeabi_d2uiz>
 80036de:	4603      	mov	r3, r0
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <ICM_CorrectAccelGyro+0x1b8>)
 80036e4:	809a      	strh	r2, [r3, #4]
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000034c 	.word	0x2000034c
 80036f4:	40d00000 	.word	0x40d00000
 80036f8:	20000334 	.word	0x20000334
 80036fc:	20000344 	.word	0x20000344
 8003700:	406f4000 	.word	0x406f4000
 8003704:	40fffb80 	.word	0x40fffb80
 8003708:	2000033c 	.word	0x2000033c

0800370c <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	461a      	mov	r2, r3
 800371c:	217f      	movs	r1, #127	; 0x7f
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fd4d 	bl	80031be <ICM_WriteOneByte>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20);
 8003734:	2220      	movs	r2, #32
 8003736:	2103      	movs	r1, #3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fd40 	bl	80031be <ICM_WriteOneByte>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	461a      	mov	r2, r3
 8003756:	2106      	movs	r1, #6
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fd30 	bl	80031be <ICM_WriteOneByte>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) {
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 800376e:	223f      	movs	r2, #63	; 0x3f
 8003770:	2107      	movs	r1, #7
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fd23 	bl	80031be <ICM_WriteOneByte>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x07, (0x00 | 0x00));
 8003788:	2200      	movs	r2, #0
 800378a:	2107      	movs	r1, #7
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fd16 	bl	80031be <ICM_WriteOneByte>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70fb      	strb	r3, [r7, #3]
 80037a6:	4613      	mov	r3, r2
 80037a8:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	78bb      	ldrb	r3, [r7, #2]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	2101      	movs	r1, #1
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fd01 	bl	80031be <ICM_WriteOneByte>
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e029      	b.n	8003826 <ICM20948_Calibrate+0x62>
		ICM_ReadAccelGyro(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe6c 	bl	80034b0 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 80037d8:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <ICM20948_Calibrate+0x18c>)
 80037da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <ICM20948_Calibrate+0x190>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <ICM20948_Calibrate+0x18c>)
 80037ec:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 80037ee:	4b58      	ldr	r3, [pc, #352]	; (8003950 <ICM20948_Calibrate+0x18c>)
 80037f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	4b57      	ldr	r3, [pc, #348]	; (8003954 <ICM20948_Calibrate+0x190>)
 80037f8:	885b      	ldrh	r3, [r3, #2]
 80037fa:	4413      	add	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b21a      	sxth	r2, r3
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003802:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003806:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800380a:	b29a      	uxth	r2, r3
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <ICM20948_Calibrate+0x190>)
 800380e:	889b      	ldrh	r3, [r3, #4]
 8003810:	4413      	add	r3, r2
 8003812:	b29b      	uxth	r3, r3
 8003814:	b21a      	sxth	r2, r3
 8003816:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003818:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 800381a:	200a      	movs	r0, #10
 800381c:	f001 fc42 	bl	80050a4 <HAL_Delay>
	for(int i=0; i<50; i++){
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b31      	cmp	r3, #49	; 0x31
 800382a:	ddd2      	ble.n	80037d2 <ICM20948_Calibrate+0xe>
	}

	accel_offset[0] /= 50;
 800382c:	4b48      	ldr	r3, [pc, #288]	; (8003950 <ICM20948_Calibrate+0x18c>)
 800382e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003832:	4a49      	ldr	r2, [pc, #292]	; (8003958 <ICM20948_Calibrate+0x194>)
 8003834:	fb82 1203 	smull	r1, r2, r2, r3
 8003838:	1112      	asrs	r2, r2, #4
 800383a:	17db      	asrs	r3, r3, #31
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b21a      	sxth	r2, r3
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003842:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003846:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800384a:	4a43      	ldr	r2, [pc, #268]	; (8003958 <ICM20948_Calibrate+0x194>)
 800384c:	fb82 1203 	smull	r1, r2, r2, r3
 8003850:	1112      	asrs	r2, r2, #4
 8003852:	17db      	asrs	r3, r3, #31
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b21a      	sxth	r2, r3
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <ICM20948_Calibrate+0x18c>)
 800385a:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 800385c:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <ICM20948_Calibrate+0x18c>)
 800385e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003862:	4a3d      	ldr	r2, [pc, #244]	; (8003958 <ICM20948_Calibrate+0x194>)
 8003864:	fb82 1203 	smull	r1, r2, r2, r3
 8003868:	1112      	asrs	r2, r2, #4
 800386a:	17db      	asrs	r3, r3, #31
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b21a      	sxth	r2, r3
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003872:	809a      	strh	r2, [r3, #4]
	accel_offset[2] -= 4096.0; // 4096 LSB/g
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <ICM20948_Calibrate+0x18c>)
 8003876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fdc2 	bl	8000404 <__aeabi_i2d>
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <ICM20948_Calibrate+0x198>)
 8003886:	f7fc fc6f 	bl	8000168 <__aeabi_dsub>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f8d1 	bl	8000a38 <__aeabi_d2iz>
 8003896:	4603      	mov	r3, r0
 8003898:	b21a      	sxth	r2, r3
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <ICM20948_Calibrate+0x18c>)
 800389c:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	e029      	b.n	80038f8 <ICM20948_Calibrate+0x134>
		ICM_ReadAccelGyro(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe03 	bl	80034b0 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <ICM20948_Calibrate+0x1a0>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b21a      	sxth	r2, r3
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038be:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <ICM20948_Calibrate+0x1a0>)
 80038ca:	885b      	ldrh	r3, [r3, #2]
 80038cc:	4413      	add	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b21a      	sxth	r2, r3
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038d4:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <ICM20948_Calibrate+0x1a0>)
 80038e0:	889b      	ldrh	r3, [r3, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <ICM20948_Calibrate+0x19c>)
 80038ea:	809a      	strh	r2, [r3, #4]
		HAL_Delay(1);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f001 fbd9 	bl	80050a4 <HAL_Delay>
	for(int i=0; i<50; i++){
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b31      	cmp	r3, #49	; 0x31
 80038fc:	ddd2      	ble.n	80038a4 <ICM20948_Calibrate+0xe0>
	}

	gyro_offset[0] /= 50;
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <ICM20948_Calibrate+0x19c>)
 8003900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <ICM20948_Calibrate+0x194>)
 8003906:	fb82 1203 	smull	r1, r2, r2, r3
 800390a:	1112      	asrs	r2, r2, #4
 800390c:	17db      	asrs	r3, r3, #31
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	b21a      	sxth	r2, r3
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <ICM20948_Calibrate+0x19c>)
 8003914:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <ICM20948_Calibrate+0x19c>)
 8003918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <ICM20948_Calibrate+0x194>)
 800391e:	fb82 1203 	smull	r1, r2, r2, r3
 8003922:	1112      	asrs	r2, r2, #4
 8003924:	17db      	asrs	r3, r3, #31
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	b21a      	sxth	r2, r3
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <ICM20948_Calibrate+0x19c>)
 800392c:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <ICM20948_Calibrate+0x19c>)
 8003930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ICM20948_Calibrate+0x194>)
 8003936:	fb82 1203 	smull	r1, r2, r2, r3
 800393a:	1112      	asrs	r2, r2, #4
 800393c:	17db      	asrs	r3, r3, #31
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b21a      	sxth	r2, r3
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <ICM20948_Calibrate+0x19c>)
 8003944:	809a      	strh	r2, [r3, #4]
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000034c 	.word	0x2000034c
 8003954:	20000324 	.word	0x20000324
 8003958:	51eb851f 	.word	0x51eb851f
 800395c:	40b00000 	.word	0x40b00000
 8003960:	20000344 	.word	0x20000344
 8003964:	2000032c 	.word	0x2000032c

08003968 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003970:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003974:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003980:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003984:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003988:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003990:	e000      	b.n	8003994 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003992:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f9      	beq.n	8003992 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800399e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e009      	b.n	80039de <_write+0x2a>
    ITM_SendChar((*ptr++));
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	60ba      	str	r2, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ffc8 	bl	8003968 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	dbf1      	blt.n	80039ca <_write+0x16>
  return len;
 80039e6:	687b      	ldr	r3, [r7, #4]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	b099      	sub	sp, #100	; 0x64
 80039f6:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	221f      	movs	r2, #31
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f005 fec9 	bl	800979c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a0a:	f001 fae9 	bl	8004fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a0e:	f000 f903 	bl	8003c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a12:	f000 fb93 	bl	800413c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a16:	f000 fb49 	bl	80040ac <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003a1a:	f000 f98d 	bl	8003d38 <MX_I2C2_Init>
  MX_ADC1_Init();
 8003a1e:	f000 f94d 	bl	8003cbc <MX_ADC1_Init>
  MX_SPI2_Init();
 8003a22:	f000 f9b7 	bl	8003d94 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003a26:	f000 fa43 	bl	8003eb0 <MX_TIM2_Init>
  MX_DMA_Init();
 8003a2a:	f000 fb69 	bl	8004100 <MX_DMA_Init>
  MX_TIM1_Init();
 8003a2e:	f000 f9e7 	bl	8003e00 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003a32:	f000 fabf 	bl	8003fb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8003a36:	213c      	movs	r1, #60	; 0x3c
 8003a38:	4866      	ldr	r0, [pc, #408]	; (8003bd4 <main+0x1e4>)
 8003a3a:	f004 fad1 	bl	8007fe0 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start(&htim3);
 8003a3e:	4866      	ldr	r0, [pc, #408]	; (8003bd8 <main+0x1e8>)
 8003a40:	f003 ff8a 	bl	8007958 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 8003a44:	2104      	movs	r1, #4
 8003a46:	4864      	ldr	r0, [pc, #400]	; (8003bd8 <main+0x1e8>)
 8003a48:	f004 f922 	bl	8007c90 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8003a4c:	2108      	movs	r1, #8
 8003a4e:	4862      	ldr	r0, [pc, #392]	; (8003bd8 <main+0x1e8>)
 8003a50:	f004 f91e 	bl	8007c90 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 8003a54:	4861      	ldr	r0, [pc, #388]	; (8003bdc <main+0x1ec>)
 8003a56:	f003 ff7f 	bl	8007958 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	485f      	ldr	r0, [pc, #380]	; (8003bdc <main+0x1ec>)
 8003a5e:	f004 f81d 	bl	8007a9c <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 8003a62:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a66:	f001 fb1d 	bl	80050a4 <HAL_Delay>

  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	485c      	ldr	r0, [pc, #368]	; (8003be0 <main+0x1f0>)
 8003a6e:	f7ff fe4d 	bl	800370c <ICM_SelectBank>
  HAL_Delay(10);
 8003a72:	200a      	movs	r0, #10
 8003a74:	f001 fb16 	bl	80050a4 <HAL_Delay>
  ICM_PowerOn(&hi2c2);
 8003a78:	4859      	ldr	r0, [pc, #356]	; (8003be0 <main+0x1f0>)
 8003a7a:	f7ff fc7c 	bl	8003376 <ICM_PowerOn>
  HAL_Delay(10);
 8003a7e:	200a      	movs	r0, #10
 8003a80:	f001 fb10 	bl	80050a4 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8003a84:	4856      	ldr	r0, [pc, #344]	; (8003be0 <main+0x1f0>)
 8003a86:	f7ff fe9d 	bl	80037c4 <ICM20948_Calibrate>
  HAL_Delay(100);
 8003a8a:	2064      	movs	r0, #100	; 0x64
 8003a8c:	f001 fb0a 	bl	80050a4 <HAL_Delay>

  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, sizeof(UART2_rxBuffer));
 8003a90:	2223      	movs	r2, #35	; 0x23
 8003a92:	4954      	ldr	r1, [pc, #336]	; (8003be4 <main+0x1f4>)
 8003a94:	4854      	ldr	r0, [pc, #336]	; (8003be8 <main+0x1f8>)
 8003a96:	f005 fbd8 	bl	800924a <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  // ultrasonic testing
	  HCSR04_Read_Front(&htim3);
 8003a9a:	484f      	ldr	r0, [pc, #316]	; (8003bd8 <main+0x1e8>)
 8003a9c:	f001 fa20 	bl	8004ee0 <HCSR04_Read_Front>
	  sprintf(MSG, "Distance: %d\n", Front_US.DISTANCE);
 8003aa0:	4b52      	ldr	r3, [pc, #328]	; (8003bec <main+0x1fc>)
 8003aa2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003aa6:	f107 0010 	add.w	r0, r7, #16
 8003aaa:	4951      	ldr	r1, [pc, #324]	; (8003bf0 <main+0x200>)
 8003aac:	f006 fade 	bl	800a06c <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8003ab0:	f107 0110 	add.w	r1, r7, #16
 8003ab4:	2364      	movs	r3, #100	; 0x64
 8003ab6:	2223      	movs	r2, #35	; 0x23
 8003ab8:	484b      	ldr	r0, [pc, #300]	; (8003be8 <main+0x1f8>)
 8003aba:	f005 fb34 	bl	8009126 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ac2:	484c      	ldr	r0, [pc, #304]	; (8003bf4 <main+0x204>)
 8003ac4:	f002 f9bc 	bl	8005e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(25);
 8003ac8:	2019      	movs	r0, #25
 8003aca:	f001 faeb 	bl	80050a4 <HAL_Delay>

  // ESC testing
	  double speed = 50;
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <main+0x208>)
 8003ad4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  accelerate(&htim2, speed);
 8003ad8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003adc:	483f      	ldr	r0, [pc, #252]	; (8003bdc <main+0x1ec>)
 8003ade:	f7fd fb9f 	bl	8001220 <accelerate>
//	  drive_forward(&htim2, speed);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ae6:	4843      	ldr	r0, [pc, #268]	; (8003bf4 <main+0x204>)
 8003ae8:	f002 f9aa 	bl	8005e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003aec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003af0:	f001 fad8 	bl	80050a4 <HAL_Delay>
	  decelerate(&htim2);
 8003af4:	4839      	ldr	r0, [pc, #228]	; (8003bdc <main+0x1ec>)
 8003af6:	f7fd fbef 	bl	80012d8 <decelerate>
//	  stop(&htim2);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003afe:	483d      	ldr	r0, [pc, #244]	; (8003bf4 <main+0x204>)
 8003b00:	f002 f99e 	bl	8005e40 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8003b04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b08:	f001 facc 	bl	80050a4 <HAL_Delay>

    // imu testing

	  // Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4834      	ldr	r0, [pc, #208]	; (8003be0 <main+0x1f0>)
 8003b10:	f7ff fdfc 	bl	800370c <ICM_SelectBank>
	  HAL_Delay(10);
 8003b14:	200a      	movs	r0, #10
 8003b16:	f001 fac5 	bl	80050a4 <HAL_Delay>

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 8003b1a:	4831      	ldr	r0, [pc, #196]	; (8003be0 <main+0x1f0>)
 8003b1c:	f7ff fcc8 	bl	80034b0 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	4619      	mov	r1, r3
 8003b26:	482e      	ldr	r0, [pc, #184]	; (8003be0 <main+0x1f0>)
 8003b28:	f7ff fbd0 	bl	80032cc <ICM_ReadMag>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003b2c:	4a33      	ldr	r2, [pc, #204]	; (8003bfc <main+0x20c>)
 8003b2e:	4934      	ldr	r1, [pc, #208]	; (8003c00 <main+0x210>)
 8003b30:	482b      	ldr	r0, [pc, #172]	; (8003be0 <main+0x1f0>)
 8003b32:	f7ff fd0d 	bl	8003550 <ICM_CorrectAccelGyro>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b36:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <main+0x214>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd f87a 	bl	8000c34 <__aeabi_ui2f>
 8003b40:	4681      	mov	r9, r0
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <main+0x214>)
 8003b44:	885b      	ldrh	r3, [r3, #2]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd f874 	bl	8000c34 <__aeabi_ui2f>
 8003b4c:	4682      	mov	sl, r0
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <main+0x214>)
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd f86e 	bl	8000c34 <__aeabi_ui2f>
 8003b58:	4683      	mov	fp, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <main+0x218>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd f868 	bl	8000c34 <__aeabi_ui2f>
 8003b64:	6078      	str	r0, [r7, #4]
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <main+0x218>)
 8003b68:	885b      	ldrh	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd f862 	bl	8000c34 <__aeabi_ui2f>
 8003b70:	4604      	mov	r4, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003b72:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <main+0x218>)
 8003b74:	889b      	ldrh	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd f85c 	bl	8000c34 <__aeabi_ui2f>
 8003b7c:	4605      	mov	r5, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003b7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd f85a 	bl	8000c3c <__aeabi_i2f>
 8003b88:	4606      	mov	r6, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003b8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f854 	bl	8000c3c <__aeabi_i2f>
 8003b94:	4680      	mov	r8, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 8003b96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f84e 	bl	8000c3c <__aeabi_i2f>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba8:	9602      	str	r6, [sp, #8]
 8003baa:	9501      	str	r5, [sp, #4]
 8003bac:	9400      	str	r4, [sp, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	465a      	mov	r2, fp
 8003bb2:	4651      	mov	r1, sl
 8003bb4:	4648      	mov	r0, r9
 8003bb6:	f7fd fcbb 	bl	8001530 <MadgwickAHRSupdate>

	  computeAngles();
 8003bba:	f7ff f9e1 	bl	8002f80 <computeAngles>

	  float roll_main = roll;
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <main+0x21c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float pitch_main = pitch;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <main+0x220>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
	  float yaw_main = yaw;
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <main+0x224>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
  {
 8003bd0:	e763      	b.n	8003a9a <main+0xaa>
 8003bd2:	bf00      	nop
 8003bd4:	20000430 	.word	0x20000430
 8003bd8:	200004c0 	.word	0x200004c0
 8003bdc:	20000478 	.word	0x20000478
 8003be0:	20000384 	.word	0x20000384
 8003be4:	200002e4 	.word	0x200002e4
 8003be8:	20000508 	.word	0x20000508
 8003bec:	20000080 	.word	0x20000080
 8003bf0:	0800cd80 	.word	0x0800cd80
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40490000 	.word	0x40490000
 8003bfc:	2000032c 	.word	0x2000032c
 8003c00:	20000324 	.word	0x20000324
 8003c04:	2000033c 	.word	0x2000033c
 8003c08:	20000334 	.word	0x20000334
 8003c0c:	20000314 	.word	0x20000314
 8003c10:	20000318 	.word	0x20000318
 8003c14:	2000031c 	.word	0x2000031c

08003c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b094      	sub	sp, #80	; 0x50
 8003c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c22:	2228      	movs	r2, #40	; 0x28
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f005 fdb8 	bl	800979c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c50:	2310      	movs	r3, #16
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 f8d7 	bl	8006e10 <HAL_RCC_OscConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003c68:	f000 fb5c 	bl	8004324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 fb43 	bl	8007314 <HAL_RCC_ClockConfig>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003c94:	f000 fb46 	bl	8004324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fccd 	bl	8007644 <HAL_RCCEx_PeriphCLKConfig>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003cb0:	f000 fb38 	bl	8004324 <Error_Handler>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3750      	adds	r7, #80	; 0x50
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cce:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <MX_ADC1_Init+0x78>)
 8003cd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cd2:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003ce6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003cea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003cfa:	f001 f9f7 	bl	80050ec <HAL_ADC_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003d04:	f000 fb0e 	bl	8004324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d14:	1d3b      	adds	r3, r7, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4805      	ldr	r0, [pc, #20]	; (8003d30 <MX_ADC1_Init+0x74>)
 8003d1a:	f001 fabf 	bl	800529c <HAL_ADC_ConfigChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003d24:	f000 fafe 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000354 	.word	0x20000354
 8003d34:	40012400 	.word	0x40012400

08003d38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d3e:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <MX_I2C2_Init+0x54>)
 8003d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d44:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <MX_I2C2_Init+0x58>)
 8003d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d50:	22d2      	movs	r2, #210	; 0xd2
 8003d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d74:	4804      	ldr	r0, [pc, #16]	; (8003d88 <MX_I2C2_Init+0x50>)
 8003d76:	f002 f87d 	bl	8005e74 <HAL_I2C_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d80:	f000 fad0 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000384 	.word	0x20000384
 8003d8c:	40005800 	.word	0x40005800
 8003d90:	00061a80 	.word	0x00061a80

08003d94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <MX_SPI2_Init+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003da4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003de0:	220a      	movs	r2, #10
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003de4:	4804      	ldr	r0, [pc, #16]	; (8003df8 <MX_SPI2_Init+0x64>)
 8003de6:	f003 fce3 	bl	80077b0 <HAL_SPI_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003df0:	f000 fa98 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200003d8 	.word	0x200003d8
 8003dfc:	40003800 	.word	0x40003800

08003e00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 fcc4 	bl	800979c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e1c:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <MX_TIM1_Init+0xac>)
 8003e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e28:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e60:	2301      	movs	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	4619      	mov	r1, r3
 8003e72:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e74:	f004 f812 	bl	8007e9c <HAL_TIM_Encoder_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003e7e:	f000 fa51 	bl	8004324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <MX_TIM1_Init+0xa8>)
 8003e90:	f005 f88c 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003e9a:	f000 fa43 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e9e:	bf00      	nop
 8003ea0:	3730      	adds	r7, #48	; 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000430 	.word	0x20000430
 8003eac:	40012c00 	.word	0x40012c00

08003eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08e      	sub	sp, #56	; 0x38
 8003eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec4:	f107 0320 	add.w	r3, r7, #32
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
 8003edc:	615a      	str	r2, [r3, #20]
 8003ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003eea:	2203      	movs	r2, #3
 8003eec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eee:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003ef6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f02:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f08:	4829      	ldr	r0, [pc, #164]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f0a:	f003 fcd5 	bl	80078b8 <HAL_TIM_Base_Init>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003f14:	f000 fa06 	bl	8004324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f22:	4619      	mov	r1, r3
 8003f24:	4822      	ldr	r0, [pc, #136]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f26:	f004 fb63 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003f30:	f000 f9f8 	bl	8004324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f34:	481e      	ldr	r0, [pc, #120]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f36:	f003 fd59 	bl	80079ec <HAL_TIM_PWM_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003f40:	f000 f9f0 	bl	8004324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f4c:	f107 0320 	add.w	r3, r7, #32
 8003f50:	4619      	mov	r1, r3
 8003f52:	4817      	ldr	r0, [pc, #92]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f54:	f005 f82a 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003f5e:	f000 f9e1 	bl	8004324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f62:	2360      	movs	r3, #96	; 0x60
 8003f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003f66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	4619      	mov	r1, r3
 8003f7a:	480d      	ldr	r0, [pc, #52]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f7c:	f004 fa7a 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003f86:	f000 f9cd 	bl	8004324 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003f92:	f004 fa6f 	bl	8008474 <HAL_TIM_PWM_ConfigChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003f9c:	f000 f9c2 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003fa0:	4803      	ldr	r0, [pc, #12]	; (8003fb0 <MX_TIM2_Init+0x100>)
 8003fa2:	f000 fb91 	bl	80046c8 <HAL_TIM_MspPostInit>

}
 8003fa6:	bf00      	nop
 8003fa8:	3738      	adds	r7, #56	; 0x38
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000478 	.word	0x20000478

08003fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fba:	f107 0318 	add.w	r3, r7, #24
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8003fe0:	4a31      	ldr	r2, [pc, #196]	; (80040a8 <MX_TIM3_Init+0xf4>)
 8003fe2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8003fe6:	2207      	movs	r2, #7
 8003fe8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8003ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffe:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004004:	4827      	ldr	r0, [pc, #156]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004006:	f003 fc57 	bl	80078b8 <HAL_TIM_Base_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8004010:	f000 f988 	bl	8004324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800401a:	f107 0318 	add.w	r3, r7, #24
 800401e:	4619      	mov	r1, r3
 8004020:	4820      	ldr	r0, [pc, #128]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004022:	f004 fae5 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800402c:	f000 f97a 	bl	8004324 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004030:	481c      	ldr	r0, [pc, #112]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004032:	f003 fdd5 	bl	8007be0 <HAL_TIM_IC_Init>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800403c:	f000 f972 	bl	8004324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	4619      	mov	r1, r3
 800404e:	4815      	ldr	r0, [pc, #84]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004050:	f004 ffac 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800405a:	f000 f963 	bl	8004324 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800405e:	2300      	movs	r3, #0
 8004060:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004062:	2301      	movs	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800406e:	463b      	mov	r3, r7
 8004070:	2204      	movs	r2, #4
 8004072:	4619      	mov	r1, r3
 8004074:	480b      	ldr	r0, [pc, #44]	; (80040a4 <MX_TIM3_Init+0xf0>)
 8004076:	f004 f969 	bl	800834c <HAL_TIM_IC_ConfigChannel>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8004080:	f000 f950 	bl	8004324 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004084:	463b      	mov	r3, r7
 8004086:	2208      	movs	r2, #8
 8004088:	4619      	mov	r1, r3
 800408a:	4806      	ldr	r0, [pc, #24]	; (80040a4 <MX_TIM3_Init+0xf0>)
 800408c:	f004 f95e 	bl	800834c <HAL_TIM_IC_ConfigChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8004096:	f000 f945 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800409a:	bf00      	nop
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200004c0 	.word	0x200004c0
 80040a8:	40000400 	.word	0x40000400

080040ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <MX_USART2_UART_Init+0x50>)
 80040b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040d2:	220c      	movs	r2, #12
 80040d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040e2:	4805      	ldr	r0, [pc, #20]	; (80040f8 <MX_USART2_UART_Init+0x4c>)
 80040e4:	f004 ffd2 	bl	800908c <HAL_UART_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040ee:	f000 f919 	bl	8004324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000508 	.word	0x20000508
 80040fc:	40004400 	.word	0x40004400

08004100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <MX_DMA_Init+0x38>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <MX_DMA_Init+0x38>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6153      	str	r3, [r2, #20]
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <MX_DMA_Init+0x38>)
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	2010      	movs	r0, #16
 8004124:	f001 facb 	bl	80056be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004128:	2010      	movs	r0, #16
 800412a:	f001 fae4 	bl	80056f6 <HAL_NVIC_EnableIRQ>

}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004150:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <MX_GPIO_Init+0x174>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <MX_GPIO_Init+0x174>)
 8004156:	f043 0310 	orr.w	r3, r3, #16
 800415a:	6193      	str	r3, [r2, #24]
 800415c:	4b54      	ldr	r3, [pc, #336]	; (80042b0 <MX_GPIO_Init+0x174>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004168:	4b51      	ldr	r3, [pc, #324]	; (80042b0 <MX_GPIO_Init+0x174>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a50      	ldr	r2, [pc, #320]	; (80042b0 <MX_GPIO_Init+0x174>)
 800416e:	f043 0320 	orr.w	r3, r3, #32
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b4e      	ldr	r3, [pc, #312]	; (80042b0 <MX_GPIO_Init+0x174>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	4b4b      	ldr	r3, [pc, #300]	; (80042b0 <MX_GPIO_Init+0x174>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <MX_GPIO_Init+0x174>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <MX_GPIO_Init+0x174>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <MX_GPIO_Init+0x174>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <MX_GPIO_Init+0x174>)
 800419e:	f043 0308 	orr.w	r3, r3, #8
 80041a2:	6193      	str	r3, [r2, #24]
 80041a4:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <MX_GPIO_Init+0x174>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041b6:	483f      	ldr	r0, [pc, #252]	; (80042b4 <MX_GPIO_Init+0x178>)
 80041b8:	f001 fe2a 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 80041bc:	2200      	movs	r2, #0
 80041be:	2140      	movs	r1, #64	; 0x40
 80041c0:	483d      	ldr	r0, [pc, #244]	; (80042b8 <MX_GPIO_Init+0x17c>)
 80041c2:	f001 fe25 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2158      	movs	r1, #88	; 0x58
 80041ca:	483c      	ldr	r0, [pc, #240]	; (80042bc <MX_GPIO_Init+0x180>)
 80041cc:	f001 fe20 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80041d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041de:	2302      	movs	r3, #2
 80041e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	4832      	ldr	r0, [pc, #200]	; (80042b4 <MX_GPIO_Init+0x178>)
 80041ea:	f001 fc8d 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80041ee:	2320      	movs	r3, #32
 80041f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	4619      	mov	r1, r3
 8004200:	482d      	ldr	r0, [pc, #180]	; (80042b8 <MX_GPIO_Init+0x17c>)
 8004202:	f001 fc81 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800420a:	2301      	movs	r3, #1
 800420c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004212:	2302      	movs	r3, #2
 8004214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	4619      	mov	r1, r3
 800421c:	4826      	ldr	r0, [pc, #152]	; (80042b8 <MX_GPIO_Init+0x17c>)
 800421e:	f001 fc73 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 8004222:	2302      	movs	r3, #2
 8004224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	4821      	ldr	r0, [pc, #132]	; (80042bc <MX_GPIO_Init+0x180>)
 8004236:	f001 fc67 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 800423a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800423e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <MX_GPIO_Init+0x184>)
 8004242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	481a      	ldr	r0, [pc, #104]	; (80042b8 <MX_GPIO_Init+0x17c>)
 8004250:	f001 fc5a 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8004254:	2358      	movs	r3, #88	; 0x58
 8004256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004258:	2301      	movs	r3, #1
 800425a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2302      	movs	r3, #2
 8004262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	4619      	mov	r1, r3
 800426a:	4814      	ldr	r0, [pc, #80]	; (80042bc <MX_GPIO_Init+0x180>)
 800426c:	f001 fc4c 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ESP_SDA_Pin */
  GPIO_InitStruct.Pin = I2C_ESP_SDA_Pin;
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004276:	2312      	movs	r3, #18
 8004278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800427a:	2303      	movs	r3, #3
 800427c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_ESP_SDA_GPIO_Port, &GPIO_InitStruct);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	480d      	ldr	r0, [pc, #52]	; (80042bc <MX_GPIO_Init+0x180>)
 8004286:	f001 fc3f 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <MX_GPIO_Init+0x188>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <MX_GPIO_Init+0x188>)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	6053      	str	r3, [r2, #4]

}
 80042a6:	bf00      	nop
 80042a8:	3728      	adds	r7, #40	; 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40011000 	.word	0x40011000
 80042b8:	40010800 	.word	0x40010800
 80042bc:	40010c00 	.word	0x40010c00
 80042c0:	10110000 	.word	0x10110000
 80042c4:	40010000 	.word	0x40010000

080042c8 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us (uint32_t us)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <delay_us+0x2c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 80042d8:	bf00      	nop
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <delay_us+0x2c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d8f9      	bhi.n	80042da <delay_us+0x12>
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200004c0 	.word	0x200004c0

080042f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
 8004300:	220c      	movs	r2, #12
 8004302:	4905      	ldr	r1, [pc, #20]	; (8004318 <HAL_UART_RxCpltCallback+0x20>)
 8004304:	4805      	ldr	r0, [pc, #20]	; (800431c <HAL_UART_RxCpltCallback+0x24>)
 8004306:	f004 ffa0 	bl	800924a <HAL_UART_Receive_DMA>
    ESP_Receive(&htim2);
 800430a:	4805      	ldr	r0, [pc, #20]	; (8004320 <HAL_UART_RxCpltCallback+0x28>)
 800430c:	f7fd f840 	bl	8001390 <ESP_Receive>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200002e4 	.word	0x200002e4
 800431c:	20000508 	.word	0x20000508
 8004320:	20000478 	.word	0x20000478

08004324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004328:	b672      	cpsid	i
}
 800432a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800432c:	e7fe      	b.n	800432c <Error_Handler+0x8>
	...

08004330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <HAL_MspInit+0x5c>)
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_MspInit+0x5c>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6193      	str	r3, [r2, #24]
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_MspInit+0x5c>)
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <HAL_MspInit+0x5c>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_MspInit+0x5c>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	61d3      	str	r3, [r2, #28]
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_MspInit+0x5c>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_MspInit+0x60>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_MspInit+0x60>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000

08004394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_ADC_MspInit+0x6c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d121      	bne.n	80043f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043be:	6193      	str	r3, [r2, #24]
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043d2:	f043 0304 	orr.w	r3, r3, #4
 80043d6:	6193      	str	r3, [r2, #24]
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_ADC_MspInit+0x70>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 80043e4:	2310      	movs	r3, #16
 80043e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043e8:	2303      	movs	r3, #3
 80043ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4619      	mov	r1, r3
 80043f2:	4805      	ldr	r0, [pc, #20]	; (8004408 <HAL_ADC_MspInit+0x74>)
 80043f4:	f001 fb88 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40012400 	.word	0x40012400
 8004404:	40021000 	.word	0x40021000
 8004408:	40010800 	.word	0x40010800

0800440c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_I2C_MspInit+0x74>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d124      	bne.n	8004476 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_I2C_MspInit+0x78>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <HAL_I2C_MspInit+0x78>)
 8004432:	f043 0308 	orr.w	r3, r3, #8
 8004436:	6193      	str	r3, [r2, #24]
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_I2C_MspInit+0x78>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8004444:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800444a:	2312      	movs	r3, #18
 800444c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004452:	f107 0310 	add.w	r3, r7, #16
 8004456:	4619      	mov	r1, r3
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <HAL_I2C_MspInit+0x7c>)
 800445a:	f001 fb55 	bl	8005b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_I2C_MspInit+0x78>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <HAL_I2C_MspInit+0x78>)
 8004464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004468:	61d3      	str	r3, [r2, #28]
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_I2C_MspInit+0x78>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004476:	bf00      	nop
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40005800 	.word	0x40005800
 8004484:	40021000 	.word	0x40021000
 8004488:	40010c00 	.word	0x40010c00

0800448c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_SPI_MspInit+0x8c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d131      	bne.n	8004510 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b6:	61d3      	str	r3, [r2, #28]
 80044b8:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4a14      	ldr	r2, [pc, #80]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044ca:	f043 0308 	orr.w	r3, r3, #8
 80044ce:	6193      	str	r3, [r2, #24]
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_SPI_MspInit+0x90>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80044dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80044e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044e6:	2303      	movs	r3, #3
 80044e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	4619      	mov	r1, r3
 80044f0:	480b      	ldr	r0, [pc, #44]	; (8004520 <HAL_SPI_MspInit+0x94>)
 80044f2:	f001 fb09 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4619      	mov	r1, r3
 800450a:	4805      	ldr	r0, [pc, #20]	; (8004520 <HAL_SPI_MspInit+0x94>)
 800450c:	f001 fafc 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40003800 	.word	0x40003800
 800451c:	40021000 	.word	0x40021000
 8004520:	40010c00 	.word	0x40010c00

08004524 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d144      	bne.n	80045ce <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004544:	4b25      	ldr	r3, [pc, #148]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4a24      	ldr	r2, [pc, #144]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800454a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800454e:	6193      	str	r3, [r2, #24]
 8004550:	4b22      	ldr	r3, [pc, #136]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6193      	str	r3, [r2, #24]
 8004568:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_TIM_Encoder_MspInit+0xb8>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|RIGHT_ENCODER_A_Pin;
 8004574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004582:	f107 0310 	add.w	r3, r7, #16
 8004586:	4619      	mov	r1, r3
 8004588:	4815      	ldr	r0, [pc, #84]	; (80045e0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800458a:	f001 fabd 	bl	8005b08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800458e:	2200      	movs	r2, #0
 8004590:	2100      	movs	r1, #0
 8004592:	2018      	movs	r0, #24
 8004594:	f001 f893 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004598:	2018      	movs	r0, #24
 800459a:	f001 f8ac 	bl	80056f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	2019      	movs	r0, #25
 80045a4:	f001 f88b 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80045a8:	2019      	movs	r0, #25
 80045aa:	f001 f8a4 	bl	80056f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2100      	movs	r1, #0
 80045b2:	201a      	movs	r0, #26
 80045b4:	f001 f883 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80045b8:	201a      	movs	r0, #26
 80045ba:	f001 f89c 	bl	80056f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80045be:	2200      	movs	r2, #0
 80045c0:	2100      	movs	r1, #0
 80045c2:	201b      	movs	r0, #27
 80045c4:	f001 f87b 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80045c8:	201b      	movs	r0, #27
 80045ca:	f001 f894 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80045ce:	bf00      	nop
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40010800 	.word	0x40010800

080045e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 0318 	add.w	r3, r7, #24
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004602:	d10c      	bne.n	800461e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004604:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4a2b      	ldr	r2, [pc, #172]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	61d3      	str	r3, [r2, #28]
 8004610:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800461c:	e048      	b.n	80046b0 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a26      	ldr	r2, [pc, #152]	; (80046bc <HAL_TIM_Base_MspInit+0xd8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d143      	bne.n	80046b0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004628:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	61d3      	str	r3, [r2, #28]
 8004634:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6193      	str	r3, [r2, #24]
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	6193      	str	r3, [r2, #24]
 8004664:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <HAL_TIM_Base_MspInit+0xd4>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 800467c:	f107 0318 	add.w	r3, r7, #24
 8004680:	4619      	mov	r1, r3
 8004682:	480f      	ldr	r0, [pc, #60]	; (80046c0 <HAL_TIM_Base_MspInit+0xdc>)
 8004684:	f001 fa40 	bl	8005b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 8004688:	2301      	movs	r3, #1
 800468a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004694:	f107 0318 	add.w	r3, r7, #24
 8004698:	4619      	mov	r1, r3
 800469a:	480a      	ldr	r0, [pc, #40]	; (80046c4 <HAL_TIM_Base_MspInit+0xe0>)
 800469c:	f001 fa34 	bl	8005b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	201d      	movs	r0, #29
 80046a6:	f001 f80a 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046aa:	201d      	movs	r0, #29
 80046ac:	f001 f823 	bl	80056f6 <HAL_NVIC_EnableIRQ>
}
 80046b0:	bf00      	nop
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40010800 	.word	0x40010800
 80046c4:	40010c00 	.word	0x40010c00

080046c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d117      	bne.n	8004718 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_TIM_MspPostInit+0x58>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	4a0c      	ldr	r2, [pc, #48]	; (8004720 <HAL_TIM_MspPostInit+0x58>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	6193      	str	r3, [r2, #24]
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_TIM_MspPostInit+0x58>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8004700:	2303      	movs	r3, #3
 8004702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	2302      	movs	r3, #2
 800470a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	4619      	mov	r1, r3
 8004712:	4804      	ldr	r0, [pc, #16]	; (8004724 <HAL_TIM_MspPostInit+0x5c>)
 8004714:	f001 f9f8 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004718:	bf00      	nop
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	40010800 	.word	0x40010800

08004728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0310 	add.w	r3, r7, #16
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2e      	ldr	r2, [pc, #184]	; (80047fc <HAL_UART_MspInit+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d155      	bne.n	80047f4 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_UART_MspInit+0xd8>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4a2c      	ldr	r2, [pc, #176]	; (8004800 <HAL_UART_MspInit+0xd8>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004752:	61d3      	str	r3, [r2, #28]
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_UART_MspInit+0xd8>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <HAL_UART_MspInit+0xd8>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <HAL_UART_MspInit+0xd8>)
 8004766:	f043 0304 	orr.w	r3, r3, #4
 800476a:	6193      	str	r3, [r2, #24]
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_UART_MspInit+0xd8>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004778:	2304      	movs	r3, #4
 800477a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004784:	f107 0310 	add.w	r3, r7, #16
 8004788:	4619      	mov	r1, r3
 800478a:	481e      	ldr	r0, [pc, #120]	; (8004804 <HAL_UART_MspInit+0xdc>)
 800478c:	f001 f9bc 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004790:	2308      	movs	r3, #8
 8004792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	4619      	mov	r1, r3
 80047a2:	4818      	ldr	r0, [pc, #96]	; (8004804 <HAL_UART_MspInit+0xdc>)
 80047a4:	f001 f9b0 	bl	8005b08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_UART_MspInit+0xe4>)
 80047ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047ae:	4b16      	ldr	r3, [pc, #88]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b4:	4b14      	ldr	r3, [pc, #80]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047d8:	480b      	ldr	r0, [pc, #44]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047da:	f000 ffa7 	bl	800572c <HAL_DMA_Init>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80047e4:	f7ff fd9e 	bl	8004324 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
 80047ee:	4a06      	ldr	r2, [pc, #24]	; (8004808 <HAL_UART_MspInit+0xe0>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047f4:	bf00      	nop
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40004400 	.word	0x40004400
 8004800:	40021000 	.word	0x40021000
 8004804:	40010800 	.word	0x40010800
 8004808:	2000054c 	.word	0x2000054c
 800480c:	4002006c 	.word	0x4002006c

08004810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004814:	e7fe      	b.n	8004814 <NMI_Handler+0x4>

08004816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800481a:	e7fe      	b.n	800481a <HardFault_Handler+0x4>

0800481c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004820:	e7fe      	b.n	8004820 <MemManage_Handler+0x4>

08004822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004826:	e7fe      	b.n	8004826 <BusFault_Handler+0x4>

08004828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800482c:	e7fe      	b.n	800482c <UsageFault_Handler+0x4>

0800482e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	0000      	movs	r0, r0
 8004854:	0000      	movs	r0, r0
	...

08004858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <SysTick_Handler+0xe0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a35      	ldr	r2, [pc, #212]	; (8004938 <SysTick_Handler+0xe0>)
 8004864:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <SysTick_Handler+0xe0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800486e:	d159      	bne.n	8004924 <SysTick_Handler+0xcc>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 8004870:	4b32      	ldr	r3, [pc, #200]	; (800493c <SysTick_Handler+0xe4>)
 8004872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004876:	461a      	mov	r2, r3
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <SysTick_Handler+0xe8>)
 800487a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f7fb fdbe 	bl	8000404 <__aeabi_i2d>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	492d      	ldr	r1, [pc, #180]	; (8004944 <SysTick_Handler+0xec>)
 800488e:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <SysTick_Handler+0xec>)
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	492b      	ldr	r1, [pc, #172]	; (8004948 <SysTick_Handler+0xf0>)
 800489a:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position;
 800489e:	4b27      	ldr	r3, [pc, #156]	; (800493c <SysTick_Handler+0xe4>)
 80048a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fb fdad 	bl	8000404 <__aeabi_i2d>
 80048aa:	a321      	add	r3, pc, #132	; (adr r3, 8004930 <SysTick_Handler+0xd8>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fe12 	bl	80004d8 <__aeabi_dmul>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4924      	ldr	r1, [pc, #144]	; (800494c <SysTick_Handler+0xf4>)
 80048ba:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos;
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <SysTick_Handler+0xe8>)
 80048c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fd9d 	bl	8000404 <__aeabi_i2d>
 80048ca:	a319      	add	r3, pc, #100	; (adr r3, 8004930 <SysTick_Handler+0xd8>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fe02 	bl	80004d8 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	491d      	ldr	r1, [pc, #116]	; (8004950 <SysTick_Handler+0xf8>)
 80048da:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <SysTick_Handler+0xf4>)
 80048e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <SysTick_Handler+0xf8>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fc3d 	bl	8000168 <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	f7fb fc37 	bl	800016c <__adddf3>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4914      	ldr	r1, [pc, #80]	; (8004954 <SysTick_Handler+0xfc>)
 8004904:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 8004908:	4b12      	ldr	r3, [pc, #72]	; (8004954 <SysTick_Handler+0xfc>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	490e      	ldr	r1, [pc, #56]	; (8004948 <SysTick_Handler+0xf0>)
 8004910:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <SysTick_Handler+0xe4>)
 8004916:	f9b3 2000 	ldrsh.w	r2, [r3]
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <SysTick_Handler+0xe8>)
 800491c:	801a      	strh	r2, [r3, #0]
		indx = 0;
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <SysTick_Handler+0xe0>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004924:	f000 fba2 	bl	800506c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}
 800492c:	f3af 8000 	nop.w
 8004930:	05f68f13 	.word	0x05f68f13
 8004934:	3fdc5115 	.word	0x3fdc5115
 8004938:	200005b4 	.word	0x200005b4
 800493c:	20000596 	.word	0x20000596
 8004940:	200005b0 	.word	0x200005b0
 8004944:	20000598 	.word	0x20000598
 8004948:	20000050 	.word	0x20000050
 800494c:	200005b8 	.word	0x200005b8
 8004950:	200005c0 	.word	0x200005c0
 8004954:	200005a0 	.word	0x200005a0

08004958 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800495c:	4802      	ldr	r0, [pc, #8]	; (8004968 <DMA1_Channel6_IRQHandler+0x10>)
 800495e:	f000 ff9f 	bl	80058a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	2000054c 	.word	0x2000054c

0800496c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004970:	4802      	ldr	r0, [pc, #8]	; (800497c <TIM1_BRK_IRQHandler+0x10>)
 8004972:	f003 fbe3 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000430 	.word	0x20000430

08004980 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004984:	4802      	ldr	r0, [pc, #8]	; (8004990 <TIM1_UP_IRQHandler+0x10>)
 8004986:	f003 fbd9 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000430 	.word	0x20000430

08004994 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004998:	4802      	ldr	r0, [pc, #8]	; (80049a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800499a:	f003 fbcf 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000430 	.word	0x20000430

080049a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <TIM1_CC_IRQHandler+0x10>)
 80049ae:	f003 fbc5 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000430 	.word	0x20000430

080049bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <TIM3_IRQHandler+0x10>)
 80049c2:	f003 fbbb 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200004c0 	.word	0x200004c0

080049d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
	return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <_kill>:

int _kill(int pid, int sig)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049e8:	f004 feae 	bl	8009748 <__errno>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2216      	movs	r2, #22
 80049f0:	601a      	str	r2, [r3, #0]
	return -1;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <_exit>:

void _exit (int status)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ffe7 	bl	80049de <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a10:	e7fe      	b.n	8004a10 <_exit+0x12>

08004a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	e00a      	b.n	8004a3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a24:	f3af 8000 	nop.w
 8004a28:	4601      	mov	r1, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	60ba      	str	r2, [r7, #8]
 8004a30:	b2ca      	uxtb	r2, r1
 8004a32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3301      	adds	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	dbf0      	blt.n	8004a24 <_read+0x12>
	}

return len;
 8004a42:	687b      	ldr	r3, [r7, #4]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_close>:
	}
	return len;
}

int _close(int file)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	return -1;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a72:	605a      	str	r2, [r3, #4]
	return 0;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <_isatty>:

int _isatty(int file)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	return 1;
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <_sbrk+0x5c>)
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <_sbrk+0x60>)
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <_sbrk+0x64>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <_sbrk+0x64>)
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <_sbrk+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_sbrk+0x64>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d207      	bcs.n	8004aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004adc:	f004 fe34 	bl	8009748 <__errno>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aea:	e009      	b.n	8004b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <_sbrk+0x64>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <_sbrk+0x64>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <_sbrk+0x64>)
 8004afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20005000 	.word	0x20005000
 8004b0c:	00000400 	.word	0x00000400
 8004b10:	200005c8 	.word	0x200005c8
 8004b14:	200005e0 	.word	0x200005e0

08004b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	0000      	movs	r0, r0
	...

08004b28 <HAL_TIM_IC_CaptureCallback>:
#include "stm32f1xx_hal_tim.h"
#include "stm32f1xx_hal_gpio.h"
#include "main.h"

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a86      	ldr	r2, [pc, #536]	; (8004d50 <HAL_TIM_IC_CaptureCallback+0x228>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d147      	bne.n	8004bca <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004b3c:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	4a84      	ldr	r2, [pc, #528]	; (8004d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004b46:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8004b48:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8004b50:	4b81      	ldr	r3, [pc, #516]	; (8004d58 <HAL_TIM_IC_CaptureCallback+0x230>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8004b58:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 8004b5a:	4b80      	ldr	r3, [pc, #512]	; (8004d5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8004b5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 8004b64:	4b7d      	ldr	r3, [pc, #500]	; (8004d5c <HAL_TIM_IC_CaptureCallback+0x234>)
 8004b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da00      	bge.n	8004b70 <HAL_TIM_IC_CaptureCallback+0x48>
 8004b6e:	3303      	adds	r3, #3
 8004b70:	109b      	asrs	r3, r3, #2
 8004b72:	b21a      	sxth	r2, r3
 8004b74:	4b7a      	ldr	r3, [pc, #488]	; (8004d60 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004b76:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004b7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position; // might have consider gear ratio in this calculation
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004b88:	a36f      	add	r3, pc, #444	; (adr r3, 8004d48 <HAL_TIM_IC_CaptureCallback+0x220>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb fca3 	bl	80004d8 <__aeabi_dmul>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4614      	mov	r4, r2
 8004b98:	461d      	mov	r5, r3
 8004b9a:	4b71      	ldr	r3, [pc, #452]	; (8004d60 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fb fc2f 	bl	8000404 <__aeabi_i2d>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4620      	mov	r0, r4
 8004bac:	4629      	mov	r1, r5
 8004bae:	f7fb fc93 	bl	80004d8 <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	496b      	ldr	r1, [pc, #428]	; (8004d64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004bb8:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
		}
	}

}
 8004bc8:	e17c      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
	else if (htim->Instance == TIM3) //ultrasonic
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a66      	ldr	r2, [pc, #408]	; (8004d68 <HAL_TIM_IC_CaptureCallback+0x240>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	f040 8177 	bne.w	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	7f1b      	ldrb	r3, [r3, #28]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d102      	bne.n	8004be4 <HAL_TIM_IC_CaptureCallback+0xbc>
			ultrasonic = &Front_US;
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_TIM_IC_CaptureCallback+0x244>)
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if (TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7f1b      	ldrb	r3, [r3, #28]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_IC_CaptureCallback+0xc8>
			ultrasonic = &Side_US;
 8004bec:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <HAL_TIM_IC_CaptureCallback+0x248>)
 8004bee:	61fb      	str	r3, [r7, #28]
		if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d171      	bne.n	8004cde <HAL_TIM_IC_CaptureCallback+0x1b6>
			ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f003 fdb9 	bl	8008778 <HAL_TIM_ReadCapturedValue>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fbeb 	bl	80003e4 <__aeabi_ui2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	69f9      	ldr	r1, [r7, #28]
 8004c14:	e9c1 2304 	strd	r2, r3, [r1, #16]
			ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <HAL_TIM_IC_CaptureCallback+0x112>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 020a 	bic.w	r2, r2, #10
 8004c36:	621a      	str	r2, [r3, #32]
 8004c38:	e021      	b.n	8004c7e <HAL_TIM_IC_CaptureCallback+0x156>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d108      	bne.n	8004c54 <HAL_TIM_IC_CaptureCallback+0x12c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c50:	6213      	str	r3, [r2, #32]
 8004c52:	e014      	b.n	8004c7e <HAL_TIM_IC_CaptureCallback+0x156>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIM_IC_CaptureCallback+0x146>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e007      	b.n	8004c7e <HAL_TIM_IC_CaptureCallback+0x156>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7c:	6213      	str	r3, [r2, #32]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_TIM_IC_CaptureCallback+0x170>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0202 	orr.w	r2, r2, #2
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	e115      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d108      	bne.n	8004cb2 <HAL_TIM_IC_CaptureCallback+0x18a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e108      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d108      	bne.n	8004ccc <HAL_TIM_IC_CaptureCallback+0x1a4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc8:	6213      	str	r3, [r2, #32]
 8004cca:	e0fb      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cda:	6213      	str	r3, [r2, #32]
}
 8004cdc:	e0f2      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
		else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 80ed 	bne.w	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
			ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f003 fd41 	bl	8008778 <HAL_TIM_ReadCapturedValue>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fb73 	bl	80003e4 <__aeabi_ui2d>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	e9c1 2306 	strd	r2, r3, [r1, #24]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultrasonic->VAL2 > ultrasonic->VAL1)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d1c:	f7fb fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d026      	beq.n	8004d74 <HAL_TIM_IC_CaptureCallback+0x24c>
				ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d32:	f7fb fa19 	bl	8000168 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	69f9      	ldr	r1, [r7, #28]
 8004d3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004d40:	e039      	b.n	8004db6 <HAL_TIM_IC_CaptureCallback+0x28e>
 8004d42:	bf00      	nop
 8004d44:	f3af 8000 	nop.w
 8004d48:	c083126f 	.word	0xc083126f
 8004d4c:	401921ca 	.word	0x401921ca
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	20000050 	.word	0x20000050
 8004d58:	20000590 	.word	0x20000590
 8004d5c:	20000594 	.word	0x20000594
 8004d60:	20000596 	.word	0x20000596
 8004d64:	200005a8 	.word	0x200005a8
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	20000080 	.word	0x20000080
 8004d70:	200000b8 	.word	0x200000b8
			else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004d80:	f7fb fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_IC_CaptureCallback+0x28e>
				ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004d90:	a14f      	add	r1, pc, #316	; (adr r1, 8004ed0 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8004d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d96:	f7fb f9e7 	bl	8000168 <__aeabi_dsub>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004da8:	f7fb f9e0 	bl	800016c <__adddf3>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	69f9      	ldr	r1, [r7, #28]
 8004db2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			sensor_val = ultrasonic->DIFFERENCE * .034/2;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004dbc:	a346      	add	r3, pc, #280	; (adr r3, 8004ed8 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fb89 	bl	80004d8 <__aeabi_dmul>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd6:	f7fb fca9 	bl	800072c <__aeabi_ddiv>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	e9c7 2304 	strd	r2, r3, [r7, #16]
			ultrasonic->DISTANCE = filter(sensor_val, ultrasonic->DISTANCE);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004de8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dec:	f000 f898 	bl	8004f20 <filter>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	69f9      	ldr	r1, [r7, #28]
 8004df6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <HAL_TIM_IC_CaptureCallback+0x2f4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 020a 	bic.w	r2, r2, #10
 8004e18:	621a      	str	r2, [r3, #32]
 8004e1a:	e021      	b.n	8004e60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d108      	bne.n	8004e36 <HAL_TIM_IC_CaptureCallback+0x30e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e32:	6213      	str	r3, [r2, #32]
 8004e34:	e014      	b.n	8004e60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d108      	bne.n	8004e50 <HAL_TIM_IC_CaptureCallback+0x328>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	e007      	b.n	8004e60 <HAL_TIM_IC_CaptureCallback+0x338>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e5e:	6213      	str	r3, [r2, #32]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <HAL_TIM_IC_CaptureCallback+0x34e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a12      	ldr	r2, [r2, #32]
 8004e72:	621a      	str	r2, [r3, #32]
 8004e74:	e01b      	b.n	8004eae <HAL_TIM_IC_CaptureCallback+0x386>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d106      	bne.n	8004e8c <HAL_TIM_IC_CaptureCallback+0x364>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	6213      	str	r3, [r2, #32]
 8004e8a:	e010      	b.n	8004eae <HAL_TIM_IC_CaptureCallback+0x386>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d106      	bne.n	8004ea2 <HAL_TIM_IC_CaptureCallback+0x37a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	6213      	str	r3, [r2, #32]
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IC_CaptureCallback+0x386>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68d9      	ldr	r1, [r3, #12]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	60da      	str	r2, [r3, #12]
}
 8004ec2:	e7ff      	b.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x39c>
 8004ec4:	bf00      	nop
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bdb0      	pop	{r4, r5, r7, pc}
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	40efffe0 	.word	0x40efffe0
 8004ed8:	b020c49c 	.word	0xb020c49c
 8004edc:	3fa16872 	.word	0x3fa16872

08004ee0 <HCSR04_Read_Front>:
	0,
	0
};

void HCSR04_Read_Front (TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2140      	movs	r1, #64	; 0x40
 8004eec:	480b      	ldr	r0, [pc, #44]	; (8004f1c <HCSR04_Read_Front+0x3c>)
 8004eee:	f000 ff8f 	bl	8005e10 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8004ef2:	200a      	movs	r0, #10
 8004ef4:	f7ff f9e8 	bl	80042c8 <delay_us>
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	4807      	ldr	r0, [pc, #28]	; (8004f1c <HCSR04_Read_Front+0x3c>)
 8004efe:	f000 ff87 	bl	8005e10 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0204 	orr.w	r2, r2, #4
 8004f10:	60da      	str	r2, [r3, #12]

}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40010800 	.word	0x40010800

08004f20 <filter>:
{
	return Side_US.DISTANCE;
}

double filter (double Sv, double old_Kv)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004f2a:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8004f2e:	a116      	add	r1, pc, #88	; (adr r1, 8004f88 <filter+0x68>)
 8004f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f38:	f7fb face 	bl	80004d8 <__aeabi_dmul>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4614      	mov	r4, r2
 8004f42:	461d      	mov	r5, r3
 8004f44:	a310      	add	r3, pc, #64	; (adr r3, 8004f88 <filter+0x68>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	4910      	ldr	r1, [pc, #64]	; (8004f90 <filter+0x70>)
 8004f50:	f7fb f90a 	bl	8000168 <__aeabi_dsub>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f60:	f7fb faba 	bl	80004d8 <__aeabi_dmul>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb f8fe 	bl	800016c <__adddf3>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 8004f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	47ae147b 	.word	0x47ae147b
 8004f8c:	3f847ae1 	.word	0x3f847ae1
 8004f90:	3ff00000 	.word	0x3ff00000

08004f94 <Reset_Handler>:
 8004f94:	2100      	movs	r1, #0
 8004f96:	e003      	b.n	8004fa0 <LoopCopyDataInit>

08004f98 <CopyDataInit>:
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <LoopFillZerobss+0x14>)
 8004f9a:	585b      	ldr	r3, [r3, r1]
 8004f9c:	5043      	str	r3, [r0, r1]
 8004f9e:	3104      	adds	r1, #4

08004fa0 <LoopCopyDataInit>:
 8004fa0:	480a      	ldr	r0, [pc, #40]	; (8004fcc <LoopFillZerobss+0x18>)
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <LoopFillZerobss+0x1c>)
 8004fa4:	1842      	adds	r2, r0, r1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3f6      	bcc.n	8004f98 <CopyDataInit>
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <LoopFillZerobss+0x20>)
 8004fac:	e002      	b.n	8004fb4 <LoopFillZerobss>

08004fae <FillZerobss>:
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f842 3b04 	str.w	r3, [r2], #4

08004fb4 <LoopFillZerobss>:
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <LoopFillZerobss+0x24>)
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3f9      	bcc.n	8004fae <FillZerobss>
 8004fba:	f7ff fdad 	bl	8004b18 <SystemInit>
 8004fbe:	f004 fbc9 	bl	8009754 <__libc_init_array>
 8004fc2:	f7fe fd15 	bl	80039f0 <main>
 8004fc6:	4770      	bx	lr
 8004fc8:	0800d1d4 	.word	0x0800d1d4
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	200002c8 	.word	0x200002c8
 8004fd4:	200002c8 	.word	0x200002c8
 8004fd8:	200005e0 	.word	0x200005e0

08004fdc <ADC1_2_IRQHandler>:
 8004fdc:	e7fe      	b.n	8004fdc <ADC1_2_IRQHandler>
	...

08004fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_Init+0x28>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a07      	ldr	r2, [pc, #28]	; (8005008 <HAL_Init+0x28>)
 8004fea:	f043 0310 	orr.w	r3, r3, #16
 8004fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	f000 fb59 	bl	80056a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f000 f808 	bl	800500c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ffc:	f7ff f998 	bl	8004330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000

0800500c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_InitTick+0x54>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_InitTick+0x58>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005022:	fbb3 f3f1 	udiv	r3, r3, r1
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fb71 	bl	8005712 <HAL_SYSTICK_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e00e      	b.n	8005058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b0f      	cmp	r3, #15
 800503e:	d80a      	bhi.n	8005056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005040:	2200      	movs	r2, #0
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005048:	f000 fb39 	bl	80056be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800504c:	4a06      	ldr	r2, [pc, #24]	; (8005068 <HAL_InitTick+0x5c>)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000078 	.word	0x20000078
 8005064:	200000f4 	.word	0x200000f4
 8005068:	200000f0 	.word	0x200000f0

0800506c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_IncTick+0x1c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_IncTick+0x20>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4413      	add	r3, r2
 800507c:	4a03      	ldr	r2, [pc, #12]	; (800508c <HAL_IncTick+0x20>)
 800507e:	6013      	str	r3, [r2, #0]
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	200000f4 	.word	0x200000f4
 800508c:	200005cc 	.word	0x200005cc

08005090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return uwTick;
 8005094:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <HAL_GetTick+0x10>)
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	200005cc 	.word	0x200005cc

080050a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff fff0 	bl	8005090 <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050bc:	d005      	beq.n	80050ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_Delay+0x44>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050ca:	bf00      	nop
 80050cc:	f7ff ffe0 	bl	8005090 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d8f7      	bhi.n	80050cc <HAL_Delay+0x28>
  {
  }
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200000f4 	.word	0x200000f4

080050ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0be      	b.n	800528c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f932 	bl	8004394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f9ab 	bl	800548c <ADC_ConversionStop_Disable>
 8005136:	4603      	mov	r3, r0
 8005138:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 8099 	bne.w	800527a <HAL_ADC_Init+0x18e>
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 8095 	bne.w	800527a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005158:	f023 0302 	bic.w	r3, r3, #2
 800515c:	f043 0202 	orr.w	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800516c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	7b1b      	ldrb	r3, [r3, #12]
 8005172:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005174:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4313      	orrs	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d003      	beq.n	800518e <HAL_ADC_Init+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <HAL_ADC_Init+0xa8>
 800518e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005192:	e000      	b.n	8005196 <HAL_ADC_Init+0xaa>
 8005194:	2300      	movs	r3, #0
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7d1b      	ldrb	r3, [r3, #20]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d119      	bne.n	80051d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7b1b      	ldrb	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	035a      	lsls	r2, r3, #13
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e00b      	b.n	80051d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_ADC_Init+0x1a8>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	d003      	beq.n	8005212 <HAL_ADC_Init+0x126>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d104      	bne.n	800521c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	3b01      	subs	r3, #1
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	430a      	orrs	r2, r1
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <HAL_ADC_Init+0x1ac>)
 8005238:	4013      	ands	r3, r2
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d10b      	bne.n	8005258 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005256:	e018      	b.n	800528a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f023 0312 	bic.w	r3, r3, #18
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f043 0201 	orr.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005278:	e007      	b.n	800528a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800528a:	7dfb      	ldrb	r3, [r7, #23]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	ffe1f7fd 	.word	0xffe1f7fd
 8005298:	ff1f0efe 	.word	0xff1f0efe

0800529c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x20>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0dc      	b.n	8005476 <HAL_ADC_ConfigChannel+0x1da>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d81c      	bhi.n	8005306 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	3b05      	subs	r3, #5
 80052de:	221f      	movs	r2, #31
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	4019      	ands	r1, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	3b05      	subs	r3, #5
 80052f8:	fa00 f203 	lsl.w	r2, r0, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	635a      	str	r2, [r3, #52]	; 0x34
 8005304:	e03c      	b.n	8005380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d81c      	bhi.n	8005348 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	3b23      	subs	r3, #35	; 0x23
 8005320:	221f      	movs	r2, #31
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	4019      	ands	r1, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	3b23      	subs	r3, #35	; 0x23
 800533a:	fa00 f203 	lsl.w	r2, r0, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
 8005346:	e01b      	b.n	8005380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	3b41      	subs	r3, #65	; 0x41
 800535a:	221f      	movs	r2, #31
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	4019      	ands	r1, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	3b41      	subs	r3, #65	; 0x41
 8005374:	fa00 f203 	lsl.w	r2, r0, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b09      	cmp	r3, #9
 8005386:	d91c      	bls.n	80053c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68d9      	ldr	r1, [r3, #12]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	3b1e      	subs	r3, #30
 800539a:	2207      	movs	r2, #7
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	4019      	ands	r1, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6898      	ldr	r0, [r3, #8]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	3b1e      	subs	r3, #30
 80053b4:	fa00 f203 	lsl.w	r2, r0, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	e019      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6919      	ldr	r1, [r3, #16]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4413      	add	r3, r2
 80053d2:	2207      	movs	r2, #7
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	4019      	ands	r1, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6898      	ldr	r0, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	fa00 f203 	lsl.w	r2, r0, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d003      	beq.n	8005406 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005402:	2b11      	cmp	r3, #17
 8005404:	d132      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_ADC_ConfigChannel+0x1e4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d125      	bne.n	800545c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d126      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800542c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b10      	cmp	r3, #16
 8005434:	d11a      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <HAL_ADC_ConfigChannel+0x1e8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a13      	ldr	r2, [pc, #76]	; (8005488 <HAL_ADC_ConfigChannel+0x1ec>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	0c9a      	lsrs	r2, r3, #18
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800544c:	e002      	b.n	8005454 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f9      	bne.n	800544e <HAL_ADC_ConfigChannel+0x1b2>
 800545a:	e007      	b.n	800546c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	40012400 	.word	0x40012400
 8005484:	20000078 	.word	0x20000078
 8005488:	431bde83 	.word	0x431bde83

0800548c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d12e      	bne.n	8005504 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054b6:	f7ff fdeb 	bl	8005090 <HAL_GetTick>
 80054ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80054bc:	e01b      	b.n	80054f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054be:	f7ff fde7 	bl	8005090 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d914      	bls.n	80054f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f043 0210 	orr.w	r2, r3, #16
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	f043 0201 	orr.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e007      	b.n	8005506 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d0dc      	beq.n	80054be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <__NVIC_SetPriorityGrouping>:
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800552c:	4013      	ands	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800553c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005542:	4a04      	ldr	r2, [pc, #16]	; (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	60d3      	str	r3, [r2, #12]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_GetPriorityGrouping>:
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <__NVIC_GetPriorityGrouping+0x18>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 0307 	and.w	r3, r3, #7
}
 8005566:	4618      	mov	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <__NVIC_EnableIRQ>:
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	db0b      	blt.n	800559e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	f003 021f 	and.w	r2, r3, #31
 800558c:	4906      	ldr	r1, [pc, #24]	; (80055a8 <__NVIC_EnableIRQ+0x34>)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2001      	movs	r0, #1
 8005596:	fa00 f202 	lsl.w	r2, r0, r2
 800559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	e000e100 	.word	0xe000e100

080055ac <__NVIC_SetPriority>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	6039      	str	r1, [r7, #0]
 80055b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db0a      	blt.n	80055d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	490c      	ldr	r1, [pc, #48]	; (80055f8 <__NVIC_SetPriority+0x4c>)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	0112      	lsls	r2, r2, #4
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	440b      	add	r3, r1
 80055d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055d4:	e00a      	b.n	80055ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4908      	ldr	r1, [pc, #32]	; (80055fc <__NVIC_SetPriority+0x50>)
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	3b04      	subs	r3, #4
 80055e4:	0112      	lsls	r2, r2, #4
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	440b      	add	r3, r1
 80055ea:	761a      	strb	r2, [r3, #24]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000e100 	.word	0xe000e100
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <NVIC_EncodePriority>:
{
 8005600:	b480      	push	{r7}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f1c3 0307 	rsb	r3, r3, #7
 800561a:	2b04      	cmp	r3, #4
 800561c:	bf28      	it	cs
 800561e:	2304      	movcs	r3, #4
 8005620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3304      	adds	r3, #4
 8005626:	2b06      	cmp	r3, #6
 8005628:	d902      	bls.n	8005630 <NVIC_EncodePriority+0x30>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3b03      	subs	r3, #3
 800562e:	e000      	b.n	8005632 <NVIC_EncodePriority+0x32>
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	401a      	ands	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	43d9      	mvns	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005658:	4313      	orrs	r3, r2
}
 800565a:	4618      	mov	r0, r3
 800565c:	3724      	adds	r7, #36	; 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <SysTick_Config>:
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3b01      	subs	r3, #1
 8005670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005674:	d301      	bcc.n	800567a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005676:	2301      	movs	r3, #1
 8005678:	e00f      	b.n	800569a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <SysTick_Config+0x40>)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3b01      	subs	r3, #1
 8005680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005682:	210f      	movs	r1, #15
 8005684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005688:	f7ff ff90 	bl	80055ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <SysTick_Config+0x40>)
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <SysTick_Config+0x40>)
 8005694:	2207      	movs	r2, #7
 8005696:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	e000e010 	.word	0xe000e010

080056a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff2d 	bl	8005510 <__NVIC_SetPriorityGrouping>
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	4603      	mov	r3, r0
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056d0:	f7ff ff42 	bl	8005558 <__NVIC_GetPriorityGrouping>
 80056d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ff90 	bl	8005600 <NVIC_EncodePriority>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff5f 	bl	80055ac <__NVIC_SetPriority>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	4603      	mov	r3, r0
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff35 	bl	8005574 <__NVIC_EnableIRQ>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ffa2 	bl	8005664 <SysTick_Config>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e043      	b.n	80057ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_DMA_Init+0xa8>)
 800574a:	4413      	add	r3, r2
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_DMA_Init+0xac>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	009a      	lsls	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <HAL_DMA_Init+0xb0>)
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005776:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800577a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800579c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr
 80057d4:	bffdfff8 	.word	0xbffdfff8
 80057d8:	cccccccd 	.word	0xcccccccd
 80057dc:	40020000 	.word	0x40020000

080057e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_DMA_Start_IT+0x20>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e04a      	b.n	8005896 <HAL_DMA_Start_IT+0xb6>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800580e:	2b01      	cmp	r3, #1
 8005810:	d13a      	bne.n	8005888 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f938 	bl	8005aac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 020e 	orr.w	r2, r2, #14
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e00f      	b.n	8005876 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0204 	bic.w	r2, r2, #4
 8005864:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 020a 	orr.w	r2, r2, #10
 8005874:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e005      	b.n	8005894 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005890:	2302      	movs	r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	2204      	movs	r2, #4
 80058be:	409a      	lsls	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d04f      	beq.n	8005968 <HAL_DMA_IRQHandler+0xc8>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d04a      	beq.n	8005968 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0204 	bic.w	r2, r2, #4
 80058ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a66      	ldr	r2, [pc, #408]	; (8005a90 <HAL_DMA_IRQHandler+0x1f0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d029      	beq.n	800594e <HAL_DMA_IRQHandler+0xae>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a65      	ldr	r2, [pc, #404]	; (8005a94 <HAL_DMA_IRQHandler+0x1f4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <HAL_DMA_IRQHandler+0xaa>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a63      	ldr	r2, [pc, #396]	; (8005a98 <HAL_DMA_IRQHandler+0x1f8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01a      	beq.n	8005944 <HAL_DMA_IRQHandler+0xa4>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a62      	ldr	r2, [pc, #392]	; (8005a9c <HAL_DMA_IRQHandler+0x1fc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d012      	beq.n	800593e <HAL_DMA_IRQHandler+0x9e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a60      	ldr	r2, [pc, #384]	; (8005aa0 <HAL_DMA_IRQHandler+0x200>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00a      	beq.n	8005938 <HAL_DMA_IRQHandler+0x98>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5f      	ldr	r2, [pc, #380]	; (8005aa4 <HAL_DMA_IRQHandler+0x204>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d102      	bne.n	8005932 <HAL_DMA_IRQHandler+0x92>
 800592c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005930:	e00e      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 8005932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005936:	e00b      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 8005938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800593c:	e008      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 800593e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005942:	e005      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 8005944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005948:	e002      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	e000      	b.n	8005950 <HAL_DMA_IRQHandler+0xb0>
 800594e:	2304      	movs	r3, #4
 8005950:	4a55      	ldr	r2, [pc, #340]	; (8005aa8 <HAL_DMA_IRQHandler+0x208>)
 8005952:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8094 	beq.w	8005a86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005966:	e08e      	b.n	8005a86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2202      	movs	r2, #2
 800596e:	409a      	lsls	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d056      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x186>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d051      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 020a 	bic.w	r2, r2, #10
 800599e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a38      	ldr	r2, [pc, #224]	; (8005a90 <HAL_DMA_IRQHandler+0x1f0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d029      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x166>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a37      	ldr	r2, [pc, #220]	; (8005a94 <HAL_DMA_IRQHandler+0x1f4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x162>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a35      	ldr	r2, [pc, #212]	; (8005a98 <HAL_DMA_IRQHandler+0x1f8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x15c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a34      	ldr	r2, [pc, #208]	; (8005a9c <HAL_DMA_IRQHandler+0x1fc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d012      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x156>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a32      	ldr	r2, [pc, #200]	; (8005aa0 <HAL_DMA_IRQHandler+0x200>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00a      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x150>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <HAL_DMA_IRQHandler+0x204>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d102      	bne.n	80059ea <HAL_DMA_IRQHandler+0x14a>
 80059e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059e8:	e00e      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 80059ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ee:	e00b      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 80059f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059f4:	e008      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 80059f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059fa:	e005      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	e002      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 8005a02:	2320      	movs	r3, #32
 8005a04:	e000      	b.n	8005a08 <HAL_DMA_IRQHandler+0x168>
 8005a06:	2302      	movs	r3, #2
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <HAL_DMA_IRQHandler+0x208>)
 8005a0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d034      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a24:	e02f      	b.n	8005a86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d028      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x1e8>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d023      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 020e 	bic.w	r2, r2, #14
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
    }
  }
  return;
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
}
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40020008 	.word	0x40020008
 8005a94:	4002001c 	.word	0x4002001c
 8005a98:	40020030 	.word	0x40020030
 8005a9c:	40020044 	.word	0x40020044
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	4002006c 	.word	0x4002006c
 8005aa8:	40020000 	.word	0x40020000

08005aac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d108      	bne.n	8005aec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005aea:	e007      	b.n	8005afc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b08b      	sub	sp, #44	; 0x2c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b1a:	e169      	b.n	8005df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	f040 8158 	bne.w	8005dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4a9a      	ldr	r2, [pc, #616]	; (8005da8 <HAL_GPIO_Init+0x2a0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d05e      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
 8005b44:	4a98      	ldr	r2, [pc, #608]	; (8005da8 <HAL_GPIO_Init+0x2a0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d875      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b4a:	4a98      	ldr	r2, [pc, #608]	; (8005dac <HAL_GPIO_Init+0x2a4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d058      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
 8005b50:	4a96      	ldr	r2, [pc, #600]	; (8005dac <HAL_GPIO_Init+0x2a4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d86f      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b56:	4a96      	ldr	r2, [pc, #600]	; (8005db0 <HAL_GPIO_Init+0x2a8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d052      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
 8005b5c:	4a94      	ldr	r2, [pc, #592]	; (8005db0 <HAL_GPIO_Init+0x2a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d869      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b62:	4a94      	ldr	r2, [pc, #592]	; (8005db4 <HAL_GPIO_Init+0x2ac>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d04c      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
 8005b68:	4a92      	ldr	r2, [pc, #584]	; (8005db4 <HAL_GPIO_Init+0x2ac>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d863      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b6e:	4a92      	ldr	r2, [pc, #584]	; (8005db8 <HAL_GPIO_Init+0x2b0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d046      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
 8005b74:	4a90      	ldr	r2, [pc, #576]	; (8005db8 <HAL_GPIO_Init+0x2b0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d85d      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b7a:	2b12      	cmp	r3, #18
 8005b7c:	d82a      	bhi.n	8005bd4 <HAL_GPIO_Init+0xcc>
 8005b7e:	2b12      	cmp	r3, #18
 8005b80:	d859      	bhi.n	8005c36 <HAL_GPIO_Init+0x12e>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <HAL_GPIO_Init+0x80>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005c03 	.word	0x08005c03
 8005b8c:	08005bdd 	.word	0x08005bdd
 8005b90:	08005bef 	.word	0x08005bef
 8005b94:	08005c31 	.word	0x08005c31
 8005b98:	08005c37 	.word	0x08005c37
 8005b9c:	08005c37 	.word	0x08005c37
 8005ba0:	08005c37 	.word	0x08005c37
 8005ba4:	08005c37 	.word	0x08005c37
 8005ba8:	08005c37 	.word	0x08005c37
 8005bac:	08005c37 	.word	0x08005c37
 8005bb0:	08005c37 	.word	0x08005c37
 8005bb4:	08005c37 	.word	0x08005c37
 8005bb8:	08005c37 	.word	0x08005c37
 8005bbc:	08005c37 	.word	0x08005c37
 8005bc0:	08005c37 	.word	0x08005c37
 8005bc4:	08005c37 	.word	0x08005c37
 8005bc8:	08005c37 	.word	0x08005c37
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	4a79      	ldr	r2, [pc, #484]	; (8005dbc <HAL_GPIO_Init+0x2b4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005bda:	e02c      	b.n	8005c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	623b      	str	r3, [r7, #32]
          break;
 8005be2:	e029      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	623b      	str	r3, [r7, #32]
          break;
 8005bec:	e024      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	623b      	str	r3, [r7, #32]
          break;
 8005bf6:	e01f      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	623b      	str	r3, [r7, #32]
          break;
 8005c00:	e01a      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	623b      	str	r3, [r7, #32]
          break;
 8005c0e:	e013      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d105      	bne.n	8005c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c18:	2308      	movs	r3, #8
 8005c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	611a      	str	r2, [r3, #16]
          break;
 8005c22:	e009      	b.n	8005c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c24:	2308      	movs	r3, #8
 8005c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	615a      	str	r2, [r3, #20]
          break;
 8005c2e:	e003      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c30:	2300      	movs	r3, #0
 8005c32:	623b      	str	r3, [r7, #32]
          break;
 8005c34:	e000      	b.n	8005c38 <HAL_GPIO_Init+0x130>
          break;
 8005c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2bff      	cmp	r3, #255	; 0xff
 8005c3c:	d801      	bhi.n	8005c42 <HAL_GPIO_Init+0x13a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	e001      	b.n	8005c46 <HAL_GPIO_Init+0x13e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2bff      	cmp	r3, #255	; 0xff
 8005c4c:	d802      	bhi.n	8005c54 <HAL_GPIO_Init+0x14c>
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	e002      	b.n	8005c5a <HAL_GPIO_Init+0x152>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	3b08      	subs	r3, #8
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	210f      	movs	r1, #15
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	431a      	orrs	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80b1 	beq.w	8005dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c88:	4b4d      	ldr	r3, [pc, #308]	; (8005dc0 <HAL_GPIO_Init+0x2b8>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	4a4c      	ldr	r2, [pc, #304]	; (8005dc0 <HAL_GPIO_Init+0x2b8>)
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	6193      	str	r3, [r2, #24]
 8005c94:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <HAL_GPIO_Init+0x2b8>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	60bb      	str	r3, [r7, #8]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005ca0:	4a48      	ldr	r2, [pc, #288]	; (8005dc4 <HAL_GPIO_Init+0x2bc>)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	220f      	movs	r2, #15
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a40      	ldr	r2, [pc, #256]	; (8005dc8 <HAL_GPIO_Init+0x2c0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <HAL_GPIO_Init+0x1ec>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3f      	ldr	r2, [pc, #252]	; (8005dcc <HAL_GPIO_Init+0x2c4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00d      	beq.n	8005cf0 <HAL_GPIO_Init+0x1e8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3e      	ldr	r2, [pc, #248]	; (8005dd0 <HAL_GPIO_Init+0x2c8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <HAL_GPIO_Init+0x1e4>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3d      	ldr	r2, [pc, #244]	; (8005dd4 <HAL_GPIO_Init+0x2cc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_GPIO_Init+0x1e0>
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e006      	b.n	8005cf6 <HAL_GPIO_Init+0x1ee>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	e004      	b.n	8005cf6 <HAL_GPIO_Init+0x1ee>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e002      	b.n	8005cf6 <HAL_GPIO_Init+0x1ee>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_GPIO_Init+0x1ee>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	f002 0203 	and.w	r2, r2, #3
 8005cfc:	0092      	lsls	r2, r2, #2
 8005cfe:	4093      	lsls	r3, r2
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d06:	492f      	ldr	r1, [pc, #188]	; (8005dc4 <HAL_GPIO_Init+0x2bc>)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d20:	4b2d      	ldr	r3, [pc, #180]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	492c      	ldr	r1, [pc, #176]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
 8005d2c:	e006      	b.n	8005d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d2e:	4b2a      	ldr	r3, [pc, #168]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	4928      	ldr	r1, [pc, #160]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d48:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4922      	ldr	r1, [pc, #136]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	604b      	str	r3, [r1, #4]
 8005d54:	e006      	b.n	8005d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	491e      	ldr	r1, [pc, #120]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	4918      	ldr	r1, [pc, #96]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]
 8005d7c:	e006      	b.n	8005d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4914      	ldr	r1, [pc, #80]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d021      	beq.n	8005ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	490e      	ldr	r1, [pc, #56]	; (8005dd8 <HAL_GPIO_Init+0x2d0>)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60cb      	str	r3, [r1, #12]
 8005da4:	e021      	b.n	8005dea <HAL_GPIO_Init+0x2e2>
 8005da6:	bf00      	nop
 8005da8:	10320000 	.word	0x10320000
 8005dac:	10310000 	.word	0x10310000
 8005db0:	10220000 	.word	0x10220000
 8005db4:	10210000 	.word	0x10210000
 8005db8:	10120000 	.word	0x10120000
 8005dbc:	10110000 	.word	0x10110000
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010800 	.word	0x40010800
 8005dcc:	40010c00 	.word	0x40010c00
 8005dd0:	40011000 	.word	0x40011000
 8005dd4:	40011400 	.word	0x40011400
 8005dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <HAL_GPIO_Init+0x304>)
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	4909      	ldr	r1, [pc, #36]	; (8005e0c <HAL_GPIO_Init+0x304>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	3301      	adds	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f47f ae8e 	bne.w	8005b1c <HAL_GPIO_Init+0x14>
  }
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	372c      	adds	r7, #44	; 0x2c
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	40010400 	.word	0x40010400

08005e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e20:	787b      	ldrb	r3, [r7, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e2c:	e003      	b.n	8005e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	041a      	lsls	r2, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr

08005e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4013      	ands	r3, r2
 8005e58:	041a      	lsls	r2, r3, #16
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	43d9      	mvns	r1, r3
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	400b      	ands	r3, r1
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	611a      	str	r2, [r3, #16]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e12b      	b.n	80060de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fe fab6 	bl	800440c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	; 0x24
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f001 fb6e 	bl	80075b8 <HAL_RCC_GetPCLK1Freq>
 8005edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a81      	ldr	r2, [pc, #516]	; (80060e8 <HAL_I2C_Init+0x274>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d807      	bhi.n	8005ef8 <HAL_I2C_Init+0x84>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a80      	ldr	r2, [pc, #512]	; (80060ec <HAL_I2C_Init+0x278>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	bf94      	ite	ls
 8005ef0:	2301      	movls	r3, #1
 8005ef2:	2300      	movhi	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e006      	b.n	8005f06 <HAL_I2C_Init+0x92>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a7d      	ldr	r2, [pc, #500]	; (80060f0 <HAL_I2C_Init+0x27c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bf94      	ite	ls
 8005f00:	2301      	movls	r3, #1
 8005f02:	2300      	movhi	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0e7      	b.n	80060de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a78      	ldr	r2, [pc, #480]	; (80060f4 <HAL_I2C_Init+0x280>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0c9b      	lsrs	r3, r3, #18
 8005f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a6a      	ldr	r2, [pc, #424]	; (80060e8 <HAL_I2C_Init+0x274>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d802      	bhi.n	8005f48 <HAL_I2C_Init+0xd4>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	3301      	adds	r3, #1
 8005f46:	e009      	b.n	8005f5c <HAL_I2C_Init+0xe8>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	4a69      	ldr	r2, [pc, #420]	; (80060f8 <HAL_I2C_Init+0x284>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	495c      	ldr	r1, [pc, #368]	; (80060e8 <HAL_I2C_Init+0x274>)
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	d819      	bhi.n	8005fb0 <HAL_I2C_Init+0x13c>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1e59      	subs	r1, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f90:	400b      	ands	r3, r1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_I2C_Init+0x138>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1e59      	subs	r1, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005faa:	e051      	b.n	8006050 <HAL_I2C_Init+0x1dc>
 8005fac:	2304      	movs	r3, #4
 8005fae:	e04f      	b.n	8006050 <HAL_I2C_Init+0x1dc>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d111      	bne.n	8005fdc <HAL_I2C_Init+0x168>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	1e58      	subs	r0, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6859      	ldr	r1, [r3, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	440b      	add	r3, r1
 8005fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	e012      	b.n	8006002 <HAL_I2C_Init+0x18e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1e58      	subs	r0, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6859      	ldr	r1, [r3, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	0099      	lsls	r1, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Init+0x196>
 8006006:	2301      	movs	r3, #1
 8006008:	e022      	b.n	8006050 <HAL_I2C_Init+0x1dc>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10e      	bne.n	8006030 <HAL_I2C_Init+0x1bc>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1e58      	subs	r0, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	460b      	mov	r3, r1
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	440b      	add	r3, r1
 8006020:	fbb0 f3f3 	udiv	r3, r0, r3
 8006024:	3301      	adds	r3, #1
 8006026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	e00f      	b.n	8006050 <HAL_I2C_Init+0x1dc>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1e58      	subs	r0, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6859      	ldr	r1, [r3, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	0099      	lsls	r1, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	fbb0 f3f3 	udiv	r3, r0, r3
 8006046:	3301      	adds	r3, #1
 8006048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800604c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	6809      	ldr	r1, [r1, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800607e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6911      	ldr	r1, [r2, #16]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68d2      	ldr	r2, [r2, #12]
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	430b      	orrs	r3, r1
 8006092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	000186a0 	.word	0x000186a0
 80060ec:	001e847f 	.word	0x001e847f
 80060f0:	003d08ff 	.word	0x003d08ff
 80060f4:	431bde83 	.word	0x431bde83
 80060f8:	10624dd3 	.word	0x10624dd3

080060fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	461a      	mov	r2, r3
 8006108:	460b      	mov	r3, r1
 800610a:	817b      	strh	r3, [r7, #10]
 800610c:	4613      	mov	r3, r2
 800610e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006110:	f7fe ffbe 	bl	8005090 <HAL_GetTick>
 8006114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b20      	cmp	r3, #32
 8006120:	f040 80e0 	bne.w	80062e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2319      	movs	r3, #25
 800612a:	2201      	movs	r2, #1
 800612c:	4970      	ldr	r1, [pc, #448]	; (80062f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fc92 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
 800613c:	e0d3      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_I2C_Master_Transmit+0x50>
 8006148:	2302      	movs	r3, #2
 800614a:	e0cc      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d007      	beq.n	8006172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2221      	movs	r2, #33	; 0x21
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2210      	movs	r2, #16
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	893a      	ldrh	r2, [r7, #8]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a50      	ldr	r2, [pc, #320]	; (80062f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061b4:	8979      	ldrh	r1, [r7, #10]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fafc 	bl	80067b8 <I2C_MasterRequestWrite>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e08d      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80061e0:	e066      	b.n	80062b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	6a39      	ldr	r1, [r7, #32]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fd0c 	bl	8006c04 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d107      	bne.n	800620a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e06b      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b04      	cmp	r3, #4
 800624a:	d11b      	bne.n	8006284 <HAL_I2C_Master_Transmit+0x188>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	781a      	ldrb	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	6a39      	ldr	r1, [r7, #32]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fcfc 	bl	8006c86 <I2C_WaitOnBTFFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	2b04      	cmp	r3, #4
 800629a:	d107      	bne.n	80062ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e01a      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d194      	bne.n	80061e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	00100002 	.word	0x00100002
 80062f4:	ffff0000 	.word	0xffff0000

080062f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	461a      	mov	r2, r3
 8006304:	460b      	mov	r3, r1
 8006306:	817b      	strh	r3, [r7, #10]
 8006308:	4613      	mov	r3, r2
 800630a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006310:	f7fe febe 	bl	8005090 <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	f040 823f 	bne.w	80067a2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	2319      	movs	r3, #25
 800632a:	2201      	movs	r2, #1
 800632c:	497f      	ldr	r1, [pc, #508]	; (800652c <HAL_I2C_Master_Receive+0x234>)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fb92 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	e232      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_I2C_Master_Receive+0x54>
 8006348:	2302      	movs	r3, #2
 800634a:	e22b      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d007      	beq.n	8006372 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006380:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2222      	movs	r2, #34	; 0x22
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2210      	movs	r2, #16
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	893a      	ldrh	r2, [r7, #8]
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a5f      	ldr	r2, [pc, #380]	; (8006530 <HAL_I2C_Master_Receive+0x238>)
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063b4:	8979      	ldrh	r1, [r7, #10]
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa7e 	bl	80068bc <I2C_MasterRequestRead>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1ec      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d113      	bne.n	80063fa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e1c0      	b.n	800677c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d11e      	bne.n	8006440 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006412:	b672      	cpsid	i
}
 8006414:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800643c:	b662      	cpsie	i
}
 800643e:	e035      	b.n	80064ac <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11e      	bne.n	8006486 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006456:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006458:	b672      	cpsid	i
}
 800645a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006482:	b662      	cpsie	i
}
 8006484:	e012      	b.n	80064ac <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80064ac:	e166      	b.n	800677c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	f200 811f 	bhi.w	80066f6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d123      	bne.n	8006508 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fc1f 	bl	8006d08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e167      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006506:	e139      	b.n	800677c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	2b02      	cmp	r3, #2
 800650e:	d152      	bne.n	80065b6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2200      	movs	r2, #0
 8006518:	4906      	ldr	r1, [pc, #24]	; (8006534 <HAL_I2C_Master_Receive+0x23c>)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fa9c 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e13c      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
 800652a:	bf00      	nop
 800652c:	00100002 	.word	0x00100002
 8006530:	ffff0000 	.word	0xffff0000
 8006534:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006538:	b672      	cpsid	i
}
 800653a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800657e:	b662      	cpsie	i
}
 8006580:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b4:	e0e2      	b.n	800677c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	2200      	movs	r2, #0
 80065be:	497b      	ldr	r1, [pc, #492]	; (80067ac <HAL_I2C_Master_Receive+0x4b4>)
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fa49 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0e9      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80065e0:	b672      	cpsid	i
}
 80065e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006616:	4b66      	ldr	r3, [pc, #408]	; (80067b0 <HAL_I2C_Master_Receive+0x4b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	08db      	lsrs	r3, r3, #3
 800661c:	4a65      	ldr	r2, [pc, #404]	; (80067b4 <HAL_I2C_Master_Receive+0x4bc>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	0a1a      	lsrs	r2, r3, #8
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	00da      	lsls	r2, r3, #3
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	3b01      	subs	r3, #1
 8006634:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d118      	bne.n	800666e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f043 0220 	orr.w	r2, r3, #32
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800665e:	b662      	cpsie	i
}
 8006660:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e09a      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d1d9      	bne.n	8006630 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80066be:	b662      	cpsie	i
}
 80066c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f4:	e042      	b.n	800677c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fb04 	bl	8006d08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e04c      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d118      	bne.n	800677c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f ae94 	bne.w	80064ae <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3728      	adds	r7, #40	; 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	00010004 	.word	0x00010004
 80067b0:	20000078 	.word	0x20000078
 80067b4:	14f8b589 	.word	0x14f8b589

080067b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	460b      	mov	r3, r1
 80067c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d006      	beq.n	80067e2 <I2C_MasterRequestWrite+0x2a>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d003      	beq.n	80067e2 <I2C_MasterRequestWrite+0x2a>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067e0:	d108      	bne.n	80067f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e00b      	b.n	800680c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	2b12      	cmp	r3, #18
 80067fa:	d107      	bne.n	800680c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f91d 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00d      	beq.n	8006840 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006832:	d103      	bne.n	800683c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e035      	b.n	80068ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006848:	d108      	bne.n	800685c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006858:	611a      	str	r2, [r3, #16]
 800685a:	e01b      	b.n	8006894 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800685c:	897b      	ldrh	r3, [r7, #10]
 800685e:	11db      	asrs	r3, r3, #7
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0306 	and.w	r3, r3, #6
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f063 030f 	orn	r3, r3, #15
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	490e      	ldr	r1, [pc, #56]	; (80068b4 <I2C_MasterRequestWrite+0xfc>)
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f943 	bl	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e010      	b.n	80068ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800688a:	897b      	ldrh	r3, [r7, #10]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	4907      	ldr	r1, [pc, #28]	; (80068b8 <I2C_MasterRequestWrite+0x100>)
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f933 	bl	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	00010008 	.word	0x00010008
 80068b8:	00010002 	.word	0x00010002

080068bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	460b      	mov	r3, r1
 80068ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d006      	beq.n	80068f6 <I2C_MasterRequestRead+0x3a>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d003      	beq.n	80068f6 <I2C_MasterRequestRead+0x3a>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068f4:	d108      	bne.n	8006908 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e00b      	b.n	8006920 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	2b11      	cmp	r3, #17
 800690e:	d107      	bne.n	8006920 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f893 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	d103      	bne.n	8006950 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e079      	b.n	8006a48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800695c:	d108      	bne.n	8006970 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	611a      	str	r2, [r3, #16]
 800696e:	e05f      	b.n	8006a30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006970:	897b      	ldrh	r3, [r7, #10]
 8006972:	11db      	asrs	r3, r3, #7
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0306 	and.w	r3, r3, #6
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f063 030f 	orn	r3, r3, #15
 8006980:	b2da      	uxtb	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4930      	ldr	r1, [pc, #192]	; (8006a50 <I2C_MasterRequestRead+0x194>)
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f8b9 	bl	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e054      	b.n	8006a48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800699e:	897b      	ldrh	r3, [r7, #10]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4929      	ldr	r1, [pc, #164]	; (8006a54 <I2C_MasterRequestRead+0x198>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f8a9 	bl	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e044      	b.n	8006a48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f831 	bl	8006a58 <I2C_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	d103      	bne.n	8006a14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e017      	b.n	8006a48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a18:	897b      	ldrh	r3, [r7, #10]
 8006a1a:	11db      	asrs	r3, r3, #7
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0306 	and.w	r3, r3, #6
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f063 030e 	orn	r3, r3, #14
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4907      	ldr	r1, [pc, #28]	; (8006a54 <I2C_MasterRequestRead+0x198>)
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f865 	bl	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	00010008 	.word	0x00010008
 8006a54:	00010002 	.word	0x00010002

08006a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a68:	e025      	b.n	8006ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a70:	d021      	beq.n	8006ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fe fb0d 	bl	8005090 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d116      	bne.n	8006ab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f043 0220 	orr.w	r2, r3, #32
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e023      	b.n	8006afe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10d      	bne.n	8006adc <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	43da      	mvns	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bf0c      	ite	eq
 8006ad2:	2301      	moveq	r3, #1
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	e00c      	b.n	8006af6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d0b6      	beq.n	8006a6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
 8006b12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b14:	e051      	b.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d123      	bne.n	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e046      	b.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b74:	d021      	beq.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fe fa8b 	bl	8005090 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d116      	bne.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e020      	b.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d10c      	bne.n	8006bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e00b      	b.n	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	43da      	mvns	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d18d      	bne.n	8006b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c10:	e02d      	b.n	8006c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f8ce 	bl	8006db4 <I2C_IsAcknowledgeFailed>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e02d      	b.n	8006c7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c28:	d021      	beq.n	8006c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fe fa31 	bl	8005090 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d116      	bne.n	8006c6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f043 0220 	orr.w	r2, r3, #32
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e007      	b.n	8006c7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d1ca      	bne.n	8006c12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c92:	e02d      	b.n	8006cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f88d 	bl	8006db4 <I2C_IsAcknowledgeFailed>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e02d      	b.n	8006d00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006caa:	d021      	beq.n	8006cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cac:	f7fe f9f0 	bl	8005090 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d302      	bcc.n	8006cc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d116      	bne.n	8006cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f043 0220 	orr.w	r2, r3, #32
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e007      	b.n	8006d00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d1ca      	bne.n	8006c94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d14:	e042      	b.n	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d119      	bne.n	8006d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0210 	mvn.w	r2, #16
 8006d2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e029      	b.n	8006dac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d58:	f7fe f99a 	bl	8005090 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d302      	bcc.n	8006d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d116      	bne.n	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e007      	b.n	8006dac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d1b5      	bne.n	8006d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	d11b      	bne.n	8006e04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	f043 0204 	orr.w	r2, r3, #4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e272      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 8087 	beq.w	8006f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e30:	4b92      	ldr	r3, [pc, #584]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 030c 	and.w	r3, r3, #12
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d00c      	beq.n	8006e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e3c:	4b8f      	ldr	r3, [pc, #572]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d112      	bne.n	8006e6e <HAL_RCC_OscConfig+0x5e>
 8006e48:	4b8c      	ldr	r3, [pc, #560]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e54:	d10b      	bne.n	8006e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e56:	4b89      	ldr	r3, [pc, #548]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d06c      	beq.n	8006f3c <HAL_RCC_OscConfig+0x12c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d168      	bne.n	8006f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e24c      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e76:	d106      	bne.n	8006e86 <HAL_RCC_OscConfig+0x76>
 8006e78:	4b80      	ldr	r3, [pc, #512]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a7f      	ldr	r2, [pc, #508]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e02e      	b.n	8006ee4 <HAL_RCC_OscConfig+0xd4>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x98>
 8006e8e:	4b7b      	ldr	r3, [pc, #492]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a7a      	ldr	r2, [pc, #488]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	4b78      	ldr	r3, [pc, #480]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a77      	ldr	r2, [pc, #476]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e01d      	b.n	8006ee4 <HAL_RCC_OscConfig+0xd4>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCC_OscConfig+0xbc>
 8006eb2:	4b72      	ldr	r3, [pc, #456]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a71      	ldr	r2, [pc, #452]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4b6f      	ldr	r3, [pc, #444]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6e      	ldr	r2, [pc, #440]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCC_OscConfig+0xd4>
 8006ecc:	4b6b      	ldr	r3, [pc, #428]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6a      	ldr	r2, [pc, #424]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a67      	ldr	r2, [pc, #412]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eec:	f7fe f8d0 	bl	8005090 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef4:	f7fe f8cc 	bl	8005090 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	; 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e200      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f06:	4b5d      	ldr	r3, [pc, #372]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0xe4>
 8006f12:	e014      	b.n	8006f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fe f8bc 	bl	8005090 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f1c:	f7fe f8b8 	bl	8005090 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b64      	cmp	r3, #100	; 0x64
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e1ec      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f2e:	4b53      	ldr	r3, [pc, #332]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x10c>
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d063      	beq.n	8007012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f4a:	4b4c      	ldr	r3, [pc, #304]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f56:	4b49      	ldr	r3, [pc, #292]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d11c      	bne.n	8006f9c <HAL_RCC_OscConfig+0x18c>
 8006f62:	4b46      	ldr	r3, [pc, #280]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f6e:	4b43      	ldr	r3, [pc, #268]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <HAL_RCC_OscConfig+0x176>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d001      	beq.n	8006f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e1c0      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f86:	4b3d      	ldr	r3, [pc, #244]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4939      	ldr	r1, [pc, #228]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9a:	e03a      	b.n	8007012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d020      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fa4:	4b36      	ldr	r3, [pc, #216]	; (8007080 <HAL_RCC_OscConfig+0x270>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006faa:	f7fe f871 	bl	8005090 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb2:	f7fe f86d 	bl	8005090 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e1a1      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc4:	4b2d      	ldr	r3, [pc, #180]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd0:	4b2a      	ldr	r3, [pc, #168]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4927      	ldr	r1, [pc, #156]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
 8006fe4:	e015      	b.n	8007012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fe6:	4b26      	ldr	r3, [pc, #152]	; (8007080 <HAL_RCC_OscConfig+0x270>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fec:	f7fe f850 	bl	8005090 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff4:	f7fe f84c 	bl	8005090 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e180      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007006:	4b1d      	ldr	r3, [pc, #116]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d03a      	beq.n	8007094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d019      	beq.n	800705a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <HAL_RCC_OscConfig+0x274>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702c:	f7fe f830 	bl	8005090 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007034:	f7fe f82c 	bl	8005090 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e160      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <HAL_RCC_OscConfig+0x26c>)
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007052:	2001      	movs	r0, #1
 8007054:	f000 fad8 	bl	8007608 <RCC_Delay>
 8007058:	e01c      	b.n	8007094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <HAL_RCC_OscConfig+0x274>)
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007060:	f7fe f816 	bl	8005090 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007066:	e00f      	b.n	8007088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007068:	f7fe f812 	bl	8005090 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d908      	bls.n	8007088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e146      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
 800707a:	bf00      	nop
 800707c:	40021000 	.word	0x40021000
 8007080:	42420000 	.word	0x42420000
 8007084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007088:	4b92      	ldr	r3, [pc, #584]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e9      	bne.n	8007068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80a6 	beq.w	80071ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070a6:	4b8b      	ldr	r3, [pc, #556]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10d      	bne.n	80070ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b2:	4b88      	ldr	r3, [pc, #544]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	4a87      	ldr	r2, [pc, #540]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070bc:	61d3      	str	r3, [r2, #28]
 80070be:	4b85      	ldr	r3, [pc, #532]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ce:	4b82      	ldr	r3, [pc, #520]	; (80072d8 <HAL_RCC_OscConfig+0x4c8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d118      	bne.n	800710c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070da:	4b7f      	ldr	r3, [pc, #508]	; (80072d8 <HAL_RCC_OscConfig+0x4c8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a7e      	ldr	r2, [pc, #504]	; (80072d8 <HAL_RCC_OscConfig+0x4c8>)
 80070e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070e6:	f7fd ffd3 	bl	8005090 <HAL_GetTick>
 80070ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ee:	f7fd ffcf 	bl	8005090 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b64      	cmp	r3, #100	; 0x64
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e103      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007100:	4b75      	ldr	r3, [pc, #468]	; (80072d8 <HAL_RCC_OscConfig+0x4c8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d106      	bne.n	8007122 <HAL_RCC_OscConfig+0x312>
 8007114:	4b6f      	ldr	r3, [pc, #444]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	4a6e      	ldr	r2, [pc, #440]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	6213      	str	r3, [r2, #32]
 8007120:	e02d      	b.n	800717e <HAL_RCC_OscConfig+0x36e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0x334>
 800712a:	4b6a      	ldr	r3, [pc, #424]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	4a69      	ldr	r2, [pc, #420]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	6213      	str	r3, [r2, #32]
 8007136:	4b67      	ldr	r3, [pc, #412]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	4a66      	ldr	r2, [pc, #408]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800713c:	f023 0304 	bic.w	r3, r3, #4
 8007140:	6213      	str	r3, [r2, #32]
 8007142:	e01c      	b.n	800717e <HAL_RCC_OscConfig+0x36e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b05      	cmp	r3, #5
 800714a:	d10c      	bne.n	8007166 <HAL_RCC_OscConfig+0x356>
 800714c:	4b61      	ldr	r3, [pc, #388]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	4a60      	ldr	r2, [pc, #384]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007152:	f043 0304 	orr.w	r3, r3, #4
 8007156:	6213      	str	r3, [r2, #32]
 8007158:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	4a5d      	ldr	r2, [pc, #372]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6213      	str	r3, [r2, #32]
 8007164:	e00b      	b.n	800717e <HAL_RCC_OscConfig+0x36e>
 8007166:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4a5a      	ldr	r2, [pc, #360]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	6213      	str	r3, [r2, #32]
 8007172:	4b58      	ldr	r3, [pc, #352]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	4a57      	ldr	r2, [pc, #348]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007178:	f023 0304 	bic.w	r3, r3, #4
 800717c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d015      	beq.n	80071b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007186:	f7fd ff83 	bl	8005090 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718c:	e00a      	b.n	80071a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718e:	f7fd ff7f 	bl	8005090 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f241 3288 	movw	r2, #5000	; 0x1388
 800719c:	4293      	cmp	r3, r2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e0b1      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a4:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ee      	beq.n	800718e <HAL_RCC_OscConfig+0x37e>
 80071b0:	e014      	b.n	80071dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b2:	f7fd ff6d 	bl	8005090 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b8:	e00a      	b.n	80071d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ba:	f7fd ff69 	bl	8005090 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e09b      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d0:	4b40      	ldr	r3, [pc, #256]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1ee      	bne.n	80071ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d105      	bne.n	80071ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e2:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4a3b      	ldr	r2, [pc, #236]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80071e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8087 	beq.w	8007306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071f8:	4b36      	ldr	r3, [pc, #216]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b08      	cmp	r3, #8
 8007202:	d061      	beq.n	80072c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d146      	bne.n	800729a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	4b33      	ldr	r3, [pc, #204]	; (80072dc <HAL_RCC_OscConfig+0x4cc>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007212:	f7fd ff3d 	bl	8005090 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800721a:	f7fd ff39 	bl	8005090 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e06d      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800722c:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007240:	d108      	bne.n	8007254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	4921      	ldr	r1, [pc, #132]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007250:	4313      	orrs	r3, r2
 8007252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007254:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a19      	ldr	r1, [r3, #32]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	430b      	orrs	r3, r1
 8007266:	491b      	ldr	r1, [pc, #108]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <HAL_RCC_OscConfig+0x4cc>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007272:	f7fd ff0d 	bl	8005090 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727a:	f7fd ff09 	bl	8005090 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e03d      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x46a>
 8007298:	e035      	b.n	8007306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <HAL_RCC_OscConfig+0x4cc>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a0:	f7fd fef6 	bl	8005090 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a8:	f7fd fef2 	bl	8005090 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e026      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072ba:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x498>
 80072c6:	e01e      	b.n	8007306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e019      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40007000 	.word	0x40007000
 80072dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_OscConfig+0x500>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d106      	bne.n	8007302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d001      	beq.n	8007306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40021000 	.word	0x40021000

08007314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e0d0      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007328:	4b6a      	ldr	r3, [pc, #424]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d910      	bls.n	8007358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007336:	4b67      	ldr	r3, [pc, #412]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f023 0207 	bic.w	r2, r3, #7
 800733e:	4965      	ldr	r1, [pc, #404]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	4313      	orrs	r3, r2
 8007344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007346:	4b63      	ldr	r3, [pc, #396]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0b8      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d020      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007370:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4a58      	ldr	r2, [pc, #352]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800737a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007388:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4a52      	ldr	r2, [pc, #328]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 800738e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007394:	4b50      	ldr	r3, [pc, #320]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	494d      	ldr	r1, [pc, #308]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d040      	beq.n	8007434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d107      	bne.n	80073ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	4b47      	ldr	r3, [pc, #284]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d115      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e07f      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d107      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d2:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e073      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e2:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e06b      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073f2:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f023 0203 	bic.w	r2, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4936      	ldr	r1, [pc, #216]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007400:	4313      	orrs	r3, r2
 8007402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007404:	f7fd fe44 	bl	8005090 <HAL_GetTick>
 8007408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800740a:	e00a      	b.n	8007422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800740c:	f7fd fe40 	bl	8005090 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	; 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e053      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007422:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f003 020c 	and.w	r2, r3, #12
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	429a      	cmp	r2, r3
 8007432:	d1eb      	bne.n	800740c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007434:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d210      	bcs.n	8007464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f023 0207 	bic.w	r2, r3, #7
 800744a:	4922      	ldr	r1, [pc, #136]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	4313      	orrs	r3, r2
 8007450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007452:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d001      	beq.n	8007464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e032      	b.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007470:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4916      	ldr	r1, [pc, #88]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 800747e:	4313      	orrs	r3, r2
 8007480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d009      	beq.n	80074a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800748e:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	490e      	ldr	r1, [pc, #56]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074a2:	f000 f821 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 80074a6:	4602      	mov	r2, r0
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <HAL_RCC_ClockConfig+0x1c4>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	490a      	ldr	r1, [pc, #40]	; (80074dc <HAL_RCC_ClockConfig+0x1c8>)
 80074b4:	5ccb      	ldrb	r3, [r1, r3]
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <HAL_RCC_ClockConfig+0x1cc>)
 80074bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_RCC_ClockConfig+0x1d0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fd fda2 	bl	800500c <HAL_InitTick>

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40022000 	.word	0x40022000
 80074d8:	40021000 	.word	0x40021000
 80074dc:	0800cda0 	.word	0x0800cda0
 80074e0:	20000078 	.word	0x20000078
 80074e4:	200000f0 	.word	0x200000f0

080074e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e8:	b490      	push	{r4, r7}
 80074ea:	b08a      	sub	sp, #40	; 0x28
 80074ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <HAL_RCC_GetSysClockFreq+0xac>)
 80074f0:	1d3c      	adds	r4, r7, #4
 80074f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80074f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80074f8:	f240 2301 	movw	r3, #513	; 0x201
 80074fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	2b04      	cmp	r3, #4
 8007520:	d002      	beq.n	8007528 <HAL_RCC_GetSysClockFreq+0x40>
 8007522:	2b08      	cmp	r3, #8
 8007524:	d003      	beq.n	800752e <HAL_RCC_GetSysClockFreq+0x46>
 8007526:	e02b      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007528:	4b1c      	ldr	r3, [pc, #112]	; (800759c <HAL_RCC_GetSysClockFreq+0xb4>)
 800752a:	623b      	str	r3, [r7, #32]
      break;
 800752c:	e02b      	b.n	8007586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	0c9b      	lsrs	r3, r3, #18
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	3328      	adds	r3, #40	; 0x28
 8007538:	443b      	add	r3, r7
 800753a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800753e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d012      	beq.n	8007570 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <HAL_RCC_GetSysClockFreq+0xb0>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	0c5b      	lsrs	r3, r3, #17
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	3328      	adds	r3, #40	; 0x28
 8007556:	443b      	add	r3, r7
 8007558:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800755c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4a0e      	ldr	r2, [pc, #56]	; (800759c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007562:	fb03 f202 	mul.w	r2, r3, r2
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	e004      	b.n	800757a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	623b      	str	r3, [r7, #32]
      break;
 800757e:	e002      	b.n	8007586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007580:	4b06      	ldr	r3, [pc, #24]	; (800759c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007582:	623b      	str	r3, [r7, #32]
      break;
 8007584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007586:	6a3b      	ldr	r3, [r7, #32]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3728      	adds	r7, #40	; 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bc90      	pop	{r4, r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	0800cd90 	.word	0x0800cd90
 8007598:	40021000 	.word	0x40021000
 800759c:	007a1200 	.word	0x007a1200
 80075a0:	003d0900 	.word	0x003d0900

080075a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075a8:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80075aa:	681b      	ldr	r3, [r3, #0]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr
 80075b4:	20000078 	.word	0x20000078

080075b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075bc:	f7ff fff2 	bl	80075a4 <HAL_RCC_GetHCLKFreq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	4903      	ldr	r1, [pc, #12]	; (80075dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ce:	5ccb      	ldrb	r3, [r1, r3]
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40021000 	.word	0x40021000
 80075dc:	0800cdb0 	.word	0x0800cdb0

080075e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075e4:	f7ff ffde 	bl	80075a4 <HAL_RCC_GetHCLKFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	0adb      	lsrs	r3, r3, #11
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4903      	ldr	r1, [pc, #12]	; (8007604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40021000 	.word	0x40021000
 8007604:	0800cdb0 	.word	0x0800cdb0

08007608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <RCC_Delay+0x34>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <RCC_Delay+0x38>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007624:	bf00      	nop
  }
  while (Delay --);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	60fa      	str	r2, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f9      	bne.n	8007624 <RCC_Delay+0x1c>
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr
 800763c:	20000078 	.word	0x20000078
 8007640:	10624dd3 	.word	0x10624dd3

08007644 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d07d      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007664:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10d      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007670:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4a4b      	ldr	r2, [pc, #300]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767a:	61d3      	str	r3, [r2, #28]
 800767c:	4b49      	ldr	r3, [pc, #292]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007684:	60bb      	str	r3, [r7, #8]
 8007686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007688:	2301      	movs	r3, #1
 800768a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768c:	4b46      	ldr	r3, [pc, #280]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d118      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007698:	4b43      	ldr	r3, [pc, #268]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a42      	ldr	r2, [pc, #264]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800769e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076a4:	f7fd fcf4 	bl	8005090 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076aa:	e008      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ac:	f7fd fcf0 	bl	8005090 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b64      	cmp	r3, #100	; 0x64
 80076b8:	d901      	bls.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e06d      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076be:	4b3a      	ldr	r3, [pc, #232]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f0      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076ca:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02e      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d027      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076f2:	4b2e      	ldr	r3, [pc, #184]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076f8:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076fe:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d014      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770e:	f7fd fcbf 	bl	8005090 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007714:	e00a      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fd fcbb 	bl	8005090 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e036      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772c:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0ee      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4917      	ldr	r1, [pc, #92]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007746:	4313      	orrs	r3, r2
 8007748:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d105      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007750:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800775a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	490b      	ldr	r1, [pc, #44]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007776:	4313      	orrs	r3, r2
 8007778:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	4904      	ldr	r1, [pc, #16]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007794:	4313      	orrs	r3, r2
 8007796:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40021000 	.word	0x40021000
 80077a8:	40007000 	.word	0x40007000
 80077ac:	42420440 	.word	0x42420440

080077b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e076      	b.n	80078b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d2:	d009      	beq.n	80077e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	61da      	str	r2, [r3, #28]
 80077da:	e005      	b.n	80077e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fc fe42 	bl	800448c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	ea42 0103 	orr.w	r1, r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	0c1a      	lsrs	r2, r3, #16
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f002 0204 	and.w	r2, r2, #4
 800788e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800789e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e041      	b.n	800794e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fc fe80 	bl	80045e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f000 ffa6 	bl	8008848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d001      	beq.n	8007970 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e032      	b.n	80079d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <HAL_TIM_Base_Start+0x88>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00e      	beq.n	80079a0 <HAL_TIM_Base_Start+0x48>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798a:	d009      	beq.n	80079a0 <HAL_TIM_Base_Start+0x48>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a14      	ldr	r2, [pc, #80]	; (80079e4 <HAL_TIM_Base_Start+0x8c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_TIM_Base_Start+0x48>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <HAL_TIM_Base_Start+0x90>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d111      	bne.n	80079c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b06      	cmp	r3, #6
 80079b0:	d010      	beq.n	80079d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c2:	e007      	b.n	80079d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0201 	orr.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800

080079ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e041      	b.n	8007a82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f839 	bl	8007a8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f000 ff0c 	bl	8008848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <HAL_TIM_PWM_Start+0x24>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	e022      	b.n	8007b06 <HAL_TIM_PWM_Start+0x6a>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d109      	bne.n	8007ada <HAL_TIM_PWM_Start+0x3e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	bf14      	ite	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	2300      	moveq	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	e015      	b.n	8007b06 <HAL_TIM_PWM_Start+0x6a>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d109      	bne.n	8007af4 <HAL_TIM_PWM_Start+0x58>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	bf14      	ite	ne
 8007aec:	2301      	movne	r3, #1
 8007aee:	2300      	moveq	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	e008      	b.n	8007b06 <HAL_TIM_PWM_Start+0x6a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e05e      	b.n	8007bcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_PWM_Start+0x82>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b1c:	e013      	b.n	8007b46 <HAL_TIM_PWM_Start+0xaa>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d104      	bne.n	8007b2e <HAL_TIM_PWM_Start+0x92>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b2c:	e00b      	b.n	8007b46 <HAL_TIM_PWM_Start+0xaa>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_PWM_Start+0xa2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b3c:	e003      	b.n	8007b46 <HAL_TIM_PWM_Start+0xaa>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fa07 	bl	8008f62 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <HAL_TIM_PWM_Start+0x138>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d107      	bne.n	8007b6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <HAL_TIM_PWM_Start+0x138>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_TIM_PWM_Start+0xfa>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b80:	d009      	beq.n	8007b96 <HAL_TIM_PWM_Start+0xfa>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_TIM_PWM_Start+0x13c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIM_PWM_Start+0xfa>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a12      	ldr	r2, [pc, #72]	; (8007bdc <HAL_TIM_PWM_Start+0x140>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d111      	bne.n	8007bba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b06      	cmp	r3, #6
 8007ba6:	d010      	beq.n	8007bca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb8:	e007      	b.n	8007bca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0201 	orr.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800

08007be0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e041      	b.n	8007c76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f839 	bl	8007c7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 fe12 	bl	8008848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <HAL_TIM_IC_Start_IT+0x1a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e013      	b.n	8007cd2 <HAL_TIM_IC_Start_IT+0x42>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d104      	bne.n	8007cba <HAL_TIM_IC_Start_IT+0x2a>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	e00b      	b.n	8007cd2 <HAL_TIM_IC_Start_IT+0x42>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d104      	bne.n	8007cca <HAL_TIM_IC_Start_IT+0x3a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	e003      	b.n	8007cd2 <HAL_TIM_IC_Start_IT+0x42>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d104      	bne.n	8007ce4 <HAL_TIM_IC_Start_IT+0x54>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	e013      	b.n	8007d0c <HAL_TIM_IC_Start_IT+0x7c>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d104      	bne.n	8007cf4 <HAL_TIM_IC_Start_IT+0x64>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e00b      	b.n	8007d0c <HAL_TIM_IC_Start_IT+0x7c>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d104      	bne.n	8007d04 <HAL_TIM_IC_Start_IT+0x74>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	e003      	b.n	8007d0c <HAL_TIM_IC_Start_IT+0x7c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d102      	bne.n	8007d1a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d001      	beq.n	8007d1e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0b3      	b.n	8007e86 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_IC_Start_IT+0x9e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d2c:	e013      	b.n	8007d56 <HAL_TIM_IC_Start_IT+0xc6>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_IC_Start_IT+0xae>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d3c:	e00b      	b.n	8007d56 <HAL_TIM_IC_Start_IT+0xc6>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_IC_Start_IT+0xbe>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d4c:	e003      	b.n	8007d56 <HAL_TIM_IC_Start_IT+0xc6>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_IC_Start_IT+0xd6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d64:	e013      	b.n	8007d8e <HAL_TIM_IC_Start_IT+0xfe>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_IC_Start_IT+0xe6>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d74:	e00b      	b.n	8007d8e <HAL_TIM_IC_Start_IT+0xfe>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_IC_Start_IT+0xf6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d84:	e003      	b.n	8007d8e <HAL_TIM_IC_Start_IT+0xfe>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b0c      	cmp	r3, #12
 8007d92:	d841      	bhi.n	8007e18 <HAL_TIM_IC_Start_IT+0x188>
 8007d94:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <HAL_TIM_IC_Start_IT+0x10c>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dd1 	.word	0x08007dd1
 8007da0:	08007e19 	.word	0x08007e19
 8007da4:	08007e19 	.word	0x08007e19
 8007da8:	08007e19 	.word	0x08007e19
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007e19 	.word	0x08007e19
 8007db4:	08007e19 	.word	0x08007e19
 8007db8:	08007e19 	.word	0x08007e19
 8007dbc:	08007df5 	.word	0x08007df5
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e19 	.word	0x08007e19
 8007dc8:	08007e19 	.word	0x08007e19
 8007dcc:	08007e07 	.word	0x08007e07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0202 	orr.w	r2, r2, #2
 8007dde:	60da      	str	r2, [r3, #12]
      break;
 8007de0:	e01b      	b.n	8007e1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0204 	orr.w	r2, r2, #4
 8007df0:	60da      	str	r2, [r3, #12]
      break;
 8007df2:	e012      	b.n	8007e1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0208 	orr.w	r2, r2, #8
 8007e02:	60da      	str	r2, [r3, #12]
      break;
 8007e04:	e009      	b.n	8007e1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0210 	orr.w	r2, r2, #16
 8007e14:	60da      	str	r2, [r3, #12]
      break;
 8007e16:	e000      	b.n	8007e1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007e18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 f89d 	bl	8008f62 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_TIM_IC_Start_IT+0x200>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <HAL_TIM_IC_Start_IT+0x1c0>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3a:	d009      	beq.n	8007e50 <HAL_TIM_IC_Start_IT+0x1c0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a14      	ldr	r2, [pc, #80]	; (8007e94 <HAL_TIM_IC_Start_IT+0x204>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_IC_Start_IT+0x1c0>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <HAL_TIM_IC_Start_IT+0x208>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d111      	bne.n	8007e74 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d010      	beq.n	8007e84 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0201 	orr.w	r2, r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e72:	e007      	b.n	8007e84 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800

08007e9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e093      	b.n	8007fd8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7fc fb2d 	bl	8004524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee0:	f023 0307 	bic.w	r3, r3, #7
 8007ee4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f000 fca9 	bl	8008848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007f3c:	f023 030c 	bic.w	r3, r3, #12
 8007f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	021b      	lsls	r3, r3, #8
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	011a      	lsls	r2, r3, #4
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	031b      	lsls	r3, r3, #12
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	4313      	orrs	r3, r2
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ff0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ff8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008000:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008008:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d102      	bne.n	800801c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d001      	beq.n	8008020 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e089      	b.n	8008134 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008030:	e031      	b.n	8008096 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b04      	cmp	r3, #4
 8008036:	d110      	bne.n	800805a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800803e:	7b3b      	ldrb	r3, [r7, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e075      	b.n	8008134 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008058:	e01d      	b.n	8008096 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d108      	bne.n	8008072 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d105      	bne.n	8008072 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008066:	7b7b      	ldrb	r3, [r7, #13]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800806c:	7b3b      	ldrb	r3, [r7, #12]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d001      	beq.n	8008076 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e05e      	b.n	8008134 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d010      	beq.n	80080c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80080a2:	e01f      	b.n	80080e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 ff58 	bl	8008f62 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0202 	orr.w	r2, r2, #2
 80080c0:	60da      	str	r2, [r3, #12]
      break;
 80080c2:	e02e      	b.n	8008122 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2201      	movs	r2, #1
 80080ca:	2104      	movs	r1, #4
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 ff48 	bl	8008f62 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0204 	orr.w	r2, r2, #4
 80080e0:	60da      	str	r2, [r3, #12]
      break;
 80080e2:	e01e      	b.n	8008122 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2201      	movs	r2, #1
 80080ea:	2100      	movs	r1, #0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 ff38 	bl	8008f62 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2201      	movs	r2, #1
 80080f8:	2104      	movs	r1, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 ff31 	bl	8008f62 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0202 	orr.w	r2, r2, #2
 800810e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0204 	orr.w	r2, r2, #4
 800811e:	60da      	str	r2, [r3, #12]
      break;
 8008120:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fc fcd2 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb43 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fb49 	bl	8008824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d122      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d11b      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0204 	mvn.w	r2, #4
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fc fca8 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb19 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb1f 	bl	8008824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0208 	mvn.w	r2, #8
 8008210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2204      	movs	r2, #4
 8008216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fc fc7e 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 faef 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 faf5 	bl	8008824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0210 	mvn.w	r2, #16
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2208      	movs	r2, #8
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fc fc54 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fac5 	bl	8008812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 facb 	bl	8008824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0201 	mvn.w	r2, #1
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 faa0 	bl	8008800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d10e      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d107      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fec7 	bl	800907a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d10e      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d107      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa8f 	bl	8008836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b20      	cmp	r3, #32
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0220 	mvn.w	r2, #32
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fe92 	bl	8009068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008362:	2302      	movs	r3, #2
 8008364:	e082      	b.n	800846c <HAL_TIM_IC_ConfigChannel+0x120>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11b      	bne.n	80083ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f000 fc4a 	bl	8008c1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 020c 	bic.w	r2, r2, #12
 8008396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6999      	ldr	r1, [r3, #24]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	e05a      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d11c      	bne.n	80083ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f000 fcb3 	bl	8008d2c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6999      	ldr	r1, [r3, #24]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	021a      	lsls	r2, r3, #8
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	619a      	str	r2, [r3, #24]
 80083ea:	e03a      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d11b      	bne.n	800842a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f000 fcfe 	bl	8008e02 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 020c 	bic.w	r2, r2, #12
 8008414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69d9      	ldr	r1, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	61da      	str	r2, [r3, #28]
 8008428:	e01b      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6819      	ldr	r1, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f000 fd1d 	bl	8008e78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800844c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69d9      	ldr	r1, [r3, #28]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	021a      	lsls	r2, r3, #8
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800848a:	2302      	movs	r3, #2
 800848c:	e0ac      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b0c      	cmp	r3, #12
 800849a:	f200 809f 	bhi.w	80085dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084d9 	.word	0x080084d9
 80084a8:	080085dd 	.word	0x080085dd
 80084ac:	080085dd 	.word	0x080085dd
 80084b0:	080085dd 	.word	0x080085dd
 80084b4:	08008519 	.word	0x08008519
 80084b8:	080085dd 	.word	0x080085dd
 80084bc:	080085dd 	.word	0x080085dd
 80084c0:	080085dd 	.word	0x080085dd
 80084c4:	0800855b 	.word	0x0800855b
 80084c8:	080085dd 	.word	0x080085dd
 80084cc:	080085dd 	.word	0x080085dd
 80084d0:	080085dd 	.word	0x080085dd
 80084d4:	0800859b 	.word	0x0800859b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fa14 	bl	800890c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0208 	orr.w	r2, r2, #8
 80084f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0204 	bic.w	r2, r2, #4
 8008502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6999      	ldr	r1, [r3, #24]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	619a      	str	r2, [r3, #24]
      break;
 8008516:	e062      	b.n	80085de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fa5a 	bl	80089d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6999      	ldr	r1, [r3, #24]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	021a      	lsls	r2, r3, #8
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	619a      	str	r2, [r3, #24]
      break;
 8008558:	e041      	b.n	80085de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 faa3 	bl	8008aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0208 	orr.w	r2, r2, #8
 8008574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0204 	bic.w	r2, r2, #4
 8008584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69d9      	ldr	r1, [r3, #28]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	61da      	str	r2, [r3, #28]
      break;
 8008598:	e021      	b.n	80085de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 faed 	bl	8008b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69da      	ldr	r2, [r3, #28]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69d9      	ldr	r1, [r3, #28]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	021a      	lsls	r2, r3, #8
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	61da      	str	r2, [r3, #28]
      break;
 80085da:	e000      	b.n	80085de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80085dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIM_ConfigClockSource+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e0b3      	b.n	8008770 <HAL_TIM_ConfigClockSource+0x180>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008640:	d03e      	beq.n	80086c0 <HAL_TIM_ConfigClockSource+0xd0>
 8008642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008646:	f200 8087 	bhi.w	8008758 <HAL_TIM_ConfigClockSource+0x168>
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	f000 8085 	beq.w	800875c <HAL_TIM_ConfigClockSource+0x16c>
 8008652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008656:	d87f      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008658:	2b70      	cmp	r3, #112	; 0x70
 800865a:	d01a      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0xa2>
 800865c:	2b70      	cmp	r3, #112	; 0x70
 800865e:	d87b      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008660:	2b60      	cmp	r3, #96	; 0x60
 8008662:	d050      	beq.n	8008706 <HAL_TIM_ConfigClockSource+0x116>
 8008664:	2b60      	cmp	r3, #96	; 0x60
 8008666:	d877      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008668:	2b50      	cmp	r3, #80	; 0x50
 800866a:	d03c      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0xf6>
 800866c:	2b50      	cmp	r3, #80	; 0x50
 800866e:	d873      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008670:	2b40      	cmp	r3, #64	; 0x40
 8008672:	d058      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x136>
 8008674:	2b40      	cmp	r3, #64	; 0x40
 8008676:	d86f      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008678:	2b30      	cmp	r3, #48	; 0x30
 800867a:	d064      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x156>
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d86b      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d060      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x156>
 8008684:	2b20      	cmp	r3, #32
 8008686:	d867      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d05c      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x156>
 800868c:	2b10      	cmp	r3, #16
 800868e:	d05a      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008690:	e062      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6899      	ldr	r1, [r3, #8]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f000 fc3f 	bl	8008f24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	609a      	str	r2, [r3, #8]
      break;
 80086be:	e04e      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6899      	ldr	r1, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f000 fc28 	bl	8008f24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e2:	609a      	str	r2, [r3, #8]
      break;
 80086e4:	e03b      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6859      	ldr	r1, [r3, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f000 faec 	bl	8008cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2150      	movs	r1, #80	; 0x50
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fbf6 	bl	8008ef0 <TIM_ITRx_SetConfig>
      break;
 8008704:	e02b      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6859      	ldr	r1, [r3, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	461a      	mov	r2, r3
 8008714:	f000 fb46 	bl	8008da4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2160      	movs	r1, #96	; 0x60
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fbe6 	bl	8008ef0 <TIM_ITRx_SetConfig>
      break;
 8008724:	e01b      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6859      	ldr	r1, [r3, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	461a      	mov	r2, r3
 8008734:	f000 facc 	bl	8008cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fbd6 	bl	8008ef0 <TIM_ITRx_SetConfig>
      break;
 8008744:	e00b      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f000 fbcd 	bl	8008ef0 <TIM_ITRx_SetConfig>
        break;
 8008756:	e002      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800875c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	d831      	bhi.n	80087f0 <HAL_TIM_ReadCapturedValue+0x78>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <HAL_TIM_ReadCapturedValue+0x1c>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087c9 	.word	0x080087c9
 8008798:	080087f1 	.word	0x080087f1
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	080087f1 	.word	0x080087f1
 80087a4:	080087d3 	.word	0x080087d3
 80087a8:	080087f1 	.word	0x080087f1
 80087ac:	080087f1 	.word	0x080087f1
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087dd 	.word	0x080087dd
 80087b8:	080087f1 	.word	0x080087f1
 80087bc:	080087f1 	.word	0x080087f1
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	080087e7 	.word	0x080087e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ce:	60fb      	str	r3, [r7, #12]

      break;
 80087d0:	e00f      	b.n	80087f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	60fb      	str	r3, [r7, #12]

      break;
 80087da:	e00a      	b.n	80087f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e2:	60fb      	str	r3, [r7, #12]

      break;
 80087e4:	e005      	b.n	80087f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	60fb      	str	r3, [r7, #12]

      break;
 80087ee:	e000      	b.n	80087f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80087f0:	bf00      	nop
  }

  return tmpreg;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop

08008800 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr

08008836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a29      	ldr	r2, [pc, #164]	; (8008900 <TIM_Base_SetConfig+0xb8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00b      	beq.n	8008878 <TIM_Base_SetConfig+0x30>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008866:	d007      	beq.n	8008878 <TIM_Base_SetConfig+0x30>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a26      	ldr	r2, [pc, #152]	; (8008904 <TIM_Base_SetConfig+0xbc>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0x30>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a25      	ldr	r2, [pc, #148]	; (8008908 <TIM_Base_SetConfig+0xc0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d108      	bne.n	800888a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1c      	ldr	r2, [pc, #112]	; (8008900 <TIM_Base_SetConfig+0xb8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_Base_SetConfig+0x62>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d007      	beq.n	80088aa <TIM_Base_SetConfig+0x62>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <TIM_Base_SetConfig+0xbc>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_Base_SetConfig+0x62>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a18      	ldr	r2, [pc, #96]	; (8008908 <TIM_Base_SetConfig+0xc0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a07      	ldr	r2, [pc, #28]	; (8008900 <TIM_Base_SetConfig+0xb8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d103      	bne.n	80088f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	615a      	str	r2, [r3, #20]
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800

0800890c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	f023 0201 	bic.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f023 0302 	bic.w	r3, r3, #2
 8008954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <TIM_OC1_SetConfig+0xc8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d10c      	bne.n	8008982 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0308 	bic.w	r3, r3, #8
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f023 0304 	bic.w	r3, r3, #4
 8008980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <TIM_OC1_SetConfig+0xc8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d111      	bne.n	80089ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00

080089d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	f023 0210 	bic.w	r2, r3, #16
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 0320 	bic.w	r3, r3, #32
 8008a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1d      	ldr	r2, [pc, #116]	; (8008aa8 <TIM_OC2_SetConfig+0xd0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d10d      	bne.n	8008a54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a14      	ldr	r2, [pc, #80]	; (8008aa8 <TIM_OC2_SetConfig+0xd0>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d113      	bne.n	8008a84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	621a      	str	r2, [r3, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr
 8008aa8:	40012c00 	.word	0x40012c00

08008aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <TIM_OC3_SetConfig+0xd0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d10d      	bne.n	8008b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <TIM_OC3_SetConfig+0xd0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d113      	bne.n	8008b56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	621a      	str	r2, [r3, #32]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40012c00 	.word	0x40012c00

08008b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	031b      	lsls	r3, r3, #12
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a0f      	ldr	r2, [pc, #60]	; (8008c18 <TIM_OC4_SetConfig+0x98>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	019b      	lsls	r3, r3, #6
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr
 8008c18:	40012c00 	.word	0x40012c00

08008c1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4a1f      	ldr	r2, [pc, #124]	; (8008cc4 <TIM_TI1_SetConfig+0xa8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00b      	beq.n	8008c62 <TIM_TI1_SetConfig+0x46>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c50:	d007      	beq.n	8008c62 <TIM_TI1_SetConfig+0x46>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <TIM_TI1_SetConfig+0xac>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d003      	beq.n	8008c62 <TIM_TI1_SetConfig+0x46>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <TIM_TI1_SetConfig+0xb0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d101      	bne.n	8008c66 <TIM_TI1_SetConfig+0x4a>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <TIM_TI1_SetConfig+0x4c>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e003      	b.n	8008c86 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f023 030a 	bic.w	r3, r3, #10
 8008ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f003 030a 	and.w	r3, r3, #10
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40000400 	.word	0x40000400
 8008ccc:	40000800 	.word	0x40000800

08008cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f023 030a 	bic.w	r3, r3, #10
 8008d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	621a      	str	r2, [r3, #32]
}
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f023 0210 	bic.w	r2, r3, #16
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	031b      	lsls	r3, r3, #12
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr

08008da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f023 0210 	bic.w	r2, r3, #16
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	031b      	lsls	r3, r3, #12
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	621a      	str	r2, [r3, #32]
}
 8008df8:	bf00      	nop
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr

08008e02 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b087      	sub	sp, #28
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	621a      	str	r2, [r3, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	031b      	lsls	r3, r3, #12
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	031b      	lsls	r3, r3, #12
 8008ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f043 0307 	orr.w	r3, r3, #7
 8008f12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	609a      	str	r2, [r3, #8]
}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bc80      	pop	{r7}
 8008f22:	4770      	bx	lr

08008f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	021a      	lsls	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	609a      	str	r2, [r3, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr

08008f62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b087      	sub	sp, #28
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f003 031f 	and.w	r3, r3, #31
 8008f74:	2201      	movs	r2, #1
 8008f76:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	43db      	mvns	r3, r3
 8008f84:	401a      	ands	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1a      	ldr	r2, [r3, #32]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	621a      	str	r2, [r3, #32]
}
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e046      	b.n	8009052 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a16      	ldr	r2, [pc, #88]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009010:	d009      	beq.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a12      	ldr	r2, [pc, #72]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a10      	ldr	r2, [pc, #64]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d10c      	bne.n	8009040 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	4313      	orrs	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr
 800905c:	40012c00 	.word	0x40012c00
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800

08009068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr

0800907a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr

0800908c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e03f      	b.n	800911e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fb fb38 	bl	8004728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2224      	movs	r2, #36	; 0x24
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 faa7 	bl	8009624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695a      	ldr	r2, [r3, #20]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b08a      	sub	sp, #40	; 0x28
 800912a:	af02      	add	r7, sp, #8
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	4613      	mov	r3, r2
 8009134:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b20      	cmp	r3, #32
 8009144:	d17c      	bne.n	8009240 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <HAL_UART_Transmit+0x2c>
 800914c:	88fb      	ldrh	r3, [r7, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e075      	b.n	8009242 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d101      	bne.n	8009164 <HAL_UART_Transmit+0x3e>
 8009160:	2302      	movs	r3, #2
 8009162:	e06e      	b.n	8009242 <HAL_UART_Transmit+0x11c>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2221      	movs	r2, #33	; 0x21
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800917a:	f7fb ff89 	bl	8005090 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009194:	d108      	bne.n	80091a8 <HAL_UART_Transmit+0x82>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e003      	b.n	80091b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80091b8:	e02a      	b.n	8009210 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2200      	movs	r2, #0
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f93d 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e036      	b.n	8009242 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	3302      	adds	r3, #2
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e007      	b.n	8009202 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	3301      	adds	r3, #1
 8009200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1cf      	bne.n	80091ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2140      	movs	r1, #64	; 0x40
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f90d 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2220      	movs	r2, #32
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b20      	cmp	r3, #32
 8009262:	d11d      	bne.n	80092a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <HAL_UART_Receive_DMA+0x26>
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e016      	b.n	80092a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_UART_Receive_DMA+0x38>
 800927e:	2302      	movs	r3, #2
 8009280:	e00f      	b.n	80092a2 <HAL_UART_Receive_DMA+0x58>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	461a      	mov	r2, r3
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f91e 	bl	80094d8 <UART_Start_Receive_DMA>
 800929c:	4603      	mov	r3, r0
 800929e:	e000      	b.n	80092a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80092a0:	2302      	movs	r3, #2
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr

080092bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bc80      	pop	{r7}
 80092cc:	4770      	bx	lr

080092ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	bc80      	pop	{r7}
 80092e2:	4770      	bx	lr

080092e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d12a      	bne.n	8009356 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009314:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695a      	ldr	r2, [r3, #20]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009334:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	2b01      	cmp	r3, #1
 8009344:	d107      	bne.n	8009356 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0210 	bic.w	r2, r2, #16
 8009354:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	2b01      	cmp	r3, #1
 800935c:	d106      	bne.n	800936c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009362:	4619      	mov	r1, r3
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff ffb2 	bl	80092ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800936a:	e002      	b.n	8009372 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7fa ffc3 	bl	80042f8 <HAL_UART_RxCpltCallback>
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	2b01      	cmp	r3, #1
 800938e:	d108      	bne.n	80093a2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009394:	085b      	lsrs	r3, r3, #1
 8009396:	b29b      	uxth	r3, r3
 8009398:	4619      	mov	r1, r3
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff ff97 	bl	80092ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093a0:	e002      	b.n	80093a8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ff81 	bl	80092aa <HAL_UART_RxHalfCpltCallback>
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bf14      	ite	ne
 80093d0:	2301      	movne	r3, #1
 80093d2:	2300      	moveq	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b21      	cmp	r3, #33	; 0x21
 80093e2:	d108      	bne.n	80093f6 <UART_DMAError+0x46>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 f8d5 	bl	80095a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf14      	ite	ne
 8009404:	2301      	movne	r3, #1
 8009406:	2300      	moveq	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b22      	cmp	r3, #34	; 0x22
 8009416:	d108      	bne.n	800942a <UART_DMAError+0x7a>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f000 f8d0 	bl	80095ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	f043 0210 	orr.w	r2, r3, #16
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009436:	68b8      	ldr	r0, [r7, #8]
 8009438:	f7ff ff40 	bl	80092bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009454:	e02c      	b.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800945c:	d028      	beq.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <UART_WaitOnFlagUntilTimeout+0x30>
 8009464:	f7fb fe14 	bl	8005090 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	429a      	cmp	r2, r3
 8009472:	d21d      	bcs.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009482:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695a      	ldr	r2, [r3, #20]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e00f      	b.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4013      	ands	r3, r2
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	429a      	cmp	r2, r3
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d0c3      	beq.n	8009456 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	88fa      	ldrh	r2, [r7, #6]
 80094f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2222      	movs	r2, #34	; 0x22
 80094fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	4a23      	ldr	r2, [pc, #140]	; (8009594 <UART_Start_Receive_DMA+0xbc>)
 8009506:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	4a22      	ldr	r2, [pc, #136]	; (8009598 <UART_Start_Receive_DMA+0xc0>)
 800950e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009514:	4a21      	ldr	r2, [pc, #132]	; (800959c <UART_Start_Receive_DMA+0xc4>)
 8009516:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	2200      	movs	r2, #0
 800951e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	f7fc f952 	bl	80057e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009568:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	695a      	ldr	r2, [r3, #20]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f042 0201 	orr.w	r2, r2, #1
 8009578:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	695a      	ldr	r2, [r3, #20]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009588:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	080092e5 	.word	0x080092e5
 8009598:	0800937b 	.word	0x0800937b
 800959c:	080093b1 	.word	0x080093b1

080095a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80095b6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095e0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d107      	bne.n	800960a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0210 	bic.w	r2, r2, #16
 8009608:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr
	...

08009624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800965e:	f023 030c 	bic.w	r3, r3, #12
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	430b      	orrs	r3, r1
 800966a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699a      	ldr	r2, [r3, #24]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a2c      	ldr	r2, [pc, #176]	; (8009738 <UART_SetConfig+0x114>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d103      	bne.n	8009694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800968c:	f7fd ffa8 	bl	80075e0 <HAL_RCC_GetPCLK2Freq>
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	e002      	b.n	800969a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009694:	f7fd ff90 	bl	80075b8 <HAL_RCC_GetPCLK1Freq>
 8009698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	009a      	lsls	r2, r3, #2
 80096a4:	441a      	add	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	4a22      	ldr	r2, [pc, #136]	; (800973c <UART_SetConfig+0x118>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	0119      	lsls	r1, r3, #4
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009a      	lsls	r2, r3, #2
 80096c4:	441a      	add	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <UART_SetConfig+0x118>)
 80096d2:	fba3 0302 	umull	r0, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	2064      	movs	r0, #100	; 0x64
 80096da:	fb00 f303 	mul.w	r3, r0, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	3332      	adds	r3, #50	; 0x32
 80096e4:	4a15      	ldr	r2, [pc, #84]	; (800973c <UART_SetConfig+0x118>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096f0:	4419      	add	r1, r3
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009a      	lsls	r2, r3, #2
 80096fc:	441a      	add	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	fbb2 f2f3 	udiv	r2, r2, r3
 8009708:	4b0c      	ldr	r3, [pc, #48]	; (800973c <UART_SetConfig+0x118>)
 800970a:	fba3 0302 	umull	r0, r3, r3, r2
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	2064      	movs	r0, #100	; 0x64
 8009712:	fb00 f303 	mul.w	r3, r0, r3
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	3332      	adds	r3, #50	; 0x32
 800971c:	4a07      	ldr	r2, [pc, #28]	; (800973c <UART_SetConfig+0x118>)
 800971e:	fba2 2303 	umull	r2, r3, r2, r3
 8009722:	095b      	lsrs	r3, r3, #5
 8009724:	f003 020f 	and.w	r2, r3, #15
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	440a      	add	r2, r1
 800972e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40013800 	.word	0x40013800
 800973c:	51eb851f 	.word	0x51eb851f

08009740 <atoi>:
 8009740:	220a      	movs	r2, #10
 8009742:	2100      	movs	r1, #0
 8009744:	f000 bd42 	b.w	800a1cc <strtol>

08009748 <__errno>:
 8009748:	4b01      	ldr	r3, [pc, #4]	; (8009750 <__errno+0x8>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	200000f8 	.word	0x200000f8

08009754 <__libc_init_array>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	2600      	movs	r6, #0
 8009758:	4d0c      	ldr	r5, [pc, #48]	; (800978c <__libc_init_array+0x38>)
 800975a:	4c0d      	ldr	r4, [pc, #52]	; (8009790 <__libc_init_array+0x3c>)
 800975c:	1b64      	subs	r4, r4, r5
 800975e:	10a4      	asrs	r4, r4, #2
 8009760:	42a6      	cmp	r6, r4
 8009762:	d109      	bne.n	8009778 <__libc_init_array+0x24>
 8009764:	f003 fb00 	bl	800cd68 <_init>
 8009768:	2600      	movs	r6, #0
 800976a:	4d0a      	ldr	r5, [pc, #40]	; (8009794 <__libc_init_array+0x40>)
 800976c:	4c0a      	ldr	r4, [pc, #40]	; (8009798 <__libc_init_array+0x44>)
 800976e:	1b64      	subs	r4, r4, r5
 8009770:	10a4      	asrs	r4, r4, #2
 8009772:	42a6      	cmp	r6, r4
 8009774:	d105      	bne.n	8009782 <__libc_init_array+0x2e>
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	f855 3b04 	ldr.w	r3, [r5], #4
 800977c:	4798      	blx	r3
 800977e:	3601      	adds	r6, #1
 8009780:	e7ee      	b.n	8009760 <__libc_init_array+0xc>
 8009782:	f855 3b04 	ldr.w	r3, [r5], #4
 8009786:	4798      	blx	r3
 8009788:	3601      	adds	r6, #1
 800978a:	e7f2      	b.n	8009772 <__libc_init_array+0x1e>
 800978c:	0800d1cc 	.word	0x0800d1cc
 8009790:	0800d1cc 	.word	0x0800d1cc
 8009794:	0800d1cc 	.word	0x0800d1cc
 8009798:	0800d1d0 	.word	0x0800d1d0

0800979c <memset>:
 800979c:	4603      	mov	r3, r0
 800979e:	4402      	add	r2, r0
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d100      	bne.n	80097a6 <memset+0xa>
 80097a4:	4770      	bx	lr
 80097a6:	f803 1b01 	strb.w	r1, [r3], #1
 80097aa:	e7f9      	b.n	80097a0 <memset+0x4>

080097ac <__cvt>:
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b2:	461f      	mov	r7, r3
 80097b4:	bfbb      	ittet	lt
 80097b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	461f      	movlt	r7, r3
 80097bc:	2300      	movge	r3, #0
 80097be:	232d      	movlt	r3, #45	; 0x2d
 80097c0:	b088      	sub	sp, #32
 80097c2:	4614      	mov	r4, r2
 80097c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097c8:	7013      	strb	r3, [r2, #0]
 80097ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80097d0:	f023 0820 	bic.w	r8, r3, #32
 80097d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097d8:	d005      	beq.n	80097e6 <__cvt+0x3a>
 80097da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097de:	d100      	bne.n	80097e2 <__cvt+0x36>
 80097e0:	3501      	adds	r5, #1
 80097e2:	2302      	movs	r3, #2
 80097e4:	e000      	b.n	80097e8 <__cvt+0x3c>
 80097e6:	2303      	movs	r3, #3
 80097e8:	aa07      	add	r2, sp, #28
 80097ea:	9204      	str	r2, [sp, #16]
 80097ec:	aa06      	add	r2, sp, #24
 80097ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80097f2:	e9cd 3500 	strd	r3, r5, [sp]
 80097f6:	4622      	mov	r2, r4
 80097f8:	463b      	mov	r3, r7
 80097fa:	f000 fd7d 	bl	800a2f8 <_dtoa_r>
 80097fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009802:	4606      	mov	r6, r0
 8009804:	d102      	bne.n	800980c <__cvt+0x60>
 8009806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009808:	07db      	lsls	r3, r3, #31
 800980a:	d522      	bpl.n	8009852 <__cvt+0xa6>
 800980c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009810:	eb06 0905 	add.w	r9, r6, r5
 8009814:	d110      	bne.n	8009838 <__cvt+0x8c>
 8009816:	7833      	ldrb	r3, [r6, #0]
 8009818:	2b30      	cmp	r3, #48	; 0x30
 800981a:	d10a      	bne.n	8009832 <__cvt+0x86>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4620      	mov	r0, r4
 8009822:	4639      	mov	r1, r7
 8009824:	f7f7 f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8009828:	b918      	cbnz	r0, 8009832 <__cvt+0x86>
 800982a:	f1c5 0501 	rsb	r5, r5, #1
 800982e:	f8ca 5000 	str.w	r5, [sl]
 8009832:	f8da 3000 	ldr.w	r3, [sl]
 8009836:	4499      	add	r9, r3
 8009838:	2200      	movs	r2, #0
 800983a:	2300      	movs	r3, #0
 800983c:	4620      	mov	r0, r4
 800983e:	4639      	mov	r1, r7
 8009840:	f7f7 f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8009844:	b108      	cbz	r0, 800984a <__cvt+0x9e>
 8009846:	f8cd 901c 	str.w	r9, [sp, #28]
 800984a:	2230      	movs	r2, #48	; 0x30
 800984c:	9b07      	ldr	r3, [sp, #28]
 800984e:	454b      	cmp	r3, r9
 8009850:	d307      	bcc.n	8009862 <__cvt+0xb6>
 8009852:	4630      	mov	r0, r6
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009858:	1b9b      	subs	r3, r3, r6
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	b008      	add	sp, #32
 800985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009862:	1c59      	adds	r1, r3, #1
 8009864:	9107      	str	r1, [sp, #28]
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e7f0      	b.n	800984c <__cvt+0xa0>

0800986a <__exponent>:
 800986a:	4603      	mov	r3, r0
 800986c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800986e:	2900      	cmp	r1, #0
 8009870:	f803 2b02 	strb.w	r2, [r3], #2
 8009874:	bfb6      	itet	lt
 8009876:	222d      	movlt	r2, #45	; 0x2d
 8009878:	222b      	movge	r2, #43	; 0x2b
 800987a:	4249      	neglt	r1, r1
 800987c:	2909      	cmp	r1, #9
 800987e:	7042      	strb	r2, [r0, #1]
 8009880:	dd2b      	ble.n	80098da <__exponent+0x70>
 8009882:	f10d 0407 	add.w	r4, sp, #7
 8009886:	46a4      	mov	ip, r4
 8009888:	270a      	movs	r7, #10
 800988a:	fb91 f6f7 	sdiv	r6, r1, r7
 800988e:	460a      	mov	r2, r1
 8009890:	46a6      	mov	lr, r4
 8009892:	fb07 1516 	mls	r5, r7, r6, r1
 8009896:	2a63      	cmp	r2, #99	; 0x63
 8009898:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800989c:	4631      	mov	r1, r6
 800989e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80098a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098a6:	dcf0      	bgt.n	800988a <__exponent+0x20>
 80098a8:	3130      	adds	r1, #48	; 0x30
 80098aa:	f1ae 0502 	sub.w	r5, lr, #2
 80098ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098b2:	4629      	mov	r1, r5
 80098b4:	1c44      	adds	r4, r0, #1
 80098b6:	4561      	cmp	r1, ip
 80098b8:	d30a      	bcc.n	80098d0 <__exponent+0x66>
 80098ba:	f10d 0209 	add.w	r2, sp, #9
 80098be:	eba2 020e 	sub.w	r2, r2, lr
 80098c2:	4565      	cmp	r5, ip
 80098c4:	bf88      	it	hi
 80098c6:	2200      	movhi	r2, #0
 80098c8:	4413      	add	r3, r2
 80098ca:	1a18      	subs	r0, r3, r0
 80098cc:	b003      	add	sp, #12
 80098ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098d8:	e7ed      	b.n	80098b6 <__exponent+0x4c>
 80098da:	2330      	movs	r3, #48	; 0x30
 80098dc:	3130      	adds	r1, #48	; 0x30
 80098de:	7083      	strb	r3, [r0, #2]
 80098e0:	70c1      	strb	r1, [r0, #3]
 80098e2:	1d03      	adds	r3, r0, #4
 80098e4:	e7f1      	b.n	80098ca <__exponent+0x60>
	...

080098e8 <_printf_float>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	b091      	sub	sp, #68	; 0x44
 80098ee:	460c      	mov	r4, r1
 80098f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80098f4:	4616      	mov	r6, r2
 80098f6:	461f      	mov	r7, r3
 80098f8:	4605      	mov	r5, r0
 80098fa:	f001 faeb 	bl	800aed4 <_localeconv_r>
 80098fe:	6803      	ldr	r3, [r0, #0]
 8009900:	4618      	mov	r0, r3
 8009902:	9309      	str	r3, [sp, #36]	; 0x24
 8009904:	f7f6 fc24 	bl	8000150 <strlen>
 8009908:	2300      	movs	r3, #0
 800990a:	930e      	str	r3, [sp, #56]	; 0x38
 800990c:	f8d8 3000 	ldr.w	r3, [r8]
 8009910:	900a      	str	r0, [sp, #40]	; 0x28
 8009912:	3307      	adds	r3, #7
 8009914:	f023 0307 	bic.w	r3, r3, #7
 8009918:	f103 0208 	add.w	r2, r3, #8
 800991c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009920:	f8d4 b000 	ldr.w	fp, [r4]
 8009924:	f8c8 2000 	str.w	r2, [r8]
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009930:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009934:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009938:	930b      	str	r3, [sp, #44]	; 0x2c
 800993a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800993e:	4640      	mov	r0, r8
 8009940:	4b9c      	ldr	r3, [pc, #624]	; (8009bb4 <_printf_float+0x2cc>)
 8009942:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009944:	f7f7 f862 	bl	8000a0c <__aeabi_dcmpun>
 8009948:	bb70      	cbnz	r0, 80099a8 <_printf_float+0xc0>
 800994a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994e:	4640      	mov	r0, r8
 8009950:	4b98      	ldr	r3, [pc, #608]	; (8009bb4 <_printf_float+0x2cc>)
 8009952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009954:	f7f7 f83c 	bl	80009d0 <__aeabi_dcmple>
 8009958:	bb30      	cbnz	r0, 80099a8 <_printf_float+0xc0>
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	4640      	mov	r0, r8
 8009960:	4651      	mov	r1, sl
 8009962:	f7f7 f82b 	bl	80009bc <__aeabi_dcmplt>
 8009966:	b110      	cbz	r0, 800996e <_printf_float+0x86>
 8009968:	232d      	movs	r3, #45	; 0x2d
 800996a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996e:	4b92      	ldr	r3, [pc, #584]	; (8009bb8 <_printf_float+0x2d0>)
 8009970:	4892      	ldr	r0, [pc, #584]	; (8009bbc <_printf_float+0x2d4>)
 8009972:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009976:	bf94      	ite	ls
 8009978:	4698      	movls	r8, r3
 800997a:	4680      	movhi	r8, r0
 800997c:	2303      	movs	r3, #3
 800997e:	f04f 0a00 	mov.w	sl, #0
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	f02b 0304 	bic.w	r3, fp, #4
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	4633      	mov	r3, r6
 800998c:	4621      	mov	r1, r4
 800998e:	4628      	mov	r0, r5
 8009990:	9700      	str	r7, [sp, #0]
 8009992:	aa0f      	add	r2, sp, #60	; 0x3c
 8009994:	f000 f9d4 	bl	8009d40 <_printf_common>
 8009998:	3001      	adds	r0, #1
 800999a:	f040 8090 	bne.w	8009abe <_printf_float+0x1d6>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a2:	b011      	add	sp, #68	; 0x44
 80099a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a8:	4642      	mov	r2, r8
 80099aa:	4653      	mov	r3, sl
 80099ac:	4640      	mov	r0, r8
 80099ae:	4651      	mov	r1, sl
 80099b0:	f7f7 f82c 	bl	8000a0c <__aeabi_dcmpun>
 80099b4:	b148      	cbz	r0, 80099ca <_printf_float+0xe2>
 80099b6:	f1ba 0f00 	cmp.w	sl, #0
 80099ba:	bfb8      	it	lt
 80099bc:	232d      	movlt	r3, #45	; 0x2d
 80099be:	4880      	ldr	r0, [pc, #512]	; (8009bc0 <_printf_float+0x2d8>)
 80099c0:	bfb8      	it	lt
 80099c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099c6:	4b7f      	ldr	r3, [pc, #508]	; (8009bc4 <_printf_float+0x2dc>)
 80099c8:	e7d3      	b.n	8009972 <_printf_float+0x8a>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	d142      	bne.n	8009a5a <_printf_float+0x172>
 80099d4:	2306      	movs	r3, #6
 80099d6:	6063      	str	r3, [r4, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	9206      	str	r2, [sp, #24]
 80099dc:	aa0e      	add	r2, sp, #56	; 0x38
 80099de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80099e2:	aa0d      	add	r2, sp, #52	; 0x34
 80099e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80099e8:	9203      	str	r2, [sp, #12]
 80099ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80099ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	6863      	ldr	r3, [r4, #4]
 80099f6:	4642      	mov	r2, r8
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	4628      	mov	r0, r5
 80099fc:	4653      	mov	r3, sl
 80099fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a00:	f7ff fed4 	bl	80097ac <__cvt>
 8009a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a06:	4680      	mov	r8, r0
 8009a08:	2947      	cmp	r1, #71	; 0x47
 8009a0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a0c:	d108      	bne.n	8009a20 <_printf_float+0x138>
 8009a0e:	1cc8      	adds	r0, r1, #3
 8009a10:	db02      	blt.n	8009a18 <_printf_float+0x130>
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	4299      	cmp	r1, r3
 8009a16:	dd40      	ble.n	8009a9a <_printf_float+0x1b2>
 8009a18:	f1a9 0902 	sub.w	r9, r9, #2
 8009a1c:	fa5f f989 	uxtb.w	r9, r9
 8009a20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a24:	d81f      	bhi.n	8009a66 <_printf_float+0x17e>
 8009a26:	464a      	mov	r2, r9
 8009a28:	3901      	subs	r1, #1
 8009a2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a2e:	910d      	str	r1, [sp, #52]	; 0x34
 8009a30:	f7ff ff1b 	bl	800986a <__exponent>
 8009a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a36:	4682      	mov	sl, r0
 8009a38:	1813      	adds	r3, r2, r0
 8009a3a:	2a01      	cmp	r2, #1
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	dc02      	bgt.n	8009a46 <_printf_float+0x15e>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	07d2      	lsls	r2, r2, #31
 8009a44:	d501      	bpl.n	8009a4a <_printf_float+0x162>
 8009a46:	3301      	adds	r3, #1
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d09b      	beq.n	800998a <_printf_float+0xa2>
 8009a52:	232d      	movs	r3, #45	; 0x2d
 8009a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a58:	e797      	b.n	800998a <_printf_float+0xa2>
 8009a5a:	2947      	cmp	r1, #71	; 0x47
 8009a5c:	d1bc      	bne.n	80099d8 <_printf_float+0xf0>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1ba      	bne.n	80099d8 <_printf_float+0xf0>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7b7      	b.n	80099d6 <_printf_float+0xee>
 8009a66:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a6a:	d118      	bne.n	8009a9e <_printf_float+0x1b6>
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	dd0b      	ble.n	8009a8a <_printf_float+0x1a2>
 8009a72:	6121      	str	r1, [r4, #16]
 8009a74:	b913      	cbnz	r3, 8009a7c <_printf_float+0x194>
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	07d0      	lsls	r0, r2, #31
 8009a7a:	d502      	bpl.n	8009a82 <_printf_float+0x19a>
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	440b      	add	r3, r1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	f04f 0a00 	mov.w	sl, #0
 8009a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a88:	e7df      	b.n	8009a4a <_printf_float+0x162>
 8009a8a:	b913      	cbnz	r3, 8009a92 <_printf_float+0x1aa>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	07d2      	lsls	r2, r2, #31
 8009a90:	d501      	bpl.n	8009a96 <_printf_float+0x1ae>
 8009a92:	3302      	adds	r3, #2
 8009a94:	e7f4      	b.n	8009a80 <_printf_float+0x198>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7f2      	b.n	8009a80 <_printf_float+0x198>
 8009a9a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	db05      	blt.n	8009ab0 <_printf_float+0x1c8>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	6121      	str	r1, [r4, #16]
 8009aa8:	07d8      	lsls	r0, r3, #31
 8009aaa:	d5ea      	bpl.n	8009a82 <_printf_float+0x19a>
 8009aac:	1c4b      	adds	r3, r1, #1
 8009aae:	e7e7      	b.n	8009a80 <_printf_float+0x198>
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	bfcc      	ite	gt
 8009ab4:	2201      	movgt	r2, #1
 8009ab6:	f1c1 0202 	rsble	r2, r1, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	e7e0      	b.n	8009a80 <_printf_float+0x198>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	055a      	lsls	r2, r3, #21
 8009ac2:	d407      	bmi.n	8009ad4 <_printf_float+0x1ec>
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b8      	blx	r7
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d12b      	bne.n	8009b2a <_printf_float+0x242>
 8009ad2:	e764      	b.n	800999e <_printf_float+0xb6>
 8009ad4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ad8:	f240 80dd 	bls.w	8009c96 <_printf_float+0x3ae>
 8009adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f7f6 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d033      	beq.n	8009b54 <_printf_float+0x26c>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4631      	mov	r1, r6
 8009af0:	4628      	mov	r0, r5
 8009af2:	4a35      	ldr	r2, [pc, #212]	; (8009bc8 <_printf_float+0x2e0>)
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af51 	beq.w	800999e <_printf_float+0xb6>
 8009afc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b00:	429a      	cmp	r2, r3
 8009b02:	db02      	blt.n	8009b0a <_printf_float+0x222>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	07d8      	lsls	r0, r3, #31
 8009b08:	d50f      	bpl.n	8009b2a <_printf_float+0x242>
 8009b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	f43f af42 	beq.w	800999e <_printf_float+0xb6>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 091a 	add.w	r9, r4, #26
 8009b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b24:	3b01      	subs	r3, #1
 8009b26:	4543      	cmp	r3, r8
 8009b28:	dc09      	bgt.n	8009b3e <_printf_float+0x256>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	079b      	lsls	r3, r3, #30
 8009b2e:	f100 8102 	bmi.w	8009d36 <_printf_float+0x44e>
 8009b32:	68e0      	ldr	r0, [r4, #12]
 8009b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b36:	4298      	cmp	r0, r3
 8009b38:	bfb8      	it	lt
 8009b3a:	4618      	movlt	r0, r3
 8009b3c:	e731      	b.n	80099a2 <_printf_float+0xba>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	464a      	mov	r2, r9
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f af28 	beq.w	800999e <_printf_float+0xb6>
 8009b4e:	f108 0801 	add.w	r8, r8, #1
 8009b52:	e7e6      	b.n	8009b22 <_printf_float+0x23a>
 8009b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dc38      	bgt.n	8009bcc <_printf_float+0x2e4>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	4a19      	ldr	r2, [pc, #100]	; (8009bc8 <_printf_float+0x2e0>)
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	f43f af1a 	beq.w	800999e <_printf_float+0xb6>
 8009b6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	d102      	bne.n	8009b78 <_printf_float+0x290>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	07d9      	lsls	r1, r3, #31
 8009b76:	d5d8      	bpl.n	8009b2a <_printf_float+0x242>
 8009b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b8      	blx	r7
 8009b82:	3001      	adds	r0, #1
 8009b84:	f43f af0b 	beq.w	800999e <_printf_float+0xb6>
 8009b88:	f04f 0900 	mov.w	r9, #0
 8009b8c:	f104 0a1a 	add.w	sl, r4, #26
 8009b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b92:	425b      	negs	r3, r3
 8009b94:	454b      	cmp	r3, r9
 8009b96:	dc01      	bgt.n	8009b9c <_printf_float+0x2b4>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b9a:	e794      	b.n	8009ac6 <_printf_float+0x1de>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4652      	mov	r2, sl
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f aef9 	beq.w	800999e <_printf_float+0xb6>
 8009bac:	f109 0901 	add.w	r9, r9, #1
 8009bb0:	e7ee      	b.n	8009b90 <_printf_float+0x2a8>
 8009bb2:	bf00      	nop
 8009bb4:	7fefffff 	.word	0x7fefffff
 8009bb8:	0800cdbc 	.word	0x0800cdbc
 8009bbc:	0800cdc0 	.word	0x0800cdc0
 8009bc0:	0800cdc8 	.word	0x0800cdc8
 8009bc4:	0800cdc4 	.word	0x0800cdc4
 8009bc8:	0800cdcc 	.word	0x0800cdcc
 8009bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	bfa8      	it	ge
 8009bd4:	461a      	movge	r2, r3
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	4691      	mov	r9, r2
 8009bda:	dc37      	bgt.n	8009c4c <_printf_float+0x364>
 8009bdc:	f04f 0b00 	mov.w	fp, #0
 8009be0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009be4:	f104 021a 	add.w	r2, r4, #26
 8009be8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009bec:	ebaa 0309 	sub.w	r3, sl, r9
 8009bf0:	455b      	cmp	r3, fp
 8009bf2:	dc33      	bgt.n	8009c5c <_printf_float+0x374>
 8009bf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	db3b      	blt.n	8009c74 <_printf_float+0x38c>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07da      	lsls	r2, r3, #31
 8009c00:	d438      	bmi.n	8009c74 <_printf_float+0x38c>
 8009c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c06:	eba3 020a 	sub.w	r2, r3, sl
 8009c0a:	eba3 0901 	sub.w	r9, r3, r1
 8009c0e:	4591      	cmp	r9, r2
 8009c10:	bfa8      	it	ge
 8009c12:	4691      	movge	r9, r2
 8009c14:	f1b9 0f00 	cmp.w	r9, #0
 8009c18:	dc34      	bgt.n	8009c84 <_printf_float+0x39c>
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c22:	f104 0a1a 	add.w	sl, r4, #26
 8009c26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c2a:	1a9b      	subs	r3, r3, r2
 8009c2c:	eba3 0309 	sub.w	r3, r3, r9
 8009c30:	4543      	cmp	r3, r8
 8009c32:	f77f af7a 	ble.w	8009b2a <_printf_float+0x242>
 8009c36:	2301      	movs	r3, #1
 8009c38:	4652      	mov	r2, sl
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f aeac 	beq.w	800999e <_printf_float+0xb6>
 8009c46:	f108 0801 	add.w	r8, r8, #1
 8009c4a:	e7ec      	b.n	8009c26 <_printf_float+0x33e>
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4642      	mov	r2, r8
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b8      	blx	r7
 8009c56:	3001      	adds	r0, #1
 8009c58:	d1c0      	bne.n	8009bdc <_printf_float+0x2f4>
 8009c5a:	e6a0      	b.n	800999e <_printf_float+0xb6>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	f43f ae99 	beq.w	800999e <_printf_float+0xb6>
 8009c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c6e:	f10b 0b01 	add.w	fp, fp, #1
 8009c72:	e7b9      	b.n	8009be8 <_printf_float+0x300>
 8009c74:	4631      	mov	r1, r6
 8009c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d1bf      	bne.n	8009c02 <_printf_float+0x31a>
 8009c82:	e68c      	b.n	800999e <_printf_float+0xb6>
 8009c84:	464b      	mov	r3, r9
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	eb08 020a 	add.w	r2, r8, sl
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1c2      	bne.n	8009c1a <_printf_float+0x332>
 8009c94:	e683      	b.n	800999e <_printf_float+0xb6>
 8009c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c98:	2a01      	cmp	r2, #1
 8009c9a:	dc01      	bgt.n	8009ca0 <_printf_float+0x3b8>
 8009c9c:	07db      	lsls	r3, r3, #31
 8009c9e:	d537      	bpl.n	8009d10 <_printf_float+0x428>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	f43f ae77 	beq.w	800999e <_printf_float+0xb6>
 8009cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f ae6f 	beq.w	800999e <_printf_float+0xb6>
 8009cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f7f6 fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 8009ccc:	b9d8      	cbnz	r0, 8009d06 <_printf_float+0x41e>
 8009cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cd0:	f108 0201 	add.w	r2, r8, #1
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d10e      	bne.n	8009cfe <_printf_float+0x416>
 8009ce0:	e65d      	b.n	800999e <_printf_float+0xb6>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	464a      	mov	r2, r9
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f ae56 	beq.w	800999e <_printf_float+0xb6>
 8009cf2:	f108 0801 	add.w	r8, r8, #1
 8009cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	4543      	cmp	r3, r8
 8009cfc:	dcf1      	bgt.n	8009ce2 <_printf_float+0x3fa>
 8009cfe:	4653      	mov	r3, sl
 8009d00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d04:	e6e0      	b.n	8009ac8 <_printf_float+0x1e0>
 8009d06:	f04f 0800 	mov.w	r8, #0
 8009d0a:	f104 091a 	add.w	r9, r4, #26
 8009d0e:	e7f2      	b.n	8009cf6 <_printf_float+0x40e>
 8009d10:	2301      	movs	r3, #1
 8009d12:	4642      	mov	r2, r8
 8009d14:	e7df      	b.n	8009cd6 <_printf_float+0x3ee>
 8009d16:	2301      	movs	r3, #1
 8009d18:	464a      	mov	r2, r9
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b8      	blx	r7
 8009d20:	3001      	adds	r0, #1
 8009d22:	f43f ae3c 	beq.w	800999e <_printf_float+0xb6>
 8009d26:	f108 0801 	add.w	r8, r8, #1
 8009d2a:	68e3      	ldr	r3, [r4, #12]
 8009d2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d2e:	1a5b      	subs	r3, r3, r1
 8009d30:	4543      	cmp	r3, r8
 8009d32:	dcf0      	bgt.n	8009d16 <_printf_float+0x42e>
 8009d34:	e6fd      	b.n	8009b32 <_printf_float+0x24a>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	f104 0919 	add.w	r9, r4, #25
 8009d3e:	e7f4      	b.n	8009d2a <_printf_float+0x442>

08009d40 <_printf_common>:
 8009d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d44:	4616      	mov	r6, r2
 8009d46:	4699      	mov	r9, r3
 8009d48:	688a      	ldr	r2, [r1, #8]
 8009d4a:	690b      	ldr	r3, [r1, #16]
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	bfb8      	it	lt
 8009d52:	4613      	movlt	r3, r2
 8009d54:	6033      	str	r3, [r6, #0]
 8009d56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d60:	b10a      	cbz	r2, 8009d66 <_printf_common+0x26>
 8009d62:	3301      	adds	r3, #1
 8009d64:	6033      	str	r3, [r6, #0]
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	0699      	lsls	r1, r3, #26
 8009d6a:	bf42      	ittt	mi
 8009d6c:	6833      	ldrmi	r3, [r6, #0]
 8009d6e:	3302      	addmi	r3, #2
 8009d70:	6033      	strmi	r3, [r6, #0]
 8009d72:	6825      	ldr	r5, [r4, #0]
 8009d74:	f015 0506 	ands.w	r5, r5, #6
 8009d78:	d106      	bne.n	8009d88 <_printf_common+0x48>
 8009d7a:	f104 0a19 	add.w	sl, r4, #25
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	6832      	ldr	r2, [r6, #0]
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dc28      	bgt.n	8009dda <_printf_common+0x9a>
 8009d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d8c:	1e13      	subs	r3, r2, #0
 8009d8e:	6822      	ldr	r2, [r4, #0]
 8009d90:	bf18      	it	ne
 8009d92:	2301      	movne	r3, #1
 8009d94:	0692      	lsls	r2, r2, #26
 8009d96:	d42d      	bmi.n	8009df4 <_printf_common+0xb4>
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009da0:	47c0      	blx	r8
 8009da2:	3001      	adds	r0, #1
 8009da4:	d020      	beq.n	8009de8 <_printf_common+0xa8>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	68e5      	ldr	r5, [r4, #12]
 8009daa:	f003 0306 	and.w	r3, r3, #6
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	bf18      	it	ne
 8009db2:	2500      	movne	r5, #0
 8009db4:	6832      	ldr	r2, [r6, #0]
 8009db6:	f04f 0600 	mov.w	r6, #0
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	bf08      	it	eq
 8009dbe:	1aad      	subeq	r5, r5, r2
 8009dc0:	6922      	ldr	r2, [r4, #16]
 8009dc2:	bf08      	it	eq
 8009dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	bfc4      	itt	gt
 8009dcc:	1a9b      	subgt	r3, r3, r2
 8009dce:	18ed      	addgt	r5, r5, r3
 8009dd0:	341a      	adds	r4, #26
 8009dd2:	42b5      	cmp	r5, r6
 8009dd4:	d11a      	bne.n	8009e0c <_printf_common+0xcc>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e008      	b.n	8009dec <_printf_common+0xac>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4652      	mov	r2, sl
 8009dde:	4649      	mov	r1, r9
 8009de0:	4638      	mov	r0, r7
 8009de2:	47c0      	blx	r8
 8009de4:	3001      	adds	r0, #1
 8009de6:	d103      	bne.n	8009df0 <_printf_common+0xb0>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df0:	3501      	adds	r5, #1
 8009df2:	e7c4      	b.n	8009d7e <_printf_common+0x3e>
 8009df4:	2030      	movs	r0, #48	; 0x30
 8009df6:	18e1      	adds	r1, r4, r3
 8009df8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e02:	4422      	add	r2, r4
 8009e04:	3302      	adds	r3, #2
 8009e06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e0a:	e7c5      	b.n	8009d98 <_printf_common+0x58>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	4622      	mov	r2, r4
 8009e10:	4649      	mov	r1, r9
 8009e12:	4638      	mov	r0, r7
 8009e14:	47c0      	blx	r8
 8009e16:	3001      	adds	r0, #1
 8009e18:	d0e6      	beq.n	8009de8 <_printf_common+0xa8>
 8009e1a:	3601      	adds	r6, #1
 8009e1c:	e7d9      	b.n	8009dd2 <_printf_common+0x92>
	...

08009e20 <_printf_i>:
 8009e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	7e0f      	ldrb	r7, [r1, #24]
 8009e26:	4691      	mov	r9, r2
 8009e28:	2f78      	cmp	r7, #120	; 0x78
 8009e2a:	4680      	mov	r8, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	469a      	mov	sl, r3
 8009e30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e36:	d807      	bhi.n	8009e48 <_printf_i+0x28>
 8009e38:	2f62      	cmp	r7, #98	; 0x62
 8009e3a:	d80a      	bhi.n	8009e52 <_printf_i+0x32>
 8009e3c:	2f00      	cmp	r7, #0
 8009e3e:	f000 80d9 	beq.w	8009ff4 <_printf_i+0x1d4>
 8009e42:	2f58      	cmp	r7, #88	; 0x58
 8009e44:	f000 80a4 	beq.w	8009f90 <_printf_i+0x170>
 8009e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e50:	e03a      	b.n	8009ec8 <_printf_i+0xa8>
 8009e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e56:	2b15      	cmp	r3, #21
 8009e58:	d8f6      	bhi.n	8009e48 <_printf_i+0x28>
 8009e5a:	a101      	add	r1, pc, #4	; (adr r1, 8009e60 <_printf_i+0x40>)
 8009e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e60:	08009eb9 	.word	0x08009eb9
 8009e64:	08009ecd 	.word	0x08009ecd
 8009e68:	08009e49 	.word	0x08009e49
 8009e6c:	08009e49 	.word	0x08009e49
 8009e70:	08009e49 	.word	0x08009e49
 8009e74:	08009e49 	.word	0x08009e49
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009e49 	.word	0x08009e49
 8009e80:	08009e49 	.word	0x08009e49
 8009e84:	08009e49 	.word	0x08009e49
 8009e88:	08009e49 	.word	0x08009e49
 8009e8c:	08009fdb 	.word	0x08009fdb
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009fbd 	.word	0x08009fbd
 8009e98:	08009e49 	.word	0x08009e49
 8009e9c:	08009e49 	.word	0x08009e49
 8009ea0:	08009ffd 	.word	0x08009ffd
 8009ea4:	08009e49 	.word	0x08009e49
 8009ea8:	08009efd 	.word	0x08009efd
 8009eac:	08009e49 	.word	0x08009e49
 8009eb0:	08009e49 	.word	0x08009e49
 8009eb4:	08009fc5 	.word	0x08009fc5
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	1d1a      	adds	r2, r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	602a      	str	r2, [r5, #0]
 8009ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e0a4      	b.n	800a016 <_printf_i+0x1f6>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	6829      	ldr	r1, [r5, #0]
 8009ed0:	0606      	lsls	r6, r0, #24
 8009ed2:	f101 0304 	add.w	r3, r1, #4
 8009ed6:	d50a      	bpl.n	8009eee <_printf_i+0xce>
 8009ed8:	680e      	ldr	r6, [r1, #0]
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	2e00      	cmp	r6, #0
 8009ede:	da03      	bge.n	8009ee8 <_printf_i+0xc8>
 8009ee0:	232d      	movs	r3, #45	; 0x2d
 8009ee2:	4276      	negs	r6, r6
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	230a      	movs	r3, #10
 8009eea:	485e      	ldr	r0, [pc, #376]	; (800a064 <_printf_i+0x244>)
 8009eec:	e019      	b.n	8009f22 <_printf_i+0x102>
 8009eee:	680e      	ldr	r6, [r1, #0]
 8009ef0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ef4:	602b      	str	r3, [r5, #0]
 8009ef6:	bf18      	it	ne
 8009ef8:	b236      	sxthne	r6, r6
 8009efa:	e7ef      	b.n	8009edc <_printf_i+0xbc>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	6029      	str	r1, [r5, #0]
 8009f04:	0601      	lsls	r1, r0, #24
 8009f06:	d501      	bpl.n	8009f0c <_printf_i+0xec>
 8009f08:	681e      	ldr	r6, [r3, #0]
 8009f0a:	e002      	b.n	8009f12 <_printf_i+0xf2>
 8009f0c:	0646      	lsls	r6, r0, #25
 8009f0e:	d5fb      	bpl.n	8009f08 <_printf_i+0xe8>
 8009f10:	881e      	ldrh	r6, [r3, #0]
 8009f12:	2f6f      	cmp	r7, #111	; 0x6f
 8009f14:	bf0c      	ite	eq
 8009f16:	2308      	moveq	r3, #8
 8009f18:	230a      	movne	r3, #10
 8009f1a:	4852      	ldr	r0, [pc, #328]	; (800a064 <_printf_i+0x244>)
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f22:	6865      	ldr	r5, [r4, #4]
 8009f24:	2d00      	cmp	r5, #0
 8009f26:	bfa8      	it	ge
 8009f28:	6821      	ldrge	r1, [r4, #0]
 8009f2a:	60a5      	str	r5, [r4, #8]
 8009f2c:	bfa4      	itt	ge
 8009f2e:	f021 0104 	bicge.w	r1, r1, #4
 8009f32:	6021      	strge	r1, [r4, #0]
 8009f34:	b90e      	cbnz	r6, 8009f3a <_printf_i+0x11a>
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	d04d      	beq.n	8009fd6 <_printf_i+0x1b6>
 8009f3a:	4615      	mov	r5, r2
 8009f3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f40:	fb03 6711 	mls	r7, r3, r1, r6
 8009f44:	5dc7      	ldrb	r7, [r0, r7]
 8009f46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f4a:	4637      	mov	r7, r6
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	460e      	mov	r6, r1
 8009f50:	d9f4      	bls.n	8009f3c <_printf_i+0x11c>
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d10b      	bne.n	8009f6e <_printf_i+0x14e>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	07de      	lsls	r6, r3, #31
 8009f5a:	d508      	bpl.n	8009f6e <_printf_i+0x14e>
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	6861      	ldr	r1, [r4, #4]
 8009f60:	4299      	cmp	r1, r3
 8009f62:	bfde      	ittt	le
 8009f64:	2330      	movle	r3, #48	; 0x30
 8009f66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f6e:	1b52      	subs	r2, r2, r5
 8009f70:	6122      	str	r2, [r4, #16]
 8009f72:	464b      	mov	r3, r9
 8009f74:	4621      	mov	r1, r4
 8009f76:	4640      	mov	r0, r8
 8009f78:	f8cd a000 	str.w	sl, [sp]
 8009f7c:	aa03      	add	r2, sp, #12
 8009f7e:	f7ff fedf 	bl	8009d40 <_printf_common>
 8009f82:	3001      	adds	r0, #1
 8009f84:	d14c      	bne.n	800a020 <_printf_i+0x200>
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f8a:	b004      	add	sp, #16
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	4834      	ldr	r0, [pc, #208]	; (800a064 <_printf_i+0x244>)
 8009f92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f96:	6829      	ldr	r1, [r5, #0]
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f9e:	6029      	str	r1, [r5, #0]
 8009fa0:	061d      	lsls	r5, r3, #24
 8009fa2:	d514      	bpl.n	8009fce <_printf_i+0x1ae>
 8009fa4:	07df      	lsls	r7, r3, #31
 8009fa6:	bf44      	itt	mi
 8009fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fac:	6023      	strmi	r3, [r4, #0]
 8009fae:	b91e      	cbnz	r6, 8009fb8 <_printf_i+0x198>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	f023 0320 	bic.w	r3, r3, #32
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	2310      	movs	r3, #16
 8009fba:	e7af      	b.n	8009f1c <_printf_i+0xfc>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	f043 0320 	orr.w	r3, r3, #32
 8009fc2:	6023      	str	r3, [r4, #0]
 8009fc4:	2378      	movs	r3, #120	; 0x78
 8009fc6:	4828      	ldr	r0, [pc, #160]	; (800a068 <_printf_i+0x248>)
 8009fc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fcc:	e7e3      	b.n	8009f96 <_printf_i+0x176>
 8009fce:	0659      	lsls	r1, r3, #25
 8009fd0:	bf48      	it	mi
 8009fd2:	b2b6      	uxthmi	r6, r6
 8009fd4:	e7e6      	b.n	8009fa4 <_printf_i+0x184>
 8009fd6:	4615      	mov	r5, r2
 8009fd8:	e7bb      	b.n	8009f52 <_printf_i+0x132>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	6826      	ldr	r6, [r4, #0]
 8009fde:	1d18      	adds	r0, r3, #4
 8009fe0:	6961      	ldr	r1, [r4, #20]
 8009fe2:	6028      	str	r0, [r5, #0]
 8009fe4:	0635      	lsls	r5, r6, #24
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	d501      	bpl.n	8009fee <_printf_i+0x1ce>
 8009fea:	6019      	str	r1, [r3, #0]
 8009fec:	e002      	b.n	8009ff4 <_printf_i+0x1d4>
 8009fee:	0670      	lsls	r0, r6, #25
 8009ff0:	d5fb      	bpl.n	8009fea <_printf_i+0x1ca>
 8009ff2:	8019      	strh	r1, [r3, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	e7ba      	b.n	8009f72 <_printf_i+0x152>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	2100      	movs	r1, #0
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	602a      	str	r2, [r5, #0]
 800a004:	681d      	ldr	r5, [r3, #0]
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 ff6f 	bl	800aeec <memchr>
 800a00e:	b108      	cbz	r0, 800a014 <_printf_i+0x1f4>
 800a010:	1b40      	subs	r0, r0, r5
 800a012:	6060      	str	r0, [r4, #4]
 800a014:	6863      	ldr	r3, [r4, #4]
 800a016:	6123      	str	r3, [r4, #16]
 800a018:	2300      	movs	r3, #0
 800a01a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a01e:	e7a8      	b.n	8009f72 <_printf_i+0x152>
 800a020:	462a      	mov	r2, r5
 800a022:	4649      	mov	r1, r9
 800a024:	4640      	mov	r0, r8
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	47d0      	blx	sl
 800a02a:	3001      	adds	r0, #1
 800a02c:	d0ab      	beq.n	8009f86 <_printf_i+0x166>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	079b      	lsls	r3, r3, #30
 800a032:	d413      	bmi.n	800a05c <_printf_i+0x23c>
 800a034:	68e0      	ldr	r0, [r4, #12]
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	4298      	cmp	r0, r3
 800a03a:	bfb8      	it	lt
 800a03c:	4618      	movlt	r0, r3
 800a03e:	e7a4      	b.n	8009f8a <_printf_i+0x16a>
 800a040:	2301      	movs	r3, #1
 800a042:	4632      	mov	r2, r6
 800a044:	4649      	mov	r1, r9
 800a046:	4640      	mov	r0, r8
 800a048:	47d0      	blx	sl
 800a04a:	3001      	adds	r0, #1
 800a04c:	d09b      	beq.n	8009f86 <_printf_i+0x166>
 800a04e:	3501      	adds	r5, #1
 800a050:	68e3      	ldr	r3, [r4, #12]
 800a052:	9903      	ldr	r1, [sp, #12]
 800a054:	1a5b      	subs	r3, r3, r1
 800a056:	42ab      	cmp	r3, r5
 800a058:	dcf2      	bgt.n	800a040 <_printf_i+0x220>
 800a05a:	e7eb      	b.n	800a034 <_printf_i+0x214>
 800a05c:	2500      	movs	r5, #0
 800a05e:	f104 0619 	add.w	r6, r4, #25
 800a062:	e7f5      	b.n	800a050 <_printf_i+0x230>
 800a064:	0800cdce 	.word	0x0800cdce
 800a068:	0800cddf 	.word	0x0800cddf

0800a06c <siprintf>:
 800a06c:	b40e      	push	{r1, r2, r3}
 800a06e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a072:	b500      	push	{lr}
 800a074:	b09c      	sub	sp, #112	; 0x70
 800a076:	ab1d      	add	r3, sp, #116	; 0x74
 800a078:	9002      	str	r0, [sp, #8]
 800a07a:	9006      	str	r0, [sp, #24]
 800a07c:	9107      	str	r1, [sp, #28]
 800a07e:	9104      	str	r1, [sp, #16]
 800a080:	4808      	ldr	r0, [pc, #32]	; (800a0a4 <siprintf+0x38>)
 800a082:	4909      	ldr	r1, [pc, #36]	; (800a0a8 <siprintf+0x3c>)
 800a084:	f853 2b04 	ldr.w	r2, [r3], #4
 800a088:	9105      	str	r1, [sp, #20]
 800a08a:	6800      	ldr	r0, [r0, #0]
 800a08c:	a902      	add	r1, sp, #8
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	f001 fc16 	bl	800b8c0 <_svfiprintf_r>
 800a094:	2200      	movs	r2, #0
 800a096:	9b02      	ldr	r3, [sp, #8]
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	b01c      	add	sp, #112	; 0x70
 800a09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0a0:	b003      	add	sp, #12
 800a0a2:	4770      	bx	lr
 800a0a4:	200000f8 	.word	0x200000f8
 800a0a8:	ffff0208 	.word	0xffff0208

0800a0ac <strncmp>:
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	b172      	cbz	r2, 800a0d0 <strncmp+0x24>
 800a0b2:	3901      	subs	r1, #1
 800a0b4:	1884      	adds	r4, r0, r2
 800a0b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0be:	4290      	cmp	r0, r2
 800a0c0:	d101      	bne.n	800a0c6 <strncmp+0x1a>
 800a0c2:	42a3      	cmp	r3, r4
 800a0c4:	d101      	bne.n	800a0ca <strncmp+0x1e>
 800a0c6:	1a80      	subs	r0, r0, r2
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d1f3      	bne.n	800a0b6 <strncmp+0xa>
 800a0ce:	e7fa      	b.n	800a0c6 <strncmp+0x1a>
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	e7f9      	b.n	800a0c8 <strncmp+0x1c>

0800a0d4 <_strtol_l.constprop.0>:
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0da:	4680      	mov	r8, r0
 800a0dc:	d001      	beq.n	800a0e2 <_strtol_l.constprop.0+0xe>
 800a0de:	2b24      	cmp	r3, #36	; 0x24
 800a0e0:	d906      	bls.n	800a0f0 <_strtol_l.constprop.0+0x1c>
 800a0e2:	f7ff fb31 	bl	8009748 <__errno>
 800a0e6:	2316      	movs	r3, #22
 800a0e8:	6003      	str	r3, [r0, #0]
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	4f35      	ldr	r7, [pc, #212]	; (800a1c8 <_strtol_l.constprop.0+0xf4>)
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0fa:	5de6      	ldrb	r6, [r4, r7]
 800a0fc:	f016 0608 	ands.w	r6, r6, #8
 800a100:	d1f8      	bne.n	800a0f4 <_strtol_l.constprop.0+0x20>
 800a102:	2c2d      	cmp	r4, #45	; 0x2d
 800a104:	d12f      	bne.n	800a166 <_strtol_l.constprop.0+0x92>
 800a106:	2601      	movs	r6, #1
 800a108:	782c      	ldrb	r4, [r5, #0]
 800a10a:	1c85      	adds	r5, r0, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d057      	beq.n	800a1c0 <_strtol_l.constprop.0+0xec>
 800a110:	2b10      	cmp	r3, #16
 800a112:	d109      	bne.n	800a128 <_strtol_l.constprop.0+0x54>
 800a114:	2c30      	cmp	r4, #48	; 0x30
 800a116:	d107      	bne.n	800a128 <_strtol_l.constprop.0+0x54>
 800a118:	7828      	ldrb	r0, [r5, #0]
 800a11a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a11e:	2858      	cmp	r0, #88	; 0x58
 800a120:	d149      	bne.n	800a1b6 <_strtol_l.constprop.0+0xe2>
 800a122:	2310      	movs	r3, #16
 800a124:	786c      	ldrb	r4, [r5, #1]
 800a126:	3502      	adds	r5, #2
 800a128:	2700      	movs	r7, #0
 800a12a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a12e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a132:	fbbe f9f3 	udiv	r9, lr, r3
 800a136:	4638      	mov	r0, r7
 800a138:	fb03 ea19 	mls	sl, r3, r9, lr
 800a13c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a140:	f1bc 0f09 	cmp.w	ip, #9
 800a144:	d814      	bhi.n	800a170 <_strtol_l.constprop.0+0x9c>
 800a146:	4664      	mov	r4, ip
 800a148:	42a3      	cmp	r3, r4
 800a14a:	dd22      	ble.n	800a192 <_strtol_l.constprop.0+0xbe>
 800a14c:	2f00      	cmp	r7, #0
 800a14e:	db1d      	blt.n	800a18c <_strtol_l.constprop.0+0xb8>
 800a150:	4581      	cmp	r9, r0
 800a152:	d31b      	bcc.n	800a18c <_strtol_l.constprop.0+0xb8>
 800a154:	d101      	bne.n	800a15a <_strtol_l.constprop.0+0x86>
 800a156:	45a2      	cmp	sl, r4
 800a158:	db18      	blt.n	800a18c <_strtol_l.constprop.0+0xb8>
 800a15a:	2701      	movs	r7, #1
 800a15c:	fb00 4003 	mla	r0, r0, r3, r4
 800a160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a164:	e7ea      	b.n	800a13c <_strtol_l.constprop.0+0x68>
 800a166:	2c2b      	cmp	r4, #43	; 0x2b
 800a168:	bf04      	itt	eq
 800a16a:	782c      	ldrbeq	r4, [r5, #0]
 800a16c:	1c85      	addeq	r5, r0, #2
 800a16e:	e7cd      	b.n	800a10c <_strtol_l.constprop.0+0x38>
 800a170:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a174:	f1bc 0f19 	cmp.w	ip, #25
 800a178:	d801      	bhi.n	800a17e <_strtol_l.constprop.0+0xaa>
 800a17a:	3c37      	subs	r4, #55	; 0x37
 800a17c:	e7e4      	b.n	800a148 <_strtol_l.constprop.0+0x74>
 800a17e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a182:	f1bc 0f19 	cmp.w	ip, #25
 800a186:	d804      	bhi.n	800a192 <_strtol_l.constprop.0+0xbe>
 800a188:	3c57      	subs	r4, #87	; 0x57
 800a18a:	e7dd      	b.n	800a148 <_strtol_l.constprop.0+0x74>
 800a18c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a190:	e7e6      	b.n	800a160 <_strtol_l.constprop.0+0x8c>
 800a192:	2f00      	cmp	r7, #0
 800a194:	da07      	bge.n	800a1a6 <_strtol_l.constprop.0+0xd2>
 800a196:	2322      	movs	r3, #34	; 0x22
 800a198:	4670      	mov	r0, lr
 800a19a:	f8c8 3000 	str.w	r3, [r8]
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d0a4      	beq.n	800a0ec <_strtol_l.constprop.0+0x18>
 800a1a2:	1e69      	subs	r1, r5, #1
 800a1a4:	e005      	b.n	800a1b2 <_strtol_l.constprop.0+0xde>
 800a1a6:	b106      	cbz	r6, 800a1aa <_strtol_l.constprop.0+0xd6>
 800a1a8:	4240      	negs	r0, r0
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d09e      	beq.n	800a0ec <_strtol_l.constprop.0+0x18>
 800a1ae:	2f00      	cmp	r7, #0
 800a1b0:	d1f7      	bne.n	800a1a2 <_strtol_l.constprop.0+0xce>
 800a1b2:	6011      	str	r1, [r2, #0]
 800a1b4:	e79a      	b.n	800a0ec <_strtol_l.constprop.0+0x18>
 800a1b6:	2430      	movs	r4, #48	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1b5      	bne.n	800a128 <_strtol_l.constprop.0+0x54>
 800a1bc:	2308      	movs	r3, #8
 800a1be:	e7b3      	b.n	800a128 <_strtol_l.constprop.0+0x54>
 800a1c0:	2c30      	cmp	r4, #48	; 0x30
 800a1c2:	d0a9      	beq.n	800a118 <_strtol_l.constprop.0+0x44>
 800a1c4:	230a      	movs	r3, #10
 800a1c6:	e7af      	b.n	800a128 <_strtol_l.constprop.0+0x54>
 800a1c8:	0800cdf1 	.word	0x0800cdf1

0800a1cc <strtol>:
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	460a      	mov	r2, r1
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4802      	ldr	r0, [pc, #8]	; (800a1dc <strtol+0x10>)
 800a1d4:	6800      	ldr	r0, [r0, #0]
 800a1d6:	f7ff bf7d 	b.w	800a0d4 <_strtol_l.constprop.0>
 800a1da:	bf00      	nop
 800a1dc:	200000f8 	.word	0x200000f8

0800a1e0 <quorem>:
 800a1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	6903      	ldr	r3, [r0, #16]
 800a1e6:	690c      	ldr	r4, [r1, #16]
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	f2c0 8082 	blt.w	800a2f4 <quorem+0x114>
 800a1f0:	3c01      	subs	r4, #1
 800a1f2:	f100 0514 	add.w	r5, r0, #20
 800a1f6:	f101 0814 	add.w	r8, r1, #20
 800a1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a208:	3301      	adds	r3, #1
 800a20a:	429a      	cmp	r2, r3
 800a20c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a210:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a214:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a218:	d331      	bcc.n	800a27e <quorem+0x9e>
 800a21a:	f04f 0e00 	mov.w	lr, #0
 800a21e:	4640      	mov	r0, r8
 800a220:	46ac      	mov	ip, r5
 800a222:	46f2      	mov	sl, lr
 800a224:	f850 2b04 	ldr.w	r2, [r0], #4
 800a228:	b293      	uxth	r3, r2
 800a22a:	fb06 e303 	mla	r3, r6, r3, lr
 800a22e:	0c12      	lsrs	r2, r2, #16
 800a230:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a234:	b29b      	uxth	r3, r3
 800a236:	fb06 e202 	mla	r2, r6, r2, lr
 800a23a:	ebaa 0303 	sub.w	r3, sl, r3
 800a23e:	f8dc a000 	ldr.w	sl, [ip]
 800a242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a246:	fa1f fa8a 	uxth.w	sl, sl
 800a24a:	4453      	add	r3, sl
 800a24c:	f8dc a000 	ldr.w	sl, [ip]
 800a250:	b292      	uxth	r2, r2
 800a252:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a260:	4581      	cmp	r9, r0
 800a262:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a266:	f84c 3b04 	str.w	r3, [ip], #4
 800a26a:	d2db      	bcs.n	800a224 <quorem+0x44>
 800a26c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a270:	b92b      	cbnz	r3, 800a27e <quorem+0x9e>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	3b04      	subs	r3, #4
 800a276:	429d      	cmp	r5, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	d32f      	bcc.n	800a2dc <quorem+0xfc>
 800a27c:	613c      	str	r4, [r7, #16]
 800a27e:	4638      	mov	r0, r7
 800a280:	f001 f8ce 	bl	800b420 <__mcmp>
 800a284:	2800      	cmp	r0, #0
 800a286:	db25      	blt.n	800a2d4 <quorem+0xf4>
 800a288:	4628      	mov	r0, r5
 800a28a:	f04f 0c00 	mov.w	ip, #0
 800a28e:	3601      	adds	r6, #1
 800a290:	f858 1b04 	ldr.w	r1, [r8], #4
 800a294:	f8d0 e000 	ldr.w	lr, [r0]
 800a298:	b28b      	uxth	r3, r1
 800a29a:	ebac 0303 	sub.w	r3, ip, r3
 800a29e:	fa1f f28e 	uxth.w	r2, lr
 800a2a2:	4413      	add	r3, r2
 800a2a4:	0c0a      	lsrs	r2, r1, #16
 800a2a6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2b4:	45c1      	cmp	r9, r8
 800a2b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2ba:	f840 3b04 	str.w	r3, [r0], #4
 800a2be:	d2e7      	bcs.n	800a290 <quorem+0xb0>
 800a2c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2c8:	b922      	cbnz	r2, 800a2d4 <quorem+0xf4>
 800a2ca:	3b04      	subs	r3, #4
 800a2cc:	429d      	cmp	r5, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	d30a      	bcc.n	800a2e8 <quorem+0x108>
 800a2d2:	613c      	str	r4, [r7, #16]
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	b003      	add	sp, #12
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	6812      	ldr	r2, [r2, #0]
 800a2de:	3b04      	subs	r3, #4
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	d1cb      	bne.n	800a27c <quorem+0x9c>
 800a2e4:	3c01      	subs	r4, #1
 800a2e6:	e7c6      	b.n	800a276 <quorem+0x96>
 800a2e8:	6812      	ldr	r2, [r2, #0]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	d1f0      	bne.n	800a2d2 <quorem+0xf2>
 800a2f0:	3c01      	subs	r4, #1
 800a2f2:	e7eb      	b.n	800a2cc <quorem+0xec>
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	e7ee      	b.n	800a2d6 <quorem+0xf6>

0800a2f8 <_dtoa_r>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	461f      	mov	r7, r3
 800a300:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a302:	b099      	sub	sp, #100	; 0x64
 800a304:	4605      	mov	r5, r0
 800a306:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a30a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a30e:	b974      	cbnz	r4, 800a32e <_dtoa_r+0x36>
 800a310:	2010      	movs	r0, #16
 800a312:	f000 fde3 	bl	800aedc <malloc>
 800a316:	4602      	mov	r2, r0
 800a318:	6268      	str	r0, [r5, #36]	; 0x24
 800a31a:	b920      	cbnz	r0, 800a326 <_dtoa_r+0x2e>
 800a31c:	21ea      	movs	r1, #234	; 0xea
 800a31e:	4ba8      	ldr	r3, [pc, #672]	; (800a5c0 <_dtoa_r+0x2c8>)
 800a320:	48a8      	ldr	r0, [pc, #672]	; (800a5c4 <_dtoa_r+0x2cc>)
 800a322:	f001 fbdd 	bl	800bae0 <__assert_func>
 800a326:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a32a:	6004      	str	r4, [r0, #0]
 800a32c:	60c4      	str	r4, [r0, #12]
 800a32e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a330:	6819      	ldr	r1, [r3, #0]
 800a332:	b151      	cbz	r1, 800a34a <_dtoa_r+0x52>
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	2301      	movs	r3, #1
 800a338:	4093      	lsls	r3, r2
 800a33a:	604a      	str	r2, [r1, #4]
 800a33c:	608b      	str	r3, [r1, #8]
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 fe30 	bl	800afa4 <_Bfree>
 800a344:	2200      	movs	r2, #0
 800a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	1e3b      	subs	r3, r7, #0
 800a34c:	bfaf      	iteee	ge
 800a34e:	2300      	movge	r3, #0
 800a350:	2201      	movlt	r2, #1
 800a352:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a356:	9305      	strlt	r3, [sp, #20]
 800a358:	bfa8      	it	ge
 800a35a:	f8c8 3000 	strge.w	r3, [r8]
 800a35e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a362:	4b99      	ldr	r3, [pc, #612]	; (800a5c8 <_dtoa_r+0x2d0>)
 800a364:	bfb8      	it	lt
 800a366:	f8c8 2000 	strlt.w	r2, [r8]
 800a36a:	ea33 0309 	bics.w	r3, r3, r9
 800a36e:	d119      	bne.n	800a3a4 <_dtoa_r+0xac>
 800a370:	f242 730f 	movw	r3, #9999	; 0x270f
 800a374:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a37c:	4333      	orrs	r3, r6
 800a37e:	f000 857f 	beq.w	800ae80 <_dtoa_r+0xb88>
 800a382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a384:	b953      	cbnz	r3, 800a39c <_dtoa_r+0xa4>
 800a386:	4b91      	ldr	r3, [pc, #580]	; (800a5cc <_dtoa_r+0x2d4>)
 800a388:	e022      	b.n	800a3d0 <_dtoa_r+0xd8>
 800a38a:	4b91      	ldr	r3, [pc, #580]	; (800a5d0 <_dtoa_r+0x2d8>)
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	3308      	adds	r3, #8
 800a390:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	9803      	ldr	r0, [sp, #12]
 800a396:	b019      	add	sp, #100	; 0x64
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	4b8b      	ldr	r3, [pc, #556]	; (800a5cc <_dtoa_r+0x2d4>)
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	3303      	adds	r3, #3
 800a3a2:	e7f5      	b.n	800a390 <_dtoa_r+0x98>
 800a3a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a3a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a3ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f7f6 faf8 	bl	80009a8 <__aeabi_dcmpeq>
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	b158      	cbz	r0, 800a3d4 <_dtoa_r+0xdc>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8558 	beq.w	800ae7a <_dtoa_r+0xb82>
 800a3ca:	4882      	ldr	r0, [pc, #520]	; (800a5d4 <_dtoa_r+0x2dc>)
 800a3cc:	6018      	str	r0, [r3, #0]
 800a3ce:	1e43      	subs	r3, r0, #1
 800a3d0:	9303      	str	r3, [sp, #12]
 800a3d2:	e7df      	b.n	800a394 <_dtoa_r+0x9c>
 800a3d4:	ab16      	add	r3, sp, #88	; 0x58
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	ab17      	add	r3, sp, #92	; 0x5c
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4628      	mov	r0, r5
 800a3de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3e2:	f001 f8c5 	bl	800b570 <__d2b>
 800a3e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a3ea:	4683      	mov	fp, r0
 800a3ec:	2c00      	cmp	r4, #0
 800a3ee:	d07f      	beq.n	800a4f0 <_dtoa_r+0x1f8>
 800a3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a3fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a402:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a406:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a40a:	2200      	movs	r2, #0
 800a40c:	4b72      	ldr	r3, [pc, #456]	; (800a5d8 <_dtoa_r+0x2e0>)
 800a40e:	f7f5 feab 	bl	8000168 <__aeabi_dsub>
 800a412:	a365      	add	r3, pc, #404	; (adr r3, 800a5a8 <_dtoa_r+0x2b0>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	a364      	add	r3, pc, #400	; (adr r3, 800a5b0 <_dtoa_r+0x2b8>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	f7f5 fea3 	bl	800016c <__adddf3>
 800a426:	4606      	mov	r6, r0
 800a428:	4620      	mov	r0, r4
 800a42a:	460f      	mov	r7, r1
 800a42c:	f7f5 ffea 	bl	8000404 <__aeabi_i2d>
 800a430:	a361      	add	r3, pc, #388	; (adr r3, 800a5b8 <_dtoa_r+0x2c0>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f6 f84f 	bl	80004d8 <__aeabi_dmul>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4630      	mov	r0, r6
 800a440:	4639      	mov	r1, r7
 800a442:	f7f5 fe93 	bl	800016c <__adddf3>
 800a446:	4606      	mov	r6, r0
 800a448:	460f      	mov	r7, r1
 800a44a:	f7f6 faf5 	bl	8000a38 <__aeabi_d2iz>
 800a44e:	2200      	movs	r2, #0
 800a450:	4682      	mov	sl, r0
 800a452:	2300      	movs	r3, #0
 800a454:	4630      	mov	r0, r6
 800a456:	4639      	mov	r1, r7
 800a458:	f7f6 fab0 	bl	80009bc <__aeabi_dcmplt>
 800a45c:	b148      	cbz	r0, 800a472 <_dtoa_r+0x17a>
 800a45e:	4650      	mov	r0, sl
 800a460:	f7f5 ffd0 	bl	8000404 <__aeabi_i2d>
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	f7f6 fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800a46c:	b908      	cbnz	r0, 800a472 <_dtoa_r+0x17a>
 800a46e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a472:	f1ba 0f16 	cmp.w	sl, #22
 800a476:	d858      	bhi.n	800a52a <_dtoa_r+0x232>
 800a478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a47c:	4b57      	ldr	r3, [pc, #348]	; (800a5dc <_dtoa_r+0x2e4>)
 800a47e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f6 fa99 	bl	80009bc <__aeabi_dcmplt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d04f      	beq.n	800a52e <_dtoa_r+0x236>
 800a48e:	2300      	movs	r3, #0
 800a490:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a494:	930f      	str	r3, [sp, #60]	; 0x3c
 800a496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a498:	1b1c      	subs	r4, r3, r4
 800a49a:	1e63      	subs	r3, r4, #1
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	bf49      	itett	mi
 800a4a0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a4a4:	2300      	movpl	r3, #0
 800a4a6:	9306      	strmi	r3, [sp, #24]
 800a4a8:	2300      	movmi	r3, #0
 800a4aa:	bf54      	ite	pl
 800a4ac:	9306      	strpl	r3, [sp, #24]
 800a4ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a4b0:	f1ba 0f00 	cmp.w	sl, #0
 800a4b4:	db3d      	blt.n	800a532 <_dtoa_r+0x23a>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a4bc:	4453      	add	r3, sl
 800a4be:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4c6:	2b09      	cmp	r3, #9
 800a4c8:	f200 808c 	bhi.w	800a5e4 <_dtoa_r+0x2ec>
 800a4cc:	2b05      	cmp	r3, #5
 800a4ce:	bfc4      	itt	gt
 800a4d0:	3b04      	subgt	r3, #4
 800a4d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4d6:	bfc8      	it	gt
 800a4d8:	2400      	movgt	r4, #0
 800a4da:	f1a3 0302 	sub.w	r3, r3, #2
 800a4de:	bfd8      	it	le
 800a4e0:	2401      	movle	r4, #1
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	f200 808a 	bhi.w	800a5fc <_dtoa_r+0x304>
 800a4e8:	e8df f003 	tbb	[pc, r3]
 800a4ec:	5b4d4f2d 	.word	0x5b4d4f2d
 800a4f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a4f4:	441c      	add	r4, r3
 800a4f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	bfc3      	ittte	gt
 800a4fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a502:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a506:	fa09 f303 	lslgt.w	r3, r9, r3
 800a50a:	f1c3 0320 	rsble	r3, r3, #32
 800a50e:	bfc6      	itte	gt
 800a510:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a514:	4318      	orrgt	r0, r3
 800a516:	fa06 f003 	lslle.w	r0, r6, r3
 800a51a:	f7f5 ff63 	bl	80003e4 <__aeabi_ui2d>
 800a51e:	2301      	movs	r3, #1
 800a520:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a524:	3c01      	subs	r4, #1
 800a526:	9313      	str	r3, [sp, #76]	; 0x4c
 800a528:	e76f      	b.n	800a40a <_dtoa_r+0x112>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7b2      	b.n	800a494 <_dtoa_r+0x19c>
 800a52e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a530:	e7b1      	b.n	800a496 <_dtoa_r+0x19e>
 800a532:	9b06      	ldr	r3, [sp, #24]
 800a534:	eba3 030a 	sub.w	r3, r3, sl
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	f1ca 0300 	rsb	r3, sl, #0
 800a53e:	930a      	str	r3, [sp, #40]	; 0x28
 800a540:	2300      	movs	r3, #0
 800a542:	930e      	str	r3, [sp, #56]	; 0x38
 800a544:	e7be      	b.n	800a4c4 <_dtoa_r+0x1cc>
 800a546:	2300      	movs	r3, #0
 800a548:	930b      	str	r3, [sp, #44]	; 0x2c
 800a54a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dc58      	bgt.n	800a602 <_dtoa_r+0x30a>
 800a550:	f04f 0901 	mov.w	r9, #1
 800a554:	464b      	mov	r3, r9
 800a556:	f8cd 9020 	str.w	r9, [sp, #32]
 800a55a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a55e:	2200      	movs	r2, #0
 800a560:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a562:	6042      	str	r2, [r0, #4]
 800a564:	2204      	movs	r2, #4
 800a566:	f102 0614 	add.w	r6, r2, #20
 800a56a:	429e      	cmp	r6, r3
 800a56c:	6841      	ldr	r1, [r0, #4]
 800a56e:	d94e      	bls.n	800a60e <_dtoa_r+0x316>
 800a570:	4628      	mov	r0, r5
 800a572:	f000 fcd7 	bl	800af24 <_Balloc>
 800a576:	9003      	str	r0, [sp, #12]
 800a578:	2800      	cmp	r0, #0
 800a57a:	d14c      	bne.n	800a616 <_dtoa_r+0x31e>
 800a57c:	4602      	mov	r2, r0
 800a57e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a582:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <_dtoa_r+0x2e8>)
 800a584:	e6cc      	b.n	800a320 <_dtoa_r+0x28>
 800a586:	2301      	movs	r3, #1
 800a588:	e7de      	b.n	800a548 <_dtoa_r+0x250>
 800a58a:	2300      	movs	r3, #0
 800a58c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a58e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a590:	eb0a 0903 	add.w	r9, sl, r3
 800a594:	f109 0301 	add.w	r3, r9, #1
 800a598:	2b01      	cmp	r3, #1
 800a59a:	9308      	str	r3, [sp, #32]
 800a59c:	bfb8      	it	lt
 800a59e:	2301      	movlt	r3, #1
 800a5a0:	e7dd      	b.n	800a55e <_dtoa_r+0x266>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e7f2      	b.n	800a58c <_dtoa_r+0x294>
 800a5a6:	bf00      	nop
 800a5a8:	636f4361 	.word	0x636f4361
 800a5ac:	3fd287a7 	.word	0x3fd287a7
 800a5b0:	8b60c8b3 	.word	0x8b60c8b3
 800a5b4:	3fc68a28 	.word	0x3fc68a28
 800a5b8:	509f79fb 	.word	0x509f79fb
 800a5bc:	3fd34413 	.word	0x3fd34413
 800a5c0:	0800cefe 	.word	0x0800cefe
 800a5c4:	0800cf15 	.word	0x0800cf15
 800a5c8:	7ff00000 	.word	0x7ff00000
 800a5cc:	0800cefa 	.word	0x0800cefa
 800a5d0:	0800cef1 	.word	0x0800cef1
 800a5d4:	0800cdcd 	.word	0x0800cdcd
 800a5d8:	3ff80000 	.word	0x3ff80000
 800a5dc:	0800d008 	.word	0x0800d008
 800a5e0:	0800cf70 	.word	0x0800cf70
 800a5e4:	2401      	movs	r4, #1
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5ea:	9322      	str	r3, [sp, #136]	; 0x88
 800a5ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2312      	movs	r3, #18
 800a5f4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a5f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a5fa:	e7b0      	b.n	800a55e <_dtoa_r+0x266>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a600:	e7f4      	b.n	800a5ec <_dtoa_r+0x2f4>
 800a602:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a606:	464b      	mov	r3, r9
 800a608:	f8cd 9020 	str.w	r9, [sp, #32]
 800a60c:	e7a7      	b.n	800a55e <_dtoa_r+0x266>
 800a60e:	3101      	adds	r1, #1
 800a610:	6041      	str	r1, [r0, #4]
 800a612:	0052      	lsls	r2, r2, #1
 800a614:	e7a7      	b.n	800a566 <_dtoa_r+0x26e>
 800a616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a618:	9a03      	ldr	r2, [sp, #12]
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	2b0e      	cmp	r3, #14
 800a620:	f200 80a8 	bhi.w	800a774 <_dtoa_r+0x47c>
 800a624:	2c00      	cmp	r4, #0
 800a626:	f000 80a5 	beq.w	800a774 <_dtoa_r+0x47c>
 800a62a:	f1ba 0f00 	cmp.w	sl, #0
 800a62e:	dd34      	ble.n	800a69a <_dtoa_r+0x3a2>
 800a630:	4a9a      	ldr	r2, [pc, #616]	; (800a89c <_dtoa_r+0x5a4>)
 800a632:	f00a 030f 	and.w	r3, sl, #15
 800a636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a63a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a63e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a642:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a646:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a64a:	d016      	beq.n	800a67a <_dtoa_r+0x382>
 800a64c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a650:	4b93      	ldr	r3, [pc, #588]	; (800a8a0 <_dtoa_r+0x5a8>)
 800a652:	2703      	movs	r7, #3
 800a654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a658:	f7f6 f868 	bl	800072c <__aeabi_ddiv>
 800a65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a660:	f004 040f 	and.w	r4, r4, #15
 800a664:	4e8e      	ldr	r6, [pc, #568]	; (800a8a0 <_dtoa_r+0x5a8>)
 800a666:	b954      	cbnz	r4, 800a67e <_dtoa_r+0x386>
 800a668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a670:	f7f6 f85c 	bl	800072c <__aeabi_ddiv>
 800a674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a678:	e029      	b.n	800a6ce <_dtoa_r+0x3d6>
 800a67a:	2702      	movs	r7, #2
 800a67c:	e7f2      	b.n	800a664 <_dtoa_r+0x36c>
 800a67e:	07e1      	lsls	r1, r4, #31
 800a680:	d508      	bpl.n	800a694 <_dtoa_r+0x39c>
 800a682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a686:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a68a:	f7f5 ff25 	bl	80004d8 <__aeabi_dmul>
 800a68e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a692:	3701      	adds	r7, #1
 800a694:	1064      	asrs	r4, r4, #1
 800a696:	3608      	adds	r6, #8
 800a698:	e7e5      	b.n	800a666 <_dtoa_r+0x36e>
 800a69a:	f000 80a5 	beq.w	800a7e8 <_dtoa_r+0x4f0>
 800a69e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6a2:	f1ca 0400 	rsb	r4, sl, #0
 800a6a6:	4b7d      	ldr	r3, [pc, #500]	; (800a89c <_dtoa_r+0x5a4>)
 800a6a8:	f004 020f 	and.w	r2, r4, #15
 800a6ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 ff10 	bl	80004d8 <__aeabi_dmul>
 800a6b8:	2702      	movs	r7, #2
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6c0:	4e77      	ldr	r6, [pc, #476]	; (800a8a0 <_dtoa_r+0x5a8>)
 800a6c2:	1124      	asrs	r4, r4, #4
 800a6c4:	2c00      	cmp	r4, #0
 800a6c6:	f040 8084 	bne.w	800a7d2 <_dtoa_r+0x4da>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1d2      	bne.n	800a674 <_dtoa_r+0x37c>
 800a6ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 808b 	beq.w	800a7ec <_dtoa_r+0x4f4>
 800a6d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a6da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a6de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4b6f      	ldr	r3, [pc, #444]	; (800a8a4 <_dtoa_r+0x5ac>)
 800a6e6:	f7f6 f969 	bl	80009bc <__aeabi_dcmplt>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d07e      	beq.n	800a7ec <_dtoa_r+0x4f4>
 800a6ee:	9b08      	ldr	r3, [sp, #32]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d07b      	beq.n	800a7ec <_dtoa_r+0x4f4>
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	dd38      	ble.n	800a76c <_dtoa_r+0x474>
 800a6fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6fe:	2200      	movs	r2, #0
 800a700:	4b69      	ldr	r3, [pc, #420]	; (800a8a8 <_dtoa_r+0x5b0>)
 800a702:	f7f5 fee9 	bl	80004d8 <__aeabi_dmul>
 800a706:	464c      	mov	r4, r9
 800a708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a70c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a710:	3701      	adds	r7, #1
 800a712:	4638      	mov	r0, r7
 800a714:	f7f5 fe76 	bl	8000404 <__aeabi_i2d>
 800a718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a71c:	f7f5 fedc 	bl	80004d8 <__aeabi_dmul>
 800a720:	2200      	movs	r2, #0
 800a722:	4b62      	ldr	r3, [pc, #392]	; (800a8ac <_dtoa_r+0x5b4>)
 800a724:	f7f5 fd22 	bl	800016c <__adddf3>
 800a728:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a72c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a730:	9611      	str	r6, [sp, #68]	; 0x44
 800a732:	2c00      	cmp	r4, #0
 800a734:	d15d      	bne.n	800a7f2 <_dtoa_r+0x4fa>
 800a736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a73a:	2200      	movs	r2, #0
 800a73c:	4b5c      	ldr	r3, [pc, #368]	; (800a8b0 <_dtoa_r+0x5b8>)
 800a73e:	f7f5 fd13 	bl	8000168 <__aeabi_dsub>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a74a:	4633      	mov	r3, r6
 800a74c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a74e:	f7f6 f953 	bl	80009f8 <__aeabi_dcmpgt>
 800a752:	2800      	cmp	r0, #0
 800a754:	f040 829c 	bne.w	800ac90 <_dtoa_r+0x998>
 800a758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a75c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a75e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a762:	f7f6 f92b 	bl	80009bc <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f040 8290 	bne.w	800ac8c <_dtoa_r+0x994>
 800a76c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a770:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a776:	2b00      	cmp	r3, #0
 800a778:	f2c0 8152 	blt.w	800aa20 <_dtoa_r+0x728>
 800a77c:	f1ba 0f0e 	cmp.w	sl, #14
 800a780:	f300 814e 	bgt.w	800aa20 <_dtoa_r+0x728>
 800a784:	4b45      	ldr	r3, [pc, #276]	; (800a89c <_dtoa_r+0x5a4>)
 800a786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a78a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a78e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a794:	2b00      	cmp	r3, #0
 800a796:	f280 80db 	bge.w	800a950 <_dtoa_r+0x658>
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f300 80d7 	bgt.w	800a950 <_dtoa_r+0x658>
 800a7a2:	f040 8272 	bne.w	800ac8a <_dtoa_r+0x992>
 800a7a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4b40      	ldr	r3, [pc, #256]	; (800a8b0 <_dtoa_r+0x5b8>)
 800a7ae:	f7f5 fe93 	bl	80004d8 <__aeabi_dmul>
 800a7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b6:	f7f6 f915 	bl	80009e4 <__aeabi_dcmpge>
 800a7ba:	9c08      	ldr	r4, [sp, #32]
 800a7bc:	4626      	mov	r6, r4
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f040 8248 	bne.w	800ac54 <_dtoa_r+0x95c>
 800a7c4:	2331      	movs	r3, #49	; 0x31
 800a7c6:	9f03      	ldr	r7, [sp, #12]
 800a7c8:	f10a 0a01 	add.w	sl, sl, #1
 800a7cc:	f807 3b01 	strb.w	r3, [r7], #1
 800a7d0:	e244      	b.n	800ac5c <_dtoa_r+0x964>
 800a7d2:	07e2      	lsls	r2, r4, #31
 800a7d4:	d505      	bpl.n	800a7e2 <_dtoa_r+0x4ea>
 800a7d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7da:	f7f5 fe7d 	bl	80004d8 <__aeabi_dmul>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	3701      	adds	r7, #1
 800a7e2:	1064      	asrs	r4, r4, #1
 800a7e4:	3608      	adds	r6, #8
 800a7e6:	e76d      	b.n	800a6c4 <_dtoa_r+0x3cc>
 800a7e8:	2702      	movs	r7, #2
 800a7ea:	e770      	b.n	800a6ce <_dtoa_r+0x3d6>
 800a7ec:	46d0      	mov	r8, sl
 800a7ee:	9c08      	ldr	r4, [sp, #32]
 800a7f0:	e78f      	b.n	800a712 <_dtoa_r+0x41a>
 800a7f2:	9903      	ldr	r1, [sp, #12]
 800a7f4:	4b29      	ldr	r3, [pc, #164]	; (800a89c <_dtoa_r+0x5a4>)
 800a7f6:	4421      	add	r1, r4
 800a7f8:	9112      	str	r1, [sp, #72]	; 0x48
 800a7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a800:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a804:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a808:	2900      	cmp	r1, #0
 800a80a:	d055      	beq.n	800a8b8 <_dtoa_r+0x5c0>
 800a80c:	2000      	movs	r0, #0
 800a80e:	4929      	ldr	r1, [pc, #164]	; (800a8b4 <_dtoa_r+0x5bc>)
 800a810:	f7f5 ff8c 	bl	800072c <__aeabi_ddiv>
 800a814:	463b      	mov	r3, r7
 800a816:	4632      	mov	r2, r6
 800a818:	f7f5 fca6 	bl	8000168 <__aeabi_dsub>
 800a81c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a820:	9f03      	ldr	r7, [sp, #12]
 800a822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a826:	f7f6 f907 	bl	8000a38 <__aeabi_d2iz>
 800a82a:	4604      	mov	r4, r0
 800a82c:	f7f5 fdea 	bl	8000404 <__aeabi_i2d>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a838:	f7f5 fc96 	bl	8000168 <__aeabi_dsub>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	3430      	adds	r4, #48	; 0x30
 800a842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a84a:	f807 4b01 	strb.w	r4, [r7], #1
 800a84e:	f7f6 f8b5 	bl	80009bc <__aeabi_dcmplt>
 800a852:	2800      	cmp	r0, #0
 800a854:	d174      	bne.n	800a940 <_dtoa_r+0x648>
 800a856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85a:	2000      	movs	r0, #0
 800a85c:	4911      	ldr	r1, [pc, #68]	; (800a8a4 <_dtoa_r+0x5ac>)
 800a85e:	f7f5 fc83 	bl	8000168 <__aeabi_dsub>
 800a862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a866:	f7f6 f8a9 	bl	80009bc <__aeabi_dcmplt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f040 80b7 	bne.w	800a9de <_dtoa_r+0x6e6>
 800a870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a872:	429f      	cmp	r7, r3
 800a874:	f43f af7a 	beq.w	800a76c <_dtoa_r+0x474>
 800a878:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a87c:	2200      	movs	r2, #0
 800a87e:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <_dtoa_r+0x5b0>)
 800a880:	f7f5 fe2a 	bl	80004d8 <__aeabi_dmul>
 800a884:	2200      	movs	r2, #0
 800a886:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a88a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a88e:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <_dtoa_r+0x5b0>)
 800a890:	f7f5 fe22 	bl	80004d8 <__aeabi_dmul>
 800a894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a898:	e7c3      	b.n	800a822 <_dtoa_r+0x52a>
 800a89a:	bf00      	nop
 800a89c:	0800d008 	.word	0x0800d008
 800a8a0:	0800cfe0 	.word	0x0800cfe0
 800a8a4:	3ff00000 	.word	0x3ff00000
 800a8a8:	40240000 	.word	0x40240000
 800a8ac:	401c0000 	.word	0x401c0000
 800a8b0:	40140000 	.word	0x40140000
 800a8b4:	3fe00000 	.word	0x3fe00000
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f5 fe0c 	bl	80004d8 <__aeabi_dmul>
 800a8c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a8c6:	9c03      	ldr	r4, [sp, #12]
 800a8c8:	9314      	str	r3, [sp, #80]	; 0x50
 800a8ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ce:	f7f6 f8b3 	bl	8000a38 <__aeabi_d2iz>
 800a8d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a8d4:	f7f5 fd96 	bl	8000404 <__aeabi_i2d>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8e0:	f7f5 fc42 	bl	8000168 <__aeabi_dsub>
 800a8e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	3330      	adds	r3, #48	; 0x30
 800a8ea:	f804 3b01 	strb.w	r3, [r4], #1
 800a8ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	429c      	cmp	r4, r3
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	d124      	bne.n	800a944 <_dtoa_r+0x64c>
 800a8fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8fe:	4bb0      	ldr	r3, [pc, #704]	; (800abc0 <_dtoa_r+0x8c8>)
 800a900:	f7f5 fc34 	bl	800016c <__adddf3>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f6 f874 	bl	80009f8 <__aeabi_dcmpgt>
 800a910:	2800      	cmp	r0, #0
 800a912:	d163      	bne.n	800a9dc <_dtoa_r+0x6e4>
 800a914:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a918:	2000      	movs	r0, #0
 800a91a:	49a9      	ldr	r1, [pc, #676]	; (800abc0 <_dtoa_r+0x8c8>)
 800a91c:	f7f5 fc24 	bl	8000168 <__aeabi_dsub>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4630      	mov	r0, r6
 800a926:	4639      	mov	r1, r7
 800a928:	f7f6 f848 	bl	80009bc <__aeabi_dcmplt>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f43f af1d 	beq.w	800a76c <_dtoa_r+0x474>
 800a932:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a934:	1e7b      	subs	r3, r7, #1
 800a936:	9314      	str	r3, [sp, #80]	; 0x50
 800a938:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a93c:	2b30      	cmp	r3, #48	; 0x30
 800a93e:	d0f8      	beq.n	800a932 <_dtoa_r+0x63a>
 800a940:	46c2      	mov	sl, r8
 800a942:	e03b      	b.n	800a9bc <_dtoa_r+0x6c4>
 800a944:	4b9f      	ldr	r3, [pc, #636]	; (800abc4 <_dtoa_r+0x8cc>)
 800a946:	f7f5 fdc7 	bl	80004d8 <__aeabi_dmul>
 800a94a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a94e:	e7bc      	b.n	800a8ca <_dtoa_r+0x5d2>
 800a950:	9f03      	ldr	r7, [sp, #12]
 800a952:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f5 fee5 	bl	800072c <__aeabi_ddiv>
 800a962:	f7f6 f869 	bl	8000a38 <__aeabi_d2iz>
 800a966:	4604      	mov	r4, r0
 800a968:	f7f5 fd4c 	bl	8000404 <__aeabi_i2d>
 800a96c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a970:	f7f5 fdb2 	bl	80004d8 <__aeabi_dmul>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7f5 fbf4 	bl	8000168 <__aeabi_dsub>
 800a980:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a984:	f807 6b01 	strb.w	r6, [r7], #1
 800a988:	9e03      	ldr	r6, [sp, #12]
 800a98a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a98e:	1bbe      	subs	r6, r7, r6
 800a990:	45b4      	cmp	ip, r6
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	d136      	bne.n	800aa06 <_dtoa_r+0x70e>
 800a998:	f7f5 fbe8 	bl	800016c <__adddf3>
 800a99c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	4689      	mov	r9, r1
 800a9a4:	f7f6 f828 	bl	80009f8 <__aeabi_dcmpgt>
 800a9a8:	bb58      	cbnz	r0, 800aa02 <_dtoa_r+0x70a>
 800a9aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fff9 	bl	80009a8 <__aeabi_dcmpeq>
 800a9b6:	b108      	cbz	r0, 800a9bc <_dtoa_r+0x6c4>
 800a9b8:	07e1      	lsls	r1, r4, #31
 800a9ba:	d422      	bmi.n	800aa02 <_dtoa_r+0x70a>
 800a9bc:	4628      	mov	r0, r5
 800a9be:	4659      	mov	r1, fp
 800a9c0:	f000 faf0 	bl	800afa4 <_Bfree>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	703b      	strb	r3, [r7, #0]
 800a9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9ca:	f10a 0001 	add.w	r0, sl, #1
 800a9ce:	6018      	str	r0, [r3, #0]
 800a9d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f43f acde 	beq.w	800a394 <_dtoa_r+0x9c>
 800a9d8:	601f      	str	r7, [r3, #0]
 800a9da:	e4db      	b.n	800a394 <_dtoa_r+0x9c>
 800a9dc:	4627      	mov	r7, r4
 800a9de:	463b      	mov	r3, r7
 800a9e0:	461f      	mov	r7, r3
 800a9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9e6:	2a39      	cmp	r2, #57	; 0x39
 800a9e8:	d107      	bne.n	800a9fa <_dtoa_r+0x702>
 800a9ea:	9a03      	ldr	r2, [sp, #12]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d1f7      	bne.n	800a9e0 <_dtoa_r+0x6e8>
 800a9f0:	2230      	movs	r2, #48	; 0x30
 800a9f2:	9903      	ldr	r1, [sp, #12]
 800a9f4:	f108 0801 	add.w	r8, r8, #1
 800a9f8:	700a      	strb	r2, [r1, #0]
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	3201      	adds	r2, #1
 800a9fe:	701a      	strb	r2, [r3, #0]
 800aa00:	e79e      	b.n	800a940 <_dtoa_r+0x648>
 800aa02:	46d0      	mov	r8, sl
 800aa04:	e7eb      	b.n	800a9de <_dtoa_r+0x6e6>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4b6e      	ldr	r3, [pc, #440]	; (800abc4 <_dtoa_r+0x8cc>)
 800aa0a:	f7f5 fd65 	bl	80004d8 <__aeabi_dmul>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	4680      	mov	r8, r0
 800aa14:	4689      	mov	r9, r1
 800aa16:	f7f5 ffc7 	bl	80009a8 <__aeabi_dcmpeq>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d09b      	beq.n	800a956 <_dtoa_r+0x65e>
 800aa1e:	e7cd      	b.n	800a9bc <_dtoa_r+0x6c4>
 800aa20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa22:	2a00      	cmp	r2, #0
 800aa24:	f000 80d0 	beq.w	800abc8 <_dtoa_r+0x8d0>
 800aa28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aa2a:	2a01      	cmp	r2, #1
 800aa2c:	f300 80ae 	bgt.w	800ab8c <_dtoa_r+0x894>
 800aa30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	f000 80a6 	beq.w	800ab84 <_dtoa_r+0x88c>
 800aa38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa3e:	9f06      	ldr	r7, [sp, #24]
 800aa40:	9a06      	ldr	r2, [sp, #24]
 800aa42:	2101      	movs	r1, #1
 800aa44:	441a      	add	r2, r3
 800aa46:	9206      	str	r2, [sp, #24]
 800aa48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	441a      	add	r2, r3
 800aa4e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa50:	f000 fb5e 	bl	800b110 <__i2b>
 800aa54:	4606      	mov	r6, r0
 800aa56:	2f00      	cmp	r7, #0
 800aa58:	dd0c      	ble.n	800aa74 <_dtoa_r+0x77c>
 800aa5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd09      	ble.n	800aa74 <_dtoa_r+0x77c>
 800aa60:	42bb      	cmp	r3, r7
 800aa62:	bfa8      	it	ge
 800aa64:	463b      	movge	r3, r7
 800aa66:	9a06      	ldr	r2, [sp, #24]
 800aa68:	1aff      	subs	r7, r7, r3
 800aa6a:	1ad2      	subs	r2, r2, r3
 800aa6c:	9206      	str	r2, [sp, #24]
 800aa6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	9309      	str	r3, [sp, #36]	; 0x24
 800aa74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa76:	b1f3      	cbz	r3, 800aab6 <_dtoa_r+0x7be>
 800aa78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 80a8 	beq.w	800abd0 <_dtoa_r+0x8d8>
 800aa80:	2c00      	cmp	r4, #0
 800aa82:	dd10      	ble.n	800aaa6 <_dtoa_r+0x7ae>
 800aa84:	4631      	mov	r1, r6
 800aa86:	4622      	mov	r2, r4
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f000 fbff 	bl	800b28c <__pow5mult>
 800aa8e:	465a      	mov	r2, fp
 800aa90:	4601      	mov	r1, r0
 800aa92:	4606      	mov	r6, r0
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 fb51 	bl	800b13c <__multiply>
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	4659      	mov	r1, fp
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 fa80 	bl	800afa4 <_Bfree>
 800aaa4:	46c3      	mov	fp, r8
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	1b1a      	subs	r2, r3, r4
 800aaaa:	d004      	beq.n	800aab6 <_dtoa_r+0x7be>
 800aaac:	4659      	mov	r1, fp
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 fbec 	bl	800b28c <__pow5mult>
 800aab4:	4683      	mov	fp, r0
 800aab6:	2101      	movs	r1, #1
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 fb29 	bl	800b110 <__i2b>
 800aabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aac0:	4604      	mov	r4, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f340 8086 	ble.w	800abd4 <_dtoa_r+0x8dc>
 800aac8:	461a      	mov	r2, r3
 800aaca:	4601      	mov	r1, r0
 800aacc:	4628      	mov	r0, r5
 800aace:	f000 fbdd 	bl	800b28c <__pow5mult>
 800aad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aad4:	4604      	mov	r4, r0
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	dd7f      	ble.n	800abda <_dtoa_r+0x8e2>
 800aada:	f04f 0800 	mov.w	r8, #0
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aae4:	6918      	ldr	r0, [r3, #16]
 800aae6:	f000 fac5 	bl	800b074 <__hi0bits>
 800aaea:	f1c0 0020 	rsb	r0, r0, #32
 800aaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf0:	4418      	add	r0, r3
 800aaf2:	f010 001f 	ands.w	r0, r0, #31
 800aaf6:	f000 8092 	beq.w	800ac1e <_dtoa_r+0x926>
 800aafa:	f1c0 0320 	rsb	r3, r0, #32
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	f340 808a 	ble.w	800ac18 <_dtoa_r+0x920>
 800ab04:	f1c0 001c 	rsb	r0, r0, #28
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	4407      	add	r7, r0
 800ab0c:	4403      	add	r3, r0
 800ab0e:	9306      	str	r3, [sp, #24]
 800ab10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab12:	4403      	add	r3, r0
 800ab14:	9309      	str	r3, [sp, #36]	; 0x24
 800ab16:	9b06      	ldr	r3, [sp, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dd05      	ble.n	800ab28 <_dtoa_r+0x830>
 800ab1c:	4659      	mov	r1, fp
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 fc0d 	bl	800b340 <__lshift>
 800ab26:	4683      	mov	fp, r0
 800ab28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd05      	ble.n	800ab3a <_dtoa_r+0x842>
 800ab2e:	4621      	mov	r1, r4
 800ab30:	461a      	mov	r2, r3
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 fc04 	bl	800b340 <__lshift>
 800ab38:	4604      	mov	r4, r0
 800ab3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d070      	beq.n	800ac22 <_dtoa_r+0x92a>
 800ab40:	4621      	mov	r1, r4
 800ab42:	4658      	mov	r0, fp
 800ab44:	f000 fc6c 	bl	800b420 <__mcmp>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	da6a      	bge.n	800ac22 <_dtoa_r+0x92a>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4659      	mov	r1, fp
 800ab50:	220a      	movs	r2, #10
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 fa48 	bl	800afe8 <__multadd>
 800ab58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5a:	4683      	mov	fp, r0
 800ab5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8194 	beq.w	800ae8e <_dtoa_r+0xb96>
 800ab66:	4631      	mov	r1, r6
 800ab68:	2300      	movs	r3, #0
 800ab6a:	220a      	movs	r2, #10
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f000 fa3b 	bl	800afe8 <__multadd>
 800ab72:	f1b9 0f00 	cmp.w	r9, #0
 800ab76:	4606      	mov	r6, r0
 800ab78:	f300 8093 	bgt.w	800aca2 <_dtoa_r+0x9aa>
 800ab7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	dc57      	bgt.n	800ac32 <_dtoa_r+0x93a>
 800ab82:	e08e      	b.n	800aca2 <_dtoa_r+0x9aa>
 800ab84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab8a:	e757      	b.n	800aa3c <_dtoa_r+0x744>
 800ab8c:	9b08      	ldr	r3, [sp, #32]
 800ab8e:	1e5c      	subs	r4, r3, #1
 800ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	bfb7      	itett	lt
 800ab96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab98:	1b1c      	subge	r4, r3, r4
 800ab9a:	1ae2      	sublt	r2, r4, r3
 800ab9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ab9e:	bfbe      	ittt	lt
 800aba0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aba2:	189b      	addlt	r3, r3, r2
 800aba4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aba6:	9b08      	ldr	r3, [sp, #32]
 800aba8:	bfb8      	it	lt
 800abaa:	2400      	movlt	r4, #0
 800abac:	2b00      	cmp	r3, #0
 800abae:	bfbb      	ittet	lt
 800abb0:	9b06      	ldrlt	r3, [sp, #24]
 800abb2:	9a08      	ldrlt	r2, [sp, #32]
 800abb4:	9f06      	ldrge	r7, [sp, #24]
 800abb6:	1a9f      	sublt	r7, r3, r2
 800abb8:	bfac      	ite	ge
 800abba:	9b08      	ldrge	r3, [sp, #32]
 800abbc:	2300      	movlt	r3, #0
 800abbe:	e73f      	b.n	800aa40 <_dtoa_r+0x748>
 800abc0:	3fe00000 	.word	0x3fe00000
 800abc4:	40240000 	.word	0x40240000
 800abc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abca:	9f06      	ldr	r7, [sp, #24]
 800abcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800abce:	e742      	b.n	800aa56 <_dtoa_r+0x75e>
 800abd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd2:	e76b      	b.n	800aaac <_dtoa_r+0x7b4>
 800abd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	dc19      	bgt.n	800ac0e <_dtoa_r+0x916>
 800abda:	9b04      	ldr	r3, [sp, #16]
 800abdc:	b9bb      	cbnz	r3, 800ac0e <_dtoa_r+0x916>
 800abde:	9b05      	ldr	r3, [sp, #20]
 800abe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe4:	b99b      	cbnz	r3, 800ac0e <_dtoa_r+0x916>
 800abe6:	9b05      	ldr	r3, [sp, #20]
 800abe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abec:	0d1b      	lsrs	r3, r3, #20
 800abee:	051b      	lsls	r3, r3, #20
 800abf0:	b183      	cbz	r3, 800ac14 <_dtoa_r+0x91c>
 800abf2:	f04f 0801 	mov.w	r8, #1
 800abf6:	9b06      	ldr	r3, [sp, #24]
 800abf8:	3301      	adds	r3, #1
 800abfa:	9306      	str	r3, [sp, #24]
 800abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfe:	3301      	adds	r3, #1
 800ac00:	9309      	str	r3, [sp, #36]	; 0x24
 800ac02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f47f af6a 	bne.w	800aade <_dtoa_r+0x7e6>
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	e76f      	b.n	800aaee <_dtoa_r+0x7f6>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	e7f6      	b.n	800ac02 <_dtoa_r+0x90a>
 800ac14:	4698      	mov	r8, r3
 800ac16:	e7f4      	b.n	800ac02 <_dtoa_r+0x90a>
 800ac18:	f43f af7d 	beq.w	800ab16 <_dtoa_r+0x81e>
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	301c      	adds	r0, #28
 800ac20:	e772      	b.n	800ab08 <_dtoa_r+0x810>
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dc36      	bgt.n	800ac96 <_dtoa_r+0x99e>
 800ac28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	dd33      	ble.n	800ac96 <_dtoa_r+0x99e>
 800ac2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	d10d      	bne.n	800ac54 <_dtoa_r+0x95c>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	2205      	movs	r2, #5
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f9d2 	bl	800afe8 <__multadd>
 800ac44:	4601      	mov	r1, r0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4658      	mov	r0, fp
 800ac4a:	f000 fbe9 	bl	800b420 <__mcmp>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f73f adb8 	bgt.w	800a7c4 <_dtoa_r+0x4cc>
 800ac54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac56:	9f03      	ldr	r7, [sp, #12]
 800ac58:	ea6f 0a03 	mvn.w	sl, r3
 800ac5c:	f04f 0800 	mov.w	r8, #0
 800ac60:	4621      	mov	r1, r4
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f99e 	bl	800afa4 <_Bfree>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	f43f aea7 	beq.w	800a9bc <_dtoa_r+0x6c4>
 800ac6e:	f1b8 0f00 	cmp.w	r8, #0
 800ac72:	d005      	beq.n	800ac80 <_dtoa_r+0x988>
 800ac74:	45b0      	cmp	r8, r6
 800ac76:	d003      	beq.n	800ac80 <_dtoa_r+0x988>
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f000 f992 	bl	800afa4 <_Bfree>
 800ac80:	4631      	mov	r1, r6
 800ac82:	4628      	mov	r0, r5
 800ac84:	f000 f98e 	bl	800afa4 <_Bfree>
 800ac88:	e698      	b.n	800a9bc <_dtoa_r+0x6c4>
 800ac8a:	2400      	movs	r4, #0
 800ac8c:	4626      	mov	r6, r4
 800ac8e:	e7e1      	b.n	800ac54 <_dtoa_r+0x95c>
 800ac90:	46c2      	mov	sl, r8
 800ac92:	4626      	mov	r6, r4
 800ac94:	e596      	b.n	800a7c4 <_dtoa_r+0x4cc>
 800ac96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80fd 	beq.w	800ae9c <_dtoa_r+0xba4>
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	dd05      	ble.n	800acb2 <_dtoa_r+0x9ba>
 800aca6:	4631      	mov	r1, r6
 800aca8:	463a      	mov	r2, r7
 800acaa:	4628      	mov	r0, r5
 800acac:	f000 fb48 	bl	800b340 <__lshift>
 800acb0:	4606      	mov	r6, r0
 800acb2:	f1b8 0f00 	cmp.w	r8, #0
 800acb6:	d05c      	beq.n	800ad72 <_dtoa_r+0xa7a>
 800acb8:	4628      	mov	r0, r5
 800acba:	6871      	ldr	r1, [r6, #4]
 800acbc:	f000 f932 	bl	800af24 <_Balloc>
 800acc0:	4607      	mov	r7, r0
 800acc2:	b928      	cbnz	r0, 800acd0 <_dtoa_r+0x9d8>
 800acc4:	4602      	mov	r2, r0
 800acc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acca:	4b7f      	ldr	r3, [pc, #508]	; (800aec8 <_dtoa_r+0xbd0>)
 800accc:	f7ff bb28 	b.w	800a320 <_dtoa_r+0x28>
 800acd0:	6932      	ldr	r2, [r6, #16]
 800acd2:	f106 010c 	add.w	r1, r6, #12
 800acd6:	3202      	adds	r2, #2
 800acd8:	0092      	lsls	r2, r2, #2
 800acda:	300c      	adds	r0, #12
 800acdc:	f000 f914 	bl	800af08 <memcpy>
 800ace0:	2201      	movs	r2, #1
 800ace2:	4639      	mov	r1, r7
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 fb2b 	bl	800b340 <__lshift>
 800acea:	46b0      	mov	r8, r6
 800acec:	4606      	mov	r6, r0
 800acee:	9b03      	ldr	r3, [sp, #12]
 800acf0:	3301      	adds	r3, #1
 800acf2:	9308      	str	r3, [sp, #32]
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	444b      	add	r3, r9
 800acf8:	930a      	str	r3, [sp, #40]	; 0x28
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	9309      	str	r3, [sp, #36]	; 0x24
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	4621      	mov	r1, r4
 800ad06:	3b01      	subs	r3, #1
 800ad08:	4658      	mov	r0, fp
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	f7ff fa68 	bl	800a1e0 <quorem>
 800ad10:	4603      	mov	r3, r0
 800ad12:	4641      	mov	r1, r8
 800ad14:	3330      	adds	r3, #48	; 0x30
 800ad16:	9006      	str	r0, [sp, #24]
 800ad18:	4658      	mov	r0, fp
 800ad1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad1c:	f000 fb80 	bl	800b420 <__mcmp>
 800ad20:	4632      	mov	r2, r6
 800ad22:	4681      	mov	r9, r0
 800ad24:	4621      	mov	r1, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	f000 fb96 	bl	800b458 <__mdiff>
 800ad2c:	68c2      	ldr	r2, [r0, #12]
 800ad2e:	4607      	mov	r7, r0
 800ad30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad32:	bb02      	cbnz	r2, 800ad76 <_dtoa_r+0xa7e>
 800ad34:	4601      	mov	r1, r0
 800ad36:	4658      	mov	r0, fp
 800ad38:	f000 fb72 	bl	800b420 <__mcmp>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad40:	4639      	mov	r1, r7
 800ad42:	4628      	mov	r0, r5
 800ad44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ad48:	f000 f92c 	bl	800afa4 <_Bfree>
 800ad4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad50:	9f08      	ldr	r7, [sp, #32]
 800ad52:	ea43 0102 	orr.w	r1, r3, r2
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	430b      	orrs	r3, r1
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5c:	d10d      	bne.n	800ad7a <_dtoa_r+0xa82>
 800ad5e:	2b39      	cmp	r3, #57	; 0x39
 800ad60:	d029      	beq.n	800adb6 <_dtoa_r+0xabe>
 800ad62:	f1b9 0f00 	cmp.w	r9, #0
 800ad66:	dd01      	ble.n	800ad6c <_dtoa_r+0xa74>
 800ad68:	9b06      	ldr	r3, [sp, #24]
 800ad6a:	3331      	adds	r3, #49	; 0x31
 800ad6c:	9a04      	ldr	r2, [sp, #16]
 800ad6e:	7013      	strb	r3, [r2, #0]
 800ad70:	e776      	b.n	800ac60 <_dtoa_r+0x968>
 800ad72:	4630      	mov	r0, r6
 800ad74:	e7b9      	b.n	800acea <_dtoa_r+0x9f2>
 800ad76:	2201      	movs	r2, #1
 800ad78:	e7e2      	b.n	800ad40 <_dtoa_r+0xa48>
 800ad7a:	f1b9 0f00 	cmp.w	r9, #0
 800ad7e:	db06      	blt.n	800ad8e <_dtoa_r+0xa96>
 800ad80:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ad82:	ea41 0909 	orr.w	r9, r1, r9
 800ad86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad88:	ea59 0101 	orrs.w	r1, r9, r1
 800ad8c:	d120      	bne.n	800add0 <_dtoa_r+0xad8>
 800ad8e:	2a00      	cmp	r2, #0
 800ad90:	ddec      	ble.n	800ad6c <_dtoa_r+0xa74>
 800ad92:	4659      	mov	r1, fp
 800ad94:	2201      	movs	r2, #1
 800ad96:	4628      	mov	r0, r5
 800ad98:	9308      	str	r3, [sp, #32]
 800ad9a:	f000 fad1 	bl	800b340 <__lshift>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4683      	mov	fp, r0
 800ada2:	f000 fb3d 	bl	800b420 <__mcmp>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	dc02      	bgt.n	800adb2 <_dtoa_r+0xaba>
 800adac:	d1de      	bne.n	800ad6c <_dtoa_r+0xa74>
 800adae:	07da      	lsls	r2, r3, #31
 800adb0:	d5dc      	bpl.n	800ad6c <_dtoa_r+0xa74>
 800adb2:	2b39      	cmp	r3, #57	; 0x39
 800adb4:	d1d8      	bne.n	800ad68 <_dtoa_r+0xa70>
 800adb6:	2339      	movs	r3, #57	; 0x39
 800adb8:	9a04      	ldr	r2, [sp, #16]
 800adba:	7013      	strb	r3, [r2, #0]
 800adbc:	463b      	mov	r3, r7
 800adbe:	461f      	mov	r7, r3
 800adc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	2a39      	cmp	r2, #57	; 0x39
 800adc8:	d050      	beq.n	800ae6c <_dtoa_r+0xb74>
 800adca:	3201      	adds	r2, #1
 800adcc:	701a      	strb	r2, [r3, #0]
 800adce:	e747      	b.n	800ac60 <_dtoa_r+0x968>
 800add0:	2a00      	cmp	r2, #0
 800add2:	dd03      	ble.n	800addc <_dtoa_r+0xae4>
 800add4:	2b39      	cmp	r3, #57	; 0x39
 800add6:	d0ee      	beq.n	800adb6 <_dtoa_r+0xabe>
 800add8:	3301      	adds	r3, #1
 800adda:	e7c7      	b.n	800ad6c <_dtoa_r+0xa74>
 800addc:	9a08      	ldr	r2, [sp, #32]
 800adde:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ade0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ade4:	428a      	cmp	r2, r1
 800ade6:	d02a      	beq.n	800ae3e <_dtoa_r+0xb46>
 800ade8:	4659      	mov	r1, fp
 800adea:	2300      	movs	r3, #0
 800adec:	220a      	movs	r2, #10
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 f8fa 	bl	800afe8 <__multadd>
 800adf4:	45b0      	cmp	r8, r6
 800adf6:	4683      	mov	fp, r0
 800adf8:	f04f 0300 	mov.w	r3, #0
 800adfc:	f04f 020a 	mov.w	r2, #10
 800ae00:	4641      	mov	r1, r8
 800ae02:	4628      	mov	r0, r5
 800ae04:	d107      	bne.n	800ae16 <_dtoa_r+0xb1e>
 800ae06:	f000 f8ef 	bl	800afe8 <__multadd>
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	3301      	adds	r3, #1
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	e775      	b.n	800ad02 <_dtoa_r+0xa0a>
 800ae16:	f000 f8e7 	bl	800afe8 <__multadd>
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	2300      	movs	r3, #0
 800ae20:	220a      	movs	r2, #10
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 f8e0 	bl	800afe8 <__multadd>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	e7f0      	b.n	800ae0e <_dtoa_r+0xb16>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	bfcc      	ite	gt
 800ae32:	464f      	movgt	r7, r9
 800ae34:	2701      	movle	r7, #1
 800ae36:	f04f 0800 	mov.w	r8, #0
 800ae3a:	9a03      	ldr	r2, [sp, #12]
 800ae3c:	4417      	add	r7, r2
 800ae3e:	4659      	mov	r1, fp
 800ae40:	2201      	movs	r2, #1
 800ae42:	4628      	mov	r0, r5
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	f000 fa7b 	bl	800b340 <__lshift>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4683      	mov	fp, r0
 800ae4e:	f000 fae7 	bl	800b420 <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	dcb2      	bgt.n	800adbc <_dtoa_r+0xac4>
 800ae56:	d102      	bne.n	800ae5e <_dtoa_r+0xb66>
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	07db      	lsls	r3, r3, #31
 800ae5c:	d4ae      	bmi.n	800adbc <_dtoa_r+0xac4>
 800ae5e:	463b      	mov	r3, r7
 800ae60:	461f      	mov	r7, r3
 800ae62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae66:	2a30      	cmp	r2, #48	; 0x30
 800ae68:	d0fa      	beq.n	800ae60 <_dtoa_r+0xb68>
 800ae6a:	e6f9      	b.n	800ac60 <_dtoa_r+0x968>
 800ae6c:	9a03      	ldr	r2, [sp, #12]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d1a5      	bne.n	800adbe <_dtoa_r+0xac6>
 800ae72:	2331      	movs	r3, #49	; 0x31
 800ae74:	f10a 0a01 	add.w	sl, sl, #1
 800ae78:	e779      	b.n	800ad6e <_dtoa_r+0xa76>
 800ae7a:	4b14      	ldr	r3, [pc, #80]	; (800aecc <_dtoa_r+0xbd4>)
 800ae7c:	f7ff baa8 	b.w	800a3d0 <_dtoa_r+0xd8>
 800ae80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f47f aa81 	bne.w	800a38a <_dtoa_r+0x92>
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <_dtoa_r+0xbd8>)
 800ae8a:	f7ff baa1 	b.w	800a3d0 <_dtoa_r+0xd8>
 800ae8e:	f1b9 0f00 	cmp.w	r9, #0
 800ae92:	dc03      	bgt.n	800ae9c <_dtoa_r+0xba4>
 800ae94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	f73f aecb 	bgt.w	800ac32 <_dtoa_r+0x93a>
 800ae9c:	9f03      	ldr	r7, [sp, #12]
 800ae9e:	4621      	mov	r1, r4
 800aea0:	4658      	mov	r0, fp
 800aea2:	f7ff f99d 	bl	800a1e0 <quorem>
 800aea6:	9a03      	ldr	r2, [sp, #12]
 800aea8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aeac:	f807 3b01 	strb.w	r3, [r7], #1
 800aeb0:	1aba      	subs	r2, r7, r2
 800aeb2:	4591      	cmp	r9, r2
 800aeb4:	ddba      	ble.n	800ae2c <_dtoa_r+0xb34>
 800aeb6:	4659      	mov	r1, fp
 800aeb8:	2300      	movs	r3, #0
 800aeba:	220a      	movs	r2, #10
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 f893 	bl	800afe8 <__multadd>
 800aec2:	4683      	mov	fp, r0
 800aec4:	e7eb      	b.n	800ae9e <_dtoa_r+0xba6>
 800aec6:	bf00      	nop
 800aec8:	0800cf70 	.word	0x0800cf70
 800aecc:	0800cdcc 	.word	0x0800cdcc
 800aed0:	0800cef1 	.word	0x0800cef1

0800aed4 <_localeconv_r>:
 800aed4:	4800      	ldr	r0, [pc, #0]	; (800aed8 <_localeconv_r+0x4>)
 800aed6:	4770      	bx	lr
 800aed8:	2000024c 	.word	0x2000024c

0800aedc <malloc>:
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <malloc+0xc>)
 800aede:	4601      	mov	r1, r0
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f000 bc1d 	b.w	800b720 <_malloc_r>
 800aee6:	bf00      	nop
 800aee8:	200000f8 	.word	0x200000f8

0800aeec <memchr>:
 800aeec:	4603      	mov	r3, r0
 800aeee:	b510      	push	{r4, lr}
 800aef0:	b2c9      	uxtb	r1, r1
 800aef2:	4402      	add	r2, r0
 800aef4:	4293      	cmp	r3, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	d101      	bne.n	800aefe <memchr+0x12>
 800aefa:	2000      	movs	r0, #0
 800aefc:	e003      	b.n	800af06 <memchr+0x1a>
 800aefe:	7804      	ldrb	r4, [r0, #0]
 800af00:	3301      	adds	r3, #1
 800af02:	428c      	cmp	r4, r1
 800af04:	d1f6      	bne.n	800aef4 <memchr+0x8>
 800af06:	bd10      	pop	{r4, pc}

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <_Balloc>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	b976      	cbnz	r6, 800af4c <_Balloc+0x28>
 800af2e:	2010      	movs	r0, #16
 800af30:	f7ff ffd4 	bl	800aedc <malloc>
 800af34:	4602      	mov	r2, r0
 800af36:	6260      	str	r0, [r4, #36]	; 0x24
 800af38:	b920      	cbnz	r0, 800af44 <_Balloc+0x20>
 800af3a:	2166      	movs	r1, #102	; 0x66
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <_Balloc+0x78>)
 800af3e:	4818      	ldr	r0, [pc, #96]	; (800afa0 <_Balloc+0x7c>)
 800af40:	f000 fdce 	bl	800bae0 <__assert_func>
 800af44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af48:	6006      	str	r6, [r0, #0]
 800af4a:	60c6      	str	r6, [r0, #12]
 800af4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af4e:	68f3      	ldr	r3, [r6, #12]
 800af50:	b183      	cbz	r3, 800af74 <_Balloc+0x50>
 800af52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af5a:	b9b8      	cbnz	r0, 800af8c <_Balloc+0x68>
 800af5c:	2101      	movs	r1, #1
 800af5e:	fa01 f605 	lsl.w	r6, r1, r5
 800af62:	1d72      	adds	r2, r6, #5
 800af64:	4620      	mov	r0, r4
 800af66:	0092      	lsls	r2, r2, #2
 800af68:	f000 fb5e 	bl	800b628 <_calloc_r>
 800af6c:	b160      	cbz	r0, 800af88 <_Balloc+0x64>
 800af6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af72:	e00e      	b.n	800af92 <_Balloc+0x6e>
 800af74:	2221      	movs	r2, #33	; 0x21
 800af76:	2104      	movs	r1, #4
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fb55 	bl	800b628 <_calloc_r>
 800af7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af80:	60f0      	str	r0, [r6, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e4      	bne.n	800af52 <_Balloc+0x2e>
 800af88:	2000      	movs	r0, #0
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	6802      	ldr	r2, [r0, #0]
 800af8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af92:	2300      	movs	r3, #0
 800af94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af98:	e7f7      	b.n	800af8a <_Balloc+0x66>
 800af9a:	bf00      	nop
 800af9c:	0800cefe 	.word	0x0800cefe
 800afa0:	0800cf81 	.word	0x0800cf81

0800afa4 <_Bfree>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b976      	cbnz	r6, 800afcc <_Bfree+0x28>
 800afae:	2010      	movs	r0, #16
 800afb0:	f7ff ff94 	bl	800aedc <malloc>
 800afb4:	4602      	mov	r2, r0
 800afb6:	6268      	str	r0, [r5, #36]	; 0x24
 800afb8:	b920      	cbnz	r0, 800afc4 <_Bfree+0x20>
 800afba:	218a      	movs	r1, #138	; 0x8a
 800afbc:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <_Bfree+0x3c>)
 800afbe:	4809      	ldr	r0, [pc, #36]	; (800afe4 <_Bfree+0x40>)
 800afc0:	f000 fd8e 	bl	800bae0 <__assert_func>
 800afc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc8:	6006      	str	r6, [r0, #0]
 800afca:	60c6      	str	r6, [r0, #12]
 800afcc:	b13c      	cbz	r4, 800afde <_Bfree+0x3a>
 800afce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afd0:	6862      	ldr	r2, [r4, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd8:	6021      	str	r1, [r4, #0]
 800afda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	0800cefe 	.word	0x0800cefe
 800afe4:	0800cf81 	.word	0x0800cf81

0800afe8 <__multadd>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	4607      	mov	r7, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	461e      	mov	r6, r3
 800aff2:	2000      	movs	r0, #0
 800aff4:	690d      	ldr	r5, [r1, #16]
 800aff6:	f101 0c14 	add.w	ip, r1, #20
 800affa:	f8dc 3000 	ldr.w	r3, [ip]
 800affe:	3001      	adds	r0, #1
 800b000:	b299      	uxth	r1, r3
 800b002:	fb02 6101 	mla	r1, r2, r1, r6
 800b006:	0c1e      	lsrs	r6, r3, #16
 800b008:	0c0b      	lsrs	r3, r1, #16
 800b00a:	fb02 3306 	mla	r3, r2, r6, r3
 800b00e:	b289      	uxth	r1, r1
 800b010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b014:	4285      	cmp	r5, r0
 800b016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01a:	f84c 1b04 	str.w	r1, [ip], #4
 800b01e:	dcec      	bgt.n	800affa <__multadd+0x12>
 800b020:	b30e      	cbz	r6, 800b066 <__multadd+0x7e>
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	42ab      	cmp	r3, r5
 800b026:	dc19      	bgt.n	800b05c <__multadd+0x74>
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4638      	mov	r0, r7
 800b02c:	3101      	adds	r1, #1
 800b02e:	f7ff ff79 	bl	800af24 <_Balloc>
 800b032:	4680      	mov	r8, r0
 800b034:	b928      	cbnz	r0, 800b042 <__multadd+0x5a>
 800b036:	4602      	mov	r2, r0
 800b038:	21b5      	movs	r1, #181	; 0xb5
 800b03a:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <__multadd+0x84>)
 800b03c:	480c      	ldr	r0, [pc, #48]	; (800b070 <__multadd+0x88>)
 800b03e:	f000 fd4f 	bl	800bae0 <__assert_func>
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	f104 010c 	add.w	r1, r4, #12
 800b048:	3202      	adds	r2, #2
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	300c      	adds	r0, #12
 800b04e:	f7ff ff5b 	bl	800af08 <memcpy>
 800b052:	4621      	mov	r1, r4
 800b054:	4638      	mov	r0, r7
 800b056:	f7ff ffa5 	bl	800afa4 <_Bfree>
 800b05a:	4644      	mov	r4, r8
 800b05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b060:	3501      	adds	r5, #1
 800b062:	615e      	str	r6, [r3, #20]
 800b064:	6125      	str	r5, [r4, #16]
 800b066:	4620      	mov	r0, r4
 800b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06c:	0800cf70 	.word	0x0800cf70
 800b070:	0800cf81 	.word	0x0800cf81

0800b074 <__hi0bits>:
 800b074:	0c02      	lsrs	r2, r0, #16
 800b076:	0412      	lsls	r2, r2, #16
 800b078:	4603      	mov	r3, r0
 800b07a:	b9ca      	cbnz	r2, 800b0b0 <__hi0bits+0x3c>
 800b07c:	0403      	lsls	r3, r0, #16
 800b07e:	2010      	movs	r0, #16
 800b080:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b084:	bf04      	itt	eq
 800b086:	021b      	lsleq	r3, r3, #8
 800b088:	3008      	addeq	r0, #8
 800b08a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b08e:	bf04      	itt	eq
 800b090:	011b      	lsleq	r3, r3, #4
 800b092:	3004      	addeq	r0, #4
 800b094:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b098:	bf04      	itt	eq
 800b09a:	009b      	lsleq	r3, r3, #2
 800b09c:	3002      	addeq	r0, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	db05      	blt.n	800b0ae <__hi0bits+0x3a>
 800b0a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b0a6:	f100 0001 	add.w	r0, r0, #1
 800b0aa:	bf08      	it	eq
 800b0ac:	2020      	moveq	r0, #32
 800b0ae:	4770      	bx	lr
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e7e5      	b.n	800b080 <__hi0bits+0xc>

0800b0b4 <__lo0bits>:
 800b0b4:	6803      	ldr	r3, [r0, #0]
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	f013 0007 	ands.w	r0, r3, #7
 800b0bc:	d00b      	beq.n	800b0d6 <__lo0bits+0x22>
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	d421      	bmi.n	800b106 <__lo0bits+0x52>
 800b0c2:	0798      	lsls	r0, r3, #30
 800b0c4:	bf49      	itett	mi
 800b0c6:	085b      	lsrmi	r3, r3, #1
 800b0c8:	089b      	lsrpl	r3, r3, #2
 800b0ca:	2001      	movmi	r0, #1
 800b0cc:	6013      	strmi	r3, [r2, #0]
 800b0ce:	bf5c      	itt	pl
 800b0d0:	2002      	movpl	r0, #2
 800b0d2:	6013      	strpl	r3, [r2, #0]
 800b0d4:	4770      	bx	lr
 800b0d6:	b299      	uxth	r1, r3
 800b0d8:	b909      	cbnz	r1, 800b0de <__lo0bits+0x2a>
 800b0da:	2010      	movs	r0, #16
 800b0dc:	0c1b      	lsrs	r3, r3, #16
 800b0de:	b2d9      	uxtb	r1, r3
 800b0e0:	b909      	cbnz	r1, 800b0e6 <__lo0bits+0x32>
 800b0e2:	3008      	adds	r0, #8
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	0719      	lsls	r1, r3, #28
 800b0e8:	bf04      	itt	eq
 800b0ea:	091b      	lsreq	r3, r3, #4
 800b0ec:	3004      	addeq	r0, #4
 800b0ee:	0799      	lsls	r1, r3, #30
 800b0f0:	bf04      	itt	eq
 800b0f2:	089b      	lsreq	r3, r3, #2
 800b0f4:	3002      	addeq	r0, #2
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d403      	bmi.n	800b102 <__lo0bits+0x4e>
 800b0fa:	085b      	lsrs	r3, r3, #1
 800b0fc:	f100 0001 	add.w	r0, r0, #1
 800b100:	d003      	beq.n	800b10a <__lo0bits+0x56>
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	4770      	bx	lr
 800b106:	2000      	movs	r0, #0
 800b108:	4770      	bx	lr
 800b10a:	2020      	movs	r0, #32
 800b10c:	4770      	bx	lr
	...

0800b110 <__i2b>:
 800b110:	b510      	push	{r4, lr}
 800b112:	460c      	mov	r4, r1
 800b114:	2101      	movs	r1, #1
 800b116:	f7ff ff05 	bl	800af24 <_Balloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	b928      	cbnz	r0, 800b12a <__i2b+0x1a>
 800b11e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b122:	4b04      	ldr	r3, [pc, #16]	; (800b134 <__i2b+0x24>)
 800b124:	4804      	ldr	r0, [pc, #16]	; (800b138 <__i2b+0x28>)
 800b126:	f000 fcdb 	bl	800bae0 <__assert_func>
 800b12a:	2301      	movs	r3, #1
 800b12c:	6144      	str	r4, [r0, #20]
 800b12e:	6103      	str	r3, [r0, #16]
 800b130:	bd10      	pop	{r4, pc}
 800b132:	bf00      	nop
 800b134:	0800cf70 	.word	0x0800cf70
 800b138:	0800cf81 	.word	0x0800cf81

0800b13c <__multiply>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4691      	mov	r9, r2
 800b142:	690a      	ldr	r2, [r1, #16]
 800b144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b148:	460c      	mov	r4, r1
 800b14a:	429a      	cmp	r2, r3
 800b14c:	bfbe      	ittt	lt
 800b14e:	460b      	movlt	r3, r1
 800b150:	464c      	movlt	r4, r9
 800b152:	4699      	movlt	r9, r3
 800b154:	6927      	ldr	r7, [r4, #16]
 800b156:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	6861      	ldr	r1, [r4, #4]
 800b15e:	eb07 060a 	add.w	r6, r7, sl
 800b162:	42b3      	cmp	r3, r6
 800b164:	b085      	sub	sp, #20
 800b166:	bfb8      	it	lt
 800b168:	3101      	addlt	r1, #1
 800b16a:	f7ff fedb 	bl	800af24 <_Balloc>
 800b16e:	b930      	cbnz	r0, 800b17e <__multiply+0x42>
 800b170:	4602      	mov	r2, r0
 800b172:	f240 115d 	movw	r1, #349	; 0x15d
 800b176:	4b43      	ldr	r3, [pc, #268]	; (800b284 <__multiply+0x148>)
 800b178:	4843      	ldr	r0, [pc, #268]	; (800b288 <__multiply+0x14c>)
 800b17a:	f000 fcb1 	bl	800bae0 <__assert_func>
 800b17e:	f100 0514 	add.w	r5, r0, #20
 800b182:	462b      	mov	r3, r5
 800b184:	2200      	movs	r2, #0
 800b186:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b18a:	4543      	cmp	r3, r8
 800b18c:	d321      	bcc.n	800b1d2 <__multiply+0x96>
 800b18e:	f104 0314 	add.w	r3, r4, #20
 800b192:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b196:	f109 0314 	add.w	r3, r9, #20
 800b19a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b19e:	9202      	str	r2, [sp, #8]
 800b1a0:	1b3a      	subs	r2, r7, r4
 800b1a2:	3a15      	subs	r2, #21
 800b1a4:	f022 0203 	bic.w	r2, r2, #3
 800b1a8:	3204      	adds	r2, #4
 800b1aa:	f104 0115 	add.w	r1, r4, #21
 800b1ae:	428f      	cmp	r7, r1
 800b1b0:	bf38      	it	cc
 800b1b2:	2204      	movcc	r2, #4
 800b1b4:	9201      	str	r2, [sp, #4]
 800b1b6:	9a02      	ldr	r2, [sp, #8]
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d80c      	bhi.n	800b1d8 <__multiply+0x9c>
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	dd03      	ble.n	800b1ca <__multiply+0x8e>
 800b1c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d059      	beq.n	800b27e <__multiply+0x142>
 800b1ca:	6106      	str	r6, [r0, #16]
 800b1cc:	b005      	add	sp, #20
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	f843 2b04 	str.w	r2, [r3], #4
 800b1d6:	e7d8      	b.n	800b18a <__multiply+0x4e>
 800b1d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1dc:	f1ba 0f00 	cmp.w	sl, #0
 800b1e0:	d023      	beq.n	800b22a <__multiply+0xee>
 800b1e2:	46a9      	mov	r9, r5
 800b1e4:	f04f 0c00 	mov.w	ip, #0
 800b1e8:	f104 0e14 	add.w	lr, r4, #20
 800b1ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1f0:	f8d9 1000 	ldr.w	r1, [r9]
 800b1f4:	fa1f fb82 	uxth.w	fp, r2
 800b1f8:	b289      	uxth	r1, r1
 800b1fa:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1fe:	4461      	add	r1, ip
 800b200:	f8d9 c000 	ldr.w	ip, [r9]
 800b204:	0c12      	lsrs	r2, r2, #16
 800b206:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b20a:	fb0a c202 	mla	r2, sl, r2, ip
 800b20e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b212:	b289      	uxth	r1, r1
 800b214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b218:	4577      	cmp	r7, lr
 800b21a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b21e:	f849 1b04 	str.w	r1, [r9], #4
 800b222:	d8e3      	bhi.n	800b1ec <__multiply+0xb0>
 800b224:	9a01      	ldr	r2, [sp, #4]
 800b226:	f845 c002 	str.w	ip, [r5, r2]
 800b22a:	9a03      	ldr	r2, [sp, #12]
 800b22c:	3304      	adds	r3, #4
 800b22e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b232:	f1b9 0f00 	cmp.w	r9, #0
 800b236:	d020      	beq.n	800b27a <__multiply+0x13e>
 800b238:	46ae      	mov	lr, r5
 800b23a:	f04f 0a00 	mov.w	sl, #0
 800b23e:	6829      	ldr	r1, [r5, #0]
 800b240:	f104 0c14 	add.w	ip, r4, #20
 800b244:	f8bc b000 	ldrh.w	fp, [ip]
 800b248:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b24c:	b289      	uxth	r1, r1
 800b24e:	fb09 220b 	mla	r2, r9, fp, r2
 800b252:	4492      	add	sl, r2
 800b254:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b258:	f84e 1b04 	str.w	r1, [lr], #4
 800b25c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b260:	f8be 1000 	ldrh.w	r1, [lr]
 800b264:	0c12      	lsrs	r2, r2, #16
 800b266:	fb09 1102 	mla	r1, r9, r2, r1
 800b26a:	4567      	cmp	r7, ip
 800b26c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b270:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b274:	d8e6      	bhi.n	800b244 <__multiply+0x108>
 800b276:	9a01      	ldr	r2, [sp, #4]
 800b278:	50a9      	str	r1, [r5, r2]
 800b27a:	3504      	adds	r5, #4
 800b27c:	e79b      	b.n	800b1b6 <__multiply+0x7a>
 800b27e:	3e01      	subs	r6, #1
 800b280:	e79d      	b.n	800b1be <__multiply+0x82>
 800b282:	bf00      	nop
 800b284:	0800cf70 	.word	0x0800cf70
 800b288:	0800cf81 	.word	0x0800cf81

0800b28c <__pow5mult>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	4615      	mov	r5, r2
 800b292:	f012 0203 	ands.w	r2, r2, #3
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	d007      	beq.n	800b2ac <__pow5mult+0x20>
 800b29c:	4c25      	ldr	r4, [pc, #148]	; (800b334 <__pow5mult+0xa8>)
 800b29e:	3a01      	subs	r2, #1
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2a6:	f7ff fe9f 	bl	800afe8 <__multadd>
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	10ad      	asrs	r5, r5, #2
 800b2ae:	d03d      	beq.n	800b32c <__pow5mult+0xa0>
 800b2b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2b2:	b97c      	cbnz	r4, 800b2d4 <__pow5mult+0x48>
 800b2b4:	2010      	movs	r0, #16
 800b2b6:	f7ff fe11 	bl	800aedc <malloc>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	6270      	str	r0, [r6, #36]	; 0x24
 800b2be:	b928      	cbnz	r0, 800b2cc <__pow5mult+0x40>
 800b2c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2c4:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <__pow5mult+0xac>)
 800b2c6:	481d      	ldr	r0, [pc, #116]	; (800b33c <__pow5mult+0xb0>)
 800b2c8:	f000 fc0a 	bl	800bae0 <__assert_func>
 800b2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d0:	6004      	str	r4, [r0, #0]
 800b2d2:	60c4      	str	r4, [r0, #12]
 800b2d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2dc:	b94c      	cbnz	r4, 800b2f2 <__pow5mult+0x66>
 800b2de:	f240 2171 	movw	r1, #625	; 0x271
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff14 	bl	800b110 <__i2b>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f0:	6003      	str	r3, [r0, #0]
 800b2f2:	f04f 0900 	mov.w	r9, #0
 800b2f6:	07eb      	lsls	r3, r5, #31
 800b2f8:	d50a      	bpl.n	800b310 <__pow5mult+0x84>
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff ff1c 	bl	800b13c <__multiply>
 800b304:	4680      	mov	r8, r0
 800b306:	4639      	mov	r1, r7
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fe4b 	bl	800afa4 <_Bfree>
 800b30e:	4647      	mov	r7, r8
 800b310:	106d      	asrs	r5, r5, #1
 800b312:	d00b      	beq.n	800b32c <__pow5mult+0xa0>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	b938      	cbnz	r0, 800b328 <__pow5mult+0x9c>
 800b318:	4622      	mov	r2, r4
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	f7ff ff0d 	bl	800b13c <__multiply>
 800b322:	6020      	str	r0, [r4, #0]
 800b324:	f8c0 9000 	str.w	r9, [r0]
 800b328:	4604      	mov	r4, r0
 800b32a:	e7e4      	b.n	800b2f6 <__pow5mult+0x6a>
 800b32c:	4638      	mov	r0, r7
 800b32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b332:	bf00      	nop
 800b334:	0800d0d0 	.word	0x0800d0d0
 800b338:	0800cefe 	.word	0x0800cefe
 800b33c:	0800cf81 	.word	0x0800cf81

0800b340 <__lshift>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	4607      	mov	r7, r0
 800b348:	4691      	mov	r9, r2
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6849      	ldr	r1, [r1, #4]
 800b34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b358:	f108 0601 	add.w	r6, r8, #1
 800b35c:	42b3      	cmp	r3, r6
 800b35e:	db0b      	blt.n	800b378 <__lshift+0x38>
 800b360:	4638      	mov	r0, r7
 800b362:	f7ff fddf 	bl	800af24 <_Balloc>
 800b366:	4605      	mov	r5, r0
 800b368:	b948      	cbnz	r0, 800b37e <__lshift+0x3e>
 800b36a:	4602      	mov	r2, r0
 800b36c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b370:	4b29      	ldr	r3, [pc, #164]	; (800b418 <__lshift+0xd8>)
 800b372:	482a      	ldr	r0, [pc, #168]	; (800b41c <__lshift+0xdc>)
 800b374:	f000 fbb4 	bl	800bae0 <__assert_func>
 800b378:	3101      	adds	r1, #1
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	e7ee      	b.n	800b35c <__lshift+0x1c>
 800b37e:	2300      	movs	r3, #0
 800b380:	f100 0114 	add.w	r1, r0, #20
 800b384:	f100 0210 	add.w	r2, r0, #16
 800b388:	4618      	mov	r0, r3
 800b38a:	4553      	cmp	r3, sl
 800b38c:	db37      	blt.n	800b3fe <__lshift+0xbe>
 800b38e:	6920      	ldr	r0, [r4, #16]
 800b390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b394:	f104 0314 	add.w	r3, r4, #20
 800b398:	f019 091f 	ands.w	r9, r9, #31
 800b39c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3a4:	d02f      	beq.n	800b406 <__lshift+0xc6>
 800b3a6:	468a      	mov	sl, r1
 800b3a8:	f04f 0c00 	mov.w	ip, #0
 800b3ac:	f1c9 0e20 	rsb	lr, r9, #32
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	fa02 f209 	lsl.w	r2, r2, r9
 800b3b6:	ea42 020c 	orr.w	r2, r2, ip
 800b3ba:	f84a 2b04 	str.w	r2, [sl], #4
 800b3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c2:	4298      	cmp	r0, r3
 800b3c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3c8:	d8f2      	bhi.n	800b3b0 <__lshift+0x70>
 800b3ca:	1b03      	subs	r3, r0, r4
 800b3cc:	3b15      	subs	r3, #21
 800b3ce:	f023 0303 	bic.w	r3, r3, #3
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	f104 0215 	add.w	r2, r4, #21
 800b3d8:	4290      	cmp	r0, r2
 800b3da:	bf38      	it	cc
 800b3dc:	2304      	movcc	r3, #4
 800b3de:	f841 c003 	str.w	ip, [r1, r3]
 800b3e2:	f1bc 0f00 	cmp.w	ip, #0
 800b3e6:	d001      	beq.n	800b3ec <__lshift+0xac>
 800b3e8:	f108 0602 	add.w	r6, r8, #2
 800b3ec:	3e01      	subs	r6, #1
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	612e      	str	r6, [r5, #16]
 800b3f4:	f7ff fdd6 	bl	800afa4 <_Bfree>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b402:	3301      	adds	r3, #1
 800b404:	e7c1      	b.n	800b38a <__lshift+0x4a>
 800b406:	3904      	subs	r1, #4
 800b408:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40c:	4298      	cmp	r0, r3
 800b40e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b412:	d8f9      	bhi.n	800b408 <__lshift+0xc8>
 800b414:	e7ea      	b.n	800b3ec <__lshift+0xac>
 800b416:	bf00      	nop
 800b418:	0800cf70 	.word	0x0800cf70
 800b41c:	0800cf81 	.word	0x0800cf81

0800b420 <__mcmp>:
 800b420:	4603      	mov	r3, r0
 800b422:	690a      	ldr	r2, [r1, #16]
 800b424:	6900      	ldr	r0, [r0, #16]
 800b426:	b530      	push	{r4, r5, lr}
 800b428:	1a80      	subs	r0, r0, r2
 800b42a:	d10d      	bne.n	800b448 <__mcmp+0x28>
 800b42c:	3314      	adds	r3, #20
 800b42e:	3114      	adds	r1, #20
 800b430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b43c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b440:	4295      	cmp	r5, r2
 800b442:	d002      	beq.n	800b44a <__mcmp+0x2a>
 800b444:	d304      	bcc.n	800b450 <__mcmp+0x30>
 800b446:	2001      	movs	r0, #1
 800b448:	bd30      	pop	{r4, r5, pc}
 800b44a:	42a3      	cmp	r3, r4
 800b44c:	d3f4      	bcc.n	800b438 <__mcmp+0x18>
 800b44e:	e7fb      	b.n	800b448 <__mcmp+0x28>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b454:	e7f8      	b.n	800b448 <__mcmp+0x28>
	...

0800b458 <__mdiff>:
 800b458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	460d      	mov	r5, r1
 800b45e:	4607      	mov	r7, r0
 800b460:	4611      	mov	r1, r2
 800b462:	4628      	mov	r0, r5
 800b464:	4614      	mov	r4, r2
 800b466:	f7ff ffdb 	bl	800b420 <__mcmp>
 800b46a:	1e06      	subs	r6, r0, #0
 800b46c:	d111      	bne.n	800b492 <__mdiff+0x3a>
 800b46e:	4631      	mov	r1, r6
 800b470:	4638      	mov	r0, r7
 800b472:	f7ff fd57 	bl	800af24 <_Balloc>
 800b476:	4602      	mov	r2, r0
 800b478:	b928      	cbnz	r0, 800b486 <__mdiff+0x2e>
 800b47a:	f240 2132 	movw	r1, #562	; 0x232
 800b47e:	4b3a      	ldr	r3, [pc, #232]	; (800b568 <__mdiff+0x110>)
 800b480:	483a      	ldr	r0, [pc, #232]	; (800b56c <__mdiff+0x114>)
 800b482:	f000 fb2d 	bl	800bae0 <__assert_func>
 800b486:	2301      	movs	r3, #1
 800b488:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b48c:	4610      	mov	r0, r2
 800b48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	bfa4      	itt	ge
 800b494:	4623      	movge	r3, r4
 800b496:	462c      	movge	r4, r5
 800b498:	4638      	mov	r0, r7
 800b49a:	6861      	ldr	r1, [r4, #4]
 800b49c:	bfa6      	itte	ge
 800b49e:	461d      	movge	r5, r3
 800b4a0:	2600      	movge	r6, #0
 800b4a2:	2601      	movlt	r6, #1
 800b4a4:	f7ff fd3e 	bl	800af24 <_Balloc>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	b918      	cbnz	r0, 800b4b4 <__mdiff+0x5c>
 800b4ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4b0:	4b2d      	ldr	r3, [pc, #180]	; (800b568 <__mdiff+0x110>)
 800b4b2:	e7e5      	b.n	800b480 <__mdiff+0x28>
 800b4b4:	f102 0814 	add.w	r8, r2, #20
 800b4b8:	46c2      	mov	sl, r8
 800b4ba:	f04f 0c00 	mov.w	ip, #0
 800b4be:	6927      	ldr	r7, [r4, #16]
 800b4c0:	60c6      	str	r6, [r0, #12]
 800b4c2:	692e      	ldr	r6, [r5, #16]
 800b4c4:	f104 0014 	add.w	r0, r4, #20
 800b4c8:	f105 0914 	add.w	r9, r5, #20
 800b4cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b4d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4d4:	3410      	adds	r4, #16
 800b4d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b4da:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4de:	fa1f f18b 	uxth.w	r1, fp
 800b4e2:	448c      	add	ip, r1
 800b4e4:	b299      	uxth	r1, r3
 800b4e6:	0c1b      	lsrs	r3, r3, #16
 800b4e8:	ebac 0101 	sub.w	r1, ip, r1
 800b4ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b4f4:	b289      	uxth	r1, r1
 800b4f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b4fa:	454e      	cmp	r6, r9
 800b4fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b500:	f84a 3b04 	str.w	r3, [sl], #4
 800b504:	d8e7      	bhi.n	800b4d6 <__mdiff+0x7e>
 800b506:	1b73      	subs	r3, r6, r5
 800b508:	3b15      	subs	r3, #21
 800b50a:	f023 0303 	bic.w	r3, r3, #3
 800b50e:	3515      	adds	r5, #21
 800b510:	3304      	adds	r3, #4
 800b512:	42ae      	cmp	r6, r5
 800b514:	bf38      	it	cc
 800b516:	2304      	movcc	r3, #4
 800b518:	4418      	add	r0, r3
 800b51a:	4443      	add	r3, r8
 800b51c:	461e      	mov	r6, r3
 800b51e:	4605      	mov	r5, r0
 800b520:	4575      	cmp	r5, lr
 800b522:	d30e      	bcc.n	800b542 <__mdiff+0xea>
 800b524:	f10e 0103 	add.w	r1, lr, #3
 800b528:	1a09      	subs	r1, r1, r0
 800b52a:	f021 0103 	bic.w	r1, r1, #3
 800b52e:	3803      	subs	r0, #3
 800b530:	4586      	cmp	lr, r0
 800b532:	bf38      	it	cc
 800b534:	2100      	movcc	r1, #0
 800b536:	4419      	add	r1, r3
 800b538:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b53c:	b18b      	cbz	r3, 800b562 <__mdiff+0x10a>
 800b53e:	6117      	str	r7, [r2, #16]
 800b540:	e7a4      	b.n	800b48c <__mdiff+0x34>
 800b542:	f855 8b04 	ldr.w	r8, [r5], #4
 800b546:	fa1f f188 	uxth.w	r1, r8
 800b54a:	4461      	add	r1, ip
 800b54c:	140c      	asrs	r4, r1, #16
 800b54e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b552:	b289      	uxth	r1, r1
 800b554:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b558:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b55c:	f846 1b04 	str.w	r1, [r6], #4
 800b560:	e7de      	b.n	800b520 <__mdiff+0xc8>
 800b562:	3f01      	subs	r7, #1
 800b564:	e7e8      	b.n	800b538 <__mdiff+0xe0>
 800b566:	bf00      	nop
 800b568:	0800cf70 	.word	0x0800cf70
 800b56c:	0800cf81 	.word	0x0800cf81

0800b570 <__d2b>:
 800b570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b574:	2101      	movs	r1, #1
 800b576:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b57a:	4690      	mov	r8, r2
 800b57c:	461d      	mov	r5, r3
 800b57e:	f7ff fcd1 	bl	800af24 <_Balloc>
 800b582:	4604      	mov	r4, r0
 800b584:	b930      	cbnz	r0, 800b594 <__d2b+0x24>
 800b586:	4602      	mov	r2, r0
 800b588:	f240 310a 	movw	r1, #778	; 0x30a
 800b58c:	4b24      	ldr	r3, [pc, #144]	; (800b620 <__d2b+0xb0>)
 800b58e:	4825      	ldr	r0, [pc, #148]	; (800b624 <__d2b+0xb4>)
 800b590:	f000 faa6 	bl	800bae0 <__assert_func>
 800b594:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b598:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b59c:	bb2d      	cbnz	r5, 800b5ea <__d2b+0x7a>
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b5a4:	d026      	beq.n	800b5f4 <__d2b+0x84>
 800b5a6:	4668      	mov	r0, sp
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	f7ff fd83 	bl	800b0b4 <__lo0bits>
 800b5ae:	9900      	ldr	r1, [sp, #0]
 800b5b0:	b1f0      	cbz	r0, 800b5f0 <__d2b+0x80>
 800b5b2:	9a01      	ldr	r2, [sp, #4]
 800b5b4:	f1c0 0320 	rsb	r3, r0, #32
 800b5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	40c2      	lsrs	r2, r0
 800b5c0:	6163      	str	r3, [r4, #20]
 800b5c2:	9201      	str	r2, [sp, #4]
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bf14      	ite	ne
 800b5ca:	2102      	movne	r1, #2
 800b5cc:	2101      	moveq	r1, #1
 800b5ce:	61a3      	str	r3, [r4, #24]
 800b5d0:	6121      	str	r1, [r4, #16]
 800b5d2:	b1c5      	cbz	r5, 800b606 <__d2b+0x96>
 800b5d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5d8:	4405      	add	r5, r0
 800b5da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5de:	603d      	str	r5, [r7, #0]
 800b5e0:	6030      	str	r0, [r6, #0]
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	b002      	add	sp, #8
 800b5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5ee:	e7d6      	b.n	800b59e <__d2b+0x2e>
 800b5f0:	6161      	str	r1, [r4, #20]
 800b5f2:	e7e7      	b.n	800b5c4 <__d2b+0x54>
 800b5f4:	a801      	add	r0, sp, #4
 800b5f6:	f7ff fd5d 	bl	800b0b4 <__lo0bits>
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	6121      	str	r1, [r4, #16]
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	3020      	adds	r0, #32
 800b604:	e7e5      	b.n	800b5d2 <__d2b+0x62>
 800b606:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b60a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b60e:	6038      	str	r0, [r7, #0]
 800b610:	6918      	ldr	r0, [r3, #16]
 800b612:	f7ff fd2f 	bl	800b074 <__hi0bits>
 800b616:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b61a:	6031      	str	r1, [r6, #0]
 800b61c:	e7e1      	b.n	800b5e2 <__d2b+0x72>
 800b61e:	bf00      	nop
 800b620:	0800cf70 	.word	0x0800cf70
 800b624:	0800cf81 	.word	0x0800cf81

0800b628 <_calloc_r>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	fba1 5402 	umull	r5, r4, r1, r2
 800b62e:	b934      	cbnz	r4, 800b63e <_calloc_r+0x16>
 800b630:	4629      	mov	r1, r5
 800b632:	f000 f875 	bl	800b720 <_malloc_r>
 800b636:	4606      	mov	r6, r0
 800b638:	b928      	cbnz	r0, 800b646 <_calloc_r+0x1e>
 800b63a:	4630      	mov	r0, r6
 800b63c:	bd70      	pop	{r4, r5, r6, pc}
 800b63e:	220c      	movs	r2, #12
 800b640:	2600      	movs	r6, #0
 800b642:	6002      	str	r2, [r0, #0]
 800b644:	e7f9      	b.n	800b63a <_calloc_r+0x12>
 800b646:	462a      	mov	r2, r5
 800b648:	4621      	mov	r1, r4
 800b64a:	f7fe f8a7 	bl	800979c <memset>
 800b64e:	e7f4      	b.n	800b63a <_calloc_r+0x12>

0800b650 <_free_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	2900      	cmp	r1, #0
 800b656:	d040      	beq.n	800b6da <_free_r+0x8a>
 800b658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65c:	1f0c      	subs	r4, r1, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfb8      	it	lt
 800b662:	18e4      	addlt	r4, r4, r3
 800b664:	f000 fa98 	bl	800bb98 <__malloc_lock>
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <_free_r+0x8c>)
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	b933      	cbnz	r3, 800b67c <_free_r+0x2c>
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	6014      	str	r4, [r2, #0]
 800b672:	4628      	mov	r0, r5
 800b674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b678:	f000 ba94 	b.w	800bba4 <__malloc_unlock>
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d908      	bls.n	800b692 <_free_r+0x42>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	1821      	adds	r1, r4, r0
 800b684:	428b      	cmp	r3, r1
 800b686:	bf01      	itttt	eq
 800b688:	6819      	ldreq	r1, [r3, #0]
 800b68a:	685b      	ldreq	r3, [r3, #4]
 800b68c:	1809      	addeq	r1, r1, r0
 800b68e:	6021      	streq	r1, [r4, #0]
 800b690:	e7ed      	b.n	800b66e <_free_r+0x1e>
 800b692:	461a      	mov	r2, r3
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	b10b      	cbz	r3, 800b69c <_free_r+0x4c>
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d9fa      	bls.n	800b692 <_free_r+0x42>
 800b69c:	6811      	ldr	r1, [r2, #0]
 800b69e:	1850      	adds	r0, r2, r1
 800b6a0:	42a0      	cmp	r0, r4
 800b6a2:	d10b      	bne.n	800b6bc <_free_r+0x6c>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	4401      	add	r1, r0
 800b6a8:	1850      	adds	r0, r2, r1
 800b6aa:	4283      	cmp	r3, r0
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	d1e0      	bne.n	800b672 <_free_r+0x22>
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	4401      	add	r1, r0
 800b6b6:	6011      	str	r1, [r2, #0]
 800b6b8:	6053      	str	r3, [r2, #4]
 800b6ba:	e7da      	b.n	800b672 <_free_r+0x22>
 800b6bc:	d902      	bls.n	800b6c4 <_free_r+0x74>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	e7d6      	b.n	800b672 <_free_r+0x22>
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	1821      	adds	r1, r4, r0
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	bf01      	itttt	eq
 800b6cc:	6819      	ldreq	r1, [r3, #0]
 800b6ce:	685b      	ldreq	r3, [r3, #4]
 800b6d0:	1809      	addeq	r1, r1, r0
 800b6d2:	6021      	streq	r1, [r4, #0]
 800b6d4:	6063      	str	r3, [r4, #4]
 800b6d6:	6054      	str	r4, [r2, #4]
 800b6d8:	e7cb      	b.n	800b672 <_free_r+0x22>
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	200005d0 	.word	0x200005d0

0800b6e0 <sbrk_aligned>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	4e0e      	ldr	r6, [pc, #56]	; (800b71c <sbrk_aligned+0x3c>)
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	6831      	ldr	r1, [r6, #0]
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	b911      	cbnz	r1, 800b6f2 <sbrk_aligned+0x12>
 800b6ec:	f000 f9e8 	bl	800bac0 <_sbrk_r>
 800b6f0:	6030      	str	r0, [r6, #0]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 f9e3 	bl	800bac0 <_sbrk_r>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d00a      	beq.n	800b714 <sbrk_aligned+0x34>
 800b6fe:	1cc4      	adds	r4, r0, #3
 800b700:	f024 0403 	bic.w	r4, r4, #3
 800b704:	42a0      	cmp	r0, r4
 800b706:	d007      	beq.n	800b718 <sbrk_aligned+0x38>
 800b708:	1a21      	subs	r1, r4, r0
 800b70a:	4628      	mov	r0, r5
 800b70c:	f000 f9d8 	bl	800bac0 <_sbrk_r>
 800b710:	3001      	adds	r0, #1
 800b712:	d101      	bne.n	800b718 <sbrk_aligned+0x38>
 800b714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b718:	4620      	mov	r0, r4
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	200005d4 	.word	0x200005d4

0800b720 <_malloc_r>:
 800b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b724:	1ccd      	adds	r5, r1, #3
 800b726:	f025 0503 	bic.w	r5, r5, #3
 800b72a:	3508      	adds	r5, #8
 800b72c:	2d0c      	cmp	r5, #12
 800b72e:	bf38      	it	cc
 800b730:	250c      	movcc	r5, #12
 800b732:	2d00      	cmp	r5, #0
 800b734:	4607      	mov	r7, r0
 800b736:	db01      	blt.n	800b73c <_malloc_r+0x1c>
 800b738:	42a9      	cmp	r1, r5
 800b73a:	d905      	bls.n	800b748 <_malloc_r+0x28>
 800b73c:	230c      	movs	r3, #12
 800b73e:	2600      	movs	r6, #0
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	4630      	mov	r0, r6
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	4e2e      	ldr	r6, [pc, #184]	; (800b804 <_malloc_r+0xe4>)
 800b74a:	f000 fa25 	bl	800bb98 <__malloc_lock>
 800b74e:	6833      	ldr	r3, [r6, #0]
 800b750:	461c      	mov	r4, r3
 800b752:	bb34      	cbnz	r4, 800b7a2 <_malloc_r+0x82>
 800b754:	4629      	mov	r1, r5
 800b756:	4638      	mov	r0, r7
 800b758:	f7ff ffc2 	bl	800b6e0 <sbrk_aligned>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	4604      	mov	r4, r0
 800b760:	d14d      	bne.n	800b7fe <_malloc_r+0xde>
 800b762:	6834      	ldr	r4, [r6, #0]
 800b764:	4626      	mov	r6, r4
 800b766:	2e00      	cmp	r6, #0
 800b768:	d140      	bne.n	800b7ec <_malloc_r+0xcc>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	4631      	mov	r1, r6
 800b76e:	4638      	mov	r0, r7
 800b770:	eb04 0803 	add.w	r8, r4, r3
 800b774:	f000 f9a4 	bl	800bac0 <_sbrk_r>
 800b778:	4580      	cmp	r8, r0
 800b77a:	d13a      	bne.n	800b7f2 <_malloc_r+0xd2>
 800b77c:	6821      	ldr	r1, [r4, #0]
 800b77e:	3503      	adds	r5, #3
 800b780:	1a6d      	subs	r5, r5, r1
 800b782:	f025 0503 	bic.w	r5, r5, #3
 800b786:	3508      	adds	r5, #8
 800b788:	2d0c      	cmp	r5, #12
 800b78a:	bf38      	it	cc
 800b78c:	250c      	movcc	r5, #12
 800b78e:	4638      	mov	r0, r7
 800b790:	4629      	mov	r1, r5
 800b792:	f7ff ffa5 	bl	800b6e0 <sbrk_aligned>
 800b796:	3001      	adds	r0, #1
 800b798:	d02b      	beq.n	800b7f2 <_malloc_r+0xd2>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	442b      	add	r3, r5
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	e00e      	b.n	800b7c0 <_malloc_r+0xa0>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	1b52      	subs	r2, r2, r5
 800b7a6:	d41e      	bmi.n	800b7e6 <_malloc_r+0xc6>
 800b7a8:	2a0b      	cmp	r2, #11
 800b7aa:	d916      	bls.n	800b7da <_malloc_r+0xba>
 800b7ac:	1961      	adds	r1, r4, r5
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	6025      	str	r5, [r4, #0]
 800b7b2:	bf18      	it	ne
 800b7b4:	6059      	strne	r1, [r3, #4]
 800b7b6:	6863      	ldr	r3, [r4, #4]
 800b7b8:	bf08      	it	eq
 800b7ba:	6031      	streq	r1, [r6, #0]
 800b7bc:	5162      	str	r2, [r4, r5]
 800b7be:	604b      	str	r3, [r1, #4]
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f104 060b 	add.w	r6, r4, #11
 800b7c6:	f000 f9ed 	bl	800bba4 <__malloc_unlock>
 800b7ca:	f026 0607 	bic.w	r6, r6, #7
 800b7ce:	1d23      	adds	r3, r4, #4
 800b7d0:	1af2      	subs	r2, r6, r3
 800b7d2:	d0b6      	beq.n	800b742 <_malloc_r+0x22>
 800b7d4:	1b9b      	subs	r3, r3, r6
 800b7d6:	50a3      	str	r3, [r4, r2]
 800b7d8:	e7b3      	b.n	800b742 <_malloc_r+0x22>
 800b7da:	6862      	ldr	r2, [r4, #4]
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	bf0c      	ite	eq
 800b7e0:	6032      	streq	r2, [r6, #0]
 800b7e2:	605a      	strne	r2, [r3, #4]
 800b7e4:	e7ec      	b.n	800b7c0 <_malloc_r+0xa0>
 800b7e6:	4623      	mov	r3, r4
 800b7e8:	6864      	ldr	r4, [r4, #4]
 800b7ea:	e7b2      	b.n	800b752 <_malloc_r+0x32>
 800b7ec:	4634      	mov	r4, r6
 800b7ee:	6876      	ldr	r6, [r6, #4]
 800b7f0:	e7b9      	b.n	800b766 <_malloc_r+0x46>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	f000 f9d4 	bl	800bba4 <__malloc_unlock>
 800b7fc:	e7a1      	b.n	800b742 <_malloc_r+0x22>
 800b7fe:	6025      	str	r5, [r4, #0]
 800b800:	e7de      	b.n	800b7c0 <_malloc_r+0xa0>
 800b802:	bf00      	nop
 800b804:	200005d0 	.word	0x200005d0

0800b808 <__ssputs_r>:
 800b808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b80c:	688e      	ldr	r6, [r1, #8]
 800b80e:	4682      	mov	sl, r0
 800b810:	429e      	cmp	r6, r3
 800b812:	460c      	mov	r4, r1
 800b814:	4690      	mov	r8, r2
 800b816:	461f      	mov	r7, r3
 800b818:	d838      	bhi.n	800b88c <__ssputs_r+0x84>
 800b81a:	898a      	ldrh	r2, [r1, #12]
 800b81c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b820:	d032      	beq.n	800b888 <__ssputs_r+0x80>
 800b822:	6825      	ldr	r5, [r4, #0]
 800b824:	6909      	ldr	r1, [r1, #16]
 800b826:	3301      	adds	r3, #1
 800b828:	eba5 0901 	sub.w	r9, r5, r1
 800b82c:	6965      	ldr	r5, [r4, #20]
 800b82e:	444b      	add	r3, r9
 800b830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b838:	106d      	asrs	r5, r5, #1
 800b83a:	429d      	cmp	r5, r3
 800b83c:	bf38      	it	cc
 800b83e:	461d      	movcc	r5, r3
 800b840:	0553      	lsls	r3, r2, #21
 800b842:	d531      	bpl.n	800b8a8 <__ssputs_r+0xa0>
 800b844:	4629      	mov	r1, r5
 800b846:	f7ff ff6b 	bl	800b720 <_malloc_r>
 800b84a:	4606      	mov	r6, r0
 800b84c:	b950      	cbnz	r0, 800b864 <__ssputs_r+0x5c>
 800b84e:	230c      	movs	r3, #12
 800b850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b854:	f8ca 3000 	str.w	r3, [sl]
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b864:	464a      	mov	r2, r9
 800b866:	6921      	ldr	r1, [r4, #16]
 800b868:	f7ff fb4e 	bl	800af08 <memcpy>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	6126      	str	r6, [r4, #16]
 800b87a:	444e      	add	r6, r9
 800b87c:	6026      	str	r6, [r4, #0]
 800b87e:	463e      	mov	r6, r7
 800b880:	6165      	str	r5, [r4, #20]
 800b882:	eba5 0509 	sub.w	r5, r5, r9
 800b886:	60a5      	str	r5, [r4, #8]
 800b888:	42be      	cmp	r6, r7
 800b88a:	d900      	bls.n	800b88e <__ssputs_r+0x86>
 800b88c:	463e      	mov	r6, r7
 800b88e:	4632      	mov	r2, r6
 800b890:	4641      	mov	r1, r8
 800b892:	6820      	ldr	r0, [r4, #0]
 800b894:	f000 f966 	bl	800bb64 <memmove>
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	2000      	movs	r0, #0
 800b89c:	1b9b      	subs	r3, r3, r6
 800b89e:	60a3      	str	r3, [r4, #8]
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	4433      	add	r3, r6
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	e7db      	b.n	800b860 <__ssputs_r+0x58>
 800b8a8:	462a      	mov	r2, r5
 800b8aa:	f000 f981 	bl	800bbb0 <_realloc_r>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d1e1      	bne.n	800b878 <__ssputs_r+0x70>
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	6921      	ldr	r1, [r4, #16]
 800b8b8:	f7ff feca 	bl	800b650 <_free_r>
 800b8bc:	e7c7      	b.n	800b84e <__ssputs_r+0x46>
	...

0800b8c0 <_svfiprintf_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	898b      	ldrh	r3, [r1, #12]
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	061b      	lsls	r3, r3, #24
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	b09d      	sub	sp, #116	; 0x74
 800b8d2:	d50e      	bpl.n	800b8f2 <_svfiprintf_r+0x32>
 800b8d4:	690b      	ldr	r3, [r1, #16]
 800b8d6:	b963      	cbnz	r3, 800b8f2 <_svfiprintf_r+0x32>
 800b8d8:	2140      	movs	r1, #64	; 0x40
 800b8da:	f7ff ff21 	bl	800b720 <_malloc_r>
 800b8de:	6028      	str	r0, [r5, #0]
 800b8e0:	6128      	str	r0, [r5, #16]
 800b8e2:	b920      	cbnz	r0, 800b8ee <_svfiprintf_r+0x2e>
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ec:	e0d1      	b.n	800ba92 <_svfiprintf_r+0x1d2>
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	616b      	str	r3, [r5, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f6:	2320      	movs	r3, #32
 800b8f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fc:	2330      	movs	r3, #48	; 0x30
 800b8fe:	f04f 0901 	mov.w	r9, #1
 800b902:	f8cd 800c 	str.w	r8, [sp, #12]
 800b906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800baac <_svfiprintf_r+0x1ec>
 800b90a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b90e:	4623      	mov	r3, r4
 800b910:	469a      	mov	sl, r3
 800b912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b916:	b10a      	cbz	r2, 800b91c <_svfiprintf_r+0x5c>
 800b918:	2a25      	cmp	r2, #37	; 0x25
 800b91a:	d1f9      	bne.n	800b910 <_svfiprintf_r+0x50>
 800b91c:	ebba 0b04 	subs.w	fp, sl, r4
 800b920:	d00b      	beq.n	800b93a <_svfiprintf_r+0x7a>
 800b922:	465b      	mov	r3, fp
 800b924:	4622      	mov	r2, r4
 800b926:	4629      	mov	r1, r5
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff ff6d 	bl	800b808 <__ssputs_r>
 800b92e:	3001      	adds	r0, #1
 800b930:	f000 80aa 	beq.w	800ba88 <_svfiprintf_r+0x1c8>
 800b934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b936:	445a      	add	r2, fp
 800b938:	9209      	str	r2, [sp, #36]	; 0x24
 800b93a:	f89a 3000 	ldrb.w	r3, [sl]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80a2 	beq.w	800ba88 <_svfiprintf_r+0x1c8>
 800b944:	2300      	movs	r3, #0
 800b946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94e:	f10a 0a01 	add.w	sl, sl, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	9307      	str	r3, [sp, #28]
 800b956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b95a:	931a      	str	r3, [sp, #104]	; 0x68
 800b95c:	4654      	mov	r4, sl
 800b95e:	2205      	movs	r2, #5
 800b960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b964:	4851      	ldr	r0, [pc, #324]	; (800baac <_svfiprintf_r+0x1ec>)
 800b966:	f7ff fac1 	bl	800aeec <memchr>
 800b96a:	9a04      	ldr	r2, [sp, #16]
 800b96c:	b9d8      	cbnz	r0, 800b9a6 <_svfiprintf_r+0xe6>
 800b96e:	06d0      	lsls	r0, r2, #27
 800b970:	bf44      	itt	mi
 800b972:	2320      	movmi	r3, #32
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b978:	0711      	lsls	r1, r2, #28
 800b97a:	bf44      	itt	mi
 800b97c:	232b      	movmi	r3, #43	; 0x2b
 800b97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b982:	f89a 3000 	ldrb.w	r3, [sl]
 800b986:	2b2a      	cmp	r3, #42	; 0x2a
 800b988:	d015      	beq.n	800b9b6 <_svfiprintf_r+0xf6>
 800b98a:	4654      	mov	r4, sl
 800b98c:	2000      	movs	r0, #0
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	9a07      	ldr	r2, [sp, #28]
 800b994:	4621      	mov	r1, r4
 800b996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b99a:	3b30      	subs	r3, #48	; 0x30
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d94e      	bls.n	800ba3e <_svfiprintf_r+0x17e>
 800b9a0:	b1b0      	cbz	r0, 800b9d0 <_svfiprintf_r+0x110>
 800b9a2:	9207      	str	r2, [sp, #28]
 800b9a4:	e014      	b.n	800b9d0 <_svfiprintf_r+0x110>
 800b9a6:	eba0 0308 	sub.w	r3, r0, r8
 800b9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	46a2      	mov	sl, r4
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	e7d2      	b.n	800b95c <_svfiprintf_r+0x9c>
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	1d19      	adds	r1, r3, #4
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	9103      	str	r1, [sp, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bfbb      	ittet	lt
 800b9c2:	425b      	neglt	r3, r3
 800b9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c8:	9307      	strge	r3, [sp, #28]
 800b9ca:	9307      	strlt	r3, [sp, #28]
 800b9cc:	bfb8      	it	lt
 800b9ce:	9204      	strlt	r2, [sp, #16]
 800b9d0:	7823      	ldrb	r3, [r4, #0]
 800b9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d4:	d10c      	bne.n	800b9f0 <_svfiprintf_r+0x130>
 800b9d6:	7863      	ldrb	r3, [r4, #1]
 800b9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9da:	d135      	bne.n	800ba48 <_svfiprintf_r+0x188>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	3402      	adds	r4, #2
 800b9e0:	1d1a      	adds	r2, r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	9203      	str	r2, [sp, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfb8      	it	lt
 800b9ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9ee:	9305      	str	r3, [sp, #20]
 800b9f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bab0 <_svfiprintf_r+0x1f0>
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	7821      	ldrb	r1, [r4, #0]
 800b9fa:	f7ff fa77 	bl	800aeec <memchr>
 800b9fe:	b140      	cbz	r0, 800ba12 <_svfiprintf_r+0x152>
 800ba00:	2340      	movs	r3, #64	; 0x40
 800ba02:	eba0 000a 	sub.w	r0, r0, sl
 800ba06:	fa03 f000 	lsl.w	r0, r3, r0
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	4303      	orrs	r3, r0
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba16:	2206      	movs	r2, #6
 800ba18:	4826      	ldr	r0, [pc, #152]	; (800bab4 <_svfiprintf_r+0x1f4>)
 800ba1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1e:	f7ff fa65 	bl	800aeec <memchr>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d038      	beq.n	800ba98 <_svfiprintf_r+0x1d8>
 800ba26:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <_svfiprintf_r+0x1f8>)
 800ba28:	bb1b      	cbnz	r3, 800ba72 <_svfiprintf_r+0x1b2>
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	3307      	adds	r3, #7
 800ba2e:	f023 0307 	bic.w	r3, r3, #7
 800ba32:	3308      	adds	r3, #8
 800ba34:	9303      	str	r3, [sp, #12]
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	4433      	add	r3, r6
 800ba3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3c:	e767      	b.n	800b90e <_svfiprintf_r+0x4e>
 800ba3e:	460c      	mov	r4, r1
 800ba40:	2001      	movs	r0, #1
 800ba42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba46:	e7a5      	b.n	800b994 <_svfiprintf_r+0xd4>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f04f 0c0a 	mov.w	ip, #10
 800ba4e:	4619      	mov	r1, r3
 800ba50:	3401      	adds	r4, #1
 800ba52:	9305      	str	r3, [sp, #20]
 800ba54:	4620      	mov	r0, r4
 800ba56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba5a:	3a30      	subs	r2, #48	; 0x30
 800ba5c:	2a09      	cmp	r2, #9
 800ba5e:	d903      	bls.n	800ba68 <_svfiprintf_r+0x1a8>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0c5      	beq.n	800b9f0 <_svfiprintf_r+0x130>
 800ba64:	9105      	str	r1, [sp, #20]
 800ba66:	e7c3      	b.n	800b9f0 <_svfiprintf_r+0x130>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba70:	e7f0      	b.n	800ba54 <_svfiprintf_r+0x194>
 800ba72:	ab03      	add	r3, sp, #12
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	462a      	mov	r2, r5
 800ba78:	4638      	mov	r0, r7
 800ba7a:	4b10      	ldr	r3, [pc, #64]	; (800babc <_svfiprintf_r+0x1fc>)
 800ba7c:	a904      	add	r1, sp, #16
 800ba7e:	f7fd ff33 	bl	80098e8 <_printf_float>
 800ba82:	1c42      	adds	r2, r0, #1
 800ba84:	4606      	mov	r6, r0
 800ba86:	d1d6      	bne.n	800ba36 <_svfiprintf_r+0x176>
 800ba88:	89ab      	ldrh	r3, [r5, #12]
 800ba8a:	065b      	lsls	r3, r3, #25
 800ba8c:	f53f af2c 	bmi.w	800b8e8 <_svfiprintf_r+0x28>
 800ba90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba92:	b01d      	add	sp, #116	; 0x74
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	ab03      	add	r3, sp, #12
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	4638      	mov	r0, r7
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <_svfiprintf_r+0x1fc>)
 800baa2:	a904      	add	r1, sp, #16
 800baa4:	f7fe f9bc 	bl	8009e20 <_printf_i>
 800baa8:	e7eb      	b.n	800ba82 <_svfiprintf_r+0x1c2>
 800baaa:	bf00      	nop
 800baac:	0800d0dc 	.word	0x0800d0dc
 800bab0:	0800d0e2 	.word	0x0800d0e2
 800bab4:	0800d0e6 	.word	0x0800d0e6
 800bab8:	080098e9 	.word	0x080098e9
 800babc:	0800b809 	.word	0x0800b809

0800bac0 <_sbrk_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d05      	ldr	r5, [pc, #20]	; (800badc <_sbrk_r+0x1c>)
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f8 ffee 	bl	8004aac <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_sbrk_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_sbrk_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200005d8 	.word	0x200005d8

0800bae0 <__assert_func>:
 800bae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bae2:	4614      	mov	r4, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <__assert_func+0x2c>)
 800bae8:	4605      	mov	r5, r0
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68d8      	ldr	r0, [r3, #12]
 800baee:	b14c      	cbz	r4, 800bb04 <__assert_func+0x24>
 800baf0:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <__assert_func+0x30>)
 800baf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baf6:	9100      	str	r1, [sp, #0]
 800baf8:	462b      	mov	r3, r5
 800bafa:	4906      	ldr	r1, [pc, #24]	; (800bb14 <__assert_func+0x34>)
 800bafc:	f000 f80e 	bl	800bb1c <fiprintf>
 800bb00:	f000 faaa 	bl	800c058 <abort>
 800bb04:	4b04      	ldr	r3, [pc, #16]	; (800bb18 <__assert_func+0x38>)
 800bb06:	461c      	mov	r4, r3
 800bb08:	e7f3      	b.n	800baf2 <__assert_func+0x12>
 800bb0a:	bf00      	nop
 800bb0c:	200000f8 	.word	0x200000f8
 800bb10:	0800d0ed 	.word	0x0800d0ed
 800bb14:	0800d0fa 	.word	0x0800d0fa
 800bb18:	0800d128 	.word	0x0800d128

0800bb1c <fiprintf>:
 800bb1c:	b40e      	push	{r1, r2, r3}
 800bb1e:	b503      	push	{r0, r1, lr}
 800bb20:	4601      	mov	r1, r0
 800bb22:	ab03      	add	r3, sp, #12
 800bb24:	4805      	ldr	r0, [pc, #20]	; (800bb3c <fiprintf+0x20>)
 800bb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2a:	6800      	ldr	r0, [r0, #0]
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	f000 f895 	bl	800bc5c <_vfiprintf_r>
 800bb32:	b002      	add	sp, #8
 800bb34:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb38:	b003      	add	sp, #12
 800bb3a:	4770      	bx	lr
 800bb3c:	200000f8 	.word	0x200000f8

0800bb40 <__ascii_mbtowc>:
 800bb40:	b082      	sub	sp, #8
 800bb42:	b901      	cbnz	r1, 800bb46 <__ascii_mbtowc+0x6>
 800bb44:	a901      	add	r1, sp, #4
 800bb46:	b142      	cbz	r2, 800bb5a <__ascii_mbtowc+0x1a>
 800bb48:	b14b      	cbz	r3, 800bb5e <__ascii_mbtowc+0x1e>
 800bb4a:	7813      	ldrb	r3, [r2, #0]
 800bb4c:	600b      	str	r3, [r1, #0]
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	1e10      	subs	r0, r2, #0
 800bb52:	bf18      	it	ne
 800bb54:	2001      	movne	r0, #1
 800bb56:	b002      	add	sp, #8
 800bb58:	4770      	bx	lr
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	e7fb      	b.n	800bb56 <__ascii_mbtowc+0x16>
 800bb5e:	f06f 0001 	mvn.w	r0, #1
 800bb62:	e7f8      	b.n	800bb56 <__ascii_mbtowc+0x16>

0800bb64 <memmove>:
 800bb64:	4288      	cmp	r0, r1
 800bb66:	b510      	push	{r4, lr}
 800bb68:	eb01 0402 	add.w	r4, r1, r2
 800bb6c:	d902      	bls.n	800bb74 <memmove+0x10>
 800bb6e:	4284      	cmp	r4, r0
 800bb70:	4623      	mov	r3, r4
 800bb72:	d807      	bhi.n	800bb84 <memmove+0x20>
 800bb74:	1e43      	subs	r3, r0, #1
 800bb76:	42a1      	cmp	r1, r4
 800bb78:	d008      	beq.n	800bb8c <memmove+0x28>
 800bb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb82:	e7f8      	b.n	800bb76 <memmove+0x12>
 800bb84:	4601      	mov	r1, r0
 800bb86:	4402      	add	r2, r0
 800bb88:	428a      	cmp	r2, r1
 800bb8a:	d100      	bne.n	800bb8e <memmove+0x2a>
 800bb8c:	bd10      	pop	{r4, pc}
 800bb8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb96:	e7f7      	b.n	800bb88 <memmove+0x24>

0800bb98 <__malloc_lock>:
 800bb98:	4801      	ldr	r0, [pc, #4]	; (800bba0 <__malloc_lock+0x8>)
 800bb9a:	f000 bc19 	b.w	800c3d0 <__retarget_lock_acquire_recursive>
 800bb9e:	bf00      	nop
 800bba0:	200005dc 	.word	0x200005dc

0800bba4 <__malloc_unlock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__malloc_unlock+0x8>)
 800bba6:	f000 bc14 	b.w	800c3d2 <__retarget_lock_release_recursive>
 800bbaa:	bf00      	nop
 800bbac:	200005dc 	.word	0x200005dc

0800bbb0 <_realloc_r>:
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4614      	mov	r4, r2
 800bbb8:	460e      	mov	r6, r1
 800bbba:	b921      	cbnz	r1, 800bbc6 <_realloc_r+0x16>
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc2:	f7ff bdad 	b.w	800b720 <_malloc_r>
 800bbc6:	b92a      	cbnz	r2, 800bbd4 <_realloc_r+0x24>
 800bbc8:	f7ff fd42 	bl	800b650 <_free_r>
 800bbcc:	4625      	mov	r5, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	f000 fc64 	bl	800c4a0 <_malloc_usable_size_r>
 800bbd8:	4284      	cmp	r4, r0
 800bbda:	4607      	mov	r7, r0
 800bbdc:	d802      	bhi.n	800bbe4 <_realloc_r+0x34>
 800bbde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbe2:	d812      	bhi.n	800bc0a <_realloc_r+0x5a>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	f7ff fd9a 	bl	800b720 <_malloc_r>
 800bbec:	4605      	mov	r5, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0ed      	beq.n	800bbce <_realloc_r+0x1e>
 800bbf2:	42bc      	cmp	r4, r7
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	bf28      	it	cs
 800bbfa:	463a      	movcs	r2, r7
 800bbfc:	f7ff f984 	bl	800af08 <memcpy>
 800bc00:	4631      	mov	r1, r6
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7ff fd24 	bl	800b650 <_free_r>
 800bc08:	e7e1      	b.n	800bbce <_realloc_r+0x1e>
 800bc0a:	4635      	mov	r5, r6
 800bc0c:	e7df      	b.n	800bbce <_realloc_r+0x1e>

0800bc0e <__sfputc_r>:
 800bc0e:	6893      	ldr	r3, [r2, #8]
 800bc10:	b410      	push	{r4}
 800bc12:	3b01      	subs	r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	6093      	str	r3, [r2, #8]
 800bc18:	da07      	bge.n	800bc2a <__sfputc_r+0x1c>
 800bc1a:	6994      	ldr	r4, [r2, #24]
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	db01      	blt.n	800bc24 <__sfputc_r+0x16>
 800bc20:	290a      	cmp	r1, #10
 800bc22:	d102      	bne.n	800bc2a <__sfputc_r+0x1c>
 800bc24:	bc10      	pop	{r4}
 800bc26:	f000 b949 	b.w	800bebc <__swbuf_r>
 800bc2a:	6813      	ldr	r3, [r2, #0]
 800bc2c:	1c58      	adds	r0, r3, #1
 800bc2e:	6010      	str	r0, [r2, #0]
 800bc30:	7019      	strb	r1, [r3, #0]
 800bc32:	4608      	mov	r0, r1
 800bc34:	bc10      	pop	{r4}
 800bc36:	4770      	bx	lr

0800bc38 <__sfputs_r>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	460f      	mov	r7, r1
 800bc3e:	4614      	mov	r4, r2
 800bc40:	18d5      	adds	r5, r2, r3
 800bc42:	42ac      	cmp	r4, r5
 800bc44:	d101      	bne.n	800bc4a <__sfputs_r+0x12>
 800bc46:	2000      	movs	r0, #0
 800bc48:	e007      	b.n	800bc5a <__sfputs_r+0x22>
 800bc4a:	463a      	mov	r2, r7
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc52:	f7ff ffdc 	bl	800bc0e <__sfputc_r>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d1f3      	bne.n	800bc42 <__sfputs_r+0xa>
 800bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc5c <_vfiprintf_r>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	460d      	mov	r5, r1
 800bc62:	4614      	mov	r4, r2
 800bc64:	4698      	mov	r8, r3
 800bc66:	4606      	mov	r6, r0
 800bc68:	b09d      	sub	sp, #116	; 0x74
 800bc6a:	b118      	cbz	r0, 800bc74 <_vfiprintf_r+0x18>
 800bc6c:	6983      	ldr	r3, [r0, #24]
 800bc6e:	b90b      	cbnz	r3, 800bc74 <_vfiprintf_r+0x18>
 800bc70:	f000 fb10 	bl	800c294 <__sinit>
 800bc74:	4b89      	ldr	r3, [pc, #548]	; (800be9c <_vfiprintf_r+0x240>)
 800bc76:	429d      	cmp	r5, r3
 800bc78:	d11b      	bne.n	800bcb2 <_vfiprintf_r+0x56>
 800bc7a:	6875      	ldr	r5, [r6, #4]
 800bc7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7e:	07d9      	lsls	r1, r3, #31
 800bc80:	d405      	bmi.n	800bc8e <_vfiprintf_r+0x32>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	059a      	lsls	r2, r3, #22
 800bc86:	d402      	bmi.n	800bc8e <_vfiprintf_r+0x32>
 800bc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc8a:	f000 fba1 	bl	800c3d0 <__retarget_lock_acquire_recursive>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	071b      	lsls	r3, r3, #28
 800bc92:	d501      	bpl.n	800bc98 <_vfiprintf_r+0x3c>
 800bc94:	692b      	ldr	r3, [r5, #16]
 800bc96:	b9eb      	cbnz	r3, 800bcd4 <_vfiprintf_r+0x78>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f000 f96e 	bl	800bf7c <__swsetup_r>
 800bca0:	b1c0      	cbz	r0, 800bcd4 <_vfiprintf_r+0x78>
 800bca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca4:	07dc      	lsls	r4, r3, #31
 800bca6:	d50e      	bpl.n	800bcc6 <_vfiprintf_r+0x6a>
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcac:	b01d      	add	sp, #116	; 0x74
 800bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb2:	4b7b      	ldr	r3, [pc, #492]	; (800bea0 <_vfiprintf_r+0x244>)
 800bcb4:	429d      	cmp	r5, r3
 800bcb6:	d101      	bne.n	800bcbc <_vfiprintf_r+0x60>
 800bcb8:	68b5      	ldr	r5, [r6, #8]
 800bcba:	e7df      	b.n	800bc7c <_vfiprintf_r+0x20>
 800bcbc:	4b79      	ldr	r3, [pc, #484]	; (800bea4 <_vfiprintf_r+0x248>)
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	bf08      	it	eq
 800bcc2:	68f5      	ldreq	r5, [r6, #12]
 800bcc4:	e7da      	b.n	800bc7c <_vfiprintf_r+0x20>
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	0598      	lsls	r0, r3, #22
 800bcca:	d4ed      	bmi.n	800bca8 <_vfiprintf_r+0x4c>
 800bccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcce:	f000 fb80 	bl	800c3d2 <__retarget_lock_release_recursive>
 800bcd2:	e7e9      	b.n	800bca8 <_vfiprintf_r+0x4c>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd8:	2320      	movs	r3, #32
 800bcda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcde:	2330      	movs	r3, #48	; 0x30
 800bce0:	f04f 0901 	mov.w	r9, #1
 800bce4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bce8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bea8 <_vfiprintf_r+0x24c>
 800bcec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcf0:	4623      	mov	r3, r4
 800bcf2:	469a      	mov	sl, r3
 800bcf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcf8:	b10a      	cbz	r2, 800bcfe <_vfiprintf_r+0xa2>
 800bcfa:	2a25      	cmp	r2, #37	; 0x25
 800bcfc:	d1f9      	bne.n	800bcf2 <_vfiprintf_r+0x96>
 800bcfe:	ebba 0b04 	subs.w	fp, sl, r4
 800bd02:	d00b      	beq.n	800bd1c <_vfiprintf_r+0xc0>
 800bd04:	465b      	mov	r3, fp
 800bd06:	4622      	mov	r2, r4
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7ff ff94 	bl	800bc38 <__sfputs_r>
 800bd10:	3001      	adds	r0, #1
 800bd12:	f000 80aa 	beq.w	800be6a <_vfiprintf_r+0x20e>
 800bd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd18:	445a      	add	r2, fp
 800bd1a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f000 80a2 	beq.w	800be6a <_vfiprintf_r+0x20e>
 800bd26:	2300      	movs	r3, #0
 800bd28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd30:	f10a 0a01 	add.w	sl, sl, #1
 800bd34:	9304      	str	r3, [sp, #16]
 800bd36:	9307      	str	r3, [sp, #28]
 800bd38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd3c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd3e:	4654      	mov	r4, sl
 800bd40:	2205      	movs	r2, #5
 800bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd46:	4858      	ldr	r0, [pc, #352]	; (800bea8 <_vfiprintf_r+0x24c>)
 800bd48:	f7ff f8d0 	bl	800aeec <memchr>
 800bd4c:	9a04      	ldr	r2, [sp, #16]
 800bd4e:	b9d8      	cbnz	r0, 800bd88 <_vfiprintf_r+0x12c>
 800bd50:	06d1      	lsls	r1, r2, #27
 800bd52:	bf44      	itt	mi
 800bd54:	2320      	movmi	r3, #32
 800bd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd5a:	0713      	lsls	r3, r2, #28
 800bd5c:	bf44      	itt	mi
 800bd5e:	232b      	movmi	r3, #43	; 0x2b
 800bd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd64:	f89a 3000 	ldrb.w	r3, [sl]
 800bd68:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6a:	d015      	beq.n	800bd98 <_vfiprintf_r+0x13c>
 800bd6c:	4654      	mov	r4, sl
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f04f 0c0a 	mov.w	ip, #10
 800bd74:	9a07      	ldr	r2, [sp, #28]
 800bd76:	4621      	mov	r1, r4
 800bd78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd7c:	3b30      	subs	r3, #48	; 0x30
 800bd7e:	2b09      	cmp	r3, #9
 800bd80:	d94e      	bls.n	800be20 <_vfiprintf_r+0x1c4>
 800bd82:	b1b0      	cbz	r0, 800bdb2 <_vfiprintf_r+0x156>
 800bd84:	9207      	str	r2, [sp, #28]
 800bd86:	e014      	b.n	800bdb2 <_vfiprintf_r+0x156>
 800bd88:	eba0 0308 	sub.w	r3, r0, r8
 800bd8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd90:	4313      	orrs	r3, r2
 800bd92:	46a2      	mov	sl, r4
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	e7d2      	b.n	800bd3e <_vfiprintf_r+0xe2>
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	1d19      	adds	r1, r3, #4
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	9103      	str	r1, [sp, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	bfbb      	ittet	lt
 800bda4:	425b      	neglt	r3, r3
 800bda6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdaa:	9307      	strge	r3, [sp, #28]
 800bdac:	9307      	strlt	r3, [sp, #28]
 800bdae:	bfb8      	it	lt
 800bdb0:	9204      	strlt	r2, [sp, #16]
 800bdb2:	7823      	ldrb	r3, [r4, #0]
 800bdb4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdb6:	d10c      	bne.n	800bdd2 <_vfiprintf_r+0x176>
 800bdb8:	7863      	ldrb	r3, [r4, #1]
 800bdba:	2b2a      	cmp	r3, #42	; 0x2a
 800bdbc:	d135      	bne.n	800be2a <_vfiprintf_r+0x1ce>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	3402      	adds	r4, #2
 800bdc2:	1d1a      	adds	r2, r3, #4
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	9203      	str	r2, [sp, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	bfb8      	it	lt
 800bdcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdd0:	9305      	str	r3, [sp, #20]
 800bdd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800beac <_vfiprintf_r+0x250>
 800bdd6:	2203      	movs	r2, #3
 800bdd8:	4650      	mov	r0, sl
 800bdda:	7821      	ldrb	r1, [r4, #0]
 800bddc:	f7ff f886 	bl	800aeec <memchr>
 800bde0:	b140      	cbz	r0, 800bdf4 <_vfiprintf_r+0x198>
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	eba0 000a 	sub.w	r0, r0, sl
 800bde8:	fa03 f000 	lsl.w	r0, r3, r0
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	3401      	adds	r4, #1
 800bdf0:	4303      	orrs	r3, r0
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf8:	2206      	movs	r2, #6
 800bdfa:	482d      	ldr	r0, [pc, #180]	; (800beb0 <_vfiprintf_r+0x254>)
 800bdfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be00:	f7ff f874 	bl	800aeec <memchr>
 800be04:	2800      	cmp	r0, #0
 800be06:	d03f      	beq.n	800be88 <_vfiprintf_r+0x22c>
 800be08:	4b2a      	ldr	r3, [pc, #168]	; (800beb4 <_vfiprintf_r+0x258>)
 800be0a:	bb1b      	cbnz	r3, 800be54 <_vfiprintf_r+0x1f8>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	3307      	adds	r3, #7
 800be10:	f023 0307 	bic.w	r3, r3, #7
 800be14:	3308      	adds	r3, #8
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1a:	443b      	add	r3, r7
 800be1c:	9309      	str	r3, [sp, #36]	; 0x24
 800be1e:	e767      	b.n	800bcf0 <_vfiprintf_r+0x94>
 800be20:	460c      	mov	r4, r1
 800be22:	2001      	movs	r0, #1
 800be24:	fb0c 3202 	mla	r2, ip, r2, r3
 800be28:	e7a5      	b.n	800bd76 <_vfiprintf_r+0x11a>
 800be2a:	2300      	movs	r3, #0
 800be2c:	f04f 0c0a 	mov.w	ip, #10
 800be30:	4619      	mov	r1, r3
 800be32:	3401      	adds	r4, #1
 800be34:	9305      	str	r3, [sp, #20]
 800be36:	4620      	mov	r0, r4
 800be38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be3c:	3a30      	subs	r2, #48	; 0x30
 800be3e:	2a09      	cmp	r2, #9
 800be40:	d903      	bls.n	800be4a <_vfiprintf_r+0x1ee>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0c5      	beq.n	800bdd2 <_vfiprintf_r+0x176>
 800be46:	9105      	str	r1, [sp, #20]
 800be48:	e7c3      	b.n	800bdd2 <_vfiprintf_r+0x176>
 800be4a:	4604      	mov	r4, r0
 800be4c:	2301      	movs	r3, #1
 800be4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be52:	e7f0      	b.n	800be36 <_vfiprintf_r+0x1da>
 800be54:	ab03      	add	r3, sp, #12
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	462a      	mov	r2, r5
 800be5a:	4630      	mov	r0, r6
 800be5c:	4b16      	ldr	r3, [pc, #88]	; (800beb8 <_vfiprintf_r+0x25c>)
 800be5e:	a904      	add	r1, sp, #16
 800be60:	f7fd fd42 	bl	80098e8 <_printf_float>
 800be64:	4607      	mov	r7, r0
 800be66:	1c78      	adds	r0, r7, #1
 800be68:	d1d6      	bne.n	800be18 <_vfiprintf_r+0x1bc>
 800be6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be6c:	07d9      	lsls	r1, r3, #31
 800be6e:	d405      	bmi.n	800be7c <_vfiprintf_r+0x220>
 800be70:	89ab      	ldrh	r3, [r5, #12]
 800be72:	059a      	lsls	r2, r3, #22
 800be74:	d402      	bmi.n	800be7c <_vfiprintf_r+0x220>
 800be76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be78:	f000 faab 	bl	800c3d2 <__retarget_lock_release_recursive>
 800be7c:	89ab      	ldrh	r3, [r5, #12]
 800be7e:	065b      	lsls	r3, r3, #25
 800be80:	f53f af12 	bmi.w	800bca8 <_vfiprintf_r+0x4c>
 800be84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be86:	e711      	b.n	800bcac <_vfiprintf_r+0x50>
 800be88:	ab03      	add	r3, sp, #12
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	462a      	mov	r2, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <_vfiprintf_r+0x25c>)
 800be92:	a904      	add	r1, sp, #16
 800be94:	f7fd ffc4 	bl	8009e20 <_printf_i>
 800be98:	e7e4      	b.n	800be64 <_vfiprintf_r+0x208>
 800be9a:	bf00      	nop
 800be9c:	0800d154 	.word	0x0800d154
 800bea0:	0800d174 	.word	0x0800d174
 800bea4:	0800d134 	.word	0x0800d134
 800bea8:	0800d0dc 	.word	0x0800d0dc
 800beac:	0800d0e2 	.word	0x0800d0e2
 800beb0:	0800d0e6 	.word	0x0800d0e6
 800beb4:	080098e9 	.word	0x080098e9
 800beb8:	0800bc39 	.word	0x0800bc39

0800bebc <__swbuf_r>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	460e      	mov	r6, r1
 800bec0:	4614      	mov	r4, r2
 800bec2:	4605      	mov	r5, r0
 800bec4:	b118      	cbz	r0, 800bece <__swbuf_r+0x12>
 800bec6:	6983      	ldr	r3, [r0, #24]
 800bec8:	b90b      	cbnz	r3, 800bece <__swbuf_r+0x12>
 800beca:	f000 f9e3 	bl	800c294 <__sinit>
 800bece:	4b21      	ldr	r3, [pc, #132]	; (800bf54 <__swbuf_r+0x98>)
 800bed0:	429c      	cmp	r4, r3
 800bed2:	d12b      	bne.n	800bf2c <__swbuf_r+0x70>
 800bed4:	686c      	ldr	r4, [r5, #4]
 800bed6:	69a3      	ldr	r3, [r4, #24]
 800bed8:	60a3      	str	r3, [r4, #8]
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	071a      	lsls	r2, r3, #28
 800bede:	d52f      	bpl.n	800bf40 <__swbuf_r+0x84>
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	b36b      	cbz	r3, 800bf40 <__swbuf_r+0x84>
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	b2f6      	uxtb	r6, r6
 800beea:	1ac0      	subs	r0, r0, r3
 800beec:	6963      	ldr	r3, [r4, #20]
 800beee:	4637      	mov	r7, r6
 800bef0:	4283      	cmp	r3, r0
 800bef2:	dc04      	bgt.n	800befe <__swbuf_r+0x42>
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 f938 	bl	800c16c <_fflush_r>
 800befc:	bb30      	cbnz	r0, 800bf4c <__swbuf_r+0x90>
 800befe:	68a3      	ldr	r3, [r4, #8]
 800bf00:	3001      	adds	r0, #1
 800bf02:	3b01      	subs	r3, #1
 800bf04:	60a3      	str	r3, [r4, #8]
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	6022      	str	r2, [r4, #0]
 800bf0c:	701e      	strb	r6, [r3, #0]
 800bf0e:	6963      	ldr	r3, [r4, #20]
 800bf10:	4283      	cmp	r3, r0
 800bf12:	d004      	beq.n	800bf1e <__swbuf_r+0x62>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	07db      	lsls	r3, r3, #31
 800bf18:	d506      	bpl.n	800bf28 <__swbuf_r+0x6c>
 800bf1a:	2e0a      	cmp	r6, #10
 800bf1c:	d104      	bne.n	800bf28 <__swbuf_r+0x6c>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 f923 	bl	800c16c <_fflush_r>
 800bf26:	b988      	cbnz	r0, 800bf4c <__swbuf_r+0x90>
 800bf28:	4638      	mov	r0, r7
 800bf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <__swbuf_r+0x9c>)
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	d101      	bne.n	800bf36 <__swbuf_r+0x7a>
 800bf32:	68ac      	ldr	r4, [r5, #8]
 800bf34:	e7cf      	b.n	800bed6 <__swbuf_r+0x1a>
 800bf36:	4b09      	ldr	r3, [pc, #36]	; (800bf5c <__swbuf_r+0xa0>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	bf08      	it	eq
 800bf3c:	68ec      	ldreq	r4, [r5, #12]
 800bf3e:	e7ca      	b.n	800bed6 <__swbuf_r+0x1a>
 800bf40:	4621      	mov	r1, r4
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 f81a 	bl	800bf7c <__swsetup_r>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d0cb      	beq.n	800bee4 <__swbuf_r+0x28>
 800bf4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf50:	e7ea      	b.n	800bf28 <__swbuf_r+0x6c>
 800bf52:	bf00      	nop
 800bf54:	0800d154 	.word	0x0800d154
 800bf58:	0800d174 	.word	0x0800d174
 800bf5c:	0800d134 	.word	0x0800d134

0800bf60 <__ascii_wctomb>:
 800bf60:	4603      	mov	r3, r0
 800bf62:	4608      	mov	r0, r1
 800bf64:	b141      	cbz	r1, 800bf78 <__ascii_wctomb+0x18>
 800bf66:	2aff      	cmp	r2, #255	; 0xff
 800bf68:	d904      	bls.n	800bf74 <__ascii_wctomb+0x14>
 800bf6a:	228a      	movs	r2, #138	; 0x8a
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	4770      	bx	lr
 800bf74:	2001      	movs	r0, #1
 800bf76:	700a      	strb	r2, [r1, #0]
 800bf78:	4770      	bx	lr
	...

0800bf7c <__swsetup_r>:
 800bf7c:	4b32      	ldr	r3, [pc, #200]	; (800c048 <__swsetup_r+0xcc>)
 800bf7e:	b570      	push	{r4, r5, r6, lr}
 800bf80:	681d      	ldr	r5, [r3, #0]
 800bf82:	4606      	mov	r6, r0
 800bf84:	460c      	mov	r4, r1
 800bf86:	b125      	cbz	r5, 800bf92 <__swsetup_r+0x16>
 800bf88:	69ab      	ldr	r3, [r5, #24]
 800bf8a:	b913      	cbnz	r3, 800bf92 <__swsetup_r+0x16>
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f000 f981 	bl	800c294 <__sinit>
 800bf92:	4b2e      	ldr	r3, [pc, #184]	; (800c04c <__swsetup_r+0xd0>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d10f      	bne.n	800bfb8 <__swsetup_r+0x3c>
 800bf98:	686c      	ldr	r4, [r5, #4]
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfa0:	0719      	lsls	r1, r3, #28
 800bfa2:	d42c      	bmi.n	800bffe <__swsetup_r+0x82>
 800bfa4:	06dd      	lsls	r5, r3, #27
 800bfa6:	d411      	bmi.n	800bfcc <__swsetup_r+0x50>
 800bfa8:	2309      	movs	r3, #9
 800bfaa:	6033      	str	r3, [r6, #0]
 800bfac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	e03e      	b.n	800c036 <__swsetup_r+0xba>
 800bfb8:	4b25      	ldr	r3, [pc, #148]	; (800c050 <__swsetup_r+0xd4>)
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	d101      	bne.n	800bfc2 <__swsetup_r+0x46>
 800bfbe:	68ac      	ldr	r4, [r5, #8]
 800bfc0:	e7eb      	b.n	800bf9a <__swsetup_r+0x1e>
 800bfc2:	4b24      	ldr	r3, [pc, #144]	; (800c054 <__swsetup_r+0xd8>)
 800bfc4:	429c      	cmp	r4, r3
 800bfc6:	bf08      	it	eq
 800bfc8:	68ec      	ldreq	r4, [r5, #12]
 800bfca:	e7e6      	b.n	800bf9a <__swsetup_r+0x1e>
 800bfcc:	0758      	lsls	r0, r3, #29
 800bfce:	d512      	bpl.n	800bff6 <__swsetup_r+0x7a>
 800bfd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfd2:	b141      	cbz	r1, 800bfe6 <__swsetup_r+0x6a>
 800bfd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfd8:	4299      	cmp	r1, r3
 800bfda:	d002      	beq.n	800bfe2 <__swsetup_r+0x66>
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7ff fb37 	bl	800b650 <_free_r>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6363      	str	r3, [r4, #52]	; 0x34
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	2300      	movs	r3, #0
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	6923      	ldr	r3, [r4, #16]
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	f043 0308 	orr.w	r3, r3, #8
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	b94b      	cbnz	r3, 800c016 <__swsetup_r+0x9a>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c00c:	d003      	beq.n	800c016 <__swsetup_r+0x9a>
 800c00e:	4621      	mov	r1, r4
 800c010:	4630      	mov	r0, r6
 800c012:	f000 fa05 	bl	800c420 <__smakebuf_r>
 800c016:	89a0      	ldrh	r0, [r4, #12]
 800c018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c01c:	f010 0301 	ands.w	r3, r0, #1
 800c020:	d00a      	beq.n	800c038 <__swsetup_r+0xbc>
 800c022:	2300      	movs	r3, #0
 800c024:	60a3      	str	r3, [r4, #8]
 800c026:	6963      	ldr	r3, [r4, #20]
 800c028:	425b      	negs	r3, r3
 800c02a:	61a3      	str	r3, [r4, #24]
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	b943      	cbnz	r3, 800c042 <__swsetup_r+0xc6>
 800c030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c034:	d1ba      	bne.n	800bfac <__swsetup_r+0x30>
 800c036:	bd70      	pop	{r4, r5, r6, pc}
 800c038:	0781      	lsls	r1, r0, #30
 800c03a:	bf58      	it	pl
 800c03c:	6963      	ldrpl	r3, [r4, #20]
 800c03e:	60a3      	str	r3, [r4, #8]
 800c040:	e7f4      	b.n	800c02c <__swsetup_r+0xb0>
 800c042:	2000      	movs	r0, #0
 800c044:	e7f7      	b.n	800c036 <__swsetup_r+0xba>
 800c046:	bf00      	nop
 800c048:	200000f8 	.word	0x200000f8
 800c04c:	0800d154 	.word	0x0800d154
 800c050:	0800d174 	.word	0x0800d174
 800c054:	0800d134 	.word	0x0800d134

0800c058 <abort>:
 800c058:	2006      	movs	r0, #6
 800c05a:	b508      	push	{r3, lr}
 800c05c:	f000 fa50 	bl	800c500 <raise>
 800c060:	2001      	movs	r0, #1
 800c062:	f7f8 fccc 	bl	80049fe <_exit>
	...

0800c068 <__sflush_r>:
 800c068:	898a      	ldrh	r2, [r1, #12]
 800c06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06c:	4605      	mov	r5, r0
 800c06e:	0710      	lsls	r0, r2, #28
 800c070:	460c      	mov	r4, r1
 800c072:	d457      	bmi.n	800c124 <__sflush_r+0xbc>
 800c074:	684b      	ldr	r3, [r1, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dc04      	bgt.n	800c084 <__sflush_r+0x1c>
 800c07a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dc01      	bgt.n	800c084 <__sflush_r+0x1c>
 800c080:	2000      	movs	r0, #0
 800c082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c086:	2e00      	cmp	r6, #0
 800c088:	d0fa      	beq.n	800c080 <__sflush_r+0x18>
 800c08a:	2300      	movs	r3, #0
 800c08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c090:	682f      	ldr	r7, [r5, #0]
 800c092:	602b      	str	r3, [r5, #0]
 800c094:	d032      	beq.n	800c0fc <__sflush_r+0x94>
 800c096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	075a      	lsls	r2, r3, #29
 800c09c:	d505      	bpl.n	800c0aa <__sflush_r+0x42>
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	1ac0      	subs	r0, r0, r3
 800c0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0a4:	b10b      	cbz	r3, 800c0aa <__sflush_r+0x42>
 800c0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0a8:	1ac0      	subs	r0, r0, r3
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	6a21      	ldr	r1, [r4, #32]
 800c0b4:	47b0      	blx	r6
 800c0b6:	1c43      	adds	r3, r0, #1
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	d106      	bne.n	800c0ca <__sflush_r+0x62>
 800c0bc:	6829      	ldr	r1, [r5, #0]
 800c0be:	291d      	cmp	r1, #29
 800c0c0:	d82c      	bhi.n	800c11c <__sflush_r+0xb4>
 800c0c2:	4a29      	ldr	r2, [pc, #164]	; (800c168 <__sflush_r+0x100>)
 800c0c4:	40ca      	lsrs	r2, r1
 800c0c6:	07d6      	lsls	r6, r2, #31
 800c0c8:	d528      	bpl.n	800c11c <__sflush_r+0xb4>
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	6062      	str	r2, [r4, #4]
 800c0ce:	6922      	ldr	r2, [r4, #16]
 800c0d0:	04d9      	lsls	r1, r3, #19
 800c0d2:	6022      	str	r2, [r4, #0]
 800c0d4:	d504      	bpl.n	800c0e0 <__sflush_r+0x78>
 800c0d6:	1c42      	adds	r2, r0, #1
 800c0d8:	d101      	bne.n	800c0de <__sflush_r+0x76>
 800c0da:	682b      	ldr	r3, [r5, #0]
 800c0dc:	b903      	cbnz	r3, 800c0e0 <__sflush_r+0x78>
 800c0de:	6560      	str	r0, [r4, #84]	; 0x54
 800c0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0e2:	602f      	str	r7, [r5, #0]
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d0cb      	beq.n	800c080 <__sflush_r+0x18>
 800c0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ec:	4299      	cmp	r1, r3
 800c0ee:	d002      	beq.n	800c0f6 <__sflush_r+0x8e>
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7ff faad 	bl	800b650 <_free_r>
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800c0fa:	e7c2      	b.n	800c082 <__sflush_r+0x1a>
 800c0fc:	6a21      	ldr	r1, [r4, #32]
 800c0fe:	2301      	movs	r3, #1
 800c100:	4628      	mov	r0, r5
 800c102:	47b0      	blx	r6
 800c104:	1c41      	adds	r1, r0, #1
 800c106:	d1c7      	bne.n	800c098 <__sflush_r+0x30>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d0c4      	beq.n	800c098 <__sflush_r+0x30>
 800c10e:	2b1d      	cmp	r3, #29
 800c110:	d001      	beq.n	800c116 <__sflush_r+0xae>
 800c112:	2b16      	cmp	r3, #22
 800c114:	d101      	bne.n	800c11a <__sflush_r+0xb2>
 800c116:	602f      	str	r7, [r5, #0]
 800c118:	e7b2      	b.n	800c080 <__sflush_r+0x18>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	e7ae      	b.n	800c082 <__sflush_r+0x1a>
 800c124:	690f      	ldr	r7, [r1, #16]
 800c126:	2f00      	cmp	r7, #0
 800c128:	d0aa      	beq.n	800c080 <__sflush_r+0x18>
 800c12a:	0793      	lsls	r3, r2, #30
 800c12c:	bf18      	it	ne
 800c12e:	2300      	movne	r3, #0
 800c130:	680e      	ldr	r6, [r1, #0]
 800c132:	bf08      	it	eq
 800c134:	694b      	ldreq	r3, [r1, #20]
 800c136:	1bf6      	subs	r6, r6, r7
 800c138:	600f      	str	r7, [r1, #0]
 800c13a:	608b      	str	r3, [r1, #8]
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	dd9f      	ble.n	800c080 <__sflush_r+0x18>
 800c140:	4633      	mov	r3, r6
 800c142:	463a      	mov	r2, r7
 800c144:	4628      	mov	r0, r5
 800c146:	6a21      	ldr	r1, [r4, #32]
 800c148:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c14c:	47e0      	blx	ip
 800c14e:	2800      	cmp	r0, #0
 800c150:	dc06      	bgt.n	800c160 <__sflush_r+0xf8>
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c15c:	81a3      	strh	r3, [r4, #12]
 800c15e:	e790      	b.n	800c082 <__sflush_r+0x1a>
 800c160:	4407      	add	r7, r0
 800c162:	1a36      	subs	r6, r6, r0
 800c164:	e7ea      	b.n	800c13c <__sflush_r+0xd4>
 800c166:	bf00      	nop
 800c168:	20400001 	.word	0x20400001

0800c16c <_fflush_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	690b      	ldr	r3, [r1, #16]
 800c170:	4605      	mov	r5, r0
 800c172:	460c      	mov	r4, r1
 800c174:	b913      	cbnz	r3, 800c17c <_fflush_r+0x10>
 800c176:	2500      	movs	r5, #0
 800c178:	4628      	mov	r0, r5
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	b118      	cbz	r0, 800c186 <_fflush_r+0x1a>
 800c17e:	6983      	ldr	r3, [r0, #24]
 800c180:	b90b      	cbnz	r3, 800c186 <_fflush_r+0x1a>
 800c182:	f000 f887 	bl	800c294 <__sinit>
 800c186:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <_fflush_r+0x6c>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	d11b      	bne.n	800c1c4 <_fflush_r+0x58>
 800c18c:	686c      	ldr	r4, [r5, #4]
 800c18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0ef      	beq.n	800c176 <_fflush_r+0xa>
 800c196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c198:	07d0      	lsls	r0, r2, #31
 800c19a:	d404      	bmi.n	800c1a6 <_fflush_r+0x3a>
 800c19c:	0599      	lsls	r1, r3, #22
 800c19e:	d402      	bmi.n	800c1a6 <_fflush_r+0x3a>
 800c1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1a2:	f000 f915 	bl	800c3d0 <__retarget_lock_acquire_recursive>
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	f7ff ff5d 	bl	800c068 <__sflush_r>
 800c1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	07da      	lsls	r2, r3, #31
 800c1b4:	d4e0      	bmi.n	800c178 <_fflush_r+0xc>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	059b      	lsls	r3, r3, #22
 800c1ba:	d4dd      	bmi.n	800c178 <_fflush_r+0xc>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1be:	f000 f908 	bl	800c3d2 <__retarget_lock_release_recursive>
 800c1c2:	e7d9      	b.n	800c178 <_fflush_r+0xc>
 800c1c4:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <_fflush_r+0x70>)
 800c1c6:	429c      	cmp	r4, r3
 800c1c8:	d101      	bne.n	800c1ce <_fflush_r+0x62>
 800c1ca:	68ac      	ldr	r4, [r5, #8]
 800c1cc:	e7df      	b.n	800c18e <_fflush_r+0x22>
 800c1ce:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <_fflush_r+0x74>)
 800c1d0:	429c      	cmp	r4, r3
 800c1d2:	bf08      	it	eq
 800c1d4:	68ec      	ldreq	r4, [r5, #12]
 800c1d6:	e7da      	b.n	800c18e <_fflush_r+0x22>
 800c1d8:	0800d154 	.word	0x0800d154
 800c1dc:	0800d174 	.word	0x0800d174
 800c1e0:	0800d134 	.word	0x0800d134

0800c1e4 <std>:
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f2:	6083      	str	r3, [r0, #8]
 800c1f4:	8181      	strh	r1, [r0, #12]
 800c1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c1f8:	81c2      	strh	r2, [r0, #14]
 800c1fa:	6183      	str	r3, [r0, #24]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	2208      	movs	r2, #8
 800c200:	305c      	adds	r0, #92	; 0x5c
 800c202:	f7fd facb 	bl	800979c <memset>
 800c206:	4b05      	ldr	r3, [pc, #20]	; (800c21c <std+0x38>)
 800c208:	6224      	str	r4, [r4, #32]
 800c20a:	6263      	str	r3, [r4, #36]	; 0x24
 800c20c:	4b04      	ldr	r3, [pc, #16]	; (800c220 <std+0x3c>)
 800c20e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c210:	4b04      	ldr	r3, [pc, #16]	; (800c224 <std+0x40>)
 800c212:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c214:	4b04      	ldr	r3, [pc, #16]	; (800c228 <std+0x44>)
 800c216:	6323      	str	r3, [r4, #48]	; 0x30
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	bf00      	nop
 800c21c:	0800c539 	.word	0x0800c539
 800c220:	0800c55b 	.word	0x0800c55b
 800c224:	0800c593 	.word	0x0800c593
 800c228:	0800c5b7 	.word	0x0800c5b7

0800c22c <_cleanup_r>:
 800c22c:	4901      	ldr	r1, [pc, #4]	; (800c234 <_cleanup_r+0x8>)
 800c22e:	f000 b8af 	b.w	800c390 <_fwalk_reent>
 800c232:	bf00      	nop
 800c234:	0800c16d 	.word	0x0800c16d

0800c238 <__sfmoreglue>:
 800c238:	2268      	movs	r2, #104	; 0x68
 800c23a:	b570      	push	{r4, r5, r6, lr}
 800c23c:	1e4d      	subs	r5, r1, #1
 800c23e:	4355      	muls	r5, r2
 800c240:	460e      	mov	r6, r1
 800c242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c246:	f7ff fa6b 	bl	800b720 <_malloc_r>
 800c24a:	4604      	mov	r4, r0
 800c24c:	b140      	cbz	r0, 800c260 <__sfmoreglue+0x28>
 800c24e:	2100      	movs	r1, #0
 800c250:	e9c0 1600 	strd	r1, r6, [r0]
 800c254:	300c      	adds	r0, #12
 800c256:	60a0      	str	r0, [r4, #8]
 800c258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c25c:	f7fd fa9e 	bl	800979c <memset>
 800c260:	4620      	mov	r0, r4
 800c262:	bd70      	pop	{r4, r5, r6, pc}

0800c264 <__sfp_lock_acquire>:
 800c264:	4801      	ldr	r0, [pc, #4]	; (800c26c <__sfp_lock_acquire+0x8>)
 800c266:	f000 b8b3 	b.w	800c3d0 <__retarget_lock_acquire_recursive>
 800c26a:	bf00      	nop
 800c26c:	200005dd 	.word	0x200005dd

0800c270 <__sfp_lock_release>:
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <__sfp_lock_release+0x8>)
 800c272:	f000 b8ae 	b.w	800c3d2 <__retarget_lock_release_recursive>
 800c276:	bf00      	nop
 800c278:	200005dd 	.word	0x200005dd

0800c27c <__sinit_lock_acquire>:
 800c27c:	4801      	ldr	r0, [pc, #4]	; (800c284 <__sinit_lock_acquire+0x8>)
 800c27e:	f000 b8a7 	b.w	800c3d0 <__retarget_lock_acquire_recursive>
 800c282:	bf00      	nop
 800c284:	200005de 	.word	0x200005de

0800c288 <__sinit_lock_release>:
 800c288:	4801      	ldr	r0, [pc, #4]	; (800c290 <__sinit_lock_release+0x8>)
 800c28a:	f000 b8a2 	b.w	800c3d2 <__retarget_lock_release_recursive>
 800c28e:	bf00      	nop
 800c290:	200005de 	.word	0x200005de

0800c294 <__sinit>:
 800c294:	b510      	push	{r4, lr}
 800c296:	4604      	mov	r4, r0
 800c298:	f7ff fff0 	bl	800c27c <__sinit_lock_acquire>
 800c29c:	69a3      	ldr	r3, [r4, #24]
 800c29e:	b11b      	cbz	r3, 800c2a8 <__sinit+0x14>
 800c2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a4:	f7ff bff0 	b.w	800c288 <__sinit_lock_release>
 800c2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c2ae:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <__sinit+0x68>)
 800c2b0:	4a13      	ldr	r2, [pc, #76]	; (800c300 <__sinit+0x6c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	bf08      	it	eq
 800c2ba:	2301      	moveq	r3, #1
 800c2bc:	4620      	mov	r0, r4
 800c2be:	bf08      	it	eq
 800c2c0:	61a3      	streq	r3, [r4, #24]
 800c2c2:	f000 f81f 	bl	800c304 <__sfp>
 800c2c6:	6060      	str	r0, [r4, #4]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 f81b 	bl	800c304 <__sfp>
 800c2ce:	60a0      	str	r0, [r4, #8]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 f817 	bl	800c304 <__sfp>
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2104      	movs	r1, #4
 800c2da:	60e0      	str	r0, [r4, #12]
 800c2dc:	6860      	ldr	r0, [r4, #4]
 800c2de:	f7ff ff81 	bl	800c1e4 <std>
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	2109      	movs	r1, #9
 800c2e6:	68a0      	ldr	r0, [r4, #8]
 800c2e8:	f7ff ff7c 	bl	800c1e4 <std>
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	2112      	movs	r1, #18
 800c2f0:	68e0      	ldr	r0, [r4, #12]
 800c2f2:	f7ff ff77 	bl	800c1e4 <std>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	61a3      	str	r3, [r4, #24]
 800c2fa:	e7d1      	b.n	800c2a0 <__sinit+0xc>
 800c2fc:	0800cdb8 	.word	0x0800cdb8
 800c300:	0800c22d 	.word	0x0800c22d

0800c304 <__sfp>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	4607      	mov	r7, r0
 800c308:	f7ff ffac 	bl	800c264 <__sfp_lock_acquire>
 800c30c:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <__sfp+0x84>)
 800c30e:	681e      	ldr	r6, [r3, #0]
 800c310:	69b3      	ldr	r3, [r6, #24]
 800c312:	b913      	cbnz	r3, 800c31a <__sfp+0x16>
 800c314:	4630      	mov	r0, r6
 800c316:	f7ff ffbd 	bl	800c294 <__sinit>
 800c31a:	3648      	adds	r6, #72	; 0x48
 800c31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c320:	3b01      	subs	r3, #1
 800c322:	d503      	bpl.n	800c32c <__sfp+0x28>
 800c324:	6833      	ldr	r3, [r6, #0]
 800c326:	b30b      	cbz	r3, 800c36c <__sfp+0x68>
 800c328:	6836      	ldr	r6, [r6, #0]
 800c32a:	e7f7      	b.n	800c31c <__sfp+0x18>
 800c32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c330:	b9d5      	cbnz	r5, 800c368 <__sfp+0x64>
 800c332:	4b16      	ldr	r3, [pc, #88]	; (800c38c <__sfp+0x88>)
 800c334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c338:	60e3      	str	r3, [r4, #12]
 800c33a:	6665      	str	r5, [r4, #100]	; 0x64
 800c33c:	f000 f847 	bl	800c3ce <__retarget_lock_init_recursive>
 800c340:	f7ff ff96 	bl	800c270 <__sfp_lock_release>
 800c344:	2208      	movs	r2, #8
 800c346:	4629      	mov	r1, r5
 800c348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c350:	6025      	str	r5, [r4, #0]
 800c352:	61a5      	str	r5, [r4, #24]
 800c354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c358:	f7fd fa20 	bl	800979c <memset>
 800c35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c364:	4620      	mov	r0, r4
 800c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c368:	3468      	adds	r4, #104	; 0x68
 800c36a:	e7d9      	b.n	800c320 <__sfp+0x1c>
 800c36c:	2104      	movs	r1, #4
 800c36e:	4638      	mov	r0, r7
 800c370:	f7ff ff62 	bl	800c238 <__sfmoreglue>
 800c374:	4604      	mov	r4, r0
 800c376:	6030      	str	r0, [r6, #0]
 800c378:	2800      	cmp	r0, #0
 800c37a:	d1d5      	bne.n	800c328 <__sfp+0x24>
 800c37c:	f7ff ff78 	bl	800c270 <__sfp_lock_release>
 800c380:	230c      	movs	r3, #12
 800c382:	603b      	str	r3, [r7, #0]
 800c384:	e7ee      	b.n	800c364 <__sfp+0x60>
 800c386:	bf00      	nop
 800c388:	0800cdb8 	.word	0x0800cdb8
 800c38c:	ffff0001 	.word	0xffff0001

0800c390 <_fwalk_reent>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	4606      	mov	r6, r0
 800c396:	4688      	mov	r8, r1
 800c398:	2700      	movs	r7, #0
 800c39a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c39e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c3a6:	d505      	bpl.n	800c3b4 <_fwalk_reent+0x24>
 800c3a8:	6824      	ldr	r4, [r4, #0]
 800c3aa:	2c00      	cmp	r4, #0
 800c3ac:	d1f7      	bne.n	800c39e <_fwalk_reent+0xe>
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b4:	89ab      	ldrh	r3, [r5, #12]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d907      	bls.n	800c3ca <_fwalk_reent+0x3a>
 800c3ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	d003      	beq.n	800c3ca <_fwalk_reent+0x3a>
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	47c0      	blx	r8
 800c3c8:	4307      	orrs	r7, r0
 800c3ca:	3568      	adds	r5, #104	; 0x68
 800c3cc:	e7e9      	b.n	800c3a2 <_fwalk_reent+0x12>

0800c3ce <__retarget_lock_init_recursive>:
 800c3ce:	4770      	bx	lr

0800c3d0 <__retarget_lock_acquire_recursive>:
 800c3d0:	4770      	bx	lr

0800c3d2 <__retarget_lock_release_recursive>:
 800c3d2:	4770      	bx	lr

0800c3d4 <__swhatbuf_r>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	460e      	mov	r6, r1
 800c3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3dc:	4614      	mov	r4, r2
 800c3de:	2900      	cmp	r1, #0
 800c3e0:	461d      	mov	r5, r3
 800c3e2:	b096      	sub	sp, #88	; 0x58
 800c3e4:	da08      	bge.n	800c3f8 <__swhatbuf_r+0x24>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3ec:	602a      	str	r2, [r5, #0]
 800c3ee:	061a      	lsls	r2, r3, #24
 800c3f0:	d410      	bmi.n	800c414 <__swhatbuf_r+0x40>
 800c3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f6:	e00e      	b.n	800c416 <__swhatbuf_r+0x42>
 800c3f8:	466a      	mov	r2, sp
 800c3fa:	f000 f903 	bl	800c604 <_fstat_r>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	dbf1      	blt.n	800c3e6 <__swhatbuf_r+0x12>
 800c402:	9a01      	ldr	r2, [sp, #4]
 800c404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c40c:	425a      	negs	r2, r3
 800c40e:	415a      	adcs	r2, r3
 800c410:	602a      	str	r2, [r5, #0]
 800c412:	e7ee      	b.n	800c3f2 <__swhatbuf_r+0x1e>
 800c414:	2340      	movs	r3, #64	; 0x40
 800c416:	2000      	movs	r0, #0
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	b016      	add	sp, #88	; 0x58
 800c41c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c420 <__smakebuf_r>:
 800c420:	898b      	ldrh	r3, [r1, #12]
 800c422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c424:	079d      	lsls	r5, r3, #30
 800c426:	4606      	mov	r6, r0
 800c428:	460c      	mov	r4, r1
 800c42a:	d507      	bpl.n	800c43c <__smakebuf_r+0x1c>
 800c42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	2301      	movs	r3, #1
 800c436:	6163      	str	r3, [r4, #20]
 800c438:	b002      	add	sp, #8
 800c43a:	bd70      	pop	{r4, r5, r6, pc}
 800c43c:	466a      	mov	r2, sp
 800c43e:	ab01      	add	r3, sp, #4
 800c440:	f7ff ffc8 	bl	800c3d4 <__swhatbuf_r>
 800c444:	9900      	ldr	r1, [sp, #0]
 800c446:	4605      	mov	r5, r0
 800c448:	4630      	mov	r0, r6
 800c44a:	f7ff f969 	bl	800b720 <_malloc_r>
 800c44e:	b948      	cbnz	r0, 800c464 <__smakebuf_r+0x44>
 800c450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c454:	059a      	lsls	r2, r3, #22
 800c456:	d4ef      	bmi.n	800c438 <__smakebuf_r+0x18>
 800c458:	f023 0303 	bic.w	r3, r3, #3
 800c45c:	f043 0302 	orr.w	r3, r3, #2
 800c460:	81a3      	strh	r3, [r4, #12]
 800c462:	e7e3      	b.n	800c42c <__smakebuf_r+0xc>
 800c464:	4b0d      	ldr	r3, [pc, #52]	; (800c49c <__smakebuf_r+0x7c>)
 800c466:	62b3      	str	r3, [r6, #40]	; 0x28
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	6020      	str	r0, [r4, #0]
 800c46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	9b00      	ldr	r3, [sp, #0]
 800c474:	6120      	str	r0, [r4, #16]
 800c476:	6163      	str	r3, [r4, #20]
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	b15b      	cbz	r3, 800c494 <__smakebuf_r+0x74>
 800c47c:	4630      	mov	r0, r6
 800c47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c482:	f000 f8d1 	bl	800c628 <_isatty_r>
 800c486:	b128      	cbz	r0, 800c494 <__smakebuf_r+0x74>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	f023 0303 	bic.w	r3, r3, #3
 800c48e:	f043 0301 	orr.w	r3, r3, #1
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	89a0      	ldrh	r0, [r4, #12]
 800c496:	4305      	orrs	r5, r0
 800c498:	81a5      	strh	r5, [r4, #12]
 800c49a:	e7cd      	b.n	800c438 <__smakebuf_r+0x18>
 800c49c:	0800c22d 	.word	0x0800c22d

0800c4a0 <_malloc_usable_size_r>:
 800c4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a4:	1f18      	subs	r0, r3, #4
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	bfbc      	itt	lt
 800c4aa:	580b      	ldrlt	r3, [r1, r0]
 800c4ac:	18c0      	addlt	r0, r0, r3
 800c4ae:	4770      	bx	lr

0800c4b0 <_raise_r>:
 800c4b0:	291f      	cmp	r1, #31
 800c4b2:	b538      	push	{r3, r4, r5, lr}
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	d904      	bls.n	800c4c4 <_raise_r+0x14>
 800c4ba:	2316      	movs	r3, #22
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4c2:	bd38      	pop	{r3, r4, r5, pc}
 800c4c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4c6:	b112      	cbz	r2, 800c4ce <_raise_r+0x1e>
 800c4c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4cc:	b94b      	cbnz	r3, 800c4e2 <_raise_r+0x32>
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f000 f830 	bl	800c534 <_getpid_r>
 800c4d4:	462a      	mov	r2, r5
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	4620      	mov	r0, r4
 800c4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4de:	f000 b817 	b.w	800c510 <_kill_r>
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d00a      	beq.n	800c4fc <_raise_r+0x4c>
 800c4e6:	1c59      	adds	r1, r3, #1
 800c4e8:	d103      	bne.n	800c4f2 <_raise_r+0x42>
 800c4ea:	2316      	movs	r3, #22
 800c4ec:	6003      	str	r3, [r0, #0]
 800c4ee:	2001      	movs	r0, #1
 800c4f0:	e7e7      	b.n	800c4c2 <_raise_r+0x12>
 800c4f2:	2400      	movs	r4, #0
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4fa:	4798      	blx	r3
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	e7e0      	b.n	800c4c2 <_raise_r+0x12>

0800c500 <raise>:
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <raise+0xc>)
 800c502:	4601      	mov	r1, r0
 800c504:	6818      	ldr	r0, [r3, #0]
 800c506:	f7ff bfd3 	b.w	800c4b0 <_raise_r>
 800c50a:	bf00      	nop
 800c50c:	200000f8 	.word	0x200000f8

0800c510 <_kill_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	2300      	movs	r3, #0
 800c514:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_kill_r+0x20>)
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	4611      	mov	r1, r2
 800c51c:	602b      	str	r3, [r5, #0]
 800c51e:	f7f8 fa5e 	bl	80049de <_kill>
 800c522:	1c43      	adds	r3, r0, #1
 800c524:	d102      	bne.n	800c52c <_kill_r+0x1c>
 800c526:	682b      	ldr	r3, [r5, #0]
 800c528:	b103      	cbz	r3, 800c52c <_kill_r+0x1c>
 800c52a:	6023      	str	r3, [r4, #0]
 800c52c:	bd38      	pop	{r3, r4, r5, pc}
 800c52e:	bf00      	nop
 800c530:	200005d8 	.word	0x200005d8

0800c534 <_getpid_r>:
 800c534:	f7f8 ba4c 	b.w	80049d0 <_getpid>

0800c538 <__sread>:
 800c538:	b510      	push	{r4, lr}
 800c53a:	460c      	mov	r4, r1
 800c53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c540:	f000 f894 	bl	800c66c <_read_r>
 800c544:	2800      	cmp	r0, #0
 800c546:	bfab      	itete	ge
 800c548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c54a:	89a3      	ldrhlt	r3, [r4, #12]
 800c54c:	181b      	addge	r3, r3, r0
 800c54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c552:	bfac      	ite	ge
 800c554:	6563      	strge	r3, [r4, #84]	; 0x54
 800c556:	81a3      	strhlt	r3, [r4, #12]
 800c558:	bd10      	pop	{r4, pc}

0800c55a <__swrite>:
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	461f      	mov	r7, r3
 800c560:	898b      	ldrh	r3, [r1, #12]
 800c562:	4605      	mov	r5, r0
 800c564:	05db      	lsls	r3, r3, #23
 800c566:	460c      	mov	r4, r1
 800c568:	4616      	mov	r6, r2
 800c56a:	d505      	bpl.n	800c578 <__swrite+0x1e>
 800c56c:	2302      	movs	r3, #2
 800c56e:	2200      	movs	r2, #0
 800c570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c574:	f000 f868 	bl	800c648 <_lseek_r>
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	4632      	mov	r2, r6
 800c57c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c580:	81a3      	strh	r3, [r4, #12]
 800c582:	4628      	mov	r0, r5
 800c584:	463b      	mov	r3, r7
 800c586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c58e:	f000 b817 	b.w	800c5c0 <_write_r>

0800c592 <__sseek>:
 800c592:	b510      	push	{r4, lr}
 800c594:	460c      	mov	r4, r1
 800c596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59a:	f000 f855 	bl	800c648 <_lseek_r>
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	bf15      	itete	ne
 800c5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ae:	81a3      	strheq	r3, [r4, #12]
 800c5b0:	bf18      	it	ne
 800c5b2:	81a3      	strhne	r3, [r4, #12]
 800c5b4:	bd10      	pop	{r4, pc}

0800c5b6 <__sclose>:
 800c5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ba:	f000 b813 	b.w	800c5e4 <_close_r>
	...

0800c5c0 <_write_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4d05      	ldr	r5, [pc, #20]	; (800c5e0 <_write_r+0x20>)
 800c5cc:	602a      	str	r2, [r5, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f7f7 f9f0 	bl	80039b4 <_write>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_write_r+0x1e>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_write_r+0x1e>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	200005d8 	.word	0x200005d8

0800c5e4 <_close_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4d05      	ldr	r5, [pc, #20]	; (800c600 <_close_r+0x1c>)
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	f7f8 fa2c 	bl	8004a4c <_close>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_close_r+0x1a>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_close_r+0x1a>
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	200005d8 	.word	0x200005d8

0800c604 <_fstat_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	2300      	movs	r3, #0
 800c608:	4d06      	ldr	r5, [pc, #24]	; (800c624 <_fstat_r+0x20>)
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	4611      	mov	r1, r2
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	f7f8 fa26 	bl	8004a62 <_fstat>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d102      	bne.n	800c620 <_fstat_r+0x1c>
 800c61a:	682b      	ldr	r3, [r5, #0]
 800c61c:	b103      	cbz	r3, 800c620 <_fstat_r+0x1c>
 800c61e:	6023      	str	r3, [r4, #0]
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	bf00      	nop
 800c624:	200005d8 	.word	0x200005d8

0800c628 <_isatty_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	2300      	movs	r3, #0
 800c62c:	4d05      	ldr	r5, [pc, #20]	; (800c644 <_isatty_r+0x1c>)
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	f7f8 fa24 	bl	8004a80 <_isatty>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_isatty_r+0x1a>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_isatty_r+0x1a>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	200005d8 	.word	0x200005d8

0800c648 <_lseek_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	2200      	movs	r2, #0
 800c652:	4d05      	ldr	r5, [pc, #20]	; (800c668 <_lseek_r+0x20>)
 800c654:	602a      	str	r2, [r5, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	f7f8 fa1c 	bl	8004a94 <_lseek>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_lseek_r+0x1e>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_lseek_r+0x1e>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	200005d8 	.word	0x200005d8

0800c66c <_read_r>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4604      	mov	r4, r0
 800c670:	4608      	mov	r0, r1
 800c672:	4611      	mov	r1, r2
 800c674:	2200      	movs	r2, #0
 800c676:	4d05      	ldr	r5, [pc, #20]	; (800c68c <_read_r+0x20>)
 800c678:	602a      	str	r2, [r5, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	f7f8 f9c9 	bl	8004a12 <_read>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_read_r+0x1e>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_read_r+0x1e>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	200005d8 	.word	0x200005d8

0800c690 <asinf>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4604      	mov	r4, r0
 800c694:	f000 f838 	bl	800c708 <__ieee754_asinf>
 800c698:	4621      	mov	r1, r4
 800c69a:	4605      	mov	r5, r0
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7f4 fce7 	bl	8001070 <__aeabi_fcmpun>
 800c6a2:	b980      	cbnz	r0, 800c6c6 <asinf+0x36>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fb57 	bl	800cd58 <fabsf>
 800c6aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6ae:	f7f4 fcd5 	bl	800105c <__aeabi_fcmpgt>
 800c6b2:	b140      	cbz	r0, 800c6c6 <asinf+0x36>
 800c6b4:	f7fd f848 	bl	8009748 <__errno>
 800c6b8:	2321      	movs	r3, #33	; 0x21
 800c6ba:	6003      	str	r3, [r0, #0]
 800c6bc:	4803      	ldr	r0, [pc, #12]	; (800c6cc <asinf+0x3c>)
 800c6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c2:	f000 bb4d 	b.w	800cd60 <nanf>
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	0800d128 	.word	0x0800d128

0800c6d0 <atan2f>:
 800c6d0:	f000 b95e 	b.w	800c990 <__ieee754_atan2f>

0800c6d4 <sqrtf>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	f000 f9e0 	bl	800ca9c <__ieee754_sqrtf>
 800c6dc:	4629      	mov	r1, r5
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7f4 fcc5 	bl	8001070 <__aeabi_fcmpun>
 800c6e6:	b968      	cbnz	r0, 800c704 <sqrtf+0x30>
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7f4 fc98 	bl	8001020 <__aeabi_fcmplt>
 800c6f0:	b140      	cbz	r0, 800c704 <sqrtf+0x30>
 800c6f2:	f7fd f829 	bl	8009748 <__errno>
 800c6f6:	2321      	movs	r3, #33	; 0x21
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6003      	str	r3, [r0, #0]
 800c6fc:	4608      	mov	r0, r1
 800c6fe:	f7f4 fba5 	bl	8000e4c <__aeabi_fdiv>
 800c702:	4604      	mov	r4, r0
 800c704:	4620      	mov	r0, r4
 800c706:	bd38      	pop	{r3, r4, r5, pc}

0800c708 <__ieee754_asinf>:
 800c708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c70c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c710:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c714:	4604      	mov	r4, r0
 800c716:	4605      	mov	r5, r0
 800c718:	d10c      	bne.n	800c734 <__ieee754_asinf+0x2c>
 800c71a:	498d      	ldr	r1, [pc, #564]	; (800c950 <__ieee754_asinf+0x248>)
 800c71c:	f7f4 fae2 	bl	8000ce4 <__aeabi_fmul>
 800c720:	498c      	ldr	r1, [pc, #560]	; (800c954 <__ieee754_asinf+0x24c>)
 800c722:	4605      	mov	r5, r0
 800c724:	4620      	mov	r0, r4
 800c726:	f7f4 fadd 	bl	8000ce4 <__aeabi_fmul>
 800c72a:	4601      	mov	r1, r0
 800c72c:	4628      	mov	r0, r5
 800c72e:	f7f4 f9d1 	bl	8000ad4 <__addsf3>
 800c732:	e006      	b.n	800c742 <__ieee754_asinf+0x3a>
 800c734:	dd07      	ble.n	800c746 <__ieee754_asinf+0x3e>
 800c736:	4601      	mov	r1, r0
 800c738:	f7f4 f9ca 	bl	8000ad0 <__aeabi_fsub>
 800c73c:	4601      	mov	r1, r0
 800c73e:	f7f4 fb85 	bl	8000e4c <__aeabi_fdiv>
 800c742:	4604      	mov	r4, r0
 800c744:	e00e      	b.n	800c764 <__ieee754_asinf+0x5c>
 800c746:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c74a:	da58      	bge.n	800c7fe <__ieee754_asinf+0xf6>
 800c74c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c750:	da0b      	bge.n	800c76a <__ieee754_asinf+0x62>
 800c752:	4981      	ldr	r1, [pc, #516]	; (800c958 <__ieee754_asinf+0x250>)
 800c754:	f7f4 f9be 	bl	8000ad4 <__addsf3>
 800c758:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c75c:	f7f4 fc7e 	bl	800105c <__aeabi_fcmpgt>
 800c760:	2800      	cmp	r0, #0
 800c762:	d04c      	beq.n	800c7fe <__ieee754_asinf+0xf6>
 800c764:	4620      	mov	r0, r4
 800c766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76a:	4601      	mov	r1, r0
 800c76c:	f7f4 faba 	bl	8000ce4 <__aeabi_fmul>
 800c770:	4605      	mov	r5, r0
 800c772:	497a      	ldr	r1, [pc, #488]	; (800c95c <__ieee754_asinf+0x254>)
 800c774:	f7f4 fab6 	bl	8000ce4 <__aeabi_fmul>
 800c778:	4979      	ldr	r1, [pc, #484]	; (800c960 <__ieee754_asinf+0x258>)
 800c77a:	f7f4 f9ab 	bl	8000ad4 <__addsf3>
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f4 fab0 	bl	8000ce4 <__aeabi_fmul>
 800c784:	4977      	ldr	r1, [pc, #476]	; (800c964 <__ieee754_asinf+0x25c>)
 800c786:	f7f4 f9a3 	bl	8000ad0 <__aeabi_fsub>
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7f4 faaa 	bl	8000ce4 <__aeabi_fmul>
 800c790:	4975      	ldr	r1, [pc, #468]	; (800c968 <__ieee754_asinf+0x260>)
 800c792:	f7f4 f99f 	bl	8000ad4 <__addsf3>
 800c796:	4629      	mov	r1, r5
 800c798:	f7f4 faa4 	bl	8000ce4 <__aeabi_fmul>
 800c79c:	4973      	ldr	r1, [pc, #460]	; (800c96c <__ieee754_asinf+0x264>)
 800c79e:	f7f4 f997 	bl	8000ad0 <__aeabi_fsub>
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7f4 fa9e 	bl	8000ce4 <__aeabi_fmul>
 800c7a8:	4971      	ldr	r1, [pc, #452]	; (800c970 <__ieee754_asinf+0x268>)
 800c7aa:	f7f4 f993 	bl	8000ad4 <__addsf3>
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	f7f4 fa98 	bl	8000ce4 <__aeabi_fmul>
 800c7b4:	496f      	ldr	r1, [pc, #444]	; (800c974 <__ieee754_asinf+0x26c>)
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	f7f4 fa93 	bl	8000ce4 <__aeabi_fmul>
 800c7be:	496e      	ldr	r1, [pc, #440]	; (800c978 <__ieee754_asinf+0x270>)
 800c7c0:	f7f4 f986 	bl	8000ad0 <__aeabi_fsub>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f4 fa8d 	bl	8000ce4 <__aeabi_fmul>
 800c7ca:	496c      	ldr	r1, [pc, #432]	; (800c97c <__ieee754_asinf+0x274>)
 800c7cc:	f7f4 f982 	bl	8000ad4 <__addsf3>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f4 fa87 	bl	8000ce4 <__aeabi_fmul>
 800c7d6:	496a      	ldr	r1, [pc, #424]	; (800c980 <__ieee754_asinf+0x278>)
 800c7d8:	f7f4 f97a 	bl	8000ad0 <__aeabi_fsub>
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f4 fa81 	bl	8000ce4 <__aeabi_fmul>
 800c7e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c7e6:	f7f4 f975 	bl	8000ad4 <__addsf3>
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f7f4 fb2d 	bl	8000e4c <__aeabi_fdiv>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	f7f4 fa76 	bl	8000ce4 <__aeabi_fmul>
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	e797      	b.n	800c72e <__ieee754_asinf+0x26>
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 faaa 	bl	800cd58 <fabsf>
 800c804:	4601      	mov	r1, r0
 800c806:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c80a:	f7f4 f961 	bl	8000ad0 <__aeabi_fsub>
 800c80e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c812:	f7f4 fa67 	bl	8000ce4 <__aeabi_fmul>
 800c816:	4606      	mov	r6, r0
 800c818:	4950      	ldr	r1, [pc, #320]	; (800c95c <__ieee754_asinf+0x254>)
 800c81a:	f7f4 fa63 	bl	8000ce4 <__aeabi_fmul>
 800c81e:	4950      	ldr	r1, [pc, #320]	; (800c960 <__ieee754_asinf+0x258>)
 800c820:	f7f4 f958 	bl	8000ad4 <__addsf3>
 800c824:	4631      	mov	r1, r6
 800c826:	f7f4 fa5d 	bl	8000ce4 <__aeabi_fmul>
 800c82a:	494e      	ldr	r1, [pc, #312]	; (800c964 <__ieee754_asinf+0x25c>)
 800c82c:	f7f4 f950 	bl	8000ad0 <__aeabi_fsub>
 800c830:	4631      	mov	r1, r6
 800c832:	f7f4 fa57 	bl	8000ce4 <__aeabi_fmul>
 800c836:	494c      	ldr	r1, [pc, #304]	; (800c968 <__ieee754_asinf+0x260>)
 800c838:	f7f4 f94c 	bl	8000ad4 <__addsf3>
 800c83c:	4631      	mov	r1, r6
 800c83e:	f7f4 fa51 	bl	8000ce4 <__aeabi_fmul>
 800c842:	494a      	ldr	r1, [pc, #296]	; (800c96c <__ieee754_asinf+0x264>)
 800c844:	f7f4 f944 	bl	8000ad0 <__aeabi_fsub>
 800c848:	4631      	mov	r1, r6
 800c84a:	f7f4 fa4b 	bl	8000ce4 <__aeabi_fmul>
 800c84e:	4948      	ldr	r1, [pc, #288]	; (800c970 <__ieee754_asinf+0x268>)
 800c850:	f7f4 f940 	bl	8000ad4 <__addsf3>
 800c854:	4631      	mov	r1, r6
 800c856:	f7f4 fa45 	bl	8000ce4 <__aeabi_fmul>
 800c85a:	4946      	ldr	r1, [pc, #280]	; (800c974 <__ieee754_asinf+0x26c>)
 800c85c:	4681      	mov	r9, r0
 800c85e:	4630      	mov	r0, r6
 800c860:	f7f4 fa40 	bl	8000ce4 <__aeabi_fmul>
 800c864:	4944      	ldr	r1, [pc, #272]	; (800c978 <__ieee754_asinf+0x270>)
 800c866:	f7f4 f933 	bl	8000ad0 <__aeabi_fsub>
 800c86a:	4631      	mov	r1, r6
 800c86c:	f7f4 fa3a 	bl	8000ce4 <__aeabi_fmul>
 800c870:	4942      	ldr	r1, [pc, #264]	; (800c97c <__ieee754_asinf+0x274>)
 800c872:	f7f4 f92f 	bl	8000ad4 <__addsf3>
 800c876:	4631      	mov	r1, r6
 800c878:	f7f4 fa34 	bl	8000ce4 <__aeabi_fmul>
 800c87c:	4940      	ldr	r1, [pc, #256]	; (800c980 <__ieee754_asinf+0x278>)
 800c87e:	f7f4 f927 	bl	8000ad0 <__aeabi_fsub>
 800c882:	4631      	mov	r1, r6
 800c884:	f7f4 fa2e 	bl	8000ce4 <__aeabi_fmul>
 800c888:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c88c:	f7f4 f922 	bl	8000ad4 <__addsf3>
 800c890:	4682      	mov	sl, r0
 800c892:	4630      	mov	r0, r6
 800c894:	f000 f902 	bl	800ca9c <__ieee754_sqrtf>
 800c898:	4b3a      	ldr	r3, [pc, #232]	; (800c984 <__ieee754_asinf+0x27c>)
 800c89a:	4607      	mov	r7, r0
 800c89c:	4598      	cmp	r8, r3
 800c89e:	dd1a      	ble.n	800c8d6 <__ieee754_asinf+0x1ce>
 800c8a0:	4651      	mov	r1, sl
 800c8a2:	4648      	mov	r0, r9
 800c8a4:	f7f4 fad2 	bl	8000e4c <__aeabi_fdiv>
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f4 fa1b 	bl	8000ce4 <__aeabi_fmul>
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f4 f910 	bl	8000ad4 <__addsf3>
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	f7f4 f90d 	bl	8000ad4 <__addsf3>
 800c8ba:	4933      	ldr	r1, [pc, #204]	; (800c988 <__ieee754_asinf+0x280>)
 800c8bc:	f7f4 f90a 	bl	8000ad4 <__addsf3>
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	4823      	ldr	r0, [pc, #140]	; (800c950 <__ieee754_asinf+0x248>)
 800c8c4:	f7f4 f904 	bl	8000ad0 <__aeabi_fsub>
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	f73f af4a 	bgt.w	800c764 <__ieee754_asinf+0x5c>
 800c8d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c8d4:	e735      	b.n	800c742 <__ieee754_asinf+0x3a>
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c8dc:	f7f4 f8fa 	bl	8000ad4 <__addsf3>
 800c8e0:	4651      	mov	r1, sl
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	f7f4 fab1 	bl	8000e4c <__aeabi_fdiv>
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7f4 f9f9 	bl	8000ce4 <__aeabi_fmul>
 800c8f2:	f028 080f 	bic.w	r8, r8, #15
 800c8f6:	4681      	mov	r9, r0
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	f7f4 f9f2 	bl	8000ce4 <__aeabi_fmul>
 800c900:	4601      	mov	r1, r0
 800c902:	4630      	mov	r0, r6
 800c904:	f7f4 f8e4 	bl	8000ad0 <__aeabi_fsub>
 800c908:	4641      	mov	r1, r8
 800c90a:	4604      	mov	r4, r0
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7f4 f8e1 	bl	8000ad4 <__addsf3>
 800c912:	4601      	mov	r1, r0
 800c914:	4620      	mov	r0, r4
 800c916:	f7f4 fa99 	bl	8000e4c <__aeabi_fdiv>
 800c91a:	4601      	mov	r1, r0
 800c91c:	f7f4 f8da 	bl	8000ad4 <__addsf3>
 800c920:	4601      	mov	r1, r0
 800c922:	480c      	ldr	r0, [pc, #48]	; (800c954 <__ieee754_asinf+0x24c>)
 800c924:	f7f4 f8d4 	bl	8000ad0 <__aeabi_fsub>
 800c928:	4601      	mov	r1, r0
 800c92a:	4648      	mov	r0, r9
 800c92c:	f7f4 f8d0 	bl	8000ad0 <__aeabi_fsub>
 800c930:	4641      	mov	r1, r8
 800c932:	4604      	mov	r4, r0
 800c934:	4640      	mov	r0, r8
 800c936:	f7f4 f8cd 	bl	8000ad4 <__addsf3>
 800c93a:	4601      	mov	r1, r0
 800c93c:	4813      	ldr	r0, [pc, #76]	; (800c98c <__ieee754_asinf+0x284>)
 800c93e:	f7f4 f8c7 	bl	8000ad0 <__aeabi_fsub>
 800c942:	4601      	mov	r1, r0
 800c944:	4620      	mov	r0, r4
 800c946:	f7f4 f8c3 	bl	8000ad0 <__aeabi_fsub>
 800c94a:	4601      	mov	r1, r0
 800c94c:	480f      	ldr	r0, [pc, #60]	; (800c98c <__ieee754_asinf+0x284>)
 800c94e:	e7b9      	b.n	800c8c4 <__ieee754_asinf+0x1bc>
 800c950:	3fc90fdb 	.word	0x3fc90fdb
 800c954:	b33bbd2e 	.word	0xb33bbd2e
 800c958:	7149f2ca 	.word	0x7149f2ca
 800c95c:	3811ef08 	.word	0x3811ef08
 800c960:	3a4f7f04 	.word	0x3a4f7f04
 800c964:	3d241146 	.word	0x3d241146
 800c968:	3e4e0aa8 	.word	0x3e4e0aa8
 800c96c:	3ea6b090 	.word	0x3ea6b090
 800c970:	3e2aaaab 	.word	0x3e2aaaab
 800c974:	3d9dc62e 	.word	0x3d9dc62e
 800c978:	3f303361 	.word	0x3f303361
 800c97c:	4001572d 	.word	0x4001572d
 800c980:	4019d139 	.word	0x4019d139
 800c984:	3f799999 	.word	0x3f799999
 800c988:	333bbd2e 	.word	0x333bbd2e
 800c98c:	3f490fdb 	.word	0x3f490fdb

0800c990 <__ieee754_atan2f>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c996:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c99a:	4603      	mov	r3, r0
 800c99c:	dc05      	bgt.n	800c9aa <__ieee754_atan2f+0x1a>
 800c99e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c9a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	dd04      	ble.n	800c9b4 <__ieee754_atan2f+0x24>
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f4 f892 	bl	8000ad4 <__addsf3>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	e011      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800c9b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c9b8:	d103      	bne.n	800c9c2 <__ieee754_atan2f+0x32>
 800c9ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9be:	f000 b8bf 	b.w	800cb40 <atanf>
 800c9c2:	178c      	asrs	r4, r1, #30
 800c9c4:	f004 0402 	and.w	r4, r4, #2
 800c9c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c9cc:	b932      	cbnz	r2, 800c9dc <__ieee754_atan2f+0x4c>
 800c9ce:	2c02      	cmp	r4, #2
 800c9d0:	d04c      	beq.n	800ca6c <__ieee754_atan2f+0xdc>
 800c9d2:	2c03      	cmp	r4, #3
 800c9d4:	d100      	bne.n	800c9d8 <__ieee754_atan2f+0x48>
 800c9d6:	4b29      	ldr	r3, [pc, #164]	; (800ca7c <__ieee754_atan2f+0xec>)
 800c9d8:	4618      	mov	r0, r3
 800c9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9dc:	b91e      	cbnz	r6, 800c9e6 <__ieee754_atan2f+0x56>
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	da4a      	bge.n	800ca78 <__ieee754_atan2f+0xe8>
 800c9e2:	4b27      	ldr	r3, [pc, #156]	; (800ca80 <__ieee754_atan2f+0xf0>)
 800c9e4:	e7f8      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800c9e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c9ea:	d10e      	bne.n	800ca0a <__ieee754_atan2f+0x7a>
 800c9ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c9f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c9f4:	d105      	bne.n	800ca02 <__ieee754_atan2f+0x72>
 800c9f6:	2c02      	cmp	r4, #2
 800c9f8:	d83a      	bhi.n	800ca70 <__ieee754_atan2f+0xe0>
 800c9fa:	4b22      	ldr	r3, [pc, #136]	; (800ca84 <__ieee754_atan2f+0xf4>)
 800c9fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ca00:	e7ea      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca02:	2c02      	cmp	r4, #2
 800ca04:	d836      	bhi.n	800ca74 <__ieee754_atan2f+0xe4>
 800ca06:	4b20      	ldr	r3, [pc, #128]	; (800ca88 <__ieee754_atan2f+0xf8>)
 800ca08:	e7f8      	b.n	800c9fc <__ieee754_atan2f+0x6c>
 800ca0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ca0e:	d0e6      	beq.n	800c9de <__ieee754_atan2f+0x4e>
 800ca10:	1b92      	subs	r2, r2, r6
 800ca12:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800ca16:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ca1a:	da17      	bge.n	800ca4c <__ieee754_atan2f+0xbc>
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	da01      	bge.n	800ca24 <__ieee754_atan2f+0x94>
 800ca20:	303c      	adds	r0, #60	; 0x3c
 800ca22:	db15      	blt.n	800ca50 <__ieee754_atan2f+0xc0>
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f4 fa11 	bl	8000e4c <__aeabi_fdiv>
 800ca2a:	f000 f995 	bl	800cd58 <fabsf>
 800ca2e:	f000 f887 	bl	800cb40 <atanf>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2c01      	cmp	r4, #1
 800ca36:	d00d      	beq.n	800ca54 <__ieee754_atan2f+0xc4>
 800ca38:	2c02      	cmp	r4, #2
 800ca3a:	d00e      	beq.n	800ca5a <__ieee754_atan2f+0xca>
 800ca3c:	2c00      	cmp	r4, #0
 800ca3e:	d0cb      	beq.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca40:	4912      	ldr	r1, [pc, #72]	; (800ca8c <__ieee754_atan2f+0xfc>)
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7f4 f846 	bl	8000ad4 <__addsf3>
 800ca48:	4911      	ldr	r1, [pc, #68]	; (800ca90 <__ieee754_atan2f+0x100>)
 800ca4a:	e00c      	b.n	800ca66 <__ieee754_atan2f+0xd6>
 800ca4c:	4b11      	ldr	r3, [pc, #68]	; (800ca94 <__ieee754_atan2f+0x104>)
 800ca4e:	e7f1      	b.n	800ca34 <__ieee754_atan2f+0xa4>
 800ca50:	2300      	movs	r3, #0
 800ca52:	e7ef      	b.n	800ca34 <__ieee754_atan2f+0xa4>
 800ca54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca58:	e7be      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca5a:	490c      	ldr	r1, [pc, #48]	; (800ca8c <__ieee754_atan2f+0xfc>)
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f4 f839 	bl	8000ad4 <__addsf3>
 800ca62:	4601      	mov	r1, r0
 800ca64:	480a      	ldr	r0, [pc, #40]	; (800ca90 <__ieee754_atan2f+0x100>)
 800ca66:	f7f4 f833 	bl	8000ad0 <__aeabi_fsub>
 800ca6a:	e7a1      	b.n	800c9b0 <__ieee754_atan2f+0x20>
 800ca6c:	4b08      	ldr	r3, [pc, #32]	; (800ca90 <__ieee754_atan2f+0x100>)
 800ca6e:	e7b3      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca70:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <__ieee754_atan2f+0x108>)
 800ca72:	e7b1      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca74:	2300      	movs	r3, #0
 800ca76:	e7af      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <__ieee754_atan2f+0x104>)
 800ca7a:	e7ad      	b.n	800c9d8 <__ieee754_atan2f+0x48>
 800ca7c:	c0490fdb 	.word	0xc0490fdb
 800ca80:	bfc90fdb 	.word	0xbfc90fdb
 800ca84:	0800d194 	.word	0x0800d194
 800ca88:	0800d1a0 	.word	0x0800d1a0
 800ca8c:	33bbbd2e 	.word	0x33bbbd2e
 800ca90:	40490fdb 	.word	0x40490fdb
 800ca94:	3fc90fdb 	.word	0x3fc90fdb
 800ca98:	3f490fdb 	.word	0x3f490fdb

0800ca9c <__ieee754_sqrtf>:
 800ca9c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800caa0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	4603      	mov	r3, r0
 800caa8:	4604      	mov	r4, r0
 800caaa:	d309      	bcc.n	800cac0 <__ieee754_sqrtf+0x24>
 800caac:	4601      	mov	r1, r0
 800caae:	f7f4 f919 	bl	8000ce4 <__aeabi_fmul>
 800cab2:	4601      	mov	r1, r0
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7f4 f80d 	bl	8000ad4 <__addsf3>
 800caba:	4604      	mov	r4, r0
 800cabc:	4620      	mov	r0, r4
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	d0fb      	beq.n	800cabc <__ieee754_sqrtf+0x20>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	da06      	bge.n	800cad6 <__ieee754_sqrtf+0x3a>
 800cac8:	4601      	mov	r1, r0
 800caca:	f7f4 f801 	bl	8000ad0 <__aeabi_fsub>
 800cace:	4601      	mov	r1, r0
 800cad0:	f7f4 f9bc 	bl	8000e4c <__aeabi_fdiv>
 800cad4:	e7f1      	b.n	800caba <__ieee754_sqrtf+0x1e>
 800cad6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800cada:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800cade:	d029      	beq.n	800cb34 <__ieee754_sqrtf+0x98>
 800cae0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800cae4:	07cb      	lsls	r3, r1, #31
 800cae6:	f04f 0300 	mov.w	r3, #0
 800caea:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800caee:	f04f 0419 	mov.w	r4, #25
 800caf2:	461e      	mov	r6, r3
 800caf4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800caf8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800cafc:	bf58      	it	pl
 800cafe:	0052      	lslpl	r2, r2, #1
 800cb00:	1040      	asrs	r0, r0, #1
 800cb02:	0052      	lsls	r2, r2, #1
 800cb04:	1875      	adds	r5, r6, r1
 800cb06:	4295      	cmp	r5, r2
 800cb08:	bfde      	ittt	le
 800cb0a:	186e      	addle	r6, r5, r1
 800cb0c:	1b52      	suble	r2, r2, r5
 800cb0e:	185b      	addle	r3, r3, r1
 800cb10:	3c01      	subs	r4, #1
 800cb12:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cb16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cb1a:	d1f3      	bne.n	800cb04 <__ieee754_sqrtf+0x68>
 800cb1c:	b112      	cbz	r2, 800cb24 <__ieee754_sqrtf+0x88>
 800cb1e:	3301      	adds	r3, #1
 800cb20:	f023 0301 	bic.w	r3, r3, #1
 800cb24:	105c      	asrs	r4, r3, #1
 800cb26:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800cb2a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800cb2e:	e7c5      	b.n	800cabc <__ieee754_sqrtf+0x20>
 800cb30:	005b      	lsls	r3, r3, #1
 800cb32:	3201      	adds	r2, #1
 800cb34:	0218      	lsls	r0, r3, #8
 800cb36:	d5fb      	bpl.n	800cb30 <__ieee754_sqrtf+0x94>
 800cb38:	3a01      	subs	r2, #1
 800cb3a:	1a89      	subs	r1, r1, r2
 800cb3c:	e7d0      	b.n	800cae0 <__ieee754_sqrtf+0x44>
	...

0800cb40 <atanf>:
 800cb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb44:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800cb48:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	4680      	mov	r8, r0
 800cb50:	db0e      	blt.n	800cb70 <atanf+0x30>
 800cb52:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cb56:	dd04      	ble.n	800cb62 <atanf+0x22>
 800cb58:	4601      	mov	r1, r0
 800cb5a:	f7f3 ffbb 	bl	8000ad4 <__addsf3>
 800cb5e:	4604      	mov	r4, r0
 800cb60:	e003      	b.n	800cb6a <atanf+0x2a>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f300 80ce 	bgt.w	800cd04 <atanf+0x1c4>
 800cb68:	4c67      	ldr	r4, [pc, #412]	; (800cd08 <atanf+0x1c8>)
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb70:	4b66      	ldr	r3, [pc, #408]	; (800cd0c <atanf+0x1cc>)
 800cb72:	429d      	cmp	r5, r3
 800cb74:	dc0e      	bgt.n	800cb94 <atanf+0x54>
 800cb76:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800cb7a:	da08      	bge.n	800cb8e <atanf+0x4e>
 800cb7c:	4964      	ldr	r1, [pc, #400]	; (800cd10 <atanf+0x1d0>)
 800cb7e:	f7f3 ffa9 	bl	8000ad4 <__addsf3>
 800cb82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb86:	f7f4 fa69 	bl	800105c <__aeabi_fcmpgt>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1ed      	bne.n	800cb6a <atanf+0x2a>
 800cb8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cb92:	e01c      	b.n	800cbce <atanf+0x8e>
 800cb94:	f000 f8e0 	bl	800cd58 <fabsf>
 800cb98:	4b5e      	ldr	r3, [pc, #376]	; (800cd14 <atanf+0x1d4>)
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	429d      	cmp	r5, r3
 800cb9e:	dc7c      	bgt.n	800cc9a <atanf+0x15a>
 800cba0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cba4:	429d      	cmp	r5, r3
 800cba6:	dc67      	bgt.n	800cc78 <atanf+0x138>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	f7f3 ff93 	bl	8000ad4 <__addsf3>
 800cbae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbb2:	f7f3 ff8d 	bl	8000ad0 <__aeabi_fsub>
 800cbb6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cbba:	4605      	mov	r5, r0
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f7f3 ff89 	bl	8000ad4 <__addsf3>
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f7f4 f941 	bl	8000e4c <__aeabi_fdiv>
 800cbca:	2600      	movs	r6, #0
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f7f4 f887 	bl	8000ce4 <__aeabi_fmul>
 800cbd6:	4601      	mov	r1, r0
 800cbd8:	4607      	mov	r7, r0
 800cbda:	f7f4 f883 	bl	8000ce4 <__aeabi_fmul>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	494d      	ldr	r1, [pc, #308]	; (800cd18 <atanf+0x1d8>)
 800cbe2:	f7f4 f87f 	bl	8000ce4 <__aeabi_fmul>
 800cbe6:	494d      	ldr	r1, [pc, #308]	; (800cd1c <atanf+0x1dc>)
 800cbe8:	f7f3 ff74 	bl	8000ad4 <__addsf3>
 800cbec:	4629      	mov	r1, r5
 800cbee:	f7f4 f879 	bl	8000ce4 <__aeabi_fmul>
 800cbf2:	494b      	ldr	r1, [pc, #300]	; (800cd20 <atanf+0x1e0>)
 800cbf4:	f7f3 ff6e 	bl	8000ad4 <__addsf3>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7f4 f873 	bl	8000ce4 <__aeabi_fmul>
 800cbfe:	4949      	ldr	r1, [pc, #292]	; (800cd24 <atanf+0x1e4>)
 800cc00:	f7f3 ff68 	bl	8000ad4 <__addsf3>
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f4 f86d 	bl	8000ce4 <__aeabi_fmul>
 800cc0a:	4947      	ldr	r1, [pc, #284]	; (800cd28 <atanf+0x1e8>)
 800cc0c:	f7f3 ff62 	bl	8000ad4 <__addsf3>
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7f4 f867 	bl	8000ce4 <__aeabi_fmul>
 800cc16:	4945      	ldr	r1, [pc, #276]	; (800cd2c <atanf+0x1ec>)
 800cc18:	f7f3 ff5c 	bl	8000ad4 <__addsf3>
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	f7f4 f861 	bl	8000ce4 <__aeabi_fmul>
 800cc22:	4943      	ldr	r1, [pc, #268]	; (800cd30 <atanf+0x1f0>)
 800cc24:	4607      	mov	r7, r0
 800cc26:	4628      	mov	r0, r5
 800cc28:	f7f4 f85c 	bl	8000ce4 <__aeabi_fmul>
 800cc2c:	4941      	ldr	r1, [pc, #260]	; (800cd34 <atanf+0x1f4>)
 800cc2e:	f7f3 ff4f 	bl	8000ad0 <__aeabi_fsub>
 800cc32:	4629      	mov	r1, r5
 800cc34:	f7f4 f856 	bl	8000ce4 <__aeabi_fmul>
 800cc38:	493f      	ldr	r1, [pc, #252]	; (800cd38 <atanf+0x1f8>)
 800cc3a:	f7f3 ff49 	bl	8000ad0 <__aeabi_fsub>
 800cc3e:	4629      	mov	r1, r5
 800cc40:	f7f4 f850 	bl	8000ce4 <__aeabi_fmul>
 800cc44:	493d      	ldr	r1, [pc, #244]	; (800cd3c <atanf+0x1fc>)
 800cc46:	f7f3 ff43 	bl	8000ad0 <__aeabi_fsub>
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f7f4 f84a 	bl	8000ce4 <__aeabi_fmul>
 800cc50:	493b      	ldr	r1, [pc, #236]	; (800cd40 <atanf+0x200>)
 800cc52:	f7f3 ff3d 	bl	8000ad0 <__aeabi_fsub>
 800cc56:	4629      	mov	r1, r5
 800cc58:	f7f4 f844 	bl	8000ce4 <__aeabi_fmul>
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f7f3 ff38 	bl	8000ad4 <__addsf3>
 800cc64:	4621      	mov	r1, r4
 800cc66:	f7f4 f83d 	bl	8000ce4 <__aeabi_fmul>
 800cc6a:	1c73      	adds	r3, r6, #1
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	d133      	bne.n	800ccd8 <atanf+0x198>
 800cc70:	4620      	mov	r0, r4
 800cc72:	f7f3 ff2d 	bl	8000ad0 <__aeabi_fsub>
 800cc76:	e772      	b.n	800cb5e <atanf+0x1e>
 800cc78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc7c:	f7f3 ff28 	bl	8000ad0 <__aeabi_fsub>
 800cc80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc84:	4605      	mov	r5, r0
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f3 ff24 	bl	8000ad4 <__addsf3>
 800cc8c:	4601      	mov	r1, r0
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f7f4 f8dc 	bl	8000e4c <__aeabi_fdiv>
 800cc94:	2601      	movs	r6, #1
 800cc96:	4604      	mov	r4, r0
 800cc98:	e799      	b.n	800cbce <atanf+0x8e>
 800cc9a:	4b2a      	ldr	r3, [pc, #168]	; (800cd44 <atanf+0x204>)
 800cc9c:	429d      	cmp	r5, r3
 800cc9e:	dc14      	bgt.n	800ccca <atanf+0x18a>
 800cca0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800cca4:	f7f3 ff14 	bl	8000ad0 <__aeabi_fsub>
 800cca8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ccac:	4605      	mov	r5, r0
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f7f4 f818 	bl	8000ce4 <__aeabi_fmul>
 800ccb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ccb8:	f7f3 ff0c 	bl	8000ad4 <__addsf3>
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f7f4 f8c4 	bl	8000e4c <__aeabi_fdiv>
 800ccc4:	2602      	movs	r6, #2
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	e781      	b.n	800cbce <atanf+0x8e>
 800ccca:	4601      	mov	r1, r0
 800cccc:	481e      	ldr	r0, [pc, #120]	; (800cd48 <atanf+0x208>)
 800ccce:	f7f4 f8bd 	bl	8000e4c <__aeabi_fdiv>
 800ccd2:	2603      	movs	r6, #3
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	e77a      	b.n	800cbce <atanf+0x8e>
 800ccd8:	4b1c      	ldr	r3, [pc, #112]	; (800cd4c <atanf+0x20c>)
 800ccda:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ccde:	f7f3 fef7 	bl	8000ad0 <__aeabi_fsub>
 800cce2:	4621      	mov	r1, r4
 800cce4:	f7f3 fef4 	bl	8000ad0 <__aeabi_fsub>
 800cce8:	4b19      	ldr	r3, [pc, #100]	; (800cd50 <atanf+0x210>)
 800ccea:	4601      	mov	r1, r0
 800ccec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ccf0:	f7f3 feee 	bl	8000ad0 <__aeabi_fsub>
 800ccf4:	f1b8 0f00 	cmp.w	r8, #0
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	f6bf af36 	bge.w	800cb6a <atanf+0x2a>
 800ccfe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cd02:	e72c      	b.n	800cb5e <atanf+0x1e>
 800cd04:	4c13      	ldr	r4, [pc, #76]	; (800cd54 <atanf+0x214>)
 800cd06:	e730      	b.n	800cb6a <atanf+0x2a>
 800cd08:	bfc90fdb 	.word	0xbfc90fdb
 800cd0c:	3edfffff 	.word	0x3edfffff
 800cd10:	7149f2ca 	.word	0x7149f2ca
 800cd14:	3f97ffff 	.word	0x3f97ffff
 800cd18:	3c8569d7 	.word	0x3c8569d7
 800cd1c:	3d4bda59 	.word	0x3d4bda59
 800cd20:	3d886b35 	.word	0x3d886b35
 800cd24:	3dba2e6e 	.word	0x3dba2e6e
 800cd28:	3e124925 	.word	0x3e124925
 800cd2c:	3eaaaaab 	.word	0x3eaaaaab
 800cd30:	bd15a221 	.word	0xbd15a221
 800cd34:	3d6ef16b 	.word	0x3d6ef16b
 800cd38:	3d9d8795 	.word	0x3d9d8795
 800cd3c:	3de38e38 	.word	0x3de38e38
 800cd40:	3e4ccccd 	.word	0x3e4ccccd
 800cd44:	401bffff 	.word	0x401bffff
 800cd48:	bf800000 	.word	0xbf800000
 800cd4c:	0800d1bc 	.word	0x0800d1bc
 800cd50:	0800d1ac 	.word	0x0800d1ac
 800cd54:	3fc90fdb 	.word	0x3fc90fdb

0800cd58 <fabsf>:
 800cd58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cd5c:	4770      	bx	lr
	...

0800cd60 <nanf>:
 800cd60:	4800      	ldr	r0, [pc, #0]	; (800cd64 <nanf+0x4>)
 800cd62:	4770      	bx	lr
 800cd64:	7fc00000 	.word	0x7fc00000

0800cd68 <_init>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	bf00      	nop
 800cd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6e:	bc08      	pop	{r3}
 800cd70:	469e      	mov	lr, r3
 800cd72:	4770      	bx	lr

0800cd74 <_fini>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	bf00      	nop
 800cd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7a:	bc08      	pop	{r3}
 800cd7c:	469e      	mov	lr, r3
 800cd7e:	4770      	bx	lr
