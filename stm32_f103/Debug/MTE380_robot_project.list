
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003b60  08003b60  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b60  08003b60  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000020  08003b88  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08003b88  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a57  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb8  00000000  00000000  00035aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00038658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a12a  00000000  00000000  0003a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153a5  00000000  00000000  00054a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093db1  00000000  00000000  00069e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdbe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf0  00000000  00000000  000fdc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b20 	.word	0x08003b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003b20 	.word	0x08003b20

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdfe 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81a 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa46 	bl	8000960 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 fa1a 	bl	800090c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8ae 	bl	8000638 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f8da 	bl	8000694 <MX_I2C2_Init>
  MX_ADC1_Init();
 80004e0:	f000 f86c 	bl	80005bc <MX_ADC1_Init>
  MX_SPI2_Init();
 80004e4:	f000 f904 	bl	80006f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80004e8:	f000 f990 	bl	800080c <MX_TIM2_Init>
  MX_FATFS_Init();
 80004ec:	f003 fa30 	bl	8003950 <MX_FATFS_Init>
  MX_TIM1_Init();
 80004f0:	f000 f934 	bl	800075c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80004f4:	213c      	movs	r1, #60	; 0x3c
 80004f6:	4802      	ldr	r0, [pc, #8]	; (8000500 <main+0x3c>)
 80004f8:	f002 fadd 	bl	8002ab6 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x38>
 80004fe:	bf00      	nop
 8000500:	200001a8 	.word	0x200001a8

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fafc 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fc0e 	bl	8001d7c <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000566:	f000 fa91 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fe78 	bl	800227c <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000592:	f000 fa7b 	bl	8000a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000596:	2302      	movs	r3, #2
 8000598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800059a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f804 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ae:	f000 fa6d 	bl	8000a8c <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	; 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_ADC1_Init+0x74>)
 80005ce:	4a19      	ldr	r2, [pc, #100]	; (8000634 <MX_ADC1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_ADC1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_ADC1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_ADC1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_ADC1_Init+0x74>)
 80005e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_ADC1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_ADC1_Init+0x74>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <MX_ADC1_Init+0x74>)
 80005fa:	f000 fdc7 	bl	800118c <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 fa42 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000608:	2304      	movs	r3, #4
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC1_Init+0x74>)
 800061a:	f000 fe8f 	bl	800133c <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000624:	f000 fa32 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000178 	.word	0x20000178
 8000634:	40012400 	.word	0x40012400

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f001 fa3d 	bl	8001af4 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fa04 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000d0 	.word	0x200000d0
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0

08000694 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C2_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C2_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C2_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C2_Init+0x50>)
 80006d2:	f001 fa0f 	bl	8001af4 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f9d6 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000124 	.word	0x20000124
 80006e8:	40005800 	.word	0x40005800
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI2_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI2_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI2_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI2_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI2_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI2_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI2_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI2_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI2_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI2_Init+0x64>)
 8000742:	f001 ffeb 	bl	800271c <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f99e 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000078 	.word	0x20000078
 8000758:	40003800 	.word	0x40003800

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2224      	movs	r2, #36	; 0x24
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f9d0 	bl	8003b10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_TIM1_Init+0xa8>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_TIM1_Init+0xac>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0xa8>)
 800078c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007a4:	2303      	movs	r3, #3
 80007a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007bc:	2301      	movs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007d0:	f002 f8cf 	bl	8002972 <HAL_TIM_Encoder_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007da:	f000 f957 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007ec:	f002 ff64 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007f6:	f000 f949 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001a8 	.word	0x200001a8
 8000808:	40012c00 	.word	0x40012c00

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_TIM2_Init+0xfc>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_TIM2_Init+0xfc>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_TIM2_Init+0xfc>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4828      	ldr	r0, [pc, #160]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000866:	f001 ffdd 	bl	8002824 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000870:	f000 f90c 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	4619      	mov	r1, r3
 8000880:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000882:	f002 fb8d 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800088c:	f000 f8fe 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000890:	481d      	ldr	r0, [pc, #116]	; (8000908 <MX_TIM2_Init+0xfc>)
 8000892:	f002 f816 	bl	80028c2 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 f8f6 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4816      	ldr	r0, [pc, #88]	; (8000908 <MX_TIM2_Init+0xfc>)
 80008b0:	f002 ff02 	bl	80036b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008ba:	f000 f8e7 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM2_Init+0xfc>)
 80008d6:	f002 faa5 	bl	8002e24 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008e0:	f000 f8d4 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <MX_TIM2_Init+0xfc>)
 80008ec:	f002 fa9a 	bl	8002e24 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80008f6:	f000 f8c9 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <MX_TIM2_Init+0xfc>)
 80008fc:	f000 faba 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000900:	bf00      	nop
 8000902:	3738      	adds	r7, #56	; 0x38
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001f0 	.word	0x200001f0

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART2_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART2_UART_Init+0x4c>)
 8000944:	f002 ff28 	bl	8003798 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f89d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000238 	.word	0x20000238
 800095c:	40004400 	.word	0x40004400

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000974:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x118>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a3f      	ldr	r2, [pc, #252]	; (8000a78 <MX_GPIO_Init+0x118>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <MX_GPIO_Init+0x118>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098c:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <MX_GPIO_Init+0x118>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a39      	ldr	r2, [pc, #228]	; (8000a78 <MX_GPIO_Init+0x118>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <MX_GPIO_Init+0x118>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0320 	and.w	r3, r3, #32
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <MX_GPIO_Init+0x118>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	4828      	ldr	r0, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x11c>)
 80009dc:	f001 f872 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2158      	movs	r1, #88	; 0x58
 80009e4:	4826      	ldr	r0, [pc, #152]	; (8000a80 <MX_GPIO_Init+0x120>)
 80009e6:	f001 f86d 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <MX_GPIO_Init+0x11c>)
 8000a04:	f000 feda 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_Pin FRONT_TRIG_Pin FRONT_ECHO_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin|FRONT_TRIG_Pin|FRONT_ECHO_Pin;
 8000a08:	23e0      	movs	r3, #224	; 0xe0
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x124>)
 8000a1c:	f000 fece 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_ECHO_Pin SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_ECHO_Pin|SIDE_TRIG_Pin;
 8000a20:	2303      	movs	r3, #3
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x120>)
 8000a34:	f000 fec2 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_ENCODER_B_Pin LEFT_ENCODER_A_Pin LEFT_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENCODER_B_Pin|LEFT_ENCODER_A_Pin|LEFT_ENCODER_B_Pin;
 8000a38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_GPIO_Init+0x128>)
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_GPIO_Init+0x124>)
 8000a4e:	f000 feb5 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000a52:	2358      	movs	r3, #88	; 0x58
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0x120>)
 8000a6a:	f000 fea7 	bl	80017bc <HAL_GPIO_Init>

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40010800 	.word	0x40010800
 8000a88:	10110000 	.word	0x10110000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_TIM_IC_CaptureCallback>:
		0,
		0
};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x64>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d123      	bne.n	8000af2 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000aac:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000ab6:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000ac8:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000acc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <HAL_TIM_IC_CaptureCallback+0x48>
 8000ade:	3303      	adds	r3, #3
 8000ae0:	109b      	asrs	r3, r3, #2
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000ae6:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000aea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	80da      	strh	r2, [r3, #6]

		//distance = ((2*pi*radius_wheel)) * position ;
	}
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40012c00 	.word	0x40012c00
 8000b00:	20000040 	.word	0x20000040
 8000b04:	20000058 	.word	0x20000058
 8000b08:	2000005c 	.word	0x2000005c
 8000b0c:	2000005e 	.word	0x2000005e

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_MspInit+0x60>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_MspInit+0x60>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_ADC_MspInit+0x6c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d121      	bne.n	8000bd8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_ADC_MspInit+0x70>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_ADC_MspInit+0x74>)
 8000bd4:	f000 fdf2 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40012400 	.word	0x40012400
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a32      	ldr	r2, [pc, #200]	; (8000cd0 <HAL_I2C_MspInit+0xe4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d133      	bne.n	8000c74 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_ESP_SCL_Pin|I2C_ESP_SDA_Pin;
 8000c24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2a:	2312      	movs	r3, #18
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4827      	ldr	r0, [pc, #156]	; (8000cd8 <HAL_I2C_MspInit+0xec>)
 8000c3a:	f000 fdbf 	bl	80017bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_I2C_MspInit+0xf0>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <HAL_I2C_MspInit+0xf0>)
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c72:	e029      	b.n	8000cc8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_I2C_MspInit+0xf4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d124      	bne.n	8000cc8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8000c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <HAL_I2C_MspInit+0xec>)
 8000cac:	f000 fd86 	bl	80017bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cba:	61d3      	str	r3, [r2, #28]
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_I2C_MspInit+0xe8>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3730      	adds	r7, #48	; 0x30
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40005800 	.word	0x40005800

08000ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_SPI_MspInit+0x8c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d131      	bne.n	8000d68 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	61d3      	str	r3, [r2, #28]
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_SPI_MspInit+0x90>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_SPI_MspInit+0x94>)
 8000d4a:	f000 fd37 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_SPI_MspInit+0x94>)
 8000d64:	f000 fd2a 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40003800 	.word	0x40003800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <HAL_TIM_Encoder_MspInit+0xb4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d144      	bne.n	8000e26 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <HAL_TIM_Encoder_MspInit+0xbc>)
 8000de2:	f000 fceb 	bl	80017bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2018      	movs	r0, #24
 8000dec:	f000 fcaf 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000df0:	2018      	movs	r0, #24
 8000df2:	f000 fcc8 	bl	8001786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2019      	movs	r0, #25
 8000dfc:	f000 fca7 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e00:	2019      	movs	r0, #25
 8000e02:	f000 fcc0 	bl	8001786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201a      	movs	r0, #26
 8000e0c:	f000 fc9f 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000e10:	201a      	movs	r0, #26
 8000e12:	f000 fcb8 	bl	8001786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	201b      	movs	r0, #27
 8000e1c:	f000 fc97 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e20:	201b      	movs	r0, #27
 8000e22:	f000 fcb0 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4c:	d10b      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_TIM_Base_MspInit+0x34>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_TIM_Base_MspInit+0x34>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_TIM_Base_MspInit+0x34>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e92:	d117      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_TIM_MspPostInit+0x58>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_TIM_MspPostInit+0x58>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_TIM_MspPostInit+0x58>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 8000eac:	2303      	movs	r3, #3
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <HAL_TIM_MspPostInit+0x5c>)
 8000ec0:	f000 fc7c 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <HAL_UART_MspInit+0x88>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d12f      	bne.n	8000f54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f24:	2304      	movs	r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f38:	f000 fc40 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f50:	f000 fc34 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010800 	.word	0x40010800

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <SysTick_Handler+0x60>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <SysTick_Handler+0x60>)
 8000fb8:	6013      	str	r3, [r2, #0]
	if ( indx == 500)
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <SysTick_Handler+0x60>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fc2:	d11e      	bne.n	8001002 <SysTick_Handler+0x56>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <SysTick_Handler+0x64>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <SysTick_Handler+0x68>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa0a 	bl	80003f0 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	490d      	ldr	r1, [pc, #52]	; (8001018 <SysTick_Handler+0x6c>)
 8000fe2:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos = position;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SysTick_Handler+0x64>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <SysTick_Handler+0x68>)
 8000fee:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SysTick_Handler+0x60>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
		right_encoder.speed = speed;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SysTick_Handler+0x6c>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <SysTick_Handler+0x70>)
 8000ffe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 f8a7 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000068 	.word	0x20000068
 8001010:	2000005e 	.word	0x2000005e
 8001014:	20000064 	.word	0x20000064
 8001018:	20000060 	.word	0x20000060
 800101c:	20000040 	.word	0x20000040

08001020 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM1_BRK_IRQHandler+0x10>)
 8001026:	f001 fdf4 	bl	8002c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001a8 	.word	0x200001a8

08001034 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM1_UP_IRQHandler+0x10>)
 800103a:	f001 fdea 	bl	8002c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001a8 	.word	0x200001a8

08001048 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM1_TRG_COM_IRQHandler+0x10>)
 800104e:	f001 fde0 	bl	8002c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001a8 	.word	0x200001a8

0800105c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM1_CC_IRQHandler+0x10>)
 8001062:	f001 fdd6 	bl	8002c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001a8 	.word	0x200001a8

08001070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800107c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800107e:	e003      	b.n	8001088 <LoopCopyDataInit>

08001080 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001082:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001084:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001086:	3104      	adds	r1, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800108c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001090:	d3f6      	bcc.n	8001080 <CopyDataInit>
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001094:	e002      	b.n	800109c <LoopFillZerobss>

08001096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001098:	f842 3b04 	str.w	r3, [r2], #4

0800109c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010a0:	d3f9      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010a2:	f7ff ffe5 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f002 fd0f 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010aa:	f7ff fa0b 	bl	80004c4 <main>
  bx lr
 80010ae:	4770      	bx	lr
  ldr r3, =_sidata
 80010b0:	08003b68 	.word	0x08003b68
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010b8:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80010bc:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80010c0:	200006e0 	.word	0x200006e0

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 fb2d 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fd14 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fb45 	bl	80017a2 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f000 fb0d 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x1c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_IncTick+0x20>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x20>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000008 	.word	0x20000008
 8001174:	20000278 	.word	0x20000278

08001178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <HAL_GetTick+0x10>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000278 	.word	0x20000278

0800118c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0be      	b.n	800132c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fcd2 	bl	8000b74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f9ab 	bl	800152c <ADC_ConversionStop_Disable>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8099 	bne.w	800131a <HAL_ADC_Init+0x18e>
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8095 	bne.w	800131a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f8:	f023 0302 	bic.w	r3, r3, #2
 80011fc:	f043 0202 	orr.w	r2, r3, #2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800120c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7b1b      	ldrb	r3, [r3, #12]
 8001212:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001214:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4313      	orrs	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d003      	beq.n	800122e <HAL_ADC_Init+0xa2>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_ADC_Init+0xa8>
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	e000      	b.n	8001236 <HAL_ADC_Init+0xaa>
 8001234:	2300      	movs	r3, #0
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7d1b      	ldrb	r3, [r3, #20]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d119      	bne.n	8001278 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7b1b      	ldrb	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	3b01      	subs	r3, #1
 8001252:	035a      	lsls	r2, r3, #13
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	e00b      	b.n	8001278 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	f043 0220 	orr.w	r2, r3, #32
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_ADC_Init+0x1a8>)
 8001294:	4013      	ands	r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	430b      	orrs	r3, r1
 800129e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0x126>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_ADC_Init+0x1ac>)
 80012d8:	4013      	ands	r3, r2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10b      	bne.n	80012f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f6:	e018      	b.n	800132a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f023 0312 	bic.w	r3, r3, #18
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001318:	e007      	b.n	800132a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132a:	7dfb      	ldrb	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	ffe1f7fd 	.word	0xffe1f7fd
 8001338:	ff1f0efe 	.word	0xff1f0efe

0800133c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ADC_ConfigChannel+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e0dc      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1da>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d81c      	bhi.n	80013a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b05      	subs	r3, #5
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b05      	subs	r3, #5
 8001398:	fa00 f203 	lsl.w	r2, r0, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
 80013a4:	e03c      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d81c      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	; 0x23
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4019      	ands	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b23      	subs	r3, #35	; 0x23
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
 80013e6:	e01b      	b.n	8001420 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b41      	subs	r3, #65	; 0x41
 80013fa:	221f      	movs	r2, #31
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3b41      	subs	r3, #65	; 0x41
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d91c      	bls.n	8001462 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	3b1e      	subs	r3, #30
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	e019      	b.n	8001496 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6919      	ldr	r1, [r3, #16]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014a2:	2b11      	cmp	r3, #17
 80014a4:	d132      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d125      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d126      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d11a      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_ADC_ConfigChannel+0x1e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_ADC_ConfigChannel+0x1ec>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9a      	lsrs	r2, r3, #18
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x1b2>
 80014fa:	e007      	b.n	800150c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40012400 	.word	0x40012400
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d127      	bne.n	8001596 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001556:	f7ff fe0f 	bl	8001178 <HAL_GetTick>
 800155a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800155c:	e014      	b.n	8001588 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800155e:	f7ff fe0b 	bl	8001178 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d90d      	bls.n	8001588 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f043 0210 	orr.w	r2, r3, #16
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e007      	b.n	8001598 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d0e3      	beq.n	800155e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4906      	ldr	r1, [pc, #24]	; (8001638 <__NVIC_EnableIRQ+0x34>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001718:	f7ff ff90 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff2d 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff42 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff35 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08b      	sub	sp, #44	; 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e169      	b.n	8001aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8158 	bne.w	8001a9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a9a      	ldr	r2, [pc, #616]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 80017f8:	4a98      	ldr	r2, [pc, #608]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d875      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 80017fe:	4a98      	ldr	r2, [pc, #608]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d058      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001804:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d86f      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800180a:	4a96      	ldr	r2, [pc, #600]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001810:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d869      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001816:	4a94      	ldr	r2, [pc, #592]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04c      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 800181c:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d863      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001822:	4a92      	ldr	r2, [pc, #584]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d046      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001828:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d85d      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d82a      	bhi.n	8001888 <HAL_GPIO_Init+0xcc>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d859      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_GPIO_Init+0x80>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	080018b7 	.word	0x080018b7
 8001840:	08001891 	.word	0x08001891
 8001844:	080018a3 	.word	0x080018a3
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	080018eb 	.word	0x080018eb
 8001858:	080018eb 	.word	0x080018eb
 800185c:	080018eb 	.word	0x080018eb
 8001860:	080018eb 	.word	0x080018eb
 8001864:	080018eb 	.word	0x080018eb
 8001868:	080018eb 	.word	0x080018eb
 800186c:	080018eb 	.word	0x080018eb
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018eb 	.word	0x080018eb
 800187c:	080018eb 	.word	0x080018eb
 8001880:	08001899 	.word	0x08001899
 8001884:	080018ad 	.word	0x080018ad
 8001888:	4a79      	ldr	r2, [pc, #484]	; (8001a70 <HAL_GPIO_Init+0x2b4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188e:	e02c      	b.n	80018ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e029      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e024      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	3308      	adds	r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e01f      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	330c      	adds	r3, #12
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e01a      	b.n	80018ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018be:	2304      	movs	r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e013      	b.n	80018ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	611a      	str	r2, [r3, #16]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	615a      	str	r2, [r3, #20]
          break;
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x130>
          break;
 80018ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d801      	bhi.n	80018f6 <HAL_GPIO_Init+0x13a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_Init+0x13e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d802      	bhi.n	8001908 <HAL_GPIO_Init+0x14c>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x152>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3b08      	subs	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	210f      	movs	r1, #15
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80b1 	beq.w	8001a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a40      	ldr	r2, [pc, #256]	; (8001a7c <HAL_GPIO_Init+0x2c0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3f      	ldr	r2, [pc, #252]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3e      	ldr	r2, [pc, #248]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1e4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1e0>
 8001998:	2303      	movs	r3, #3
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 800199c:	2304      	movs	r3, #4
 800199e:	e004      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a8:	2300      	movs	r3, #0
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ba:	492f      	ldr	r1, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	492c      	ldr	r1, [pc, #176]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4928      	ldr	r1, [pc, #160]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	491e      	ldr	r1, [pc, #120]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4918      	ldr	r1, [pc, #96]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4914      	ldr	r1, [pc, #80]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d021      	beq.n	8001a90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e021      	b.n	8001a9e <HAL_GPIO_Init+0x2e2>
 8001a5a:	bf00      	nop
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10310000 	.word	0x10310000
 8001a64:	10220000 	.word	0x10220000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f47f ae8e 	bne.w	80017d0 <HAL_GPIO_Init+0x14>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	372c      	adds	r7, #44	; 0x2c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e12b      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff f866 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b58:	f000 fce4 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a81      	ldr	r2, [pc, #516]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d807      	bhi.n	8001b78 <HAL_I2C_Init+0x84>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a80      	ldr	r2, [pc, #512]	; (8001d6c <HAL_I2C_Init+0x278>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e006      	b.n	8001b86 <HAL_I2C_Init+0x92>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a7d      	ldr	r2, [pc, #500]	; (8001d70 <HAL_I2C_Init+0x27c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0e7      	b.n	8001d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a78      	ldr	r2, [pc, #480]	; (8001d74 <HAL_I2C_Init+0x280>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_I2C_Init+0xd4>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	e009      	b.n	8001bdc <HAL_I2C_Init+0xe8>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_I2C_Init+0x284>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3301      	adds	r3, #1
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	495c      	ldr	r1, [pc, #368]	; (8001d68 <HAL_I2C_Init+0x274>)
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	d819      	bhi.n	8001c30 <HAL_I2C_Init+0x13c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1e59      	subs	r1, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0a:	1c59      	adds	r1, r3, #1
 8001c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c10:	400b      	ands	r3, r1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00a      	beq.n	8001c2c <HAL_I2C_Init+0x138>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e59      	subs	r1, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	e051      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e04f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <HAL_I2C_Init+0x168>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Init+0x18e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x196>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e022      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_I2C_Init+0x1bc>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e58      	subs	r0, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	440b      	add	r3, r1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Init+0x1dc>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6911      	ldr	r1, [r2, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	000186a0 	.word	0x000186a0
 8001d6c:	001e847f 	.word	0x001e847f
 8001d70:	003d08ff 	.word	0x003d08ff
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e26c      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da8:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d112      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
 8001db4:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d168      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e246      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76>
 8001de4:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbc>
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a71      	ldr	r2, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f98e 	bl	8001178 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f98a 	bl	8001178 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1fa      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe4>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff f97a 	bl	8001178 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f976 	bl	8001178 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1e6      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1ba      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4939      	ldr	r1, [pc, #228]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff f92f 	bl	8001178 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f92b 	bl	8001178 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e19b      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f90e 	bl	8001178 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff f90a 	bl	8001178 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03a      	beq.n	8002000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff f8ee 	bl	8001178 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f8ea 	bl	8001178 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e15a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 fad8 	bl	8002574 <RCC_Delay>
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f8d4 	bl	8001178 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff f8d0 	bl	8001178 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e140      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
 8001ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e9      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a6 	beq.w	800215a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b97      	ldr	r3, [pc, #604]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b94      	ldr	r3, [pc, #592]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a93      	ldr	r2, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a8a      	ldr	r2, [pc, #552]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff f891 	bl	8001178 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff f88d 	bl	8001178 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0fd      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x312>
 8002080:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a7a      	ldr	r2, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x334>
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x356>
 80020b8:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a66      	ldr	r2, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff f841 	bl	8001178 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f83d 	bl	8001178 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0ab      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x37e>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7ff f82b 	bl	8001178 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f827 	bl	8001178 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e095      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8081 	beq.w	8002266 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d061      	beq.n	8002234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d146      	bne.n	8002206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fffb 	bl	8001178 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fff7 	bl	8001178 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e067      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a19      	ldr	r1, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	4927      	ldr	r1, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe ffcb 	bl	8001178 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe ffc7 	bl	8001178 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e037      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46a>
 8002204:	e02f      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ffb4 	bl	8001178 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ffb0 	bl	8001178 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e020      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x498>
 8002232:	e018      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	42420060 	.word	0x42420060

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7fe ff04 	bl	8001178 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe ff00 	bl	8001178 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fe62 	bl	80010f4 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	08003b48 	.word	0x08003b48
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b490      	push	{r4, r7}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002458:	1d3c      	adds	r4, r7, #4
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002460:	f240 2301 	movw	r3, #513	; 0x201
 8002464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x46>
 800248e:	e02d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024a2:	4413      	add	r3, r2
 80024a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c5b      	lsrs	r3, r3, #17
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ce:	fb02 f203 	mul.w	r2, r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	e004      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	623b      	str	r3, [r7, #32]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	623b      	str	r3, [r7, #32]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc90      	pop	{r4, r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	08003b38 	.word	0x08003b38
 8002504:	40021000 	.word	0x40021000
 8002508:	007a1200 	.word	0x007a1200
 800250c:	003d0900 	.word	0x003d0900

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b02      	ldr	r3, [pc, #8]	; (8002520 <HAL_RCC_GetHCLKFreq+0x10>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002528:	f7ff fff2 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	08003b58 	.word	0x08003b58

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002550:	f7ff ffde 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08003b58 	.word	0x08003b58

08002574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <RCC_Delay+0x34>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <RCC_Delay+0x38>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002590:	bf00      	nop
  }
  while (Delay --);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	60fa      	str	r2, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <RCC_Delay+0x1c>
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	20000000 	.word	0x20000000
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d07d      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d0:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10d      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e6:	61d3      	str	r3, [r2, #28]
 80025e8:	4b49      	ldr	r3, [pc, #292]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d118      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002610:	f7fe fdb2 	bl	8001178 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	e008      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002618:	f7fe fdae 	bl	8001178 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e06d      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002636:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d027      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002654:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800266a:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d014      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe fd7d 	bl	8001178 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fd79 	bl	8001178 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e036      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4917      	ldr	r1, [pc, #92]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	42420440 	.word	0x42420440

0800271c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e076      	b.n	800281c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273e:	d009      	beq.n	8002754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
 8002746:	e005      	b.n	8002754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fab8 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	ea42 0103 	orr.w	r1, r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	0c1a      	lsrs	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f002 0204 	and.w	r2, r2, #4
 80027fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e041      	b.n	80028ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe faf6 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fc84 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e041      	b.n	8002958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f839 	bl	8002960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 fc35 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e093      	b.n	8002aae <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe f9ee 	bl	8000d7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 fbd2 	bl	8003170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	4313      	orrs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	4313      	orrs	r3, r2
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ace:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ad6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ade:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d110      	bne.n	8002b08 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e089      	b.n	8002c0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b06:	e031      	b.n	8002b6c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d110      	bne.n	8002b30 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b0e:	7bbb      	ldrb	r3, [r7, #14]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e075      	b.n	8002c0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b2e:	e01d      	b.n	8002b6c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d108      	bne.n	8002b48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b36:	7bbb      	ldrb	r3, [r7, #14]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b3c:	7b7b      	ldrb	r3, [r7, #13]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b42:	7b3b      	ldrb	r3, [r7, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e05e      	b.n	8002c0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_Encoder_Start_IT+0xc4>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d010      	beq.n	8002b9a <HAL_TIM_Encoder_Start_IT+0xe4>
 8002b78:	e01f      	b.n	8002bba <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd74 	bl	8003670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0202 	orr.w	r2, r2, #2
 8002b96:	60da      	str	r2, [r3, #12]
      break;
 8002b98:	e02e      	b.n	8002bf8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fd64 	bl	8003670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0204 	orr.w	r2, r2, #4
 8002bb6:	60da      	str	r2, [r3, #12]
      break;
 8002bb8:	e01e      	b.n	8002bf8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fd54 	bl	8003670 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2104      	movs	r1, #4
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd4d 	bl	8003670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0202 	orr.w	r2, r2, #2
 8002be4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0204 	orr.w	r2, r2, #4
 8002bf4:	60da      	str	r2, [r3, #12]
      break;
 8002bf6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d122      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d11b      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0202 	mvn.w	r2, #2
 8002c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd ff1f 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8002c5a:	e005      	b.n	8002c68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa6c 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa72 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d122      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d11b      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0204 	mvn.w	r2, #4
 8002c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fef5 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8002cae:	e005      	b.n	8002cbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa42 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa48 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d122      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11b      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0208 	mvn.w	r2, #8
 8002ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2204      	movs	r2, #4
 8002cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd fecb 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8002d02:	e005      	b.n	8002d10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa18 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa1e 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d122      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d11b      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0210 	mvn.w	r2, #16
 8002d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fea1 	bl	8000a98 <HAL_TIM_IC_CaptureCallback>
 8002d56:	e005      	b.n	8002d64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9ee 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9f4 	bl	800314c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0201 	mvn.w	r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f9c9 	bl	8003128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fce2 	bl	8003786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9b8 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d10e      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0220 	mvn.w	r2, #32
 8002e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fcad 	bl	8003774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0ac      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	f200 809f 	bhi.w	8002f8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002f8d 	.word	0x08002f8d
 8002e5c:	08002f8d 	.word	0x08002f8d
 8002e60:	08002f8d 	.word	0x08002f8d
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08002f8d 	.word	0x08002f8d
 8002e6c:	08002f8d 	.word	0x08002f8d
 8002e70:	08002f8d 	.word	0x08002f8d
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002f8d 	.word	0x08002f8d
 8002e7c:	08002f8d 	.word	0x08002f8d
 8002e80:	08002f8d 	.word	0x08002f8d
 8002e84:	08002f4b 	.word	0x08002f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f9d0 	bl	8003234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
      break;
 8002ec6:	e062      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa16 	bl	8003300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	021a      	lsls	r2, r3, #8
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	619a      	str	r2, [r3, #24]
      break;
 8002f08:	e041      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fa5f 	bl	80033d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0208 	orr.w	r2, r2, #8
 8002f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0204 	bic.w	r2, r2, #4
 8002f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	61da      	str	r2, [r3, #28]
      break;
 8002f48:	e021      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 faa9 	bl	80034a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_ConfigClockSource+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0b3      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x180>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff0:	d03e      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	f200 8087 	bhi.w	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	f000 8085 	beq.w	800310c <HAL_TIM_ConfigClockSource+0x16c>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d87f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d01a      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xa2>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d87b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d050      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x116>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d877      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d03c      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0xf6>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d873      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d058      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x136>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d86f      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d064      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d86b      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d060      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d867      	bhi.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d05a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003040:	e062      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f000 faee 	bl	8003632 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	609a      	str	r2, [r3, #8]
      break;
 800306e:	e04e      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f000 fad7 	bl	8003632 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]
      break;
 8003094:	e03b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fa4e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2150      	movs	r1, #80	; 0x50
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 faa5 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030b4:	e02b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fa6c 	bl	80035a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2160      	movs	r1, #96	; 0x60
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa95 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030d4:	e01b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa2e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa85 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 80030f4:	e00b      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f000 fa7c 	bl	80035fe <TIM_ITRx_SetConfig>
        break;
 8003106:	e002      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800310c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d007      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a26      	ldr	r2, [pc, #152]	; (800322c <TIM_Base_SetConfig+0xbc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <TIM_Base_SetConfig+0xbc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <TIM_OC1_SetConfig+0xc8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10c      	bne.n	80032aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0308 	bic.w	r3, r3, #8
 8003296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <TIM_OC1_SetConfig+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00

08003300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0210 	bic.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0320 	bic.w	r3, r3, #32
 800334a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <TIM_OC2_SetConfig+0xd0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10d      	bne.n	800337c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM_OC2_SetConfig+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d113      	bne.n	80033ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <TIM_OC3_SetConfig+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10d      	bne.n	800344e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <TIM_OC3_SetConfig+0xd0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d113      	bne.n	800347e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800345c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	621a      	str	r2, [r3, #32]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00

080034a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	031b      	lsls	r3, r3, #12
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <TIM_OC4_SetConfig+0x98>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00

08003544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 030a 	bic.w	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0210 	bic.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	031b      	lsls	r3, r3, #12
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	431a      	orrs	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e046      	b.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d009      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10c      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4313      	orrs	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e03f      	b.n	800382a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fb88 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f829 	bl	8003834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386e:	f023 030c 	bic.w	r3, r3, #12
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	430b      	orrs	r3, r1
 800387a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <UART_SetConfig+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d103      	bne.n	80038a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7fe fe56 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	e002      	b.n	80038aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038a4:	f7fe fe3e 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80038a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	4a22      	ldr	r2, [pc, #136]	; (800394c <UART_SetConfig+0x118>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	0119      	lsls	r1, r3, #4
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <UART_SetConfig+0x118>)
 80038e2:	fba3 0302 	umull	r0, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2064      	movs	r0, #100	; 0x64
 80038ea:	fb00 f303 	mul.w	r3, r0, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	3332      	adds	r3, #50	; 0x32
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <UART_SetConfig+0x118>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003900:	4419      	add	r1, r3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009a      	lsls	r2, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fbb2 f2f3 	udiv	r2, r2, r3
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <UART_SetConfig+0x118>)
 800391a:	fba3 0302 	umull	r0, r3, r3, r2
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2064      	movs	r0, #100	; 0x64
 8003922:	fb00 f303 	mul.w	r3, r0, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	3332      	adds	r3, #50	; 0x32
 800392c:	4a07      	ldr	r2, [pc, #28]	; (800394c <UART_SetConfig+0x118>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	440a      	add	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40013800 	.word	0x40013800
 800394c:	51eb851f 	.word	0x51eb851f

08003950 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <MX_FATFS_Init+0x18>)
 8003956:	4805      	ldr	r0, [pc, #20]	; (800396c <MX_FATFS_Init+0x1c>)
 8003958:	f000 f8a6 	bl	8003aa8 <FATFS_LinkDriver>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <MX_FATFS_Init+0x20>)
 8003962:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	2000027c 	.word	0x2000027c
 800396c:	2000000c 	.word	0x2000000c
 8003970:	20000280 	.word	0x20000280

08003974 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <USER_initialize+0x20>)
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <USER_initialize+0x20>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000009 	.word	0x20000009

08003998 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <USER_status+0x20>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <USER_status+0x20>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	20000009 	.word	0x20000009

080039bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80039cc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4603      	mov	r3, r0
 80039e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80039e8:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	603a      	str	r2, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
 8003a00:	460b      	mov	r3, r1
 8003a02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
    return res;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a2c:	7a5b      	ldrb	r3, [r3, #9]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d831      	bhi.n	8003a98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a36:	7a5b      	ldrb	r3, [r3, #9]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a44:	7a5b      	ldrb	r3, [r3, #9]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a54:	7a5b      	ldrb	r3, [r3, #9]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a64:	7a5b      	ldrb	r3, [r3, #9]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	b2d1      	uxtb	r1, r2
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <FATFS_LinkDriverEx+0x90>)
 8003a6e:	7251      	strb	r1, [r2, #9]
 8003a70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003a72:	7dbb      	ldrb	r3, [r7, #22]
 8003a74:	3330      	adds	r3, #48	; 0x30
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	223a      	movs	r2, #58	; 0x3a
 8003a82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3302      	adds	r3, #2
 8003a88:	222f      	movs	r2, #47	; 0x2f
 8003a8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3303      	adds	r3, #3
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	2000006c 	.word	0x2000006c

08003aa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ffac 	bl	8003a14 <FATFS_LinkDriverEx>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2600      	movs	r6, #0
 8003acc:	4d0c      	ldr	r5, [pc, #48]	; (8003b00 <__libc_init_array+0x38>)
 8003ace:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ad0:	1b64      	subs	r4, r4, r5
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	42a6      	cmp	r6, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	f000 f822 	bl	8003b20 <_init>
 8003adc:	2600      	movs	r6, #0
 8003ade:	4d0a      	ldr	r5, [pc, #40]	; (8003b08 <__libc_init_array+0x40>)
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <__libc_init_array+0x44>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a6      	cmp	r6, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af0:	4798      	blx	r3
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afa:	4798      	blx	r3
 8003afc:	3601      	adds	r6, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08003b60 	.word	0x08003b60
 8003b04:	08003b60 	.word	0x08003b60
 8003b08:	08003b60 	.word	0x08003b60
 8003b0c:	08003b64 	.word	0x08003b64

08003b10 <memset>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
