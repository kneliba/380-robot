
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800cc60  0800cc60  0001cc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d17c  0800d17c  000202c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d17c  0800d17c  000202c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d17c  0800d17c  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d180  0800d180  0001d180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800d184  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200002c8  0800d448  000202c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800d448  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135b8  00000000  00000000  000202ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  000338a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8c1  00000000  00000000  00038b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016030  00000000  00000000  00053411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c58  00000000  00000000  00069441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006670  00000000  00000000  000fd0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c8 	.word	0x200002c8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cc48 	.word	0x0800cc48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002cc 	.word	0x200002cc
 800014c:	0800cc48 	.word	0x0800cc48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <constrain_value>:
static uint8_t P_control_Kp = 8;
static float PID_Kp = 7;
static float PID_Ki = 0;
static float PID_Kd = 0;

uint16_t constrain_value(uint16_t input, uint16_t min_val, uint16_t max_val){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	807b      	strh	r3, [r7, #2]
	if (input < min_val) return min_val;
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d201      	bcs.n	800119e <constrain_value+0x1e>
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	e006      	b.n	80011ac <constrain_value+0x2c>
	else if (input > max_val) return max_val;
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d901      	bls.n	80011aa <constrain_value+0x2a>
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	e000      	b.n	80011ac <constrain_value+0x2c>
	else return input;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
	...

080011b8 <drive_forward>:

// drive forward - speed %
void drive_forward (double speed)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	e9c7 0100 	strd	r0, r1, [r7]
	double pulse_widthL = 1.0 + (speed*L_offset/100.0);
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <drive_forward+0xe4>)
 80011c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011cc:	f7ff f984 	bl	80004d8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <drive_forward+0xe8>)
 80011de:	f7ff faa5 	bl	800072c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <drive_forward+0xec>)
 80011f0:	f7fe ffbc 	bl	800016c <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double commandL = (pulse_widthL/20.0)*ARR;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <drive_forward+0xf0>)
 8001202:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001206:	f7ff fa91 	bl	800072c <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <drive_forward+0xf4>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double pulse_widthR = 1.0 + (speed/100.0);
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <drive_forward+0xe8>)
 800122a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800122e:	f7ff fa7d 	bl	800072c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <drive_forward+0xec>)
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double commandR = (pulse_widthR/20.0)*ARR;
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <drive_forward+0xf0>)
 8001252:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001256:	f7ff fa69 	bl	800072c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <drive_forward+0xf4>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f936 	bl	80004d8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TIM2->CCR1 = commandL; // left
 8001274:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800127c:	f7ff fc04 	bl	8000a88 <__aeabi_d2uiz>
 8001280:	4603      	mov	r3, r0
 8001282:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CCR2 = commandR; // right
 8001284:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800128c:	f7ff fbfc 	bl	8000a88 <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001294:	bf00      	nop
 8001296:	372c      	adds	r7, #44	; 0x2c
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	20000008 	.word	0x20000008
 80012a0:	40590000 	.word	0x40590000
 80012a4:	3ff00000 	.word	0x3ff00000
 80012a8:	40340000 	.word	0x40340000
 80012ac:	20000000 	.word	0x20000000

080012b0 <drive_straight_PID>:

void drive_straight_PID (double speed, I2C_HandleTypeDef *hi2c2, float current_angle, uint16_t dt)
{
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b090      	sub	sp, #64	; 0x40
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	603b      	str	r3, [r7, #0]
//    current_angle = (int)current_angle%360;

    // Offset for each side due to drivetrain differences

    // TODO: Look into removing this float logic and change to integer logic with larger scale
    double pulse_widthL = 1.0 + (speed*L_offset/100.0);
 80012c0:	4ba8      	ldr	r3, [pc, #672]	; (8001564 <drive_straight_PID+0x2b4>)
 80012c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ca:	f7ff f905 	bl	80004d8 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <drive_straight_PID+0x2b8>)
 80012dc:	f7ff fa26 	bl	800072c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b9f      	ldr	r3, [pc, #636]	; (800156c <drive_straight_PID+0x2bc>)
 80012ee:	f7fe ff3d 	bl	800016c <__adddf3>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double pulse_widthR = 1.0 + (speed/100.0);
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b9a      	ldr	r3, [pc, #616]	; (8001568 <drive_straight_PID+0x2b8>)
 8001300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001304:	f7ff fa12 	bl	800072c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b95      	ldr	r3, [pc, #596]	; (800156c <drive_straight_PID+0x2bc>)
 8001316:	f7fe ff29 	bl	800016c <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    uint16_t commandL = (pulse_widthL/20.0)*ARR;
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b92      	ldr	r3, [pc, #584]	; (8001570 <drive_straight_PID+0x2c0>)
 8001328:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800132c:	f7ff f9fe 	bl	800072c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <drive_straight_PID+0x2c4>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f8cb 	bl	80004d8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fb9d 	bl	8000a88 <__aeabi_d2uiz>
 800134e:	4603      	mov	r3, r0
 8001350:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t commandR = (pulse_widthR/20.0)*ARR;
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b86      	ldr	r3, [pc, #536]	; (8001570 <drive_straight_PID+0x2c0>)
 8001358:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800135c:	f7ff f9e6 	bl	800072c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	4b82      	ldr	r3, [pc, #520]	; (8001574 <drive_straight_PID+0x2c4>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f8b3 	bl	80004d8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fb85 	bl	8000a88 <__aeabi_d2uiz>
 800137e:	4603      	mov	r3, r0
 8001380:	85bb      	strh	r3, [r7, #44]	; 0x2c

    float current_error = current_angle - desired_angle;
 8001382:	4b7d      	ldr	r3, [pc, #500]	; (8001578 <drive_straight_PID+0x2c8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f7ff fbf1 	bl	8000b70 <__aeabi_fsub>
 800138e:	4603      	mov	r3, r0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28

    // This is the PID controller calcs
    imu_integration_sum += (current_error * (dt/1000.0));
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <drive_straight_PID+0x2cc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f846 	bl	8000428 <__aeabi_f2d>
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	4680      	mov	r8, r0
 80013a8:	4689      	mov	r9, r1
 80013aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f828 	bl	8000404 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <drive_straight_PID+0x2d0>)
 80013ba:	f7ff f9b7 	bl	800072c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4640      	mov	r0, r8
 80013c4:	4649      	mov	r1, r9
 80013c6:	f7ff f887 	bl	80004d8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7fe fecb 	bl	800016c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fb73 	bl	8000ac8 <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <drive_straight_PID+0x2cc>)
 80013e6:	6013      	str	r3, [r2, #0]
    float correction = Kp * current_error + Ki * imu_integration_sum + Kd * (current_error - imu_prev_error)/(dt/1000.0);
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <drive_straight_PID+0x2d4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fcc8 	bl	8000d84 <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461c      	mov	r4, r3
 80013f8:	4b63      	ldr	r3, [pc, #396]	; (8001588 <drive_straight_PID+0x2d8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a5f      	ldr	r2, [pc, #380]	; (800157c <drive_straight_PID+0x2cc>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fcbe 	bl	8000d84 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fbb1 	bl	8000b74 <__addsf3>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f807 	bl	8000428 <__aeabi_f2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <drive_straight_PID+0x2dc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001426:	f7ff fba3 	bl	8000b70 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <drive_straight_PID+0x2e0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff fca5 	bl	8000d84 <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fff3 	bl	8000428 <__aeabi_f2d>
 8001442:	4680      	mov	r8, r0
 8001444:	4689      	mov	r9, r1
 8001446:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffda 	bl	8000404 <__aeabi_i2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <drive_straight_PID+0x2d0>)
 8001456:	f7ff f969 	bl	800072c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4640      	mov	r0, r8
 8001460:	4649      	mov	r1, r9
 8001462:	f7ff f963 	bl	800072c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7fe fe7d 	bl	800016c <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb25 	bl	8000ac8 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    imu_prev_error = current_error;
 8001482:	4a42      	ldr	r2, [pc, #264]	; (800158c <drive_straight_PID+0x2dc>)
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	6013      	str	r3, [r2, #0]

    if (current_error < 0){
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800148e:	f7ff fe17 	bl	80010c0 <__aeabi_fcmplt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d027      	beq.n	80014e8 <drive_straight_PID+0x238>
        // Correct by turning left
        double new_command = commandL + correction; //results in decrease bc negative error
 8001498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc1e 	bl	8000cdc <__aeabi_i2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb65 	bl	8000b74 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffbb 	bl	8000428 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        TIM2->CCR1 = constrain_value(new_command, 2000, 4000);
 80014ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014be:	f7ff fae3 	bl	8000a88 <__aeabi_d2uiz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80014ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fe56 	bl	8001180 <constrain_value>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = commandR;
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e4:	6393      	str	r3, [r2, #56]	; 0x38
    else
    {
    	TIM2->CCR1 = commandL;
    	TIM2->CCR2 = commandR;
    }
}
 80014e6:	e037      	b.n	8001558 <drive_straight_PID+0x2a8>
    else if (current_error > 0){
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ee:	f7ff fe05 	bl	80010fc <__aeabi_fcmpgt>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d027      	beq.n	8001548 <drive_straight_PID+0x298>
        double new_command = commandR - correction;
 80014f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fbee 	bl	8000cdc <__aeabi_i2f>
 8001500:	4603      	mov	r3, r0
 8001502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb33 	bl	8000b70 <__aeabi_fsub>
 800150a:	4603      	mov	r3, r0
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe ff8b 	bl	8000428 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9c7 2306 	strd	r2, r3, [r7, #24]
        TIM2->CCR1 = commandL;
 800151a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001520:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = constrain_value(new_command, 2000, 4000);;
 8001522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001526:	f7ff faaf 	bl	8000a88 <__aeabi_d2uiz>
 800152a:	4603      	mov	r3, r0
 800152c:	b29b      	uxth	r3, r3
 800152e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001532:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe22 	bl	8001180 <constrain_value>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001546:	e007      	b.n	8001558 <drive_straight_PID+0x2a8>
    	TIM2->CCR1 = commandL;
 8001548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154e:	6353      	str	r3, [r2, #52]	; 0x34
    	TIM2->CCR2 = commandR;
 8001550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001554:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001556:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001558:	bf00      	nop
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	40590000 	.word	0x40590000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	40340000 	.word	0x40340000
 8001574:	20000000 	.word	0x20000000
 8001578:	200002f4 	.word	0x200002f4
 800157c:	200002e4 	.word	0x200002e4
 8001580:	408f4000 	.word	0x408f4000
 8001584:	0800cca8 	.word	0x0800cca8
 8001588:	0800ccac 	.word	0x0800ccac
 800158c:	200002e8 	.word	0x200002e8
 8001590:	0800ccb0 	.word	0x0800ccb0

08001594 <reset_PID_controller>:
	}

	drive_straight_PID(speed, hi2c2, curr_pose.yaw, curr_pose.dt);
}

void reset_PID_controller(){
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
	imu_integration_sum = 0;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <reset_PID_controller+0x34>)
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
	imu_prev_error = 0;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <reset_PID_controller+0x38>)
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
	us_integration_sum = 0;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <reset_PID_controller+0x3c>)
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
	us_prev_error = 0;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <reset_PID_controller+0x40>)
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	desired_angle = 0;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <reset_PID_controller+0x44>)
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	200002e4 	.word	0x200002e4
 80015cc:	200002e8 	.word	0x200002e8
 80015d0:	200002ec 	.word	0x200002ec
 80015d4:	200002f0 	.word	0x200002f0
 80015d8:	200002f4 	.word	0x200002f4

080015dc <stop>:

void stop ()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	drive_forward (0);
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	f7ff fde6 	bl	80011b8 <drive_forward>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <drive_until>:

// drive until a distance (with ultrasonic)
void drive_until (TIM_HandleTypeDef *htim3, I2C_HandleTypeDef *hi2c2, double speed, double distance)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	e9c7 2300 	strd	r2, r3, [r7]
	reset_PID_controller();
 80015fe:	f7ff ffc9 	bl	8001594 <reset_PID_controller>
	HCSR04_Read_Front(htim3);
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f002 fa22 	bl	8003a4c <HCSR04_Read_Front>
	double ultrasonic_dist = get_front_distance();
 8001608:	f002 fa42 	bl	8003a90 <get_front_distance>
 800160c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	double error = ultrasonic_dist - distance;
 8001610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001618:	f7fe fda6 	bl	8000168 <__aeabi_dsub>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while (error > min_dist) {
 8001624:	e01e      	b.n	8001664 <drive_until+0x74>
		get_imu_data(hi2c2);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f001 f926 	bl	8002878 <get_imu_data>
		drive_straight_PID(speed, hi2c2, curr_pose.yaw, curr_pose.dt);
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <drive_until+0xb8>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <drive_until+0xb8>)
 8001632:	899b      	ldrh	r3, [r3, #12]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4613      	mov	r3, r2
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff fe37 	bl	80012b0 <drive_straight_PID>
		HCSR04_Read_Front(htim3);
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f002 fa02 	bl	8003a4c <HCSR04_Read_Front>
		ultrasonic_dist = get_front_distance();
 8001648:	f002 fa22 	bl	8003a90 <get_front_distance>
 800164c:	e9c7 0104 	strd	r0, r1, [r7, #16]
		error = ultrasonic_dist - distance;
 8001650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001658:	f7fe fd86 	bl	8000168 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while (error > min_dist) {
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <drive_until+0xbc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fedd 	bl	8000428 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001676:	f7ff f9bf 	bl	80009f8 <__aeabi_dcmpgt>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1d2      	bne.n	8001626 <drive_until+0x36>
	}
	adapt_decel(htim3, hi2c2, speed, distance);
 8001680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001684:	e9cd 2300 	strd	r2, r3, [sp]
 8001688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fb20 	bl	8001cd4 <adapt_decel>
	turn_degree(hi2c2, 90);
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <drive_until+0xc0>)
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f000 f876 	bl	800178c <turn_degree>
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000370 	.word	0x20000370
 80016ac:	20000010 	.word	0x20000010
 80016b0:	40568000 	.word	0x40568000

080016b4 <turn_right>:

// turn right
void turn_right (double speed)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	e9c7 0100 	strd	r0, r1, [r7]
	double pulse_width = 1.0 + (speed/100.0);
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <turn_right+0xc8>)
 80016c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c8:	f7ff f830 	bl	800072c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <turn_right+0xcc>)
 80016da:	f7fe fd47 	bl	800016c <__adddf3>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double command = (pulse_width/20.0)*ARR;
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <turn_right+0xd0>)
 80016ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f0:	f7ff f81c 	bl	800072c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <turn_right+0xd4>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe fee9 	bl	80004d8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR1 = command;
 800170e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001716:	f7ff f9b7 	bl	8000a88 <__aeabi_d2uiz>
 800171a:	4603      	mov	r3, r0
 800171c:	6363      	str	r3, [r4, #52]	; 0x34

	// hold right motor
	pulse_width = 1.0;
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <turn_right+0xcc>)
 8001724:	e9c7 2304 	strd	r2, r3, [r7, #16]
	command = (pulse_width/20.0)*ARR;
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <turn_right+0xd0>)
 800172e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001732:	f7fe fffb 	bl	800072c <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <turn_right+0xd4>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fec8 	bl	80004d8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	TIM2->CCR2 = constrain_value(command, 2000, 4000);
 8001750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001754:	f7ff f998 	bl	8000a88 <__aeabi_d2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	b29b      	uxth	r3, r3
 800175c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001760:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fd0b 	bl	8001180 <constrain_value>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	40590000 	.word	0x40590000
 8001780:	3ff00000 	.word	0x3ff00000
 8001784:	40340000 	.word	0x40340000
 8001788:	20000000 	.word	0x20000000

0800178c <turn_degree>:

void turn_degree (I2C_HandleTypeDef *hi2c2, double angle)
{
 800178c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001790:	b088      	sub	sp, #32
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	e9c7 2300 	strd	r2, r3, [r7]
	IMU_Init();
 800179a:	f001 f947 	bl	8002a2c <IMU_Init>
	reset_PID_controller();
 800179e:	f7ff fef9 	bl	8001594 <reset_PID_controller>
	static const float Ki = 0.0;
	static const float Kd = 0.008;

	static const uint8_t threshold = 5; // Acceptable angular setpoint error in degrees

	get_imu_data(hi2c2);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f001 f868 	bl	8002878 <get_imu_data>
	double curr_angle = 0;
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// FIXME: Does this need to be here?
	ICM_SelectBank(hi2c2, USER_BANK_0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 ff2e 	bl	8002618 <ICM_SelectBank>
	HAL_Delay(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f002 fa43 	bl	8003c48 <HAL_Delay>

	float current_error = curr_angle - (-angle);
 80017c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ca:	f7fe fccf 	bl	800016c <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f977 	bl	8000ac8 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

	// This is the PID controller calcs
	imu_integration_sum += (current_error * (curr_pose.dt/1000.0));
 80017de:	4b9a      	ldr	r3, [pc, #616]	; (8001a48 <turn_degree+0x2bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe20 	bl	8000428 <__aeabi_f2d>
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	6978      	ldr	r0, [r7, #20]
 80017ee:	f7fe fe1b 	bl	8000428 <__aeabi_f2d>
 80017f2:	4680      	mov	r8, r0
 80017f4:	4689      	mov	r9, r1
 80017f6:	4b95      	ldr	r3, [pc, #596]	; (8001a4c <turn_degree+0x2c0>)
 80017f8:	899b      	ldrh	r3, [r3, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe02 	bl	8000404 <__aeabi_i2d>
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b92      	ldr	r3, [pc, #584]	; (8001a50 <turn_degree+0x2c4>)
 8001806:	f7fe ff91 	bl	800072c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4640      	mov	r0, r8
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fe61 	bl	80004d8 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
 800181e:	f7fe fca5 	bl	800016c <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f94d 	bl	8000ac8 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	4a85      	ldr	r2, [pc, #532]	; (8001a48 <turn_degree+0x2bc>)
 8001832:	6013      	str	r3, [r2, #0]
	float correction = Kp * current_error + Ki * imu_integration_sum + Kd * (current_error - imu_prev_error)/(curr_pose.dt/1000.0);
 8001834:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <turn_degree+0x2c8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6979      	ldr	r1, [r7, #20]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff faa2 	bl	8000d84 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <turn_degree+0x2cc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <turn_degree+0x2bc>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fa98 	bl	8000d84 <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff f98b 	bl	8000b74 <__addsf3>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fde1 	bl	8000428 <__aeabi_f2d>
 8001866:	4604      	mov	r4, r0
 8001868:	460d      	mov	r5, r1
 800186a:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <turn_degree+0x2d0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	6978      	ldr	r0, [r7, #20]
 8001872:	f7ff f97d 	bl	8000b70 <__aeabi_fsub>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <turn_degree+0x2d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fa7f 	bl	8000d84 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fdcd 	bl	8000428 <__aeabi_f2d>
 800188e:	4680      	mov	r8, r0
 8001890:	4689      	mov	r9, r1
 8001892:	4b6e      	ldr	r3, [pc, #440]	; (8001a4c <turn_degree+0x2c0>)
 8001894:	899b      	ldrh	r3, [r3, #12]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fdb4 	bl	8000404 <__aeabi_i2d>
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b6b      	ldr	r3, [pc, #428]	; (8001a50 <turn_degree+0x2c4>)
 80018a2:	f7fe ff43 	bl	800072c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe ff3d 	bl	800072c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fc57 	bl	800016c <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f8ff 	bl	8000ac8 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	613b      	str	r3, [r7, #16]
	imu_prev_error = current_error;
 80018ce:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <turn_degree+0x2d0>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	6013      	str	r3, [r2, #0]
	// Only Turning Right for now, dw about left

	while (current_error > threshold) {
 80018d4:	e0a3      	b.n	8001a1e <turn_degree+0x292>
		turn_right(correction);
 80018d6:	6938      	ldr	r0, [r7, #16]
 80018d8:	f7fe fda6 	bl	8000428 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff fee6 	bl	80016b4 <turn_right>
		get_imu_data(hi2c2);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 ffc5 	bl	8002878 <get_imu_data>
		curr_angle += curr_pose.yaw;
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <turn_degree+0x2c0>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fd98 	bl	8000428 <__aeabi_f2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001900:	f7fe fc34 	bl	800016c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9c7 2306 	strd	r2, r3, [r7, #24]

		current_error = curr_angle - (-angle);
 800190c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001910:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001914:	f7fe fc2a 	bl	800016c <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f8d2 	bl	8000ac8 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	617b      	str	r3, [r7, #20]

		// This is the PID controller calcs
		imu_integration_sum += (current_error * (curr_pose.dt/1000.0));
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <turn_degree+0x2bc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd7b 	bl	8000428 <__aeabi_f2d>
 8001932:	4604      	mov	r4, r0
 8001934:	460d      	mov	r5, r1
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7fe fd76 	bl	8000428 <__aeabi_f2d>
 800193c:	4680      	mov	r8, r0
 800193e:	4689      	mov	r9, r1
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <turn_degree+0x2c0>)
 8001942:	899b      	ldrh	r3, [r3, #12]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd5d 	bl	8000404 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <turn_degree+0x2c4>)
 8001950:	f7fe feec 	bl	800072c <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4640      	mov	r0, r8
 800195a:	4649      	mov	r1, r9
 800195c:	f7fe fdbc 	bl	80004d8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc00 	bl	800016c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f8a8 	bl	8000ac8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <turn_degree+0x2bc>)
 800197c:	6013      	str	r3, [r2, #0]
		correction = Kp * current_error + Ki * imu_integration_sum + Kd * (current_error - imu_prev_error)/(curr_pose.dt/1000.0);
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <turn_degree+0x2c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9fd 	bl	8000d84 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	461c      	mov	r4, r3
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <turn_degree+0x2cc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <turn_degree+0x2bc>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f9f3 	bl	8000d84 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff f8e6 	bl	8000b74 <__addsf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <turn_degree+0x2d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff f8d8 	bl	8000b70 <__aeabi_fsub>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <turn_degree+0x2d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7ff f9da 	bl	8000d84 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd28 	bl	8000428 <__aeabi_f2d>
 80019d8:	4680      	mov	r8, r0
 80019da:	4689      	mov	r9, r1
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <turn_degree+0x2c0>)
 80019de:	899b      	ldrh	r3, [r3, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd0f 	bl	8000404 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <turn_degree+0x2c4>)
 80019ec:	f7fe fe9e 	bl	800072c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4640      	mov	r0, r8
 80019f6:	4649      	mov	r1, r9
 80019f8:	f7fe fe98 	bl	800072c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe fbb2 	bl	800016c <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f85a 	bl	8000ac8 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]
		imu_prev_error = current_error;
 8001a18:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <turn_degree+0x2d0>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6013      	str	r3, [r2, #0]
	while (current_error > threshold) {
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <turn_degree+0x2d8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f95a 	bl	8000cdc <__aeabi_i2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6978      	ldr	r0, [r7, #20]
 8001a2e:	f7ff fb65 	bl	80010fc <__aeabi_fcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f af4e 	bne.w	80018d6 <turn_degree+0x14a>
	}
	stop();
 8001a3a:	f7ff fdcf 	bl	80015dc <stop>
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a48:	200002e4 	.word	0x200002e4
 8001a4c:	20000370 	.word	0x20000370
 8001a50:	408f4000 	.word	0x408f4000
 8001a54:	0800ccb4 	.word	0x0800ccb4
 8001a58:	0800ccb8 	.word	0x0800ccb8
 8001a5c:	200002e8 	.word	0x200002e8
 8001a60:	0800ccbc 	.word	0x0800ccbc
 8001a64:	0800ccc0 	.word	0x0800ccc0

08001a68 <accelerate>:

// accelerate to desired speed
void accelerate (I2C_HandleTypeDef *hi2c2, double final_speed)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	e9c7 2300 	strd	r2, r3, [r7]
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fcb2 	bl	80003e4 <__aeabi_ui2d>
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <accelerate+0xc8>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fe51 	bl	800072c <__aeabi_ddiv>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <accelerate+0xcc>)
 8001a98:	f7fe fd1e 	bl	80004d8 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <accelerate+0xd0>)
 8001aaa:	f7fe fb5d 	bl	8000168 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <accelerate+0xd4>)
 8001abc:	f7fe fd0c 	bl	80004d8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float yaw = 0;
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
	while (speed < final_speed)
 8001ace:	e021      	b.n	8001b14 <accelerate+0xac>
	{
		get_imu_data(hi2c2);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fed1 	bl	8002878 <get_imu_data>
		yaw += curr_pose.yaw;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <accelerate+0xd8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4619      	mov	r1, r3
 8001adc:	6978      	ldr	r0, [r7, #20]
 8001ade:	f7ff f849 	bl	8000b74 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	617b      	str	r3, [r7, #20]
		drive_straight_PID(speed, hi2c2, yaw, curr_pose.dt);
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <accelerate+0xd8>)
 8001ae8:	899b      	ldrh	r3, [r3, #12]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001af4:	f7ff fbdc 	bl	80012b0 <drive_straight_PID>
		speed += 1;
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <accelerate+0xd0>)
 8001afe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b02:	f7fe fb33 	bl	800016c <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		HAL_Delay(15);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f002 f89a 	bl	8003c48 <HAL_Delay>
	while (speed < final_speed)
 8001b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1c:	f7fe ff4e 	bl	80009bc <__aeabi_dcmplt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1d4      	bne.n	8001ad0 <accelerate+0x68>
	}
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000000 	.word	0x20000000
 8001b34:	40340000 	.word	0x40340000
 8001b38:	3ff00000 	.word	0x3ff00000
 8001b3c:	40590000 	.word	0x40590000
 8001b40:	20000370 	.word	0x20000370

08001b44 <decelerate>:

// decelerate to 0
void decelerate (I2C_HandleTypeDef *hi2c2)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
	// get current speed
	double speed = (((TIM2->CCR1)/ARR)*20.0 - 1)*100;
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fc46 	bl	80003e4 <__aeabi_ui2d>
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <decelerate+0xc8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fde5 	bl	800072c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <decelerate+0xcc>)
 8001b70:	f7fe fcb2 	bl	80004d8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <decelerate+0xd0>)
 8001b82:	f7fe faf1 	bl	8000168 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <decelerate+0xd4>)
 8001b94:	f7fe fca0 	bl	80004d8 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float yaw = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
	while (speed > 0)
 8001ba6:	e021      	b.n	8001bec <decelerate+0xa8>
	{
		get_imu_data(hi2c2);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fe65 	bl	8002878 <get_imu_data>
		yaw += curr_pose.yaw;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <decelerate+0xd8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7fe ffdd 	bl	8000b74 <__addsf3>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60fb      	str	r3, [r7, #12]
		drive_straight_PID(speed, hi2c2, yaw, curr_pose.dt);
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <decelerate+0xd8>)
 8001bc0:	899b      	ldrh	r3, [r3, #12]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bcc:	f7ff fb70 	bl	80012b0 <drive_straight_PID>
		speed -= 1;
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <decelerate+0xd0>)
 8001bd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bda:	f7fe fac5 	bl	8000168 <__aeabi_dsub>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(20);
 8001be6:	2014      	movs	r0, #20
 8001be8:	f002 f82e 	bl	8003c48 <HAL_Delay>
	while (speed > 0)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf8:	f7fe fefe 	bl	80009f8 <__aeabi_dcmpgt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1d2      	bne.n	8001ba8 <decelerate+0x64>
	}
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	40340000 	.word	0x40340000
 8001c14:	3ff00000 	.word	0x3ff00000
 8001c18:	40590000 	.word	0x40590000
 8001c1c:	20000370 	.word	0x20000370

08001c20 <set_P_control_Kp>:

void set_P_control_Kp (uint8_t P_Kp_value) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	P_control_Kp = P_Kp_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <set_P_control_Kp+0x1c>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	7013      	strb	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000014 	.word	0x20000014

08001c40 <set_PID_Kp>:

void set_PID_Kp (float PID_Kp_value) {
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	PID_Kp = PID_Kp_value;
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <set_PID_Kp+0x18>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000018 	.word	0x20000018

08001c5c <set_PID_Ki>:

void set_PID_Ki (float PID_Ki_value) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	PID_Ki = PID_Ki_value;
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <set_PID_Ki+0x18>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	200002f8 	.word	0x200002f8

08001c78 <set_PID_Kd>:

void set_PID_Kd (float PID_Kp_value) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	PID_Kp = PID_Kp_value;
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <set_PID_Kd+0x18>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000018 	.word	0x20000018

08001c94 <set_L_offset>:

void set_L_offset (double L_offset_value) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	e9c7 0100 	strd	r0, r1, [r7]
	L_offset = L_offset_value;
 8001c9e:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <set_L_offset+0x20>)
 8001ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <set_min_dist>:

void set_min_dist (float min_dist_value){
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	min_dist = min_dist_value;
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <set_min_dist+0x18>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <adapt_decel>:
}


// decelerate relative to distance (ultrasonic)
void adapt_decel (TIM_HandleTypeDef *htim3, I2C_HandleTypeDef *hi2c2, double speed, double distance)
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	e9c7 2300 	strd	r2, r3, [r7]
	float Kp = 6;
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <adapt_decel+0x118>)
 8001ce4:	61fb      	str	r3, [r7, #28]
	HCSR04_Read_Front(htim3);
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 feb0 	bl	8003a4c <HCSR04_Read_Front>
	float ultrasonic_dist = get_front_distance();
 8001cec:	f001 fed0 	bl	8003a90 <get_front_distance>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fee6 	bl	8000ac8 <__aeabi_d2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	61bb      	str	r3, [r7, #24]
	float error = ultrasonic_dist-distance;
 8001d00:	69b8      	ldr	r0, [r7, #24]
 8001d02:	f7fe fb91 	bl	8000428 <__aeabi_f2d>
 8001d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d0a:	f7fe fa2d 	bl	8000168 <__aeabi_dsub>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe fed7 	bl	8000ac8 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	617b      	str	r3, [r7, #20]
	//at a distance where we want to slow down
	while (error > 15 && speed > 5)
 8001d1e:	e04f      	b.n	8001dc0 <adapt_decel+0xec>
	{
		get_imu_data(hi2c2);
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f000 fda9 	bl	8002878 <get_imu_data>
		speed = constrain_value(speed - (speed*Kp)/error, 0, speed);
 8001d26:	69f8      	ldr	r0, [r7, #28]
 8001d28:	f7fe fb7e 	bl	8000428 <__aeabi_f2d>
 8001d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d30:	f7fe fbd2 	bl	80004d8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7fe fb73 	bl	8000428 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f7fe fcef 	bl	800072c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d56:	f7fe fa07 	bl	8000168 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fe91 	bl	8000a88 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29c      	uxth	r4, r3
 8001d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d6e:	f7fe fe8b 	bl	8000a88 <__aeabi_d2uiz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff fa00 	bl	8001180 <constrain_value>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fb2e 	bl	80003e4 <__aeabi_ui2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 2300 	strd	r2, r3, [r7]
		drive_straight_PID(speed, hi2c2, curr_pose.yaw, curr_pose.dt);
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <adapt_decel+0x11c>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <adapt_decel+0x11c>)
 8001d96:	899b      	ldrh	r3, [r3, #12]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da2:	f7ff fa85 	bl	80012b0 <drive_straight_PID>
		HCSR04_Read_Front(htim3);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f001 fe50 	bl	8003a4c <HCSR04_Read_Front>
		ultrasonic_dist = get_front_distance();
 8001dac:	f001 fe70 	bl	8003a90 <get_front_distance>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fe86 	bl	8000ac8 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	61bb      	str	r3, [r7, #24]
	while (error > 15 && speed > 5)
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <adapt_decel+0x120>)
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff f99a 	bl	80010fc <__aeabi_fcmpgt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d100      	bne.n	8001dd0 <adapt_decel+0xfc>
	}
//	stop();
}
 8001dce:	e009      	b.n	8001de4 <adapt_decel+0x110>
	while (error > 15 && speed > 5)
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <adapt_decel+0x124>)
 8001dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dda:	f7fe fe0d 	bl	80009f8 <__aeabi_dcmpgt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d19d      	bne.n	8001d20 <adapt_decel+0x4c>
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	40c00000 	.word	0x40c00000
 8001df0:	20000370 	.word	0x20000370
 8001df4:	41700000 	.word	0x41700000
 8001df8:	40140000 	.word	0x40140000

08001dfc <ESP_Receive>:
char PID_set_kd_com[] = "PID_kd";
char set_L_offset_com[] = "L_offset";
char set_min_dist_com[] = "min_dist";


void ESP_Receive(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim3, I2C_HandleTypeDef *hi2c2, uint8_t *UART2_rxBuffer, UART_HandleTypeDef *huart2) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b09e      	sub	sp, #120	; 0x78
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
	//esp command: "df_030" where 030 is the speed percentage
	//	char *received_buff = (char*)UART2_rxBuffer;
	if(strncmp((char *)UART2_rxBuffer, drive_forward_com, strlen(drive_forward_com)) == 0) {
 8001e0a:	48a7      	ldr	r0, [pc, #668]	; (80020a8 <ESP_Receive+0x2ac>)
 8001e0c:	f7fe f9a0 	bl	8000150 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	49a4      	ldr	r1, [pc, #656]	; (80020a8 <ESP_Receive+0x2ac>)
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f007 f978 	bl	800910c <strncmp>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <ESP_Receive+0x44>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, drive_forward_com);
 8001e22:	49a1      	ldr	r1, [pc, #644]	; (80020a8 <ESP_Receive+0x2ac>)
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f000 f9b7 	bl	8002198 <get_integer_from_string>
 8001e2a:	6178      	str	r0, [r7, #20]
		drive_forward(speed);
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7fe fae9 	bl	8000404 <__aeabi_i2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7ff f9bd 	bl	80011b8 <drive_forward>
	else if(strncmp((char *)UART2_rxBuffer, set_min_dist_com, strlen(set_min_dist_com))== 0) {
		double min_dist = get_double_from_string((char *)UART2_rxBuffer, set_min_dist_com, 1);
		set_min_dist(min_dist);
	}

}
 8001e3e:	e1a0      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, drive_until_com, strlen(drive_until_com)) == 0) {
 8001e40:	489a      	ldr	r0, [pc, #616]	; (80020ac <ESP_Receive+0x2b0>)
 8001e42:	f7fe f985 	bl	8000150 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4998      	ldr	r1, [pc, #608]	; (80020ac <ESP_Receive+0x2b0>)
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f007 f95d 	bl	800910c <strncmp>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d125      	bne.n	8001ea4 <ESP_Receive+0xa8>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, drive_until_com);
 8001e58:	4994      	ldr	r1, [pc, #592]	; (80020ac <ESP_Receive+0x2b0>)
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	f000 f99c 	bl	8002198 <get_integer_from_string>
 8001e60:	6238      	str	r0, [r7, #32]
		double distance = get_double_from_string((char *)UART2_rxBuffer, drive_until_com, 5);
 8001e62:	2205      	movs	r2, #5
 8001e64:	4991      	ldr	r1, [pc, #580]	; (80020ac <ESP_Receive+0x2b0>)
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f000 f9b5 	bl	80021d6 <get_double_from_string>
 8001e6c:	e9c7 0106 	strd	r0, r1, [r7, #24]
		drive_until( htim3, hi2c2, speed, distance);
 8001e70:	6a38      	ldr	r0, [r7, #32]
 8001e72:	f7fe fac7 	bl	8000404 <__aeabi_i2d>
 8001e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	68b8      	ldr	r0, [r7, #8]
 8001e86:	f7ff fbb3 	bl	80015f0 <drive_until>
		sprintf(MSG, "Command received: %s with %d \n", drive_until_com, speed);
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	4a87      	ldr	r2, [pc, #540]	; (80020ac <ESP_Receive+0x2b0>)
 8001e8e:	4988      	ldr	r1, [pc, #544]	; (80020b0 <ESP_Receive+0x2b4>)
 8001e90:	4888      	ldr	r0, [pc, #544]	; (80020b4 <ESP_Receive+0x2b8>)
 8001e92:	f007 f91b 	bl	80090cc <siprintf>
		HAL_UART_Transmit(huart2, MSG, sizeof(MSG), 100);
 8001e96:	2364      	movs	r3, #100	; 0x64
 8001e98:	2223      	movs	r2, #35	; 0x23
 8001e9a:	4986      	ldr	r1, [pc, #536]	; (80020b4 <ESP_Receive+0x2b8>)
 8001e9c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e9e:	f005 ff8a 	bl	8007db6 <HAL_UART_Transmit>
}
 8001ea2:	e16e      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, stop_com, strlen(stop_com))== 0) {
 8001ea4:	4884      	ldr	r0, [pc, #528]	; (80020b8 <ESP_Receive+0x2bc>)
 8001ea6:	f7fe f953 	bl	8000150 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	4982      	ldr	r1, [pc, #520]	; (80020b8 <ESP_Receive+0x2bc>)
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f007 f92b 	bl	800910c <strncmp>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <ESP_Receive+0xc8>
		stop(htim2);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fb8d 	bl	80015dc <stop>
}
 8001ec2:	e15e      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, turn_right_com, strlen(turn_right_com))== 0) {
 8001ec4:	487d      	ldr	r0, [pc, #500]	; (80020bc <ESP_Receive+0x2c0>)
 8001ec6:	f7fe f943 	bl	8000150 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	497b      	ldr	r1, [pc, #492]	; (80020bc <ESP_Receive+0x2c0>)
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f007 f91b 	bl	800910c <strncmp>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10e      	bne.n	8001efa <ESP_Receive+0xfe>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, turn_right_com);
 8001edc:	4977      	ldr	r1, [pc, #476]	; (80020bc <ESP_Receive+0x2c0>)
 8001ede:	6838      	ldr	r0, [r7, #0]
 8001ee0:	f000 f95a 	bl	8002198 <get_integer_from_string>
 8001ee4:	6278      	str	r0, [r7, #36]	; 0x24
		turn_right( speed);
 8001ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee8:	f7fe fa8c 	bl	8000404 <__aeabi_i2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7ff fbde 	bl	80016b4 <turn_right>
}
 8001ef8:	e143      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, turn_right_com, strlen(turn_degree_com))== 0) {
 8001efa:	4871      	ldr	r0, [pc, #452]	; (80020c0 <ESP_Receive+0x2c4>)
 8001efc:	f7fe f928 	bl	8000150 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	496d      	ldr	r1, [pc, #436]	; (80020bc <ESP_Receive+0x2c0>)
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f007 f900 	bl	800910c <strncmp>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <ESP_Receive+0x148>
		int angle = get_integer_from_string((char *)UART2_rxBuffer, turn_degree_com);
 8001f12:	496b      	ldr	r1, [pc, #428]	; (80020c0 <ESP_Receive+0x2c4>)
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f000 f93f 	bl	8002198 <get_integer_from_string>
 8001f1a:	62b8      	str	r0, [r7, #40]	; 0x28
		turn_degree( hi2c2, angle);
 8001f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f1e:	f7fe fa71 	bl	8000404 <__aeabi_i2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fc30 	bl	800178c <turn_degree>
		sprintf(MSG, "Command received: %s\n", turn_degree_com);
 8001f2c:	4a64      	ldr	r2, [pc, #400]	; (80020c0 <ESP_Receive+0x2c4>)
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <ESP_Receive+0x2c8>)
 8001f30:	4860      	ldr	r0, [pc, #384]	; (80020b4 <ESP_Receive+0x2b8>)
 8001f32:	f007 f8cb 	bl	80090cc <siprintf>
		HAL_UART_Transmit(huart2, MSG, sizeof(MSG), 100);
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	2223      	movs	r2, #35	; 0x23
 8001f3a:	495e      	ldr	r1, [pc, #376]	; (80020b4 <ESP_Receive+0x2b8>)
 8001f3c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f3e:	f005 ff3a 	bl	8007db6 <HAL_UART_Transmit>
}
 8001f42:	e11e      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, accelerate_com, strlen(accelerate_com))== 0) {
 8001f44:	4860      	ldr	r0, [pc, #384]	; (80020c8 <ESP_Receive+0x2cc>)
 8001f46:	f7fe f903 	bl	8000150 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	495e      	ldr	r1, [pc, #376]	; (80020c8 <ESP_Receive+0x2cc>)
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f007 f8db 	bl	800910c <strncmp>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <ESP_Receive+0x17c>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, accelerate_com);
 8001f5c:	495a      	ldr	r1, [pc, #360]	; (80020c8 <ESP_Receive+0x2cc>)
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f000 f91a 	bl	8002198 <get_integer_from_string>
 8001f64:	62f8      	str	r0, [r7, #44]	; 0x2c
		accelerate(htim2, speed);
 8001f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f68:	f7fe fa4c 	bl	8000404 <__aeabi_i2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fd79 	bl	8001a68 <accelerate>
}
 8001f76:	e104      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, decelerate_com, strlen(decelerate_com))== 0) {
 8001f78:	4854      	ldr	r0, [pc, #336]	; (80020cc <ESP_Receive+0x2d0>)
 8001f7a:	f7fe f8e9 	bl	8000150 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	4952      	ldr	r1, [pc, #328]	; (80020cc <ESP_Receive+0x2d0>)
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f007 f8c1 	bl	800910c <strncmp>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <ESP_Receive+0x19c>
		decelerate(htim2);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fdd7 	bl	8001b44 <decelerate>
}
 8001f96:	e0f4      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, adapt_decel_com, strlen(adapt_decel_com))== 0) {
 8001f98:	484d      	ldr	r0, [pc, #308]	; (80020d0 <ESP_Receive+0x2d4>)
 8001f9a:	f7fe f8d9 	bl	8000150 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	494b      	ldr	r1, [pc, #300]	; (80020d0 <ESP_Receive+0x2d4>)
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f007 f8b1 	bl	800910c <strncmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d125      	bne.n	8001ffc <ESP_Receive+0x200>
		int speed = get_integer_from_string((char *)UART2_rxBuffer, adapt_decel_com);
 8001fb0:	4947      	ldr	r1, [pc, #284]	; (80020d0 <ESP_Receive+0x2d4>)
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f000 f8f0 	bl	8002198 <get_integer_from_string>
 8001fb8:	63f8      	str	r0, [r7, #60]	; 0x3c
		double distance = get_double_from_string((char *)UART2_rxBuffer, drive_distance_com, 5);
 8001fba:	2205      	movs	r2, #5
 8001fbc:	4945      	ldr	r1, [pc, #276]	; (80020d4 <ESP_Receive+0x2d8>)
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f000 f909 	bl	80021d6 <get_double_from_string>
 8001fc4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
		adapt_decel(htim3, hi2c2, speed, distance);
 8001fc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001fca:	f7fe fa1b 	bl	8000404 <__aeabi_i2d>
 8001fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f7ff fe79 	bl	8001cd4 <adapt_decel>
		sprintf(MSG, "Command received: %s with %d \n", adapt_decel_com, speed);
 8001fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe4:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <ESP_Receive+0x2d4>)
 8001fe6:	4932      	ldr	r1, [pc, #200]	; (80020b0 <ESP_Receive+0x2b4>)
 8001fe8:	4832      	ldr	r0, [pc, #200]	; (80020b4 <ESP_Receive+0x2b8>)
 8001fea:	f007 f86f 	bl	80090cc <siprintf>
		HAL_UART_Transmit(huart2, MSG, sizeof(MSG), 100);
 8001fee:	2364      	movs	r3, #100	; 0x64
 8001ff0:	2223      	movs	r2, #35	; 0x23
 8001ff2:	4930      	ldr	r1, [pc, #192]	; (80020b4 <ESP_Receive+0x2b8>)
 8001ff4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001ff6:	f005 fede 	bl	8007db6 <HAL_UART_Transmit>
}
 8001ffa:	e0c2      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, P_set_com, strlen(P_set_com))== 0) {
 8001ffc:	4836      	ldr	r0, [pc, #216]	; (80020d8 <ESP_Receive+0x2dc>)
 8001ffe:	f7fe f8a7 	bl	8000150 <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4934      	ldr	r1, [pc, #208]	; (80020d8 <ESP_Receive+0x2dc>)
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f007 f87f 	bl	800910c <strncmp>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d110      	bne.n	8002036 <ESP_Receive+0x23a>
		double kp = get_double_from_string((char *)UART2_rxBuffer, P_set_com, 1);
 8002014:	2201      	movs	r2, #1
 8002016:	4930      	ldr	r1, [pc, #192]	; (80020d8 <ESP_Receive+0x2dc>)
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f000 f8dc 	bl	80021d6 <get_double_from_string>
 800201e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		set_P_control_Kp(kp);
 8002022:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002026:	f7fe fd2f 	bl	8000a88 <__aeabi_d2uiz>
 800202a:	4603      	mov	r3, r0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fdf6 	bl	8001c20 <set_P_control_Kp>
}
 8002034:	e0a5      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, PID_set_kp_com, strlen(PID_set_kp_com))== 0) {
 8002036:	4829      	ldr	r0, [pc, #164]	; (80020dc <ESP_Receive+0x2e0>)
 8002038:	f7fe f88a 	bl	8000150 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4926      	ldr	r1, [pc, #152]	; (80020dc <ESP_Receive+0x2e0>)
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f007 f862 	bl	800910c <strncmp>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <ESP_Receive+0x272>
		double kp = get_double_from_string((char *)UART2_rxBuffer, PID_set_kp_com, 1);
 800204e:	2201      	movs	r2, #1
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <ESP_Receive+0x2e0>)
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f000 f8bf 	bl	80021d6 <get_double_from_string>
 8002058:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		set_PID_Kp(kp);
 800205c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002060:	f7fe fd32 	bl	8000ac8 <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fdea 	bl	8001c40 <set_PID_Kp>
}
 800206c:	e089      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, PID_set_ki_com, strlen(PID_set_ki_com))== 0) {
 800206e:	481c      	ldr	r0, [pc, #112]	; (80020e0 <ESP_Receive+0x2e4>)
 8002070:	f7fe f86e 	bl	8000150 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	4919      	ldr	r1, [pc, #100]	; (80020e0 <ESP_Receive+0x2e4>)
 800207a:	6838      	ldr	r0, [r7, #0]
 800207c:	f007 f846 	bl	800910c <strncmp>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12e      	bne.n	80020e4 <ESP_Receive+0x2e8>
		double ki = get_double_from_string((char *)UART2_rxBuffer, PID_set_ki_com, 1);
 8002086:	2201      	movs	r2, #1
 8002088:	4915      	ldr	r1, [pc, #84]	; (80020e0 <ESP_Receive+0x2e4>)
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f000 f8a3 	bl	80021d6 <get_double_from_string>
 8002090:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
		set_PID_Ki(ki);
 8002094:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002098:	f7fe fd16 	bl	8000ac8 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fddc 	bl	8001c5c <set_PID_Ki>
}
 80020a4:	e06d      	b.n	8002182 <ESP_Receive+0x386>
 80020a6:	bf00      	nop
 80020a8:	2000001c 	.word	0x2000001c
 80020ac:	20000024 	.word	0x20000024
 80020b0:	0800cc60 	.word	0x0800cc60
 80020b4:	20000308 	.word	0x20000308
 80020b8:	20000028 	.word	0x20000028
 80020bc:	20000030 	.word	0x20000030
 80020c0:	20000034 	.word	0x20000034
 80020c4:	0800cc80 	.word	0x0800cc80
 80020c8:	20000038 	.word	0x20000038
 80020cc:	2000003c 	.word	0x2000003c
 80020d0:	20000044 	.word	0x20000044
 80020d4:	20000020 	.word	0x20000020
 80020d8:	2000004c 	.word	0x2000004c
 80020dc:	20000054 	.word	0x20000054
 80020e0:	2000005c 	.word	0x2000005c
	else if(strncmp((char *)UART2_rxBuffer, PID_set_kd_com, strlen(PID_set_kd_com))== 0) {
 80020e4:	4829      	ldr	r0, [pc, #164]	; (800218c <ESP_Receive+0x390>)
 80020e6:	f7fe f833 	bl	8000150 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4927      	ldr	r1, [pc, #156]	; (800218c <ESP_Receive+0x390>)
 80020f0:	6838      	ldr	r0, [r7, #0]
 80020f2:	f007 f80b 	bl	800910c <strncmp>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <ESP_Receive+0x320>
		double kd = get_double_from_string((char *)UART2_rxBuffer, PID_set_kd_com, 1);
 80020fc:	2201      	movs	r2, #1
 80020fe:	4923      	ldr	r1, [pc, #140]	; (800218c <ESP_Receive+0x390>)
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	f000 f868 	bl	80021d6 <get_double_from_string>
 8002106:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
		set_PID_Kd(kd);
 800210a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800210e:	f7fe fcdb 	bl	8000ac8 <__aeabi_d2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fdaf 	bl	8001c78 <set_PID_Kd>
}
 800211a:	e032      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, set_L_offset_com, strlen(set_L_offset_com))== 0) {
 800211c:	481c      	ldr	r0, [pc, #112]	; (8002190 <ESP_Receive+0x394>)
 800211e:	f7fe f817 	bl	8000150 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	491a      	ldr	r1, [pc, #104]	; (8002190 <ESP_Receive+0x394>)
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f006 ffef 	bl	800910c <strncmp>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <ESP_Receive+0x350>
		double L_offset = get_double_from_string((char *)UART2_rxBuffer, set_L_offset_com, 1);
 8002134:	2201      	movs	r2, #1
 8002136:	4916      	ldr	r1, [pc, #88]	; (8002190 <ESP_Receive+0x394>)
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f000 f84c 	bl	80021d6 <get_double_from_string>
 800213e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
		set_L_offset(L_offset);
 8002142:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002146:	f7ff fda5 	bl	8001c94 <set_L_offset>
}
 800214a:	e01a      	b.n	8002182 <ESP_Receive+0x386>
	else if(strncmp((char *)UART2_rxBuffer, set_min_dist_com, strlen(set_min_dist_com))== 0) {
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <ESP_Receive+0x398>)
 800214e:	f7fd ffff 	bl	8000150 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	490f      	ldr	r1, [pc, #60]	; (8002194 <ESP_Receive+0x398>)
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f006 ffd7 	bl	800910c <strncmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <ESP_Receive+0x386>
		double min_dist = get_double_from_string((char *)UART2_rxBuffer, set_min_dist_com, 1);
 8002164:	2201      	movs	r2, #1
 8002166:	490b      	ldr	r1, [pc, #44]	; (8002194 <ESP_Receive+0x398>)
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f000 f834 	bl	80021d6 <get_double_from_string>
 800216e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
		set_min_dist(min_dist);
 8002172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002176:	f7fe fca7 	bl	8000ac8 <__aeabi_d2f>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fd9b 	bl	8001cb8 <set_min_dist>
}
 8002182:	bf00      	nop
 8002184:	3770      	adds	r7, #112	; 0x70
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000064 	.word	0x20000064
 8002190:	2000006c 	.word	0x2000006c
 8002194:	20000078 	.word	0x20000078

08002198 <get_integer_from_string>:

//3 digits numbers currently
int get_integer_from_string(char *buffer_msg, char *string_command){
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]

	char int_substr[4];
	memcpy(int_substr, &buffer_msg[strlen(string_command)+1], 3 );
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f7fd ffd4 	bl	8000150 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	3301      	adds	r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	18d1      	adds	r1, r2, r3
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	2203      	movs	r2, #3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f006 fb12 	bl	80087e0 <memcpy>
	int_substr[3] = '\0';
 80021bc:	2300      	movs	r3, #0
 80021be:	72fb      	strb	r3, [r7, #11]

	int int_value = atoi(int_substr);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4618      	mov	r0, r3
 80021c6:	f006 fadc 	bl	8008782 <atoi>
 80021ca:	60f8      	str	r0, [r7, #12]
	return int_value;
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <get_double_from_string>:

//3 digits numbers with decimal currently: "2.15"
double get_double_from_string(char *buffer_msg, char *string_command, int offset){
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b088      	sub	sp, #32
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
	char double_substr[5];
	memcpy(double_substr, &buffer_msg[strlen(string_command)+offset], 4 );
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f7fd ffb4 	bl	8000150 <strlen>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	613b      	str	r3, [r7, #16]
	double_substr[4] = '\0';
 80021f6:	2300      	movs	r3, #0
 80021f8:	753b      	strb	r3, [r7, #20]

	double double_value = atof(double_substr);
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 fabc 	bl	800877c <atof>
 8002204:	e9c7 0106 	strd	r0, r1, [r7, #24]
	return double_value;
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <ICM_WriteOneByte>:
static double dt = 0;

robot_pose curr_pose = {0, 0, 0, 0};

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData) // ***
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b088      	sub	sp, #32
 800221a:	af04      	add	r7, sp, #16
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	460b      	mov	r3, r1
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	72fb      	strb	r3, [r7, #11]
	reg = reg & 0x7F;
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800222a:	72fb      	strb	r3, [r7, #11]
//	uint8_t Trans[2]={reg, Data};
//	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
	HAL_I2C_Mem_Write(hi2c, ICM20948_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, pData, 1, 1000);
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	b29a      	uxth	r2, r3
 8002230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	21d2      	movs	r1, #210	; 0xd2
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f002 fbd4 	bl	80049f0 <HAL_I2C_Mem_Write>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value)
  {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
 800225c:	4613      	mov	r3, r2
 800225e:	70bb      	strb	r3, [r7, #2]
	uint8_t writeData = 0x30;
 8002260:	2330      	movs	r3, #48	; 0x30
 8002262:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x7F, &writeData);
 8002264:	f107 030f 	add.w	r3, r7, #15
 8002268:	461a      	mov	r2, r3
 800226a:	217f      	movs	r1, #127	; 0x7f
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ffd2 	bl	8002216 <ICM_WriteOneByte>
  	HAL_Delay(1);
 8002272:	2001      	movs	r0, #1
 8002274:	f001 fce8 	bl	8003c48 <HAL_Delay>
  	writeData = 0x0C;
 8002278:	230c      	movs	r3, #12
 800227a:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x03, &writeData);//mode: write
 800227c:	f107 030f 	add.w	r3, r7, #15
 8002280:	461a      	mov	r2, r3
 8002282:	2103      	movs	r1, #3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffc6 	bl	8002216 <ICM_WriteOneByte>
  	HAL_Delay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f001 fcdc 	bl	8003c48 <HAL_Delay>
  	writeData = reg;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x04, &writeData);//set reg addr
 8002294:	f107 030f 	add.w	r3, r7, #15
 8002298:	461a      	mov	r2, r3
 800229a:	2104      	movs	r1, #4
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffba 	bl	8002216 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f001 fcd0 	bl	8003c48 <HAL_Delay>
  	writeData = value;
 80022a8:	78bb      	ldrb	r3, [r7, #2]
 80022aa:	73fb      	strb	r3, [r7, #15]
  	ICM_WriteOneByte(hi2c, 0x06, &writeData);//send value
 80022ac:	f107 030f 	add.w	r3, r7, #15
 80022b0:	461a      	mov	r2, r3
 80022b2:	2106      	movs	r1, #6
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffae 	bl	8002216 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f001 fcc4 	bl	8003c48 <HAL_Delay>
  }
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_0);
 80022d0:	2100      	movs	r1, #0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9a0 	bl	8002618 <ICM_SelectBank>
	HAL_Delay(5);
 80022d8:	2005      	movs	r0, #5
 80022da:	f001 fcb5 	bl	8003c48 <HAL_Delay>
//	ICM_Set_I2C_Clk(hi2c);
//	HAL_Delay(5);
//
//	ICM_SelectBank(hi2c, USER_BANK_0);
//	HAL_Delay(5);
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 80022de:	2101      	movs	r1, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9ac 	bl	800263e <ICM_SetClock>
	HAL_Delay(5);
 80022e6:	2005      	movs	r0, #5
 80022e8:	f001 fcae 	bl	8003c48 <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9b9 	bl	8002664 <ICM_AccelGyroOff>
	HAL_Delay(20);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f001 fca8 	bl	8003c48 <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f9c4 	bl	8002686 <ICM_AccelGyroOn>
	HAL_Delay(35);
 80022fe:	2023      	movs	r0, #35	; 0x23
 8002300:	f001 fca2 	bl	8003c48 <HAL_Delay>
	ICM_Initialize(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f804 	bl	8002312 <ICM_Initialize>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 800231a:	2120      	movs	r1, #32
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f97b 	bl	8002618 <ICM_SelectBank>
	HAL_Delay(5);
 8002322:	2005      	movs	r0, #5
 8002324:	f001 fc90 	bl	8003c48 <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 8002328:	2229      	movs	r2, #41	; 0x29
 800232a:	2100      	movs	r1, #0
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f9bb 	bl	80026a8 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f001 fc88 	bl	8003c48 <HAL_Delay>
//	HAL_Delay(5);
//	ICM_WriteOneByte(hi2c, 0x67, 0x0);
//	HAL_Delay(5);

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	uint8_t i2cData = 0x0A;
 8002338:	230a      	movs	r3, #10
 800233a:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x00, &i2cData);
 800233c:	f107 030f 	add.w	r3, r7, #15
 8002340:	461a      	mov	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff66 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 800234a:	2005      	movs	r0, #5
 800234c:	f001 fc7c 	bl	8003c48 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	i2cData = (0x04 | 0x11);
 8002350:	2315      	movs	r3, #21
 8002352:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x14, &i2cData);
 8002354:	f107 030f 	add.w	r3, r7, #15
 8002358:	461a      	mov	r2, r3
 800235a:	2114      	movs	r1, #20
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff5a 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 8002362:	2005      	movs	r0, #5
 8002364:	f001 fc70 	bl	8003c48 <HAL_Delay>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	i2cData = 0x00;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x10, &i2cData);
 800236c:	f107 030f 	add.w	r3, r7, #15
 8002370:	461a      	mov	r2, r3
 8002372:	2110      	movs	r1, #16
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff4e 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 800237a:	2005      	movs	r0, #5
 800237c:	f001 fc64 	bl	8003c48 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	i2cData = 0x0A;
 8002380:	230a      	movs	r3, #10
 8002382:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x11, &i2cData);
 8002384:	f107 030f 	add.w	r3, r7, #15
 8002388:	461a      	mov	r2, r3
 800238a:	2111      	movs	r1, #17
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff42 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 8002392:	2005      	movs	r0, #5
 8002394:	f001 fc58 	bl	8003c48 <HAL_Delay>

//	ICM_SelectBank(hi2c, USER_BANK_2);
//	HAL_Delay(20);

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	i2cData = 0x00;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x7F, &i2cData); // Select user bank 0
 800239c:	f107 030f 	add.w	r3, r7, #15
 80023a0:	461a      	mov	r2, r3
 80023a2:	217f      	movs	r1, #127	; 0x7f
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff36 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 80023aa:	2005      	movs	r0, #5
 80023ac:	f001 fc4c 	bl	8003c48 <HAL_Delay>
	i2cData = 0x30;
 80023b0:	2330      	movs	r3, #48	; 0x30
 80023b2:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x0F, &i2cData); // INT Pin / Bypass Enable Configuration
 80023b4:	f107 030f 	add.w	r3, r7, #15
 80023b8:	461a      	mov	r2, r3
 80023ba:	210f      	movs	r1, #15
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff2a 	bl	8002216 <ICM_WriteOneByte>
	i2cData = 0x20;
 80023c2:	2320      	movs	r3, #32
 80023c4:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x03, &i2cData); // I2C_MST_EN
 80023c6:	f107 030f 	add.w	r3, r7, #15
 80023ca:	461a      	mov	r2, r3
 80023cc:	2103      	movs	r1, #3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff21 	bl	8002216 <ICM_WriteOneByte>
	i2cData = 0x30;
 80023d4:	2330      	movs	r3, #48	; 0x30
 80023d6:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x7F, &i2cData); // Select user bank 3
 80023d8:	f107 030f 	add.w	r3, r7, #15
 80023dc:	461a      	mov	r2, r3
 80023de:	217f      	movs	r1, #127	; 0x7f
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff18 	bl	8002216 <ICM_WriteOneByte>
	HAL_Delay(5);
 80023e6:	2005      	movs	r0, #5
 80023e8:	f001 fc2e 	bl	8003c48 <HAL_Delay>
	i2cData = 0x4D;
 80023ec:	234d      	movs	r3, #77	; 0x4d
 80023ee:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x01, &i2cData); // I2C Master mode and Speed 400 kHz
 80023f0:	f107 030f 	add.w	r3, r7, #15
 80023f4:	461a      	mov	r2, r3
 80023f6:	2101      	movs	r1, #1
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff0c 	bl	8002216 <ICM_WriteOneByte>
	ICM_Set_I2C_Clk(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f96a 	bl	80026d8 <ICM_Set_I2C_Clk>
	i2cData = 0x01;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x02, &i2cData); // I2C_SLV0 _DLY_ enable
 8002408:	f107 030f 	add.w	r3, r7, #15
 800240c:	461a      	mov	r2, r3
 800240e:	2102      	movs	r1, #2
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff00 	bl	8002216 <ICM_WriteOneByte>
	i2cData = 0x81;
 8002416:	2381      	movs	r3, #129	; 0x81
 8002418:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x05, &i2cData); // enable IIC	and EXT_SENS_DATA==1 Byte
 800241a:	f107 030f 	add.w	r3, r7, #15
 800241e:	461a      	mov	r2, r3
 8002420:	2105      	movs	r1, #5
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fef7 	bl	8002216 <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 8002428:	2201      	movs	r2, #1
 800242a:	2132      	movs	r1, #50	; 0x32
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff0f 	bl	8002250 <i2c_Mag_write>
	HAL_Delay(1000);
 8002432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002436:	f001 fc07 	bl	8003c48 <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 800243a:	2202      	movs	r2, #2
 800243c:	2131      	movs	r1, #49	; 0x31
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff06 	bl	8002250 <i2c_Mag_write>

	return 1337;
 8002444:	f240 5339 	movw	r3, #1337	; 0x539
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af04      	add	r7, sp, #16
 8002456:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
//	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
	HAL_I2C_Mem_Read(hi2c, ICM20948_ADDRESS << 1, 0x2D, I2C_MEMADD_SIZE_8BIT, raw_data, 12, 1000); //read starting from ACCEL_XOUT_H
 8002458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	230c      	movs	r3, #12
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	222d      	movs	r2, #45	; 0x2d
 800246c:	21d2      	movs	r1, #210	; 0xd2
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f002 fbb8 	bl	8004be4 <HAL_I2C_Mem_Read>

	accel_data[0] = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8002474:	7b3b      	ldrb	r3, [r7, #12]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b21a      	sxth	r2, r3
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	b21b      	sxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b21a      	sxth	r2, r3
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <ICM_ReadAccelGyro+0x98>)
 8002484:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21a      	sxth	r2, r3
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <ICM_ReadAccelGyro+0x98>)
 8002496:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8002498:	7c3b      	ldrb	r3, [r7, #16]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21a      	sxth	r2, r3
 800249e:	7c7b      	ldrb	r3, [r7, #17]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <ICM_ReadAccelGyro+0x98>)
 80024a8:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (int16_t)(raw_data[6] << 8 | raw_data[7]);
 80024aa:	7cbb      	ldrb	r3, [r7, #18]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <ICM_ReadAccelGyro+0x9c>)
 80024ba:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (int16_t)(raw_data[8] << 8 | raw_data[9]);
 80024bc:	7d3b      	ldrb	r3, [r7, #20]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	7d7b      	ldrb	r3, [r7, #21]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <ICM_ReadAccelGyro+0x9c>)
 80024cc:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (int16_t)(raw_data[10] << 8 | raw_data[11]);
 80024ce:	7dbb      	ldrb	r3, [r7, #22]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <ICM_ReadAccelGyro+0x9c>)
 80024de:	809a      	strh	r2, [r3, #4]
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000032c 	.word	0x2000032c
 80024ec:	20000334 	.word	0x20000334

080024f0 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, int16_t raw_accel_data[3], int16_t raw_gyro_data[3]) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
//	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;

	corr_accel_data[0] = (raw_accel_data[0] - accel_offset[0]) / 4096.0f;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002502:	461a      	mov	r2, r3
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <ICM_CorrectAccelGyro+0x114>)
 8002506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fbe5 	bl	8000cdc <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fce7 	bl	8000eec <__aeabi_fdiv>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <ICM_CorrectAccelGyro+0x118>)
 8002524:	601a      	str	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - accel_offset[1]) / 4096.0f;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3302      	adds	r3, #2
 800252a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252e:	461a      	mov	r2, r3
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <ICM_CorrectAccelGyro+0x114>)
 8002532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fbcf 	bl	8000cdc <__aeabi_i2f>
 800253e:	4603      	mov	r3, r0
 8002540:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fcd1 	bl	8000eec <__aeabi_fdiv>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <ICM_CorrectAccelGyro+0x118>)
 8002550:	605a      	str	r2, [r3, #4]
	corr_accel_data[2] = (raw_accel_data[2] - accel_offset[2]) / 4096.0f;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3304      	adds	r3, #4
 8002556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255a:	461a      	mov	r2, r3
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <ICM_CorrectAccelGyro+0x114>)
 800255e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fbb9 	bl	8000cdc <__aeabi_i2f>
 800256a:	4603      	mov	r3, r0
 800256c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fcbb 	bl	8000eec <__aeabi_fdiv>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <ICM_CorrectAccelGyro+0x118>)
 800257c:	609a      	str	r2, [r3, #8]
//	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[1] = (raw_gyro_data[1] - (gyro_offset[1] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[2] = (raw_gyro_data[2] - (gyro_offset[2] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;


	corr_gyro_data[0] = (raw_gyro_data[0] - gyro_offset[0]) / 131.0f;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	461a      	mov	r2, r3
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <ICM_CorrectAccelGyro+0x11c>)
 8002588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fba4 	bl	8000cdc <__aeabi_i2f>
 8002594:	4603      	mov	r3, r0
 8002596:	491e      	ldr	r1, [pc, #120]	; (8002610 <ICM_CorrectAccelGyro+0x120>)
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fca7 	bl	8000eec <__aeabi_fdiv>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <ICM_CorrectAccelGyro+0x124>)
 80025a4:	601a      	str	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[1] - gyro_offset[1]) / 131.0f;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3302      	adds	r3, #2
 80025aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <ICM_CorrectAccelGyro+0x11c>)
 80025b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb8f 	bl	8000cdc <__aeabi_i2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	4913      	ldr	r1, [pc, #76]	; (8002610 <ICM_CorrectAccelGyro+0x120>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fc92 	bl	8000eec <__aeabi_fdiv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <ICM_CorrectAccelGyro+0x124>)
 80025ce:	605a      	str	r2, [r3, #4]
	corr_gyro_data[2] = (raw_gyro_data[2] - gyro_offset[2]) / 131.0f;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <ICM_CorrectAccelGyro+0x11c>)
 80025dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fb7a 	bl	8000cdc <__aeabi_i2f>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4909      	ldr	r1, [pc, #36]	; (8002610 <ICM_CorrectAccelGyro+0x120>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fc7d 	bl	8000eec <__aeabi_fdiv>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <ICM_CorrectAccelGyro+0x124>)
 80025f8:	609a      	str	r2, [r3, #8]

}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000035c 	.word	0x2000035c
 8002608:	2000033c 	.word	0x2000033c
 800260c:	20000354 	.word	0x20000354
 8002610:	43030000 	.word	0x43030000
 8002614:	20000348 	.word	0x20000348

08002618 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
	uint8_t i2cData = bank;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, &i2cData);
 8002628:	f107 030f 	add.w	r3, r7, #15
 800262c:	461a      	mov	r2, r3
 800262e:	217f      	movs	r1, #127	; 0x7f
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fdf0 	bl	8002216 <ICM_WriteOneByte>
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <ICM_SetClock>:
void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) { //user bank 0
	uint8_t i2cData = 0x20;
	ICM_WriteOneByte(hi2c, 0x03, &i2cData); // Enable I2C master
}

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	70fb      	strb	r3, [r7, #3]
	uint8_t i2cData = clk;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, &i2cData);
 800264e:	f107 030f 	add.w	r3, r7, #15
 8002652:	461a      	mov	r2, r3
 8002654:	2106      	movs	r1, #6
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fddd 	bl	8002216 <ICM_WriteOneByte>
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) { //user bank 0
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = (0x38 | 0x07);
 800266c:	233f      	movs	r3, #63	; 0x3f
 800266e:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, &i2cData);
 8002670:	f107 030f 	add.w	r3, r7, #15
 8002674:	461a      	mov	r2, r3
 8002676:	2107      	movs	r1, #7
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fdcc 	bl	8002216 <ICM_WriteOneByte>
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) { //user bank 0
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, &i2cData);
 8002692:	f107 030f 	add.w	r3, r7, #15
 8002696:	461a      	mov	r2, r3
 8002698:	2107      	movs	r1, #7
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fdbb 	bl	8002216 <ICM_WriteOneByte>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	4613      	mov	r3, r2
 80026b6:	70bb      	strb	r3, [r7, #2]
	uint8_t i2cData = (rate|lpf);
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	78bb      	ldrb	r3, [r7, #2]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, &i2cData);
 80026c2:	f107 030f 	add.w	r3, r7, #15
 80026c6:	461a      	mov	r2, r3
 80026c8:	2101      	movs	r1, #1
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fda3 	bl	8002216 <ICM_WriteOneByte>
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <ICM_Set_I2C_Clk>:

void ICM_Set_I2C_Clk(I2C_HandleTypeDef *hi2c) { //user bank 3
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t i2cData = 0x07;
 80026e0:	2307      	movs	r3, #7
 80026e2:	73fb      	strb	r3, [r7, #15]
	ICM_WriteOneByte(hi2c, 0x01, &i2cData); //set I2C master clock to recommended freq
 80026e4:	f107 030f 	add.w	r3, r7, #15
 80026e8:	461a      	mov	r2, r3
 80026ea:	2101      	movs	r1, #1
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fd92 	bl	8002216 <ICM_WriteOneByte>
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <ICM20948_Calibrate>:
//	ICM_ReadOneByte(hi2c, 0x18, &i2cData);
//	return i2cData;
}

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_0);
 8002704:	2100      	movs	r1, #0
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff86 	bl	8002618 <ICM_SelectBank>
	HAL_Delay(10);
 800270c:	200a      	movs	r0, #10
 800270e:	f001 fa9b 	bl	8003c48 <HAL_Delay>

	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e056      	b.n	80027c6 <ICM20948_Calibrate+0xca>
		ICM_ReadAccelGyro(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe99 	bl	8002450 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <ICM20948_Calibrate+0x168>)
 8002720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002724:	b29a      	uxth	r2, r3
 8002726:	4b50      	ldr	r3, [pc, #320]	; (8002868 <ICM20948_Calibrate+0x16c>)
 8002728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272c:	b29b      	uxth	r3, r3
 800272e:	4413      	add	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	b21a      	sxth	r2, r3
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <ICM20948_Calibrate+0x168>)
 8002736:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 8002738:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <ICM20948_Calibrate+0x168>)
 800273a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b49      	ldr	r3, [pc, #292]	; (8002868 <ICM20948_Calibrate+0x16c>)
 8002742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	b21a      	sxth	r2, r3
 800274e:	4b45      	ldr	r3, [pc, #276]	; (8002864 <ICM20948_Calibrate+0x168>)
 8002750:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 8002752:	4b44      	ldr	r3, [pc, #272]	; (8002864 <ICM20948_Calibrate+0x168>)
 8002754:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002758:	b29a      	uxth	r2, r3
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <ICM20948_Calibrate+0x16c>)
 800275c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4413      	add	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	b21a      	sxth	r2, r3
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <ICM20948_Calibrate+0x168>)
 800276a:	809a      	strh	r2, [r3, #4]

		gyro_offset[0] += gyro_data[0];
 800276c:	4b3f      	ldr	r3, [pc, #252]	; (800286c <ICM20948_Calibrate+0x170>)
 800276e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <ICM20948_Calibrate+0x174>)
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4413      	add	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <ICM20948_Calibrate+0x170>)
 8002784:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <ICM20948_Calibrate+0x170>)
 8002788:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <ICM20948_Calibrate+0x174>)
 8002790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4413      	add	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b33      	ldr	r3, [pc, #204]	; (800286c <ICM20948_Calibrate+0x170>)
 800279e:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <ICM20948_Calibrate+0x170>)
 80027a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <ICM20948_Calibrate+0x174>)
 80027aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <ICM20948_Calibrate+0x170>)
 80027b8:	809a      	strh	r2, [r3, #4]

		HAL_Delay(12);
 80027ba:	200c      	movs	r0, #12
 80027bc:	f001 fa44 	bl	8003c48 <HAL_Delay>
	for(int i=0; i<50; i++){
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b31      	cmp	r3, #49	; 0x31
 80027ca:	dda5      	ble.n	8002718 <ICM20948_Calibrate+0x1c>
	}

	accel_offset[0] /= 50;
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <ICM20948_Calibrate+0x168>)
 80027ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d2:	4a28      	ldr	r2, [pc, #160]	; (8002874 <ICM20948_Calibrate+0x178>)
 80027d4:	fb82 1203 	smull	r1, r2, r2, r3
 80027d8:	1112      	asrs	r2, r2, #4
 80027da:	17db      	asrs	r3, r3, #31
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <ICM20948_Calibrate+0x168>)
 80027e2:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <ICM20948_Calibrate+0x168>)
 80027e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ea:	4a22      	ldr	r2, [pc, #136]	; (8002874 <ICM20948_Calibrate+0x178>)
 80027ec:	fb82 1203 	smull	r1, r2, r2, r3
 80027f0:	1112      	asrs	r2, r2, #4
 80027f2:	17db      	asrs	r3, r3, #31
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <ICM20948_Calibrate+0x168>)
 80027fa:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <ICM20948_Calibrate+0x168>)
 80027fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <ICM20948_Calibrate+0x178>)
 8002804:	fb82 1203 	smull	r1, r2, r2, r3
 8002808:	1112      	asrs	r2, r2, #4
 800280a:	17db      	asrs	r3, r3, #31
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b21a      	sxth	r2, r3
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <ICM20948_Calibrate+0x168>)
 8002812:	809a      	strh	r2, [r3, #4]

	gyro_offset[0] /= 50;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <ICM20948_Calibrate+0x170>)
 8002816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281a:	4a16      	ldr	r2, [pc, #88]	; (8002874 <ICM20948_Calibrate+0x178>)
 800281c:	fb82 1203 	smull	r1, r2, r2, r3
 8002820:	1112      	asrs	r2, r2, #4
 8002822:	17db      	asrs	r3, r3, #31
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	b21a      	sxth	r2, r3
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <ICM20948_Calibrate+0x170>)
 800282a:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <ICM20948_Calibrate+0x170>)
 800282e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <ICM20948_Calibrate+0x178>)
 8002834:	fb82 1203 	smull	r1, r2, r2, r3
 8002838:	1112      	asrs	r2, r2, #4
 800283a:	17db      	asrs	r3, r3, #31
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	b21a      	sxth	r2, r3
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <ICM20948_Calibrate+0x170>)
 8002842:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <ICM20948_Calibrate+0x170>)
 8002846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <ICM20948_Calibrate+0x178>)
 800284c:	fb82 1203 	smull	r1, r2, r2, r3
 8002850:	1112      	asrs	r2, r2, #4
 8002852:	17db      	asrs	r3, r3, #31
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <ICM20948_Calibrate+0x170>)
 800285a:	809a      	strh	r2, [r3, #4]
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000035c 	.word	0x2000035c
 8002868:	2000032c 	.word	0x2000032c
 800286c:	20000354 	.word	0x20000354
 8002870:	20000334 	.word	0x20000334
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <get_imu_data>:


void get_imu_data(I2C_HandleTypeDef *hi2c)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	ICM_ReadAccelGyro(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fde5 	bl	8002450 <ICM_ReadAccelGyro>
	ICM_CorrectAccelGyro(hi2c, accel_data, gyro_data);
 8002886:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <get_imu_data+0x16c>)
 8002888:	4957      	ldr	r1, [pc, #348]	; (80029e8 <get_imu_data+0x170>)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fe30 	bl	80024f0 <ICM_CorrectAccelGyro>
	dt = (double)(HAL_GetTick() - last_tick)/tick_rate;
 8002890:	f001 f9c6 	bl	8003c20 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <get_imu_data+0x174>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fda1 	bl	80003e4 <__aeabi_ui2d>
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <get_imu_data+0x178>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fdaa 	bl	8000404 <__aeabi_i2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd ff38 	bl	800072c <__aeabi_ddiv>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	494c      	ldr	r1, [pc, #304]	; (80029f4 <get_imu_data+0x17c>)
 80028c2:	e9c1 2300 	strd	r2, r3, [r1]
	last_tick = HAL_GetTick();
 80028c6:	f001 f9ab 	bl	8003c20 <HAL_GetTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a47      	ldr	r2, [pc, #284]	; (80029ec <get_imu_data+0x174>)
 80028ce:	6013      	str	r3, [r2, #0]

	// Calculate Roll, Pitch, Yaw by integrating Gyro Data
	curr_pose.roll += corr_gyro_data[0]*dt/1000.0;
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <get_imu_data+0x180>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fda7 	bl	8000428 <__aeabi_f2d>
 80028da:	4604      	mov	r4, r0
 80028dc:	460d      	mov	r5, r1
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <get_imu_data+0x184>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fda0 	bl	8000428 <__aeabi_f2d>
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <get_imu_data+0x17c>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f7fd fdf3 	bl	80004d8 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <get_imu_data+0x188>)
 8002900:	f7fd ff14 	bl	800072c <__aeabi_ddiv>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fc2e 	bl	800016c <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f8d6 	bl	8000ac8 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <get_imu_data+0x180>)
 8002920:	6013      	str	r3, [r2, #0]
	curr_pose.pitch += corr_gyro_data[1]*dt/1000.0;
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <get_imu_data+0x180>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fd7e 	bl	8000428 <__aeabi_f2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <get_imu_data+0x184>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fd77 	bl	8000428 <__aeabi_f2d>
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <get_imu_data+0x17c>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fdca 	bl	80004d8 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <get_imu_data+0x188>)
 8002952:	f7fd feeb 	bl	800072c <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd fc05 	bl	800016c <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8ad 	bl	8000ac8 <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <get_imu_data+0x180>)
 8002972:	6053      	str	r3, [r2, #4]
	curr_pose.yaw += corr_gyro_data[2]*dt/1000.0;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <get_imu_data+0x180>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd55 	bl	8000428 <__aeabi_f2d>
 800297e:	4604      	mov	r4, r0
 8002980:	460d      	mov	r5, r1
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <get_imu_data+0x184>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd4e 	bl	8000428 <__aeabi_f2d>
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <get_imu_data+0x17c>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd fda1 	bl	80004d8 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <get_imu_data+0x188>)
 80029a4:	f7fd fec2 	bl	800072c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fbdc 	bl	800016c <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f884 	bl	8000ac8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <get_imu_data+0x180>)
 80029c4:	6093      	str	r3, [r2, #8]
	curr_pose.dt = dt;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <get_imu_data+0x17c>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f85a 	bl	8000a88 <__aeabi_d2uiz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <get_imu_data+0x180>)
 80029da:	819a      	strh	r2, [r3, #12]
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bdb0      	pop	{r4, r5, r7, pc}
 80029e4:	20000334 	.word	0x20000334
 80029e8:	2000032c 	.word	0x2000032c
 80029ec:	20000364 	.word	0x20000364
 80029f0:	20000362 	.word	0x20000362
 80029f4:	20000368 	.word	0x20000368
 80029f8:	20000370 	.word	0x20000370
 80029fc:	20000348 	.word	0x20000348
 8002a00:	408f4000 	.word	0x408f4000

08002a04 <reset_pose>:

void reset_pose(){
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	curr_pose.roll = 0;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <reset_pose+0x24>)
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
	curr_pose.pitch = 0;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <reset_pose+0x24>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
	curr_pose.yaw = 0;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <reset_pose+0x24>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000370 	.word	0x20000370

08002a2c <IMU_Init>:
void IMU_Init()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	tick_rate = HAL_GetTickFreq();
 8002a30:	f001 f900 	bl	8003c34 <HAL_GetTickFreq>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <IMU_Init+0x20>)
 8002a3a:	801a      	strh	r2, [r3, #0]
	last_tick = HAL_GetTick();
 8002a3c:	f001 f8f0 	bl	8003c20 <HAL_GetTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <IMU_Init+0x24>)
 8002a44:	6013      	str	r3, [r2, #0]
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000362 	.word	0x20000362
 8002a50:	20000364 	.word	0x20000364

08002a54 <HAL_UART_RxCpltCallback>:
void delay_us (uint32_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, RX_BUFF_SIZE);
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_UART_RxCpltCallback+0x34>)
 8002a60:	480a      	ldr	r0, [pc, #40]	; (8002a8c <HAL_UART_RxCpltCallback+0x38>)
 8002a62:	f005 fa3a 	bl	8007eda <HAL_UART_Receive_IT>
	ESP_Receive(&htim2, &htim2, &hi2c2, &UART2_rxBuffer, &huart2);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_UART_RxCpltCallback+0x38>)
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_UART_RxCpltCallback+0x34>)
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_UART_RxCpltCallback+0x3c>)
 8002a6e:	4909      	ldr	r1, [pc, #36]	; (8002a94 <HAL_UART_RxCpltCallback+0x40>)
 8002a70:	4808      	ldr	r0, [pc, #32]	; (8002a94 <HAL_UART_RxCpltCallback+0x40>)
 8002a72:	f7ff f9c3 	bl	8001dfc <ESP_Receive>
	memset(UART2_rxBuffer, 0, RX_BUFF_SIZE);
 8002a76:	220c      	movs	r2, #12
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4803      	ldr	r0, [pc, #12]	; (8002a88 <HAL_UART_RxCpltCallback+0x34>)
 8002a7c:	f005 febe 	bl	80087fc <memset>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200002fc 	.word	0x200002fc
 8002a8c:	20000494 	.word	0x20000494
 8002a90:	200003b0 	.word	0x200003b0
 8002a94:	20000404 	.word	0x20000404

08002a98 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, RX_BUFF_SIZE);
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_UART_ErrorCallback+0x1c>)
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <HAL_UART_ErrorCallback+0x20>)
 8002aa6:	f005 fa18 	bl	8007eda <HAL_UART_Receive_IT>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002fc 	.word	0x200002fc
 8002ab8:	20000494 	.word	0x20000494

08002abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b098      	sub	sp, #96	; 0x60
 8002ac0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t MSG[70] = { '\0' };
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2242      	movs	r2, #66	; 0x42
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fe95 	bl	80087fc <memset>
	double speed = 20;
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <main+0xe0>)
 8002ad8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002adc:	f001 f848 	bl	8003b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae0:	f000 f86a 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae4:	f000 fa4e 	bl	8002f84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ae8:	f000 fa22 	bl	8002f30 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002aec:	f000 f8f4 	bl	8002cd8 <MX_I2C2_Init>
  MX_ADC1_Init();
 8002af0:	f000 f8b4 	bl	8002c5c <MX_ADC1_Init>
  MX_TIM2_Init();
 8002af4:	f000 f91e 	bl	8002d34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002af8:	f000 f99e 	bl	8002e38 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer 2 for ESC signal
  HAL_TIM_Base_Start(&htim2);
 8002afc:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <main+0xe4>)
 8002afe:	f003 fe71 	bl	80067e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // start PWM signal at 1ms (0 speed)
 8002b02:	2100      	movs	r1, #0
 8002b04:	4826      	ldr	r0, [pc, #152]	; (8002ba0 <main+0xe4>)
 8002b06:	f003 ff61 	bl	80069cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4824      	ldr	r0, [pc, #144]	; (8002ba0 <main+0xe4>)
 8002b0e:	f003 ff5d 	bl	80069cc <HAL_TIM_PWM_Start>

  // Initialize Timer 3 for Ultrasonic sensors
  HAL_TIM_Base_Start_IT(&htim3);
 8002b12:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <main+0xe8>)
 8002b14:	f003 feb0 	bl	8006878 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 8002b18:	2104      	movs	r1, #4
 8002b1a:	4822      	ldr	r0, [pc, #136]	; (8002ba4 <main+0xe8>)
 8002b1c:	f004 f850 	bl	8006bc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 8002b20:	2108      	movs	r1, #8
 8002b22:	4820      	ldr	r0, [pc, #128]	; (8002ba4 <main+0xe8>)
 8002b24:	f004 f84c 	bl	8006bc0 <HAL_TIM_IC_Start_IT>

//  // ESC Calibration Procedure
//  drive_forward(&htim2, 100);
//  HAL_Delay(2000);
//  stop(&htim2);
  HAL_Delay(2000);
 8002b28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b2c:	f001 f88c 	bl	8003c48 <HAL_Delay>

  // IMU Calibration
  ICM_PowerOn(&hi2c2);
 8002b30:	481d      	ldr	r0, [pc, #116]	; (8002ba8 <main+0xec>)
 8002b32:	f7ff fbc9 	bl	80022c8 <ICM_PowerOn>
  HAL_Delay(10);
 8002b36:	200a      	movs	r0, #10
 8002b38:	f001 f886 	bl	8003c48 <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8002b3c:	481a      	ldr	r0, [pc, #104]	; (8002ba8 <main+0xec>)
 8002b3e:	f7ff fddd 	bl	80026fc <ICM20948_Calibrate>
  HAL_Delay(100);
 8002b42:	2064      	movs	r0, #100	; 0x64
 8002b44:	f001 f880 	bl	8003c48 <HAL_Delay>
  ICM_SelectBank(&hi2c2, USER_BANK_0);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4817      	ldr	r0, [pc, #92]	; (8002ba8 <main+0xec>)
 8002b4c:	f7ff fd64 	bl	8002618 <ICM_SelectBank>
  HAL_Delay(1);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f001 f879 	bl	8003c48 <HAL_Delay>

  IMU_Init();
 8002b56:	f7ff ff69 	bl	8002a2c <IMU_Init>
  reset_pose();
 8002b5a:	f7ff ff53 	bl	8002a04 <reset_pose>
  reset_PID_controller();
 8002b5e:	f7fe fd19 	bl	8001594 <reset_PID_controller>

  HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, RX_BUFF_SIZE); // where should this go?
 8002b62:	220c      	movs	r2, #12
 8002b64:	4911      	ldr	r1, [pc, #68]	; (8002bac <main+0xf0>)
 8002b66:	4812      	ldr	r0, [pc, #72]	; (8002bb0 <main+0xf4>)
 8002b68:	f005 f9b7 	bl	8007eda <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//    DRIVE DISTANCE WITH ULTRASONIC w TURN ----------------------
	HCSR04_Read_Front(&htim3);
 8002b6c:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <main+0xe8>)
 8002b6e:	f000 ff6d 	bl	8003a4c <HCSR04_Read_Front>
	double dist_cm = 15;
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <main+0xf8>)
 8002b78:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	drive_until(&htim3, &hi2c2, speed, dist_cm); // distance in cm
 8002b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b80:	e9cd 2300 	strd	r2, r3, [sp]
 8002b84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <main+0xec>)
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <main+0xe8>)
 8002b8c:	f7fe fd30 	bl	80015f0 <drive_until>
	HAL_Delay(3000);
 8002b90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b94:	f001 f858 	bl	8003c48 <HAL_Delay>
  {
 8002b98:	e7e8      	b.n	8002b6c <main+0xb0>
 8002b9a:	bf00      	nop
 8002b9c:	40340000 	.word	0x40340000
 8002ba0:	20000404 	.word	0x20000404
 8002ba4:	2000044c 	.word	0x2000044c
 8002ba8:	200003b0 	.word	0x200003b0
 8002bac:	200002fc 	.word	0x200002fc
 8002bb0:	20000494 	.word	0x20000494
 8002bb4:	402e0000 	.word	0x402e0000

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	; 0x50
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc2:	2228      	movs	r2, #40	; 0x28
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fe18 	bl	80087fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be8:	2302      	movs	r3, #2
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	2301      	movs	r3, #1
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 f8d1 	bl	8005da4 <HAL_RCC_OscConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002c08:	f000 fa82 	bl	8003110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fb3d 	bl	80062a8 <HAL_RCC_ClockConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002c34:	f000 fa6c 	bl	8003110 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c40:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fcc7 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002c50:	f000 fa5e 	bl	8003110 <Error_Handler>
  }
}
 8002c54:	bf00      	nop
 8002c56:	3750      	adds	r7, #80	; 0x50
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c6e:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <MX_ADC1_Init+0x78>)
 8002c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c98:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002c9a:	f000 fff9 	bl	8003c90 <HAL_ADC_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ca4:	f000 fa34 	bl	8003110 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_ADC1_Init+0x74>)
 8002cba:	f001 f8c1 	bl	8003e40 <HAL_ADC_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002cc4:	f000 fa24 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000380 	.word	0x20000380
 8002cd4:	40012400 	.word	0x40012400

08002cd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002cde:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <MX_I2C2_Init+0x58>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 2500;
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002ce4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002ce8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002cf2:	22d2      	movs	r2, #210	; 0xd2
 8002cf4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_I2C2_Init+0x54>)
 8002d18:	f001 fd26 	bl	8004768 <HAL_I2C_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8002d22:	f000 f9f5 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200003b0 	.word	0x200003b0
 8002d30:	40005800 	.word	0x40005800

08002d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d48:	f107 0320 	add.w	r3, r7, #32
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d64:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d6e:	2203      	movs	r2, #3
 8002d70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d72:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d7a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d8c:	4829      	ldr	r0, [pc, #164]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002d8e:	f003 fcd9 	bl	8006744 <HAL_TIM_Base_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d98:	f000 f9ba 	bl	8003110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da6:	4619      	mov	r1, r3
 8002da8:	4822      	ldr	r0, [pc, #136]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002daa:	f004 fa69 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002db4:	f000 f9ac 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002db8:	481e      	ldr	r0, [pc, #120]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002dba:	f003 fdaf 	bl	800691c <HAL_TIM_PWM_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002dc4:	f000 f9a4 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd0:	f107 0320 	add.w	r3, r7, #32
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4817      	ldr	r0, [pc, #92]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002dd8:	f004 ff30 	bl	8007c3c <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002de2:	f000 f995 	bl	8003110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de6:	2360      	movs	r3, #96	; 0x60
 8002de8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8002dea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002dee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002e00:	f004 f980 	bl	8007104 <HAL_TIM_PWM_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e0a:	f000 f981 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2204      	movs	r2, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4807      	ldr	r0, [pc, #28]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002e16:	f004 f975 	bl	8007104 <HAL_TIM_PWM_ConfigChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002e20:	f000 f976 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e24:	4803      	ldr	r0, [pc, #12]	; (8002e34 <MX_TIM2_Init+0x100>)
 8002e26:	f000 faa1 	bl	800336c <HAL_TIM_MspPostInit>

}
 8002e2a:	bf00      	nop
 8002e2c:	3738      	adds	r7, #56	; 0x38
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000404 	.word	0x20000404

08002e38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3e:	f107 0318 	add.w	r3, r7, #24
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e56:	463b      	mov	r3, r7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e64:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <MX_TIM3_Init+0xf4>)
 8002e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e88:	4827      	ldr	r0, [pc, #156]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002e8a:	f003 fc5b 	bl	8006744 <HAL_TIM_Base_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002e94:	f000 f93c 	bl	8003110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e9e:	f107 0318 	add.w	r3, r7, #24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4820      	ldr	r0, [pc, #128]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002ea6:	f004 f9eb 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002eb0:	f000 f92e 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002eb4:	481c      	ldr	r0, [pc, #112]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002eb6:	f003 fe2b 	bl	8006b10 <HAL_TIM_IC_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ec0:	f000 f926 	bl	8003110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4815      	ldr	r0, [pc, #84]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002ed4:	f004 feb2 	bl	8007c3c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002ede:	f000 f917 	bl	8003110 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002efa:	f004 f86f 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002f04:	f000 f904 	bl	8003110 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f08:	463b      	mov	r3, r7
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <MX_TIM3_Init+0xf0>)
 8002f10:	f004 f864 	bl	8006fdc <HAL_TIM_IC_ConfigChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002f1a:	f000 f8f9 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000044c 	.word	0x2000044c
 8002f2c:	40000400 	.word	0x40000400

08002f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <MX_USART2_UART_Init+0x50>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f66:	4805      	ldr	r0, [pc, #20]	; (8002f7c <MX_USART2_UART_Init+0x4c>)
 8002f68:	f004 fed8 	bl	8007d1c <HAL_UART_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f72:	f000 f8cd 	bl	8003110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000494 	.word	0x20000494
 8002f80:	40004400 	.word	0x40004400

08002f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f98:	4b44      	ldr	r3, [pc, #272]	; (80030ac <MX_GPIO_Init+0x128>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4a43      	ldr	r2, [pc, #268]	; (80030ac <MX_GPIO_Init+0x128>)
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	6193      	str	r3, [r2, #24]
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	6193      	str	r3, [r2, #24]
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc8:	4b38      	ldr	r3, [pc, #224]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4a37      	ldr	r2, [pc, #220]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	6193      	str	r3, [r2, #24]
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <MX_GPIO_Init+0x128>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ffe:	482c      	ldr	r0, [pc, #176]	; (80030b0 <MX_GPIO_Init+0x12c>)
 8003000:	f001 fb9a 	bl	8004738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	2140      	movs	r1, #64	; 0x40
 8003008:	482a      	ldr	r0, [pc, #168]	; (80030b4 <MX_GPIO_Init+0x130>)
 800300a:	f001 fb95 	bl	8004738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIDE_TRIG_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800300e:	2200      	movs	r2, #0
 8003010:	215a      	movs	r1, #90	; 0x5a
 8003012:	4829      	ldr	r0, [pc, #164]	; (80030b8 <MX_GPIO_Init+0x134>)
 8003014:	f001 fb90 	bl	8004738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800301c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301e:	2301      	movs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2302      	movs	r3, #2
 8003028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302a:	f107 0310 	add.w	r3, r7, #16
 800302e:	4619      	mov	r1, r3
 8003030:	481f      	ldr	r0, [pc, #124]	; (80030b0 <MX_GPIO_Init+0x12c>)
 8003032:	f001 f9fd 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8003036:	2320      	movs	r3, #32
 8003038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003042:	f107 0310 	add.w	r3, r7, #16
 8003046:	4619      	mov	r1, r3
 8003048:	481a      	ldr	r0, [pc, #104]	; (80030b4 <MX_GPIO_Init+0x130>)
 800304a:	f001 f9f1 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 800304e:	2340      	movs	r3, #64	; 0x40
 8003050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003056:	2302      	movs	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2302      	movs	r3, #2
 800305c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	4619      	mov	r1, r3
 8003064:	4813      	ldr	r0, [pc, #76]	; (80030b4 <MX_GPIO_Init+0x130>)
 8003066:	f001 f9e3 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 800306a:	2302      	movs	r3, #2
 800306c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003072:	2302      	movs	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2302      	movs	r3, #2
 8003078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	4619      	mov	r1, r3
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_GPIO_Init+0x134>)
 8003082:	f001 f9d5 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8003086:	2358      	movs	r3, #88	; 0x58
 8003088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308a:	2301      	movs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2302      	movs	r3, #2
 8003094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4619      	mov	r1, r3
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_GPIO_Init+0x134>)
 800309e:	f001 f9c7 	bl	8004430 <HAL_GPIO_Init>

}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40010800 	.word	0x40010800
 80030b8:	40010c00 	.word	0x40010c00

080030bc <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us (uint32_t us)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <delay_us+0x2c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 80030cc:	bf00      	nop
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <delay_us+0x2c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d8f9      	bhi.n	80030ce <delay_us+0x12>
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	2000044c 	.word	0x2000044c

080030ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // ultrasonic
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_TIM_IC_CaptureCallback+0x20>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d102      	bne.n	8003104 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		HCSR04_timer_input_CC (htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fac2 	bl	8003688 <HCSR04_timer_input_CC>
	}

}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40000400 	.word	0x40000400

08003110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
}
 8003116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003118:	e7fe      	b.n	8003118 <Error_Handler+0x8>
	...

0800311c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_MspInit+0x5c>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <HAL_MspInit+0x5c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6193      	str	r3, [r2, #24]
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_MspInit+0x5c>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_MspInit+0x5c>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <HAL_MspInit+0x5c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_MspInit+0x5c>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_MspInit+0x60>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <HAL_MspInit+0x60>)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000

08003180 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a14      	ldr	r2, [pc, #80]	; (80031ec <HAL_ADC_MspInit+0x6c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d121      	bne.n	80031e4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_ADC_MspInit+0x70>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 80031d0:	2310      	movs	r3, #16
 80031d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d4:	2303      	movs	r3, #3
 80031d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	4619      	mov	r1, r3
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <HAL_ADC_MspInit+0x74>)
 80031e0:	f001 f926 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031e4:	bf00      	nop
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40012400 	.word	0x40012400
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010800 	.word	0x40010800

080031f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1a      	ldr	r2, [pc, #104]	; (800327c <HAL_I2C_MspInit+0x84>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d12c      	bne.n	8003272 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_I2C_MspInit+0x88>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_I2C_MspInit+0x88>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6193      	str	r3, [r2, #24]
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_I2C_MspInit+0x88>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8003230:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003236:	2312      	movs	r3, #18
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4619      	mov	r1, r3
 8003244:	480f      	ldr	r0, [pc, #60]	; (8003284 <HAL_I2C_MspInit+0x8c>)
 8003246:	f001 f8f3 	bl	8004430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_I2C_MspInit+0x88>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <HAL_I2C_MspInit+0x88>)
 8003250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003254:	61d3      	str	r3, [r2, #28]
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_I2C_MspInit+0x88>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	2022      	movs	r0, #34	; 0x22
 8003268:	f000 fffb 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800326c:	2022      	movs	r0, #34	; 0x22
 800326e:	f001 f814 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003272:	bf00      	nop
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40005800 	.word	0x40005800
 8003280:	40021000 	.word	0x40021000
 8003284:	40010c00 	.word	0x40010c00

08003288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003290:	f107 0318 	add.w	r3, r7, #24
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a8:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	61d3      	str	r3, [r2, #28]
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032c0:	e048      	b.n	8003354 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_TIM_Base_MspInit+0xd8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d143      	bne.n	8003354 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032cc:	4b23      	ldr	r3, [pc, #140]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	61d3      	str	r3, [r2, #28]
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6193      	str	r3, [r2, #24]
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6193      	str	r3, [r2, #24]
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 0318 	add.w	r3, r7, #24
 8003324:	4619      	mov	r1, r3
 8003326:	480f      	ldr	r0, [pc, #60]	; (8003364 <HAL_TIM_Base_MspInit+0xdc>)
 8003328:	f001 f882 	bl	8004430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 800332c:	2301      	movs	r3, #1
 800332e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003338:	f107 0318 	add.w	r3, r7, #24
 800333c:	4619      	mov	r1, r3
 800333e:	480a      	ldr	r0, [pc, #40]	; (8003368 <HAL_TIM_Base_MspInit+0xe0>)
 8003340:	f001 f876 	bl	8004430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	201d      	movs	r0, #29
 800334a:	f000 ff8a 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800334e:	201d      	movs	r0, #29
 8003350:	f000 ffa3 	bl	800429a <HAL_NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	40000400 	.word	0x40000400
 8003364:	40010800 	.word	0x40010800
 8003368:	40010c00 	.word	0x40010c00

0800336c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0310 	add.w	r3, r7, #16
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d117      	bne.n	80033bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338c:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_TIM_MspPostInit+0x58>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <HAL_TIM_MspPostInit+0x58>)
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	6193      	str	r3, [r2, #24]
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_TIM_MspPostInit+0x58>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 80033a4:	2303      	movs	r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2302      	movs	r3, #2
 80033ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4804      	ldr	r0, [pc, #16]	; (80033c8 <HAL_TIM_MspPostInit+0x5c>)
 80033b8:	f001 f83a 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40010800 	.word	0x40010800

080033cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_UART_MspInit+0x98>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d137      	bne.n	800345c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_UART_MspInit+0x9c>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_UART_MspInit+0x9c>)
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_UART_MspInit+0x9c>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_UART_MspInit+0x9c>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_UART_MspInit+0x9c>)
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	6193      	str	r3, [r2, #24]
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_UART_MspInit+0x9c>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800341c:	2304      	movs	r3, #4
 800341e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	4619      	mov	r1, r3
 800342e:	480f      	ldr	r0, [pc, #60]	; (800346c <HAL_UART_MspInit+0xa0>)
 8003430:	f000 fffe 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003434:	2308      	movs	r3, #8
 8003436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f107 0310 	add.w	r3, r7, #16
 8003444:	4619      	mov	r1, r3
 8003446:	4809      	ldr	r0, [pc, #36]	; (800346c <HAL_UART_MspInit+0xa0>)
 8003448:	f000 fff2 	bl	8004430 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2101      	movs	r1, #1
 8003450:	2026      	movs	r0, #38	; 0x26
 8003452:	f000 ff06 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003456:	2026      	movs	r0, #38	; 0x26
 8003458:	f000 ff1f 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40004400 	.word	0x40004400
 8003468:	40021000 	.word	0x40021000
 800346c:	40010800 	.word	0x40010800

08003470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <NMI_Handler+0x4>

08003476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <HardFault_Handler+0x4>

0800347c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <MemManage_Handler+0x4>

08003482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003486:	e7fe      	b.n	8003486 <BusFault_Handler+0x4>

08003488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800348c:	e7fe      	b.n	800348c <UsageFault_Handler+0x4>

0800348e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800348e:	b480      	push	{r7}
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b6:	f000 fba1 	bl	8003bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <TIM3_IRQHandler+0x10>)
 80034c6:	f003 fc81 	bl	8006dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000044c 	.word	0x2000044c

080034d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <I2C2_ER_IRQHandler+0x10>)
 80034da:	f001 fdeb 	bl	80050b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200003b0 	.word	0x200003b0

080034e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART2_IRQHandler+0x10>)
 80034ee:	f004 fd25 	bl	8007f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000494 	.word	0x20000494

080034fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
	return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <_kill>:

int _kill(int pid, int sig)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003514:	f005 f93a 	bl	800878c <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	2216      	movs	r2, #22
 800351c:	601a      	str	r2, [r3, #0]
	return -1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_exit>:

void _exit (int status)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffe7 	bl	800350a <_kill>
	while (1) {}		/* Make sure we hang here */
 800353c:	e7fe      	b.n	800353c <_exit+0x12>

0800353e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e00a      	b.n	8003566 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003550:	f3af 8000 	nop.w
 8003554:	4601      	mov	r1, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60ba      	str	r2, [r7, #8]
 800355c:	b2ca      	uxtb	r2, r1
 800355e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	dbf0      	blt.n	8003550 <_read+0x12>
	}

return len;
 800356e:	687b      	ldr	r3, [r7, #4]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e009      	b.n	800359e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	60ba      	str	r2, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	dbf1      	blt.n	800358a <_write+0x12>
	}
	return len;
 80035a6:	687b      	ldr	r3, [r7, #4]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_close>:

int _close(int file)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	return -1;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035d6:	605a      	str	r2, [r3, #4]
	return 0;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <_isatty>:

int _isatty(int file)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	return 1;
 80035ec:	2301      	movs	r3, #1
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
	return 0;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003618:	4a14      	ldr	r2, [pc, #80]	; (800366c <_sbrk+0x5c>)
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <_sbrk+0x60>)
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <_sbrk+0x64>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <_sbrk+0x64>)
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <_sbrk+0x68>)
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d207      	bcs.n	8003650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003640:	f005 f8a4 	bl	800878c <__errno>
 8003644:	4603      	mov	r3, r0
 8003646:	220c      	movs	r2, #12
 8003648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364e:	e009      	b.n	8003664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <_sbrk+0x64>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <_sbrk+0x64>)
 8003660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20005000 	.word	0x20005000
 8003670:	00000400 	.word	0x00000400
 8003674:	200004d8 	.word	0x200004d8
 8003678:	200004f0 	.word	0x200004f0

0800367c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <HCSR04_timer_input_CC>:
	0,
	0
};

void HCSR04_timer_input_CC (TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7f1b      	ldrb	r3, [r3, #28]
 8003694:	2b02      	cmp	r3, #2
 8003696:	f040 80e5 	bne.w	8003864 <HCSR04_timer_input_CC+0x1dc>
	{
		if (Front_US.FIRST_CAPTURED==0) // if the first value is not captured
 800369a:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800369c:	7f1b      	ldrb	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d16a      	bne.n	8003778 <HCSR04_timer_input_CC+0xf0>
		{
			Front_US.VAL1 = HAL_TIM_ReadCapturedValue(htim, Front_US.IC_TIM_CH); // read the first value
 80036a2:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f003 fead 	bl	8007408 <HAL_TIM_ReadCapturedValue>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a84      	ldr	r2, [pc, #528]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036b2:	6113      	str	r3, [r2, #16]
	//			Front_US.VAL1 = __HAL_TIM_GET_COUNTER(htim);
			Front_US.FIRST_CAPTURED = 1;  // set the first captured as true
 80036b4:	4b83      	ldr	r3, [pc, #524]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	771a      	strb	r2, [r3, #28]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HCSR04_timer_input_CC+0x4c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020a 	bic.w	r2, r2, #10
 80036d0:	621a      	str	r2, [r3, #32]
 80036d2:	e021      	b.n	8003718 <HCSR04_timer_input_CC+0x90>
 80036d4:	4b7b      	ldr	r3, [pc, #492]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d108      	bne.n	80036ee <HCSR04_timer_input_CC+0x66>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	e014      	b.n	8003718 <HCSR04_timer_input_CC+0x90>
 80036ee:	4b75      	ldr	r3, [pc, #468]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d108      	bne.n	8003708 <HCSR04_timer_input_CC+0x80>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	e007      	b.n	8003718 <HCSR04_timer_input_CC+0x90>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d108      	bne.n	8003732 <HCSR04_timer_input_CC+0xaa>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0202 	orr.w	r2, r2, #2
 800372e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, Side_US.IC_TIM_CH);
		}
	}


}
 8003730:	e186      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003732:	4b64      	ldr	r3, [pc, #400]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d108      	bne.n	800374c <HCSR04_timer_input_CC+0xc4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	e179      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
 800374c:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d108      	bne.n	8003766 <HCSR04_timer_input_CC+0xde>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003762:	6213      	str	r3, [r2, #32]
 8003764:	e16c      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003774:	6213      	str	r3, [r2, #32]
}
 8003776:	e163      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
		else if (Front_US.FIRST_CAPTURED==1)   // if the first is already captured
 8003778:	4b52      	ldr	r3, [pc, #328]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800377a:	7f1b      	ldrb	r3, [r3, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 815f 	bne.w	8003a40 <HCSR04_timer_input_CC+0x3b8>
			Front_US.VAL2 = HAL_TIM_ReadCapturedValue(htim, Front_US.IC_TIM_CH);  // read second value
 8003782:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f003 fe3d 	bl	8007408 <HAL_TIM_ReadCapturedValue>
 800378e:	4603      	mov	r3, r0
 8003790:	4a4c      	ldr	r2, [pc, #304]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003792:	6153      	str	r3, [r2, #20]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
			Front_US.FIRST_CAPTURED = 0; // set back to false
 800379c:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Front_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80037a2:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <HCSR04_timer_input_CC+0x134>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 020a 	bic.w	r2, r2, #10
 80037b8:	621a      	str	r2, [r3, #32]
 80037ba:	e021      	b.n	8003800 <HCSR04_timer_input_CC+0x178>
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d108      	bne.n	80037d6 <HCSR04_timer_input_CC+0x14e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	e014      	b.n	8003800 <HCSR04_timer_input_CC+0x178>
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d108      	bne.n	80037f0 <HCSR04_timer_input_CC+0x168>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ec:	6213      	str	r3, [r2, #32]
 80037ee:	e007      	b.n	8003800 <HCSR04_timer_input_CC+0x178>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <HCSR04_timer_input_CC+0x18e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a12      	ldr	r2, [r2, #32]
 8003812:	621a      	str	r2, [r3, #32]
 8003814:	e01b      	b.n	800384e <HCSR04_timer_input_CC+0x1c6>
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d106      	bne.n	800382c <HCSR04_timer_input_CC+0x1a4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	6213      	str	r3, [r2, #32]
 800382a:	e010      	b.n	800384e <HCSR04_timer_input_CC+0x1c6>
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d106      	bne.n	8003842 <HCSR04_timer_input_CC+0x1ba>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e005      	b.n	800384e <HCSR04_timer_input_CC+0x1c6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, Front_US.IC_TIM_CH);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68d9      	ldr	r1, [r3, #12]
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HCSR04_timer_input_CC+0x23c>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	43da      	mvns	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	400a      	ands	r2, r1
 8003860:	60da      	str	r2, [r3, #12]
}
 8003862:	e0ed      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7f1b      	ldrb	r3, [r3, #28]
 8003868:	2b04      	cmp	r3, #4
 800386a:	f040 80e9 	bne.w	8003a40 <HCSR04_timer_input_CC+0x3b8>
		if (Side_US.FIRST_CAPTURED==0) // if the first value is not captured
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 8003870:	7f1b      	ldrb	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d16f      	bne.n	8003956 <HCSR04_timer_input_CC+0x2ce>
			Side_US.VAL1 = HAL_TIM_ReadCapturedValue(htim, Side_US.IC_TIM_CH); // read the first value
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f003 fdc3 	bl	8007408 <HAL_TIM_ReadCapturedValue>
 8003882:	4603      	mov	r3, r0
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 8003886:	6113      	str	r3, [r2, #16]
			Side_US.FIRST_CAPTURED = 1;  // set the first captured as true
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 800388a:	2201      	movs	r2, #1
 800388c:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HCSR04_timer_input_CC+0x220>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 020a 	bic.w	r2, r2, #10
 80038a4:	621a      	str	r2, [r3, #32]
 80038a6:	e026      	b.n	80038f6 <HCSR04_timer_input_CC+0x26e>
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HCSR04_timer_input_CC+0x240>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d10d      	bne.n	80038cc <HCSR04_timer_input_CC+0x244>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038be:	6213      	str	r3, [r2, #32]
 80038c0:	e019      	b.n	80038f6 <HCSR04_timer_input_CC+0x26e>
 80038c2:	bf00      	nop
 80038c4:	20000088 	.word	0x20000088
 80038c8:	200000b8 	.word	0x200000b8
 80038cc:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d108      	bne.n	80038e6 <HCSR04_timer_input_CC+0x25e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e007      	b.n	80038f6 <HCSR04_timer_input_CC+0x26e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HCSR04_timer_input_CC+0x288>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0202 	orr.w	r2, r2, #2
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	e097      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d108      	bne.n	800392a <HCSR04_timer_input_CC+0x2a2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e08a      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
 800392a:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d108      	bne.n	8003944 <HCSR04_timer_input_CC+0x2bc>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003940:	6213      	str	r3, [r2, #32]
 8003942:	e07d      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003952:	6213      	str	r3, [r2, #32]
}
 8003954:	e074      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
		else if (Side_US.FIRST_CAPTURED==1)   // if the first is already captured
 8003956:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003958:	7f1b      	ldrb	r3, [r3, #28]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d170      	bne.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
			Side_US.VAL2 = HAL_TIM_ReadCapturedValue(htim, Side_US.IC_TIM_CH);  // read second value
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f003 fd4f 	bl	8007408 <HAL_TIM_ReadCapturedValue>
 800396a:	4603      	mov	r3, r0
 800396c:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 800396e:	6153      	str	r3, [r2, #20]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2200      	movs	r2, #0
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
			Side_US.FIRST_CAPTURED = 0; // set back to false
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 800397a:	2200      	movs	r2, #0
 800397c:	771a      	strb	r2, [r3, #28]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, Side_US.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HCSR04_timer_input_CC+0x310>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1a      	ldr	r2, [r3, #32]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 020a 	bic.w	r2, r2, #10
 8003994:	621a      	str	r2, [r3, #32]
 8003996:	e021      	b.n	80039dc <HCSR04_timer_input_CC+0x354>
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d108      	bne.n	80039b2 <HCSR04_timer_input_CC+0x32a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e014      	b.n	80039dc <HCSR04_timer_input_CC+0x354>
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d108      	bne.n	80039cc <HCSR04_timer_input_CC+0x344>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c8:	6213      	str	r3, [r2, #32]
 80039ca:	e007      	b.n	80039dc <HCSR04_timer_input_CC+0x354>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HCSR04_timer_input_CC+0x36a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a12      	ldr	r2, [r2, #32]
 80039ee:	621a      	str	r2, [r3, #32]
 80039f0:	e01b      	b.n	8003a2a <HCSR04_timer_input_CC+0x3a2>
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d106      	bne.n	8003a08 <HCSR04_timer_input_CC+0x380>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	e010      	b.n	8003a2a <HCSR04_timer_input_CC+0x3a2>
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d106      	bne.n	8003a1e <HCSR04_timer_input_CC+0x396>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	e005      	b.n	8003a2a <HCSR04_timer_input_CC+0x3a2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	6213      	str	r3, [r2, #32]
			__HAL_TIM_DISABLE_IT(htim, Side_US.IC_TIM_CH);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68d9      	ldr	r1, [r3, #12]
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HCSR04_timer_input_CC+0x3c0>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	60da      	str	r2, [r3, #12]
}
 8003a3e:	e7ff      	b.n	8003a40 <HCSR04_timer_input_CC+0x3b8>
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200000b8 	.word	0x200000b8

08003a4c <HCSR04_Read_Front>:

void HCSR04_Read_Front (TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8003a54:	2201      	movs	r2, #1
 8003a56:	2140      	movs	r1, #64	; 0x40
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <HCSR04_Read_Front+0x3c>)
 8003a5a:	f000 fe6d 	bl	8004738 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8003a5e:	200a      	movs	r0, #10
 8003a60:	f7ff fb2c 	bl	80030bc <delay_us>
	HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8003a64:	2200      	movs	r2, #0
 8003a66:	2140      	movs	r1, #64	; 0x40
 8003a68:	4807      	ldr	r0, [pc, #28]	; (8003a88 <HCSR04_Read_Front+0x3c>)
 8003a6a:	f000 fe65 	bl	8004738 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0204 	orr.w	r2, r2, #4
 8003a7c:	60da      	str	r2, [r3, #12]

}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	00000000 	.word	0x00000000

08003a90 <get_front_distance>:
	HAL_GPIO_WritePin(SIDE_TRIG_GPIO_Port, SIDE_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
}

double get_front_distance (void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	while (Front_US.FIRST_CAPTURED != 0) {} // wait until full pulse is recieved
 8003a94:	bf00      	nop
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <get_front_distance+0x90>)
 8003a98:	7f1b      	ldrb	r3, [r3, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1fb      	bne.n	8003a96 <get_front_distance+0x6>

	if (Front_US.VAL2 > Front_US.VAL1)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <get_front_distance+0x90>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <get_front_distance+0x90>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d907      	bls.n	8003aba <get_front_distance+0x2a>
	{
		Front_US.DIFFERENCE = Front_US.VAL2-Front_US.VAL1;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <get_front_distance+0x90>)
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <get_front_distance+0x90>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <get_front_distance+0x90>)
 8003ab6:	6193      	str	r3, [r2, #24]
 8003ab8:	e00f      	b.n	8003ada <get_front_distance+0x4a>
	}

	else if (Front_US.VAL1 > Front_US.VAL2)
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <get_front_distance+0x90>)
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <get_front_distance+0x90>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d909      	bls.n	8003ada <get_front_distance+0x4a>
	{
		Front_US.DIFFERENCE = (0xffff - Front_US.VAL1) + Front_US.VAL2;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <get_front_distance+0x90>)
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <get_front_distance+0x90>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003ad4:	33ff      	adds	r3, #255	; 0xff
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <get_front_distance+0x90>)
 8003ad8:	6193      	str	r3, [r2, #24]
	}

	// Filter sensor data
	Front_US.SENSOR_VAL = Front_US.DIFFERENCE * .034/2;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <get_front_distance+0x90>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fc80 	bl	80003e4 <__aeabi_ui2d>
 8003ae4:	a30c      	add	r3, pc, #48	; (adr r3, 8003b18 <get_front_distance+0x88>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fcf5 	bl	80004d8 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003afe:	f7fc fe15 	bl	800072c <__aeabi_ddiv>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4906      	ldr	r1, [pc, #24]	; (8003b20 <get_front_distance+0x90>)
 8003b08:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
//	Front_US.DISTANCE = filter(Front_US.SENSOR_VAL, Front_US.DISTANCE);
	return Front_US.SENSOR_VAL;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <get_front_distance+0x90>)
 8003b0e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28

}
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	b020c49c 	.word	0xb020c49c
 8003b1c:	3fa16872 	.word	0x3fa16872
 8003b20:	20000088 	.word	0x20000088

08003b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b26:	e003      	b.n	8003b30 <LoopCopyDataInit>

08003b28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b2e:	3104      	adds	r1, #4

08003b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b30:	480a      	ldr	r0, [pc, #40]	; (8003b5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b38:	d3f6      	bcc.n	8003b28 <CopyDataInit>
  ldr r2, =_sbss
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b3c:	e002      	b.n	8003b44 <LoopFillZerobss>

08003b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b40:	f842 3b04 	str.w	r3, [r2], #4

08003b44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b48:	d3f9      	bcc.n	8003b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b4a:	f7ff fd97 	bl	800367c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b4e:	f004 fe23 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b52:	f7fe ffb3 	bl	8002abc <main>
  bx lr
 8003b56:	4770      	bx	lr
  ldr r3, =_sidata
 8003b58:	0800d184 	.word	0x0800d184
  ldr r0, =_sdata
 8003b5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b60:	200002c4 	.word	0x200002c4
  ldr r2, =_sbss
 8003b64:	200002c8 	.word	0x200002c8
  ldr r3, = _ebss
 8003b68:	200004f0 	.word	0x200004f0

08003b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b6c:	e7fe      	b.n	8003b6c <ADC1_2_IRQHandler>
	...

08003b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_Init+0x28>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <HAL_Init+0x28>)
 8003b7a:	f043 0310 	orr.w	r3, r3, #16
 8003b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b80:	2003      	movs	r0, #3
 8003b82:	f000 fb63 	bl	800424c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f000 f808 	bl	8003b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b8c:	f7ff fac6 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40022000 	.word	0x40022000

08003b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_InitTick+0x54>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_InitTick+0x58>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fb7b 	bl	80042b6 <HAL_SYSTICK_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e00e      	b.n	8003be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	d80a      	bhi.n	8003be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bd8:	f000 fb43 	bl	8004262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <HAL_InitTick+0x5c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000084 	.word	0x20000084
 8003bf4:	200000ec 	.word	0x200000ec
 8003bf8:	200000e8 	.word	0x200000e8

08003bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_IncTick+0x1c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_IncTick+0x20>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <HAL_IncTick+0x20>)
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	200000ec 	.word	0x200000ec
 8003c1c:	200004dc 	.word	0x200004dc

08003c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return uwTick;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <HAL_GetTick+0x10>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	200004dc 	.word	0x200004dc

08003c34 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_GetTickFreq+0x10>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	200000ec 	.word	0x200000ec

08003c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c50:	f7ff ffe6 	bl	8003c20 <HAL_GetTick>
 8003c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d005      	beq.n	8003c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_Delay+0x44>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c6e:	bf00      	nop
 8003c70:	f7ff ffd6 	bl	8003c20 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d8f7      	bhi.n	8003c70 <HAL_Delay+0x28>
  {
  }
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200000ec 	.word	0x200000ec

08003c90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0be      	b.n	8003e30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fa56 	bl	8003180 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9ab 	bl	8004030 <ADC_ConversionStop_Disable>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 8099 	bne.w	8003e1e <HAL_ADC_Init+0x18e>
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8095 	bne.w	8003e1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7b1b      	ldrb	r3, [r3, #12]
 8003d16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d28:	d003      	beq.n	8003d32 <HAL_ADC_Init+0xa2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <HAL_ADC_Init+0xa8>
 8003d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d36:	e000      	b.n	8003d3a <HAL_ADC_Init+0xaa>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7d1b      	ldrb	r3, [r3, #20]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d119      	bne.n	8003d7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7b1b      	ldrb	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	035a      	lsls	r2, r3, #13
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e00b      	b.n	8003d7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_ADC_Init+0x1a8>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d003      	beq.n	8003db6 <HAL_ADC_Init+0x126>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d104      	bne.n	8003dc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_ADC_Init+0x1ac>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d10b      	bne.n	8003dfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dfa:	e018      	b.n	8003e2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f023 0312 	bic.w	r3, r3, #18
 8003e04:	f043 0210 	orr.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e1c:	e007      	b.n	8003e2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	ffe1f7fd 	.word	0xffe1f7fd
 8003e3c:	ff1f0efe 	.word	0xff1f0efe

08003e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x20>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0dc      	b.n	800401a <HAL_ADC_ConfigChannel+0x1da>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b06      	cmp	r3, #6
 8003e6e:	d81c      	bhi.n	8003eaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	3b05      	subs	r3, #5
 8003e82:	221f      	movs	r2, #31
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	4019      	ands	r1, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b05      	subs	r3, #5
 8003e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea8:	e03c      	b.n	8003f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d81c      	bhi.n	8003eec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b23      	subs	r3, #35	; 0x23
 8003ec4:	221f      	movs	r2, #31
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4019      	ands	r1, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	3b23      	subs	r3, #35	; 0x23
 8003ede:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eea:	e01b      	b.n	8003f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	3b41      	subs	r3, #65	; 0x41
 8003efe:	221f      	movs	r2, #31
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	4019      	ands	r1, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	3b41      	subs	r3, #65	; 0x41
 8003f18:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d91c      	bls.n	8003f66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68d9      	ldr	r1, [r3, #12]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	2207      	movs	r2, #7
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4019      	ands	r1, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6898      	ldr	r0, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	3b1e      	subs	r3, #30
 8003f58:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	e019      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6919      	ldr	r1, [r3, #16]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4019      	ands	r1, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6898      	ldr	r0, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d003      	beq.n	8003faa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fa6:	2b11      	cmp	r3, #17
 8003fa8:	d132      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_ADC_ConfigChannel+0x1e4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d125      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d126      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d11a      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <HAL_ADC_ConfigChannel+0x1e8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <HAL_ADC_ConfigChannel+0x1ec>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	0c9a      	lsrs	r2, r3, #18
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ff0:	e002      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f9      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8003ffe:	e007      	b.n	8004010 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	40012400 	.word	0x40012400
 8004028:	20000084 	.word	0x20000084
 800402c:	431bde83 	.word	0x431bde83

08004030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d12e      	bne.n	80040a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800405a:	f7ff fde1 	bl	8003c20 <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004060:	e01b      	b.n	800409a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004062:	f7ff fddd 	bl	8003c20 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d914      	bls.n	800409a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10d      	bne.n	800409a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d0dc      	beq.n	8004062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	60d3      	str	r3, [r2, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4906      	ldr	r1, [pc, #24]	; (800414c <__NVIC_EnableIRQ+0x34>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	; (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004218:	d301      	bcc.n	800421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2301      	movs	r3, #1
 800421c:	e00f      	b.n	800423e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <SysTick_Config+0x40>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004226:	210f      	movs	r1, #15
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422c:	f7ff ff90 	bl	8004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <SysTick_Config+0x40>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <SysTick_Config+0x40>)
 8004238:	2207      	movs	r2, #7
 800423a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000e010 	.word	0xe000e010

0800424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff2d 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004274:	f7ff ff42 	bl	80040fc <__NVIC_GetPriorityGrouping>
 8004278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f7ff ff90 	bl	80041a4 <NVIC_EncodePriority>
 8004284:	4602      	mov	r2, r0
 8004286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff5f 	bl	8004150 <__NVIC_SetPriority>
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff35 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffa2 	bl	8004208 <SysTick_Config>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2204      	movs	r2, #4
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e020      	b.n	8004338 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 020e 	bic.w	r2, r2, #14
 8004304:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
	...

08004344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004356:	2b02      	cmp	r3, #2
 8004358:	d005      	beq.n	8004366 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e051      	b.n	800440a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 020e 	bic.w	r2, r2, #14
 8004374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a22      	ldr	r2, [pc, #136]	; (8004414 <HAL_DMA_Abort_IT+0xd0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d029      	beq.n	80043e4 <HAL_DMA_Abort_IT+0xa0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_DMA_Abort_IT+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d022      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x9c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_DMA_Abort_IT+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d01a      	beq.n	80043da <HAL_DMA_Abort_IT+0x96>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_DMA_Abort_IT+0xdc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d012      	beq.n	80043d4 <HAL_DMA_Abort_IT+0x90>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_DMA_Abort_IT+0xe0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00a      	beq.n	80043ce <HAL_DMA_Abort_IT+0x8a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_DMA_Abort_IT+0xe4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d102      	bne.n	80043c8 <HAL_DMA_Abort_IT+0x84>
 80043c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043c6:	e00e      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043cc:	e00b      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043d2:	e008      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d8:	e005      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043de:	e002      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043e0:	2310      	movs	r3, #16
 80043e2:	e000      	b.n	80043e6 <HAL_DMA_Abort_IT+0xa2>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_DMA_Abort_IT+0xe8>)
 80043e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
    } 
  }
  return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40020008 	.word	0x40020008
 8004418:	4002001c 	.word	0x4002001c
 800441c:	40020030 	.word	0x40020030
 8004420:	40020044 	.word	0x40020044
 8004424:	40020058 	.word	0x40020058
 8004428:	4002006c 	.word	0x4002006c
 800442c:	40020000 	.word	0x40020000

08004430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004430:	b480      	push	{r7}
 8004432:	b08b      	sub	sp, #44	; 0x2c
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e169      	b.n	8004718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004444:	2201      	movs	r2, #1
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 8158 	bne.w	8004712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a9a      	ldr	r2, [pc, #616]	; (80046d0 <HAL_GPIO_Init+0x2a0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d05e      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 800446c:	4a98      	ldr	r2, [pc, #608]	; (80046d0 <HAL_GPIO_Init+0x2a0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d875      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 8004472:	4a98      	ldr	r2, [pc, #608]	; (80046d4 <HAL_GPIO_Init+0x2a4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d058      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004478:	4a96      	ldr	r2, [pc, #600]	; (80046d4 <HAL_GPIO_Init+0x2a4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d86f      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 800447e:	4a96      	ldr	r2, [pc, #600]	; (80046d8 <HAL_GPIO_Init+0x2a8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d052      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004484:	4a94      	ldr	r2, [pc, #592]	; (80046d8 <HAL_GPIO_Init+0x2a8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d869      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 800448a:	4a94      	ldr	r2, [pc, #592]	; (80046dc <HAL_GPIO_Init+0x2ac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d04c      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 8004490:	4a92      	ldr	r2, [pc, #584]	; (80046dc <HAL_GPIO_Init+0x2ac>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d863      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 8004496:	4a92      	ldr	r2, [pc, #584]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d046      	beq.n	800452a <HAL_GPIO_Init+0xfa>
 800449c:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <HAL_GPIO_Init+0x2b0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d85d      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 80044a2:	2b12      	cmp	r3, #18
 80044a4:	d82a      	bhi.n	80044fc <HAL_GPIO_Init+0xcc>
 80044a6:	2b12      	cmp	r3, #18
 80044a8:	d859      	bhi.n	800455e <HAL_GPIO_Init+0x12e>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_GPIO_Init+0x80>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	0800452b 	.word	0x0800452b
 80044b4:	08004505 	.word	0x08004505
 80044b8:	08004517 	.word	0x08004517
 80044bc:	08004559 	.word	0x08004559
 80044c0:	0800455f 	.word	0x0800455f
 80044c4:	0800455f 	.word	0x0800455f
 80044c8:	0800455f 	.word	0x0800455f
 80044cc:	0800455f 	.word	0x0800455f
 80044d0:	0800455f 	.word	0x0800455f
 80044d4:	0800455f 	.word	0x0800455f
 80044d8:	0800455f 	.word	0x0800455f
 80044dc:	0800455f 	.word	0x0800455f
 80044e0:	0800455f 	.word	0x0800455f
 80044e4:	0800455f 	.word	0x0800455f
 80044e8:	0800455f 	.word	0x0800455f
 80044ec:	0800455f 	.word	0x0800455f
 80044f0:	0800455f 	.word	0x0800455f
 80044f4:	0800450d 	.word	0x0800450d
 80044f8:	08004521 	.word	0x08004521
 80044fc:	4a79      	ldr	r2, [pc, #484]	; (80046e4 <HAL_GPIO_Init+0x2b4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004502:	e02c      	b.n	800455e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	623b      	str	r3, [r7, #32]
          break;
 800450a:	e029      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	623b      	str	r3, [r7, #32]
          break;
 8004514:	e024      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	3308      	adds	r3, #8
 800451c:	623b      	str	r3, [r7, #32]
          break;
 800451e:	e01f      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	330c      	adds	r3, #12
 8004526:	623b      	str	r3, [r7, #32]
          break;
 8004528:	e01a      	b.n	8004560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004532:	2304      	movs	r3, #4
 8004534:	623b      	str	r3, [r7, #32]
          break;
 8004536:	e013      	b.n	8004560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004540:	2308      	movs	r3, #8
 8004542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	611a      	str	r2, [r3, #16]
          break;
 800454a:	e009      	b.n	8004560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800454c:	2308      	movs	r3, #8
 800454e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	615a      	str	r2, [r3, #20]
          break;
 8004556:	e003      	b.n	8004560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004558:	2300      	movs	r3, #0
 800455a:	623b      	str	r3, [r7, #32]
          break;
 800455c:	e000      	b.n	8004560 <HAL_GPIO_Init+0x130>
          break;
 800455e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d801      	bhi.n	800456a <HAL_GPIO_Init+0x13a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	e001      	b.n	800456e <HAL_GPIO_Init+0x13e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d802      	bhi.n	800457c <HAL_GPIO_Init+0x14c>
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	e002      	b.n	8004582 <HAL_GPIO_Init+0x152>
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	3b08      	subs	r3, #8
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	210f      	movs	r1, #15
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80b1 	beq.w	8004712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	4a4c      	ldr	r2, [pc, #304]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6193      	str	r3, [r2, #24]
 80045bc:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_GPIO_Init+0x2b8>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045c8:	4a48      	ldr	r2, [pc, #288]	; (80046ec <HAL_GPIO_Init+0x2bc>)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	3302      	adds	r3, #2
 80045d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a40      	ldr	r2, [pc, #256]	; (80046f0 <HAL_GPIO_Init+0x2c0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <HAL_GPIO_Init+0x1ec>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_GPIO_Init+0x2c4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00d      	beq.n	8004618 <HAL_GPIO_Init+0x1e8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3e      	ldr	r2, [pc, #248]	; (80046f8 <HAL_GPIO_Init+0x2c8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <HAL_GPIO_Init+0x1e4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3d      	ldr	r2, [pc, #244]	; (80046fc <HAL_GPIO_Init+0x2cc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_GPIO_Init+0x1e0>
 800460c:	2303      	movs	r3, #3
 800460e:	e006      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004610:	2304      	movs	r3, #4
 8004612:	e004      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004614:	2302      	movs	r3, #2
 8004616:	e002      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_GPIO_Init+0x1ee>
 800461c:	2300      	movs	r3, #0
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	f002 0203 	and.w	r2, r2, #3
 8004624:	0092      	lsls	r2, r2, #2
 8004626:	4093      	lsls	r3, r2
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800462e:	492f      	ldr	r1, [pc, #188]	; (80046ec <HAL_GPIO_Init+0x2bc>)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	492c      	ldr	r1, [pc, #176]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	43db      	mvns	r3, r3
 800465e:	4928      	ldr	r1, [pc, #160]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004660:	4013      	ands	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004670:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	43db      	mvns	r3, r3
 8004686:	491e      	ldr	r1, [pc, #120]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 8004688:	4013      	ands	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	4918      	ldr	r1, [pc, #96]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	4914      	ldr	r1, [pc, #80]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	490e      	ldr	r1, [pc, #56]	; (8004700 <HAL_GPIO_Init+0x2d0>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
 80046cc:	e021      	b.n	8004712 <HAL_GPIO_Init+0x2e2>
 80046ce:	bf00      	nop
 80046d0:	10320000 	.word	0x10320000
 80046d4:	10310000 	.word	0x10310000
 80046d8:	10220000 	.word	0x10220000
 80046dc:	10210000 	.word	0x10210000
 80046e0:	10120000 	.word	0x10120000
 80046e4:	10110000 	.word	0x10110000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010800 	.word	0x40010800
 80046f4:	40010c00 	.word	0x40010c00
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40011400 	.word	0x40011400
 8004700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_GPIO_Init+0x304>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	43db      	mvns	r3, r3
 800470c:	4909      	ldr	r1, [pc, #36]	; (8004734 <HAL_GPIO_Init+0x304>)
 800470e:	4013      	ands	r3, r2
 8004710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	3301      	adds	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	f47f ae8e 	bne.w	8004444 <HAL_GPIO_Init+0x14>
  }
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	372c      	adds	r7, #44	; 0x2c
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40010400 	.word	0x40010400

08004738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	807b      	strh	r3, [r7, #2]
 8004744:	4613      	mov	r3, r2
 8004746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004748:	787b      	ldrb	r3, [r7, #1]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800474e:	887a      	ldrh	r2, [r7, #2]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004754:	e003      	b.n	800475e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	041a      	lsls	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e12b      	b.n	80049d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe fd32 	bl	80031f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	; 0x24
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047cc:	f001 febe 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 80047d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4a81      	ldr	r2, [pc, #516]	; (80049dc <HAL_I2C_Init+0x274>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d807      	bhi.n	80047ec <HAL_I2C_Init+0x84>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_I2C_Init+0x278>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bf94      	ite	ls
 80047e4:	2301      	movls	r3, #1
 80047e6:	2300      	movhi	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e006      	b.n	80047fa <HAL_I2C_Init+0x92>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a7d      	ldr	r2, [pc, #500]	; (80049e4 <HAL_I2C_Init+0x27c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bf94      	ite	ls
 80047f4:	2301      	movls	r3, #1
 80047f6:	2300      	movhi	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0e7      	b.n	80049d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a78      	ldr	r2, [pc, #480]	; (80049e8 <HAL_I2C_Init+0x280>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0c9b      	lsrs	r3, r3, #18
 800480c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a6a      	ldr	r2, [pc, #424]	; (80049dc <HAL_I2C_Init+0x274>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d802      	bhi.n	800483c <HAL_I2C_Init+0xd4>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	3301      	adds	r3, #1
 800483a:	e009      	b.n	8004850 <HAL_I2C_Init+0xe8>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	4a69      	ldr	r2, [pc, #420]	; (80049ec <HAL_I2C_Init+0x284>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	3301      	adds	r3, #1
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	430b      	orrs	r3, r1
 8004856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	495c      	ldr	r1, [pc, #368]	; (80049dc <HAL_I2C_Init+0x274>)
 800486c:	428b      	cmp	r3, r1
 800486e:	d819      	bhi.n	80048a4 <HAL_I2C_Init+0x13c>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e59      	subs	r1, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fbb1 f3f3 	udiv	r3, r1, r3
 800487e:	1c59      	adds	r1, r3, #1
 8004880:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004884:	400b      	ands	r3, r1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_I2C_Init+0x138>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1e59      	subs	r1, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fbb1 f3f3 	udiv	r3, r1, r3
 8004898:	3301      	adds	r3, #1
 800489a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489e:	e051      	b.n	8004944 <HAL_I2C_Init+0x1dc>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e04f      	b.n	8004944 <HAL_I2C_Init+0x1dc>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d111      	bne.n	80048d0 <HAL_I2C_Init+0x168>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1e58      	subs	r0, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	440b      	add	r3, r1
 80048ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e012      	b.n	80048f6 <HAL_I2C_Init+0x18e>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1e58      	subs	r0, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6859      	ldr	r1, [r3, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	0099      	lsls	r1, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Init+0x196>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e022      	b.n	8004944 <HAL_I2C_Init+0x1dc>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <HAL_I2C_Init+0x1bc>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1e58      	subs	r0, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	440b      	add	r3, r1
 8004914:	fbb0 f3f3 	udiv	r3, r0, r3
 8004918:	3301      	adds	r3, #1
 800491a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004922:	e00f      	b.n	8004944 <HAL_I2C_Init+0x1dc>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1e58      	subs	r0, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	0099      	lsls	r1, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	fbb0 f3f3 	udiv	r3, r0, r3
 800493a:	3301      	adds	r3, #1
 800493c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	6809      	ldr	r1, [r1, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6911      	ldr	r1, [r2, #16]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68d2      	ldr	r2, [r2, #12]
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	430b      	orrs	r3, r1
 8004986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	000186a0 	.word	0x000186a0
 80049e0:	001e847f 	.word	0x001e847f
 80049e4:	003d08ff 	.word	0x003d08ff
 80049e8:	431bde83 	.word	0x431bde83
 80049ec:	10624dd3 	.word	0x10624dd3

080049f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a0a:	f7ff f909 	bl	8003c20 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	f040 80d9 	bne.w	8004bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2319      	movs	r3, #25
 8004a24:	2201      	movs	r2, #1
 8004a26:	496d      	ldr	r1, [pc, #436]	; (8004bdc <HAL_I2C_Mem_Write+0x1ec>)
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 ffdf 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
 8004a36:	e0cc      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2C_Mem_Write+0x56>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0c5      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d007      	beq.n	8004a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2221      	movs	r2, #33	; 0x21
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a4d      	ldr	r2, [pc, #308]	; (8004be0 <HAL_I2C_Mem_Write+0x1f0>)
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aae:	88f8      	ldrh	r0, [r7, #6]
 8004ab0:	893a      	ldrh	r2, [r7, #8]
 8004ab2:	8979      	ldrh	r1, [r7, #10]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fd6e 	bl	80055a0 <I2C_RequestMemoryWrite>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d052      	beq.n	8004b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e081      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f001 f860 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d107      	bne.n	8004af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e06b      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d11b      	bne.n	8004b70 <HAL_I2C_Mem_Write+0x180>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d017      	beq.n	8004b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1aa      	bne.n	8004ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f001 f84c 	bl	8005c1a <I2C_WaitOnBTFFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00d      	beq.n	8004ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d107      	bne.n	8004ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e016      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e000      	b.n	8004bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	00100002 	.word	0x00100002
 8004be0:	ffff0000 	.word	0xffff0000

08004be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08c      	sub	sp, #48	; 0x30
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	817b      	strh	r3, [r7, #10]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	813b      	strh	r3, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c02:	f7ff f80d 	bl	8003c20 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	f040 8244 	bne.w	800509e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2319      	movs	r3, #25
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4982      	ldr	r1, [pc, #520]	; (8004e28 <HAL_I2C_Mem_Read+0x244>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fee3 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e237      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_I2C_Mem_Read+0x5a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e230      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d007      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2222      	movs	r2, #34	; 0x22
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a62      	ldr	r2, [pc, #392]	; (8004e2c <HAL_I2C_Mem_Read+0x248>)
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ca6:	88f8      	ldrh	r0, [r7, #6]
 8004ca8:	893a      	ldrh	r2, [r7, #8]
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fd08 	bl	80056cc <I2C_RequestMemoryRead>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1ec      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d113      	bne.n	8004cf6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e1c0      	b.n	8005078 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d11e      	bne.n	8004d3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d0e:	b672      	cpsid	i
}
 8004d10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d38:	b662      	cpsie	i
}
 8004d3a:	e035      	b.n	8004da8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d11e      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d54:	b672      	cpsid	i
}
 8004d56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d7e:	b662      	cpsie	i
}
 8004d80:	e012      	b.n	8004da8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004da8:	e166      	b.n	8005078 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	f200 811f 	bhi.w	8004ff2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d123      	bne.n	8004e04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 ff6b 	bl	8005c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e167      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e02:	e139      	b.n	8005078 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d152      	bne.n	8004eb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	2200      	movs	r2, #0
 8004e14:	4906      	ldr	r1, [pc, #24]	; (8004e30 <HAL_I2C_Mem_Read+0x24c>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fde8 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e13c      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
 8004e26:	bf00      	nop
 8004e28:	00100002 	.word	0x00100002
 8004e2c:	ffff0000 	.word	0xffff0000
 8004e30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e34:	b672      	cpsid	i
}
 8004e36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e7a:	b662      	cpsie	i
}
 8004e7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb0:	e0e2      	b.n	8005078 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2200      	movs	r2, #0
 8004eba:	497b      	ldr	r1, [pc, #492]	; (80050a8 <HAL_I2C_Mem_Read+0x4c4>)
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fd95 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0e9      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004edc:	b672      	cpsid	i
}
 8004ede:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f12:	4b66      	ldr	r3, [pc, #408]	; (80050ac <HAL_I2C_Mem_Read+0x4c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	08db      	lsrs	r3, r3, #3
 8004f18:	4a65      	ldr	r2, [pc, #404]	; (80050b0 <HAL_I2C_Mem_Read+0x4cc>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0a1a      	lsrs	r2, r3, #8
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d118      	bne.n	8004f6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f5a:	b662      	cpsie	i
}
 8004f5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e09a      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d1d9      	bne.n	8004f2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fba:	b662      	cpsie	i
}
 8004fbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff0:	e042      	b.n	8005078 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fe50 	bl	8005c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e04c      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b04      	cmp	r3, #4
 8005044:	d118      	bne.n	8005078 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f ae94 	bne.w	8004daa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00010004 	.word	0x00010004
 80050ac:	20000084 	.word	0x20000084
 80050b0:	14f8b589 	.word	0x14f8b589

080050b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d016      	beq.n	8005112 <HAL_I2C_ER_IRQHandler+0x5e>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d010      	beq.n	8005112 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005100:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00e      	beq.n	800513c <HAL_I2C_ER_IRQHandler+0x88>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800513a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	0a9b      	lsrs	r3, r3, #10
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03f      	beq.n	80051c8 <HAL_I2C_ER_IRQHandler+0x114>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d039      	beq.n	80051c8 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005154:	7efb      	ldrb	r3, [r7, #27]
 8005156:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800516e:	7ebb      	ldrb	r3, [r7, #26]
 8005170:	2b20      	cmp	r3, #32
 8005172:	d112      	bne.n	800519a <HAL_I2C_ER_IRQHandler+0xe6>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_I2C_ER_IRQHandler+0xe6>
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	2b21      	cmp	r3, #33	; 0x21
 800517e:	d008      	beq.n	8005192 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b29      	cmp	r3, #41	; 0x29
 8005184:	d005      	beq.n	8005192 <HAL_I2C_ER_IRQHandler+0xde>
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b28      	cmp	r3, #40	; 0x28
 800518a:	d106      	bne.n	800519a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b21      	cmp	r3, #33	; 0x21
 8005190:	d103      	bne.n	800519a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f862 	bl	800525c <I2C_Slave_AF>
 8005198:	e016      	b.n	80051c8 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051a2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051ac:	7efb      	ldrb	r3, [r7, #27]
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d002      	beq.n	80051b8 <HAL_I2C_ER_IRQHandler+0x104>
 80051b2:	7efb      	ldrb	r3, [r7, #27]
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d107      	bne.n	80051c8 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	0adb      	lsrs	r3, r3, #11
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <HAL_I2C_ER_IRQHandler+0x13e>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80051f0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f899 	bl	800533c <I2C_ITError>
  }
}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
	...

0800525c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d002      	beq.n	800527e <I2C_Slave_AF+0x22>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b20      	cmp	r3, #32
 800527c:	d129      	bne.n	80052d2 <I2C_Slave_AF+0x76>
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b28      	cmp	r3, #40	; 0x28
 8005282:	d126      	bne.n	80052d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <I2C_Slave_AF+0xdc>)
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005298:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ffaa 	bl	8005224 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80052d0:	e02e      	b.n	8005330 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b21      	cmp	r3, #33	; 0x21
 80052d6:	d126      	bne.n	8005326 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <I2C_Slave_AF+0xdc>)
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2221      	movs	r2, #33	; 0x21
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005302:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800530c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ff77 	bl	8005212 <HAL_I2C_SlaveTxCpltCallback>
}
 8005324:	e004      	b.n	8005330 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800532e:	615a      	str	r2, [r3, #20]
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	ffff0000 	.word	0xffff0000

0800533c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005352:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b10      	cmp	r3, #16
 8005358:	d002      	beq.n	8005360 <I2C_ITError+0x24>
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d10a      	bne.n	8005376 <I2C_ITError+0x3a>
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b22      	cmp	r3, #34	; 0x22
 8005364:	d107      	bne.n	8005376 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005374:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800537c:	2b28      	cmp	r3, #40	; 0x28
 800537e:	d107      	bne.n	8005390 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2228      	movs	r2, #40	; 0x28
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800538e:	e015      	b.n	80053bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d00a      	beq.n	80053b6 <I2C_ITError+0x7a>
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b60      	cmp	r3, #96	; 0x60
 80053a4:	d007      	beq.n	80053b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ca:	d161      	bne.n	8005490 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d020      	beq.n	800542a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4a6a      	ldr	r2, [pc, #424]	; (8005598 <I2C_ITError+0x25c>)
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe ffa5 	bl	8004344 <HAL_DMA_Abort_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8089 	beq.w	8005514 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
 8005428:	e074      	b.n	8005514 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <I2C_ITError+0x25c>)
 8005430:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe ff84 	bl	8004344 <HAL_DMA_Abort_IT>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d068      	beq.n	8005514 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10b      	bne.n	8005468 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	e041      	b.n	8005514 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d125      	bne.n	80054e8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d10b      	bne.n	80054d0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff feb1 	bl	8005248 <HAL_I2C_AbortCpltCallback>
 80054e6:	e015      	b.n	8005514 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d10b      	bne.n	800550e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe91 	bl	8005236 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10e      	bne.n	8005542 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d113      	bne.n	800558e <I2C_ITError+0x252>
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b28      	cmp	r3, #40	; 0x28
 800556a:	d110      	bne.n	800558e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0b      	ldr	r2, [pc, #44]	; (800559c <I2C_ITError+0x260>)
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fe4b 	bl	8005224 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	0800589d 	.word	0x0800589d
 800559c:	ffff0000 	.word	0xffff0000

080055a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	460b      	mov	r3, r1
 80055b4:	813b      	strh	r3, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa08 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f0:	d103      	bne.n	80055fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e05f      	b.n	80056be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055fe:	897b      	ldrh	r3, [r7, #10]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800560c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	492d      	ldr	r1, [pc, #180]	; (80056c8 <I2C_RequestMemoryWrite+0x128>)
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa40 	bl	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e04c      	b.n	80056be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800563a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563c:	6a39      	ldr	r1, [r7, #32]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 faaa 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b04      	cmp	r3, #4
 8005650:	d107      	bne.n	8005662 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e02b      	b.n	80056be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800566c:	893b      	ldrh	r3, [r7, #8]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	e021      	b.n	80056bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005678:	893b      	ldrh	r3, [r7, #8]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	b29b      	uxth	r3, r3
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005688:	6a39      	ldr	r1, [r7, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa84 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b04      	cmp	r3, #4
 800569c:	d107      	bne.n	80056ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e005      	b.n	80056be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b2:	893b      	ldrh	r3, [r7, #8]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	00010002 	.word	0x00010002

080056cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	817b      	strh	r3, [r7, #10]
 80056de:	460b      	mov	r3, r1
 80056e0:	813b      	strh	r3, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	2200      	movs	r2, #0
 800570e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f96a 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d103      	bne.n	8005736 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0aa      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800573a:	897b      	ldrh	r3, [r7, #10]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	4952      	ldr	r1, [pc, #328]	; (8005898 <I2C_RequestMemoryRead+0x1cc>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f9a2 	bl	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e097      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	6a39      	ldr	r1, [r7, #32]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fa0c 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b04      	cmp	r3, #4
 800578c:	d107      	bne.n	800579e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e076      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	e021      	b.n	80057f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f9e6 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d107      	bne.n	80057ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e050      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ee:	893b      	ldrh	r3, [r7, #8]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	6a39      	ldr	r1, [r7, #32]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f9cb 	bl	8005b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	2b04      	cmp	r3, #4
 800580e:	d107      	bne.n	8005820 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e035      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005832:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2200      	movs	r2, #0
 800583c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f8d3 	bl	80059ec <I2C_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00d      	beq.n	8005868 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585a:	d103      	bne.n	8005864 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e013      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005868:	897b      	ldrh	r3, [r7, #10]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	4906      	ldr	r1, [pc, #24]	; (8005898 <I2C_RequestMemoryRead+0x1cc>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f90b 	bl	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	00010002 	.word	0x00010002

0800589c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058b6:	4b4b      	ldr	r3, [pc, #300]	; (80059e4 <I2C_DMAAbort+0x148>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	08db      	lsrs	r3, r3, #3
 80058bc:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <I2C_DMAAbort+0x14c>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0a1a      	lsrs	r2, r3, #8
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	00da      	lsls	r2, r3, #3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80058e2:	e00a      	b.n	80058fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f8:	d0ea      	beq.n	80058d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005928:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	2200      	movs	r2, #0
 800593e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	2200      	movs	r2, #0
 800594e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b60      	cmp	r3, #96	; 0x60
 800596a:	d10e      	bne.n	800598a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff fc60 	bl	8005248 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005988:	e027      	b.n	80059da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800598a:	7cfb      	ldrb	r3, [r7, #19]
 800598c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005990:	2b28      	cmp	r3, #40	; 0x28
 8005992:	d117      	bne.n	80059c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2228      	movs	r2, #40	; 0x28
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059c2:	e007      	b.n	80059d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f7ff fc2e 	bl	8005236 <HAL_I2C_ErrorCallback>
}
 80059da:	bf00      	nop
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000084 	.word	0x20000084
 80059e8:	14f8b589 	.word	0x14f8b589

080059ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059fc:	e025      	b.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a04:	d021      	beq.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a06:	f7fe f90b 	bl	8003c20 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d116      	bne.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e023      	b.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d10d      	bne.n	8005a70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	43da      	mvns	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	e00c      	b.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d0b6      	beq.n	80059fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aa8:	e051      	b.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d123      	bne.n	8005b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	f043 0204 	orr.w	r2, r3, #4
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e046      	b.n	8005b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b08:	d021      	beq.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe f889 	bl	8003c20 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d116      	bne.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e020      	b.n	8005b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10c      	bne.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e00b      	b.n	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	43da      	mvns	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d18d      	bne.n	8005aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba4:	e02d      	b.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f8ce 	bl	8005d48 <I2C_IsAcknowledgeFailed>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e02d      	b.n	8005c12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bbc:	d021      	beq.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fe f82f 	bl	8003c20 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d116      	bne.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e007      	b.n	8005c12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d1ca      	bne.n	8005ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c26:	e02d      	b.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f88d 	bl	8005d48 <I2C_IsAcknowledgeFailed>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e02d      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3e:	d021      	beq.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c40:	f7fd ffee 	bl	8003c20 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d302      	bcc.n	8005c56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d116      	bne.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e007      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d1ca      	bne.n	8005c28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca8:	e042      	b.n	8005d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d119      	bne.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e029      	b.n	8005d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fd ff98 	bl	8003c20 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f043 0220 	orr.w	r2, r3, #32
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e007      	b.n	8005d40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d1b5      	bne.n	8005caa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d11b      	bne.n	8005d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr

08005da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e272      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8087 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dc4:	4b92      	ldr	r3, [pc, #584]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d00c      	beq.n	8005dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dd0:	4b8f      	ldr	r3, [pc, #572]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d112      	bne.n	8005e02 <HAL_RCC_OscConfig+0x5e>
 8005ddc:	4b8c      	ldr	r3, [pc, #560]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d10b      	bne.n	8005e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dea:	4b89      	ldr	r3, [pc, #548]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d06c      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x12c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d168      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e24c      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0a:	d106      	bne.n	8005e1a <HAL_RCC_OscConfig+0x76>
 8005e0c:	4b80      	ldr	r3, [pc, #512]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a7f      	ldr	r2, [pc, #508]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e02e      	b.n	8005e78 <HAL_RCC_OscConfig+0xd4>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x98>
 8005e22:	4b7b      	ldr	r3, [pc, #492]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7a      	ldr	r2, [pc, #488]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4b78      	ldr	r3, [pc, #480]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a77      	ldr	r2, [pc, #476]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e01d      	b.n	8005e78 <HAL_RCC_OscConfig+0xd4>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e44:	d10c      	bne.n	8005e60 <HAL_RCC_OscConfig+0xbc>
 8005e46:	4b72      	ldr	r3, [pc, #456]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a71      	ldr	r2, [pc, #452]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a6e      	ldr	r2, [pc, #440]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e00b      	b.n	8005e78 <HAL_RCC_OscConfig+0xd4>
 8005e60:	4b6b      	ldr	r3, [pc, #428]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a6a      	ldr	r2, [pc, #424]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	4b68      	ldr	r3, [pc, #416]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a67      	ldr	r2, [pc, #412]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d013      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fd fece 	bl	8003c20 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fd feca 	bl	8003c20 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e200      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9a:	4b5d      	ldr	r3, [pc, #372]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0xe4>
 8005ea6:	e014      	b.n	8005ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fd feba 	bl	8003c20 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb0:	f7fd feb6 	bl	8003c20 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e1ec      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec2:	4b53      	ldr	r3, [pc, #332]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x10c>
 8005ece:	e000      	b.n	8005ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d063      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ede:	4b4c      	ldr	r3, [pc, #304]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005eea:	4b49      	ldr	r3, [pc, #292]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d11c      	bne.n	8005f30 <HAL_RCC_OscConfig+0x18c>
 8005ef6:	4b46      	ldr	r3, [pc, #280]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d116      	bne.n	8005f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f02:	4b43      	ldr	r3, [pc, #268]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <HAL_RCC_OscConfig+0x176>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d001      	beq.n	8005f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e1c0      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4939      	ldr	r1, [pc, #228]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2e:	e03a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d020      	beq.n	8005f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f38:	4b36      	ldr	r3, [pc, #216]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3e:	f7fd fe6f 	bl	8003c20 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f46:	f7fd fe6b 	bl	8003c20 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e1a1      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f64:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4927      	ldr	r1, [pc, #156]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]
 8005f78:	e015      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f7a:	4b26      	ldr	r3, [pc, #152]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fd fe4e 	bl	8003c20 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f88:	f7fd fe4a 	bl	8003c20 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e180      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d03a      	beq.n	8006028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d019      	beq.n	8005fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fba:	4b17      	ldr	r3, [pc, #92]	; (8006018 <HAL_RCC_OscConfig+0x274>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc0:	f7fd fe2e 	bl	8003c20 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc8:	f7fd fe2a 	bl	8003c20 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e160      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCC_OscConfig+0x26c>)
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	f000 fad8 	bl	800659c <RCC_Delay>
 8005fec:	e01c      	b.n	8006028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_RCC_OscConfig+0x274>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff4:	f7fd fe14 	bl	8003c20 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffa:	e00f      	b.n	800601c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fd fe10 	bl	8003c20 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d908      	bls.n	800601c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e146      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	42420000 	.word	0x42420000
 8006018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	4b92      	ldr	r3, [pc, #584]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e9      	bne.n	8005ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80a6 	beq.w	8006182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b8b      	ldr	r3, [pc, #556]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4a87      	ldr	r2, [pc, #540]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	61d3      	str	r3, [r2, #28]
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006062:	4b82      	ldr	r3, [pc, #520]	; (800626c <HAL_RCC_OscConfig+0x4c8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d118      	bne.n	80060a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606e:	4b7f      	ldr	r3, [pc, #508]	; (800626c <HAL_RCC_OscConfig+0x4c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a7e      	ldr	r2, [pc, #504]	; (800626c <HAL_RCC_OscConfig+0x4c8>)
 8006074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607a:	f7fd fdd1 	bl	8003c20 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006082:	f7fd fdcd 	bl	8003c20 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b64      	cmp	r3, #100	; 0x64
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e103      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006094:	4b75      	ldr	r3, [pc, #468]	; (800626c <HAL_RCC_OscConfig+0x4c8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <HAL_RCC_OscConfig+0x312>
 80060a8:	4b6f      	ldr	r3, [pc, #444]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	4a6e      	ldr	r2, [pc, #440]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	6213      	str	r3, [r2, #32]
 80060b4:	e02d      	b.n	8006112 <HAL_RCC_OscConfig+0x36e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x334>
 80060be:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6213      	str	r3, [r2, #32]
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	4a66      	ldr	r2, [pc, #408]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060d0:	f023 0304 	bic.w	r3, r3, #4
 80060d4:	6213      	str	r3, [r2, #32]
 80060d6:	e01c      	b.n	8006112 <HAL_RCC_OscConfig+0x36e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b05      	cmp	r3, #5
 80060de:	d10c      	bne.n	80060fa <HAL_RCC_OscConfig+0x356>
 80060e0:	4b61      	ldr	r3, [pc, #388]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	4a60      	ldr	r2, [pc, #384]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	f043 0304 	orr.w	r3, r3, #4
 80060ea:	6213      	str	r3, [r2, #32]
 80060ec:	4b5e      	ldr	r3, [pc, #376]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	4a5d      	ldr	r2, [pc, #372]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	6213      	str	r3, [r2, #32]
 80060f8:	e00b      	b.n	8006112 <HAL_RCC_OscConfig+0x36e>
 80060fa:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4a5a      	ldr	r2, [pc, #360]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6213      	str	r3, [r2, #32]
 8006106:	4b58      	ldr	r3, [pc, #352]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a57      	ldr	r2, [pc, #348]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d015      	beq.n	8006146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611a:	f7fd fd81 	bl	8003c20 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006120:	e00a      	b.n	8006138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fd fd7d 	bl	8003c20 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e0b1      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006138:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ee      	beq.n	8006122 <HAL_RCC_OscConfig+0x37e>
 8006144:	e014      	b.n	8006170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006146:	f7fd fd6b 	bl	8003c20 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614c:	e00a      	b.n	8006164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f7fd fd67 	bl	8003c20 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	f241 3288 	movw	r2, #5000	; 0x1388
 800615c:	4293      	cmp	r3, r2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e09b      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006164:	4b40      	ldr	r3, [pc, #256]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ee      	bne.n	800614e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d105      	bne.n	8006182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006176:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4a3b      	ldr	r2, [pc, #236]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800617c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8087 	beq.w	800629a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800618c:	4b36      	ldr	r3, [pc, #216]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d061      	beq.n	800625c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d146      	bne.n	800622e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b33      	ldr	r3, [pc, #204]	; (8006270 <HAL_RCC_OscConfig+0x4cc>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a6:	f7fd fd3b 	bl	8003c20 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fd fd37 	bl	8003c20 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e06d      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061c0:	4b29      	ldr	r3, [pc, #164]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f0      	bne.n	80061ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d108      	bne.n	80061e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	4921      	ldr	r1, [pc, #132]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e8:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a19      	ldr	r1, [r3, #32]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	430b      	orrs	r3, r1
 80061fa:	491b      	ldr	r1, [pc, #108]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <HAL_RCC_OscConfig+0x4cc>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006206:	f7fd fd0b 	bl	8003c20 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620e:	f7fd fd07 	bl	8003c20 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e03d      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006220:	4b11      	ldr	r3, [pc, #68]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x46a>
 800622c:	e035      	b.n	800629a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <HAL_RCC_OscConfig+0x4cc>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006234:	f7fd fcf4 	bl	8003c20 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623c:	f7fd fcf0 	bl	8003c20 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e026      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_RCC_OscConfig+0x4c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f0      	bne.n	800623c <HAL_RCC_OscConfig+0x498>
 800625a:	e01e      	b.n	800629a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d107      	bne.n	8006274 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e019      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
 8006268:	40021000 	.word	0x40021000
 800626c:	40007000 	.word	0x40007000
 8006270:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_RCC_OscConfig+0x500>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	429a      	cmp	r2, r3
 8006286:	d106      	bne.n	8006296 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006292:	429a      	cmp	r2, r3
 8006294:	d001      	beq.n	800629a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40021000 	.word	0x40021000

080062a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0d0      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062bc:	4b6a      	ldr	r3, [pc, #424]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d910      	bls.n	80062ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b67      	ldr	r3, [pc, #412]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 0207 	bic.w	r2, r3, #7
 80062d2:	4965      	ldr	r1, [pc, #404]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062da:	4b63      	ldr	r3, [pc, #396]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0b8      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d020      	beq.n	800633a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006304:	4b59      	ldr	r3, [pc, #356]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 800630a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800630e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800631c:	4b53      	ldr	r3, [pc, #332]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a52      	ldr	r2, [pc, #328]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006328:	4b50      	ldr	r3, [pc, #320]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	494d      	ldr	r1, [pc, #308]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d040      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d107      	bne.n	800635e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634e:	4b47      	ldr	r3, [pc, #284]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d115      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e07f      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006366:	4b41      	ldr	r3, [pc, #260]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e073      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006376:	4b3d      	ldr	r3, [pc, #244]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e06b      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f023 0203 	bic.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4936      	ldr	r1, [pc, #216]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006398:	f7fd fc42 	bl	8003c20 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a0:	f7fd fc3e 	bl	8003c20 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e053      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b6:	4b2d      	ldr	r3, [pc, #180]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 020c 	and.w	r2, r3, #12
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d1eb      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063c8:	4b27      	ldr	r3, [pc, #156]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d210      	bcs.n	80063f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 0207 	bic.w	r2, r3, #7
 80063de:	4922      	ldr	r1, [pc, #136]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <HAL_RCC_ClockConfig+0x1c0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e032      	b.n	800645e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	4916      	ldr	r1, [pc, #88]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006422:	4b12      	ldr	r3, [pc, #72]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	490e      	ldr	r1, [pc, #56]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006436:	f000 f821 	bl	800647c <HAL_RCC_GetSysClockFreq>
 800643a:	4602      	mov	r2, r0
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_RCC_ClockConfig+0x1c4>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	490a      	ldr	r1, [pc, #40]	; (8006470 <HAL_RCC_ClockConfig+0x1c8>)
 8006448:	5ccb      	ldrb	r3, [r1, r3]
 800644a:	fa22 f303 	lsr.w	r3, r2, r3
 800644e:	4a09      	ldr	r2, [pc, #36]	; (8006474 <HAL_RCC_ClockConfig+0x1cc>)
 8006450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <HAL_RCC_ClockConfig+0x1d0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fd fba0 	bl	8003b9c <HAL_InitTick>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40022000 	.word	0x40022000
 800646c:	40021000 	.word	0x40021000
 8006470:	0800ccc4 	.word	0x0800ccc4
 8006474:	20000084 	.word	0x20000084
 8006478:	200000e8 	.word	0x200000e8

0800647c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800647c:	b490      	push	{r4, r7}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006482:	4b29      	ldr	r3, [pc, #164]	; (8006528 <HAL_RCC_GetSysClockFreq+0xac>)
 8006484:	1d3c      	adds	r4, r7, #4
 8006486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800648c:	f240 2301 	movw	r3, #513	; 0x201
 8006490:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d002      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x40>
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d003      	beq.n	80064c2 <HAL_RCC_GetSysClockFreq+0x46>
 80064ba:	e02b      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064be:	623b      	str	r3, [r7, #32]
      break;
 80064c0:	e02b      	b.n	800651a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	0c9b      	lsrs	r3, r3, #18
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3328      	adds	r3, #40	; 0x28
 80064cc:	443b      	add	r3, r7
 80064ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d012      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	0c5b      	lsrs	r3, r3, #17
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	3328      	adds	r3, #40	; 0x28
 80064ea:	443b      	add	r3, r7
 80064ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4a0e      	ldr	r2, [pc, #56]	; (8006530 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064f6:	fb03 f202 	mul.w	r2, r3, r2
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	e004      	b.n	800650e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4a0b      	ldr	r2, [pc, #44]	; (8006534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006508:	fb02 f303 	mul.w	r3, r2, r3
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	623b      	str	r3, [r7, #32]
      break;
 8006512:	e002      	b.n	800651a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006516:	623b      	str	r3, [r7, #32]
      break;
 8006518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800651a:	6a3b      	ldr	r3, [r7, #32]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bc90      	pop	{r4, r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	0800cc98 	.word	0x0800cc98
 800652c:	40021000 	.word	0x40021000
 8006530:	007a1200 	.word	0x007a1200
 8006534:	003d0900 	.word	0x003d0900

08006538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <HAL_RCC_GetHCLKFreq+0x10>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	20000084 	.word	0x20000084

0800654c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006550:	f7ff fff2 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4903      	ldr	r1, [pc, #12]	; (8006570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40021000 	.word	0x40021000
 8006570:	0800ccd4 	.word	0x0800ccd4

08006574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006578:	f7ff ffde 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	0adb      	lsrs	r3, r3, #11
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	; (8006598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40021000 	.word	0x40021000
 8006598:	0800ccd4 	.word	0x0800ccd4

0800659c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <RCC_Delay+0x34>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <RCC_Delay+0x38>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	0a5b      	lsrs	r3, r3, #9
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065b8:	bf00      	nop
  }
  while (Delay --);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1e5a      	subs	r2, r3, #1
 80065be:	60fa      	str	r2, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f9      	bne.n	80065b8 <RCC_Delay+0x1c>
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	20000084 	.word	0x20000084
 80065d4:	10624dd3 	.word	0x10624dd3

080065d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d07d      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f8:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10d      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006604:	4b4c      	ldr	r3, [pc, #304]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4a4b      	ldr	r2, [pc, #300]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660e:	61d3      	str	r3, [r2, #28]
 8006610:	4b49      	ldr	r3, [pc, #292]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b46      	ldr	r3, [pc, #280]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d118      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662c:	4b43      	ldr	r3, [pc, #268]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a42      	ldr	r2, [pc, #264]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006638:	f7fd faf2 	bl	8003c20 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	e008      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006640:	f7fd faee 	bl	8003c20 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	; 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e06d      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006652:	4b3a      	ldr	r3, [pc, #232]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800665e:	4b36      	ldr	r3, [pc, #216]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02e      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	429a      	cmp	r2, r3
 800667a:	d027      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800667c:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006684:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006692:	4a29      	ldr	r2, [pc, #164]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fd fabd 	bl	8003c20 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fd fab9 	bl	8003c20 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e036      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ee      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4917      	ldr	r1, [pc, #92]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e4:	4b14      	ldr	r3, [pc, #80]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4a13      	ldr	r2, [pc, #76]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	490b      	ldr	r1, [pc, #44]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	4313      	orrs	r3, r2
 800670c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	4904      	ldr	r1, [pc, #16]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000
 800673c:	40007000 	.word	0x40007000
 8006740:	42420440 	.word	0x42420440

08006744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e041      	b.n	80067da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fc fd8c 	bl	8003288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 fea8 	bl	80074d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d001      	beq.n	80067fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e032      	b.n	8006862 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a18      	ldr	r2, [pc, #96]	; (800686c <HAL_TIM_Base_Start+0x88>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_TIM_Base_Start+0x48>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d009      	beq.n	800682c <HAL_TIM_Base_Start+0x48>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <HAL_TIM_Base_Start+0x8c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIM_Base_Start+0x48>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <HAL_TIM_Base_Start+0x90>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d111      	bne.n	8006850 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b06      	cmp	r3, #6
 800683c:	d010      	beq.n	8006860 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	e007      	b.n	8006860 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800

08006878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d001      	beq.n	8006890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e03a      	b.n	8006906 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <HAL_TIM_Base_Start_IT+0x98>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x58>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x58>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a14      	ldr	r2, [pc, #80]	; (8006914 <HAL_TIM_Base_Start_IT+0x9c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x58>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a13      	ldr	r2, [pc, #76]	; (8006918 <HAL_TIM_Base_Start_IT+0xa0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d111      	bne.n	80068f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b06      	cmp	r3, #6
 80068e0:	d010      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	e007      	b.n	8006904 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800

0800691c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e041      	b.n	80069b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f839 	bl	80069ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f000 fdbc 	bl	80074d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <HAL_TIM_PWM_Start+0x24>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	bf14      	ite	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	2300      	moveq	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	e022      	b.n	8006a36 <HAL_TIM_PWM_Start+0x6a>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d109      	bne.n	8006a0a <HAL_TIM_PWM_Start+0x3e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e015      	b.n	8006a36 <HAL_TIM_PWM_Start+0x6a>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d109      	bne.n	8006a24 <HAL_TIM_PWM_Start+0x58>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	bf14      	ite	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2300      	moveq	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	e008      	b.n	8006a36 <HAL_TIM_PWM_Start+0x6a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e05e      	b.n	8006afc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0x82>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_PWM_Start+0xaa>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Start+0x92>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_PWM_Start+0xaa>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xa2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_PWM_Start+0xaa>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 f8b7 	bl	8007bf2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <HAL_TIM_PWM_Start+0x138>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d107      	bne.n	8006a9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <HAL_TIM_PWM_Start+0x138>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0xfa>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0xfa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <HAL_TIM_PWM_Start+0x13c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0xfa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a12      	ldr	r2, [pc, #72]	; (8006b0c <HAL_TIM_PWM_Start+0x140>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d010      	beq.n	8006afa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800

08006b10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e041      	b.n	8006ba6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f839 	bl	8006bae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f000 fcc2 	bl	80074d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <HAL_TIM_IC_Start_IT+0x1a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	e013      	b.n	8006c02 <HAL_TIM_IC_Start_IT+0x42>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d104      	bne.n	8006bea <HAL_TIM_IC_Start_IT+0x2a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e00b      	b.n	8006c02 <HAL_TIM_IC_Start_IT+0x42>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d104      	bne.n	8006bfa <HAL_TIM_IC_Start_IT+0x3a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	e003      	b.n	8006c02 <HAL_TIM_IC_Start_IT+0x42>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <HAL_TIM_IC_Start_IT+0x54>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e013      	b.n	8006c3c <HAL_TIM_IC_Start_IT+0x7c>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d104      	bne.n	8006c24 <HAL_TIM_IC_Start_IT+0x64>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e00b      	b.n	8006c3c <HAL_TIM_IC_Start_IT+0x7c>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d104      	bne.n	8006c34 <HAL_TIM_IC_Start_IT+0x74>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	e003      	b.n	8006c3c <HAL_TIM_IC_Start_IT+0x7c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d102      	bne.n	8006c4a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d001      	beq.n	8006c4e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0b3      	b.n	8006db6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_IC_Start_IT+0x9e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c5c:	e013      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0xc6>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_IC_Start_IT+0xae>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c6c:	e00b      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0xc6>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_IC_Start_IT+0xbe>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c7c:	e003      	b.n	8006c86 <HAL_TIM_IC_Start_IT+0xc6>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_IC_Start_IT+0xd6>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c94:	e013      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0xfe>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_IC_Start_IT+0xe6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca4:	e00b      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0xfe>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIM_IC_Start_IT+0xf6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb4:	e003      	b.n	8006cbe <HAL_TIM_IC_Start_IT+0xfe>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d841      	bhi.n	8006d48 <HAL_TIM_IC_Start_IT+0x188>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <HAL_TIM_IC_Start_IT+0x10c>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d49 	.word	0x08006d49
 8006cd4:	08006d49 	.word	0x08006d49
 8006cd8:	08006d49 	.word	0x08006d49
 8006cdc:	08006d13 	.word	0x08006d13
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006d49 	.word	0x08006d49
 8006ce8:	08006d49 	.word	0x08006d49
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d49 	.word	0x08006d49
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006d37 	.word	0x08006d37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0202 	orr.w	r2, r2, #2
 8006d0e:	60da      	str	r2, [r3, #12]
      break;
 8006d10:	e01b      	b.n	8006d4a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0204 	orr.w	r2, r2, #4
 8006d20:	60da      	str	r2, [r3, #12]
      break;
 8006d22:	e012      	b.n	8006d4a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0208 	orr.w	r2, r2, #8
 8006d32:	60da      	str	r2, [r3, #12]
      break;
 8006d34:	e009      	b.n	8006d4a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0210 	orr.w	r2, r2, #16
 8006d44:	60da      	str	r2, [r3, #12]
      break;
 8006d46:	e000      	b.n	8006d4a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006d48:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 ff4d 	bl	8007bf2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <HAL_TIM_IC_Start_IT+0x200>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <HAL_TIM_IC_Start_IT+0x204>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <HAL_TIM_IC_Start_IT+0x208>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d111      	bne.n	8006da4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d010      	beq.n	8006db4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0201 	orr.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	e007      	b.n	8006db4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800

08006dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d122      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d11b      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0202 	mvn.w	r2, #2
 8006df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fc f96c 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8006e14:	e005      	b.n	8006e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb43 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb49 	bl	80074b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d122      	bne.n	8006e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d11b      	bne.n	8006e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0204 	mvn.w	r2, #4
 8006e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fc f942 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb19 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb1f 	bl	80074b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d122      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d11b      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0208 	mvn.w	r2, #8
 8006ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fc f918 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 faef 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 faf5 	bl	80074b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d122      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0210 	mvn.w	r2, #16
 8006ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2208      	movs	r2, #8
 8006efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fc f8ee 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fac5 	bl	80074a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 facb 	bl	80074b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0201 	mvn.w	r2, #1
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 faa0 	bl	8007490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d10e      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d107      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fec7 	bl	8007d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d10e      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d107      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa8f 	bl	80074c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d107      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0220 	mvn.w	r2, #32
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fe92 	bl	8007cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e082      	b.n	80070fc <HAL_TIM_IC_ConfigChannel+0x120>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f000 fc4a 	bl	80078ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 020c 	bic.w	r2, r2, #12
 8007026:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6999      	ldr	r1, [r3, #24]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	619a      	str	r2, [r3, #24]
 800703a:	e05a      	b.n	80070f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d11c      	bne.n	800707c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f000 fcb3 	bl	80079bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007064:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6999      	ldr	r1, [r3, #24]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	021a      	lsls	r2, r3, #8
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	619a      	str	r2, [r3, #24]
 800707a:	e03a      	b.n	80070f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b08      	cmp	r3, #8
 8007080:	d11b      	bne.n	80070ba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6819      	ldr	r1, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f000 fcfe 	bl	8007a92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 020c 	bic.w	r2, r2, #12
 80070a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69d9      	ldr	r1, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	61da      	str	r2, [r3, #28]
 80070b8:	e01b      	b.n	80070f2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f000 fd1d 	bl	8007b08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69d9      	ldr	r1, [r3, #28]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	021a      	lsls	r2, r3, #8
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800711a:	2302      	movs	r3, #2
 800711c:	e0ac      	b.n	8007278 <HAL_TIM_PWM_ConfigChannel+0x174>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b0c      	cmp	r3, #12
 800712a:	f200 809f 	bhi.w	800726c <HAL_TIM_PWM_ConfigChannel+0x168>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007169 	.word	0x08007169
 8007138:	0800726d 	.word	0x0800726d
 800713c:	0800726d 	.word	0x0800726d
 8007140:	0800726d 	.word	0x0800726d
 8007144:	080071a9 	.word	0x080071a9
 8007148:	0800726d 	.word	0x0800726d
 800714c:	0800726d 	.word	0x0800726d
 8007150:	0800726d 	.word	0x0800726d
 8007154:	080071eb 	.word	0x080071eb
 8007158:	0800726d 	.word	0x0800726d
 800715c:	0800726d 	.word	0x0800726d
 8007160:	0800726d 	.word	0x0800726d
 8007164:	0800722b 	.word	0x0800722b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fa14 	bl	800759c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0208 	orr.w	r2, r2, #8
 8007182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0204 	bic.w	r2, r2, #4
 8007192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6999      	ldr	r1, [r3, #24]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	619a      	str	r2, [r3, #24]
      break;
 80071a6:	e062      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fa5a 	bl	8007668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6999      	ldr	r1, [r3, #24]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	021a      	lsls	r2, r3, #8
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	619a      	str	r2, [r3, #24]
      break;
 80071e8:	e041      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 faa3 	bl	800773c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0208 	orr.w	r2, r2, #8
 8007204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0204 	bic.w	r2, r2, #4
 8007214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69d9      	ldr	r1, [r3, #28]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	61da      	str	r2, [r3, #28]
      break;
 8007228:	e021      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 faed 	bl	8007810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69d9      	ldr	r1, [r3, #28]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	021a      	lsls	r2, r3, #8
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	61da      	str	r2, [r3, #28]
      break;
 800726a:	e000      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800726c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_TIM_ConfigClockSource+0x18>
 8007294:	2302      	movs	r3, #2
 8007296:	e0b3      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x180>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d0:	d03e      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0xd0>
 80072d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d6:	f200 8087 	bhi.w	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	f000 8085 	beq.w	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e6:	d87f      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 80072e8:	2b70      	cmp	r3, #112	; 0x70
 80072ea:	d01a      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0xa2>
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d87b      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 80072f0:	2b60      	cmp	r3, #96	; 0x60
 80072f2:	d050      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x116>
 80072f4:	2b60      	cmp	r3, #96	; 0x60
 80072f6:	d877      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 80072f8:	2b50      	cmp	r3, #80	; 0x50
 80072fa:	d03c      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0xf6>
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d873      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	d058      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x136>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d86f      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d064      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x156>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d86b      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d060      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x156>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d867      	bhi.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d05c      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x156>
 800731c:	2b10      	cmp	r3, #16
 800731e:	d05a      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007320:	e062      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f000 fc3f 	bl	8007bb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	609a      	str	r2, [r3, #8]
      break;
 800734e:	e04e      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	6899      	ldr	r1, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f000 fc28 	bl	8007bb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007372:	609a      	str	r2, [r3, #8]
      break;
 8007374:	e03b      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	461a      	mov	r2, r3
 8007384:	f000 faec 	bl	8007960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2150      	movs	r1, #80	; 0x50
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fbf6 	bl	8007b80 <TIM_ITRx_SetConfig>
      break;
 8007394:	e02b      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 fb46 	bl	8007a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2160      	movs	r1, #96	; 0x60
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fbe6 	bl	8007b80 <TIM_ITRx_SetConfig>
      break;
 80073b4:	e01b      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f000 facc 	bl	8007960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2140      	movs	r1, #64	; 0x40
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fbd6 	bl	8007b80 <TIM_ITRx_SetConfig>
      break;
 80073d4:	e00b      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f000 fbcd 	bl	8007b80 <TIM_ITRx_SetConfig>
        break;
 80073e6:	e002      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b0c      	cmp	r3, #12
 800741a:	d831      	bhi.n	8007480 <HAL_TIM_ReadCapturedValue+0x78>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <HAL_TIM_ReadCapturedValue+0x1c>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007459 	.word	0x08007459
 8007428:	08007481 	.word	0x08007481
 800742c:	08007481 	.word	0x08007481
 8007430:	08007481 	.word	0x08007481
 8007434:	08007463 	.word	0x08007463
 8007438:	08007481 	.word	0x08007481
 800743c:	08007481 	.word	0x08007481
 8007440:	08007481 	.word	0x08007481
 8007444:	0800746d 	.word	0x0800746d
 8007448:	08007481 	.word	0x08007481
 800744c:	08007481 	.word	0x08007481
 8007450:	08007481 	.word	0x08007481
 8007454:	08007477 	.word	0x08007477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	60fb      	str	r3, [r7, #12]

      break;
 8007460:	e00f      	b.n	8007482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	60fb      	str	r3, [r7, #12]

      break;
 800746a:	e00a      	b.n	8007482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	60fb      	str	r3, [r7, #12]

      break;
 8007474:	e005      	b.n	8007482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	60fb      	str	r3, [r7, #12]

      break;
 800747e:	e000      	b.n	8007482 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007480:	bf00      	nop
  }

  return tmpreg;
 8007482:	68fb      	ldr	r3, [r7, #12]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop

08007490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr

080074a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr

080074c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a29      	ldr	r2, [pc, #164]	; (8007590 <TIM_Base_SetConfig+0xb8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x30>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x30>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a26      	ldr	r2, [pc, #152]	; (8007594 <TIM_Base_SetConfig+0xbc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x30>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a25      	ldr	r2, [pc, #148]	; (8007598 <TIM_Base_SetConfig+0xc0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <TIM_Base_SetConfig+0xb8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00b      	beq.n	800753a <TIM_Base_SetConfig+0x62>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d007      	beq.n	800753a <TIM_Base_SetConfig+0x62>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a19      	ldr	r2, [pc, #100]	; (8007594 <TIM_Base_SetConfig+0xbc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_Base_SetConfig+0x62>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a18      	ldr	r2, [pc, #96]	; (8007598 <TIM_Base_SetConfig+0xc0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d108      	bne.n	800754c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a07      	ldr	r2, [pc, #28]	; (8007590 <TIM_Base_SetConfig+0xb8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d103      	bne.n	8007580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	615a      	str	r2, [r3, #20]
}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	40012c00 	.word	0x40012c00
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800

0800759c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	f023 0201 	bic.w	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0302 	bic.w	r3, r3, #2
 80075e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <TIM_OC1_SetConfig+0xc8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d10c      	bne.n	8007612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f023 0308 	bic.w	r3, r3, #8
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0304 	bic.w	r3, r3, #4
 8007610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a13      	ldr	r2, [pc, #76]	; (8007664 <TIM_OC1_SetConfig+0xc8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d111      	bne.n	800763e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4313      	orrs	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	621a      	str	r2, [r3, #32]
}
 8007658:	bf00      	nop
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00

08007668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f023 0210 	bic.w	r2, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800769e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0320 	bic.w	r3, r3, #32
 80076b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <TIM_OC2_SetConfig+0xd0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d10d      	bne.n	80076e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <TIM_OC2_SetConfig+0xd0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d113      	bne.n	8007714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr
 8007738:	40012c00 	.word	0x40012c00

0800773c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1d      	ldr	r2, [pc, #116]	; (800780c <TIM_OC3_SetConfig+0xd0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d10d      	bne.n	80077b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a14      	ldr	r2, [pc, #80]	; (800780c <TIM_OC3_SetConfig+0xd0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d113      	bne.n	80077e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40012c00 	.word	0x40012c00

08007810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800785a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a0f      	ldr	r2, [pc, #60]	; (80078a8 <TIM_OC4_SetConfig+0x98>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d109      	bne.n	8007884 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	019b      	lsls	r3, r3, #6
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	40012c00 	.word	0x40012c00

080078ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0201 	bic.w	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4a1f      	ldr	r2, [pc, #124]	; (8007954 <TIM_TI1_SetConfig+0xa8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <TIM_TI1_SetConfig+0x46>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d007      	beq.n	80078f2 <TIM_TI1_SetConfig+0x46>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4a1c      	ldr	r2, [pc, #112]	; (8007958 <TIM_TI1_SetConfig+0xac>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_TI1_SetConfig+0x46>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a1b      	ldr	r2, [pc, #108]	; (800795c <TIM_TI1_SetConfig+0xb0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d101      	bne.n	80078f6 <TIM_TI1_SetConfig+0x4a>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <TIM_TI1_SetConfig+0x4c>
 80078f6:	2300      	movs	r3, #0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e003      	b.n	8007916 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f043 0301 	orr.w	r3, r3, #1
 8007914:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800791c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	b2db      	uxtb	r3, r3
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f023 030a 	bic.w	r3, r3, #10
 8007930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 030a 	and.w	r3, r3, #10
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800

08007960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800798a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 030a 	bic.w	r3, r3, #10
 800799c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0210 	bic.w	r2, r3, #16
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	031b      	lsls	r3, r3, #12
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f023 0210 	bic.w	r2, r3, #16
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	031b      	lsls	r3, r3, #12
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	621a      	str	r2, [r3, #32]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b087      	sub	sp, #28
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ace:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	031b      	lsls	r3, r3, #12
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	031b      	lsls	r3, r3, #12
 8007b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f043 0307 	orr.w	r3, r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	609a      	str	r2, [r3, #8]
}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	021a      	lsls	r2, r3, #8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	609a      	str	r2, [r3, #8]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b087      	sub	sp, #28
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	2201      	movs	r2, #1
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	43db      	mvns	r3, r3
 8007c14:	401a      	ands	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f003 031f 	and.w	r3, r3, #31
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
	...

08007c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e046      	b.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a16      	ldr	r2, [pc, #88]	; (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca0:	d009      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800

08007cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr

08007d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e03f      	b.n	8007dae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fb fb42 	bl	80033cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2224      	movs	r2, #36	; 0x24
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc7d 	bl	8008660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b08a      	sub	sp, #40	; 0x28
 8007dba:	af02      	add	r7, sp, #8
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	603b      	str	r3, [r7, #0]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d17c      	bne.n	8007ed0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_UART_Transmit+0x2c>
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e075      	b.n	8007ed2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_UART_Transmit+0x3e>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e06e      	b.n	8007ed2 <HAL_UART_Transmit+0x11c>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2221      	movs	r2, #33	; 0x21
 8007e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e0a:	f7fb ff09 	bl	8003c20 <HAL_GetTick>
 8007e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	88fa      	ldrh	r2, [r7, #6]
 8007e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	88fa      	ldrh	r2, [r7, #6]
 8007e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	d108      	bne.n	8007e38 <HAL_UART_Transmit+0x82>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e003      	b.n	8007e40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e48:	e02a      	b.n	8007ea0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fa2f 	bl	80082b8 <UART_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e036      	b.n	8007ed2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e007      	b.n	8007e92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1cf      	bne.n	8007e4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2140      	movs	r1, #64	; 0x40
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f9ff 	bl	80082b8 <UART_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e006      	b.n	8007ed2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e000      	b.n	8007ed2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ed0:	2302      	movs	r3, #2
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d11d      	bne.n	8007f30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_UART_Receive_IT+0x26>
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e016      	b.n	8007f32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_UART_Receive_IT+0x38>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e00f      	b.n	8007f32 <HAL_UART_Receive_IT+0x58>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	461a      	mov	r2, r3
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fa10 	bl	800834c <UART_Start_Receive_IT>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_UART_IRQHandler+0x52>
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fac0 	bl	800850c <UART_Receive_IT>
      return;
 8007f8c:	e17b      	b.n	8008286 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 80b1 	beq.w	80080f8 <HAL_UART_IRQHandler+0x1bc>
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <HAL_UART_IRQHandler+0x70>
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80a6 	beq.w	80080f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <HAL_UART_IRQHandler+0x90>
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <HAL_UART_IRQHandler+0xb0>
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	f043 0202 	orr.w	r2, r3, #2
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <HAL_UART_IRQHandler+0xd0>
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	f043 0204 	orr.w	r2, r3, #4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <HAL_UART_IRQHandler+0xfa>
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <HAL_UART_IRQHandler+0xee>
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	f043 0208 	orr.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 811e 	beq.w	800827c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <HAL_UART_IRQHandler+0x11e>
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa59 	bl	800850c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <HAL_UART_IRQHandler+0x146>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d031      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f99b 	bl	80083be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d023      	beq.n	80080de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d013      	beq.n	80080d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	4a76      	ldr	r2, [pc, #472]	; (800828c <HAL_UART_IRQHandler+0x350>)
 80080b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fc f942 	bl	8004344 <HAL_DMA_Abort_IT>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d4:	e00e      	b.n	80080f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fa fcde 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	e00a      	b.n	80080f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7fa fcda 	bl	8002a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e4:	e006      	b.n	80080f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa fcd6 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080f2:	e0c3      	b.n	800827c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f4:	bf00      	nop
    return;
 80080f6:	e0c1      	b.n	800827c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	f040 80a1 	bne.w	8008244 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 809b 	beq.w	8008244 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8095 	beq.w	8008244 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d04e      	beq.n	80081dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008148:	8a3b      	ldrh	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8098 	beq.w	8008280 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008154:	8a3a      	ldrh	r2, [r7, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	f080 8092 	bcs.w	8008280 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	8a3a      	ldrh	r2, [r7, #16]
 8008160:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b20      	cmp	r3, #32
 800816a:	d02b      	beq.n	80081c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0210 	bic.w	r2, r2, #16
 80081b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc f885 	bl	80042ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f864 	bl	80082a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081da:	e051      	b.n	8008280 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d047      	beq.n	8008284 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80081f4:	8a7b      	ldrh	r3, [r7, #18]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d044      	beq.n	8008284 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008208:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0210 	bic.w	r2, r2, #16
 8008236:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008238:	8a7b      	ldrh	r3, [r7, #18]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f830 	bl	80082a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008242:	e01f      	b.n	8008284 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <HAL_UART_IRQHandler+0x324>
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f8f0 	bl	800843e <UART_Transmit_IT>
    return;
 800825e:	e012      	b.n	8008286 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <HAL_UART_IRQHandler+0x34a>
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f931 	bl	80084dc <UART_EndTransmit_IT>
    return;
 800827a:	e004      	b.n	8008286 <HAL_UART_IRQHandler+0x34a>
    return;
 800827c:	bf00      	nop
 800827e:	e002      	b.n	8008286 <HAL_UART_IRQHandler+0x34a>
      return;
 8008280:	bf00      	nop
 8008282:	e000      	b.n	8008286 <HAL_UART_IRQHandler+0x34a>
      return;
 8008284:	bf00      	nop
  }
}
 8008286:	3728      	adds	r7, #40	; 0x28
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	08008417 	.word	0x08008417

08008290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c8:	e02c      	b.n	8008324 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d0:	d028      	beq.n	8008324 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d8:	f7fb fca2 	bl	8003c20 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d21d      	bcs.n	8008324 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e00f      	b.n	8008344 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4013      	ands	r3, r2
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	429a      	cmp	r2, r3
 8008340:	d0c3      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	88fa      	ldrh	r2, [r7, #6]
 800836a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2222      	movs	r2, #34	; 0x22
 8008376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008390:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0201 	orr.w	r2, r2, #1
 80083a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0220 	orr.w	r2, r2, #32
 80083b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695a      	ldr	r2, [r3, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d107      	bne.n	80083fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0210 	bic.w	r2, r2, #16
 80083fc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr

08008416 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7fa fb31 	bl	8002a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b21      	cmp	r3, #33	; 0x21
 8008450:	d13e      	bne.n	80084d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845a:	d114      	bne.n	8008486 <UART_Transmit_IT+0x48>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d110      	bne.n	8008486 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008478:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	1c9a      	adds	r2, r3, #2
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	621a      	str	r2, [r3, #32]
 8008484:	e008      	b.n	8008498 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6211      	str	r1, [r2, #32]
 8008490:	781a      	ldrb	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4619      	mov	r1, r3
 80084a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10f      	bne.n	80084cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e000      	b.n	80084d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
  }
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff fec7 	bl	8008290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b22      	cmp	r3, #34	; 0x22
 800851e:	f040 8099 	bne.w	8008654 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852a:	d117      	bne.n	800855c <UART_Receive_IT+0x50>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d113      	bne.n	800855c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	b29a      	uxth	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	629a      	str	r2, [r3, #40]	; 0x28
 800855a:	e026      	b.n	80085aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856e:	d007      	beq.n	8008580 <UART_Receive_IT+0x74>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <UART_Receive_IT+0x82>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b2da      	uxtb	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e008      	b.n	80085a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	b2da      	uxtb	r2, r3
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4619      	mov	r1, r3
 80085b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d148      	bne.n	8008650 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0220 	bic.w	r2, r2, #32
 80085cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	695a      	ldr	r2, [r3, #20]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0201 	bic.w	r2, r2, #1
 80085ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d123      	bne.n	8008646 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0210 	bic.w	r2, r2, #16
 8008612:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b10      	cmp	r3, #16
 8008620:	d10a      	bne.n	8008638 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fe2f 	bl	80082a2 <HAL_UARTEx_RxEventCallback>
 8008644:	e002      	b.n	800864c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fa fa04 	bl	8002a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e002      	b.n	8008656 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008654:	2302      	movs	r3, #2
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	4313      	orrs	r3, r2
 800868e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800869a:	f023 030c 	bic.w	r3, r3, #12
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	430b      	orrs	r3, r1
 80086a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a2c      	ldr	r2, [pc, #176]	; (8008774 <UART_SetConfig+0x114>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d103      	bne.n	80086d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086c8:	f7fd ff54 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	e002      	b.n	80086d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086d0:	f7fd ff3c 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 80086d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009a      	lsls	r2, r3, #2
 80086e0:	441a      	add	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ec:	4a22      	ldr	r2, [pc, #136]	; (8008778 <UART_SetConfig+0x118>)
 80086ee:	fba2 2303 	umull	r2, r3, r2, r3
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	0119      	lsls	r1, r3, #4
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009a      	lsls	r2, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	fbb2 f2f3 	udiv	r2, r2, r3
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <UART_SetConfig+0x118>)
 800870e:	fba3 0302 	umull	r0, r3, r3, r2
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	2064      	movs	r0, #100	; 0x64
 8008716:	fb00 f303 	mul.w	r3, r0, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	3332      	adds	r3, #50	; 0x32
 8008720:	4a15      	ldr	r2, [pc, #84]	; (8008778 <UART_SetConfig+0x118>)
 8008722:	fba2 2303 	umull	r2, r3, r2, r3
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800872c:	4419      	add	r1, r3
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009a      	lsls	r2, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	fbb2 f2f3 	udiv	r2, r2, r3
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <UART_SetConfig+0x118>)
 8008746:	fba3 0302 	umull	r0, r3, r3, r2
 800874a:	095b      	lsrs	r3, r3, #5
 800874c:	2064      	movs	r0, #100	; 0x64
 800874e:	fb00 f303 	mul.w	r3, r0, r3
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	3332      	adds	r3, #50	; 0x32
 8008758:	4a07      	ldr	r2, [pc, #28]	; (8008778 <UART_SetConfig+0x118>)
 800875a:	fba2 2303 	umull	r2, r3, r2, r3
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	440a      	add	r2, r1
 800876a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	40013800 	.word	0x40013800
 8008778:	51eb851f 	.word	0x51eb851f

0800877c <atof>:
 800877c:	2100      	movs	r1, #0
 800877e:	f001 bae3 	b.w	8009d48 <strtod>

08008782 <atoi>:
 8008782:	220a      	movs	r2, #10
 8008784:	2100      	movs	r1, #0
 8008786:	f001 bb67 	b.w	8009e58 <strtol>
	...

0800878c <__errno>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <__errno+0x8>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200000f0 	.word	0x200000f0

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	2600      	movs	r6, #0
 800879c:	4d0c      	ldr	r5, [pc, #48]	; (80087d0 <__libc_init_array+0x38>)
 800879e:	4c0d      	ldr	r4, [pc, #52]	; (80087d4 <__libc_init_array+0x3c>)
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	f004 fa4e 	bl	800cc48 <_init>
 80087ac:	2600      	movs	r6, #0
 80087ae:	4d0a      	ldr	r5, [pc, #40]	; (80087d8 <__libc_init_array+0x40>)
 80087b0:	4c0a      	ldr	r4, [pc, #40]	; (80087dc <__libc_init_array+0x44>)
 80087b2:	1b64      	subs	r4, r4, r5
 80087b4:	10a4      	asrs	r4, r4, #2
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	0800d17c 	.word	0x0800d17c
 80087d4:	0800d17c 	.word	0x0800d17c
 80087d8:	0800d17c 	.word	0x0800d17c
 80087dc:	0800d180 	.word	0x0800d180

080087e0 <memcpy>:
 80087e0:	440a      	add	r2, r1
 80087e2:	4291      	cmp	r1, r2
 80087e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087e8:	d100      	bne.n	80087ec <memcpy+0xc>
 80087ea:	4770      	bx	lr
 80087ec:	b510      	push	{r4, lr}
 80087ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087f2:	4291      	cmp	r1, r2
 80087f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087f8:	d1f9      	bne.n	80087ee <memcpy+0xe>
 80087fa:	bd10      	pop	{r4, pc}

080087fc <memset>:
 80087fc:	4603      	mov	r3, r0
 80087fe:	4402      	add	r2, r0
 8008800:	4293      	cmp	r3, r2
 8008802:	d100      	bne.n	8008806 <memset+0xa>
 8008804:	4770      	bx	lr
 8008806:	f803 1b01 	strb.w	r1, [r3], #1
 800880a:	e7f9      	b.n	8008800 <memset+0x4>

0800880c <__cvt>:
 800880c:	2b00      	cmp	r3, #0
 800880e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008812:	461f      	mov	r7, r3
 8008814:	bfbb      	ittet	lt
 8008816:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800881a:	461f      	movlt	r7, r3
 800881c:	2300      	movge	r3, #0
 800881e:	232d      	movlt	r3, #45	; 0x2d
 8008820:	b088      	sub	sp, #32
 8008822:	4614      	mov	r4, r2
 8008824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008826:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008828:	7013      	strb	r3, [r2, #0]
 800882a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800882c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008830:	f023 0820 	bic.w	r8, r3, #32
 8008834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008838:	d005      	beq.n	8008846 <__cvt+0x3a>
 800883a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800883e:	d100      	bne.n	8008842 <__cvt+0x36>
 8008840:	3501      	adds	r5, #1
 8008842:	2302      	movs	r3, #2
 8008844:	e000      	b.n	8008848 <__cvt+0x3c>
 8008846:	2303      	movs	r3, #3
 8008848:	aa07      	add	r2, sp, #28
 800884a:	9204      	str	r2, [sp, #16]
 800884c:	aa06      	add	r2, sp, #24
 800884e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008852:	e9cd 3500 	strd	r3, r5, [sp]
 8008856:	4622      	mov	r2, r4
 8008858:	463b      	mov	r3, r7
 800885a:	f001 fb95 	bl	8009f88 <_dtoa_r>
 800885e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008862:	4606      	mov	r6, r0
 8008864:	d102      	bne.n	800886c <__cvt+0x60>
 8008866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008868:	07db      	lsls	r3, r3, #31
 800886a:	d522      	bpl.n	80088b2 <__cvt+0xa6>
 800886c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008870:	eb06 0905 	add.w	r9, r6, r5
 8008874:	d110      	bne.n	8008898 <__cvt+0x8c>
 8008876:	7833      	ldrb	r3, [r6, #0]
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d10a      	bne.n	8008892 <__cvt+0x86>
 800887c:	2200      	movs	r2, #0
 800887e:	2300      	movs	r3, #0
 8008880:	4620      	mov	r0, r4
 8008882:	4639      	mov	r1, r7
 8008884:	f7f8 f890 	bl	80009a8 <__aeabi_dcmpeq>
 8008888:	b918      	cbnz	r0, 8008892 <__cvt+0x86>
 800888a:	f1c5 0501 	rsb	r5, r5, #1
 800888e:	f8ca 5000 	str.w	r5, [sl]
 8008892:	f8da 3000 	ldr.w	r3, [sl]
 8008896:	4499      	add	r9, r3
 8008898:	2200      	movs	r2, #0
 800889a:	2300      	movs	r3, #0
 800889c:	4620      	mov	r0, r4
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f882 	bl	80009a8 <__aeabi_dcmpeq>
 80088a4:	b108      	cbz	r0, 80088aa <__cvt+0x9e>
 80088a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80088aa:	2230      	movs	r2, #48	; 0x30
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	454b      	cmp	r3, r9
 80088b0:	d307      	bcc.n	80088c2 <__cvt+0xb6>
 80088b2:	4630      	mov	r0, r6
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088b8:	1b9b      	subs	r3, r3, r6
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	b008      	add	sp, #32
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	9107      	str	r1, [sp, #28]
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e7f0      	b.n	80088ac <__cvt+0xa0>

080088ca <__exponent>:
 80088ca:	4603      	mov	r3, r0
 80088cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ce:	2900      	cmp	r1, #0
 80088d0:	f803 2b02 	strb.w	r2, [r3], #2
 80088d4:	bfb6      	itet	lt
 80088d6:	222d      	movlt	r2, #45	; 0x2d
 80088d8:	222b      	movge	r2, #43	; 0x2b
 80088da:	4249      	neglt	r1, r1
 80088dc:	2909      	cmp	r1, #9
 80088de:	7042      	strb	r2, [r0, #1]
 80088e0:	dd2b      	ble.n	800893a <__exponent+0x70>
 80088e2:	f10d 0407 	add.w	r4, sp, #7
 80088e6:	46a4      	mov	ip, r4
 80088e8:	270a      	movs	r7, #10
 80088ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80088ee:	460a      	mov	r2, r1
 80088f0:	46a6      	mov	lr, r4
 80088f2:	fb07 1516 	mls	r5, r7, r6, r1
 80088f6:	2a63      	cmp	r2, #99	; 0x63
 80088f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80088fc:	4631      	mov	r1, r6
 80088fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008906:	dcf0      	bgt.n	80088ea <__exponent+0x20>
 8008908:	3130      	adds	r1, #48	; 0x30
 800890a:	f1ae 0502 	sub.w	r5, lr, #2
 800890e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008912:	4629      	mov	r1, r5
 8008914:	1c44      	adds	r4, r0, #1
 8008916:	4561      	cmp	r1, ip
 8008918:	d30a      	bcc.n	8008930 <__exponent+0x66>
 800891a:	f10d 0209 	add.w	r2, sp, #9
 800891e:	eba2 020e 	sub.w	r2, r2, lr
 8008922:	4565      	cmp	r5, ip
 8008924:	bf88      	it	hi
 8008926:	2200      	movhi	r2, #0
 8008928:	4413      	add	r3, r2
 800892a:	1a18      	subs	r0, r3, r0
 800892c:	b003      	add	sp, #12
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008934:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008938:	e7ed      	b.n	8008916 <__exponent+0x4c>
 800893a:	2330      	movs	r3, #48	; 0x30
 800893c:	3130      	adds	r1, #48	; 0x30
 800893e:	7083      	strb	r3, [r0, #2]
 8008940:	70c1      	strb	r1, [r0, #3]
 8008942:	1d03      	adds	r3, r0, #4
 8008944:	e7f1      	b.n	800892a <__exponent+0x60>
	...

08008948 <_printf_float>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	b091      	sub	sp, #68	; 0x44
 800894e:	460c      	mov	r4, r1
 8008950:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008954:	4616      	mov	r6, r2
 8008956:	461f      	mov	r7, r3
 8008958:	4605      	mov	r5, r0
 800895a:	f002 fc69 	bl	800b230 <_localeconv_r>
 800895e:	6803      	ldr	r3, [r0, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	f7f7 fbf4 	bl	8000150 <strlen>
 8008968:	2300      	movs	r3, #0
 800896a:	930e      	str	r3, [sp, #56]	; 0x38
 800896c:	f8d8 3000 	ldr.w	r3, [r8]
 8008970:	900a      	str	r0, [sp, #40]	; 0x28
 8008972:	3307      	adds	r3, #7
 8008974:	f023 0307 	bic.w	r3, r3, #7
 8008978:	f103 0208 	add.w	r2, r3, #8
 800897c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008980:	f8d4 b000 	ldr.w	fp, [r4]
 8008984:	f8c8 2000 	str.w	r2, [r8]
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008990:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008994:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008998:	930b      	str	r3, [sp, #44]	; 0x2c
 800899a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800899e:	4640      	mov	r0, r8
 80089a0:	4b9c      	ldr	r3, [pc, #624]	; (8008c14 <_printf_float+0x2cc>)
 80089a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089a4:	f7f8 f832 	bl	8000a0c <__aeabi_dcmpun>
 80089a8:	bb70      	cbnz	r0, 8008a08 <_printf_float+0xc0>
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ae:	4640      	mov	r0, r8
 80089b0:	4b98      	ldr	r3, [pc, #608]	; (8008c14 <_printf_float+0x2cc>)
 80089b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089b4:	f7f8 f80c 	bl	80009d0 <__aeabi_dcmple>
 80089b8:	bb30      	cbnz	r0, 8008a08 <_printf_float+0xc0>
 80089ba:	2200      	movs	r2, #0
 80089bc:	2300      	movs	r3, #0
 80089be:	4640      	mov	r0, r8
 80089c0:	4651      	mov	r1, sl
 80089c2:	f7f7 fffb 	bl	80009bc <__aeabi_dcmplt>
 80089c6:	b110      	cbz	r0, 80089ce <_printf_float+0x86>
 80089c8:	232d      	movs	r3, #45	; 0x2d
 80089ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ce:	4b92      	ldr	r3, [pc, #584]	; (8008c18 <_printf_float+0x2d0>)
 80089d0:	4892      	ldr	r0, [pc, #584]	; (8008c1c <_printf_float+0x2d4>)
 80089d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80089d6:	bf94      	ite	ls
 80089d8:	4698      	movls	r8, r3
 80089da:	4680      	movhi	r8, r0
 80089dc:	2303      	movs	r3, #3
 80089de:	f04f 0a00 	mov.w	sl, #0
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	f02b 0304 	bic.w	r3, fp, #4
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	4633      	mov	r3, r6
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	9700      	str	r7, [sp, #0]
 80089f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80089f4:	f000 f9d4 	bl	8008da0 <_printf_common>
 80089f8:	3001      	adds	r0, #1
 80089fa:	f040 8090 	bne.w	8008b1e <_printf_float+0x1d6>
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a02:	b011      	add	sp, #68	; 0x44
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4653      	mov	r3, sl
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4651      	mov	r1, sl
 8008a10:	f7f7 fffc 	bl	8000a0c <__aeabi_dcmpun>
 8008a14:	b148      	cbz	r0, 8008a2a <_printf_float+0xe2>
 8008a16:	f1ba 0f00 	cmp.w	sl, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	232d      	movlt	r3, #45	; 0x2d
 8008a1e:	4880      	ldr	r0, [pc, #512]	; (8008c20 <_printf_float+0x2d8>)
 8008a20:	bfb8      	it	lt
 8008a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a26:	4b7f      	ldr	r3, [pc, #508]	; (8008c24 <_printf_float+0x2dc>)
 8008a28:	e7d3      	b.n	80089d2 <_printf_float+0x8a>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	d142      	bne.n	8008aba <_printf_float+0x172>
 8008a34:	2306      	movs	r3, #6
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9206      	str	r2, [sp, #24]
 8008a3c:	aa0e      	add	r2, sp, #56	; 0x38
 8008a3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008a42:	aa0d      	add	r2, sp, #52	; 0x34
 8008a44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008a48:	9203      	str	r2, [sp, #12]
 8008a4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008a4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	4642      	mov	r2, r8
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	4653      	mov	r3, sl
 8008a5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a60:	f7ff fed4 	bl	800880c <__cvt>
 8008a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a66:	4680      	mov	r8, r0
 8008a68:	2947      	cmp	r1, #71	; 0x47
 8008a6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a6c:	d108      	bne.n	8008a80 <_printf_float+0x138>
 8008a6e:	1cc8      	adds	r0, r1, #3
 8008a70:	db02      	blt.n	8008a78 <_printf_float+0x130>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	4299      	cmp	r1, r3
 8008a76:	dd40      	ble.n	8008afa <_printf_float+0x1b2>
 8008a78:	f1a9 0902 	sub.w	r9, r9, #2
 8008a7c:	fa5f f989 	uxtb.w	r9, r9
 8008a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a84:	d81f      	bhi.n	8008ac6 <_printf_float+0x17e>
 8008a86:	464a      	mov	r2, r9
 8008a88:	3901      	subs	r1, #1
 8008a8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a8e:	910d      	str	r1, [sp, #52]	; 0x34
 8008a90:	f7ff ff1b 	bl	80088ca <__exponent>
 8008a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a96:	4682      	mov	sl, r0
 8008a98:	1813      	adds	r3, r2, r0
 8008a9a:	2a01      	cmp	r2, #1
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	dc02      	bgt.n	8008aa6 <_printf_float+0x15e>
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	07d2      	lsls	r2, r2, #31
 8008aa4:	d501      	bpl.n	8008aaa <_printf_float+0x162>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d09b      	beq.n	80089ea <_printf_float+0xa2>
 8008ab2:	232d      	movs	r3, #45	; 0x2d
 8008ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab8:	e797      	b.n	80089ea <_printf_float+0xa2>
 8008aba:	2947      	cmp	r1, #71	; 0x47
 8008abc:	d1bc      	bne.n	8008a38 <_printf_float+0xf0>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1ba      	bne.n	8008a38 <_printf_float+0xf0>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7b7      	b.n	8008a36 <_printf_float+0xee>
 8008ac6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008aca:	d118      	bne.n	8008afe <_printf_float+0x1b6>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	dd0b      	ble.n	8008aea <_printf_float+0x1a2>
 8008ad2:	6121      	str	r1, [r4, #16]
 8008ad4:	b913      	cbnz	r3, 8008adc <_printf_float+0x194>
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	07d0      	lsls	r0, r2, #31
 8008ada:	d502      	bpl.n	8008ae2 <_printf_float+0x19a>
 8008adc:	3301      	adds	r3, #1
 8008ade:	440b      	add	r3, r1
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	f04f 0a00 	mov.w	sl, #0
 8008ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ae8:	e7df      	b.n	8008aaa <_printf_float+0x162>
 8008aea:	b913      	cbnz	r3, 8008af2 <_printf_float+0x1aa>
 8008aec:	6822      	ldr	r2, [r4, #0]
 8008aee:	07d2      	lsls	r2, r2, #31
 8008af0:	d501      	bpl.n	8008af6 <_printf_float+0x1ae>
 8008af2:	3302      	adds	r3, #2
 8008af4:	e7f4      	b.n	8008ae0 <_printf_float+0x198>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7f2      	b.n	8008ae0 <_printf_float+0x198>
 8008afa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b00:	4299      	cmp	r1, r3
 8008b02:	db05      	blt.n	8008b10 <_printf_float+0x1c8>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	6121      	str	r1, [r4, #16]
 8008b08:	07d8      	lsls	r0, r3, #31
 8008b0a:	d5ea      	bpl.n	8008ae2 <_printf_float+0x19a>
 8008b0c:	1c4b      	adds	r3, r1, #1
 8008b0e:	e7e7      	b.n	8008ae0 <_printf_float+0x198>
 8008b10:	2900      	cmp	r1, #0
 8008b12:	bfcc      	ite	gt
 8008b14:	2201      	movgt	r2, #1
 8008b16:	f1c1 0202 	rsble	r2, r1, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	e7e0      	b.n	8008ae0 <_printf_float+0x198>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	055a      	lsls	r2, r3, #21
 8008b22:	d407      	bmi.n	8008b34 <_printf_float+0x1ec>
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	4642      	mov	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d12b      	bne.n	8008b8a <_printf_float+0x242>
 8008b32:	e764      	b.n	80089fe <_printf_float+0xb6>
 8008b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b38:	f240 80dd 	bls.w	8008cf6 <_printf_float+0x3ae>
 8008b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b40:	2200      	movs	r2, #0
 8008b42:	2300      	movs	r3, #0
 8008b44:	f7f7 ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d033      	beq.n	8008bb4 <_printf_float+0x26c>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	4a35      	ldr	r2, [pc, #212]	; (8008c28 <_printf_float+0x2e0>)
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f af51 	beq.w	80089fe <_printf_float+0xb6>
 8008b5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b60:	429a      	cmp	r2, r3
 8008b62:	db02      	blt.n	8008b6a <_printf_float+0x222>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07d8      	lsls	r0, r3, #31
 8008b68:	d50f      	bpl.n	8008b8a <_printf_float+0x242>
 8008b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f af42 	beq.w	80089fe <_printf_float+0xb6>
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f104 091a 	add.w	r9, r4, #26
 8008b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b84:	3b01      	subs	r3, #1
 8008b86:	4543      	cmp	r3, r8
 8008b88:	dc09      	bgt.n	8008b9e <_printf_float+0x256>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	079b      	lsls	r3, r3, #30
 8008b8e:	f100 8102 	bmi.w	8008d96 <_printf_float+0x44e>
 8008b92:	68e0      	ldr	r0, [r4, #12]
 8008b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b96:	4298      	cmp	r0, r3
 8008b98:	bfb8      	it	lt
 8008b9a:	4618      	movlt	r0, r3
 8008b9c:	e731      	b.n	8008a02 <_printf_float+0xba>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	464a      	mov	r2, r9
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f af28 	beq.w	80089fe <_printf_float+0xb6>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	e7e6      	b.n	8008b82 <_printf_float+0x23a>
 8008bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc38      	bgt.n	8008c2c <_printf_float+0x2e4>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <_printf_float+0x2e0>)
 8008bc2:	47b8      	blx	r7
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f43f af1a 	beq.w	80089fe <_printf_float+0xb6>
 8008bca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d102      	bne.n	8008bd8 <_printf_float+0x290>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07d9      	lsls	r1, r3, #31
 8008bd6:	d5d8      	bpl.n	8008b8a <_printf_float+0x242>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af0b 	beq.w	80089fe <_printf_float+0xb6>
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	f104 0a1a 	add.w	sl, r4, #26
 8008bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	454b      	cmp	r3, r9
 8008bf6:	dc01      	bgt.n	8008bfc <_printf_float+0x2b4>
 8008bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bfa:	e794      	b.n	8008b26 <_printf_float+0x1de>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f aef9 	beq.w	80089fe <_printf_float+0xb6>
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e7ee      	b.n	8008bf0 <_printf_float+0x2a8>
 8008c12:	bf00      	nop
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800cce0 	.word	0x0800cce0
 8008c1c:	0800cce4 	.word	0x0800cce4
 8008c20:	0800ccec 	.word	0x0800ccec
 8008c24:	0800cce8 	.word	0x0800cce8
 8008c28:	0800ccf0 	.word	0x0800ccf0
 8008c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bfa8      	it	ge
 8008c34:	461a      	movge	r2, r3
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	4691      	mov	r9, r2
 8008c3a:	dc37      	bgt.n	8008cac <_printf_float+0x364>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c44:	f104 021a 	add.w	r2, r4, #26
 8008c48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c4c:	ebaa 0309 	sub.w	r3, sl, r9
 8008c50:	455b      	cmp	r3, fp
 8008c52:	dc33      	bgt.n	8008cbc <_printf_float+0x374>
 8008c54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	db3b      	blt.n	8008cd4 <_printf_float+0x38c>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d438      	bmi.n	8008cd4 <_printf_float+0x38c>
 8008c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c66:	eba3 020a 	sub.w	r2, r3, sl
 8008c6a:	eba3 0901 	sub.w	r9, r3, r1
 8008c6e:	4591      	cmp	r9, r2
 8008c70:	bfa8      	it	ge
 8008c72:	4691      	movge	r9, r2
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	dc34      	bgt.n	8008ce4 <_printf_float+0x39c>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 0a1a 	add.w	sl, r4, #26
 8008c86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	4543      	cmp	r3, r8
 8008c92:	f77f af7a 	ble.w	8008b8a <_printf_float+0x242>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f aeac 	beq.w	80089fe <_printf_float+0xb6>
 8008ca6:	f108 0801 	add.w	r8, r8, #1
 8008caa:	e7ec      	b.n	8008c86 <_printf_float+0x33e>
 8008cac:	4613      	mov	r3, r2
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d1c0      	bne.n	8008c3c <_printf_float+0x2f4>
 8008cba:	e6a0      	b.n	80089fe <_printf_float+0xb6>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f ae99 	beq.w	80089fe <_printf_float+0xb6>
 8008ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	e7b9      	b.n	8008c48 <_printf_float+0x300>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d1bf      	bne.n	8008c62 <_printf_float+0x31a>
 8008ce2:	e68c      	b.n	80089fe <_printf_float+0xb6>
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	eb08 020a 	add.w	r2, r8, sl
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d1c2      	bne.n	8008c7a <_printf_float+0x332>
 8008cf4:	e683      	b.n	80089fe <_printf_float+0xb6>
 8008cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf8:	2a01      	cmp	r2, #1
 8008cfa:	dc01      	bgt.n	8008d00 <_printf_float+0x3b8>
 8008cfc:	07db      	lsls	r3, r3, #31
 8008cfe:	d537      	bpl.n	8008d70 <_printf_float+0x428>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4642      	mov	r2, r8
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	f43f ae77 	beq.w	80089fe <_printf_float+0xb6>
 8008d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f43f ae6f 	beq.w	80089fe <_printf_float+0xb6>
 8008d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d24:	2200      	movs	r2, #0
 8008d26:	2300      	movs	r3, #0
 8008d28:	f7f7 fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8008d2c:	b9d8      	cbnz	r0, 8008d66 <_printf_float+0x41e>
 8008d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d30:	f108 0201 	add.w	r2, r8, #1
 8008d34:	3b01      	subs	r3, #1
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d10e      	bne.n	8008d5e <_printf_float+0x416>
 8008d40:	e65d      	b.n	80089fe <_printf_float+0xb6>
 8008d42:	2301      	movs	r3, #1
 8008d44:	464a      	mov	r2, r9
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f ae56 	beq.w	80089fe <_printf_float+0xb6>
 8008d52:	f108 0801 	add.w	r8, r8, #1
 8008d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	4543      	cmp	r3, r8
 8008d5c:	dcf1      	bgt.n	8008d42 <_printf_float+0x3fa>
 8008d5e:	4653      	mov	r3, sl
 8008d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d64:	e6e0      	b.n	8008b28 <_printf_float+0x1e0>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 091a 	add.w	r9, r4, #26
 8008d6e:	e7f2      	b.n	8008d56 <_printf_float+0x40e>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4642      	mov	r2, r8
 8008d74:	e7df      	b.n	8008d36 <_printf_float+0x3ee>
 8008d76:	2301      	movs	r3, #1
 8008d78:	464a      	mov	r2, r9
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	f43f ae3c 	beq.w	80089fe <_printf_float+0xb6>
 8008d86:	f108 0801 	add.w	r8, r8, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	4543      	cmp	r3, r8
 8008d92:	dcf0      	bgt.n	8008d76 <_printf_float+0x42e>
 8008d94:	e6fd      	b.n	8008b92 <_printf_float+0x24a>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f104 0919 	add.w	r9, r4, #25
 8008d9e:	e7f4      	b.n	8008d8a <_printf_float+0x442>

08008da0 <_printf_common>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	4616      	mov	r6, r2
 8008da6:	4699      	mov	r9, r3
 8008da8:	688a      	ldr	r2, [r1, #8]
 8008daa:	690b      	ldr	r3, [r1, #16]
 8008dac:	4607      	mov	r7, r0
 8008dae:	4293      	cmp	r3, r2
 8008db0:	bfb8      	it	lt
 8008db2:	4613      	movlt	r3, r2
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc0:	b10a      	cbz	r2, 8008dc6 <_printf_common+0x26>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6033      	str	r3, [r6, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	6833      	ldrmi	r3, [r6, #0]
 8008dce:	3302      	addmi	r3, #2
 8008dd0:	6033      	strmi	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	f015 0506 	ands.w	r5, r5, #6
 8008dd8:	d106      	bne.n	8008de8 <_printf_common+0x48>
 8008dda:	f104 0a19 	add.w	sl, r4, #25
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	6832      	ldr	r2, [r6, #0]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc28      	bgt.n	8008e3a <_printf_common+0x9a>
 8008de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dec:	1e13      	subs	r3, r2, #0
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	bf18      	it	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	0692      	lsls	r2, r2, #26
 8008df6:	d42d      	bmi.n	8008e54 <_printf_common+0xb4>
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d020      	beq.n	8008e48 <_printf_common+0xa8>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	68e5      	ldr	r5, [r4, #12]
 8008e0a:	f003 0306 	and.w	r3, r3, #6
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	bf18      	it	ne
 8008e12:	2500      	movne	r5, #0
 8008e14:	6832      	ldr	r2, [r6, #0]
 8008e16:	f04f 0600 	mov.w	r6, #0
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	bf08      	it	eq
 8008e1e:	1aad      	subeq	r5, r5, r2
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	bf08      	it	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bfc4      	itt	gt
 8008e2c:	1a9b      	subgt	r3, r3, r2
 8008e2e:	18ed      	addgt	r5, r5, r3
 8008e30:	341a      	adds	r4, #26
 8008e32:	42b5      	cmp	r5, r6
 8008e34:	d11a      	bne.n	8008e6c <_printf_common+0xcc>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e008      	b.n	8008e4c <_printf_common+0xac>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4638      	mov	r0, r7
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d103      	bne.n	8008e50 <_printf_common+0xb0>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	3501      	adds	r5, #1
 8008e52:	e7c4      	b.n	8008dde <_printf_common+0x3e>
 8008e54:	2030      	movs	r0, #48	; 0x30
 8008e56:	18e1      	adds	r1, r4, r3
 8008e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e62:	4422      	add	r2, r4
 8008e64:	3302      	adds	r3, #2
 8008e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e6a:	e7c5      	b.n	8008df8 <_printf_common+0x58>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4649      	mov	r1, r9
 8008e72:	4638      	mov	r0, r7
 8008e74:	47c0      	blx	r8
 8008e76:	3001      	adds	r0, #1
 8008e78:	d0e6      	beq.n	8008e48 <_printf_common+0xa8>
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7d9      	b.n	8008e32 <_printf_common+0x92>
	...

08008e80 <_printf_i>:
 8008e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	7e0f      	ldrb	r7, [r1, #24]
 8008e86:	4691      	mov	r9, r2
 8008e88:	2f78      	cmp	r7, #120	; 0x78
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	469a      	mov	sl, r3
 8008e90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e96:	d807      	bhi.n	8008ea8 <_printf_i+0x28>
 8008e98:	2f62      	cmp	r7, #98	; 0x62
 8008e9a:	d80a      	bhi.n	8008eb2 <_printf_i+0x32>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f000 80d9 	beq.w	8009054 <_printf_i+0x1d4>
 8008ea2:	2f58      	cmp	r7, #88	; 0x58
 8008ea4:	f000 80a4 	beq.w	8008ff0 <_printf_i+0x170>
 8008ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb0:	e03a      	b.n	8008f28 <_printf_i+0xa8>
 8008eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eb6:	2b15      	cmp	r3, #21
 8008eb8:	d8f6      	bhi.n	8008ea8 <_printf_i+0x28>
 8008eba:	a101      	add	r1, pc, #4	; (adr r1, 8008ec0 <_printf_i+0x40>)
 8008ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec0:	08008f19 	.word	0x08008f19
 8008ec4:	08008f2d 	.word	0x08008f2d
 8008ec8:	08008ea9 	.word	0x08008ea9
 8008ecc:	08008ea9 	.word	0x08008ea9
 8008ed0:	08008ea9 	.word	0x08008ea9
 8008ed4:	08008ea9 	.word	0x08008ea9
 8008ed8:	08008f2d 	.word	0x08008f2d
 8008edc:	08008ea9 	.word	0x08008ea9
 8008ee0:	08008ea9 	.word	0x08008ea9
 8008ee4:	08008ea9 	.word	0x08008ea9
 8008ee8:	08008ea9 	.word	0x08008ea9
 8008eec:	0800903b 	.word	0x0800903b
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	0800901d 	.word	0x0800901d
 8008ef8:	08008ea9 	.word	0x08008ea9
 8008efc:	08008ea9 	.word	0x08008ea9
 8008f00:	0800905d 	.word	0x0800905d
 8008f04:	08008ea9 	.word	0x08008ea9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ea9 	.word	0x08008ea9
 8008f10:	08008ea9 	.word	0x08008ea9
 8008f14:	08009025 	.word	0x08009025
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0a4      	b.n	8009076 <_printf_i+0x1f6>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	0606      	lsls	r6, r0, #24
 8008f32:	f101 0304 	add.w	r3, r1, #4
 8008f36:	d50a      	bpl.n	8008f4e <_printf_i+0xce>
 8008f38:	680e      	ldr	r6, [r1, #0]
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	2e00      	cmp	r6, #0
 8008f3e:	da03      	bge.n	8008f48 <_printf_i+0xc8>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	4276      	negs	r6, r6
 8008f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f48:	230a      	movs	r3, #10
 8008f4a:	485e      	ldr	r0, [pc, #376]	; (80090c4 <_printf_i+0x244>)
 8008f4c:	e019      	b.n	8008f82 <_printf_i+0x102>
 8008f4e:	680e      	ldr	r6, [r1, #0]
 8008f50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	bf18      	it	ne
 8008f58:	b236      	sxthne	r6, r6
 8008f5a:	e7ef      	b.n	8008f3c <_printf_i+0xbc>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6029      	str	r1, [r5, #0]
 8008f64:	0601      	lsls	r1, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xec>
 8008f68:	681e      	ldr	r6, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xf2>
 8008f6c:	0646      	lsls	r6, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe8>
 8008f70:	881e      	ldrh	r6, [r3, #0]
 8008f72:	2f6f      	cmp	r7, #111	; 0x6f
 8008f74:	bf0c      	ite	eq
 8008f76:	2308      	moveq	r3, #8
 8008f78:	230a      	movne	r3, #10
 8008f7a:	4852      	ldr	r0, [pc, #328]	; (80090c4 <_printf_i+0x244>)
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6865      	ldr	r5, [r4, #4]
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	bfa8      	it	ge
 8008f88:	6821      	ldrge	r1, [r4, #0]
 8008f8a:	60a5      	str	r5, [r4, #8]
 8008f8c:	bfa4      	itt	ge
 8008f8e:	f021 0104 	bicge.w	r1, r1, #4
 8008f92:	6021      	strge	r1, [r4, #0]
 8008f94:	b90e      	cbnz	r6, 8008f9a <_printf_i+0x11a>
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	d04d      	beq.n	8009036 <_printf_i+0x1b6>
 8008f9a:	4615      	mov	r5, r2
 8008f9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fa0:	fb03 6711 	mls	r7, r3, r1, r6
 8008fa4:	5dc7      	ldrb	r7, [r0, r7]
 8008fa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008faa:	4637      	mov	r7, r6
 8008fac:	42bb      	cmp	r3, r7
 8008fae:	460e      	mov	r6, r1
 8008fb0:	d9f4      	bls.n	8008f9c <_printf_i+0x11c>
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d10b      	bne.n	8008fce <_printf_i+0x14e>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	07de      	lsls	r6, r3, #31
 8008fba:	d508      	bpl.n	8008fce <_printf_i+0x14e>
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	bfde      	ittt	le
 8008fc4:	2330      	movle	r3, #48	; 0x30
 8008fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fce:	1b52      	subs	r2, r2, r5
 8008fd0:	6122      	str	r2, [r4, #16]
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f8cd a000 	str.w	sl, [sp]
 8008fdc:	aa03      	add	r2, sp, #12
 8008fde:	f7ff fedf 	bl	8008da0 <_printf_common>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d14c      	bne.n	8009080 <_printf_i+0x200>
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fea:	b004      	add	sp, #16
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	4834      	ldr	r0, [pc, #208]	; (80090c4 <_printf_i+0x244>)
 8008ff2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ff6:	6829      	ldr	r1, [r5, #0]
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ffe:	6029      	str	r1, [r5, #0]
 8009000:	061d      	lsls	r5, r3, #24
 8009002:	d514      	bpl.n	800902e <_printf_i+0x1ae>
 8009004:	07df      	lsls	r7, r3, #31
 8009006:	bf44      	itt	mi
 8009008:	f043 0320 	orrmi.w	r3, r3, #32
 800900c:	6023      	strmi	r3, [r4, #0]
 800900e:	b91e      	cbnz	r6, 8009018 <_printf_i+0x198>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	f023 0320 	bic.w	r3, r3, #32
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	2310      	movs	r3, #16
 800901a:	e7af      	b.n	8008f7c <_printf_i+0xfc>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	f043 0320 	orr.w	r3, r3, #32
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	2378      	movs	r3, #120	; 0x78
 8009026:	4828      	ldr	r0, [pc, #160]	; (80090c8 <_printf_i+0x248>)
 8009028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800902c:	e7e3      	b.n	8008ff6 <_printf_i+0x176>
 800902e:	0659      	lsls	r1, r3, #25
 8009030:	bf48      	it	mi
 8009032:	b2b6      	uxthmi	r6, r6
 8009034:	e7e6      	b.n	8009004 <_printf_i+0x184>
 8009036:	4615      	mov	r5, r2
 8009038:	e7bb      	b.n	8008fb2 <_printf_i+0x132>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	6826      	ldr	r6, [r4, #0]
 800903e:	1d18      	adds	r0, r3, #4
 8009040:	6961      	ldr	r1, [r4, #20]
 8009042:	6028      	str	r0, [r5, #0]
 8009044:	0635      	lsls	r5, r6, #24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	d501      	bpl.n	800904e <_printf_i+0x1ce>
 800904a:	6019      	str	r1, [r3, #0]
 800904c:	e002      	b.n	8009054 <_printf_i+0x1d4>
 800904e:	0670      	lsls	r0, r6, #25
 8009050:	d5fb      	bpl.n	800904a <_printf_i+0x1ca>
 8009052:	8019      	strh	r1, [r3, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	4615      	mov	r5, r2
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	e7ba      	b.n	8008fd2 <_printf_i+0x152>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	2100      	movs	r1, #0
 8009060:	1d1a      	adds	r2, r3, #4
 8009062:	602a      	str	r2, [r5, #0]
 8009064:	681d      	ldr	r5, [r3, #0]
 8009066:	6862      	ldr	r2, [r4, #4]
 8009068:	4628      	mov	r0, r5
 800906a:	f002 f8ff 	bl	800b26c <memchr>
 800906e:	b108      	cbz	r0, 8009074 <_printf_i+0x1f4>
 8009070:	1b40      	subs	r0, r0, r5
 8009072:	6060      	str	r0, [r4, #4]
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	2300      	movs	r3, #0
 800907a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800907e:	e7a8      	b.n	8008fd2 <_printf_i+0x152>
 8009080:	462a      	mov	r2, r5
 8009082:	4649      	mov	r1, r9
 8009084:	4640      	mov	r0, r8
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	47d0      	blx	sl
 800908a:	3001      	adds	r0, #1
 800908c:	d0ab      	beq.n	8008fe6 <_printf_i+0x166>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	079b      	lsls	r3, r3, #30
 8009092:	d413      	bmi.n	80090bc <_printf_i+0x23c>
 8009094:	68e0      	ldr	r0, [r4, #12]
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	4298      	cmp	r0, r3
 800909a:	bfb8      	it	lt
 800909c:	4618      	movlt	r0, r3
 800909e:	e7a4      	b.n	8008fea <_printf_i+0x16a>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4632      	mov	r2, r6
 80090a4:	4649      	mov	r1, r9
 80090a6:	4640      	mov	r0, r8
 80090a8:	47d0      	blx	sl
 80090aa:	3001      	adds	r0, #1
 80090ac:	d09b      	beq.n	8008fe6 <_printf_i+0x166>
 80090ae:	3501      	adds	r5, #1
 80090b0:	68e3      	ldr	r3, [r4, #12]
 80090b2:	9903      	ldr	r1, [sp, #12]
 80090b4:	1a5b      	subs	r3, r3, r1
 80090b6:	42ab      	cmp	r3, r5
 80090b8:	dcf2      	bgt.n	80090a0 <_printf_i+0x220>
 80090ba:	e7eb      	b.n	8009094 <_printf_i+0x214>
 80090bc:	2500      	movs	r5, #0
 80090be:	f104 0619 	add.w	r6, r4, #25
 80090c2:	e7f5      	b.n	80090b0 <_printf_i+0x230>
 80090c4:	0800ccf2 	.word	0x0800ccf2
 80090c8:	0800cd03 	.word	0x0800cd03

080090cc <siprintf>:
 80090cc:	b40e      	push	{r1, r2, r3}
 80090ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090d2:	b500      	push	{lr}
 80090d4:	b09c      	sub	sp, #112	; 0x70
 80090d6:	ab1d      	add	r3, sp, #116	; 0x74
 80090d8:	9002      	str	r0, [sp, #8]
 80090da:	9006      	str	r0, [sp, #24]
 80090dc:	9107      	str	r1, [sp, #28]
 80090de:	9104      	str	r1, [sp, #16]
 80090e0:	4808      	ldr	r0, [pc, #32]	; (8009104 <siprintf+0x38>)
 80090e2:	4909      	ldr	r1, [pc, #36]	; (8009108 <siprintf+0x3c>)
 80090e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	a902      	add	r1, sp, #8
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	f002 fece 	bl	800be90 <_svfiprintf_r>
 80090f4:	2200      	movs	r2, #0
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	b01c      	add	sp, #112	; 0x70
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	200000f0 	.word	0x200000f0
 8009108:	ffff0208 	.word	0xffff0208

0800910c <strncmp>:
 800910c:	4603      	mov	r3, r0
 800910e:	b510      	push	{r4, lr}
 8009110:	b172      	cbz	r2, 8009130 <strncmp+0x24>
 8009112:	3901      	subs	r1, #1
 8009114:	1884      	adds	r4, r0, r2
 8009116:	f813 0b01 	ldrb.w	r0, [r3], #1
 800911a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800911e:	4290      	cmp	r0, r2
 8009120:	d101      	bne.n	8009126 <strncmp+0x1a>
 8009122:	42a3      	cmp	r3, r4
 8009124:	d101      	bne.n	800912a <strncmp+0x1e>
 8009126:	1a80      	subs	r0, r0, r2
 8009128:	bd10      	pop	{r4, pc}
 800912a:	2800      	cmp	r0, #0
 800912c:	d1f3      	bne.n	8009116 <strncmp+0xa>
 800912e:	e7fa      	b.n	8009126 <strncmp+0x1a>
 8009130:	4610      	mov	r0, r2
 8009132:	e7f9      	b.n	8009128 <strncmp+0x1c>

08009134 <sulp>:
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009138:	460f      	mov	r7, r1
 800913a:	4690      	mov	r8, r2
 800913c:	f002 fc14 	bl	800b968 <__ulp>
 8009140:	4604      	mov	r4, r0
 8009142:	460d      	mov	r5, r1
 8009144:	f1b8 0f00 	cmp.w	r8, #0
 8009148:	d011      	beq.n	800916e <sulp+0x3a>
 800914a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800914e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009152:	2b00      	cmp	r3, #0
 8009154:	dd0b      	ble.n	800916e <sulp+0x3a>
 8009156:	2400      	movs	r4, #0
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800915e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	f7f7 f9b7 	bl	80004d8 <__aeabi_dmul>
 800916a:	4604      	mov	r4, r0
 800916c:	460d      	mov	r5, r1
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009178 <_strtod_l>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	469b      	mov	fp, r3
 800917e:	2300      	movs	r3, #0
 8009180:	b09f      	sub	sp, #124	; 0x7c
 8009182:	931a      	str	r3, [sp, #104]	; 0x68
 8009184:	4b9e      	ldr	r3, [pc, #632]	; (8009400 <_strtod_l+0x288>)
 8009186:	4682      	mov	sl, r0
 8009188:	681f      	ldr	r7, [r3, #0]
 800918a:	460e      	mov	r6, r1
 800918c:	4638      	mov	r0, r7
 800918e:	9215      	str	r2, [sp, #84]	; 0x54
 8009190:	f7f6 ffde 	bl	8000150 <strlen>
 8009194:	f04f 0800 	mov.w	r8, #0
 8009198:	4604      	mov	r4, r0
 800919a:	f04f 0900 	mov.w	r9, #0
 800919e:	9619      	str	r6, [sp, #100]	; 0x64
 80091a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	2a2b      	cmp	r2, #43	; 0x2b
 80091a6:	d04c      	beq.n	8009242 <_strtod_l+0xca>
 80091a8:	d83a      	bhi.n	8009220 <_strtod_l+0xa8>
 80091aa:	2a0d      	cmp	r2, #13
 80091ac:	d833      	bhi.n	8009216 <_strtod_l+0x9e>
 80091ae:	2a08      	cmp	r2, #8
 80091b0:	d833      	bhi.n	800921a <_strtod_l+0xa2>
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d03d      	beq.n	8009232 <_strtod_l+0xba>
 80091b6:	2300      	movs	r3, #0
 80091b8:	930a      	str	r3, [sp, #40]	; 0x28
 80091ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80091bc:	782b      	ldrb	r3, [r5, #0]
 80091be:	2b30      	cmp	r3, #48	; 0x30
 80091c0:	f040 80aa 	bne.w	8009318 <_strtod_l+0x1a0>
 80091c4:	786b      	ldrb	r3, [r5, #1]
 80091c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091ca:	2b58      	cmp	r3, #88	; 0x58
 80091cc:	d166      	bne.n	800929c <_strtod_l+0x124>
 80091ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d0:	4650      	mov	r0, sl
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	ab1a      	add	r3, sp, #104	; 0x68
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4a8a      	ldr	r2, [pc, #552]	; (8009404 <_strtod_l+0x28c>)
 80091da:	f8cd b008 	str.w	fp, [sp, #8]
 80091de:	ab1b      	add	r3, sp, #108	; 0x6c
 80091e0:	a919      	add	r1, sp, #100	; 0x64
 80091e2:	f001 fd27 	bl	800ac34 <__gethex>
 80091e6:	f010 0607 	ands.w	r6, r0, #7
 80091ea:	4604      	mov	r4, r0
 80091ec:	d005      	beq.n	80091fa <_strtod_l+0x82>
 80091ee:	2e06      	cmp	r6, #6
 80091f0:	d129      	bne.n	8009246 <_strtod_l+0xce>
 80091f2:	2300      	movs	r3, #0
 80091f4:	3501      	adds	r5, #1
 80091f6:	9519      	str	r5, [sp, #100]	; 0x64
 80091f8:	930a      	str	r3, [sp, #40]	; 0x28
 80091fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 858a 	bne.w	8009d16 <_strtod_l+0xb9e>
 8009202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009204:	b1d3      	cbz	r3, 800923c <_strtod_l+0xc4>
 8009206:	4642      	mov	r2, r8
 8009208:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800920c:	4610      	mov	r0, r2
 800920e:	4619      	mov	r1, r3
 8009210:	b01f      	add	sp, #124	; 0x7c
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	2a20      	cmp	r2, #32
 8009218:	d1cd      	bne.n	80091b6 <_strtod_l+0x3e>
 800921a:	3301      	adds	r3, #1
 800921c:	9319      	str	r3, [sp, #100]	; 0x64
 800921e:	e7bf      	b.n	80091a0 <_strtod_l+0x28>
 8009220:	2a2d      	cmp	r2, #45	; 0x2d
 8009222:	d1c8      	bne.n	80091b6 <_strtod_l+0x3e>
 8009224:	2201      	movs	r2, #1
 8009226:	920a      	str	r2, [sp, #40]	; 0x28
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	9219      	str	r2, [sp, #100]	; 0x64
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1c3      	bne.n	80091ba <_strtod_l+0x42>
 8009232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009234:	9619      	str	r6, [sp, #100]	; 0x64
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 856b 	bne.w	8009d12 <_strtod_l+0xb9a>
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	e7e4      	b.n	800920c <_strtod_l+0x94>
 8009242:	2200      	movs	r2, #0
 8009244:	e7ef      	b.n	8009226 <_strtod_l+0xae>
 8009246:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009248:	b13a      	cbz	r2, 800925a <_strtod_l+0xe2>
 800924a:	2135      	movs	r1, #53	; 0x35
 800924c:	a81c      	add	r0, sp, #112	; 0x70
 800924e:	f002 fc8f 	bl	800bb70 <__copybits>
 8009252:	4650      	mov	r0, sl
 8009254:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009256:	f002 f857 	bl	800b308 <_Bfree>
 800925a:	3e01      	subs	r6, #1
 800925c:	2e04      	cmp	r6, #4
 800925e:	d806      	bhi.n	800926e <_strtod_l+0xf6>
 8009260:	e8df f006 	tbb	[pc, r6]
 8009264:	1714030a 	.word	0x1714030a
 8009268:	0a          	.byte	0x0a
 8009269:	00          	.byte	0x00
 800926a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800926e:	0721      	lsls	r1, r4, #28
 8009270:	d5c3      	bpl.n	80091fa <_strtod_l+0x82>
 8009272:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009276:	e7c0      	b.n	80091fa <_strtod_l+0x82>
 8009278:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800927a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800927e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009286:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800928a:	e7f0      	b.n	800926e <_strtod_l+0xf6>
 800928c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009408 <_strtod_l+0x290>
 8009290:	e7ed      	b.n	800926e <_strtod_l+0xf6>
 8009292:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009296:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800929a:	e7e8      	b.n	800926e <_strtod_l+0xf6>
 800929c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	9219      	str	r2, [sp, #100]	; 0x64
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d0f9      	beq.n	800929c <_strtod_l+0x124>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0a6      	beq.n	80091fa <_strtod_l+0x82>
 80092ac:	2301      	movs	r3, #1
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092b2:	220a      	movs	r2, #10
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	2300      	movs	r3, #0
 80092b8:	469b      	mov	fp, r3
 80092ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80092be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80092c0:	7805      	ldrb	r5, [r0, #0]
 80092c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80092c6:	b2d9      	uxtb	r1, r3
 80092c8:	2909      	cmp	r1, #9
 80092ca:	d927      	bls.n	800931c <_strtod_l+0x1a4>
 80092cc:	4622      	mov	r2, r4
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7ff ff1c 	bl	800910c <strncmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d033      	beq.n	8009340 <_strtod_l+0x1c8>
 80092d8:	2000      	movs	r0, #0
 80092da:	462a      	mov	r2, r5
 80092dc:	465c      	mov	r4, fp
 80092de:	4603      	mov	r3, r0
 80092e0:	9004      	str	r0, [sp, #16]
 80092e2:	2a65      	cmp	r2, #101	; 0x65
 80092e4:	d001      	beq.n	80092ea <_strtod_l+0x172>
 80092e6:	2a45      	cmp	r2, #69	; 0x45
 80092e8:	d114      	bne.n	8009314 <_strtod_l+0x19c>
 80092ea:	b91c      	cbnz	r4, 80092f4 <_strtod_l+0x17c>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	4302      	orrs	r2, r0
 80092f0:	d09f      	beq.n	8009232 <_strtod_l+0xba>
 80092f2:	2400      	movs	r4, #0
 80092f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80092f6:	1c72      	adds	r2, r6, #1
 80092f8:	9219      	str	r2, [sp, #100]	; 0x64
 80092fa:	7872      	ldrb	r2, [r6, #1]
 80092fc:	2a2b      	cmp	r2, #43	; 0x2b
 80092fe:	d079      	beq.n	80093f4 <_strtod_l+0x27c>
 8009300:	2a2d      	cmp	r2, #45	; 0x2d
 8009302:	f000 8083 	beq.w	800940c <_strtod_l+0x294>
 8009306:	2700      	movs	r7, #0
 8009308:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800930c:	2909      	cmp	r1, #9
 800930e:	f240 8083 	bls.w	8009418 <_strtod_l+0x2a0>
 8009312:	9619      	str	r6, [sp, #100]	; 0x64
 8009314:	2500      	movs	r5, #0
 8009316:	e09f      	b.n	8009458 <_strtod_l+0x2e0>
 8009318:	2300      	movs	r3, #0
 800931a:	e7c8      	b.n	80092ae <_strtod_l+0x136>
 800931c:	f1bb 0f08 	cmp.w	fp, #8
 8009320:	bfd5      	itete	le
 8009322:	9906      	ldrle	r1, [sp, #24]
 8009324:	9905      	ldrgt	r1, [sp, #20]
 8009326:	fb02 3301 	mlale	r3, r2, r1, r3
 800932a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800932e:	f100 0001 	add.w	r0, r0, #1
 8009332:	bfd4      	ite	le
 8009334:	9306      	strle	r3, [sp, #24]
 8009336:	9305      	strgt	r3, [sp, #20]
 8009338:	f10b 0b01 	add.w	fp, fp, #1
 800933c:	9019      	str	r0, [sp, #100]	; 0x64
 800933e:	e7be      	b.n	80092be <_strtod_l+0x146>
 8009340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009342:	191a      	adds	r2, r3, r4
 8009344:	9219      	str	r2, [sp, #100]	; 0x64
 8009346:	5d1a      	ldrb	r2, [r3, r4]
 8009348:	f1bb 0f00 	cmp.w	fp, #0
 800934c:	d036      	beq.n	80093bc <_strtod_l+0x244>
 800934e:	465c      	mov	r4, fp
 8009350:	9004      	str	r0, [sp, #16]
 8009352:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d912      	bls.n	8009380 <_strtod_l+0x208>
 800935a:	2301      	movs	r3, #1
 800935c:	e7c1      	b.n	80092e2 <_strtod_l+0x16a>
 800935e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009360:	3001      	adds	r0, #1
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	9219      	str	r2, [sp, #100]	; 0x64
 8009366:	785a      	ldrb	r2, [r3, #1]
 8009368:	2a30      	cmp	r2, #48	; 0x30
 800936a:	d0f8      	beq.n	800935e <_strtod_l+0x1e6>
 800936c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009370:	2b08      	cmp	r3, #8
 8009372:	f200 84d5 	bhi.w	8009d20 <_strtod_l+0xba8>
 8009376:	9004      	str	r0, [sp, #16]
 8009378:	2000      	movs	r0, #0
 800937a:	4604      	mov	r4, r0
 800937c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	3a30      	subs	r2, #48	; 0x30
 8009382:	f100 0301 	add.w	r3, r0, #1
 8009386:	d013      	beq.n	80093b0 <_strtod_l+0x238>
 8009388:	9904      	ldr	r1, [sp, #16]
 800938a:	1905      	adds	r5, r0, r4
 800938c:	4419      	add	r1, r3
 800938e:	9104      	str	r1, [sp, #16]
 8009390:	4623      	mov	r3, r4
 8009392:	210a      	movs	r1, #10
 8009394:	42ab      	cmp	r3, r5
 8009396:	d113      	bne.n	80093c0 <_strtod_l+0x248>
 8009398:	1823      	adds	r3, r4, r0
 800939a:	2b08      	cmp	r3, #8
 800939c:	f104 0401 	add.w	r4, r4, #1
 80093a0:	4404      	add	r4, r0
 80093a2:	dc1b      	bgt.n	80093dc <_strtod_l+0x264>
 80093a4:	230a      	movs	r3, #10
 80093a6:	9906      	ldr	r1, [sp, #24]
 80093a8:	fb03 2301 	mla	r3, r3, r1, r2
 80093ac:	9306      	str	r3, [sp, #24]
 80093ae:	2300      	movs	r3, #0
 80093b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093b2:	4618      	mov	r0, r3
 80093b4:	1c51      	adds	r1, r2, #1
 80093b6:	9119      	str	r1, [sp, #100]	; 0x64
 80093b8:	7852      	ldrb	r2, [r2, #1]
 80093ba:	e7ca      	b.n	8009352 <_strtod_l+0x1da>
 80093bc:	4658      	mov	r0, fp
 80093be:	e7d3      	b.n	8009368 <_strtod_l+0x1f0>
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	dc04      	bgt.n	80093ce <_strtod_l+0x256>
 80093c4:	9f06      	ldr	r7, [sp, #24]
 80093c6:	434f      	muls	r7, r1
 80093c8:	9706      	str	r7, [sp, #24]
 80093ca:	3301      	adds	r3, #1
 80093cc:	e7e2      	b.n	8009394 <_strtod_l+0x21c>
 80093ce:	1c5f      	adds	r7, r3, #1
 80093d0:	2f10      	cmp	r7, #16
 80093d2:	bfde      	ittt	le
 80093d4:	9f05      	ldrle	r7, [sp, #20]
 80093d6:	434f      	mulle	r7, r1
 80093d8:	9705      	strle	r7, [sp, #20]
 80093da:	e7f6      	b.n	80093ca <_strtod_l+0x252>
 80093dc:	2c10      	cmp	r4, #16
 80093de:	bfdf      	itttt	le
 80093e0:	230a      	movle	r3, #10
 80093e2:	9905      	ldrle	r1, [sp, #20]
 80093e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80093e8:	9305      	strle	r3, [sp, #20]
 80093ea:	e7e0      	b.n	80093ae <_strtod_l+0x236>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	2301      	movs	r3, #1
 80093f2:	e77b      	b.n	80092ec <_strtod_l+0x174>
 80093f4:	2700      	movs	r7, #0
 80093f6:	1cb2      	adds	r2, r6, #2
 80093f8:	9219      	str	r2, [sp, #100]	; 0x64
 80093fa:	78b2      	ldrb	r2, [r6, #2]
 80093fc:	e784      	b.n	8009308 <_strtod_l+0x190>
 80093fe:	bf00      	nop
 8009400:	0800cf60 	.word	0x0800cf60
 8009404:	0800cd14 	.word	0x0800cd14
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	2701      	movs	r7, #1
 800940e:	e7f2      	b.n	80093f6 <_strtod_l+0x27e>
 8009410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009412:	1c51      	adds	r1, r2, #1
 8009414:	9119      	str	r1, [sp, #100]	; 0x64
 8009416:	7852      	ldrb	r2, [r2, #1]
 8009418:	2a30      	cmp	r2, #48	; 0x30
 800941a:	d0f9      	beq.n	8009410 <_strtod_l+0x298>
 800941c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009420:	2908      	cmp	r1, #8
 8009422:	f63f af77 	bhi.w	8009314 <_strtod_l+0x19c>
 8009426:	f04f 0e0a 	mov.w	lr, #10
 800942a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800942e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009430:	9209      	str	r2, [sp, #36]	; 0x24
 8009432:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009434:	1c51      	adds	r1, r2, #1
 8009436:	9119      	str	r1, [sp, #100]	; 0x64
 8009438:	7852      	ldrb	r2, [r2, #1]
 800943a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800943e:	2d09      	cmp	r5, #9
 8009440:	d935      	bls.n	80094ae <_strtod_l+0x336>
 8009442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009444:	1b49      	subs	r1, r1, r5
 8009446:	2908      	cmp	r1, #8
 8009448:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800944c:	dc02      	bgt.n	8009454 <_strtod_l+0x2dc>
 800944e:	4565      	cmp	r5, ip
 8009450:	bfa8      	it	ge
 8009452:	4665      	movge	r5, ip
 8009454:	b107      	cbz	r7, 8009458 <_strtod_l+0x2e0>
 8009456:	426d      	negs	r5, r5
 8009458:	2c00      	cmp	r4, #0
 800945a:	d14c      	bne.n	80094f6 <_strtod_l+0x37e>
 800945c:	9907      	ldr	r1, [sp, #28]
 800945e:	4301      	orrs	r1, r0
 8009460:	f47f aecb 	bne.w	80091fa <_strtod_l+0x82>
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f aee4 	bne.w	8009232 <_strtod_l+0xba>
 800946a:	2a69      	cmp	r2, #105	; 0x69
 800946c:	d026      	beq.n	80094bc <_strtod_l+0x344>
 800946e:	dc23      	bgt.n	80094b8 <_strtod_l+0x340>
 8009470:	2a49      	cmp	r2, #73	; 0x49
 8009472:	d023      	beq.n	80094bc <_strtod_l+0x344>
 8009474:	2a4e      	cmp	r2, #78	; 0x4e
 8009476:	f47f aedc 	bne.w	8009232 <_strtod_l+0xba>
 800947a:	499d      	ldr	r1, [pc, #628]	; (80096f0 <_strtod_l+0x578>)
 800947c:	a819      	add	r0, sp, #100	; 0x64
 800947e:	f001 fe27 	bl	800b0d0 <__match>
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aed5 	beq.w	8009232 <_strtod_l+0xba>
 8009488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b28      	cmp	r3, #40	; 0x28
 800948e:	d12c      	bne.n	80094ea <_strtod_l+0x372>
 8009490:	4998      	ldr	r1, [pc, #608]	; (80096f4 <_strtod_l+0x57c>)
 8009492:	aa1c      	add	r2, sp, #112	; 0x70
 8009494:	a819      	add	r0, sp, #100	; 0x64
 8009496:	f001 fe2f 	bl	800b0f8 <__hexnan>
 800949a:	2805      	cmp	r0, #5
 800949c:	d125      	bne.n	80094ea <_strtod_l+0x372>
 800949e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80094a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80094a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80094ac:	e6a5      	b.n	80091fa <_strtod_l+0x82>
 80094ae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80094b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80094b6:	e7bc      	b.n	8009432 <_strtod_l+0x2ba>
 80094b8:	2a6e      	cmp	r2, #110	; 0x6e
 80094ba:	e7dc      	b.n	8009476 <_strtod_l+0x2fe>
 80094bc:	498e      	ldr	r1, [pc, #568]	; (80096f8 <_strtod_l+0x580>)
 80094be:	a819      	add	r0, sp, #100	; 0x64
 80094c0:	f001 fe06 	bl	800b0d0 <__match>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f43f aeb4 	beq.w	8009232 <_strtod_l+0xba>
 80094ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094cc:	498b      	ldr	r1, [pc, #556]	; (80096fc <_strtod_l+0x584>)
 80094ce:	3b01      	subs	r3, #1
 80094d0:	a819      	add	r0, sp, #100	; 0x64
 80094d2:	9319      	str	r3, [sp, #100]	; 0x64
 80094d4:	f001 fdfc 	bl	800b0d0 <__match>
 80094d8:	b910      	cbnz	r0, 80094e0 <_strtod_l+0x368>
 80094da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094dc:	3301      	adds	r3, #1
 80094de:	9319      	str	r3, [sp, #100]	; 0x64
 80094e0:	f04f 0800 	mov.w	r8, #0
 80094e4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009700 <_strtod_l+0x588>
 80094e8:	e687      	b.n	80091fa <_strtod_l+0x82>
 80094ea:	4886      	ldr	r0, [pc, #536]	; (8009704 <_strtod_l+0x58c>)
 80094ec:	f002 fdd0 	bl	800c090 <nan>
 80094f0:	4680      	mov	r8, r0
 80094f2:	4689      	mov	r9, r1
 80094f4:	e681      	b.n	80091fa <_strtod_l+0x82>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	f1bb 0f00 	cmp.w	fp, #0
 80094fc:	bf08      	it	eq
 80094fe:	46a3      	moveq	fp, r4
 8009500:	1aeb      	subs	r3, r5, r3
 8009502:	2c10      	cmp	r4, #16
 8009504:	9806      	ldr	r0, [sp, #24]
 8009506:	4626      	mov	r6, r4
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	bfa8      	it	ge
 800950c:	2610      	movge	r6, #16
 800950e:	f7f6 ff69 	bl	80003e4 <__aeabi_ui2d>
 8009512:	2c09      	cmp	r4, #9
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	dd13      	ble.n	8009542 <_strtod_l+0x3ca>
 800951a:	4b7b      	ldr	r3, [pc, #492]	; (8009708 <_strtod_l+0x590>)
 800951c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009520:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009524:	f7f6 ffd8 	bl	80004d8 <__aeabi_dmul>
 8009528:	4680      	mov	r8, r0
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	4689      	mov	r9, r1
 800952e:	f7f6 ff59 	bl	80003e4 <__aeabi_ui2d>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4640      	mov	r0, r8
 8009538:	4649      	mov	r1, r9
 800953a:	f7f6 fe17 	bl	800016c <__adddf3>
 800953e:	4680      	mov	r8, r0
 8009540:	4689      	mov	r9, r1
 8009542:	2c0f      	cmp	r4, #15
 8009544:	dc36      	bgt.n	80095b4 <_strtod_l+0x43c>
 8009546:	9b07      	ldr	r3, [sp, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f43f ae56 	beq.w	80091fa <_strtod_l+0x82>
 800954e:	dd22      	ble.n	8009596 <_strtod_l+0x41e>
 8009550:	2b16      	cmp	r3, #22
 8009552:	dc09      	bgt.n	8009568 <_strtod_l+0x3f0>
 8009554:	496c      	ldr	r1, [pc, #432]	; (8009708 <_strtod_l+0x590>)
 8009556:	4642      	mov	r2, r8
 8009558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800955c:	464b      	mov	r3, r9
 800955e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009562:	f7f6 ffb9 	bl	80004d8 <__aeabi_dmul>
 8009566:	e7c3      	b.n	80094f0 <_strtod_l+0x378>
 8009568:	9a07      	ldr	r2, [sp, #28]
 800956a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800956e:	4293      	cmp	r3, r2
 8009570:	db20      	blt.n	80095b4 <_strtod_l+0x43c>
 8009572:	4d65      	ldr	r5, [pc, #404]	; (8009708 <_strtod_l+0x590>)
 8009574:	f1c4 040f 	rsb	r4, r4, #15
 8009578:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800957c:	4642      	mov	r2, r8
 800957e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009582:	464b      	mov	r3, r9
 8009584:	f7f6 ffa8 	bl	80004d8 <__aeabi_dmul>
 8009588:	9b07      	ldr	r3, [sp, #28]
 800958a:	1b1c      	subs	r4, r3, r4
 800958c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009594:	e7e5      	b.n	8009562 <_strtod_l+0x3ea>
 8009596:	9b07      	ldr	r3, [sp, #28]
 8009598:	3316      	adds	r3, #22
 800959a:	db0b      	blt.n	80095b4 <_strtod_l+0x43c>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	4640      	mov	r0, r8
 80095a0:	1b5d      	subs	r5, r3, r5
 80095a2:	4b59      	ldr	r3, [pc, #356]	; (8009708 <_strtod_l+0x590>)
 80095a4:	4649      	mov	r1, r9
 80095a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80095aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ae:	f7f7 f8bd 	bl	800072c <__aeabi_ddiv>
 80095b2:	e79d      	b.n	80094f0 <_strtod_l+0x378>
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	1ba6      	subs	r6, r4, r6
 80095b8:	441e      	add	r6, r3
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	dd74      	ble.n	80096a8 <_strtod_l+0x530>
 80095be:	f016 030f 	ands.w	r3, r6, #15
 80095c2:	d00a      	beq.n	80095da <_strtod_l+0x462>
 80095c4:	4950      	ldr	r1, [pc, #320]	; (8009708 <_strtod_l+0x590>)
 80095c6:	4642      	mov	r2, r8
 80095c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	464b      	mov	r3, r9
 80095d2:	f7f6 ff81 	bl	80004d8 <__aeabi_dmul>
 80095d6:	4680      	mov	r8, r0
 80095d8:	4689      	mov	r9, r1
 80095da:	f036 060f 	bics.w	r6, r6, #15
 80095de:	d052      	beq.n	8009686 <_strtod_l+0x50e>
 80095e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80095e4:	dd27      	ble.n	8009636 <_strtod_l+0x4be>
 80095e6:	f04f 0b00 	mov.w	fp, #0
 80095ea:	f8cd b010 	str.w	fp, [sp, #16]
 80095ee:	f8cd b020 	str.w	fp, [sp, #32]
 80095f2:	f8cd b018 	str.w	fp, [sp, #24]
 80095f6:	2322      	movs	r3, #34	; 0x22
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009700 <_strtod_l+0x588>
 8009600:	f8ca 3000 	str.w	r3, [sl]
 8009604:	9b08      	ldr	r3, [sp, #32]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f43f adf7 	beq.w	80091fa <_strtod_l+0x82>
 800960c:	4650      	mov	r0, sl
 800960e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009610:	f001 fe7a 	bl	800b308 <_Bfree>
 8009614:	4650      	mov	r0, sl
 8009616:	9906      	ldr	r1, [sp, #24]
 8009618:	f001 fe76 	bl	800b308 <_Bfree>
 800961c:	4650      	mov	r0, sl
 800961e:	9904      	ldr	r1, [sp, #16]
 8009620:	f001 fe72 	bl	800b308 <_Bfree>
 8009624:	4650      	mov	r0, sl
 8009626:	9908      	ldr	r1, [sp, #32]
 8009628:	f001 fe6e 	bl	800b308 <_Bfree>
 800962c:	4659      	mov	r1, fp
 800962e:	4650      	mov	r0, sl
 8009630:	f001 fe6a 	bl	800b308 <_Bfree>
 8009634:	e5e1      	b.n	80091fa <_strtod_l+0x82>
 8009636:	4b35      	ldr	r3, [pc, #212]	; (800970c <_strtod_l+0x594>)
 8009638:	4640      	mov	r0, r8
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	2300      	movs	r3, #0
 800963e:	4649      	mov	r1, r9
 8009640:	461f      	mov	r7, r3
 8009642:	1136      	asrs	r6, r6, #4
 8009644:	2e01      	cmp	r6, #1
 8009646:	dc21      	bgt.n	800968c <_strtod_l+0x514>
 8009648:	b10b      	cbz	r3, 800964e <_strtod_l+0x4d6>
 800964a:	4680      	mov	r8, r0
 800964c:	4689      	mov	r9, r1
 800964e:	4b2f      	ldr	r3, [pc, #188]	; (800970c <_strtod_l+0x594>)
 8009650:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009654:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009658:	4642      	mov	r2, r8
 800965a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965e:	464b      	mov	r3, r9
 8009660:	f7f6 ff3a 	bl	80004d8 <__aeabi_dmul>
 8009664:	4b26      	ldr	r3, [pc, #152]	; (8009700 <_strtod_l+0x588>)
 8009666:	460a      	mov	r2, r1
 8009668:	400b      	ands	r3, r1
 800966a:	4929      	ldr	r1, [pc, #164]	; (8009710 <_strtod_l+0x598>)
 800966c:	4680      	mov	r8, r0
 800966e:	428b      	cmp	r3, r1
 8009670:	d8b9      	bhi.n	80095e6 <_strtod_l+0x46e>
 8009672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009676:	428b      	cmp	r3, r1
 8009678:	bf86      	itte	hi
 800967a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800967e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009714 <_strtod_l+0x59c>
 8009682:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009686:	2300      	movs	r3, #0
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	e07f      	b.n	800978c <_strtod_l+0x614>
 800968c:	07f2      	lsls	r2, r6, #31
 800968e:	d505      	bpl.n	800969c <_strtod_l+0x524>
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ff1f 	bl	80004d8 <__aeabi_dmul>
 800969a:	2301      	movs	r3, #1
 800969c:	9a05      	ldr	r2, [sp, #20]
 800969e:	3701      	adds	r7, #1
 80096a0:	3208      	adds	r2, #8
 80096a2:	1076      	asrs	r6, r6, #1
 80096a4:	9205      	str	r2, [sp, #20]
 80096a6:	e7cd      	b.n	8009644 <_strtod_l+0x4cc>
 80096a8:	d0ed      	beq.n	8009686 <_strtod_l+0x50e>
 80096aa:	4276      	negs	r6, r6
 80096ac:	f016 020f 	ands.w	r2, r6, #15
 80096b0:	d00a      	beq.n	80096c8 <_strtod_l+0x550>
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <_strtod_l+0x590>)
 80096b4:	4640      	mov	r0, r8
 80096b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ba:	4649      	mov	r1, r9
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f7 f834 	bl	800072c <__aeabi_ddiv>
 80096c4:	4680      	mov	r8, r0
 80096c6:	4689      	mov	r9, r1
 80096c8:	1136      	asrs	r6, r6, #4
 80096ca:	d0dc      	beq.n	8009686 <_strtod_l+0x50e>
 80096cc:	2e1f      	cmp	r6, #31
 80096ce:	dd23      	ble.n	8009718 <_strtod_l+0x5a0>
 80096d0:	f04f 0b00 	mov.w	fp, #0
 80096d4:	f8cd b010 	str.w	fp, [sp, #16]
 80096d8:	f8cd b020 	str.w	fp, [sp, #32]
 80096dc:	f8cd b018 	str.w	fp, [sp, #24]
 80096e0:	2322      	movs	r3, #34	; 0x22
 80096e2:	f04f 0800 	mov.w	r8, #0
 80096e6:	f04f 0900 	mov.w	r9, #0
 80096ea:	f8ca 3000 	str.w	r3, [sl]
 80096ee:	e789      	b.n	8009604 <_strtod_l+0x48c>
 80096f0:	0800cced 	.word	0x0800cced
 80096f4:	0800cd28 	.word	0x0800cd28
 80096f8:	0800cce5 	.word	0x0800cce5
 80096fc:	0800ce6c 	.word	0x0800ce6c
 8009700:	7ff00000 	.word	0x7ff00000
 8009704:	0800d118 	.word	0x0800d118
 8009708:	0800cff8 	.word	0x0800cff8
 800970c:	0800cfd0 	.word	0x0800cfd0
 8009710:	7ca00000 	.word	0x7ca00000
 8009714:	7fefffff 	.word	0x7fefffff
 8009718:	f016 0310 	ands.w	r3, r6, #16
 800971c:	bf18      	it	ne
 800971e:	236a      	movne	r3, #106	; 0x6a
 8009720:	4640      	mov	r0, r8
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	4649      	mov	r1, r9
 8009726:	2300      	movs	r3, #0
 8009728:	4fb0      	ldr	r7, [pc, #704]	; (80099ec <_strtod_l+0x874>)
 800972a:	07f2      	lsls	r2, r6, #31
 800972c:	d504      	bpl.n	8009738 <_strtod_l+0x5c0>
 800972e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009732:	f7f6 fed1 	bl	80004d8 <__aeabi_dmul>
 8009736:	2301      	movs	r3, #1
 8009738:	1076      	asrs	r6, r6, #1
 800973a:	f107 0708 	add.w	r7, r7, #8
 800973e:	d1f4      	bne.n	800972a <_strtod_l+0x5b2>
 8009740:	b10b      	cbz	r3, 8009746 <_strtod_l+0x5ce>
 8009742:	4680      	mov	r8, r0
 8009744:	4689      	mov	r9, r1
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	b1c3      	cbz	r3, 800977c <_strtod_l+0x604>
 800974a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800974e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009752:	2b00      	cmp	r3, #0
 8009754:	4649      	mov	r1, r9
 8009756:	dd11      	ble.n	800977c <_strtod_l+0x604>
 8009758:	2b1f      	cmp	r3, #31
 800975a:	f340 8127 	ble.w	80099ac <_strtod_l+0x834>
 800975e:	2b34      	cmp	r3, #52	; 0x34
 8009760:	bfd8      	it	le
 8009762:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009766:	f04f 0800 	mov.w	r8, #0
 800976a:	bfcf      	iteee	gt
 800976c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009770:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009774:	fa03 f202 	lslle.w	r2, r3, r2
 8009778:	ea02 0901 	andle.w	r9, r2, r1
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f910 	bl	80009a8 <__aeabi_dcmpeq>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1a1      	bne.n	80096d0 <_strtod_l+0x558>
 800978c:	9b06      	ldr	r3, [sp, #24]
 800978e:	465a      	mov	r2, fp
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	4650      	mov	r0, sl
 8009794:	4623      	mov	r3, r4
 8009796:	9908      	ldr	r1, [sp, #32]
 8009798:	f001 fe1e 	bl	800b3d8 <__s2b>
 800979c:	9008      	str	r0, [sp, #32]
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f af21 	beq.w	80095e6 <_strtod_l+0x46e>
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	f04f 0b00 	mov.w	fp, #0
 80097aa:	1b5d      	subs	r5, r3, r5
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	f8cd b010 	str.w	fp, [sp, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	bfb4      	ite	lt
 80097b6:	462b      	movlt	r3, r5
 80097b8:	2300      	movge	r3, #0
 80097ba:	930e      	str	r3, [sp, #56]	; 0x38
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097c2:	9314      	str	r3, [sp, #80]	; 0x50
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	4650      	mov	r0, sl
 80097c8:	6859      	ldr	r1, [r3, #4]
 80097ca:	f001 fd5d 	bl	800b288 <_Balloc>
 80097ce:	9006      	str	r0, [sp, #24]
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f43f af10 	beq.w	80095f6 <_strtod_l+0x47e>
 80097d6:	9b08      	ldr	r3, [sp, #32]
 80097d8:	300c      	adds	r0, #12
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	f103 010c 	add.w	r1, r3, #12
 80097e0:	3202      	adds	r2, #2
 80097e2:	0092      	lsls	r2, r2, #2
 80097e4:	f7fe fffc 	bl	80087e0 <memcpy>
 80097e8:	ab1c      	add	r3, sp, #112	; 0x70
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	4650      	mov	r0, sl
 80097f6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80097fa:	f002 f92f 	bl	800ba5c <__d2b>
 80097fe:	901a      	str	r0, [sp, #104]	; 0x68
 8009800:	2800      	cmp	r0, #0
 8009802:	f43f aef8 	beq.w	80095f6 <_strtod_l+0x47e>
 8009806:	2101      	movs	r1, #1
 8009808:	4650      	mov	r0, sl
 800980a:	f001 fe7d 	bl	800b508 <__i2b>
 800980e:	4603      	mov	r3, r0
 8009810:	9004      	str	r0, [sp, #16]
 8009812:	2800      	cmp	r0, #0
 8009814:	f43f aeef 	beq.w	80095f6 <_strtod_l+0x47e>
 8009818:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800981a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800981c:	2d00      	cmp	r5, #0
 800981e:	bfab      	itete	ge
 8009820:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009822:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009824:	18ee      	addge	r6, r5, r3
 8009826:	1b5c      	sublt	r4, r3, r5
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	bfa8      	it	ge
 800982c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800982e:	eba5 0503 	sub.w	r5, r5, r3
 8009832:	4415      	add	r5, r2
 8009834:	4b6e      	ldr	r3, [pc, #440]	; (80099f0 <_strtod_l+0x878>)
 8009836:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800983a:	bfb8      	it	lt
 800983c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800983e:	429d      	cmp	r5, r3
 8009840:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009844:	f280 80c4 	bge.w	80099d0 <_strtod_l+0x858>
 8009848:	1b5b      	subs	r3, r3, r5
 800984a:	2b1f      	cmp	r3, #31
 800984c:	f04f 0701 	mov.w	r7, #1
 8009850:	eba2 0203 	sub.w	r2, r2, r3
 8009854:	f300 80b1 	bgt.w	80099ba <_strtod_l+0x842>
 8009858:	2500      	movs	r5, #0
 800985a:	fa07 f303 	lsl.w	r3, r7, r3
 800985e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009860:	18b7      	adds	r7, r6, r2
 8009862:	9b05      	ldr	r3, [sp, #20]
 8009864:	42be      	cmp	r6, r7
 8009866:	4414      	add	r4, r2
 8009868:	441c      	add	r4, r3
 800986a:	4633      	mov	r3, r6
 800986c:	bfa8      	it	ge
 800986e:	463b      	movge	r3, r7
 8009870:	42a3      	cmp	r3, r4
 8009872:	bfa8      	it	ge
 8009874:	4623      	movge	r3, r4
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfc2      	ittt	gt
 800987a:	1aff      	subgt	r7, r7, r3
 800987c:	1ae4      	subgt	r4, r4, r3
 800987e:	1af6      	subgt	r6, r6, r3
 8009880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	dd17      	ble.n	80098b6 <_strtod_l+0x73e>
 8009886:	461a      	mov	r2, r3
 8009888:	4650      	mov	r0, sl
 800988a:	9904      	ldr	r1, [sp, #16]
 800988c:	f001 fefa 	bl	800b684 <__pow5mult>
 8009890:	9004      	str	r0, [sp, #16]
 8009892:	2800      	cmp	r0, #0
 8009894:	f43f aeaf 	beq.w	80095f6 <_strtod_l+0x47e>
 8009898:	4601      	mov	r1, r0
 800989a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800989c:	4650      	mov	r0, sl
 800989e:	f001 fe49 	bl	800b534 <__multiply>
 80098a2:	9009      	str	r0, [sp, #36]	; 0x24
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f43f aea6 	beq.w	80095f6 <_strtod_l+0x47e>
 80098aa:	4650      	mov	r0, sl
 80098ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098ae:	f001 fd2b 	bl	800b308 <_Bfree>
 80098b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b4:	931a      	str	r3, [sp, #104]	; 0x68
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	f300 808e 	bgt.w	80099d8 <_strtod_l+0x860>
 80098bc:	9b07      	ldr	r3, [sp, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd08      	ble.n	80098d4 <_strtod_l+0x75c>
 80098c2:	4650      	mov	r0, sl
 80098c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098c6:	9906      	ldr	r1, [sp, #24]
 80098c8:	f001 fedc 	bl	800b684 <__pow5mult>
 80098cc:	9006      	str	r0, [sp, #24]
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f ae91 	beq.w	80095f6 <_strtod_l+0x47e>
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	dd08      	ble.n	80098ea <_strtod_l+0x772>
 80098d8:	4622      	mov	r2, r4
 80098da:	4650      	mov	r0, sl
 80098dc:	9906      	ldr	r1, [sp, #24]
 80098de:	f001 ff2b 	bl	800b738 <__lshift>
 80098e2:	9006      	str	r0, [sp, #24]
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f43f ae86 	beq.w	80095f6 <_strtod_l+0x47e>
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	dd08      	ble.n	8009900 <_strtod_l+0x788>
 80098ee:	4632      	mov	r2, r6
 80098f0:	4650      	mov	r0, sl
 80098f2:	9904      	ldr	r1, [sp, #16]
 80098f4:	f001 ff20 	bl	800b738 <__lshift>
 80098f8:	9004      	str	r0, [sp, #16]
 80098fa:	2800      	cmp	r0, #0
 80098fc:	f43f ae7b 	beq.w	80095f6 <_strtod_l+0x47e>
 8009900:	4650      	mov	r0, sl
 8009902:	9a06      	ldr	r2, [sp, #24]
 8009904:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009906:	f001 ffa3 	bl	800b850 <__mdiff>
 800990a:	4683      	mov	fp, r0
 800990c:	2800      	cmp	r0, #0
 800990e:	f43f ae72 	beq.w	80095f6 <_strtod_l+0x47e>
 8009912:	2400      	movs	r4, #0
 8009914:	68c3      	ldr	r3, [r0, #12]
 8009916:	9904      	ldr	r1, [sp, #16]
 8009918:	60c4      	str	r4, [r0, #12]
 800991a:	930b      	str	r3, [sp, #44]	; 0x2c
 800991c:	f001 ff7c 	bl	800b818 <__mcmp>
 8009920:	42a0      	cmp	r0, r4
 8009922:	da6b      	bge.n	80099fc <_strtod_l+0x884>
 8009924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009926:	ea53 0308 	orrs.w	r3, r3, r8
 800992a:	f040 8091 	bne.w	8009a50 <_strtod_l+0x8d8>
 800992e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009932:	2b00      	cmp	r3, #0
 8009934:	f040 808c 	bne.w	8009a50 <_strtod_l+0x8d8>
 8009938:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800993c:	0d1b      	lsrs	r3, r3, #20
 800993e:	051b      	lsls	r3, r3, #20
 8009940:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009944:	f240 8084 	bls.w	8009a50 <_strtod_l+0x8d8>
 8009948:	f8db 3014 	ldr.w	r3, [fp, #20]
 800994c:	b91b      	cbnz	r3, 8009956 <_strtod_l+0x7de>
 800994e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009952:	2b01      	cmp	r3, #1
 8009954:	dd7c      	ble.n	8009a50 <_strtod_l+0x8d8>
 8009956:	4659      	mov	r1, fp
 8009958:	2201      	movs	r2, #1
 800995a:	4650      	mov	r0, sl
 800995c:	f001 feec 	bl	800b738 <__lshift>
 8009960:	9904      	ldr	r1, [sp, #16]
 8009962:	4683      	mov	fp, r0
 8009964:	f001 ff58 	bl	800b818 <__mcmp>
 8009968:	2800      	cmp	r0, #0
 800996a:	dd71      	ble.n	8009a50 <_strtod_l+0x8d8>
 800996c:	9905      	ldr	r1, [sp, #20]
 800996e:	464b      	mov	r3, r9
 8009970:	4a20      	ldr	r2, [pc, #128]	; (80099f4 <_strtod_l+0x87c>)
 8009972:	2900      	cmp	r1, #0
 8009974:	f000 808c 	beq.w	8009a90 <_strtod_l+0x918>
 8009978:	ea02 0109 	and.w	r1, r2, r9
 800997c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009980:	f300 8086 	bgt.w	8009a90 <_strtod_l+0x918>
 8009984:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009988:	f77f aeaa 	ble.w	80096e0 <_strtod_l+0x568>
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <_strtod_l+0x880>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fda0 	bl	80004d8 <__aeabi_dmul>
 8009998:	460b      	mov	r3, r1
 800999a:	4303      	orrs	r3, r0
 800999c:	bf08      	it	eq
 800999e:	2322      	moveq	r3, #34	; 0x22
 80099a0:	4680      	mov	r8, r0
 80099a2:	4689      	mov	r9, r1
 80099a4:	bf08      	it	eq
 80099a6:	f8ca 3000 	streq.w	r3, [sl]
 80099aa:	e62f      	b.n	800960c <_strtod_l+0x494>
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	ea03 0808 	and.w	r8, r3, r8
 80099b8:	e6e0      	b.n	800977c <_strtod_l+0x604>
 80099ba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80099be:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80099c2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80099c6:	35e2      	adds	r5, #226	; 0xe2
 80099c8:	fa07 f505 	lsl.w	r5, r7, r5
 80099cc:	970f      	str	r7, [sp, #60]	; 0x3c
 80099ce:	e747      	b.n	8009860 <_strtod_l+0x6e8>
 80099d0:	2301      	movs	r3, #1
 80099d2:	2500      	movs	r5, #0
 80099d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d6:	e743      	b.n	8009860 <_strtod_l+0x6e8>
 80099d8:	463a      	mov	r2, r7
 80099da:	4650      	mov	r0, sl
 80099dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099de:	f001 feab 	bl	800b738 <__lshift>
 80099e2:	901a      	str	r0, [sp, #104]	; 0x68
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f47f af69 	bne.w	80098bc <_strtod_l+0x744>
 80099ea:	e604      	b.n	80095f6 <_strtod_l+0x47e>
 80099ec:	0800cd40 	.word	0x0800cd40
 80099f0:	fffffc02 	.word	0xfffffc02
 80099f4:	7ff00000 	.word	0x7ff00000
 80099f8:	39500000 	.word	0x39500000
 80099fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a00:	d165      	bne.n	8009ace <_strtod_l+0x956>
 8009a02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a08:	b35a      	cbz	r2, 8009a62 <_strtod_l+0x8ea>
 8009a0a:	4a99      	ldr	r2, [pc, #612]	; (8009c70 <_strtod_l+0xaf8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d12b      	bne.n	8009a68 <_strtod_l+0x8f0>
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	4641      	mov	r1, r8
 8009a14:	b303      	cbz	r3, 8009a58 <_strtod_l+0x8e0>
 8009a16:	464a      	mov	r2, r9
 8009a18:	4b96      	ldr	r3, [pc, #600]	; (8009c74 <_strtod_l+0xafc>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a24:	d81b      	bhi.n	8009a5e <_strtod_l+0x8e6>
 8009a26:	0d1b      	lsrs	r3, r3, #20
 8009a28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a30:	4299      	cmp	r1, r3
 8009a32:	d119      	bne.n	8009a68 <_strtod_l+0x8f0>
 8009a34:	4b90      	ldr	r3, [pc, #576]	; (8009c78 <_strtod_l+0xb00>)
 8009a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d102      	bne.n	8009a42 <_strtod_l+0x8ca>
 8009a3c:	3101      	adds	r1, #1
 8009a3e:	f43f adda 	beq.w	80095f6 <_strtod_l+0x47e>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	4b8b      	ldr	r3, [pc, #556]	; (8009c74 <_strtod_l+0xafc>)
 8009a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009a50:	9b05      	ldr	r3, [sp, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d19a      	bne.n	800998c <_strtod_l+0x814>
 8009a56:	e5d9      	b.n	800960c <_strtod_l+0x494>
 8009a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5c:	e7e8      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a5e:	4613      	mov	r3, r2
 8009a60:	e7e6      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a62:	ea53 0308 	orrs.w	r3, r3, r8
 8009a66:	d081      	beq.n	800996c <_strtod_l+0x7f4>
 8009a68:	b1e5      	cbz	r5, 8009aa4 <_strtod_l+0x92c>
 8009a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6c:	421d      	tst	r5, r3
 8009a6e:	d0ef      	beq.n	8009a50 <_strtod_l+0x8d8>
 8009a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	9a05      	ldr	r2, [sp, #20]
 8009a78:	b1c3      	cbz	r3, 8009aac <_strtod_l+0x934>
 8009a7a:	f7ff fb5b 	bl	8009134 <sulp>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a86:	f7f6 fb71 	bl	800016c <__adddf3>
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	e7df      	b.n	8009a50 <_strtod_l+0x8d8>
 8009a90:	4013      	ands	r3, r2
 8009a92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a96:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009a9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009a9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009aa2:	e7d5      	b.n	8009a50 <_strtod_l+0x8d8>
 8009aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa6:	ea13 0f08 	tst.w	r3, r8
 8009aaa:	e7e0      	b.n	8009a6e <_strtod_l+0x8f6>
 8009aac:	f7ff fb42 	bl	8009134 <sulp>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4689      	mov	r9, r1
 8009ac4:	f7f6 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d0c1      	beq.n	8009a50 <_strtod_l+0x8d8>
 8009acc:	e608      	b.n	80096e0 <_strtod_l+0x568>
 8009ace:	4658      	mov	r0, fp
 8009ad0:	9904      	ldr	r1, [sp, #16]
 8009ad2:	f002 f81f 	bl	800bb14 <__ratio>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009adc:	4606      	mov	r6, r0
 8009ade:	460f      	mov	r7, r1
 8009ae0:	f7f6 ff76 	bl	80009d0 <__aeabi_dcmple>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d070      	beq.n	8009bca <_strtod_l+0xa52>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d042      	beq.n	8009b74 <_strtod_l+0x9fc>
 8009aee:	2600      	movs	r6, #0
 8009af0:	4f62      	ldr	r7, [pc, #392]	; (8009c7c <_strtod_l+0xb04>)
 8009af2:	4d62      	ldr	r5, [pc, #392]	; (8009c7c <_strtod_l+0xb04>)
 8009af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009afa:	0d1b      	lsrs	r3, r3, #20
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b02:	4b5f      	ldr	r3, [pc, #380]	; (8009c80 <_strtod_l+0xb08>)
 8009b04:	429a      	cmp	r2, r3
 8009b06:	f040 80c3 	bne.w	8009c90 <_strtod_l+0xb18>
 8009b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009b12:	4649      	mov	r1, r9
 8009b14:	f001 ff28 	bl	800b968 <__ulp>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 fcda 	bl	80004d8 <__aeabi_dmul>
 8009b24:	4642      	mov	r2, r8
 8009b26:	464b      	mov	r3, r9
 8009b28:	f7f6 fb20 	bl	800016c <__adddf3>
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4951      	ldr	r1, [pc, #324]	; (8009c74 <_strtod_l+0xafc>)
 8009b30:	4a54      	ldr	r2, [pc, #336]	; (8009c84 <_strtod_l+0xb0c>)
 8009b32:	4019      	ands	r1, r3
 8009b34:	4291      	cmp	r1, r2
 8009b36:	4680      	mov	r8, r0
 8009b38:	d95d      	bls.n	8009bf6 <_strtod_l+0xa7e>
 8009b3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b3c:	4b4e      	ldr	r3, [pc, #312]	; (8009c78 <_strtod_l+0xb00>)
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d103      	bne.n	8009b4a <_strtod_l+0x9d2>
 8009b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b44:	3301      	adds	r3, #1
 8009b46:	f43f ad56 	beq.w	80095f6 <_strtod_l+0x47e>
 8009b4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009b4e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009c78 <_strtod_l+0xb00>
 8009b52:	4650      	mov	r0, sl
 8009b54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b56:	f001 fbd7 	bl	800b308 <_Bfree>
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	9906      	ldr	r1, [sp, #24]
 8009b5e:	f001 fbd3 	bl	800b308 <_Bfree>
 8009b62:	4650      	mov	r0, sl
 8009b64:	9904      	ldr	r1, [sp, #16]
 8009b66:	f001 fbcf 	bl	800b308 <_Bfree>
 8009b6a:	4659      	mov	r1, fp
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	f001 fbcb 	bl	800b308 <_Bfree>
 8009b72:	e627      	b.n	80097c4 <_strtod_l+0x64c>
 8009b74:	f1b8 0f00 	cmp.w	r8, #0
 8009b78:	d119      	bne.n	8009bae <_strtod_l+0xa36>
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b80:	b9e3      	cbnz	r3, 8009bbc <_strtod_l+0xa44>
 8009b82:	2200      	movs	r2, #0
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <_strtod_l+0xb04>)
 8009b8a:	f7f6 ff17 	bl	80009bc <__aeabi_dcmplt>
 8009b8e:	b9c8      	cbnz	r0, 8009bc4 <_strtod_l+0xa4c>
 8009b90:	2200      	movs	r2, #0
 8009b92:	4630      	mov	r0, r6
 8009b94:	4639      	mov	r1, r7
 8009b96:	4b3c      	ldr	r3, [pc, #240]	; (8009c88 <_strtod_l+0xb10>)
 8009b98:	f7f6 fc9e 	bl	80004d8 <__aeabi_dmul>
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	460d      	mov	r5, r1
 8009ba0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009ba4:	9416      	str	r4, [sp, #88]	; 0x58
 8009ba6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ba8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009bac:	e7a2      	b.n	8009af4 <_strtod_l+0x97c>
 8009bae:	f1b8 0f01 	cmp.w	r8, #1
 8009bb2:	d103      	bne.n	8009bbc <_strtod_l+0xa44>
 8009bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f43f ad92 	beq.w	80096e0 <_strtod_l+0x568>
 8009bbc:	2600      	movs	r6, #0
 8009bbe:	2400      	movs	r4, #0
 8009bc0:	4f32      	ldr	r7, [pc, #200]	; (8009c8c <_strtod_l+0xb14>)
 8009bc2:	e796      	b.n	8009af2 <_strtod_l+0x97a>
 8009bc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009bc6:	4d30      	ldr	r5, [pc, #192]	; (8009c88 <_strtod_l+0xb10>)
 8009bc8:	e7ea      	b.n	8009ba0 <_strtod_l+0xa28>
 8009bca:	4b2f      	ldr	r3, [pc, #188]	; (8009c88 <_strtod_l+0xb10>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 fc81 	bl	80004d8 <__aeabi_dmul>
 8009bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	b933      	cbnz	r3, 8009bec <_strtod_l+0xa74>
 8009bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009be2:	9010      	str	r0, [sp, #64]	; 0x40
 8009be4:	9311      	str	r3, [sp, #68]	; 0x44
 8009be6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009bea:	e783      	b.n	8009af4 <_strtod_l+0x97c>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009bf4:	e7f7      	b.n	8009be6 <_strtod_l+0xa6e>
 8009bf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009bfa:	9b05      	ldr	r3, [sp, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1a8      	bne.n	8009b52 <_strtod_l+0x9da>
 8009c00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c06:	0d1b      	lsrs	r3, r3, #20
 8009c08:	051b      	lsls	r3, r3, #20
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d1a1      	bne.n	8009b52 <_strtod_l+0x9da>
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f7 fa7d 	bl	8001110 <__aeabi_d2lz>
 8009c16:	f7f6 fc31 	bl	800047c <__aeabi_l2d>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 faa1 	bl	8000168 <__aeabi_dsub>
 8009c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c2c:	ea43 0308 	orr.w	r3, r3, r8
 8009c30:	4313      	orrs	r3, r2
 8009c32:	4604      	mov	r4, r0
 8009c34:	460d      	mov	r5, r1
 8009c36:	d066      	beq.n	8009d06 <_strtod_l+0xb8e>
 8009c38:	a309      	add	r3, pc, #36	; (adr r3, 8009c60 <_strtod_l+0xae8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 febd 	bl	80009bc <__aeabi_dcmplt>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f47f ace2 	bne.w	800960c <_strtod_l+0x494>
 8009c48:	a307      	add	r3, pc, #28	; (adr r3, 8009c68 <_strtod_l+0xaf0>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 fed1 	bl	80009f8 <__aeabi_dcmpgt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f af7b 	beq.w	8009b52 <_strtod_l+0x9da>
 8009c5c:	e4d6      	b.n	800960c <_strtod_l+0x494>
 8009c5e:	bf00      	nop
 8009c60:	94a03595 	.word	0x94a03595
 8009c64:	3fdfffff 	.word	0x3fdfffff
 8009c68:	35afe535 	.word	0x35afe535
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	000fffff 	.word	0x000fffff
 8009c74:	7ff00000 	.word	0x7ff00000
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	7fe00000 	.word	0x7fe00000
 8009c84:	7c9fffff 	.word	0x7c9fffff
 8009c88:	3fe00000 	.word	0x3fe00000
 8009c8c:	bff00000 	.word	0xbff00000
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	b313      	cbz	r3, 8009cda <_strtod_l+0xb62>
 8009c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c9a:	d81e      	bhi.n	8009cda <_strtod_l+0xb62>
 8009c9c:	a326      	add	r3, pc, #152	; (adr r3, 8009d38 <_strtod_l+0xbc0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7f6 fe93 	bl	80009d0 <__aeabi_dcmple>
 8009caa:	b190      	cbz	r0, 8009cd2 <_strtod_l+0xb5a>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7f6 feea 	bl	8000a88 <__aeabi_d2uiz>
 8009cb4:	2801      	cmp	r0, #1
 8009cb6:	bf38      	it	cc
 8009cb8:	2001      	movcc	r0, #1
 8009cba:	f7f6 fb93 	bl	80003e4 <__aeabi_ui2d>
 8009cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	b9d3      	cbnz	r3, 8009cfc <_strtod_l+0xb84>
 8009cc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cca:	9012      	str	r0, [sp, #72]	; 0x48
 8009ccc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009cd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cd4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009cd8:	1a9f      	subs	r7, r3, r2
 8009cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cde:	f001 fe43 	bl	800b968 <__ulp>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 fbf5 	bl	80004d8 <__aeabi_dmul>
 8009cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cf2:	f7f6 fa3b 	bl	800016c <__adddf3>
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	4689      	mov	r9, r1
 8009cfa:	e77e      	b.n	8009bfa <_strtod_l+0xa82>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009d04:	e7e3      	b.n	8009cce <_strtod_l+0xb56>
 8009d06:	a30e      	add	r3, pc, #56	; (adr r3, 8009d40 <_strtod_l+0xbc8>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fe56 	bl	80009bc <__aeabi_dcmplt>
 8009d10:	e7a1      	b.n	8009c56 <_strtod_l+0xade>
 8009d12:	2300      	movs	r3, #0
 8009d14:	930a      	str	r3, [sp, #40]	; 0x28
 8009d16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	f7ff ba71 	b.w	8009202 <_strtod_l+0x8a>
 8009d20:	2a65      	cmp	r2, #101	; 0x65
 8009d22:	f43f ab63 	beq.w	80093ec <_strtod_l+0x274>
 8009d26:	2a45      	cmp	r2, #69	; 0x45
 8009d28:	f43f ab60 	beq.w	80093ec <_strtod_l+0x274>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f7ff bb95 	b.w	800945c <_strtod_l+0x2e4>
 8009d32:	bf00      	nop
 8009d34:	f3af 8000 	nop.w
 8009d38:	ffc00000 	.word	0xffc00000
 8009d3c:	41dfffff 	.word	0x41dfffff
 8009d40:	94a03595 	.word	0x94a03595
 8009d44:	3fcfffff 	.word	0x3fcfffff

08009d48 <strtod>:
 8009d48:	460a      	mov	r2, r1
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4802      	ldr	r0, [pc, #8]	; (8009d58 <strtod+0x10>)
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <strtod+0x14>)
 8009d50:	6800      	ldr	r0, [r0, #0]
 8009d52:	f7ff ba11 	b.w	8009178 <_strtod_l>
 8009d56:	bf00      	nop
 8009d58:	200000f0 	.word	0x200000f0
 8009d5c:	20000158 	.word	0x20000158

08009d60 <_strtol_l.constprop.0>:
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d66:	4680      	mov	r8, r0
 8009d68:	d001      	beq.n	8009d6e <_strtol_l.constprop.0+0xe>
 8009d6a:	2b24      	cmp	r3, #36	; 0x24
 8009d6c:	d906      	bls.n	8009d7c <_strtol_l.constprop.0+0x1c>
 8009d6e:	f7fe fd0d 	bl	800878c <__errno>
 8009d72:	2316      	movs	r3, #22
 8009d74:	6003      	str	r3, [r0, #0]
 8009d76:	2000      	movs	r0, #0
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	4f35      	ldr	r7, [pc, #212]	; (8009e54 <_strtol_l.constprop.0+0xf4>)
 8009d80:	4628      	mov	r0, r5
 8009d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d86:	5de6      	ldrb	r6, [r4, r7]
 8009d88:	f016 0608 	ands.w	r6, r6, #8
 8009d8c:	d1f8      	bne.n	8009d80 <_strtol_l.constprop.0+0x20>
 8009d8e:	2c2d      	cmp	r4, #45	; 0x2d
 8009d90:	d12f      	bne.n	8009df2 <_strtol_l.constprop.0+0x92>
 8009d92:	2601      	movs	r6, #1
 8009d94:	782c      	ldrb	r4, [r5, #0]
 8009d96:	1c85      	adds	r5, r0, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d057      	beq.n	8009e4c <_strtol_l.constprop.0+0xec>
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	d109      	bne.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009da0:	2c30      	cmp	r4, #48	; 0x30
 8009da2:	d107      	bne.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009da4:	7828      	ldrb	r0, [r5, #0]
 8009da6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009daa:	2858      	cmp	r0, #88	; 0x58
 8009dac:	d149      	bne.n	8009e42 <_strtol_l.constprop.0+0xe2>
 8009dae:	2310      	movs	r3, #16
 8009db0:	786c      	ldrb	r4, [r5, #1]
 8009db2:	3502      	adds	r5, #2
 8009db4:	2700      	movs	r7, #0
 8009db6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009dba:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009dbe:	fbbe f9f3 	udiv	r9, lr, r3
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	fb03 ea19 	mls	sl, r3, r9, lr
 8009dc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009dcc:	f1bc 0f09 	cmp.w	ip, #9
 8009dd0:	d814      	bhi.n	8009dfc <_strtol_l.constprop.0+0x9c>
 8009dd2:	4664      	mov	r4, ip
 8009dd4:	42a3      	cmp	r3, r4
 8009dd6:	dd22      	ble.n	8009e1e <_strtol_l.constprop.0+0xbe>
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	db1d      	blt.n	8009e18 <_strtol_l.constprop.0+0xb8>
 8009ddc:	4581      	cmp	r9, r0
 8009dde:	d31b      	bcc.n	8009e18 <_strtol_l.constprop.0+0xb8>
 8009de0:	d101      	bne.n	8009de6 <_strtol_l.constprop.0+0x86>
 8009de2:	45a2      	cmp	sl, r4
 8009de4:	db18      	blt.n	8009e18 <_strtol_l.constprop.0+0xb8>
 8009de6:	2701      	movs	r7, #1
 8009de8:	fb00 4003 	mla	r0, r0, r3, r4
 8009dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009df0:	e7ea      	b.n	8009dc8 <_strtol_l.constprop.0+0x68>
 8009df2:	2c2b      	cmp	r4, #43	; 0x2b
 8009df4:	bf04      	itt	eq
 8009df6:	782c      	ldrbeq	r4, [r5, #0]
 8009df8:	1c85      	addeq	r5, r0, #2
 8009dfa:	e7cd      	b.n	8009d98 <_strtol_l.constprop.0+0x38>
 8009dfc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e00:	f1bc 0f19 	cmp.w	ip, #25
 8009e04:	d801      	bhi.n	8009e0a <_strtol_l.constprop.0+0xaa>
 8009e06:	3c37      	subs	r4, #55	; 0x37
 8009e08:	e7e4      	b.n	8009dd4 <_strtol_l.constprop.0+0x74>
 8009e0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009e0e:	f1bc 0f19 	cmp.w	ip, #25
 8009e12:	d804      	bhi.n	8009e1e <_strtol_l.constprop.0+0xbe>
 8009e14:	3c57      	subs	r4, #87	; 0x57
 8009e16:	e7dd      	b.n	8009dd4 <_strtol_l.constprop.0+0x74>
 8009e18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e1c:	e7e6      	b.n	8009dec <_strtol_l.constprop.0+0x8c>
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	da07      	bge.n	8009e32 <_strtol_l.constprop.0+0xd2>
 8009e22:	2322      	movs	r3, #34	; 0x22
 8009e24:	4670      	mov	r0, lr
 8009e26:	f8c8 3000 	str.w	r3, [r8]
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	d0a4      	beq.n	8009d78 <_strtol_l.constprop.0+0x18>
 8009e2e:	1e69      	subs	r1, r5, #1
 8009e30:	e005      	b.n	8009e3e <_strtol_l.constprop.0+0xde>
 8009e32:	b106      	cbz	r6, 8009e36 <_strtol_l.constprop.0+0xd6>
 8009e34:	4240      	negs	r0, r0
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	d09e      	beq.n	8009d78 <_strtol_l.constprop.0+0x18>
 8009e3a:	2f00      	cmp	r7, #0
 8009e3c:	d1f7      	bne.n	8009e2e <_strtol_l.constprop.0+0xce>
 8009e3e:	6011      	str	r1, [r2, #0]
 8009e40:	e79a      	b.n	8009d78 <_strtol_l.constprop.0+0x18>
 8009e42:	2430      	movs	r4, #48	; 0x30
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1b5      	bne.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009e48:	2308      	movs	r3, #8
 8009e4a:	e7b3      	b.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009e4c:	2c30      	cmp	r4, #48	; 0x30
 8009e4e:	d0a9      	beq.n	8009da4 <_strtol_l.constprop.0+0x44>
 8009e50:	230a      	movs	r3, #10
 8009e52:	e7af      	b.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009e54:	0800cd69 	.word	0x0800cd69

08009e58 <strtol>:
 8009e58:	4613      	mov	r3, r2
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4802      	ldr	r0, [pc, #8]	; (8009e68 <strtol+0x10>)
 8009e60:	6800      	ldr	r0, [r0, #0]
 8009e62:	f7ff bf7d 	b.w	8009d60 <_strtol_l.constprop.0>
 8009e66:	bf00      	nop
 8009e68:	200000f0 	.word	0x200000f0

08009e6c <quorem>:
 8009e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	6903      	ldr	r3, [r0, #16]
 8009e72:	690c      	ldr	r4, [r1, #16]
 8009e74:	4607      	mov	r7, r0
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	f2c0 8082 	blt.w	8009f80 <quorem+0x114>
 8009e7c:	3c01      	subs	r4, #1
 8009e7e:	f100 0514 	add.w	r5, r0, #20
 8009e82:	f101 0814 	add.w	r8, r1, #20
 8009e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e94:	3301      	adds	r3, #1
 8009e96:	429a      	cmp	r2, r3
 8009e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ea4:	d331      	bcc.n	8009f0a <quorem+0x9e>
 8009ea6:	f04f 0e00 	mov.w	lr, #0
 8009eaa:	4640      	mov	r0, r8
 8009eac:	46ac      	mov	ip, r5
 8009eae:	46f2      	mov	sl, lr
 8009eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009eb4:	b293      	uxth	r3, r2
 8009eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8009eba:	0c12      	lsrs	r2, r2, #16
 8009ebc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ec6:	ebaa 0303 	sub.w	r3, sl, r3
 8009eca:	f8dc a000 	ldr.w	sl, [ip]
 8009ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ed2:	fa1f fa8a 	uxth.w	sl, sl
 8009ed6:	4453      	add	r3, sl
 8009ed8:	f8dc a000 	ldr.w	sl, [ip]
 8009edc:	b292      	uxth	r2, r2
 8009ede:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ee2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eec:	4581      	cmp	r9, r0
 8009eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ef2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ef6:	d2db      	bcs.n	8009eb0 <quorem+0x44>
 8009ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009efc:	b92b      	cbnz	r3, 8009f0a <quorem+0x9e>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	3b04      	subs	r3, #4
 8009f02:	429d      	cmp	r5, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	d32f      	bcc.n	8009f68 <quorem+0xfc>
 8009f08:	613c      	str	r4, [r7, #16]
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f001 fc84 	bl	800b818 <__mcmp>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	db25      	blt.n	8009f60 <quorem+0xf4>
 8009f14:	4628      	mov	r0, r5
 8009f16:	f04f 0c00 	mov.w	ip, #0
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f20:	f8d0 e000 	ldr.w	lr, [r0]
 8009f24:	b28b      	uxth	r3, r1
 8009f26:	ebac 0303 	sub.w	r3, ip, r3
 8009f2a:	fa1f f28e 	uxth.w	r2, lr
 8009f2e:	4413      	add	r3, r2
 8009f30:	0c0a      	lsrs	r2, r1, #16
 8009f32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f40:	45c1      	cmp	r9, r8
 8009f42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f46:	f840 3b04 	str.w	r3, [r0], #4
 8009f4a:	d2e7      	bcs.n	8009f1c <quorem+0xb0>
 8009f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f54:	b922      	cbnz	r2, 8009f60 <quorem+0xf4>
 8009f56:	3b04      	subs	r3, #4
 8009f58:	429d      	cmp	r5, r3
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	d30a      	bcc.n	8009f74 <quorem+0x108>
 8009f5e:	613c      	str	r4, [r7, #16]
 8009f60:	4630      	mov	r0, r6
 8009f62:	b003      	add	sp, #12
 8009f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	3b04      	subs	r3, #4
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d1cb      	bne.n	8009f08 <quorem+0x9c>
 8009f70:	3c01      	subs	r4, #1
 8009f72:	e7c6      	b.n	8009f02 <quorem+0x96>
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	3b04      	subs	r3, #4
 8009f78:	2a00      	cmp	r2, #0
 8009f7a:	d1f0      	bne.n	8009f5e <quorem+0xf2>
 8009f7c:	3c01      	subs	r4, #1
 8009f7e:	e7eb      	b.n	8009f58 <quorem+0xec>
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7ee      	b.n	8009f62 <quorem+0xf6>
 8009f84:	0000      	movs	r0, r0
	...

08009f88 <_dtoa_r>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	461f      	mov	r7, r3
 8009f90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f92:	b099      	sub	sp, #100	; 0x64
 8009f94:	4605      	mov	r5, r0
 8009f96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f9e:	b974      	cbnz	r4, 8009fbe <_dtoa_r+0x36>
 8009fa0:	2010      	movs	r0, #16
 8009fa2:	f001 f949 	bl	800b238 <malloc>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6268      	str	r0, [r5, #36]	; 0x24
 8009faa:	b920      	cbnz	r0, 8009fb6 <_dtoa_r+0x2e>
 8009fac:	21ea      	movs	r1, #234	; 0xea
 8009fae:	4ba8      	ldr	r3, [pc, #672]	; (800a250 <_dtoa_r+0x2c8>)
 8009fb0:	48a8      	ldr	r0, [pc, #672]	; (800a254 <_dtoa_r+0x2cc>)
 8009fb2:	f002 f891 	bl	800c0d8 <__assert_func>
 8009fb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fba:	6004      	str	r4, [r0, #0]
 8009fbc:	60c4      	str	r4, [r0, #12]
 8009fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fc0:	6819      	ldr	r1, [r3, #0]
 8009fc2:	b151      	cbz	r1, 8009fda <_dtoa_r+0x52>
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4093      	lsls	r3, r2
 8009fca:	604a      	str	r2, [r1, #4]
 8009fcc:	608b      	str	r3, [r1, #8]
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f001 f99a 	bl	800b308 <_Bfree>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	1e3b      	subs	r3, r7, #0
 8009fdc:	bfaf      	iteee	ge
 8009fde:	2300      	movge	r3, #0
 8009fe0:	2201      	movlt	r2, #1
 8009fe2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fe6:	9305      	strlt	r3, [sp, #20]
 8009fe8:	bfa8      	it	ge
 8009fea:	f8c8 3000 	strge.w	r3, [r8]
 8009fee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009ff2:	4b99      	ldr	r3, [pc, #612]	; (800a258 <_dtoa_r+0x2d0>)
 8009ff4:	bfb8      	it	lt
 8009ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8009ffa:	ea33 0309 	bics.w	r3, r3, r9
 8009ffe:	d119      	bne.n	800a034 <_dtoa_r+0xac>
 800a000:	f242 730f 	movw	r3, #9999	; 0x270f
 800a004:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a00c:	4333      	orrs	r3, r6
 800a00e:	f000 857f 	beq.w	800ab10 <_dtoa_r+0xb88>
 800a012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a014:	b953      	cbnz	r3, 800a02c <_dtoa_r+0xa4>
 800a016:	4b91      	ldr	r3, [pc, #580]	; (800a25c <_dtoa_r+0x2d4>)
 800a018:	e022      	b.n	800a060 <_dtoa_r+0xd8>
 800a01a:	4b91      	ldr	r3, [pc, #580]	; (800a260 <_dtoa_r+0x2d8>)
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	3308      	adds	r3, #8
 800a020:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	9803      	ldr	r0, [sp, #12]
 800a026:	b019      	add	sp, #100	; 0x64
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	4b8b      	ldr	r3, [pc, #556]	; (800a25c <_dtoa_r+0x2d4>)
 800a02e:	9303      	str	r3, [sp, #12]
 800a030:	3303      	adds	r3, #3
 800a032:	e7f5      	b.n	800a020 <_dtoa_r+0x98>
 800a034:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a038:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a03c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	f7f6 fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 800a048:	4680      	mov	r8, r0
 800a04a:	b158      	cbz	r0, 800a064 <_dtoa_r+0xdc>
 800a04c:	2301      	movs	r3, #1
 800a04e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8558 	beq.w	800ab0a <_dtoa_r+0xb82>
 800a05a:	4882      	ldr	r0, [pc, #520]	; (800a264 <_dtoa_r+0x2dc>)
 800a05c:	6018      	str	r0, [r3, #0]
 800a05e:	1e43      	subs	r3, r0, #1
 800a060:	9303      	str	r3, [sp, #12]
 800a062:	e7df      	b.n	800a024 <_dtoa_r+0x9c>
 800a064:	ab16      	add	r3, sp, #88	; 0x58
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	ab17      	add	r3, sp, #92	; 0x5c
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	4628      	mov	r0, r5
 800a06e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a072:	f001 fcf3 	bl	800ba5c <__d2b>
 800a076:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a07a:	4683      	mov	fp, r0
 800a07c:	2c00      	cmp	r4, #0
 800a07e:	d07f      	beq.n	800a180 <_dtoa_r+0x1f8>
 800a080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a086:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a08a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a08e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a092:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a096:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a09a:	2200      	movs	r2, #0
 800a09c:	4b72      	ldr	r3, [pc, #456]	; (800a268 <_dtoa_r+0x2e0>)
 800a09e:	f7f6 f863 	bl	8000168 <__aeabi_dsub>
 800a0a2:	a365      	add	r3, pc, #404	; (adr r3, 800a238 <_dtoa_r+0x2b0>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7f6 fa16 	bl	80004d8 <__aeabi_dmul>
 800a0ac:	a364      	add	r3, pc, #400	; (adr r3, 800a240 <_dtoa_r+0x2b8>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f85b 	bl	800016c <__adddf3>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	f7f6 f9a2 	bl	8000404 <__aeabi_i2d>
 800a0c0:	a361      	add	r3, pc, #388	; (adr r3, 800a248 <_dtoa_r+0x2c0>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 fa07 	bl	80004d8 <__aeabi_dmul>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	f7f6 f84b 	bl	800016c <__adddf3>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	f7f6 fcad 	bl	8000a38 <__aeabi_d2iz>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 fc68 	bl	80009bc <__aeabi_dcmplt>
 800a0ec:	b148      	cbz	r0, 800a102 <_dtoa_r+0x17a>
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f7f6 f988 	bl	8000404 <__aeabi_i2d>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	f7f6 fc56 	bl	80009a8 <__aeabi_dcmpeq>
 800a0fc:	b908      	cbnz	r0, 800a102 <_dtoa_r+0x17a>
 800a0fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a102:	f1ba 0f16 	cmp.w	sl, #22
 800a106:	d858      	bhi.n	800a1ba <_dtoa_r+0x232>
 800a108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a10c:	4b57      	ldr	r3, [pc, #348]	; (800a26c <_dtoa_r+0x2e4>)
 800a10e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 fc51 	bl	80009bc <__aeabi_dcmplt>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d04f      	beq.n	800a1be <_dtoa_r+0x236>
 800a11e:	2300      	movs	r3, #0
 800a120:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a124:	930f      	str	r3, [sp, #60]	; 0x3c
 800a126:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a128:	1b1c      	subs	r4, r3, r4
 800a12a:	1e63      	subs	r3, r4, #1
 800a12c:	9309      	str	r3, [sp, #36]	; 0x24
 800a12e:	bf49      	itett	mi
 800a130:	f1c4 0301 	rsbmi	r3, r4, #1
 800a134:	2300      	movpl	r3, #0
 800a136:	9306      	strmi	r3, [sp, #24]
 800a138:	2300      	movmi	r3, #0
 800a13a:	bf54      	ite	pl
 800a13c:	9306      	strpl	r3, [sp, #24]
 800a13e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	db3d      	blt.n	800a1c2 <_dtoa_r+0x23a>
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a14c:	4453      	add	r3, sl
 800a14e:	9309      	str	r3, [sp, #36]	; 0x24
 800a150:	2300      	movs	r3, #0
 800a152:	930a      	str	r3, [sp, #40]	; 0x28
 800a154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a156:	2b09      	cmp	r3, #9
 800a158:	f200 808c 	bhi.w	800a274 <_dtoa_r+0x2ec>
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	bfc4      	itt	gt
 800a160:	3b04      	subgt	r3, #4
 800a162:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a166:	bfc8      	it	gt
 800a168:	2400      	movgt	r4, #0
 800a16a:	f1a3 0302 	sub.w	r3, r3, #2
 800a16e:	bfd8      	it	le
 800a170:	2401      	movle	r4, #1
 800a172:	2b03      	cmp	r3, #3
 800a174:	f200 808a 	bhi.w	800a28c <_dtoa_r+0x304>
 800a178:	e8df f003 	tbb	[pc, r3]
 800a17c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a180:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a184:	441c      	add	r4, r3
 800a186:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	bfc3      	ittte	gt
 800a18e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a192:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a196:	fa09 f303 	lslgt.w	r3, r9, r3
 800a19a:	f1c3 0320 	rsble	r3, r3, #32
 800a19e:	bfc6      	itte	gt
 800a1a0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1a4:	4318      	orrgt	r0, r3
 800a1a6:	fa06 f003 	lslle.w	r0, r6, r3
 800a1aa:	f7f6 f91b 	bl	80003e4 <__aeabi_ui2d>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1b4:	3c01      	subs	r4, #1
 800a1b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1b8:	e76f      	b.n	800a09a <_dtoa_r+0x112>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e7b2      	b.n	800a124 <_dtoa_r+0x19c>
 800a1be:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1c0:	e7b1      	b.n	800a126 <_dtoa_r+0x19e>
 800a1c2:	9b06      	ldr	r3, [sp, #24]
 800a1c4:	eba3 030a 	sub.w	r3, r3, sl
 800a1c8:	9306      	str	r3, [sp, #24]
 800a1ca:	f1ca 0300 	rsb	r3, sl, #0
 800a1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d4:	e7be      	b.n	800a154 <_dtoa_r+0x1cc>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dc58      	bgt.n	800a292 <_dtoa_r+0x30a>
 800a1e0:	f04f 0901 	mov.w	r9, #1
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a1ea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a1f2:	6042      	str	r2, [r0, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	f102 0614 	add.w	r6, r2, #20
 800a1fa:	429e      	cmp	r6, r3
 800a1fc:	6841      	ldr	r1, [r0, #4]
 800a1fe:	d94e      	bls.n	800a29e <_dtoa_r+0x316>
 800a200:	4628      	mov	r0, r5
 800a202:	f001 f841 	bl	800b288 <_Balloc>
 800a206:	9003      	str	r0, [sp, #12]
 800a208:	2800      	cmp	r0, #0
 800a20a:	d14c      	bne.n	800a2a6 <_dtoa_r+0x31e>
 800a20c:	4602      	mov	r2, r0
 800a20e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a212:	4b17      	ldr	r3, [pc, #92]	; (800a270 <_dtoa_r+0x2e8>)
 800a214:	e6cc      	b.n	8009fb0 <_dtoa_r+0x28>
 800a216:	2301      	movs	r3, #1
 800a218:	e7de      	b.n	800a1d8 <_dtoa_r+0x250>
 800a21a:	2300      	movs	r3, #0
 800a21c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a220:	eb0a 0903 	add.w	r9, sl, r3
 800a224:	f109 0301 	add.w	r3, r9, #1
 800a228:	2b01      	cmp	r3, #1
 800a22a:	9308      	str	r3, [sp, #32]
 800a22c:	bfb8      	it	lt
 800a22e:	2301      	movlt	r3, #1
 800a230:	e7dd      	b.n	800a1ee <_dtoa_r+0x266>
 800a232:	2301      	movs	r3, #1
 800a234:	e7f2      	b.n	800a21c <_dtoa_r+0x294>
 800a236:	bf00      	nop
 800a238:	636f4361 	.word	0x636f4361
 800a23c:	3fd287a7 	.word	0x3fd287a7
 800a240:	8b60c8b3 	.word	0x8b60c8b3
 800a244:	3fc68a28 	.word	0x3fc68a28
 800a248:	509f79fb 	.word	0x509f79fb
 800a24c:	3fd34413 	.word	0x3fd34413
 800a250:	0800ce76 	.word	0x0800ce76
 800a254:	0800ce8d 	.word	0x0800ce8d
 800a258:	7ff00000 	.word	0x7ff00000
 800a25c:	0800ce72 	.word	0x0800ce72
 800a260:	0800ce69 	.word	0x0800ce69
 800a264:	0800ccf1 	.word	0x0800ccf1
 800a268:	3ff80000 	.word	0x3ff80000
 800a26c:	0800cff8 	.word	0x0800cff8
 800a270:	0800cee8 	.word	0x0800cee8
 800a274:	2401      	movs	r4, #1
 800a276:	2300      	movs	r3, #0
 800a278:	940b      	str	r4, [sp, #44]	; 0x2c
 800a27a:	9322      	str	r3, [sp, #136]	; 0x88
 800a27c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a280:	2200      	movs	r2, #0
 800a282:	2312      	movs	r3, #18
 800a284:	f8cd 9020 	str.w	r9, [sp, #32]
 800a288:	9223      	str	r2, [sp, #140]	; 0x8c
 800a28a:	e7b0      	b.n	800a1ee <_dtoa_r+0x266>
 800a28c:	2301      	movs	r3, #1
 800a28e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a290:	e7f4      	b.n	800a27c <_dtoa_r+0x2f4>
 800a292:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a296:	464b      	mov	r3, r9
 800a298:	f8cd 9020 	str.w	r9, [sp, #32]
 800a29c:	e7a7      	b.n	800a1ee <_dtoa_r+0x266>
 800a29e:	3101      	adds	r1, #1
 800a2a0:	6041      	str	r1, [r0, #4]
 800a2a2:	0052      	lsls	r2, r2, #1
 800a2a4:	e7a7      	b.n	800a1f6 <_dtoa_r+0x26e>
 800a2a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2a8:	9a03      	ldr	r2, [sp, #12]
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	9b08      	ldr	r3, [sp, #32]
 800a2ae:	2b0e      	cmp	r3, #14
 800a2b0:	f200 80a8 	bhi.w	800a404 <_dtoa_r+0x47c>
 800a2b4:	2c00      	cmp	r4, #0
 800a2b6:	f000 80a5 	beq.w	800a404 <_dtoa_r+0x47c>
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	dd34      	ble.n	800a32a <_dtoa_r+0x3a2>
 800a2c0:	4a9a      	ldr	r2, [pc, #616]	; (800a52c <_dtoa_r+0x5a4>)
 800a2c2:	f00a 030f 	and.w	r3, sl, #15
 800a2c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2ca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2d6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a2da:	d016      	beq.n	800a30a <_dtoa_r+0x382>
 800a2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2e0:	4b93      	ldr	r3, [pc, #588]	; (800a530 <_dtoa_r+0x5a8>)
 800a2e2:	2703      	movs	r7, #3
 800a2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e8:	f7f6 fa20 	bl	800072c <__aeabi_ddiv>
 800a2ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f0:	f004 040f 	and.w	r4, r4, #15
 800a2f4:	4e8e      	ldr	r6, [pc, #568]	; (800a530 <_dtoa_r+0x5a8>)
 800a2f6:	b954      	cbnz	r4, 800a30e <_dtoa_r+0x386>
 800a2f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a300:	f7f6 fa14 	bl	800072c <__aeabi_ddiv>
 800a304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a308:	e029      	b.n	800a35e <_dtoa_r+0x3d6>
 800a30a:	2702      	movs	r7, #2
 800a30c:	e7f2      	b.n	800a2f4 <_dtoa_r+0x36c>
 800a30e:	07e1      	lsls	r1, r4, #31
 800a310:	d508      	bpl.n	800a324 <_dtoa_r+0x39c>
 800a312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a316:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a31a:	f7f6 f8dd 	bl	80004d8 <__aeabi_dmul>
 800a31e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a322:	3701      	adds	r7, #1
 800a324:	1064      	asrs	r4, r4, #1
 800a326:	3608      	adds	r6, #8
 800a328:	e7e5      	b.n	800a2f6 <_dtoa_r+0x36e>
 800a32a:	f000 80a5 	beq.w	800a478 <_dtoa_r+0x4f0>
 800a32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a332:	f1ca 0400 	rsb	r4, sl, #0
 800a336:	4b7d      	ldr	r3, [pc, #500]	; (800a52c <_dtoa_r+0x5a4>)
 800a338:	f004 020f 	and.w	r2, r4, #15
 800a33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f7f6 f8c8 	bl	80004d8 <__aeabi_dmul>
 800a348:	2702      	movs	r7, #2
 800a34a:	2300      	movs	r3, #0
 800a34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a350:	4e77      	ldr	r6, [pc, #476]	; (800a530 <_dtoa_r+0x5a8>)
 800a352:	1124      	asrs	r4, r4, #4
 800a354:	2c00      	cmp	r4, #0
 800a356:	f040 8084 	bne.w	800a462 <_dtoa_r+0x4da>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1d2      	bne.n	800a304 <_dtoa_r+0x37c>
 800a35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 808b 	beq.w	800a47c <_dtoa_r+0x4f4>
 800a366:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a36a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a36e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a372:	2200      	movs	r2, #0
 800a374:	4b6f      	ldr	r3, [pc, #444]	; (800a534 <_dtoa_r+0x5ac>)
 800a376:	f7f6 fb21 	bl	80009bc <__aeabi_dcmplt>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d07e      	beq.n	800a47c <_dtoa_r+0x4f4>
 800a37e:	9b08      	ldr	r3, [sp, #32]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d07b      	beq.n	800a47c <_dtoa_r+0x4f4>
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	dd38      	ble.n	800a3fc <_dtoa_r+0x474>
 800a38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a38e:	2200      	movs	r2, #0
 800a390:	4b69      	ldr	r3, [pc, #420]	; (800a538 <_dtoa_r+0x5b0>)
 800a392:	f7f6 f8a1 	bl	80004d8 <__aeabi_dmul>
 800a396:	464c      	mov	r4, r9
 800a398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a39c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a3a0:	3701      	adds	r7, #1
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f7f6 f82e 	bl	8000404 <__aeabi_i2d>
 800a3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ac:	f7f6 f894 	bl	80004d8 <__aeabi_dmul>
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4b62      	ldr	r3, [pc, #392]	; (800a53c <_dtoa_r+0x5b4>)
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3c0:	9611      	str	r6, [sp, #68]	; 0x44
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d15d      	bne.n	800a482 <_dtoa_r+0x4fa>
 800a3c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4b5c      	ldr	r3, [pc, #368]	; (800a540 <_dtoa_r+0x5b8>)
 800a3ce:	f7f5 fecb 	bl	8000168 <__aeabi_dsub>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3da:	4633      	mov	r3, r6
 800a3dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3de:	f7f6 fb0b 	bl	80009f8 <__aeabi_dcmpgt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f040 829c 	bne.w	800a920 <_dtoa_r+0x998>
 800a3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3f2:	f7f6 fae3 	bl	80009bc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f040 8290 	bne.w	800a91c <_dtoa_r+0x994>
 800a3fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a400:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a406:	2b00      	cmp	r3, #0
 800a408:	f2c0 8152 	blt.w	800a6b0 <_dtoa_r+0x728>
 800a40c:	f1ba 0f0e 	cmp.w	sl, #14
 800a410:	f300 814e 	bgt.w	800a6b0 <_dtoa_r+0x728>
 800a414:	4b45      	ldr	r3, [pc, #276]	; (800a52c <_dtoa_r+0x5a4>)
 800a416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a41a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a41e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a424:	2b00      	cmp	r3, #0
 800a426:	f280 80db 	bge.w	800a5e0 <_dtoa_r+0x658>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f300 80d7 	bgt.w	800a5e0 <_dtoa_r+0x658>
 800a432:	f040 8272 	bne.w	800a91a <_dtoa_r+0x992>
 800a436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a43a:	2200      	movs	r2, #0
 800a43c:	4b40      	ldr	r3, [pc, #256]	; (800a540 <_dtoa_r+0x5b8>)
 800a43e:	f7f6 f84b 	bl	80004d8 <__aeabi_dmul>
 800a442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a446:	f7f6 facd 	bl	80009e4 <__aeabi_dcmpge>
 800a44a:	9c08      	ldr	r4, [sp, #32]
 800a44c:	4626      	mov	r6, r4
 800a44e:	2800      	cmp	r0, #0
 800a450:	f040 8248 	bne.w	800a8e4 <_dtoa_r+0x95c>
 800a454:	2331      	movs	r3, #49	; 0x31
 800a456:	9f03      	ldr	r7, [sp, #12]
 800a458:	f10a 0a01 	add.w	sl, sl, #1
 800a45c:	f807 3b01 	strb.w	r3, [r7], #1
 800a460:	e244      	b.n	800a8ec <_dtoa_r+0x964>
 800a462:	07e2      	lsls	r2, r4, #31
 800a464:	d505      	bpl.n	800a472 <_dtoa_r+0x4ea>
 800a466:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a46a:	f7f6 f835 	bl	80004d8 <__aeabi_dmul>
 800a46e:	2301      	movs	r3, #1
 800a470:	3701      	adds	r7, #1
 800a472:	1064      	asrs	r4, r4, #1
 800a474:	3608      	adds	r6, #8
 800a476:	e76d      	b.n	800a354 <_dtoa_r+0x3cc>
 800a478:	2702      	movs	r7, #2
 800a47a:	e770      	b.n	800a35e <_dtoa_r+0x3d6>
 800a47c:	46d0      	mov	r8, sl
 800a47e:	9c08      	ldr	r4, [sp, #32]
 800a480:	e78f      	b.n	800a3a2 <_dtoa_r+0x41a>
 800a482:	9903      	ldr	r1, [sp, #12]
 800a484:	4b29      	ldr	r3, [pc, #164]	; (800a52c <_dtoa_r+0x5a4>)
 800a486:	4421      	add	r1, r4
 800a488:	9112      	str	r1, [sp, #72]	; 0x48
 800a48a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a48c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a490:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a494:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a498:	2900      	cmp	r1, #0
 800a49a:	d055      	beq.n	800a548 <_dtoa_r+0x5c0>
 800a49c:	2000      	movs	r0, #0
 800a49e:	4929      	ldr	r1, [pc, #164]	; (800a544 <_dtoa_r+0x5bc>)
 800a4a0:	f7f6 f944 	bl	800072c <__aeabi_ddiv>
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	f7f5 fe5e 	bl	8000168 <__aeabi_dsub>
 800a4ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4b0:	9f03      	ldr	r7, [sp, #12]
 800a4b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b6:	f7f6 fabf 	bl	8000a38 <__aeabi_d2iz>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	f7f5 ffa2 	bl	8000404 <__aeabi_i2d>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4c8:	f7f5 fe4e 	bl	8000168 <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	3430      	adds	r4, #48	; 0x30
 800a4d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4da:	f807 4b01 	strb.w	r4, [r7], #1
 800a4de:	f7f6 fa6d 	bl	80009bc <__aeabi_dcmplt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d174      	bne.n	800a5d0 <_dtoa_r+0x648>
 800a4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	4911      	ldr	r1, [pc, #68]	; (800a534 <_dtoa_r+0x5ac>)
 800a4ee:	f7f5 fe3b 	bl	8000168 <__aeabi_dsub>
 800a4f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4f6:	f7f6 fa61 	bl	80009bc <__aeabi_dcmplt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f040 80b7 	bne.w	800a66e <_dtoa_r+0x6e6>
 800a500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a502:	429f      	cmp	r7, r3
 800a504:	f43f af7a 	beq.w	800a3fc <_dtoa_r+0x474>
 800a508:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a50c:	2200      	movs	r2, #0
 800a50e:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <_dtoa_r+0x5b0>)
 800a510:	f7f5 ffe2 	bl	80004d8 <__aeabi_dmul>
 800a514:	2200      	movs	r2, #0
 800a516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a51a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a51e:	4b06      	ldr	r3, [pc, #24]	; (800a538 <_dtoa_r+0x5b0>)
 800a520:	f7f5 ffda 	bl	80004d8 <__aeabi_dmul>
 800a524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a528:	e7c3      	b.n	800a4b2 <_dtoa_r+0x52a>
 800a52a:	bf00      	nop
 800a52c:	0800cff8 	.word	0x0800cff8
 800a530:	0800cfd0 	.word	0x0800cfd0
 800a534:	3ff00000 	.word	0x3ff00000
 800a538:	40240000 	.word	0x40240000
 800a53c:	401c0000 	.word	0x401c0000
 800a540:	40140000 	.word	0x40140000
 800a544:	3fe00000 	.word	0x3fe00000
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f5 ffc4 	bl	80004d8 <__aeabi_dmul>
 800a550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a552:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a556:	9c03      	ldr	r4, [sp, #12]
 800a558:	9314      	str	r3, [sp, #80]	; 0x50
 800a55a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a55e:	f7f6 fa6b 	bl	8000a38 <__aeabi_d2iz>
 800a562:	9015      	str	r0, [sp, #84]	; 0x54
 800a564:	f7f5 ff4e 	bl	8000404 <__aeabi_i2d>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a570:	f7f5 fdfa 	bl	8000168 <__aeabi_dsub>
 800a574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a576:	4606      	mov	r6, r0
 800a578:	3330      	adds	r3, #48	; 0x30
 800a57a:	f804 3b01 	strb.w	r3, [r4], #1
 800a57e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a580:	460f      	mov	r7, r1
 800a582:	429c      	cmp	r4, r3
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	d124      	bne.n	800a5d4 <_dtoa_r+0x64c>
 800a58a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a58e:	4bb0      	ldr	r3, [pc, #704]	; (800a850 <_dtoa_r+0x8c8>)
 800a590:	f7f5 fdec 	bl	800016c <__adddf3>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	f7f6 fa2c 	bl	80009f8 <__aeabi_dcmpgt>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d163      	bne.n	800a66c <_dtoa_r+0x6e4>
 800a5a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	49a9      	ldr	r1, [pc, #676]	; (800a850 <_dtoa_r+0x8c8>)
 800a5ac:	f7f5 fddc 	bl	8000168 <__aeabi_dsub>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	f7f6 fa00 	bl	80009bc <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f af1d 	beq.w	800a3fc <_dtoa_r+0x474>
 800a5c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5c4:	1e7b      	subs	r3, r7, #1
 800a5c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a5c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5cc:	2b30      	cmp	r3, #48	; 0x30
 800a5ce:	d0f8      	beq.n	800a5c2 <_dtoa_r+0x63a>
 800a5d0:	46c2      	mov	sl, r8
 800a5d2:	e03b      	b.n	800a64c <_dtoa_r+0x6c4>
 800a5d4:	4b9f      	ldr	r3, [pc, #636]	; (800a854 <_dtoa_r+0x8cc>)
 800a5d6:	f7f5 ff7f 	bl	80004d8 <__aeabi_dmul>
 800a5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5de:	e7bc      	b.n	800a55a <_dtoa_r+0x5d2>
 800a5e0:	9f03      	ldr	r7, [sp, #12]
 800a5e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a5e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	4649      	mov	r1, r9
 800a5ee:	f7f6 f89d 	bl	800072c <__aeabi_ddiv>
 800a5f2:	f7f6 fa21 	bl	8000a38 <__aeabi_d2iz>
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	f7f5 ff04 	bl	8000404 <__aeabi_i2d>
 800a5fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a600:	f7f5 ff6a 	bl	80004d8 <__aeabi_dmul>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f5 fdac 	bl	8000168 <__aeabi_dsub>
 800a610:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a614:	f807 6b01 	strb.w	r6, [r7], #1
 800a618:	9e03      	ldr	r6, [sp, #12]
 800a61a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a61e:	1bbe      	subs	r6, r7, r6
 800a620:	45b4      	cmp	ip, r6
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	d136      	bne.n	800a696 <_dtoa_r+0x70e>
 800a628:	f7f5 fda0 	bl	800016c <__adddf3>
 800a62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	f7f6 f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 800a638:	bb58      	cbnz	r0, 800a692 <_dtoa_r+0x70a>
 800a63a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a63e:	4640      	mov	r0, r8
 800a640:	4649      	mov	r1, r9
 800a642:	f7f6 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 800a646:	b108      	cbz	r0, 800a64c <_dtoa_r+0x6c4>
 800a648:	07e1      	lsls	r1, r4, #31
 800a64a:	d422      	bmi.n	800a692 <_dtoa_r+0x70a>
 800a64c:	4628      	mov	r0, r5
 800a64e:	4659      	mov	r1, fp
 800a650:	f000 fe5a 	bl	800b308 <_Bfree>
 800a654:	2300      	movs	r3, #0
 800a656:	703b      	strb	r3, [r7, #0]
 800a658:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a65a:	f10a 0001 	add.w	r0, sl, #1
 800a65e:	6018      	str	r0, [r3, #0]
 800a660:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a662:	2b00      	cmp	r3, #0
 800a664:	f43f acde 	beq.w	800a024 <_dtoa_r+0x9c>
 800a668:	601f      	str	r7, [r3, #0]
 800a66a:	e4db      	b.n	800a024 <_dtoa_r+0x9c>
 800a66c:	4627      	mov	r7, r4
 800a66e:	463b      	mov	r3, r7
 800a670:	461f      	mov	r7, r3
 800a672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a676:	2a39      	cmp	r2, #57	; 0x39
 800a678:	d107      	bne.n	800a68a <_dtoa_r+0x702>
 800a67a:	9a03      	ldr	r2, [sp, #12]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d1f7      	bne.n	800a670 <_dtoa_r+0x6e8>
 800a680:	2230      	movs	r2, #48	; 0x30
 800a682:	9903      	ldr	r1, [sp, #12]
 800a684:	f108 0801 	add.w	r8, r8, #1
 800a688:	700a      	strb	r2, [r1, #0]
 800a68a:	781a      	ldrb	r2, [r3, #0]
 800a68c:	3201      	adds	r2, #1
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e79e      	b.n	800a5d0 <_dtoa_r+0x648>
 800a692:	46d0      	mov	r8, sl
 800a694:	e7eb      	b.n	800a66e <_dtoa_r+0x6e6>
 800a696:	2200      	movs	r2, #0
 800a698:	4b6e      	ldr	r3, [pc, #440]	; (800a854 <_dtoa_r+0x8cc>)
 800a69a:	f7f5 ff1d 	bl	80004d8 <__aeabi_dmul>
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	f7f6 f97f 	bl	80009a8 <__aeabi_dcmpeq>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d09b      	beq.n	800a5e6 <_dtoa_r+0x65e>
 800a6ae:	e7cd      	b.n	800a64c <_dtoa_r+0x6c4>
 800a6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	f000 80d0 	beq.w	800a858 <_dtoa_r+0x8d0>
 800a6b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6ba:	2a01      	cmp	r2, #1
 800a6bc:	f300 80ae 	bgt.w	800a81c <_dtoa_r+0x894>
 800a6c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	f000 80a6 	beq.w	800a814 <_dtoa_r+0x88c>
 800a6c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6ce:	9f06      	ldr	r7, [sp, #24]
 800a6d0:	9a06      	ldr	r2, [sp, #24]
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	441a      	add	r2, r3
 800a6d6:	9206      	str	r2, [sp, #24]
 800a6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6da:	4628      	mov	r0, r5
 800a6dc:	441a      	add	r2, r3
 800a6de:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e0:	f000 ff12 	bl	800b508 <__i2b>
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	2f00      	cmp	r7, #0
 800a6e8:	dd0c      	ble.n	800a704 <_dtoa_r+0x77c>
 800a6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd09      	ble.n	800a704 <_dtoa_r+0x77c>
 800a6f0:	42bb      	cmp	r3, r7
 800a6f2:	bfa8      	it	ge
 800a6f4:	463b      	movge	r3, r7
 800a6f6:	9a06      	ldr	r2, [sp, #24]
 800a6f8:	1aff      	subs	r7, r7, r3
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	9206      	str	r2, [sp, #24]
 800a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a706:	b1f3      	cbz	r3, 800a746 <_dtoa_r+0x7be>
 800a708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80a8 	beq.w	800a860 <_dtoa_r+0x8d8>
 800a710:	2c00      	cmp	r4, #0
 800a712:	dd10      	ble.n	800a736 <_dtoa_r+0x7ae>
 800a714:	4631      	mov	r1, r6
 800a716:	4622      	mov	r2, r4
 800a718:	4628      	mov	r0, r5
 800a71a:	f000 ffb3 	bl	800b684 <__pow5mult>
 800a71e:	465a      	mov	r2, fp
 800a720:	4601      	mov	r1, r0
 800a722:	4606      	mov	r6, r0
 800a724:	4628      	mov	r0, r5
 800a726:	f000 ff05 	bl	800b534 <__multiply>
 800a72a:	4680      	mov	r8, r0
 800a72c:	4659      	mov	r1, fp
 800a72e:	4628      	mov	r0, r5
 800a730:	f000 fdea 	bl	800b308 <_Bfree>
 800a734:	46c3      	mov	fp, r8
 800a736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a738:	1b1a      	subs	r2, r3, r4
 800a73a:	d004      	beq.n	800a746 <_dtoa_r+0x7be>
 800a73c:	4659      	mov	r1, fp
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 ffa0 	bl	800b684 <__pow5mult>
 800a744:	4683      	mov	fp, r0
 800a746:	2101      	movs	r1, #1
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 fedd 	bl	800b508 <__i2b>
 800a74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a750:	4604      	mov	r4, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	f340 8086 	ble.w	800a864 <_dtoa_r+0x8dc>
 800a758:	461a      	mov	r2, r3
 800a75a:	4601      	mov	r1, r0
 800a75c:	4628      	mov	r0, r5
 800a75e:	f000 ff91 	bl	800b684 <__pow5mult>
 800a762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a764:	4604      	mov	r4, r0
 800a766:	2b01      	cmp	r3, #1
 800a768:	dd7f      	ble.n	800a86a <_dtoa_r+0x8e2>
 800a76a:	f04f 0800 	mov.w	r8, #0
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a774:	6918      	ldr	r0, [r3, #16]
 800a776:	f000 fe79 	bl	800b46c <__hi0bits>
 800a77a:	f1c0 0020 	rsb	r0, r0, #32
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	4418      	add	r0, r3
 800a782:	f010 001f 	ands.w	r0, r0, #31
 800a786:	f000 8092 	beq.w	800a8ae <_dtoa_r+0x926>
 800a78a:	f1c0 0320 	rsb	r3, r0, #32
 800a78e:	2b04      	cmp	r3, #4
 800a790:	f340 808a 	ble.w	800a8a8 <_dtoa_r+0x920>
 800a794:	f1c0 001c 	rsb	r0, r0, #28
 800a798:	9b06      	ldr	r3, [sp, #24]
 800a79a:	4407      	add	r7, r0
 800a79c:	4403      	add	r3, r0
 800a79e:	9306      	str	r3, [sp, #24]
 800a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a2:	4403      	add	r3, r0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dd05      	ble.n	800a7b8 <_dtoa_r+0x830>
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	f000 ffc1 	bl	800b738 <__lshift>
 800a7b6:	4683      	mov	fp, r0
 800a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dd05      	ble.n	800a7ca <_dtoa_r+0x842>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 ffb8 	bl	800b738 <__lshift>
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d070      	beq.n	800a8b2 <_dtoa_r+0x92a>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	4658      	mov	r0, fp
 800a7d4:	f001 f820 	bl	800b818 <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	da6a      	bge.n	800a8b2 <_dtoa_r+0x92a>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4659      	mov	r1, fp
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 fdb2 	bl	800b34c <__multadd>
 800a7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ea:	4683      	mov	fp, r0
 800a7ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 8194 	beq.w	800ab1e <_dtoa_r+0xb96>
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f000 fda5 	bl	800b34c <__multadd>
 800a802:	f1b9 0f00 	cmp.w	r9, #0
 800a806:	4606      	mov	r6, r0
 800a808:	f300 8093 	bgt.w	800a932 <_dtoa_r+0x9aa>
 800a80c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a80e:	2b02      	cmp	r3, #2
 800a810:	dc57      	bgt.n	800a8c2 <_dtoa_r+0x93a>
 800a812:	e08e      	b.n	800a932 <_dtoa_r+0x9aa>
 800a814:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a81a:	e757      	b.n	800a6cc <_dtoa_r+0x744>
 800a81c:	9b08      	ldr	r3, [sp, #32]
 800a81e:	1e5c      	subs	r4, r3, #1
 800a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a822:	42a3      	cmp	r3, r4
 800a824:	bfb7      	itett	lt
 800a826:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a828:	1b1c      	subge	r4, r3, r4
 800a82a:	1ae2      	sublt	r2, r4, r3
 800a82c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a82e:	bfbe      	ittt	lt
 800a830:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a832:	189b      	addlt	r3, r3, r2
 800a834:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a836:	9b08      	ldr	r3, [sp, #32]
 800a838:	bfb8      	it	lt
 800a83a:	2400      	movlt	r4, #0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfbb      	ittet	lt
 800a840:	9b06      	ldrlt	r3, [sp, #24]
 800a842:	9a08      	ldrlt	r2, [sp, #32]
 800a844:	9f06      	ldrge	r7, [sp, #24]
 800a846:	1a9f      	sublt	r7, r3, r2
 800a848:	bfac      	ite	ge
 800a84a:	9b08      	ldrge	r3, [sp, #32]
 800a84c:	2300      	movlt	r3, #0
 800a84e:	e73f      	b.n	800a6d0 <_dtoa_r+0x748>
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	40240000 	.word	0x40240000
 800a858:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a85a:	9f06      	ldr	r7, [sp, #24]
 800a85c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a85e:	e742      	b.n	800a6e6 <_dtoa_r+0x75e>
 800a860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a862:	e76b      	b.n	800a73c <_dtoa_r+0x7b4>
 800a864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a866:	2b01      	cmp	r3, #1
 800a868:	dc19      	bgt.n	800a89e <_dtoa_r+0x916>
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	b9bb      	cbnz	r3, 800a89e <_dtoa_r+0x916>
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a874:	b99b      	cbnz	r3, 800a89e <_dtoa_r+0x916>
 800a876:	9b05      	ldr	r3, [sp, #20]
 800a878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a87c:	0d1b      	lsrs	r3, r3, #20
 800a87e:	051b      	lsls	r3, r3, #20
 800a880:	b183      	cbz	r3, 800a8a4 <_dtoa_r+0x91c>
 800a882:	f04f 0801 	mov.w	r8, #1
 800a886:	9b06      	ldr	r3, [sp, #24]
 800a888:	3301      	adds	r3, #1
 800a88a:	9306      	str	r3, [sp, #24]
 800a88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88e:	3301      	adds	r3, #1
 800a890:	9309      	str	r3, [sp, #36]	; 0x24
 800a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a894:	2b00      	cmp	r3, #0
 800a896:	f47f af6a 	bne.w	800a76e <_dtoa_r+0x7e6>
 800a89a:	2001      	movs	r0, #1
 800a89c:	e76f      	b.n	800a77e <_dtoa_r+0x7f6>
 800a89e:	f04f 0800 	mov.w	r8, #0
 800a8a2:	e7f6      	b.n	800a892 <_dtoa_r+0x90a>
 800a8a4:	4698      	mov	r8, r3
 800a8a6:	e7f4      	b.n	800a892 <_dtoa_r+0x90a>
 800a8a8:	f43f af7d 	beq.w	800a7a6 <_dtoa_r+0x81e>
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	301c      	adds	r0, #28
 800a8b0:	e772      	b.n	800a798 <_dtoa_r+0x810>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dc36      	bgt.n	800a926 <_dtoa_r+0x99e>
 800a8b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	dd33      	ble.n	800a926 <_dtoa_r+0x99e>
 800a8be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8c2:	f1b9 0f00 	cmp.w	r9, #0
 800a8c6:	d10d      	bne.n	800a8e4 <_dtoa_r+0x95c>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 fd3c 	bl	800b34c <__multadd>
 800a8d4:	4601      	mov	r1, r0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4658      	mov	r0, fp
 800a8da:	f000 ff9d 	bl	800b818 <__mcmp>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f73f adb8 	bgt.w	800a454 <_dtoa_r+0x4cc>
 800a8e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8e6:	9f03      	ldr	r7, [sp, #12]
 800a8e8:	ea6f 0a03 	mvn.w	sl, r3
 800a8ec:	f04f 0800 	mov.w	r8, #0
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 fd08 	bl	800b308 <_Bfree>
 800a8f8:	2e00      	cmp	r6, #0
 800a8fa:	f43f aea7 	beq.w	800a64c <_dtoa_r+0x6c4>
 800a8fe:	f1b8 0f00 	cmp.w	r8, #0
 800a902:	d005      	beq.n	800a910 <_dtoa_r+0x988>
 800a904:	45b0      	cmp	r8, r6
 800a906:	d003      	beq.n	800a910 <_dtoa_r+0x988>
 800a908:	4641      	mov	r1, r8
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 fcfc 	bl	800b308 <_Bfree>
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	f000 fcf8 	bl	800b308 <_Bfree>
 800a918:	e698      	b.n	800a64c <_dtoa_r+0x6c4>
 800a91a:	2400      	movs	r4, #0
 800a91c:	4626      	mov	r6, r4
 800a91e:	e7e1      	b.n	800a8e4 <_dtoa_r+0x95c>
 800a920:	46c2      	mov	sl, r8
 800a922:	4626      	mov	r6, r4
 800a924:	e596      	b.n	800a454 <_dtoa_r+0x4cc>
 800a926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 80fd 	beq.w	800ab2c <_dtoa_r+0xba4>
 800a932:	2f00      	cmp	r7, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x9ba>
 800a936:	4631      	mov	r1, r6
 800a938:	463a      	mov	r2, r7
 800a93a:	4628      	mov	r0, r5
 800a93c:	f000 fefc 	bl	800b738 <__lshift>
 800a940:	4606      	mov	r6, r0
 800a942:	f1b8 0f00 	cmp.w	r8, #0
 800a946:	d05c      	beq.n	800aa02 <_dtoa_r+0xa7a>
 800a948:	4628      	mov	r0, r5
 800a94a:	6871      	ldr	r1, [r6, #4]
 800a94c:	f000 fc9c 	bl	800b288 <_Balloc>
 800a950:	4607      	mov	r7, r0
 800a952:	b928      	cbnz	r0, 800a960 <_dtoa_r+0x9d8>
 800a954:	4602      	mov	r2, r0
 800a956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a95a:	4b7f      	ldr	r3, [pc, #508]	; (800ab58 <_dtoa_r+0xbd0>)
 800a95c:	f7ff bb28 	b.w	8009fb0 <_dtoa_r+0x28>
 800a960:	6932      	ldr	r2, [r6, #16]
 800a962:	f106 010c 	add.w	r1, r6, #12
 800a966:	3202      	adds	r2, #2
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	300c      	adds	r0, #12
 800a96c:	f7fd ff38 	bl	80087e0 <memcpy>
 800a970:	2201      	movs	r2, #1
 800a972:	4639      	mov	r1, r7
 800a974:	4628      	mov	r0, r5
 800a976:	f000 fedf 	bl	800b738 <__lshift>
 800a97a:	46b0      	mov	r8, r6
 800a97c:	4606      	mov	r6, r0
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	9308      	str	r3, [sp, #32]
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	444b      	add	r3, r9
 800a988:	930a      	str	r3, [sp, #40]	; 0x28
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	9309      	str	r3, [sp, #36]	; 0x24
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	4621      	mov	r1, r4
 800a996:	3b01      	subs	r3, #1
 800a998:	4658      	mov	r0, fp
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	f7ff fa66 	bl	8009e6c <quorem>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	3330      	adds	r3, #48	; 0x30
 800a9a6:	9006      	str	r0, [sp, #24]
 800a9a8:	4658      	mov	r0, fp
 800a9aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9ac:	f000 ff34 	bl	800b818 <__mcmp>
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	4681      	mov	r9, r0
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 ff4a 	bl	800b850 <__mdiff>
 800a9bc:	68c2      	ldr	r2, [r0, #12]
 800a9be:	4607      	mov	r7, r0
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c2:	bb02      	cbnz	r2, 800aa06 <_dtoa_r+0xa7e>
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	4658      	mov	r0, fp
 800a9c8:	f000 ff26 	bl	800b818 <__mcmp>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a9d8:	f000 fc96 	bl	800b308 <_Bfree>
 800a9dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e0:	9f08      	ldr	r7, [sp, #32]
 800a9e2:	ea43 0102 	orr.w	r1, r3, r2
 800a9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ec:	d10d      	bne.n	800aa0a <_dtoa_r+0xa82>
 800a9ee:	2b39      	cmp	r3, #57	; 0x39
 800a9f0:	d029      	beq.n	800aa46 <_dtoa_r+0xabe>
 800a9f2:	f1b9 0f00 	cmp.w	r9, #0
 800a9f6:	dd01      	ble.n	800a9fc <_dtoa_r+0xa74>
 800a9f8:	9b06      	ldr	r3, [sp, #24]
 800a9fa:	3331      	adds	r3, #49	; 0x31
 800a9fc:	9a04      	ldr	r2, [sp, #16]
 800a9fe:	7013      	strb	r3, [r2, #0]
 800aa00:	e776      	b.n	800a8f0 <_dtoa_r+0x968>
 800aa02:	4630      	mov	r0, r6
 800aa04:	e7b9      	b.n	800a97a <_dtoa_r+0x9f2>
 800aa06:	2201      	movs	r2, #1
 800aa08:	e7e2      	b.n	800a9d0 <_dtoa_r+0xa48>
 800aa0a:	f1b9 0f00 	cmp.w	r9, #0
 800aa0e:	db06      	blt.n	800aa1e <_dtoa_r+0xa96>
 800aa10:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa12:	ea41 0909 	orr.w	r9, r1, r9
 800aa16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa18:	ea59 0101 	orrs.w	r1, r9, r1
 800aa1c:	d120      	bne.n	800aa60 <_dtoa_r+0xad8>
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	ddec      	ble.n	800a9fc <_dtoa_r+0xa74>
 800aa22:	4659      	mov	r1, fp
 800aa24:	2201      	movs	r2, #1
 800aa26:	4628      	mov	r0, r5
 800aa28:	9308      	str	r3, [sp, #32]
 800aa2a:	f000 fe85 	bl	800b738 <__lshift>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4683      	mov	fp, r0
 800aa32:	f000 fef1 	bl	800b818 <__mcmp>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	dc02      	bgt.n	800aa42 <_dtoa_r+0xaba>
 800aa3c:	d1de      	bne.n	800a9fc <_dtoa_r+0xa74>
 800aa3e:	07da      	lsls	r2, r3, #31
 800aa40:	d5dc      	bpl.n	800a9fc <_dtoa_r+0xa74>
 800aa42:	2b39      	cmp	r3, #57	; 0x39
 800aa44:	d1d8      	bne.n	800a9f8 <_dtoa_r+0xa70>
 800aa46:	2339      	movs	r3, #57	; 0x39
 800aa48:	9a04      	ldr	r2, [sp, #16]
 800aa4a:	7013      	strb	r3, [r2, #0]
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	461f      	mov	r7, r3
 800aa50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	2a39      	cmp	r2, #57	; 0x39
 800aa58:	d050      	beq.n	800aafc <_dtoa_r+0xb74>
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	e747      	b.n	800a8f0 <_dtoa_r+0x968>
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	dd03      	ble.n	800aa6c <_dtoa_r+0xae4>
 800aa64:	2b39      	cmp	r3, #57	; 0x39
 800aa66:	d0ee      	beq.n	800aa46 <_dtoa_r+0xabe>
 800aa68:	3301      	adds	r3, #1
 800aa6a:	e7c7      	b.n	800a9fc <_dtoa_r+0xa74>
 800aa6c:	9a08      	ldr	r2, [sp, #32]
 800aa6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa70:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa74:	428a      	cmp	r2, r1
 800aa76:	d02a      	beq.n	800aace <_dtoa_r+0xb46>
 800aa78:	4659      	mov	r1, fp
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	220a      	movs	r2, #10
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 fc64 	bl	800b34c <__multadd>
 800aa84:	45b0      	cmp	r8, r6
 800aa86:	4683      	mov	fp, r0
 800aa88:	f04f 0300 	mov.w	r3, #0
 800aa8c:	f04f 020a 	mov.w	r2, #10
 800aa90:	4641      	mov	r1, r8
 800aa92:	4628      	mov	r0, r5
 800aa94:	d107      	bne.n	800aaa6 <_dtoa_r+0xb1e>
 800aa96:	f000 fc59 	bl	800b34c <__multadd>
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	9308      	str	r3, [sp, #32]
 800aaa4:	e775      	b.n	800a992 <_dtoa_r+0xa0a>
 800aaa6:	f000 fc51 	bl	800b34c <__multadd>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4680      	mov	r8, r0
 800aaae:	2300      	movs	r3, #0
 800aab0:	220a      	movs	r2, #10
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 fc4a 	bl	800b34c <__multadd>
 800aab8:	4606      	mov	r6, r0
 800aaba:	e7f0      	b.n	800aa9e <_dtoa_r+0xb16>
 800aabc:	f1b9 0f00 	cmp.w	r9, #0
 800aac0:	bfcc      	ite	gt
 800aac2:	464f      	movgt	r7, r9
 800aac4:	2701      	movle	r7, #1
 800aac6:	f04f 0800 	mov.w	r8, #0
 800aaca:	9a03      	ldr	r2, [sp, #12]
 800aacc:	4417      	add	r7, r2
 800aace:	4659      	mov	r1, fp
 800aad0:	2201      	movs	r2, #1
 800aad2:	4628      	mov	r0, r5
 800aad4:	9308      	str	r3, [sp, #32]
 800aad6:	f000 fe2f 	bl	800b738 <__lshift>
 800aada:	4621      	mov	r1, r4
 800aadc:	4683      	mov	fp, r0
 800aade:	f000 fe9b 	bl	800b818 <__mcmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	dcb2      	bgt.n	800aa4c <_dtoa_r+0xac4>
 800aae6:	d102      	bne.n	800aaee <_dtoa_r+0xb66>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	07db      	lsls	r3, r3, #31
 800aaec:	d4ae      	bmi.n	800aa4c <_dtoa_r+0xac4>
 800aaee:	463b      	mov	r3, r7
 800aaf0:	461f      	mov	r7, r3
 800aaf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaf6:	2a30      	cmp	r2, #48	; 0x30
 800aaf8:	d0fa      	beq.n	800aaf0 <_dtoa_r+0xb68>
 800aafa:	e6f9      	b.n	800a8f0 <_dtoa_r+0x968>
 800aafc:	9a03      	ldr	r2, [sp, #12]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d1a5      	bne.n	800aa4e <_dtoa_r+0xac6>
 800ab02:	2331      	movs	r3, #49	; 0x31
 800ab04:	f10a 0a01 	add.w	sl, sl, #1
 800ab08:	e779      	b.n	800a9fe <_dtoa_r+0xa76>
 800ab0a:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <_dtoa_r+0xbd4>)
 800ab0c:	f7ff baa8 	b.w	800a060 <_dtoa_r+0xd8>
 800ab10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f47f aa81 	bne.w	800a01a <_dtoa_r+0x92>
 800ab18:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <_dtoa_r+0xbd8>)
 800ab1a:	f7ff baa1 	b.w	800a060 <_dtoa_r+0xd8>
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	dc03      	bgt.n	800ab2c <_dtoa_r+0xba4>
 800ab24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	f73f aecb 	bgt.w	800a8c2 <_dtoa_r+0x93a>
 800ab2c:	9f03      	ldr	r7, [sp, #12]
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4658      	mov	r0, fp
 800ab32:	f7ff f99b 	bl	8009e6c <quorem>
 800ab36:	9a03      	ldr	r2, [sp, #12]
 800ab38:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab3c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab40:	1aba      	subs	r2, r7, r2
 800ab42:	4591      	cmp	r9, r2
 800ab44:	ddba      	ble.n	800aabc <_dtoa_r+0xb34>
 800ab46:	4659      	mov	r1, fp
 800ab48:	2300      	movs	r3, #0
 800ab4a:	220a      	movs	r2, #10
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f000 fbfd 	bl	800b34c <__multadd>
 800ab52:	4683      	mov	fp, r0
 800ab54:	e7eb      	b.n	800ab2e <_dtoa_r+0xba6>
 800ab56:	bf00      	nop
 800ab58:	0800cee8 	.word	0x0800cee8
 800ab5c:	0800ccf0 	.word	0x0800ccf0
 800ab60:	0800ce69 	.word	0x0800ce69

0800ab64 <rshift>:
 800ab64:	6903      	ldr	r3, [r0, #16]
 800ab66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab6e:	f100 0414 	add.w	r4, r0, #20
 800ab72:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab76:	dd46      	ble.n	800ac06 <rshift+0xa2>
 800ab78:	f011 011f 	ands.w	r1, r1, #31
 800ab7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab84:	d10c      	bne.n	800aba0 <rshift+0x3c>
 800ab86:	4629      	mov	r1, r5
 800ab88:	f100 0710 	add.w	r7, r0, #16
 800ab8c:	42b1      	cmp	r1, r6
 800ab8e:	d335      	bcc.n	800abfc <rshift+0x98>
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	1eea      	subs	r2, r5, #3
 800ab96:	4296      	cmp	r6, r2
 800ab98:	bf38      	it	cc
 800ab9a:	2300      	movcc	r3, #0
 800ab9c:	4423      	add	r3, r4
 800ab9e:	e015      	b.n	800abcc <rshift+0x68>
 800aba0:	46a1      	mov	r9, r4
 800aba2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aba6:	f1c1 0820 	rsb	r8, r1, #32
 800abaa:	40cf      	lsrs	r7, r1
 800abac:	f105 0e04 	add.w	lr, r5, #4
 800abb0:	4576      	cmp	r6, lr
 800abb2:	46f4      	mov	ip, lr
 800abb4:	d816      	bhi.n	800abe4 <rshift+0x80>
 800abb6:	1a9a      	subs	r2, r3, r2
 800abb8:	0092      	lsls	r2, r2, #2
 800abba:	3a04      	subs	r2, #4
 800abbc:	3501      	adds	r5, #1
 800abbe:	42ae      	cmp	r6, r5
 800abc0:	bf38      	it	cc
 800abc2:	2200      	movcc	r2, #0
 800abc4:	18a3      	adds	r3, r4, r2
 800abc6:	50a7      	str	r7, [r4, r2]
 800abc8:	b107      	cbz	r7, 800abcc <rshift+0x68>
 800abca:	3304      	adds	r3, #4
 800abcc:	42a3      	cmp	r3, r4
 800abce:	eba3 0204 	sub.w	r2, r3, r4
 800abd2:	bf08      	it	eq
 800abd4:	2300      	moveq	r3, #0
 800abd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abda:	6102      	str	r2, [r0, #16]
 800abdc:	bf08      	it	eq
 800abde:	6143      	streq	r3, [r0, #20]
 800abe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abe4:	f8dc c000 	ldr.w	ip, [ip]
 800abe8:	fa0c fc08 	lsl.w	ip, ip, r8
 800abec:	ea4c 0707 	orr.w	r7, ip, r7
 800abf0:	f849 7b04 	str.w	r7, [r9], #4
 800abf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abf8:	40cf      	lsrs	r7, r1
 800abfa:	e7d9      	b.n	800abb0 <rshift+0x4c>
 800abfc:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac00:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac04:	e7c2      	b.n	800ab8c <rshift+0x28>
 800ac06:	4623      	mov	r3, r4
 800ac08:	e7e0      	b.n	800abcc <rshift+0x68>

0800ac0a <__hexdig_fun>:
 800ac0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d802      	bhi.n	800ac18 <__hexdig_fun+0xe>
 800ac12:	3820      	subs	r0, #32
 800ac14:	b2c0      	uxtb	r0, r0
 800ac16:	4770      	bx	lr
 800ac18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac1c:	2b05      	cmp	r3, #5
 800ac1e:	d801      	bhi.n	800ac24 <__hexdig_fun+0x1a>
 800ac20:	3847      	subs	r0, #71	; 0x47
 800ac22:	e7f7      	b.n	800ac14 <__hexdig_fun+0xa>
 800ac24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d801      	bhi.n	800ac30 <__hexdig_fun+0x26>
 800ac2c:	3827      	subs	r0, #39	; 0x27
 800ac2e:	e7f1      	b.n	800ac14 <__hexdig_fun+0xa>
 800ac30:	2000      	movs	r0, #0
 800ac32:	4770      	bx	lr

0800ac34 <__gethex>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	b08b      	sub	sp, #44	; 0x2c
 800ac3a:	9305      	str	r3, [sp, #20]
 800ac3c:	4bb2      	ldr	r3, [pc, #712]	; (800af08 <__gethex+0x2d4>)
 800ac3e:	9002      	str	r0, [sp, #8]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	468b      	mov	fp, r1
 800ac44:	4618      	mov	r0, r3
 800ac46:	4690      	mov	r8, r2
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	f7f5 fa81 	bl	8000150 <strlen>
 800ac4e:	4682      	mov	sl, r0
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	f8db 2000 	ldr.w	r2, [fp]
 800ac56:	4403      	add	r3, r0
 800ac58:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac5c:	9306      	str	r3, [sp, #24]
 800ac5e:	1c93      	adds	r3, r2, #2
 800ac60:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac64:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac68:	32fe      	adds	r2, #254	; 0xfe
 800ac6a:	18d1      	adds	r1, r2, r3
 800ac6c:	461f      	mov	r7, r3
 800ac6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac72:	9101      	str	r1, [sp, #4]
 800ac74:	2830      	cmp	r0, #48	; 0x30
 800ac76:	d0f8      	beq.n	800ac6a <__gethex+0x36>
 800ac78:	f7ff ffc7 	bl	800ac0a <__hexdig_fun>
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d13a      	bne.n	800acf8 <__gethex+0xc4>
 800ac82:	4652      	mov	r2, sl
 800ac84:	4638      	mov	r0, r7
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	f7fe fa40 	bl	800910c <strncmp>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d166      	bne.n	800ad60 <__gethex+0x12c>
 800ac92:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ac96:	eb07 060a 	add.w	r6, r7, sl
 800ac9a:	f7ff ffb6 	bl	800ac0a <__hexdig_fun>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d060      	beq.n	800ad64 <__gethex+0x130>
 800aca2:	4633      	mov	r3, r6
 800aca4:	7818      	ldrb	r0, [r3, #0]
 800aca6:	461f      	mov	r7, r3
 800aca8:	2830      	cmp	r0, #48	; 0x30
 800acaa:	f103 0301 	add.w	r3, r3, #1
 800acae:	d0f9      	beq.n	800aca4 <__gethex+0x70>
 800acb0:	f7ff ffab 	bl	800ac0a <__hexdig_fun>
 800acb4:	2301      	movs	r3, #1
 800acb6:	fab0 f480 	clz	r4, r0
 800acba:	4635      	mov	r5, r6
 800acbc:	0964      	lsrs	r4, r4, #5
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	463a      	mov	r2, r7
 800acc2:	4616      	mov	r6, r2
 800acc4:	7830      	ldrb	r0, [r6, #0]
 800acc6:	3201      	adds	r2, #1
 800acc8:	f7ff ff9f 	bl	800ac0a <__hexdig_fun>
 800accc:	2800      	cmp	r0, #0
 800acce:	d1f8      	bne.n	800acc2 <__gethex+0x8e>
 800acd0:	4652      	mov	r2, sl
 800acd2:	4630      	mov	r0, r6
 800acd4:	9903      	ldr	r1, [sp, #12]
 800acd6:	f7fe fa19 	bl	800910c <strncmp>
 800acda:	b980      	cbnz	r0, 800acfe <__gethex+0xca>
 800acdc:	b94d      	cbnz	r5, 800acf2 <__gethex+0xbe>
 800acde:	eb06 050a 	add.w	r5, r6, sl
 800ace2:	462a      	mov	r2, r5
 800ace4:	4616      	mov	r6, r2
 800ace6:	7830      	ldrb	r0, [r6, #0]
 800ace8:	3201      	adds	r2, #1
 800acea:	f7ff ff8e 	bl	800ac0a <__hexdig_fun>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d1f8      	bne.n	800ace4 <__gethex+0xb0>
 800acf2:	1bad      	subs	r5, r5, r6
 800acf4:	00ad      	lsls	r5, r5, #2
 800acf6:	e004      	b.n	800ad02 <__gethex+0xce>
 800acf8:	2400      	movs	r4, #0
 800acfa:	4625      	mov	r5, r4
 800acfc:	e7e0      	b.n	800acc0 <__gethex+0x8c>
 800acfe:	2d00      	cmp	r5, #0
 800ad00:	d1f7      	bne.n	800acf2 <__gethex+0xbe>
 800ad02:	7833      	ldrb	r3, [r6, #0]
 800ad04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad08:	2b50      	cmp	r3, #80	; 0x50
 800ad0a:	d139      	bne.n	800ad80 <__gethex+0x14c>
 800ad0c:	7873      	ldrb	r3, [r6, #1]
 800ad0e:	2b2b      	cmp	r3, #43	; 0x2b
 800ad10:	d02a      	beq.n	800ad68 <__gethex+0x134>
 800ad12:	2b2d      	cmp	r3, #45	; 0x2d
 800ad14:	d02c      	beq.n	800ad70 <__gethex+0x13c>
 800ad16:	f04f 0900 	mov.w	r9, #0
 800ad1a:	1c71      	adds	r1, r6, #1
 800ad1c:	7808      	ldrb	r0, [r1, #0]
 800ad1e:	f7ff ff74 	bl	800ac0a <__hexdig_fun>
 800ad22:	1e43      	subs	r3, r0, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b18      	cmp	r3, #24
 800ad28:	d82a      	bhi.n	800ad80 <__gethex+0x14c>
 800ad2a:	f1a0 0210 	sub.w	r2, r0, #16
 800ad2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad32:	f7ff ff6a 	bl	800ac0a <__hexdig_fun>
 800ad36:	1e43      	subs	r3, r0, #1
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b18      	cmp	r3, #24
 800ad3c:	d91b      	bls.n	800ad76 <__gethex+0x142>
 800ad3e:	f1b9 0f00 	cmp.w	r9, #0
 800ad42:	d000      	beq.n	800ad46 <__gethex+0x112>
 800ad44:	4252      	negs	r2, r2
 800ad46:	4415      	add	r5, r2
 800ad48:	f8cb 1000 	str.w	r1, [fp]
 800ad4c:	b1d4      	cbz	r4, 800ad84 <__gethex+0x150>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bf14      	ite	ne
 800ad54:	2700      	movne	r7, #0
 800ad56:	2706      	moveq	r7, #6
 800ad58:	4638      	mov	r0, r7
 800ad5a:	b00b      	add	sp, #44	; 0x2c
 800ad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad60:	463e      	mov	r6, r7
 800ad62:	4625      	mov	r5, r4
 800ad64:	2401      	movs	r4, #1
 800ad66:	e7cc      	b.n	800ad02 <__gethex+0xce>
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	1cb1      	adds	r1, r6, #2
 800ad6e:	e7d5      	b.n	800ad1c <__gethex+0xe8>
 800ad70:	f04f 0901 	mov.w	r9, #1
 800ad74:	e7fa      	b.n	800ad6c <__gethex+0x138>
 800ad76:	230a      	movs	r3, #10
 800ad78:	fb03 0202 	mla	r2, r3, r2, r0
 800ad7c:	3a10      	subs	r2, #16
 800ad7e:	e7d6      	b.n	800ad2e <__gethex+0xfa>
 800ad80:	4631      	mov	r1, r6
 800ad82:	e7e1      	b.n	800ad48 <__gethex+0x114>
 800ad84:	4621      	mov	r1, r4
 800ad86:	1bf3      	subs	r3, r6, r7
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	dc0a      	bgt.n	800ada4 <__gethex+0x170>
 800ad8e:	9802      	ldr	r0, [sp, #8]
 800ad90:	f000 fa7a 	bl	800b288 <_Balloc>
 800ad94:	4604      	mov	r4, r0
 800ad96:	b940      	cbnz	r0, 800adaa <__gethex+0x176>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	21de      	movs	r1, #222	; 0xde
 800ad9c:	4b5b      	ldr	r3, [pc, #364]	; (800af0c <__gethex+0x2d8>)
 800ad9e:	485c      	ldr	r0, [pc, #368]	; (800af10 <__gethex+0x2dc>)
 800ada0:	f001 f99a 	bl	800c0d8 <__assert_func>
 800ada4:	3101      	adds	r1, #1
 800ada6:	105b      	asrs	r3, r3, #1
 800ada8:	e7ef      	b.n	800ad8a <__gethex+0x156>
 800adaa:	f04f 0b00 	mov.w	fp, #0
 800adae:	f100 0914 	add.w	r9, r0, #20
 800adb2:	f1ca 0301 	rsb	r3, sl, #1
 800adb6:	f8cd 9010 	str.w	r9, [sp, #16]
 800adba:	f8cd b004 	str.w	fp, [sp, #4]
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	42b7      	cmp	r7, r6
 800adc2:	d33f      	bcc.n	800ae44 <__gethex+0x210>
 800adc4:	9f04      	ldr	r7, [sp, #16]
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	f847 3b04 	str.w	r3, [r7], #4
 800adcc:	eba7 0709 	sub.w	r7, r7, r9
 800add0:	10bf      	asrs	r7, r7, #2
 800add2:	6127      	str	r7, [r4, #16]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fb49 	bl	800b46c <__hi0bits>
 800adda:	017f      	lsls	r7, r7, #5
 800addc:	f8d8 6000 	ldr.w	r6, [r8]
 800ade0:	1a3f      	subs	r7, r7, r0
 800ade2:	42b7      	cmp	r7, r6
 800ade4:	dd62      	ble.n	800aeac <__gethex+0x278>
 800ade6:	1bbf      	subs	r7, r7, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fee3 	bl	800bbb6 <__any_on>
 800adf0:	4682      	mov	sl, r0
 800adf2:	b1a8      	cbz	r0, 800ae20 <__gethex+0x1ec>
 800adf4:	f04f 0a01 	mov.w	sl, #1
 800adf8:	1e7b      	subs	r3, r7, #1
 800adfa:	1159      	asrs	r1, r3, #5
 800adfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae00:	f003 021f 	and.w	r2, r3, #31
 800ae04:	fa0a f202 	lsl.w	r2, sl, r2
 800ae08:	420a      	tst	r2, r1
 800ae0a:	d009      	beq.n	800ae20 <__gethex+0x1ec>
 800ae0c:	4553      	cmp	r3, sl
 800ae0e:	dd05      	ble.n	800ae1c <__gethex+0x1e8>
 800ae10:	4620      	mov	r0, r4
 800ae12:	1eb9      	subs	r1, r7, #2
 800ae14:	f000 fecf 	bl	800bbb6 <__any_on>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d144      	bne.n	800aea6 <__gethex+0x272>
 800ae1c:	f04f 0a02 	mov.w	sl, #2
 800ae20:	4639      	mov	r1, r7
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff fe9e 	bl	800ab64 <rshift>
 800ae28:	443d      	add	r5, r7
 800ae2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae2e:	42ab      	cmp	r3, r5
 800ae30:	da4a      	bge.n	800aec8 <__gethex+0x294>
 800ae32:	4621      	mov	r1, r4
 800ae34:	9802      	ldr	r0, [sp, #8]
 800ae36:	f000 fa67 	bl	800b308 <_Bfree>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae3e:	27a3      	movs	r7, #163	; 0xa3
 800ae40:	6013      	str	r3, [r2, #0]
 800ae42:	e789      	b.n	800ad58 <__gethex+0x124>
 800ae44:	1e73      	subs	r3, r6, #1
 800ae46:	9a06      	ldr	r2, [sp, #24]
 800ae48:	9307      	str	r3, [sp, #28]
 800ae4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d019      	beq.n	800ae86 <__gethex+0x252>
 800ae52:	f1bb 0f20 	cmp.w	fp, #32
 800ae56:	d107      	bne.n	800ae68 <__gethex+0x234>
 800ae58:	9b04      	ldr	r3, [sp, #16]
 800ae5a:	9a01      	ldr	r2, [sp, #4]
 800ae5c:	f843 2b04 	str.w	r2, [r3], #4
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	2300      	movs	r3, #0
 800ae64:	469b      	mov	fp, r3
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae6c:	f7ff fecd 	bl	800ac0a <__hexdig_fun>
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	f000 000f 	and.w	r0, r0, #15
 800ae76:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae7a:	4303      	orrs	r3, r0
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	f10b 0b04 	add.w	fp, fp, #4
 800ae82:	9b07      	ldr	r3, [sp, #28]
 800ae84:	e00d      	b.n	800aea2 <__gethex+0x26e>
 800ae86:	9a08      	ldr	r2, [sp, #32]
 800ae88:	1e73      	subs	r3, r6, #1
 800ae8a:	4413      	add	r3, r2
 800ae8c:	42bb      	cmp	r3, r7
 800ae8e:	d3e0      	bcc.n	800ae52 <__gethex+0x21e>
 800ae90:	4618      	mov	r0, r3
 800ae92:	4652      	mov	r2, sl
 800ae94:	9903      	ldr	r1, [sp, #12]
 800ae96:	9309      	str	r3, [sp, #36]	; 0x24
 800ae98:	f7fe f938 	bl	800910c <strncmp>
 800ae9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d1d7      	bne.n	800ae52 <__gethex+0x21e>
 800aea2:	461e      	mov	r6, r3
 800aea4:	e78c      	b.n	800adc0 <__gethex+0x18c>
 800aea6:	f04f 0a03 	mov.w	sl, #3
 800aeaa:	e7b9      	b.n	800ae20 <__gethex+0x1ec>
 800aeac:	da09      	bge.n	800aec2 <__gethex+0x28e>
 800aeae:	1bf7      	subs	r7, r6, r7
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	9802      	ldr	r0, [sp, #8]
 800aeb6:	f000 fc3f 	bl	800b738 <__lshift>
 800aeba:	4604      	mov	r4, r0
 800aebc:	1bed      	subs	r5, r5, r7
 800aebe:	f100 0914 	add.w	r9, r0, #20
 800aec2:	f04f 0a00 	mov.w	sl, #0
 800aec6:	e7b0      	b.n	800ae2a <__gethex+0x1f6>
 800aec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aecc:	42a8      	cmp	r0, r5
 800aece:	dd72      	ble.n	800afb6 <__gethex+0x382>
 800aed0:	1b45      	subs	r5, r0, r5
 800aed2:	42ae      	cmp	r6, r5
 800aed4:	dc35      	bgt.n	800af42 <__gethex+0x30e>
 800aed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d029      	beq.n	800af32 <__gethex+0x2fe>
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d02b      	beq.n	800af3a <__gethex+0x306>
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d11c      	bne.n	800af20 <__gethex+0x2ec>
 800aee6:	42ae      	cmp	r6, r5
 800aee8:	d11a      	bne.n	800af20 <__gethex+0x2ec>
 800aeea:	2e01      	cmp	r6, #1
 800aeec:	d112      	bne.n	800af14 <__gethex+0x2e0>
 800aeee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aef2:	9a05      	ldr	r2, [sp, #20]
 800aef4:	2762      	movs	r7, #98	; 0x62
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	2301      	movs	r3, #1
 800aefa:	6123      	str	r3, [r4, #16]
 800aefc:	f8c9 3000 	str.w	r3, [r9]
 800af00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af02:	601c      	str	r4, [r3, #0]
 800af04:	e728      	b.n	800ad58 <__gethex+0x124>
 800af06:	bf00      	nop
 800af08:	0800cf60 	.word	0x0800cf60
 800af0c:	0800cee8 	.word	0x0800cee8
 800af10:	0800cef9 	.word	0x0800cef9
 800af14:	4620      	mov	r0, r4
 800af16:	1e71      	subs	r1, r6, #1
 800af18:	f000 fe4d 	bl	800bbb6 <__any_on>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1e6      	bne.n	800aeee <__gethex+0x2ba>
 800af20:	4621      	mov	r1, r4
 800af22:	9802      	ldr	r0, [sp, #8]
 800af24:	f000 f9f0 	bl	800b308 <_Bfree>
 800af28:	2300      	movs	r3, #0
 800af2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af2c:	2750      	movs	r7, #80	; 0x50
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	e712      	b.n	800ad58 <__gethex+0x124>
 800af32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1f3      	bne.n	800af20 <__gethex+0x2ec>
 800af38:	e7d9      	b.n	800aeee <__gethex+0x2ba>
 800af3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1d6      	bne.n	800aeee <__gethex+0x2ba>
 800af40:	e7ee      	b.n	800af20 <__gethex+0x2ec>
 800af42:	1e6f      	subs	r7, r5, #1
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	d132      	bne.n	800afb0 <__gethex+0x37c>
 800af4a:	b127      	cbz	r7, 800af56 <__gethex+0x322>
 800af4c:	4639      	mov	r1, r7
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 fe31 	bl	800bbb6 <__any_on>
 800af54:	4682      	mov	sl, r0
 800af56:	2101      	movs	r1, #1
 800af58:	117b      	asrs	r3, r7, #5
 800af5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af5e:	f007 071f 	and.w	r7, r7, #31
 800af62:	fa01 f707 	lsl.w	r7, r1, r7
 800af66:	421f      	tst	r7, r3
 800af68:	f04f 0702 	mov.w	r7, #2
 800af6c:	4629      	mov	r1, r5
 800af6e:	4620      	mov	r0, r4
 800af70:	bf18      	it	ne
 800af72:	f04a 0a02 	orrne.w	sl, sl, #2
 800af76:	1b76      	subs	r6, r6, r5
 800af78:	f7ff fdf4 	bl	800ab64 <rshift>
 800af7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af80:	f1ba 0f00 	cmp.w	sl, #0
 800af84:	d048      	beq.n	800b018 <__gethex+0x3e4>
 800af86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d015      	beq.n	800afba <__gethex+0x386>
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d017      	beq.n	800afc2 <__gethex+0x38e>
 800af92:	2b01      	cmp	r3, #1
 800af94:	d109      	bne.n	800afaa <__gethex+0x376>
 800af96:	f01a 0f02 	tst.w	sl, #2
 800af9a:	d006      	beq.n	800afaa <__gethex+0x376>
 800af9c:	f8d9 0000 	ldr.w	r0, [r9]
 800afa0:	ea4a 0a00 	orr.w	sl, sl, r0
 800afa4:	f01a 0f01 	tst.w	sl, #1
 800afa8:	d10e      	bne.n	800afc8 <__gethex+0x394>
 800afaa:	f047 0710 	orr.w	r7, r7, #16
 800afae:	e033      	b.n	800b018 <__gethex+0x3e4>
 800afb0:	f04f 0a01 	mov.w	sl, #1
 800afb4:	e7cf      	b.n	800af56 <__gethex+0x322>
 800afb6:	2701      	movs	r7, #1
 800afb8:	e7e2      	b.n	800af80 <__gethex+0x34c>
 800afba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afbc:	f1c3 0301 	rsb	r3, r3, #1
 800afc0:	9315      	str	r3, [sp, #84]	; 0x54
 800afc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0f0      	beq.n	800afaa <__gethex+0x376>
 800afc8:	f04f 0c00 	mov.w	ip, #0
 800afcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afd0:	f104 0314 	add.w	r3, r4, #20
 800afd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afdc:	4618      	mov	r0, r3
 800afde:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800afe6:	d01c      	beq.n	800b022 <__gethex+0x3ee>
 800afe8:	3201      	adds	r2, #1
 800afea:	6002      	str	r2, [r0, #0]
 800afec:	2f02      	cmp	r7, #2
 800afee:	f104 0314 	add.w	r3, r4, #20
 800aff2:	d13d      	bne.n	800b070 <__gethex+0x43c>
 800aff4:	f8d8 2000 	ldr.w	r2, [r8]
 800aff8:	3a01      	subs	r2, #1
 800affa:	42b2      	cmp	r2, r6
 800affc:	d10a      	bne.n	800b014 <__gethex+0x3e0>
 800affe:	2201      	movs	r2, #1
 800b000:	1171      	asrs	r1, r6, #5
 800b002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b006:	f006 061f 	and.w	r6, r6, #31
 800b00a:	fa02 f606 	lsl.w	r6, r2, r6
 800b00e:	421e      	tst	r6, r3
 800b010:	bf18      	it	ne
 800b012:	4617      	movne	r7, r2
 800b014:	f047 0720 	orr.w	r7, r7, #32
 800b018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b01a:	601c      	str	r4, [r3, #0]
 800b01c:	9b05      	ldr	r3, [sp, #20]
 800b01e:	601d      	str	r5, [r3, #0]
 800b020:	e69a      	b.n	800ad58 <__gethex+0x124>
 800b022:	4299      	cmp	r1, r3
 800b024:	f843 cc04 	str.w	ip, [r3, #-4]
 800b028:	d8d8      	bhi.n	800afdc <__gethex+0x3a8>
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	459b      	cmp	fp, r3
 800b02e:	db17      	blt.n	800b060 <__gethex+0x42c>
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	9802      	ldr	r0, [sp, #8]
 800b034:	3101      	adds	r1, #1
 800b036:	f000 f927 	bl	800b288 <_Balloc>
 800b03a:	4681      	mov	r9, r0
 800b03c:	b918      	cbnz	r0, 800b046 <__gethex+0x412>
 800b03e:	4602      	mov	r2, r0
 800b040:	2184      	movs	r1, #132	; 0x84
 800b042:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <__gethex+0x474>)
 800b044:	e6ab      	b.n	800ad9e <__gethex+0x16a>
 800b046:	6922      	ldr	r2, [r4, #16]
 800b048:	f104 010c 	add.w	r1, r4, #12
 800b04c:	3202      	adds	r2, #2
 800b04e:	0092      	lsls	r2, r2, #2
 800b050:	300c      	adds	r0, #12
 800b052:	f7fd fbc5 	bl	80087e0 <memcpy>
 800b056:	4621      	mov	r1, r4
 800b058:	9802      	ldr	r0, [sp, #8]
 800b05a:	f000 f955 	bl	800b308 <_Bfree>
 800b05e:	464c      	mov	r4, r9
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	6122      	str	r2, [r4, #16]
 800b066:	2201      	movs	r2, #1
 800b068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b06c:	615a      	str	r2, [r3, #20]
 800b06e:	e7bd      	b.n	800afec <__gethex+0x3b8>
 800b070:	6922      	ldr	r2, [r4, #16]
 800b072:	455a      	cmp	r2, fp
 800b074:	dd0b      	ble.n	800b08e <__gethex+0x45a>
 800b076:	2101      	movs	r1, #1
 800b078:	4620      	mov	r0, r4
 800b07a:	f7ff fd73 	bl	800ab64 <rshift>
 800b07e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b082:	3501      	adds	r5, #1
 800b084:	42ab      	cmp	r3, r5
 800b086:	f6ff aed4 	blt.w	800ae32 <__gethex+0x1fe>
 800b08a:	2701      	movs	r7, #1
 800b08c:	e7c2      	b.n	800b014 <__gethex+0x3e0>
 800b08e:	f016 061f 	ands.w	r6, r6, #31
 800b092:	d0fa      	beq.n	800b08a <__gethex+0x456>
 800b094:	4453      	add	r3, sl
 800b096:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b09a:	f000 f9e7 	bl	800b46c <__hi0bits>
 800b09e:	f1c6 0620 	rsb	r6, r6, #32
 800b0a2:	42b0      	cmp	r0, r6
 800b0a4:	dbe7      	blt.n	800b076 <__gethex+0x442>
 800b0a6:	e7f0      	b.n	800b08a <__gethex+0x456>
 800b0a8:	0800cee8 	.word	0x0800cee8

0800b0ac <L_shift>:
 800b0ac:	f1c2 0208 	rsb	r2, r2, #8
 800b0b0:	0092      	lsls	r2, r2, #2
 800b0b2:	b570      	push	{r4, r5, r6, lr}
 800b0b4:	f1c2 0620 	rsb	r6, r2, #32
 800b0b8:	6843      	ldr	r3, [r0, #4]
 800b0ba:	6804      	ldr	r4, [r0, #0]
 800b0bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b0c0:	432c      	orrs	r4, r5
 800b0c2:	40d3      	lsrs	r3, r2
 800b0c4:	6004      	str	r4, [r0, #0]
 800b0c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0ca:	4288      	cmp	r0, r1
 800b0cc:	d3f4      	bcc.n	800b0b8 <L_shift+0xc>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}

0800b0d0 <__match>:
 800b0d0:	b530      	push	{r4, r5, lr}
 800b0d2:	6803      	ldr	r3, [r0, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0da:	b914      	cbnz	r4, 800b0e2 <__match+0x12>
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	2001      	movs	r0, #1
 800b0e0:	bd30      	pop	{r4, r5, pc}
 800b0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0ea:	2d19      	cmp	r5, #25
 800b0ec:	bf98      	it	ls
 800b0ee:	3220      	addls	r2, #32
 800b0f0:	42a2      	cmp	r2, r4
 800b0f2:	d0f0      	beq.n	800b0d6 <__match+0x6>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e7f3      	b.n	800b0e0 <__match+0x10>

0800b0f8 <__hexnan>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	2500      	movs	r5, #0
 800b0fe:	680b      	ldr	r3, [r1, #0]
 800b100:	4682      	mov	sl, r0
 800b102:	115e      	asrs	r6, r3, #5
 800b104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b108:	f013 031f 	ands.w	r3, r3, #31
 800b10c:	bf18      	it	ne
 800b10e:	3604      	addne	r6, #4
 800b110:	1f37      	subs	r7, r6, #4
 800b112:	46b9      	mov	r9, r7
 800b114:	463c      	mov	r4, r7
 800b116:	46ab      	mov	fp, r5
 800b118:	b087      	sub	sp, #28
 800b11a:	4690      	mov	r8, r2
 800b11c:	6802      	ldr	r2, [r0, #0]
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f846 5c04 	str.w	r5, [r6, #-4]
 800b124:	9502      	str	r5, [sp, #8]
 800b126:	7851      	ldrb	r1, [r2, #1]
 800b128:	1c53      	adds	r3, r2, #1
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	b341      	cbz	r1, 800b180 <__hexnan+0x88>
 800b12e:	4608      	mov	r0, r1
 800b130:	9205      	str	r2, [sp, #20]
 800b132:	9104      	str	r1, [sp, #16]
 800b134:	f7ff fd69 	bl	800ac0a <__hexdig_fun>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d14f      	bne.n	800b1dc <__hexnan+0xe4>
 800b13c:	9904      	ldr	r1, [sp, #16]
 800b13e:	9a05      	ldr	r2, [sp, #20]
 800b140:	2920      	cmp	r1, #32
 800b142:	d818      	bhi.n	800b176 <__hexnan+0x7e>
 800b144:	9b02      	ldr	r3, [sp, #8]
 800b146:	459b      	cmp	fp, r3
 800b148:	dd13      	ble.n	800b172 <__hexnan+0x7a>
 800b14a:	454c      	cmp	r4, r9
 800b14c:	d206      	bcs.n	800b15c <__hexnan+0x64>
 800b14e:	2d07      	cmp	r5, #7
 800b150:	dc04      	bgt.n	800b15c <__hexnan+0x64>
 800b152:	462a      	mov	r2, r5
 800b154:	4649      	mov	r1, r9
 800b156:	4620      	mov	r0, r4
 800b158:	f7ff ffa8 	bl	800b0ac <L_shift>
 800b15c:	4544      	cmp	r4, r8
 800b15e:	d950      	bls.n	800b202 <__hexnan+0x10a>
 800b160:	2300      	movs	r3, #0
 800b162:	f1a4 0904 	sub.w	r9, r4, #4
 800b166:	f844 3c04 	str.w	r3, [r4, #-4]
 800b16a:	461d      	mov	r5, r3
 800b16c:	464c      	mov	r4, r9
 800b16e:	f8cd b008 	str.w	fp, [sp, #8]
 800b172:	9a03      	ldr	r2, [sp, #12]
 800b174:	e7d7      	b.n	800b126 <__hexnan+0x2e>
 800b176:	2929      	cmp	r1, #41	; 0x29
 800b178:	d156      	bne.n	800b228 <__hexnan+0x130>
 800b17a:	3202      	adds	r2, #2
 800b17c:	f8ca 2000 	str.w	r2, [sl]
 800b180:	f1bb 0f00 	cmp.w	fp, #0
 800b184:	d050      	beq.n	800b228 <__hexnan+0x130>
 800b186:	454c      	cmp	r4, r9
 800b188:	d206      	bcs.n	800b198 <__hexnan+0xa0>
 800b18a:	2d07      	cmp	r5, #7
 800b18c:	dc04      	bgt.n	800b198 <__hexnan+0xa0>
 800b18e:	462a      	mov	r2, r5
 800b190:	4649      	mov	r1, r9
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff ff8a 	bl	800b0ac <L_shift>
 800b198:	4544      	cmp	r4, r8
 800b19a:	d934      	bls.n	800b206 <__hexnan+0x10e>
 800b19c:	4623      	mov	r3, r4
 800b19e:	f1a8 0204 	sub.w	r2, r8, #4
 800b1a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1a6:	429f      	cmp	r7, r3
 800b1a8:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1ac:	d2f9      	bcs.n	800b1a2 <__hexnan+0xaa>
 800b1ae:	1b3b      	subs	r3, r7, r4
 800b1b0:	f023 0303 	bic.w	r3, r3, #3
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	3e03      	subs	r6, #3
 800b1ba:	42b4      	cmp	r4, r6
 800b1bc:	bf88      	it	hi
 800b1be:	2304      	movhi	r3, #4
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4443      	add	r3, r8
 800b1c4:	f843 2b04 	str.w	r2, [r3], #4
 800b1c8:	429f      	cmp	r7, r3
 800b1ca:	d2fb      	bcs.n	800b1c4 <__hexnan+0xcc>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	b91b      	cbnz	r3, 800b1d8 <__hexnan+0xe0>
 800b1d0:	4547      	cmp	r7, r8
 800b1d2:	d127      	bne.n	800b224 <__hexnan+0x12c>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	2005      	movs	r0, #5
 800b1da:	e026      	b.n	800b22a <__hexnan+0x132>
 800b1dc:	3501      	adds	r5, #1
 800b1de:	2d08      	cmp	r5, #8
 800b1e0:	f10b 0b01 	add.w	fp, fp, #1
 800b1e4:	dd06      	ble.n	800b1f4 <__hexnan+0xfc>
 800b1e6:	4544      	cmp	r4, r8
 800b1e8:	d9c3      	bls.n	800b172 <__hexnan+0x7a>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	2501      	movs	r5, #1
 800b1ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1f2:	3c04      	subs	r4, #4
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	f000 000f 	and.w	r0, r0, #15
 800b1fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b1fe:	6022      	str	r2, [r4, #0]
 800b200:	e7b7      	b.n	800b172 <__hexnan+0x7a>
 800b202:	2508      	movs	r5, #8
 800b204:	e7b5      	b.n	800b172 <__hexnan+0x7a>
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0df      	beq.n	800b1cc <__hexnan+0xd4>
 800b20c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b210:	f1c3 0320 	rsb	r3, r3, #32
 800b214:	fa22 f303 	lsr.w	r3, r2, r3
 800b218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b21c:	401a      	ands	r2, r3
 800b21e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b222:	e7d3      	b.n	800b1cc <__hexnan+0xd4>
 800b224:	3f04      	subs	r7, #4
 800b226:	e7d1      	b.n	800b1cc <__hexnan+0xd4>
 800b228:	2004      	movs	r0, #4
 800b22a:	b007      	add	sp, #28
 800b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b230 <_localeconv_r>:
 800b230:	4800      	ldr	r0, [pc, #0]	; (800b234 <_localeconv_r+0x4>)
 800b232:	4770      	bx	lr
 800b234:	20000248 	.word	0x20000248

0800b238 <malloc>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <malloc+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f000 bd57 	b.w	800bcf0 <_malloc_r>
 800b242:	bf00      	nop
 800b244:	200000f0 	.word	0x200000f0

0800b248 <__ascii_mbtowc>:
 800b248:	b082      	sub	sp, #8
 800b24a:	b901      	cbnz	r1, 800b24e <__ascii_mbtowc+0x6>
 800b24c:	a901      	add	r1, sp, #4
 800b24e:	b142      	cbz	r2, 800b262 <__ascii_mbtowc+0x1a>
 800b250:	b14b      	cbz	r3, 800b266 <__ascii_mbtowc+0x1e>
 800b252:	7813      	ldrb	r3, [r2, #0]
 800b254:	600b      	str	r3, [r1, #0]
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	1e10      	subs	r0, r2, #0
 800b25a:	bf18      	it	ne
 800b25c:	2001      	movne	r0, #1
 800b25e:	b002      	add	sp, #8
 800b260:	4770      	bx	lr
 800b262:	4610      	mov	r0, r2
 800b264:	e7fb      	b.n	800b25e <__ascii_mbtowc+0x16>
 800b266:	f06f 0001 	mvn.w	r0, #1
 800b26a:	e7f8      	b.n	800b25e <__ascii_mbtowc+0x16>

0800b26c <memchr>:
 800b26c:	4603      	mov	r3, r0
 800b26e:	b510      	push	{r4, lr}
 800b270:	b2c9      	uxtb	r1, r1
 800b272:	4402      	add	r2, r0
 800b274:	4293      	cmp	r3, r2
 800b276:	4618      	mov	r0, r3
 800b278:	d101      	bne.n	800b27e <memchr+0x12>
 800b27a:	2000      	movs	r0, #0
 800b27c:	e003      	b.n	800b286 <memchr+0x1a>
 800b27e:	7804      	ldrb	r4, [r0, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	428c      	cmp	r4, r1
 800b284:	d1f6      	bne.n	800b274 <memchr+0x8>
 800b286:	bd10      	pop	{r4, pc}

0800b288 <_Balloc>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	b976      	cbnz	r6, 800b2b0 <_Balloc+0x28>
 800b292:	2010      	movs	r0, #16
 800b294:	f7ff ffd0 	bl	800b238 <malloc>
 800b298:	4602      	mov	r2, r0
 800b29a:	6260      	str	r0, [r4, #36]	; 0x24
 800b29c:	b920      	cbnz	r0, 800b2a8 <_Balloc+0x20>
 800b29e:	2166      	movs	r1, #102	; 0x66
 800b2a0:	4b17      	ldr	r3, [pc, #92]	; (800b300 <_Balloc+0x78>)
 800b2a2:	4818      	ldr	r0, [pc, #96]	; (800b304 <_Balloc+0x7c>)
 800b2a4:	f000 ff18 	bl	800c0d8 <__assert_func>
 800b2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2ac:	6006      	str	r6, [r0, #0]
 800b2ae:	60c6      	str	r6, [r0, #12]
 800b2b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2b2:	68f3      	ldr	r3, [r6, #12]
 800b2b4:	b183      	cbz	r3, 800b2d8 <_Balloc+0x50>
 800b2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2be:	b9b8      	cbnz	r0, 800b2f0 <_Balloc+0x68>
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2c6:	1d72      	adds	r2, r6, #5
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	0092      	lsls	r2, r2, #2
 800b2cc:	f000 fc94 	bl	800bbf8 <_calloc_r>
 800b2d0:	b160      	cbz	r0, 800b2ec <_Balloc+0x64>
 800b2d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2d6:	e00e      	b.n	800b2f6 <_Balloc+0x6e>
 800b2d8:	2221      	movs	r2, #33	; 0x21
 800b2da:	2104      	movs	r1, #4
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 fc8b 	bl	800bbf8 <_calloc_r>
 800b2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e4:	60f0      	str	r0, [r6, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e4      	bne.n	800b2b6 <_Balloc+0x2e>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	6802      	ldr	r2, [r0, #0]
 800b2f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2fc:	e7f7      	b.n	800b2ee <_Balloc+0x66>
 800b2fe:	bf00      	nop
 800b300:	0800ce76 	.word	0x0800ce76
 800b304:	0800cf74 	.word	0x0800cf74

0800b308 <_Bfree>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b30c:	4605      	mov	r5, r0
 800b30e:	460c      	mov	r4, r1
 800b310:	b976      	cbnz	r6, 800b330 <_Bfree+0x28>
 800b312:	2010      	movs	r0, #16
 800b314:	f7ff ff90 	bl	800b238 <malloc>
 800b318:	4602      	mov	r2, r0
 800b31a:	6268      	str	r0, [r5, #36]	; 0x24
 800b31c:	b920      	cbnz	r0, 800b328 <_Bfree+0x20>
 800b31e:	218a      	movs	r1, #138	; 0x8a
 800b320:	4b08      	ldr	r3, [pc, #32]	; (800b344 <_Bfree+0x3c>)
 800b322:	4809      	ldr	r0, [pc, #36]	; (800b348 <_Bfree+0x40>)
 800b324:	f000 fed8 	bl	800c0d8 <__assert_func>
 800b328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b32c:	6006      	str	r6, [r0, #0]
 800b32e:	60c6      	str	r6, [r0, #12]
 800b330:	b13c      	cbz	r4, 800b342 <_Bfree+0x3a>
 800b332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b334:	6862      	ldr	r2, [r4, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b33c:	6021      	str	r1, [r4, #0]
 800b33e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	0800ce76 	.word	0x0800ce76
 800b348:	0800cf74 	.word	0x0800cf74

0800b34c <__multadd>:
 800b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b350:	4607      	mov	r7, r0
 800b352:	460c      	mov	r4, r1
 800b354:	461e      	mov	r6, r3
 800b356:	2000      	movs	r0, #0
 800b358:	690d      	ldr	r5, [r1, #16]
 800b35a:	f101 0c14 	add.w	ip, r1, #20
 800b35e:	f8dc 3000 	ldr.w	r3, [ip]
 800b362:	3001      	adds	r0, #1
 800b364:	b299      	uxth	r1, r3
 800b366:	fb02 6101 	mla	r1, r2, r1, r6
 800b36a:	0c1e      	lsrs	r6, r3, #16
 800b36c:	0c0b      	lsrs	r3, r1, #16
 800b36e:	fb02 3306 	mla	r3, r2, r6, r3
 800b372:	b289      	uxth	r1, r1
 800b374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b378:	4285      	cmp	r5, r0
 800b37a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b37e:	f84c 1b04 	str.w	r1, [ip], #4
 800b382:	dcec      	bgt.n	800b35e <__multadd+0x12>
 800b384:	b30e      	cbz	r6, 800b3ca <__multadd+0x7e>
 800b386:	68a3      	ldr	r3, [r4, #8]
 800b388:	42ab      	cmp	r3, r5
 800b38a:	dc19      	bgt.n	800b3c0 <__multadd+0x74>
 800b38c:	6861      	ldr	r1, [r4, #4]
 800b38e:	4638      	mov	r0, r7
 800b390:	3101      	adds	r1, #1
 800b392:	f7ff ff79 	bl	800b288 <_Balloc>
 800b396:	4680      	mov	r8, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__multadd+0x5a>
 800b39a:	4602      	mov	r2, r0
 800b39c:	21b5      	movs	r1, #181	; 0xb5
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <__multadd+0x84>)
 800b3a0:	480c      	ldr	r0, [pc, #48]	; (800b3d4 <__multadd+0x88>)
 800b3a2:	f000 fe99 	bl	800c0d8 <__assert_func>
 800b3a6:	6922      	ldr	r2, [r4, #16]
 800b3a8:	f104 010c 	add.w	r1, r4, #12
 800b3ac:	3202      	adds	r2, #2
 800b3ae:	0092      	lsls	r2, r2, #2
 800b3b0:	300c      	adds	r0, #12
 800b3b2:	f7fd fa15 	bl	80087e0 <memcpy>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ffa5 	bl	800b308 <_Bfree>
 800b3be:	4644      	mov	r4, r8
 800b3c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	615e      	str	r6, [r3, #20]
 800b3c8:	6125      	str	r5, [r4, #16]
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d0:	0800cee8 	.word	0x0800cee8
 800b3d4:	0800cf74 	.word	0x0800cf74

0800b3d8 <__s2b>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4615      	mov	r5, r2
 800b3de:	2209      	movs	r2, #9
 800b3e0:	461f      	mov	r7, r3
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	db09      	blt.n	800b408 <__s2b+0x30>
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f7ff ff47 	bl	800b288 <_Balloc>
 800b3fa:	b940      	cbnz	r0, 800b40e <__s2b+0x36>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	21ce      	movs	r1, #206	; 0xce
 800b400:	4b18      	ldr	r3, [pc, #96]	; (800b464 <__s2b+0x8c>)
 800b402:	4819      	ldr	r0, [pc, #100]	; (800b468 <__s2b+0x90>)
 800b404:	f000 fe68 	bl	800c0d8 <__assert_func>
 800b408:	0052      	lsls	r2, r2, #1
 800b40a:	3101      	adds	r1, #1
 800b40c:	e7f0      	b.n	800b3f0 <__s2b+0x18>
 800b40e:	9b08      	ldr	r3, [sp, #32]
 800b410:	2d09      	cmp	r5, #9
 800b412:	6143      	str	r3, [r0, #20]
 800b414:	f04f 0301 	mov.w	r3, #1
 800b418:	6103      	str	r3, [r0, #16]
 800b41a:	dd16      	ble.n	800b44a <__s2b+0x72>
 800b41c:	f104 0909 	add.w	r9, r4, #9
 800b420:	46c8      	mov	r8, r9
 800b422:	442c      	add	r4, r5
 800b424:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b428:	4601      	mov	r1, r0
 800b42a:	220a      	movs	r2, #10
 800b42c:	4630      	mov	r0, r6
 800b42e:	3b30      	subs	r3, #48	; 0x30
 800b430:	f7ff ff8c 	bl	800b34c <__multadd>
 800b434:	45a0      	cmp	r8, r4
 800b436:	d1f5      	bne.n	800b424 <__s2b+0x4c>
 800b438:	f1a5 0408 	sub.w	r4, r5, #8
 800b43c:	444c      	add	r4, r9
 800b43e:	1b2d      	subs	r5, r5, r4
 800b440:	1963      	adds	r3, r4, r5
 800b442:	42bb      	cmp	r3, r7
 800b444:	db04      	blt.n	800b450 <__s2b+0x78>
 800b446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44a:	2509      	movs	r5, #9
 800b44c:	340a      	adds	r4, #10
 800b44e:	e7f6      	b.n	800b43e <__s2b+0x66>
 800b450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b454:	4601      	mov	r1, r0
 800b456:	220a      	movs	r2, #10
 800b458:	4630      	mov	r0, r6
 800b45a:	3b30      	subs	r3, #48	; 0x30
 800b45c:	f7ff ff76 	bl	800b34c <__multadd>
 800b460:	e7ee      	b.n	800b440 <__s2b+0x68>
 800b462:	bf00      	nop
 800b464:	0800cee8 	.word	0x0800cee8
 800b468:	0800cf74 	.word	0x0800cf74

0800b46c <__hi0bits>:
 800b46c:	0c02      	lsrs	r2, r0, #16
 800b46e:	0412      	lsls	r2, r2, #16
 800b470:	4603      	mov	r3, r0
 800b472:	b9ca      	cbnz	r2, 800b4a8 <__hi0bits+0x3c>
 800b474:	0403      	lsls	r3, r0, #16
 800b476:	2010      	movs	r0, #16
 800b478:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b47c:	bf04      	itt	eq
 800b47e:	021b      	lsleq	r3, r3, #8
 800b480:	3008      	addeq	r0, #8
 800b482:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b486:	bf04      	itt	eq
 800b488:	011b      	lsleq	r3, r3, #4
 800b48a:	3004      	addeq	r0, #4
 800b48c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b490:	bf04      	itt	eq
 800b492:	009b      	lsleq	r3, r3, #2
 800b494:	3002      	addeq	r0, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	db05      	blt.n	800b4a6 <__hi0bits+0x3a>
 800b49a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b49e:	f100 0001 	add.w	r0, r0, #1
 800b4a2:	bf08      	it	eq
 800b4a4:	2020      	moveq	r0, #32
 800b4a6:	4770      	bx	lr
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e7e5      	b.n	800b478 <__hi0bits+0xc>

0800b4ac <__lo0bits>:
 800b4ac:	6803      	ldr	r3, [r0, #0]
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	f013 0007 	ands.w	r0, r3, #7
 800b4b4:	d00b      	beq.n	800b4ce <__lo0bits+0x22>
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d421      	bmi.n	800b4fe <__lo0bits+0x52>
 800b4ba:	0798      	lsls	r0, r3, #30
 800b4bc:	bf49      	itett	mi
 800b4be:	085b      	lsrmi	r3, r3, #1
 800b4c0:	089b      	lsrpl	r3, r3, #2
 800b4c2:	2001      	movmi	r0, #1
 800b4c4:	6013      	strmi	r3, [r2, #0]
 800b4c6:	bf5c      	itt	pl
 800b4c8:	2002      	movpl	r0, #2
 800b4ca:	6013      	strpl	r3, [r2, #0]
 800b4cc:	4770      	bx	lr
 800b4ce:	b299      	uxth	r1, r3
 800b4d0:	b909      	cbnz	r1, 800b4d6 <__lo0bits+0x2a>
 800b4d2:	2010      	movs	r0, #16
 800b4d4:	0c1b      	lsrs	r3, r3, #16
 800b4d6:	b2d9      	uxtb	r1, r3
 800b4d8:	b909      	cbnz	r1, 800b4de <__lo0bits+0x32>
 800b4da:	3008      	adds	r0, #8
 800b4dc:	0a1b      	lsrs	r3, r3, #8
 800b4de:	0719      	lsls	r1, r3, #28
 800b4e0:	bf04      	itt	eq
 800b4e2:	091b      	lsreq	r3, r3, #4
 800b4e4:	3004      	addeq	r0, #4
 800b4e6:	0799      	lsls	r1, r3, #30
 800b4e8:	bf04      	itt	eq
 800b4ea:	089b      	lsreq	r3, r3, #2
 800b4ec:	3002      	addeq	r0, #2
 800b4ee:	07d9      	lsls	r1, r3, #31
 800b4f0:	d403      	bmi.n	800b4fa <__lo0bits+0x4e>
 800b4f2:	085b      	lsrs	r3, r3, #1
 800b4f4:	f100 0001 	add.w	r0, r0, #1
 800b4f8:	d003      	beq.n	800b502 <__lo0bits+0x56>
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	4770      	bx	lr
 800b4fe:	2000      	movs	r0, #0
 800b500:	4770      	bx	lr
 800b502:	2020      	movs	r0, #32
 800b504:	4770      	bx	lr
	...

0800b508 <__i2b>:
 800b508:	b510      	push	{r4, lr}
 800b50a:	460c      	mov	r4, r1
 800b50c:	2101      	movs	r1, #1
 800b50e:	f7ff febb 	bl	800b288 <_Balloc>
 800b512:	4602      	mov	r2, r0
 800b514:	b928      	cbnz	r0, 800b522 <__i2b+0x1a>
 800b516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <__i2b+0x24>)
 800b51c:	4804      	ldr	r0, [pc, #16]	; (800b530 <__i2b+0x28>)
 800b51e:	f000 fddb 	bl	800c0d8 <__assert_func>
 800b522:	2301      	movs	r3, #1
 800b524:	6144      	str	r4, [r0, #20]
 800b526:	6103      	str	r3, [r0, #16]
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	bf00      	nop
 800b52c:	0800cee8 	.word	0x0800cee8
 800b530:	0800cf74 	.word	0x0800cf74

0800b534 <__multiply>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	4691      	mov	r9, r2
 800b53a:	690a      	ldr	r2, [r1, #16]
 800b53c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b540:	460c      	mov	r4, r1
 800b542:	429a      	cmp	r2, r3
 800b544:	bfbe      	ittt	lt
 800b546:	460b      	movlt	r3, r1
 800b548:	464c      	movlt	r4, r9
 800b54a:	4699      	movlt	r9, r3
 800b54c:	6927      	ldr	r7, [r4, #16]
 800b54e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b552:	68a3      	ldr	r3, [r4, #8]
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	eb07 060a 	add.w	r6, r7, sl
 800b55a:	42b3      	cmp	r3, r6
 800b55c:	b085      	sub	sp, #20
 800b55e:	bfb8      	it	lt
 800b560:	3101      	addlt	r1, #1
 800b562:	f7ff fe91 	bl	800b288 <_Balloc>
 800b566:	b930      	cbnz	r0, 800b576 <__multiply+0x42>
 800b568:	4602      	mov	r2, r0
 800b56a:	f240 115d 	movw	r1, #349	; 0x15d
 800b56e:	4b43      	ldr	r3, [pc, #268]	; (800b67c <__multiply+0x148>)
 800b570:	4843      	ldr	r0, [pc, #268]	; (800b680 <__multiply+0x14c>)
 800b572:	f000 fdb1 	bl	800c0d8 <__assert_func>
 800b576:	f100 0514 	add.w	r5, r0, #20
 800b57a:	462b      	mov	r3, r5
 800b57c:	2200      	movs	r2, #0
 800b57e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b582:	4543      	cmp	r3, r8
 800b584:	d321      	bcc.n	800b5ca <__multiply+0x96>
 800b586:	f104 0314 	add.w	r3, r4, #20
 800b58a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b58e:	f109 0314 	add.w	r3, r9, #20
 800b592:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b596:	9202      	str	r2, [sp, #8]
 800b598:	1b3a      	subs	r2, r7, r4
 800b59a:	3a15      	subs	r2, #21
 800b59c:	f022 0203 	bic.w	r2, r2, #3
 800b5a0:	3204      	adds	r2, #4
 800b5a2:	f104 0115 	add.w	r1, r4, #21
 800b5a6:	428f      	cmp	r7, r1
 800b5a8:	bf38      	it	cc
 800b5aa:	2204      	movcc	r2, #4
 800b5ac:	9201      	str	r2, [sp, #4]
 800b5ae:	9a02      	ldr	r2, [sp, #8]
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d80c      	bhi.n	800b5d0 <__multiply+0x9c>
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	dd03      	ble.n	800b5c2 <__multiply+0x8e>
 800b5ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d059      	beq.n	800b676 <__multiply+0x142>
 800b5c2:	6106      	str	r6, [r0, #16]
 800b5c4:	b005      	add	sp, #20
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	f843 2b04 	str.w	r2, [r3], #4
 800b5ce:	e7d8      	b.n	800b582 <__multiply+0x4e>
 800b5d0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5d4:	f1ba 0f00 	cmp.w	sl, #0
 800b5d8:	d023      	beq.n	800b622 <__multiply+0xee>
 800b5da:	46a9      	mov	r9, r5
 800b5dc:	f04f 0c00 	mov.w	ip, #0
 800b5e0:	f104 0e14 	add.w	lr, r4, #20
 800b5e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5e8:	f8d9 1000 	ldr.w	r1, [r9]
 800b5ec:	fa1f fb82 	uxth.w	fp, r2
 800b5f0:	b289      	uxth	r1, r1
 800b5f2:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5f6:	4461      	add	r1, ip
 800b5f8:	f8d9 c000 	ldr.w	ip, [r9]
 800b5fc:	0c12      	lsrs	r2, r2, #16
 800b5fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b602:	fb0a c202 	mla	r2, sl, r2, ip
 800b606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b60a:	b289      	uxth	r1, r1
 800b60c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b610:	4577      	cmp	r7, lr
 800b612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b616:	f849 1b04 	str.w	r1, [r9], #4
 800b61a:	d8e3      	bhi.n	800b5e4 <__multiply+0xb0>
 800b61c:	9a01      	ldr	r2, [sp, #4]
 800b61e:	f845 c002 	str.w	ip, [r5, r2]
 800b622:	9a03      	ldr	r2, [sp, #12]
 800b624:	3304      	adds	r3, #4
 800b626:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	d020      	beq.n	800b672 <__multiply+0x13e>
 800b630:	46ae      	mov	lr, r5
 800b632:	f04f 0a00 	mov.w	sl, #0
 800b636:	6829      	ldr	r1, [r5, #0]
 800b638:	f104 0c14 	add.w	ip, r4, #20
 800b63c:	f8bc b000 	ldrh.w	fp, [ip]
 800b640:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b644:	b289      	uxth	r1, r1
 800b646:	fb09 220b 	mla	r2, r9, fp, r2
 800b64a:	4492      	add	sl, r2
 800b64c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b650:	f84e 1b04 	str.w	r1, [lr], #4
 800b654:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b658:	f8be 1000 	ldrh.w	r1, [lr]
 800b65c:	0c12      	lsrs	r2, r2, #16
 800b65e:	fb09 1102 	mla	r1, r9, r2, r1
 800b662:	4567      	cmp	r7, ip
 800b664:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b66c:	d8e6      	bhi.n	800b63c <__multiply+0x108>
 800b66e:	9a01      	ldr	r2, [sp, #4]
 800b670:	50a9      	str	r1, [r5, r2]
 800b672:	3504      	adds	r5, #4
 800b674:	e79b      	b.n	800b5ae <__multiply+0x7a>
 800b676:	3e01      	subs	r6, #1
 800b678:	e79d      	b.n	800b5b6 <__multiply+0x82>
 800b67a:	bf00      	nop
 800b67c:	0800cee8 	.word	0x0800cee8
 800b680:	0800cf74 	.word	0x0800cf74

0800b684 <__pow5mult>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	4615      	mov	r5, r2
 800b68a:	f012 0203 	ands.w	r2, r2, #3
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	d007      	beq.n	800b6a4 <__pow5mult+0x20>
 800b694:	4c25      	ldr	r4, [pc, #148]	; (800b72c <__pow5mult+0xa8>)
 800b696:	3a01      	subs	r2, #1
 800b698:	2300      	movs	r3, #0
 800b69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b69e:	f7ff fe55 	bl	800b34c <__multadd>
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	10ad      	asrs	r5, r5, #2
 800b6a6:	d03d      	beq.n	800b724 <__pow5mult+0xa0>
 800b6a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6aa:	b97c      	cbnz	r4, 800b6cc <__pow5mult+0x48>
 800b6ac:	2010      	movs	r0, #16
 800b6ae:	f7ff fdc3 	bl	800b238 <malloc>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b6b6:	b928      	cbnz	r0, 800b6c4 <__pow5mult+0x40>
 800b6b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6bc:	4b1c      	ldr	r3, [pc, #112]	; (800b730 <__pow5mult+0xac>)
 800b6be:	481d      	ldr	r0, [pc, #116]	; (800b734 <__pow5mult+0xb0>)
 800b6c0:	f000 fd0a 	bl	800c0d8 <__assert_func>
 800b6c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6c8:	6004      	str	r4, [r0, #0]
 800b6ca:	60c4      	str	r4, [r0, #12]
 800b6cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6d4:	b94c      	cbnz	r4, 800b6ea <__pow5mult+0x66>
 800b6d6:	f240 2171 	movw	r1, #625	; 0x271
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ff14 	bl	800b508 <__i2b>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6e8:	6003      	str	r3, [r0, #0]
 800b6ea:	f04f 0900 	mov.w	r9, #0
 800b6ee:	07eb      	lsls	r3, r5, #31
 800b6f0:	d50a      	bpl.n	800b708 <__pow5mult+0x84>
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7ff ff1c 	bl	800b534 <__multiply>
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4639      	mov	r1, r7
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff fe01 	bl	800b308 <_Bfree>
 800b706:	4647      	mov	r7, r8
 800b708:	106d      	asrs	r5, r5, #1
 800b70a:	d00b      	beq.n	800b724 <__pow5mult+0xa0>
 800b70c:	6820      	ldr	r0, [r4, #0]
 800b70e:	b938      	cbnz	r0, 800b720 <__pow5mult+0x9c>
 800b710:	4622      	mov	r2, r4
 800b712:	4621      	mov	r1, r4
 800b714:	4630      	mov	r0, r6
 800b716:	f7ff ff0d 	bl	800b534 <__multiply>
 800b71a:	6020      	str	r0, [r4, #0]
 800b71c:	f8c0 9000 	str.w	r9, [r0]
 800b720:	4604      	mov	r4, r0
 800b722:	e7e4      	b.n	800b6ee <__pow5mult+0x6a>
 800b724:	4638      	mov	r0, r7
 800b726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72a:	bf00      	nop
 800b72c:	0800d0c0 	.word	0x0800d0c0
 800b730:	0800ce76 	.word	0x0800ce76
 800b734:	0800cf74 	.word	0x0800cf74

0800b738 <__lshift>:
 800b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73c:	460c      	mov	r4, r1
 800b73e:	4607      	mov	r7, r0
 800b740:	4691      	mov	r9, r2
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	6849      	ldr	r1, [r1, #4]
 800b746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b750:	f108 0601 	add.w	r6, r8, #1
 800b754:	42b3      	cmp	r3, r6
 800b756:	db0b      	blt.n	800b770 <__lshift+0x38>
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff fd95 	bl	800b288 <_Balloc>
 800b75e:	4605      	mov	r5, r0
 800b760:	b948      	cbnz	r0, 800b776 <__lshift+0x3e>
 800b762:	4602      	mov	r2, r0
 800b764:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b768:	4b29      	ldr	r3, [pc, #164]	; (800b810 <__lshift+0xd8>)
 800b76a:	482a      	ldr	r0, [pc, #168]	; (800b814 <__lshift+0xdc>)
 800b76c:	f000 fcb4 	bl	800c0d8 <__assert_func>
 800b770:	3101      	adds	r1, #1
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	e7ee      	b.n	800b754 <__lshift+0x1c>
 800b776:	2300      	movs	r3, #0
 800b778:	f100 0114 	add.w	r1, r0, #20
 800b77c:	f100 0210 	add.w	r2, r0, #16
 800b780:	4618      	mov	r0, r3
 800b782:	4553      	cmp	r3, sl
 800b784:	db37      	blt.n	800b7f6 <__lshift+0xbe>
 800b786:	6920      	ldr	r0, [r4, #16]
 800b788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b78c:	f104 0314 	add.w	r3, r4, #20
 800b790:	f019 091f 	ands.w	r9, r9, #31
 800b794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b79c:	d02f      	beq.n	800b7fe <__lshift+0xc6>
 800b79e:	468a      	mov	sl, r1
 800b7a0:	f04f 0c00 	mov.w	ip, #0
 800b7a4:	f1c9 0e20 	rsb	lr, r9, #32
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	fa02 f209 	lsl.w	r2, r2, r9
 800b7ae:	ea42 020c 	orr.w	r2, r2, ip
 800b7b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ba:	4298      	cmp	r0, r3
 800b7bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7c0:	d8f2      	bhi.n	800b7a8 <__lshift+0x70>
 800b7c2:	1b03      	subs	r3, r0, r4
 800b7c4:	3b15      	subs	r3, #21
 800b7c6:	f023 0303 	bic.w	r3, r3, #3
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	f104 0215 	add.w	r2, r4, #21
 800b7d0:	4290      	cmp	r0, r2
 800b7d2:	bf38      	it	cc
 800b7d4:	2304      	movcc	r3, #4
 800b7d6:	f841 c003 	str.w	ip, [r1, r3]
 800b7da:	f1bc 0f00 	cmp.w	ip, #0
 800b7de:	d001      	beq.n	800b7e4 <__lshift+0xac>
 800b7e0:	f108 0602 	add.w	r6, r8, #2
 800b7e4:	3e01      	subs	r6, #1
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	612e      	str	r6, [r5, #16]
 800b7ec:	f7ff fd8c 	bl	800b308 <_Bfree>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	e7c1      	b.n	800b782 <__lshift+0x4a>
 800b7fe:	3904      	subs	r1, #4
 800b800:	f853 2b04 	ldr.w	r2, [r3], #4
 800b804:	4298      	cmp	r0, r3
 800b806:	f841 2f04 	str.w	r2, [r1, #4]!
 800b80a:	d8f9      	bhi.n	800b800 <__lshift+0xc8>
 800b80c:	e7ea      	b.n	800b7e4 <__lshift+0xac>
 800b80e:	bf00      	nop
 800b810:	0800cee8 	.word	0x0800cee8
 800b814:	0800cf74 	.word	0x0800cf74

0800b818 <__mcmp>:
 800b818:	4603      	mov	r3, r0
 800b81a:	690a      	ldr	r2, [r1, #16]
 800b81c:	6900      	ldr	r0, [r0, #16]
 800b81e:	b530      	push	{r4, r5, lr}
 800b820:	1a80      	subs	r0, r0, r2
 800b822:	d10d      	bne.n	800b840 <__mcmp+0x28>
 800b824:	3314      	adds	r3, #20
 800b826:	3114      	adds	r1, #20
 800b828:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b82c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b830:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b834:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b838:	4295      	cmp	r5, r2
 800b83a:	d002      	beq.n	800b842 <__mcmp+0x2a>
 800b83c:	d304      	bcc.n	800b848 <__mcmp+0x30>
 800b83e:	2001      	movs	r0, #1
 800b840:	bd30      	pop	{r4, r5, pc}
 800b842:	42a3      	cmp	r3, r4
 800b844:	d3f4      	bcc.n	800b830 <__mcmp+0x18>
 800b846:	e7fb      	b.n	800b840 <__mcmp+0x28>
 800b848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b84c:	e7f8      	b.n	800b840 <__mcmp+0x28>
	...

0800b850 <__mdiff>:
 800b850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	460d      	mov	r5, r1
 800b856:	4607      	mov	r7, r0
 800b858:	4611      	mov	r1, r2
 800b85a:	4628      	mov	r0, r5
 800b85c:	4614      	mov	r4, r2
 800b85e:	f7ff ffdb 	bl	800b818 <__mcmp>
 800b862:	1e06      	subs	r6, r0, #0
 800b864:	d111      	bne.n	800b88a <__mdiff+0x3a>
 800b866:	4631      	mov	r1, r6
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff fd0d 	bl	800b288 <_Balloc>
 800b86e:	4602      	mov	r2, r0
 800b870:	b928      	cbnz	r0, 800b87e <__mdiff+0x2e>
 800b872:	f240 2132 	movw	r1, #562	; 0x232
 800b876:	4b3a      	ldr	r3, [pc, #232]	; (800b960 <__mdiff+0x110>)
 800b878:	483a      	ldr	r0, [pc, #232]	; (800b964 <__mdiff+0x114>)
 800b87a:	f000 fc2d 	bl	800c0d8 <__assert_func>
 800b87e:	2301      	movs	r3, #1
 800b880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b884:	4610      	mov	r0, r2
 800b886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88a:	bfa4      	itt	ge
 800b88c:	4623      	movge	r3, r4
 800b88e:	462c      	movge	r4, r5
 800b890:	4638      	mov	r0, r7
 800b892:	6861      	ldr	r1, [r4, #4]
 800b894:	bfa6      	itte	ge
 800b896:	461d      	movge	r5, r3
 800b898:	2600      	movge	r6, #0
 800b89a:	2601      	movlt	r6, #1
 800b89c:	f7ff fcf4 	bl	800b288 <_Balloc>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	b918      	cbnz	r0, 800b8ac <__mdiff+0x5c>
 800b8a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8a8:	4b2d      	ldr	r3, [pc, #180]	; (800b960 <__mdiff+0x110>)
 800b8aa:	e7e5      	b.n	800b878 <__mdiff+0x28>
 800b8ac:	f102 0814 	add.w	r8, r2, #20
 800b8b0:	46c2      	mov	sl, r8
 800b8b2:	f04f 0c00 	mov.w	ip, #0
 800b8b6:	6927      	ldr	r7, [r4, #16]
 800b8b8:	60c6      	str	r6, [r0, #12]
 800b8ba:	692e      	ldr	r6, [r5, #16]
 800b8bc:	f104 0014 	add.w	r0, r4, #20
 800b8c0:	f105 0914 	add.w	r9, r5, #20
 800b8c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b8c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8cc:	3410      	adds	r4, #16
 800b8ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b8d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8d6:	fa1f f18b 	uxth.w	r1, fp
 800b8da:	448c      	add	ip, r1
 800b8dc:	b299      	uxth	r1, r3
 800b8de:	0c1b      	lsrs	r3, r3, #16
 800b8e0:	ebac 0101 	sub.w	r1, ip, r1
 800b8e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8ec:	b289      	uxth	r1, r1
 800b8ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b8f2:	454e      	cmp	r6, r9
 800b8f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8f8:	f84a 3b04 	str.w	r3, [sl], #4
 800b8fc:	d8e7      	bhi.n	800b8ce <__mdiff+0x7e>
 800b8fe:	1b73      	subs	r3, r6, r5
 800b900:	3b15      	subs	r3, #21
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	3515      	adds	r5, #21
 800b908:	3304      	adds	r3, #4
 800b90a:	42ae      	cmp	r6, r5
 800b90c:	bf38      	it	cc
 800b90e:	2304      	movcc	r3, #4
 800b910:	4418      	add	r0, r3
 800b912:	4443      	add	r3, r8
 800b914:	461e      	mov	r6, r3
 800b916:	4605      	mov	r5, r0
 800b918:	4575      	cmp	r5, lr
 800b91a:	d30e      	bcc.n	800b93a <__mdiff+0xea>
 800b91c:	f10e 0103 	add.w	r1, lr, #3
 800b920:	1a09      	subs	r1, r1, r0
 800b922:	f021 0103 	bic.w	r1, r1, #3
 800b926:	3803      	subs	r0, #3
 800b928:	4586      	cmp	lr, r0
 800b92a:	bf38      	it	cc
 800b92c:	2100      	movcc	r1, #0
 800b92e:	4419      	add	r1, r3
 800b930:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b934:	b18b      	cbz	r3, 800b95a <__mdiff+0x10a>
 800b936:	6117      	str	r7, [r2, #16]
 800b938:	e7a4      	b.n	800b884 <__mdiff+0x34>
 800b93a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b93e:	fa1f f188 	uxth.w	r1, r8
 800b942:	4461      	add	r1, ip
 800b944:	140c      	asrs	r4, r1, #16
 800b946:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b94a:	b289      	uxth	r1, r1
 800b94c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b950:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b954:	f846 1b04 	str.w	r1, [r6], #4
 800b958:	e7de      	b.n	800b918 <__mdiff+0xc8>
 800b95a:	3f01      	subs	r7, #1
 800b95c:	e7e8      	b.n	800b930 <__mdiff+0xe0>
 800b95e:	bf00      	nop
 800b960:	0800cee8 	.word	0x0800cee8
 800b964:	0800cf74 	.word	0x0800cf74

0800b968 <__ulp>:
 800b968:	4b11      	ldr	r3, [pc, #68]	; (800b9b0 <__ulp+0x48>)
 800b96a:	400b      	ands	r3, r1
 800b96c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b970:	2b00      	cmp	r3, #0
 800b972:	dd02      	ble.n	800b97a <__ulp+0x12>
 800b974:	2000      	movs	r0, #0
 800b976:	4619      	mov	r1, r3
 800b978:	4770      	bx	lr
 800b97a:	425b      	negs	r3, r3
 800b97c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b980:	f04f 0000 	mov.w	r0, #0
 800b984:	f04f 0100 	mov.w	r1, #0
 800b988:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b98c:	da04      	bge.n	800b998 <__ulp+0x30>
 800b98e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b992:	fa43 f102 	asr.w	r1, r3, r2
 800b996:	4770      	bx	lr
 800b998:	f1a2 0314 	sub.w	r3, r2, #20
 800b99c:	2b1e      	cmp	r3, #30
 800b99e:	bfd6      	itet	le
 800b9a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b9a4:	2301      	movgt	r3, #1
 800b9a6:	fa22 f303 	lsrle.w	r3, r2, r3
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	7ff00000 	.word	0x7ff00000

0800b9b4 <__b2d>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	6907      	ldr	r7, [r0, #16]
 800b9ba:	f100 0914 	add.w	r9, r0, #20
 800b9be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b9c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b9c6:	f1a7 0804 	sub.w	r8, r7, #4
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff fd4e 	bl	800b46c <__hi0bits>
 800b9d0:	f1c0 0320 	rsb	r3, r0, #32
 800b9d4:	280a      	cmp	r0, #10
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	491f      	ldr	r1, [pc, #124]	; (800ba58 <__b2d+0xa4>)
 800b9da:	dc17      	bgt.n	800ba0c <__b2d+0x58>
 800b9dc:	45c1      	cmp	r9, r8
 800b9de:	bf28      	it	cs
 800b9e0:	2200      	movcs	r2, #0
 800b9e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b9e6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b9ea:	bf38      	it	cc
 800b9ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b9f0:	ea43 0501 	orr.w	r5, r3, r1
 800b9f4:	f100 0315 	add.w	r3, r0, #21
 800b9f8:	fa06 f303 	lsl.w	r3, r6, r3
 800b9fc:	fa22 f20c 	lsr.w	r2, r2, ip
 800ba00:	ea43 0402 	orr.w	r4, r3, r2
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0c:	45c1      	cmp	r9, r8
 800ba0e:	bf2e      	itee	cs
 800ba10:	2200      	movcs	r2, #0
 800ba12:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ba16:	f1a7 0808 	subcc.w	r8, r7, #8
 800ba1a:	f1b0 030b 	subs.w	r3, r0, #11
 800ba1e:	d016      	beq.n	800ba4e <__b2d+0x9a>
 800ba20:	f1c3 0720 	rsb	r7, r3, #32
 800ba24:	fa22 f107 	lsr.w	r1, r2, r7
 800ba28:	45c8      	cmp	r8, r9
 800ba2a:	fa06 f603 	lsl.w	r6, r6, r3
 800ba2e:	ea46 0601 	orr.w	r6, r6, r1
 800ba32:	bf94      	ite	ls
 800ba34:	2100      	movls	r1, #0
 800ba36:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ba3a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ba3e:	fa02 f003 	lsl.w	r0, r2, r3
 800ba42:	40f9      	lsrs	r1, r7
 800ba44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba48:	ea40 0401 	orr.w	r4, r0, r1
 800ba4c:	e7da      	b.n	800ba04 <__b2d+0x50>
 800ba4e:	4614      	mov	r4, r2
 800ba50:	ea46 0501 	orr.w	r5, r6, r1
 800ba54:	e7d6      	b.n	800ba04 <__b2d+0x50>
 800ba56:	bf00      	nop
 800ba58:	3ff00000 	.word	0x3ff00000

0800ba5c <__d2b>:
 800ba5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ba60:	2101      	movs	r1, #1
 800ba62:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ba66:	4690      	mov	r8, r2
 800ba68:	461d      	mov	r5, r3
 800ba6a:	f7ff fc0d 	bl	800b288 <_Balloc>
 800ba6e:	4604      	mov	r4, r0
 800ba70:	b930      	cbnz	r0, 800ba80 <__d2b+0x24>
 800ba72:	4602      	mov	r2, r0
 800ba74:	f240 310a 	movw	r1, #778	; 0x30a
 800ba78:	4b24      	ldr	r3, [pc, #144]	; (800bb0c <__d2b+0xb0>)
 800ba7a:	4825      	ldr	r0, [pc, #148]	; (800bb10 <__d2b+0xb4>)
 800ba7c:	f000 fb2c 	bl	800c0d8 <__assert_func>
 800ba80:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ba84:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ba88:	bb2d      	cbnz	r5, 800bad6 <__d2b+0x7a>
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	f1b8 0300 	subs.w	r3, r8, #0
 800ba90:	d026      	beq.n	800bae0 <__d2b+0x84>
 800ba92:	4668      	mov	r0, sp
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	f7ff fd09 	bl	800b4ac <__lo0bits>
 800ba9a:	9900      	ldr	r1, [sp, #0]
 800ba9c:	b1f0      	cbz	r0, 800badc <__d2b+0x80>
 800ba9e:	9a01      	ldr	r2, [sp, #4]
 800baa0:	f1c0 0320 	rsb	r3, r0, #32
 800baa4:	fa02 f303 	lsl.w	r3, r2, r3
 800baa8:	430b      	orrs	r3, r1
 800baaa:	40c2      	lsrs	r2, r0
 800baac:	6163      	str	r3, [r4, #20]
 800baae:	9201      	str	r2, [sp, #4]
 800bab0:	9b01      	ldr	r3, [sp, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	bf14      	ite	ne
 800bab6:	2102      	movne	r1, #2
 800bab8:	2101      	moveq	r1, #1
 800baba:	61a3      	str	r3, [r4, #24]
 800babc:	6121      	str	r1, [r4, #16]
 800babe:	b1c5      	cbz	r5, 800baf2 <__d2b+0x96>
 800bac0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bac4:	4405      	add	r5, r0
 800bac6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800baca:	603d      	str	r5, [r7, #0]
 800bacc:	6030      	str	r0, [r6, #0]
 800bace:	4620      	mov	r0, r4
 800bad0:	b002      	add	sp, #8
 800bad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bada:	e7d6      	b.n	800ba8a <__d2b+0x2e>
 800badc:	6161      	str	r1, [r4, #20]
 800bade:	e7e7      	b.n	800bab0 <__d2b+0x54>
 800bae0:	a801      	add	r0, sp, #4
 800bae2:	f7ff fce3 	bl	800b4ac <__lo0bits>
 800bae6:	2101      	movs	r1, #1
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	6121      	str	r1, [r4, #16]
 800baec:	6163      	str	r3, [r4, #20]
 800baee:	3020      	adds	r0, #32
 800baf0:	e7e5      	b.n	800babe <__d2b+0x62>
 800baf2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800baf6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bafa:	6038      	str	r0, [r7, #0]
 800bafc:	6918      	ldr	r0, [r3, #16]
 800bafe:	f7ff fcb5 	bl	800b46c <__hi0bits>
 800bb02:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bb06:	6031      	str	r1, [r6, #0]
 800bb08:	e7e1      	b.n	800bace <__d2b+0x72>
 800bb0a:	bf00      	nop
 800bb0c:	0800cee8 	.word	0x0800cee8
 800bb10:	0800cf74 	.word	0x0800cf74

0800bb14 <__ratio>:
 800bb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	4688      	mov	r8, r1
 800bb1a:	4669      	mov	r1, sp
 800bb1c:	4681      	mov	r9, r0
 800bb1e:	f7ff ff49 	bl	800b9b4 <__b2d>
 800bb22:	460f      	mov	r7, r1
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	4640      	mov	r0, r8
 800bb2a:	a901      	add	r1, sp, #4
 800bb2c:	f7ff ff42 	bl	800b9b4 <__b2d>
 800bb30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb38:	468b      	mov	fp, r1
 800bb3a:	eba3 0c02 	sub.w	ip, r3, r2
 800bb3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb42:	1a9b      	subs	r3, r3, r2
 800bb44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfd5      	itete	le
 800bb4c:	460a      	movle	r2, r1
 800bb4e:	462a      	movgt	r2, r5
 800bb50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb54:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb58:	bfd8      	it	le
 800bb5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb5e:	465b      	mov	r3, fp
 800bb60:	4602      	mov	r2, r0
 800bb62:	4639      	mov	r1, r7
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7f4 fde1 	bl	800072c <__aeabi_ddiv>
 800bb6a:	b003      	add	sp, #12
 800bb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb70 <__copybits>:
 800bb70:	3901      	subs	r1, #1
 800bb72:	b570      	push	{r4, r5, r6, lr}
 800bb74:	1149      	asrs	r1, r1, #5
 800bb76:	6914      	ldr	r4, [r2, #16]
 800bb78:	3101      	adds	r1, #1
 800bb7a:	f102 0314 	add.w	r3, r2, #20
 800bb7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb86:	1f05      	subs	r5, r0, #4
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	d30c      	bcc.n	800bba6 <__copybits+0x36>
 800bb8c:	1aa3      	subs	r3, r4, r2
 800bb8e:	3b11      	subs	r3, #17
 800bb90:	f023 0303 	bic.w	r3, r3, #3
 800bb94:	3211      	adds	r2, #17
 800bb96:	42a2      	cmp	r2, r4
 800bb98:	bf88      	it	hi
 800bb9a:	2300      	movhi	r3, #0
 800bb9c:	4418      	add	r0, r3
 800bb9e:	2300      	movs	r3, #0
 800bba0:	4288      	cmp	r0, r1
 800bba2:	d305      	bcc.n	800bbb0 <__copybits+0x40>
 800bba4:	bd70      	pop	{r4, r5, r6, pc}
 800bba6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbaa:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbae:	e7eb      	b.n	800bb88 <__copybits+0x18>
 800bbb0:	f840 3b04 	str.w	r3, [r0], #4
 800bbb4:	e7f4      	b.n	800bba0 <__copybits+0x30>

0800bbb6 <__any_on>:
 800bbb6:	f100 0214 	add.w	r2, r0, #20
 800bbba:	6900      	ldr	r0, [r0, #16]
 800bbbc:	114b      	asrs	r3, r1, #5
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	db11      	blt.n	800bbe8 <__any_on+0x32>
 800bbc4:	dd0a      	ble.n	800bbdc <__any_on+0x26>
 800bbc6:	f011 011f 	ands.w	r1, r1, #31
 800bbca:	d007      	beq.n	800bbdc <__any_on+0x26>
 800bbcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbd0:	fa24 f001 	lsr.w	r0, r4, r1
 800bbd4:	fa00 f101 	lsl.w	r1, r0, r1
 800bbd8:	428c      	cmp	r4, r1
 800bbda:	d10b      	bne.n	800bbf4 <__any_on+0x3e>
 800bbdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d803      	bhi.n	800bbec <__any_on+0x36>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	bd10      	pop	{r4, pc}
 800bbe8:	4603      	mov	r3, r0
 800bbea:	e7f7      	b.n	800bbdc <__any_on+0x26>
 800bbec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	d0f5      	beq.n	800bbe0 <__any_on+0x2a>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	e7f6      	b.n	800bbe6 <__any_on+0x30>

0800bbf8 <_calloc_r>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	fba1 5402 	umull	r5, r4, r1, r2
 800bbfe:	b934      	cbnz	r4, 800bc0e <_calloc_r+0x16>
 800bc00:	4629      	mov	r1, r5
 800bc02:	f000 f875 	bl	800bcf0 <_malloc_r>
 800bc06:	4606      	mov	r6, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <_calloc_r+0x1e>
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	bd70      	pop	{r4, r5, r6, pc}
 800bc0e:	220c      	movs	r2, #12
 800bc10:	2600      	movs	r6, #0
 800bc12:	6002      	str	r2, [r0, #0]
 800bc14:	e7f9      	b.n	800bc0a <_calloc_r+0x12>
 800bc16:	462a      	mov	r2, r5
 800bc18:	4621      	mov	r1, r4
 800bc1a:	f7fc fdef 	bl	80087fc <memset>
 800bc1e:	e7f4      	b.n	800bc0a <_calloc_r+0x12>

0800bc20 <_free_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4605      	mov	r5, r0
 800bc24:	2900      	cmp	r1, #0
 800bc26:	d040      	beq.n	800bcaa <_free_r+0x8a>
 800bc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2c:	1f0c      	subs	r4, r1, #4
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bfb8      	it	lt
 800bc32:	18e4      	addlt	r4, r4, r3
 800bc34:	f000 fa9a 	bl	800c16c <__malloc_lock>
 800bc38:	4a1c      	ldr	r2, [pc, #112]	; (800bcac <_free_r+0x8c>)
 800bc3a:	6813      	ldr	r3, [r2, #0]
 800bc3c:	b933      	cbnz	r3, 800bc4c <_free_r+0x2c>
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	6014      	str	r4, [r2, #0]
 800bc42:	4628      	mov	r0, r5
 800bc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc48:	f000 ba96 	b.w	800c178 <__malloc_unlock>
 800bc4c:	42a3      	cmp	r3, r4
 800bc4e:	d908      	bls.n	800bc62 <_free_r+0x42>
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	1821      	adds	r1, r4, r0
 800bc54:	428b      	cmp	r3, r1
 800bc56:	bf01      	itttt	eq
 800bc58:	6819      	ldreq	r1, [r3, #0]
 800bc5a:	685b      	ldreq	r3, [r3, #4]
 800bc5c:	1809      	addeq	r1, r1, r0
 800bc5e:	6021      	streq	r1, [r4, #0]
 800bc60:	e7ed      	b.n	800bc3e <_free_r+0x1e>
 800bc62:	461a      	mov	r2, r3
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	b10b      	cbz	r3, 800bc6c <_free_r+0x4c>
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	d9fa      	bls.n	800bc62 <_free_r+0x42>
 800bc6c:	6811      	ldr	r1, [r2, #0]
 800bc6e:	1850      	adds	r0, r2, r1
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d10b      	bne.n	800bc8c <_free_r+0x6c>
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	4401      	add	r1, r0
 800bc78:	1850      	adds	r0, r2, r1
 800bc7a:	4283      	cmp	r3, r0
 800bc7c:	6011      	str	r1, [r2, #0]
 800bc7e:	d1e0      	bne.n	800bc42 <_free_r+0x22>
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4401      	add	r1, r0
 800bc86:	6011      	str	r1, [r2, #0]
 800bc88:	6053      	str	r3, [r2, #4]
 800bc8a:	e7da      	b.n	800bc42 <_free_r+0x22>
 800bc8c:	d902      	bls.n	800bc94 <_free_r+0x74>
 800bc8e:	230c      	movs	r3, #12
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	e7d6      	b.n	800bc42 <_free_r+0x22>
 800bc94:	6820      	ldr	r0, [r4, #0]
 800bc96:	1821      	adds	r1, r4, r0
 800bc98:	428b      	cmp	r3, r1
 800bc9a:	bf01      	itttt	eq
 800bc9c:	6819      	ldreq	r1, [r3, #0]
 800bc9e:	685b      	ldreq	r3, [r3, #4]
 800bca0:	1809      	addeq	r1, r1, r0
 800bca2:	6021      	streq	r1, [r4, #0]
 800bca4:	6063      	str	r3, [r4, #4]
 800bca6:	6054      	str	r4, [r2, #4]
 800bca8:	e7cb      	b.n	800bc42 <_free_r+0x22>
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	200004e0 	.word	0x200004e0

0800bcb0 <sbrk_aligned>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	4e0e      	ldr	r6, [pc, #56]	; (800bcec <sbrk_aligned+0x3c>)
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6831      	ldr	r1, [r6, #0]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	b911      	cbnz	r1, 800bcc2 <sbrk_aligned+0x12>
 800bcbc:	f000 f9ee 	bl	800c09c <_sbrk_r>
 800bcc0:	6030      	str	r0, [r6, #0]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 f9e9 	bl	800c09c <_sbrk_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d00a      	beq.n	800bce4 <sbrk_aligned+0x34>
 800bcce:	1cc4      	adds	r4, r0, #3
 800bcd0:	f024 0403 	bic.w	r4, r4, #3
 800bcd4:	42a0      	cmp	r0, r4
 800bcd6:	d007      	beq.n	800bce8 <sbrk_aligned+0x38>
 800bcd8:	1a21      	subs	r1, r4, r0
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f9de 	bl	800c09c <_sbrk_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	d101      	bne.n	800bce8 <sbrk_aligned+0x38>
 800bce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bce8:	4620      	mov	r0, r4
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	200004e4 	.word	0x200004e4

0800bcf0 <_malloc_r>:
 800bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf4:	1ccd      	adds	r5, r1, #3
 800bcf6:	f025 0503 	bic.w	r5, r5, #3
 800bcfa:	3508      	adds	r5, #8
 800bcfc:	2d0c      	cmp	r5, #12
 800bcfe:	bf38      	it	cc
 800bd00:	250c      	movcc	r5, #12
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	4607      	mov	r7, r0
 800bd06:	db01      	blt.n	800bd0c <_malloc_r+0x1c>
 800bd08:	42a9      	cmp	r1, r5
 800bd0a:	d905      	bls.n	800bd18 <_malloc_r+0x28>
 800bd0c:	230c      	movs	r3, #12
 800bd0e:	2600      	movs	r6, #0
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	4630      	mov	r0, r6
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	4e2e      	ldr	r6, [pc, #184]	; (800bdd4 <_malloc_r+0xe4>)
 800bd1a:	f000 fa27 	bl	800c16c <__malloc_lock>
 800bd1e:	6833      	ldr	r3, [r6, #0]
 800bd20:	461c      	mov	r4, r3
 800bd22:	bb34      	cbnz	r4, 800bd72 <_malloc_r+0x82>
 800bd24:	4629      	mov	r1, r5
 800bd26:	4638      	mov	r0, r7
 800bd28:	f7ff ffc2 	bl	800bcb0 <sbrk_aligned>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	4604      	mov	r4, r0
 800bd30:	d14d      	bne.n	800bdce <_malloc_r+0xde>
 800bd32:	6834      	ldr	r4, [r6, #0]
 800bd34:	4626      	mov	r6, r4
 800bd36:	2e00      	cmp	r6, #0
 800bd38:	d140      	bne.n	800bdbc <_malloc_r+0xcc>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4638      	mov	r0, r7
 800bd40:	eb04 0803 	add.w	r8, r4, r3
 800bd44:	f000 f9aa 	bl	800c09c <_sbrk_r>
 800bd48:	4580      	cmp	r8, r0
 800bd4a:	d13a      	bne.n	800bdc2 <_malloc_r+0xd2>
 800bd4c:	6821      	ldr	r1, [r4, #0]
 800bd4e:	3503      	adds	r5, #3
 800bd50:	1a6d      	subs	r5, r5, r1
 800bd52:	f025 0503 	bic.w	r5, r5, #3
 800bd56:	3508      	adds	r5, #8
 800bd58:	2d0c      	cmp	r5, #12
 800bd5a:	bf38      	it	cc
 800bd5c:	250c      	movcc	r5, #12
 800bd5e:	4638      	mov	r0, r7
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7ff ffa5 	bl	800bcb0 <sbrk_aligned>
 800bd66:	3001      	adds	r0, #1
 800bd68:	d02b      	beq.n	800bdc2 <_malloc_r+0xd2>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	442b      	add	r3, r5
 800bd6e:	6023      	str	r3, [r4, #0]
 800bd70:	e00e      	b.n	800bd90 <_malloc_r+0xa0>
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	1b52      	subs	r2, r2, r5
 800bd76:	d41e      	bmi.n	800bdb6 <_malloc_r+0xc6>
 800bd78:	2a0b      	cmp	r2, #11
 800bd7a:	d916      	bls.n	800bdaa <_malloc_r+0xba>
 800bd7c:	1961      	adds	r1, r4, r5
 800bd7e:	42a3      	cmp	r3, r4
 800bd80:	6025      	str	r5, [r4, #0]
 800bd82:	bf18      	it	ne
 800bd84:	6059      	strne	r1, [r3, #4]
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	bf08      	it	eq
 800bd8a:	6031      	streq	r1, [r6, #0]
 800bd8c:	5162      	str	r2, [r4, r5]
 800bd8e:	604b      	str	r3, [r1, #4]
 800bd90:	4638      	mov	r0, r7
 800bd92:	f104 060b 	add.w	r6, r4, #11
 800bd96:	f000 f9ef 	bl	800c178 <__malloc_unlock>
 800bd9a:	f026 0607 	bic.w	r6, r6, #7
 800bd9e:	1d23      	adds	r3, r4, #4
 800bda0:	1af2      	subs	r2, r6, r3
 800bda2:	d0b6      	beq.n	800bd12 <_malloc_r+0x22>
 800bda4:	1b9b      	subs	r3, r3, r6
 800bda6:	50a3      	str	r3, [r4, r2]
 800bda8:	e7b3      	b.n	800bd12 <_malloc_r+0x22>
 800bdaa:	6862      	ldr	r2, [r4, #4]
 800bdac:	42a3      	cmp	r3, r4
 800bdae:	bf0c      	ite	eq
 800bdb0:	6032      	streq	r2, [r6, #0]
 800bdb2:	605a      	strne	r2, [r3, #4]
 800bdb4:	e7ec      	b.n	800bd90 <_malloc_r+0xa0>
 800bdb6:	4623      	mov	r3, r4
 800bdb8:	6864      	ldr	r4, [r4, #4]
 800bdba:	e7b2      	b.n	800bd22 <_malloc_r+0x32>
 800bdbc:	4634      	mov	r4, r6
 800bdbe:	6876      	ldr	r6, [r6, #4]
 800bdc0:	e7b9      	b.n	800bd36 <_malloc_r+0x46>
 800bdc2:	230c      	movs	r3, #12
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	f000 f9d6 	bl	800c178 <__malloc_unlock>
 800bdcc:	e7a1      	b.n	800bd12 <_malloc_r+0x22>
 800bdce:	6025      	str	r5, [r4, #0]
 800bdd0:	e7de      	b.n	800bd90 <_malloc_r+0xa0>
 800bdd2:	bf00      	nop
 800bdd4:	200004e0 	.word	0x200004e0

0800bdd8 <__ssputs_r>:
 800bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bddc:	688e      	ldr	r6, [r1, #8]
 800bdde:	4682      	mov	sl, r0
 800bde0:	429e      	cmp	r6, r3
 800bde2:	460c      	mov	r4, r1
 800bde4:	4690      	mov	r8, r2
 800bde6:	461f      	mov	r7, r3
 800bde8:	d838      	bhi.n	800be5c <__ssputs_r+0x84>
 800bdea:	898a      	ldrh	r2, [r1, #12]
 800bdec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdf0:	d032      	beq.n	800be58 <__ssputs_r+0x80>
 800bdf2:	6825      	ldr	r5, [r4, #0]
 800bdf4:	6909      	ldr	r1, [r1, #16]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	eba5 0901 	sub.w	r9, r5, r1
 800bdfc:	6965      	ldr	r5, [r4, #20]
 800bdfe:	444b      	add	r3, r9
 800be00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be08:	106d      	asrs	r5, r5, #1
 800be0a:	429d      	cmp	r5, r3
 800be0c:	bf38      	it	cc
 800be0e:	461d      	movcc	r5, r3
 800be10:	0553      	lsls	r3, r2, #21
 800be12:	d531      	bpl.n	800be78 <__ssputs_r+0xa0>
 800be14:	4629      	mov	r1, r5
 800be16:	f7ff ff6b 	bl	800bcf0 <_malloc_r>
 800be1a:	4606      	mov	r6, r0
 800be1c:	b950      	cbnz	r0, 800be34 <__ssputs_r+0x5c>
 800be1e:	230c      	movs	r3, #12
 800be20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be24:	f8ca 3000 	str.w	r3, [sl]
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be34:	464a      	mov	r2, r9
 800be36:	6921      	ldr	r1, [r4, #16]
 800be38:	f7fc fcd2 	bl	80087e0 <memcpy>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	6126      	str	r6, [r4, #16]
 800be4a:	444e      	add	r6, r9
 800be4c:	6026      	str	r6, [r4, #0]
 800be4e:	463e      	mov	r6, r7
 800be50:	6165      	str	r5, [r4, #20]
 800be52:	eba5 0509 	sub.w	r5, r5, r9
 800be56:	60a5      	str	r5, [r4, #8]
 800be58:	42be      	cmp	r6, r7
 800be5a:	d900      	bls.n	800be5e <__ssputs_r+0x86>
 800be5c:	463e      	mov	r6, r7
 800be5e:	4632      	mov	r2, r6
 800be60:	4641      	mov	r1, r8
 800be62:	6820      	ldr	r0, [r4, #0]
 800be64:	f000 f968 	bl	800c138 <memmove>
 800be68:	68a3      	ldr	r3, [r4, #8]
 800be6a:	2000      	movs	r0, #0
 800be6c:	1b9b      	subs	r3, r3, r6
 800be6e:	60a3      	str	r3, [r4, #8]
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	4433      	add	r3, r6
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	e7db      	b.n	800be30 <__ssputs_r+0x58>
 800be78:	462a      	mov	r2, r5
 800be7a:	f000 f983 	bl	800c184 <_realloc_r>
 800be7e:	4606      	mov	r6, r0
 800be80:	2800      	cmp	r0, #0
 800be82:	d1e1      	bne.n	800be48 <__ssputs_r+0x70>
 800be84:	4650      	mov	r0, sl
 800be86:	6921      	ldr	r1, [r4, #16]
 800be88:	f7ff feca 	bl	800bc20 <_free_r>
 800be8c:	e7c7      	b.n	800be1e <__ssputs_r+0x46>
	...

0800be90 <_svfiprintf_r>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	4698      	mov	r8, r3
 800be96:	898b      	ldrh	r3, [r1, #12]
 800be98:	4607      	mov	r7, r0
 800be9a:	061b      	lsls	r3, r3, #24
 800be9c:	460d      	mov	r5, r1
 800be9e:	4614      	mov	r4, r2
 800bea0:	b09d      	sub	sp, #116	; 0x74
 800bea2:	d50e      	bpl.n	800bec2 <_svfiprintf_r+0x32>
 800bea4:	690b      	ldr	r3, [r1, #16]
 800bea6:	b963      	cbnz	r3, 800bec2 <_svfiprintf_r+0x32>
 800bea8:	2140      	movs	r1, #64	; 0x40
 800beaa:	f7ff ff21 	bl	800bcf0 <_malloc_r>
 800beae:	6028      	str	r0, [r5, #0]
 800beb0:	6128      	str	r0, [r5, #16]
 800beb2:	b920      	cbnz	r0, 800bebe <_svfiprintf_r+0x2e>
 800beb4:	230c      	movs	r3, #12
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bebc:	e0d1      	b.n	800c062 <_svfiprintf_r+0x1d2>
 800bebe:	2340      	movs	r3, #64	; 0x40
 800bec0:	616b      	str	r3, [r5, #20]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	2320      	movs	r3, #32
 800bec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800becc:	2330      	movs	r3, #48	; 0x30
 800bece:	f04f 0901 	mov.w	r9, #1
 800bed2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c07c <_svfiprintf_r+0x1ec>
 800beda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bede:	4623      	mov	r3, r4
 800bee0:	469a      	mov	sl, r3
 800bee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee6:	b10a      	cbz	r2, 800beec <_svfiprintf_r+0x5c>
 800bee8:	2a25      	cmp	r2, #37	; 0x25
 800beea:	d1f9      	bne.n	800bee0 <_svfiprintf_r+0x50>
 800beec:	ebba 0b04 	subs.w	fp, sl, r4
 800bef0:	d00b      	beq.n	800bf0a <_svfiprintf_r+0x7a>
 800bef2:	465b      	mov	r3, fp
 800bef4:	4622      	mov	r2, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff ff6d 	bl	800bdd8 <__ssputs_r>
 800befe:	3001      	adds	r0, #1
 800bf00:	f000 80aa 	beq.w	800c058 <_svfiprintf_r+0x1c8>
 800bf04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf06:	445a      	add	r2, fp
 800bf08:	9209      	str	r2, [sp, #36]	; 0x24
 800bf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 80a2 	beq.w	800c058 <_svfiprintf_r+0x1c8>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf1e:	f10a 0a01 	add.w	sl, sl, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf2c:	4654      	mov	r4, sl
 800bf2e:	2205      	movs	r2, #5
 800bf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf34:	4851      	ldr	r0, [pc, #324]	; (800c07c <_svfiprintf_r+0x1ec>)
 800bf36:	f7ff f999 	bl	800b26c <memchr>
 800bf3a:	9a04      	ldr	r2, [sp, #16]
 800bf3c:	b9d8      	cbnz	r0, 800bf76 <_svfiprintf_r+0xe6>
 800bf3e:	06d0      	lsls	r0, r2, #27
 800bf40:	bf44      	itt	mi
 800bf42:	2320      	movmi	r3, #32
 800bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf48:	0711      	lsls	r1, r2, #28
 800bf4a:	bf44      	itt	mi
 800bf4c:	232b      	movmi	r3, #43	; 0x2b
 800bf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf52:	f89a 3000 	ldrb.w	r3, [sl]
 800bf56:	2b2a      	cmp	r3, #42	; 0x2a
 800bf58:	d015      	beq.n	800bf86 <_svfiprintf_r+0xf6>
 800bf5a:	4654      	mov	r4, sl
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f04f 0c0a 	mov.w	ip, #10
 800bf62:	9a07      	ldr	r2, [sp, #28]
 800bf64:	4621      	mov	r1, r4
 800bf66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf6a:	3b30      	subs	r3, #48	; 0x30
 800bf6c:	2b09      	cmp	r3, #9
 800bf6e:	d94e      	bls.n	800c00e <_svfiprintf_r+0x17e>
 800bf70:	b1b0      	cbz	r0, 800bfa0 <_svfiprintf_r+0x110>
 800bf72:	9207      	str	r2, [sp, #28]
 800bf74:	e014      	b.n	800bfa0 <_svfiprintf_r+0x110>
 800bf76:	eba0 0308 	sub.w	r3, r0, r8
 800bf7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	46a2      	mov	sl, r4
 800bf82:	9304      	str	r3, [sp, #16]
 800bf84:	e7d2      	b.n	800bf2c <_svfiprintf_r+0x9c>
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	1d19      	adds	r1, r3, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	9103      	str	r1, [sp, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bfbb      	ittet	lt
 800bf92:	425b      	neglt	r3, r3
 800bf94:	f042 0202 	orrlt.w	r2, r2, #2
 800bf98:	9307      	strge	r3, [sp, #28]
 800bf9a:	9307      	strlt	r3, [sp, #28]
 800bf9c:	bfb8      	it	lt
 800bf9e:	9204      	strlt	r2, [sp, #16]
 800bfa0:	7823      	ldrb	r3, [r4, #0]
 800bfa2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfa4:	d10c      	bne.n	800bfc0 <_svfiprintf_r+0x130>
 800bfa6:	7863      	ldrb	r3, [r4, #1]
 800bfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfaa:	d135      	bne.n	800c018 <_svfiprintf_r+0x188>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	3402      	adds	r4, #2
 800bfb0:	1d1a      	adds	r2, r3, #4
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	9203      	str	r2, [sp, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bfb8      	it	lt
 800bfba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfbe:	9305      	str	r3, [sp, #20]
 800bfc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c080 <_svfiprintf_r+0x1f0>
 800bfc4:	2203      	movs	r2, #3
 800bfc6:	4650      	mov	r0, sl
 800bfc8:	7821      	ldrb	r1, [r4, #0]
 800bfca:	f7ff f94f 	bl	800b26c <memchr>
 800bfce:	b140      	cbz	r0, 800bfe2 <_svfiprintf_r+0x152>
 800bfd0:	2340      	movs	r3, #64	; 0x40
 800bfd2:	eba0 000a 	sub.w	r0, r0, sl
 800bfd6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	3401      	adds	r4, #1
 800bfde:	4303      	orrs	r3, r0
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe6:	2206      	movs	r2, #6
 800bfe8:	4826      	ldr	r0, [pc, #152]	; (800c084 <_svfiprintf_r+0x1f4>)
 800bfea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfee:	f7ff f93d 	bl	800b26c <memchr>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d038      	beq.n	800c068 <_svfiprintf_r+0x1d8>
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <_svfiprintf_r+0x1f8>)
 800bff8:	bb1b      	cbnz	r3, 800c042 <_svfiprintf_r+0x1b2>
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	3307      	adds	r3, #7
 800bffe:	f023 0307 	bic.w	r3, r3, #7
 800c002:	3308      	adds	r3, #8
 800c004:	9303      	str	r3, [sp, #12]
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	4433      	add	r3, r6
 800c00a:	9309      	str	r3, [sp, #36]	; 0x24
 800c00c:	e767      	b.n	800bede <_svfiprintf_r+0x4e>
 800c00e:	460c      	mov	r4, r1
 800c010:	2001      	movs	r0, #1
 800c012:	fb0c 3202 	mla	r2, ip, r2, r3
 800c016:	e7a5      	b.n	800bf64 <_svfiprintf_r+0xd4>
 800c018:	2300      	movs	r3, #0
 800c01a:	f04f 0c0a 	mov.w	ip, #10
 800c01e:	4619      	mov	r1, r3
 800c020:	3401      	adds	r4, #1
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	4620      	mov	r0, r4
 800c026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c02a:	3a30      	subs	r2, #48	; 0x30
 800c02c:	2a09      	cmp	r2, #9
 800c02e:	d903      	bls.n	800c038 <_svfiprintf_r+0x1a8>
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0c5      	beq.n	800bfc0 <_svfiprintf_r+0x130>
 800c034:	9105      	str	r1, [sp, #20]
 800c036:	e7c3      	b.n	800bfc0 <_svfiprintf_r+0x130>
 800c038:	4604      	mov	r4, r0
 800c03a:	2301      	movs	r3, #1
 800c03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c040:	e7f0      	b.n	800c024 <_svfiprintf_r+0x194>
 800c042:	ab03      	add	r3, sp, #12
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	462a      	mov	r2, r5
 800c048:	4638      	mov	r0, r7
 800c04a:	4b10      	ldr	r3, [pc, #64]	; (800c08c <_svfiprintf_r+0x1fc>)
 800c04c:	a904      	add	r1, sp, #16
 800c04e:	f7fc fc7b 	bl	8008948 <_printf_float>
 800c052:	1c42      	adds	r2, r0, #1
 800c054:	4606      	mov	r6, r0
 800c056:	d1d6      	bne.n	800c006 <_svfiprintf_r+0x176>
 800c058:	89ab      	ldrh	r3, [r5, #12]
 800c05a:	065b      	lsls	r3, r3, #25
 800c05c:	f53f af2c 	bmi.w	800beb8 <_svfiprintf_r+0x28>
 800c060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c062:	b01d      	add	sp, #116	; 0x74
 800c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	ab03      	add	r3, sp, #12
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	462a      	mov	r2, r5
 800c06e:	4638      	mov	r0, r7
 800c070:	4b06      	ldr	r3, [pc, #24]	; (800c08c <_svfiprintf_r+0x1fc>)
 800c072:	a904      	add	r1, sp, #16
 800c074:	f7fc ff04 	bl	8008e80 <_printf_i>
 800c078:	e7eb      	b.n	800c052 <_svfiprintf_r+0x1c2>
 800c07a:	bf00      	nop
 800c07c:	0800d0cc 	.word	0x0800d0cc
 800c080:	0800d0d2 	.word	0x0800d0d2
 800c084:	0800d0d6 	.word	0x0800d0d6
 800c088:	08008949 	.word	0x08008949
 800c08c:	0800bdd9 	.word	0x0800bdd9

0800c090 <nan>:
 800c090:	2000      	movs	r0, #0
 800c092:	4901      	ldr	r1, [pc, #4]	; (800c098 <nan+0x8>)
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	7ff80000 	.word	0x7ff80000

0800c09c <_sbrk_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	2300      	movs	r3, #0
 800c0a0:	4d05      	ldr	r5, [pc, #20]	; (800c0b8 <_sbrk_r+0x1c>)
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	f7f7 fab2 	bl	8003610 <_sbrk>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_sbrk_r+0x1a>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_sbrk_r+0x1a>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	200004e8 	.word	0x200004e8

0800c0bc <__ascii_wctomb>:
 800c0bc:	4603      	mov	r3, r0
 800c0be:	4608      	mov	r0, r1
 800c0c0:	b141      	cbz	r1, 800c0d4 <__ascii_wctomb+0x18>
 800c0c2:	2aff      	cmp	r2, #255	; 0xff
 800c0c4:	d904      	bls.n	800c0d0 <__ascii_wctomb+0x14>
 800c0c6:	228a      	movs	r2, #138	; 0x8a
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	4770      	bx	lr
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	700a      	strb	r2, [r1, #0]
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <__assert_func>:
 800c0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0da:	4614      	mov	r4, r2
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <__assert_func+0x2c>)
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68d8      	ldr	r0, [r3, #12]
 800c0e6:	b14c      	cbz	r4, 800c0fc <__assert_func+0x24>
 800c0e8:	4b07      	ldr	r3, [pc, #28]	; (800c108 <__assert_func+0x30>)
 800c0ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0ee:	9100      	str	r1, [sp, #0]
 800c0f0:	462b      	mov	r3, r5
 800c0f2:	4906      	ldr	r1, [pc, #24]	; (800c10c <__assert_func+0x34>)
 800c0f4:	f000 f80e 	bl	800c114 <fiprintf>
 800c0f8:	f000 fa8a 	bl	800c610 <abort>
 800c0fc:	4b04      	ldr	r3, [pc, #16]	; (800c110 <__assert_func+0x38>)
 800c0fe:	461c      	mov	r4, r3
 800c100:	e7f3      	b.n	800c0ea <__assert_func+0x12>
 800c102:	bf00      	nop
 800c104:	200000f0 	.word	0x200000f0
 800c108:	0800d0dd 	.word	0x0800d0dd
 800c10c:	0800d0ea 	.word	0x0800d0ea
 800c110:	0800d118 	.word	0x0800d118

0800c114 <fiprintf>:
 800c114:	b40e      	push	{r1, r2, r3}
 800c116:	b503      	push	{r0, r1, lr}
 800c118:	4601      	mov	r1, r0
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	4805      	ldr	r0, [pc, #20]	; (800c134 <fiprintf+0x20>)
 800c11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c122:	6800      	ldr	r0, [r0, #0]
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	f000 f883 	bl	800c230 <_vfiprintf_r>
 800c12a:	b002      	add	sp, #8
 800c12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c130:	b003      	add	sp, #12
 800c132:	4770      	bx	lr
 800c134:	200000f0 	.word	0x200000f0

0800c138 <memmove>:
 800c138:	4288      	cmp	r0, r1
 800c13a:	b510      	push	{r4, lr}
 800c13c:	eb01 0402 	add.w	r4, r1, r2
 800c140:	d902      	bls.n	800c148 <memmove+0x10>
 800c142:	4284      	cmp	r4, r0
 800c144:	4623      	mov	r3, r4
 800c146:	d807      	bhi.n	800c158 <memmove+0x20>
 800c148:	1e43      	subs	r3, r0, #1
 800c14a:	42a1      	cmp	r1, r4
 800c14c:	d008      	beq.n	800c160 <memmove+0x28>
 800c14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c156:	e7f8      	b.n	800c14a <memmove+0x12>
 800c158:	4601      	mov	r1, r0
 800c15a:	4402      	add	r2, r0
 800c15c:	428a      	cmp	r2, r1
 800c15e:	d100      	bne.n	800c162 <memmove+0x2a>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c16a:	e7f7      	b.n	800c15c <memmove+0x24>

0800c16c <__malloc_lock>:
 800c16c:	4801      	ldr	r0, [pc, #4]	; (800c174 <__malloc_lock+0x8>)
 800c16e:	f000 bc0b 	b.w	800c988 <__retarget_lock_acquire_recursive>
 800c172:	bf00      	nop
 800c174:	200004ec 	.word	0x200004ec

0800c178 <__malloc_unlock>:
 800c178:	4801      	ldr	r0, [pc, #4]	; (800c180 <__malloc_unlock+0x8>)
 800c17a:	f000 bc06 	b.w	800c98a <__retarget_lock_release_recursive>
 800c17e:	bf00      	nop
 800c180:	200004ec 	.word	0x200004ec

0800c184 <_realloc_r>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	4680      	mov	r8, r0
 800c18a:	4614      	mov	r4, r2
 800c18c:	460e      	mov	r6, r1
 800c18e:	b921      	cbnz	r1, 800c19a <_realloc_r+0x16>
 800c190:	4611      	mov	r1, r2
 800c192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	f7ff bdab 	b.w	800bcf0 <_malloc_r>
 800c19a:	b92a      	cbnz	r2, 800c1a8 <_realloc_r+0x24>
 800c19c:	f7ff fd40 	bl	800bc20 <_free_r>
 800c1a0:	4625      	mov	r5, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	f000 fc56 	bl	800ca58 <_malloc_usable_size_r>
 800c1ac:	4284      	cmp	r4, r0
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	d802      	bhi.n	800c1b8 <_realloc_r+0x34>
 800c1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1b6:	d812      	bhi.n	800c1de <_realloc_r+0x5a>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f7ff fd98 	bl	800bcf0 <_malloc_r>
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d0ed      	beq.n	800c1a2 <_realloc_r+0x1e>
 800c1c6:	42bc      	cmp	r4, r7
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	bf28      	it	cs
 800c1ce:	463a      	movcs	r2, r7
 800c1d0:	f7fc fb06 	bl	80087e0 <memcpy>
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f7ff fd22 	bl	800bc20 <_free_r>
 800c1dc:	e7e1      	b.n	800c1a2 <_realloc_r+0x1e>
 800c1de:	4635      	mov	r5, r6
 800c1e0:	e7df      	b.n	800c1a2 <_realloc_r+0x1e>

0800c1e2 <__sfputc_r>:
 800c1e2:	6893      	ldr	r3, [r2, #8]
 800c1e4:	b410      	push	{r4}
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	6093      	str	r3, [r2, #8]
 800c1ec:	da07      	bge.n	800c1fe <__sfputc_r+0x1c>
 800c1ee:	6994      	ldr	r4, [r2, #24]
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	db01      	blt.n	800c1f8 <__sfputc_r+0x16>
 800c1f4:	290a      	cmp	r1, #10
 800c1f6:	d102      	bne.n	800c1fe <__sfputc_r+0x1c>
 800c1f8:	bc10      	pop	{r4}
 800c1fa:	f000 b949 	b.w	800c490 <__swbuf_r>
 800c1fe:	6813      	ldr	r3, [r2, #0]
 800c200:	1c58      	adds	r0, r3, #1
 800c202:	6010      	str	r0, [r2, #0]
 800c204:	7019      	strb	r1, [r3, #0]
 800c206:	4608      	mov	r0, r1
 800c208:	bc10      	pop	{r4}
 800c20a:	4770      	bx	lr

0800c20c <__sfputs_r>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1
 800c212:	4614      	mov	r4, r2
 800c214:	18d5      	adds	r5, r2, r3
 800c216:	42ac      	cmp	r4, r5
 800c218:	d101      	bne.n	800c21e <__sfputs_r+0x12>
 800c21a:	2000      	movs	r0, #0
 800c21c:	e007      	b.n	800c22e <__sfputs_r+0x22>
 800c21e:	463a      	mov	r2, r7
 800c220:	4630      	mov	r0, r6
 800c222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c226:	f7ff ffdc 	bl	800c1e2 <__sfputc_r>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d1f3      	bne.n	800c216 <__sfputs_r+0xa>
 800c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c230 <_vfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	460d      	mov	r5, r1
 800c236:	4614      	mov	r4, r2
 800c238:	4698      	mov	r8, r3
 800c23a:	4606      	mov	r6, r0
 800c23c:	b09d      	sub	sp, #116	; 0x74
 800c23e:	b118      	cbz	r0, 800c248 <_vfiprintf_r+0x18>
 800c240:	6983      	ldr	r3, [r0, #24]
 800c242:	b90b      	cbnz	r3, 800c248 <_vfiprintf_r+0x18>
 800c244:	f000 fb02 	bl	800c84c <__sinit>
 800c248:	4b89      	ldr	r3, [pc, #548]	; (800c470 <_vfiprintf_r+0x240>)
 800c24a:	429d      	cmp	r5, r3
 800c24c:	d11b      	bne.n	800c286 <_vfiprintf_r+0x56>
 800c24e:	6875      	ldr	r5, [r6, #4]
 800c250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c252:	07d9      	lsls	r1, r3, #31
 800c254:	d405      	bmi.n	800c262 <_vfiprintf_r+0x32>
 800c256:	89ab      	ldrh	r3, [r5, #12]
 800c258:	059a      	lsls	r2, r3, #22
 800c25a:	d402      	bmi.n	800c262 <_vfiprintf_r+0x32>
 800c25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c25e:	f000 fb93 	bl	800c988 <__retarget_lock_acquire_recursive>
 800c262:	89ab      	ldrh	r3, [r5, #12]
 800c264:	071b      	lsls	r3, r3, #28
 800c266:	d501      	bpl.n	800c26c <_vfiprintf_r+0x3c>
 800c268:	692b      	ldr	r3, [r5, #16]
 800c26a:	b9eb      	cbnz	r3, 800c2a8 <_vfiprintf_r+0x78>
 800c26c:	4629      	mov	r1, r5
 800c26e:	4630      	mov	r0, r6
 800c270:	f000 f960 	bl	800c534 <__swsetup_r>
 800c274:	b1c0      	cbz	r0, 800c2a8 <_vfiprintf_r+0x78>
 800c276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c278:	07dc      	lsls	r4, r3, #31
 800c27a:	d50e      	bpl.n	800c29a <_vfiprintf_r+0x6a>
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c280:	b01d      	add	sp, #116	; 0x74
 800c282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c286:	4b7b      	ldr	r3, [pc, #492]	; (800c474 <_vfiprintf_r+0x244>)
 800c288:	429d      	cmp	r5, r3
 800c28a:	d101      	bne.n	800c290 <_vfiprintf_r+0x60>
 800c28c:	68b5      	ldr	r5, [r6, #8]
 800c28e:	e7df      	b.n	800c250 <_vfiprintf_r+0x20>
 800c290:	4b79      	ldr	r3, [pc, #484]	; (800c478 <_vfiprintf_r+0x248>)
 800c292:	429d      	cmp	r5, r3
 800c294:	bf08      	it	eq
 800c296:	68f5      	ldreq	r5, [r6, #12]
 800c298:	e7da      	b.n	800c250 <_vfiprintf_r+0x20>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	0598      	lsls	r0, r3, #22
 800c29e:	d4ed      	bmi.n	800c27c <_vfiprintf_r+0x4c>
 800c2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2a2:	f000 fb72 	bl	800c98a <__retarget_lock_release_recursive>
 800c2a6:	e7e9      	b.n	800c27c <_vfiprintf_r+0x4c>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ac:	2320      	movs	r3, #32
 800c2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2b2:	2330      	movs	r3, #48	; 0x30
 800c2b4:	f04f 0901 	mov.w	r9, #1
 800c2b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c47c <_vfiprintf_r+0x24c>
 800c2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2c4:	4623      	mov	r3, r4
 800c2c6:	469a      	mov	sl, r3
 800c2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2cc:	b10a      	cbz	r2, 800c2d2 <_vfiprintf_r+0xa2>
 800c2ce:	2a25      	cmp	r2, #37	; 0x25
 800c2d0:	d1f9      	bne.n	800c2c6 <_vfiprintf_r+0x96>
 800c2d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c2d6:	d00b      	beq.n	800c2f0 <_vfiprintf_r+0xc0>
 800c2d8:	465b      	mov	r3, fp
 800c2da:	4622      	mov	r2, r4
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f7ff ff94 	bl	800c20c <__sfputs_r>
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f000 80aa 	beq.w	800c43e <_vfiprintf_r+0x20e>
 800c2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ec:	445a      	add	r2, fp
 800c2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 80a2 	beq.w	800c43e <_vfiprintf_r+0x20e>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c304:	f10a 0a01 	add.w	sl, sl, #1
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	9307      	str	r3, [sp, #28]
 800c30c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c310:	931a      	str	r3, [sp, #104]	; 0x68
 800c312:	4654      	mov	r4, sl
 800c314:	2205      	movs	r2, #5
 800c316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31a:	4858      	ldr	r0, [pc, #352]	; (800c47c <_vfiprintf_r+0x24c>)
 800c31c:	f7fe ffa6 	bl	800b26c <memchr>
 800c320:	9a04      	ldr	r2, [sp, #16]
 800c322:	b9d8      	cbnz	r0, 800c35c <_vfiprintf_r+0x12c>
 800c324:	06d1      	lsls	r1, r2, #27
 800c326:	bf44      	itt	mi
 800c328:	2320      	movmi	r3, #32
 800c32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32e:	0713      	lsls	r3, r2, #28
 800c330:	bf44      	itt	mi
 800c332:	232b      	movmi	r3, #43	; 0x2b
 800c334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c338:	f89a 3000 	ldrb.w	r3, [sl]
 800c33c:	2b2a      	cmp	r3, #42	; 0x2a
 800c33e:	d015      	beq.n	800c36c <_vfiprintf_r+0x13c>
 800c340:	4654      	mov	r4, sl
 800c342:	2000      	movs	r0, #0
 800c344:	f04f 0c0a 	mov.w	ip, #10
 800c348:	9a07      	ldr	r2, [sp, #28]
 800c34a:	4621      	mov	r1, r4
 800c34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c350:	3b30      	subs	r3, #48	; 0x30
 800c352:	2b09      	cmp	r3, #9
 800c354:	d94e      	bls.n	800c3f4 <_vfiprintf_r+0x1c4>
 800c356:	b1b0      	cbz	r0, 800c386 <_vfiprintf_r+0x156>
 800c358:	9207      	str	r2, [sp, #28]
 800c35a:	e014      	b.n	800c386 <_vfiprintf_r+0x156>
 800c35c:	eba0 0308 	sub.w	r3, r0, r8
 800c360:	fa09 f303 	lsl.w	r3, r9, r3
 800c364:	4313      	orrs	r3, r2
 800c366:	46a2      	mov	sl, r4
 800c368:	9304      	str	r3, [sp, #16]
 800c36a:	e7d2      	b.n	800c312 <_vfiprintf_r+0xe2>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	1d19      	adds	r1, r3, #4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	9103      	str	r1, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfbb      	ittet	lt
 800c378:	425b      	neglt	r3, r3
 800c37a:	f042 0202 	orrlt.w	r2, r2, #2
 800c37e:	9307      	strge	r3, [sp, #28]
 800c380:	9307      	strlt	r3, [sp, #28]
 800c382:	bfb8      	it	lt
 800c384:	9204      	strlt	r2, [sp, #16]
 800c386:	7823      	ldrb	r3, [r4, #0]
 800c388:	2b2e      	cmp	r3, #46	; 0x2e
 800c38a:	d10c      	bne.n	800c3a6 <_vfiprintf_r+0x176>
 800c38c:	7863      	ldrb	r3, [r4, #1]
 800c38e:	2b2a      	cmp	r3, #42	; 0x2a
 800c390:	d135      	bne.n	800c3fe <_vfiprintf_r+0x1ce>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	3402      	adds	r4, #2
 800c396:	1d1a      	adds	r2, r3, #4
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	9203      	str	r2, [sp, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	bfb8      	it	lt
 800c3a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c3a4:	9305      	str	r3, [sp, #20]
 800c3a6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c480 <_vfiprintf_r+0x250>
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	7821      	ldrb	r1, [r4, #0]
 800c3b0:	f7fe ff5c 	bl	800b26c <memchr>
 800c3b4:	b140      	cbz	r0, 800c3c8 <_vfiprintf_r+0x198>
 800c3b6:	2340      	movs	r3, #64	; 0x40
 800c3b8:	eba0 000a 	sub.w	r0, r0, sl
 800c3bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c3c0:	9b04      	ldr	r3, [sp, #16]
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	4303      	orrs	r3, r0
 800c3c6:	9304      	str	r3, [sp, #16]
 800c3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3cc:	2206      	movs	r2, #6
 800c3ce:	482d      	ldr	r0, [pc, #180]	; (800c484 <_vfiprintf_r+0x254>)
 800c3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3d4:	f7fe ff4a 	bl	800b26c <memchr>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d03f      	beq.n	800c45c <_vfiprintf_r+0x22c>
 800c3dc:	4b2a      	ldr	r3, [pc, #168]	; (800c488 <_vfiprintf_r+0x258>)
 800c3de:	bb1b      	cbnz	r3, 800c428 <_vfiprintf_r+0x1f8>
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	9303      	str	r3, [sp, #12]
 800c3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ee:	443b      	add	r3, r7
 800c3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f2:	e767      	b.n	800c2c4 <_vfiprintf_r+0x94>
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	2001      	movs	r0, #1
 800c3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3fc:	e7a5      	b.n	800c34a <_vfiprintf_r+0x11a>
 800c3fe:	2300      	movs	r3, #0
 800c400:	f04f 0c0a 	mov.w	ip, #10
 800c404:	4619      	mov	r1, r3
 800c406:	3401      	adds	r4, #1
 800c408:	9305      	str	r3, [sp, #20]
 800c40a:	4620      	mov	r0, r4
 800c40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c410:	3a30      	subs	r2, #48	; 0x30
 800c412:	2a09      	cmp	r2, #9
 800c414:	d903      	bls.n	800c41e <_vfiprintf_r+0x1ee>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d0c5      	beq.n	800c3a6 <_vfiprintf_r+0x176>
 800c41a:	9105      	str	r1, [sp, #20]
 800c41c:	e7c3      	b.n	800c3a6 <_vfiprintf_r+0x176>
 800c41e:	4604      	mov	r4, r0
 800c420:	2301      	movs	r3, #1
 800c422:	fb0c 2101 	mla	r1, ip, r1, r2
 800c426:	e7f0      	b.n	800c40a <_vfiprintf_r+0x1da>
 800c428:	ab03      	add	r3, sp, #12
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	462a      	mov	r2, r5
 800c42e:	4630      	mov	r0, r6
 800c430:	4b16      	ldr	r3, [pc, #88]	; (800c48c <_vfiprintf_r+0x25c>)
 800c432:	a904      	add	r1, sp, #16
 800c434:	f7fc fa88 	bl	8008948 <_printf_float>
 800c438:	4607      	mov	r7, r0
 800c43a:	1c78      	adds	r0, r7, #1
 800c43c:	d1d6      	bne.n	800c3ec <_vfiprintf_r+0x1bc>
 800c43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c440:	07d9      	lsls	r1, r3, #31
 800c442:	d405      	bmi.n	800c450 <_vfiprintf_r+0x220>
 800c444:	89ab      	ldrh	r3, [r5, #12]
 800c446:	059a      	lsls	r2, r3, #22
 800c448:	d402      	bmi.n	800c450 <_vfiprintf_r+0x220>
 800c44a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44c:	f000 fa9d 	bl	800c98a <__retarget_lock_release_recursive>
 800c450:	89ab      	ldrh	r3, [r5, #12]
 800c452:	065b      	lsls	r3, r3, #25
 800c454:	f53f af12 	bmi.w	800c27c <_vfiprintf_r+0x4c>
 800c458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c45a:	e711      	b.n	800c280 <_vfiprintf_r+0x50>
 800c45c:	ab03      	add	r3, sp, #12
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	462a      	mov	r2, r5
 800c462:	4630      	mov	r0, r6
 800c464:	4b09      	ldr	r3, [pc, #36]	; (800c48c <_vfiprintf_r+0x25c>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	f7fc fd0a 	bl	8008e80 <_printf_i>
 800c46c:	e7e4      	b.n	800c438 <_vfiprintf_r+0x208>
 800c46e:	bf00      	nop
 800c470:	0800d13c 	.word	0x0800d13c
 800c474:	0800d15c 	.word	0x0800d15c
 800c478:	0800d11c 	.word	0x0800d11c
 800c47c:	0800d0cc 	.word	0x0800d0cc
 800c480:	0800d0d2 	.word	0x0800d0d2
 800c484:	0800d0d6 	.word	0x0800d0d6
 800c488:	08008949 	.word	0x08008949
 800c48c:	0800c20d 	.word	0x0800c20d

0800c490 <__swbuf_r>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	460e      	mov	r6, r1
 800c494:	4614      	mov	r4, r2
 800c496:	4605      	mov	r5, r0
 800c498:	b118      	cbz	r0, 800c4a2 <__swbuf_r+0x12>
 800c49a:	6983      	ldr	r3, [r0, #24]
 800c49c:	b90b      	cbnz	r3, 800c4a2 <__swbuf_r+0x12>
 800c49e:	f000 f9d5 	bl	800c84c <__sinit>
 800c4a2:	4b21      	ldr	r3, [pc, #132]	; (800c528 <__swbuf_r+0x98>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	d12b      	bne.n	800c500 <__swbuf_r+0x70>
 800c4a8:	686c      	ldr	r4, [r5, #4]
 800c4aa:	69a3      	ldr	r3, [r4, #24]
 800c4ac:	60a3      	str	r3, [r4, #8]
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	071a      	lsls	r2, r3, #28
 800c4b2:	d52f      	bpl.n	800c514 <__swbuf_r+0x84>
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	b36b      	cbz	r3, 800c514 <__swbuf_r+0x84>
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	6820      	ldr	r0, [r4, #0]
 800c4bc:	b2f6      	uxtb	r6, r6
 800c4be:	1ac0      	subs	r0, r0, r3
 800c4c0:	6963      	ldr	r3, [r4, #20]
 800c4c2:	4637      	mov	r7, r6
 800c4c4:	4283      	cmp	r3, r0
 800c4c6:	dc04      	bgt.n	800c4d2 <__swbuf_r+0x42>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 f92a 	bl	800c724 <_fflush_r>
 800c4d0:	bb30      	cbnz	r0, 800c520 <__swbuf_r+0x90>
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	60a3      	str	r3, [r4, #8]
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	1c5a      	adds	r2, r3, #1
 800c4de:	6022      	str	r2, [r4, #0]
 800c4e0:	701e      	strb	r6, [r3, #0]
 800c4e2:	6963      	ldr	r3, [r4, #20]
 800c4e4:	4283      	cmp	r3, r0
 800c4e6:	d004      	beq.n	800c4f2 <__swbuf_r+0x62>
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	07db      	lsls	r3, r3, #31
 800c4ec:	d506      	bpl.n	800c4fc <__swbuf_r+0x6c>
 800c4ee:	2e0a      	cmp	r6, #10
 800c4f0:	d104      	bne.n	800c4fc <__swbuf_r+0x6c>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f000 f915 	bl	800c724 <_fflush_r>
 800c4fa:	b988      	cbnz	r0, 800c520 <__swbuf_r+0x90>
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <__swbuf_r+0x9c>)
 800c502:	429c      	cmp	r4, r3
 800c504:	d101      	bne.n	800c50a <__swbuf_r+0x7a>
 800c506:	68ac      	ldr	r4, [r5, #8]
 800c508:	e7cf      	b.n	800c4aa <__swbuf_r+0x1a>
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <__swbuf_r+0xa0>)
 800c50c:	429c      	cmp	r4, r3
 800c50e:	bf08      	it	eq
 800c510:	68ec      	ldreq	r4, [r5, #12]
 800c512:	e7ca      	b.n	800c4aa <__swbuf_r+0x1a>
 800c514:	4621      	mov	r1, r4
 800c516:	4628      	mov	r0, r5
 800c518:	f000 f80c 	bl	800c534 <__swsetup_r>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d0cb      	beq.n	800c4b8 <__swbuf_r+0x28>
 800c520:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c524:	e7ea      	b.n	800c4fc <__swbuf_r+0x6c>
 800c526:	bf00      	nop
 800c528:	0800d13c 	.word	0x0800d13c
 800c52c:	0800d15c 	.word	0x0800d15c
 800c530:	0800d11c 	.word	0x0800d11c

0800c534 <__swsetup_r>:
 800c534:	4b32      	ldr	r3, [pc, #200]	; (800c600 <__swsetup_r+0xcc>)
 800c536:	b570      	push	{r4, r5, r6, lr}
 800c538:	681d      	ldr	r5, [r3, #0]
 800c53a:	4606      	mov	r6, r0
 800c53c:	460c      	mov	r4, r1
 800c53e:	b125      	cbz	r5, 800c54a <__swsetup_r+0x16>
 800c540:	69ab      	ldr	r3, [r5, #24]
 800c542:	b913      	cbnz	r3, 800c54a <__swsetup_r+0x16>
 800c544:	4628      	mov	r0, r5
 800c546:	f000 f981 	bl	800c84c <__sinit>
 800c54a:	4b2e      	ldr	r3, [pc, #184]	; (800c604 <__swsetup_r+0xd0>)
 800c54c:	429c      	cmp	r4, r3
 800c54e:	d10f      	bne.n	800c570 <__swsetup_r+0x3c>
 800c550:	686c      	ldr	r4, [r5, #4]
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c558:	0719      	lsls	r1, r3, #28
 800c55a:	d42c      	bmi.n	800c5b6 <__swsetup_r+0x82>
 800c55c:	06dd      	lsls	r5, r3, #27
 800c55e:	d411      	bmi.n	800c584 <__swsetup_r+0x50>
 800c560:	2309      	movs	r3, #9
 800c562:	6033      	str	r3, [r6, #0]
 800c564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56c:	81a3      	strh	r3, [r4, #12]
 800c56e:	e03e      	b.n	800c5ee <__swsetup_r+0xba>
 800c570:	4b25      	ldr	r3, [pc, #148]	; (800c608 <__swsetup_r+0xd4>)
 800c572:	429c      	cmp	r4, r3
 800c574:	d101      	bne.n	800c57a <__swsetup_r+0x46>
 800c576:	68ac      	ldr	r4, [r5, #8]
 800c578:	e7eb      	b.n	800c552 <__swsetup_r+0x1e>
 800c57a:	4b24      	ldr	r3, [pc, #144]	; (800c60c <__swsetup_r+0xd8>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	bf08      	it	eq
 800c580:	68ec      	ldreq	r4, [r5, #12]
 800c582:	e7e6      	b.n	800c552 <__swsetup_r+0x1e>
 800c584:	0758      	lsls	r0, r3, #29
 800c586:	d512      	bpl.n	800c5ae <__swsetup_r+0x7a>
 800c588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c58a:	b141      	cbz	r1, 800c59e <__swsetup_r+0x6a>
 800c58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c590:	4299      	cmp	r1, r3
 800c592:	d002      	beq.n	800c59a <__swsetup_r+0x66>
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff fb43 	bl	800bc20 <_free_r>
 800c59a:	2300      	movs	r3, #0
 800c59c:	6363      	str	r3, [r4, #52]	; 0x34
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	6063      	str	r3, [r4, #4]
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	f043 0308 	orr.w	r3, r3, #8
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	6923      	ldr	r3, [r4, #16]
 800c5b8:	b94b      	cbnz	r3, 800c5ce <__swsetup_r+0x9a>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5c4:	d003      	beq.n	800c5ce <__swsetup_r+0x9a>
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f000 fa05 	bl	800c9d8 <__smakebuf_r>
 800c5ce:	89a0      	ldrh	r0, [r4, #12]
 800c5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5d4:	f010 0301 	ands.w	r3, r0, #1
 800c5d8:	d00a      	beq.n	800c5f0 <__swsetup_r+0xbc>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60a3      	str	r3, [r4, #8]
 800c5de:	6963      	ldr	r3, [r4, #20]
 800c5e0:	425b      	negs	r3, r3
 800c5e2:	61a3      	str	r3, [r4, #24]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	b943      	cbnz	r3, 800c5fa <__swsetup_r+0xc6>
 800c5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5ec:	d1ba      	bne.n	800c564 <__swsetup_r+0x30>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	0781      	lsls	r1, r0, #30
 800c5f2:	bf58      	it	pl
 800c5f4:	6963      	ldrpl	r3, [r4, #20]
 800c5f6:	60a3      	str	r3, [r4, #8]
 800c5f8:	e7f4      	b.n	800c5e4 <__swsetup_r+0xb0>
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	e7f7      	b.n	800c5ee <__swsetup_r+0xba>
 800c5fe:	bf00      	nop
 800c600:	200000f0 	.word	0x200000f0
 800c604:	0800d13c 	.word	0x0800d13c
 800c608:	0800d15c 	.word	0x0800d15c
 800c60c:	0800d11c 	.word	0x0800d11c

0800c610 <abort>:
 800c610:	2006      	movs	r0, #6
 800c612:	b508      	push	{r3, lr}
 800c614:	f000 fa50 	bl	800cab8 <raise>
 800c618:	2001      	movs	r0, #1
 800c61a:	f7f6 ff86 	bl	800352a <_exit>
	...

0800c620 <__sflush_r>:
 800c620:	898a      	ldrh	r2, [r1, #12]
 800c622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c624:	4605      	mov	r5, r0
 800c626:	0710      	lsls	r0, r2, #28
 800c628:	460c      	mov	r4, r1
 800c62a:	d457      	bmi.n	800c6dc <__sflush_r+0xbc>
 800c62c:	684b      	ldr	r3, [r1, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	dc04      	bgt.n	800c63c <__sflush_r+0x1c>
 800c632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c634:	2b00      	cmp	r3, #0
 800c636:	dc01      	bgt.n	800c63c <__sflush_r+0x1c>
 800c638:	2000      	movs	r0, #0
 800c63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c63c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d0fa      	beq.n	800c638 <__sflush_r+0x18>
 800c642:	2300      	movs	r3, #0
 800c644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c648:	682f      	ldr	r7, [r5, #0]
 800c64a:	602b      	str	r3, [r5, #0]
 800c64c:	d032      	beq.n	800c6b4 <__sflush_r+0x94>
 800c64e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	075a      	lsls	r2, r3, #29
 800c654:	d505      	bpl.n	800c662 <__sflush_r+0x42>
 800c656:	6863      	ldr	r3, [r4, #4]
 800c658:	1ac0      	subs	r0, r0, r3
 800c65a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c65c:	b10b      	cbz	r3, 800c662 <__sflush_r+0x42>
 800c65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c660:	1ac0      	subs	r0, r0, r3
 800c662:	2300      	movs	r3, #0
 800c664:	4602      	mov	r2, r0
 800c666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c668:	4628      	mov	r0, r5
 800c66a:	6a21      	ldr	r1, [r4, #32]
 800c66c:	47b0      	blx	r6
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	d106      	bne.n	800c682 <__sflush_r+0x62>
 800c674:	6829      	ldr	r1, [r5, #0]
 800c676:	291d      	cmp	r1, #29
 800c678:	d82c      	bhi.n	800c6d4 <__sflush_r+0xb4>
 800c67a:	4a29      	ldr	r2, [pc, #164]	; (800c720 <__sflush_r+0x100>)
 800c67c:	40ca      	lsrs	r2, r1
 800c67e:	07d6      	lsls	r6, r2, #31
 800c680:	d528      	bpl.n	800c6d4 <__sflush_r+0xb4>
 800c682:	2200      	movs	r2, #0
 800c684:	6062      	str	r2, [r4, #4]
 800c686:	6922      	ldr	r2, [r4, #16]
 800c688:	04d9      	lsls	r1, r3, #19
 800c68a:	6022      	str	r2, [r4, #0]
 800c68c:	d504      	bpl.n	800c698 <__sflush_r+0x78>
 800c68e:	1c42      	adds	r2, r0, #1
 800c690:	d101      	bne.n	800c696 <__sflush_r+0x76>
 800c692:	682b      	ldr	r3, [r5, #0]
 800c694:	b903      	cbnz	r3, 800c698 <__sflush_r+0x78>
 800c696:	6560      	str	r0, [r4, #84]	; 0x54
 800c698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c69a:	602f      	str	r7, [r5, #0]
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d0cb      	beq.n	800c638 <__sflush_r+0x18>
 800c6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6a4:	4299      	cmp	r1, r3
 800c6a6:	d002      	beq.n	800c6ae <__sflush_r+0x8e>
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f7ff fab9 	bl	800bc20 <_free_r>
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c6b2:	e7c2      	b.n	800c63a <__sflush_r+0x1a>
 800c6b4:	6a21      	ldr	r1, [r4, #32]
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b0      	blx	r6
 800c6bc:	1c41      	adds	r1, r0, #1
 800c6be:	d1c7      	bne.n	800c650 <__sflush_r+0x30>
 800c6c0:	682b      	ldr	r3, [r5, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0c4      	beq.n	800c650 <__sflush_r+0x30>
 800c6c6:	2b1d      	cmp	r3, #29
 800c6c8:	d001      	beq.n	800c6ce <__sflush_r+0xae>
 800c6ca:	2b16      	cmp	r3, #22
 800c6cc:	d101      	bne.n	800c6d2 <__sflush_r+0xb2>
 800c6ce:	602f      	str	r7, [r5, #0]
 800c6d0:	e7b2      	b.n	800c638 <__sflush_r+0x18>
 800c6d2:	89a3      	ldrh	r3, [r4, #12]
 800c6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	e7ae      	b.n	800c63a <__sflush_r+0x1a>
 800c6dc:	690f      	ldr	r7, [r1, #16]
 800c6de:	2f00      	cmp	r7, #0
 800c6e0:	d0aa      	beq.n	800c638 <__sflush_r+0x18>
 800c6e2:	0793      	lsls	r3, r2, #30
 800c6e4:	bf18      	it	ne
 800c6e6:	2300      	movne	r3, #0
 800c6e8:	680e      	ldr	r6, [r1, #0]
 800c6ea:	bf08      	it	eq
 800c6ec:	694b      	ldreq	r3, [r1, #20]
 800c6ee:	1bf6      	subs	r6, r6, r7
 800c6f0:	600f      	str	r7, [r1, #0]
 800c6f2:	608b      	str	r3, [r1, #8]
 800c6f4:	2e00      	cmp	r6, #0
 800c6f6:	dd9f      	ble.n	800c638 <__sflush_r+0x18>
 800c6f8:	4633      	mov	r3, r6
 800c6fa:	463a      	mov	r2, r7
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	6a21      	ldr	r1, [r4, #32]
 800c700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c704:	47e0      	blx	ip
 800c706:	2800      	cmp	r0, #0
 800c708:	dc06      	bgt.n	800c718 <__sflush_r+0xf8>
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	e790      	b.n	800c63a <__sflush_r+0x1a>
 800c718:	4407      	add	r7, r0
 800c71a:	1a36      	subs	r6, r6, r0
 800c71c:	e7ea      	b.n	800c6f4 <__sflush_r+0xd4>
 800c71e:	bf00      	nop
 800c720:	20400001 	.word	0x20400001

0800c724 <_fflush_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	690b      	ldr	r3, [r1, #16]
 800c728:	4605      	mov	r5, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	b913      	cbnz	r3, 800c734 <_fflush_r+0x10>
 800c72e:	2500      	movs	r5, #0
 800c730:	4628      	mov	r0, r5
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	b118      	cbz	r0, 800c73e <_fflush_r+0x1a>
 800c736:	6983      	ldr	r3, [r0, #24]
 800c738:	b90b      	cbnz	r3, 800c73e <_fflush_r+0x1a>
 800c73a:	f000 f887 	bl	800c84c <__sinit>
 800c73e:	4b14      	ldr	r3, [pc, #80]	; (800c790 <_fflush_r+0x6c>)
 800c740:	429c      	cmp	r4, r3
 800c742:	d11b      	bne.n	800c77c <_fflush_r+0x58>
 800c744:	686c      	ldr	r4, [r5, #4]
 800c746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0ef      	beq.n	800c72e <_fflush_r+0xa>
 800c74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c750:	07d0      	lsls	r0, r2, #31
 800c752:	d404      	bmi.n	800c75e <_fflush_r+0x3a>
 800c754:	0599      	lsls	r1, r3, #22
 800c756:	d402      	bmi.n	800c75e <_fflush_r+0x3a>
 800c758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c75a:	f000 f915 	bl	800c988 <__retarget_lock_acquire_recursive>
 800c75e:	4628      	mov	r0, r5
 800c760:	4621      	mov	r1, r4
 800c762:	f7ff ff5d 	bl	800c620 <__sflush_r>
 800c766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c768:	4605      	mov	r5, r0
 800c76a:	07da      	lsls	r2, r3, #31
 800c76c:	d4e0      	bmi.n	800c730 <_fflush_r+0xc>
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	059b      	lsls	r3, r3, #22
 800c772:	d4dd      	bmi.n	800c730 <_fflush_r+0xc>
 800c774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c776:	f000 f908 	bl	800c98a <__retarget_lock_release_recursive>
 800c77a:	e7d9      	b.n	800c730 <_fflush_r+0xc>
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <_fflush_r+0x70>)
 800c77e:	429c      	cmp	r4, r3
 800c780:	d101      	bne.n	800c786 <_fflush_r+0x62>
 800c782:	68ac      	ldr	r4, [r5, #8]
 800c784:	e7df      	b.n	800c746 <_fflush_r+0x22>
 800c786:	4b04      	ldr	r3, [pc, #16]	; (800c798 <_fflush_r+0x74>)
 800c788:	429c      	cmp	r4, r3
 800c78a:	bf08      	it	eq
 800c78c:	68ec      	ldreq	r4, [r5, #12]
 800c78e:	e7da      	b.n	800c746 <_fflush_r+0x22>
 800c790:	0800d13c 	.word	0x0800d13c
 800c794:	0800d15c 	.word	0x0800d15c
 800c798:	0800d11c 	.word	0x0800d11c

0800c79c <std>:
 800c79c:	2300      	movs	r3, #0
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c7a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7aa:	6083      	str	r3, [r0, #8]
 800c7ac:	8181      	strh	r1, [r0, #12]
 800c7ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c7b0:	81c2      	strh	r2, [r0, #14]
 800c7b2:	6183      	str	r3, [r0, #24]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	305c      	adds	r0, #92	; 0x5c
 800c7ba:	f7fc f81f 	bl	80087fc <memset>
 800c7be:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <std+0x38>)
 800c7c0:	6224      	str	r4, [r4, #32]
 800c7c2:	6263      	str	r3, [r4, #36]	; 0x24
 800c7c4:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <std+0x3c>)
 800c7c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7c8:	4b04      	ldr	r3, [pc, #16]	; (800c7dc <std+0x40>)
 800c7ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7cc:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <std+0x44>)
 800c7ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0800caf1 	.word	0x0800caf1
 800c7d8:	0800cb13 	.word	0x0800cb13
 800c7dc:	0800cb4b 	.word	0x0800cb4b
 800c7e0:	0800cb6f 	.word	0x0800cb6f

0800c7e4 <_cleanup_r>:
 800c7e4:	4901      	ldr	r1, [pc, #4]	; (800c7ec <_cleanup_r+0x8>)
 800c7e6:	f000 b8af 	b.w	800c948 <_fwalk_reent>
 800c7ea:	bf00      	nop
 800c7ec:	0800c725 	.word	0x0800c725

0800c7f0 <__sfmoreglue>:
 800c7f0:	2268      	movs	r2, #104	; 0x68
 800c7f2:	b570      	push	{r4, r5, r6, lr}
 800c7f4:	1e4d      	subs	r5, r1, #1
 800c7f6:	4355      	muls	r5, r2
 800c7f8:	460e      	mov	r6, r1
 800c7fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7fe:	f7ff fa77 	bl	800bcf0 <_malloc_r>
 800c802:	4604      	mov	r4, r0
 800c804:	b140      	cbz	r0, 800c818 <__sfmoreglue+0x28>
 800c806:	2100      	movs	r1, #0
 800c808:	e9c0 1600 	strd	r1, r6, [r0]
 800c80c:	300c      	adds	r0, #12
 800c80e:	60a0      	str	r0, [r4, #8]
 800c810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c814:	f7fb fff2 	bl	80087fc <memset>
 800c818:	4620      	mov	r0, r4
 800c81a:	bd70      	pop	{r4, r5, r6, pc}

0800c81c <__sfp_lock_acquire>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__sfp_lock_acquire+0x8>)
 800c81e:	f000 b8b3 	b.w	800c988 <__retarget_lock_acquire_recursive>
 800c822:	bf00      	nop
 800c824:	200004ed 	.word	0x200004ed

0800c828 <__sfp_lock_release>:
 800c828:	4801      	ldr	r0, [pc, #4]	; (800c830 <__sfp_lock_release+0x8>)
 800c82a:	f000 b8ae 	b.w	800c98a <__retarget_lock_release_recursive>
 800c82e:	bf00      	nop
 800c830:	200004ed 	.word	0x200004ed

0800c834 <__sinit_lock_acquire>:
 800c834:	4801      	ldr	r0, [pc, #4]	; (800c83c <__sinit_lock_acquire+0x8>)
 800c836:	f000 b8a7 	b.w	800c988 <__retarget_lock_acquire_recursive>
 800c83a:	bf00      	nop
 800c83c:	200004ee 	.word	0x200004ee

0800c840 <__sinit_lock_release>:
 800c840:	4801      	ldr	r0, [pc, #4]	; (800c848 <__sinit_lock_release+0x8>)
 800c842:	f000 b8a2 	b.w	800c98a <__retarget_lock_release_recursive>
 800c846:	bf00      	nop
 800c848:	200004ee 	.word	0x200004ee

0800c84c <__sinit>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	4604      	mov	r4, r0
 800c850:	f7ff fff0 	bl	800c834 <__sinit_lock_acquire>
 800c854:	69a3      	ldr	r3, [r4, #24]
 800c856:	b11b      	cbz	r3, 800c860 <__sinit+0x14>
 800c858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c85c:	f7ff bff0 	b.w	800c840 <__sinit_lock_release>
 800c860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c864:	6523      	str	r3, [r4, #80]	; 0x50
 800c866:	4b13      	ldr	r3, [pc, #76]	; (800c8b4 <__sinit+0x68>)
 800c868:	4a13      	ldr	r2, [pc, #76]	; (800c8b8 <__sinit+0x6c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c86e:	42a3      	cmp	r3, r4
 800c870:	bf08      	it	eq
 800c872:	2301      	moveq	r3, #1
 800c874:	4620      	mov	r0, r4
 800c876:	bf08      	it	eq
 800c878:	61a3      	streq	r3, [r4, #24]
 800c87a:	f000 f81f 	bl	800c8bc <__sfp>
 800c87e:	6060      	str	r0, [r4, #4]
 800c880:	4620      	mov	r0, r4
 800c882:	f000 f81b 	bl	800c8bc <__sfp>
 800c886:	60a0      	str	r0, [r4, #8]
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 f817 	bl	800c8bc <__sfp>
 800c88e:	2200      	movs	r2, #0
 800c890:	2104      	movs	r1, #4
 800c892:	60e0      	str	r0, [r4, #12]
 800c894:	6860      	ldr	r0, [r4, #4]
 800c896:	f7ff ff81 	bl	800c79c <std>
 800c89a:	2201      	movs	r2, #1
 800c89c:	2109      	movs	r1, #9
 800c89e:	68a0      	ldr	r0, [r4, #8]
 800c8a0:	f7ff ff7c 	bl	800c79c <std>
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	2112      	movs	r1, #18
 800c8a8:	68e0      	ldr	r0, [r4, #12]
 800c8aa:	f7ff ff77 	bl	800c79c <std>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	61a3      	str	r3, [r4, #24]
 800c8b2:	e7d1      	b.n	800c858 <__sinit+0xc>
 800c8b4:	0800ccdc 	.word	0x0800ccdc
 800c8b8:	0800c7e5 	.word	0x0800c7e5

0800c8bc <__sfp>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	4607      	mov	r7, r0
 800c8c0:	f7ff ffac 	bl	800c81c <__sfp_lock_acquire>
 800c8c4:	4b1e      	ldr	r3, [pc, #120]	; (800c940 <__sfp+0x84>)
 800c8c6:	681e      	ldr	r6, [r3, #0]
 800c8c8:	69b3      	ldr	r3, [r6, #24]
 800c8ca:	b913      	cbnz	r3, 800c8d2 <__sfp+0x16>
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f7ff ffbd 	bl	800c84c <__sinit>
 800c8d2:	3648      	adds	r6, #72	; 0x48
 800c8d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	d503      	bpl.n	800c8e4 <__sfp+0x28>
 800c8dc:	6833      	ldr	r3, [r6, #0]
 800c8de:	b30b      	cbz	r3, 800c924 <__sfp+0x68>
 800c8e0:	6836      	ldr	r6, [r6, #0]
 800c8e2:	e7f7      	b.n	800c8d4 <__sfp+0x18>
 800c8e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8e8:	b9d5      	cbnz	r5, 800c920 <__sfp+0x64>
 800c8ea:	4b16      	ldr	r3, [pc, #88]	; (800c944 <__sfp+0x88>)
 800c8ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8f0:	60e3      	str	r3, [r4, #12]
 800c8f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c8f4:	f000 f847 	bl	800c986 <__retarget_lock_init_recursive>
 800c8f8:	f7ff ff96 	bl	800c828 <__sfp_lock_release>
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	4629      	mov	r1, r5
 800c900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c908:	6025      	str	r5, [r4, #0]
 800c90a:	61a5      	str	r5, [r4, #24]
 800c90c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c910:	f7fb ff74 	bl	80087fc <memset>
 800c914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c91c:	4620      	mov	r0, r4
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c920:	3468      	adds	r4, #104	; 0x68
 800c922:	e7d9      	b.n	800c8d8 <__sfp+0x1c>
 800c924:	2104      	movs	r1, #4
 800c926:	4638      	mov	r0, r7
 800c928:	f7ff ff62 	bl	800c7f0 <__sfmoreglue>
 800c92c:	4604      	mov	r4, r0
 800c92e:	6030      	str	r0, [r6, #0]
 800c930:	2800      	cmp	r0, #0
 800c932:	d1d5      	bne.n	800c8e0 <__sfp+0x24>
 800c934:	f7ff ff78 	bl	800c828 <__sfp_lock_release>
 800c938:	230c      	movs	r3, #12
 800c93a:	603b      	str	r3, [r7, #0]
 800c93c:	e7ee      	b.n	800c91c <__sfp+0x60>
 800c93e:	bf00      	nop
 800c940:	0800ccdc 	.word	0x0800ccdc
 800c944:	ffff0001 	.word	0xffff0001

0800c948 <_fwalk_reent>:
 800c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	4606      	mov	r6, r0
 800c94e:	4688      	mov	r8, r1
 800c950:	2700      	movs	r7, #0
 800c952:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c95a:	f1b9 0901 	subs.w	r9, r9, #1
 800c95e:	d505      	bpl.n	800c96c <_fwalk_reent+0x24>
 800c960:	6824      	ldr	r4, [r4, #0]
 800c962:	2c00      	cmp	r4, #0
 800c964:	d1f7      	bne.n	800c956 <_fwalk_reent+0xe>
 800c966:	4638      	mov	r0, r7
 800c968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c96c:	89ab      	ldrh	r3, [r5, #12]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d907      	bls.n	800c982 <_fwalk_reent+0x3a>
 800c972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c976:	3301      	adds	r3, #1
 800c978:	d003      	beq.n	800c982 <_fwalk_reent+0x3a>
 800c97a:	4629      	mov	r1, r5
 800c97c:	4630      	mov	r0, r6
 800c97e:	47c0      	blx	r8
 800c980:	4307      	orrs	r7, r0
 800c982:	3568      	adds	r5, #104	; 0x68
 800c984:	e7e9      	b.n	800c95a <_fwalk_reent+0x12>

0800c986 <__retarget_lock_init_recursive>:
 800c986:	4770      	bx	lr

0800c988 <__retarget_lock_acquire_recursive>:
 800c988:	4770      	bx	lr

0800c98a <__retarget_lock_release_recursive>:
 800c98a:	4770      	bx	lr

0800c98c <__swhatbuf_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	460e      	mov	r6, r1
 800c990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c994:	4614      	mov	r4, r2
 800c996:	2900      	cmp	r1, #0
 800c998:	461d      	mov	r5, r3
 800c99a:	b096      	sub	sp, #88	; 0x58
 800c99c:	da08      	bge.n	800c9b0 <__swhatbuf_r+0x24>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	061a      	lsls	r2, r3, #24
 800c9a8:	d410      	bmi.n	800c9cc <__swhatbuf_r+0x40>
 800c9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ae:	e00e      	b.n	800c9ce <__swhatbuf_r+0x42>
 800c9b0:	466a      	mov	r2, sp
 800c9b2:	f000 f903 	bl	800cbbc <_fstat_r>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	dbf1      	blt.n	800c99e <__swhatbuf_r+0x12>
 800c9ba:	9a01      	ldr	r2, [sp, #4]
 800c9bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9c4:	425a      	negs	r2, r3
 800c9c6:	415a      	adcs	r2, r3
 800c9c8:	602a      	str	r2, [r5, #0]
 800c9ca:	e7ee      	b.n	800c9aa <__swhatbuf_r+0x1e>
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	b016      	add	sp, #88	; 0x58
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9d8 <__smakebuf_r>:
 800c9d8:	898b      	ldrh	r3, [r1, #12]
 800c9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9dc:	079d      	lsls	r5, r3, #30
 800c9de:	4606      	mov	r6, r0
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	d507      	bpl.n	800c9f4 <__smakebuf_r+0x1c>
 800c9e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	6163      	str	r3, [r4, #20]
 800c9f0:	b002      	add	sp, #8
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	466a      	mov	r2, sp
 800c9f6:	ab01      	add	r3, sp, #4
 800c9f8:	f7ff ffc8 	bl	800c98c <__swhatbuf_r>
 800c9fc:	9900      	ldr	r1, [sp, #0]
 800c9fe:	4605      	mov	r5, r0
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7ff f975 	bl	800bcf0 <_malloc_r>
 800ca06:	b948      	cbnz	r0, 800ca1c <__smakebuf_r+0x44>
 800ca08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0c:	059a      	lsls	r2, r3, #22
 800ca0e:	d4ef      	bmi.n	800c9f0 <__smakebuf_r+0x18>
 800ca10:	f023 0303 	bic.w	r3, r3, #3
 800ca14:	f043 0302 	orr.w	r3, r3, #2
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	e7e3      	b.n	800c9e4 <__smakebuf_r+0xc>
 800ca1c:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <__smakebuf_r+0x7c>)
 800ca1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	9b00      	ldr	r3, [sp, #0]
 800ca2c:	6120      	str	r0, [r4, #16]
 800ca2e:	6163      	str	r3, [r4, #20]
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	b15b      	cbz	r3, 800ca4c <__smakebuf_r+0x74>
 800ca34:	4630      	mov	r0, r6
 800ca36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca3a:	f000 f8d1 	bl	800cbe0 <_isatty_r>
 800ca3e:	b128      	cbz	r0, 800ca4c <__smakebuf_r+0x74>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	f023 0303 	bic.w	r3, r3, #3
 800ca46:	f043 0301 	orr.w	r3, r3, #1
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	89a0      	ldrh	r0, [r4, #12]
 800ca4e:	4305      	orrs	r5, r0
 800ca50:	81a5      	strh	r5, [r4, #12]
 800ca52:	e7cd      	b.n	800c9f0 <__smakebuf_r+0x18>
 800ca54:	0800c7e5 	.word	0x0800c7e5

0800ca58 <_malloc_usable_size_r>:
 800ca58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca5c:	1f18      	subs	r0, r3, #4
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	bfbc      	itt	lt
 800ca62:	580b      	ldrlt	r3, [r1, r0]
 800ca64:	18c0      	addlt	r0, r0, r3
 800ca66:	4770      	bx	lr

0800ca68 <_raise_r>:
 800ca68:	291f      	cmp	r1, #31
 800ca6a:	b538      	push	{r3, r4, r5, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	d904      	bls.n	800ca7c <_raise_r+0x14>
 800ca72:	2316      	movs	r3, #22
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca7e:	b112      	cbz	r2, 800ca86 <_raise_r+0x1e>
 800ca80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca84:	b94b      	cbnz	r3, 800ca9a <_raise_r+0x32>
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 f830 	bl	800caec <_getpid_r>
 800ca8c:	462a      	mov	r2, r5
 800ca8e:	4601      	mov	r1, r0
 800ca90:	4620      	mov	r0, r4
 800ca92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca96:	f000 b817 	b.w	800cac8 <_kill_r>
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d00a      	beq.n	800cab4 <_raise_r+0x4c>
 800ca9e:	1c59      	adds	r1, r3, #1
 800caa0:	d103      	bne.n	800caaa <_raise_r+0x42>
 800caa2:	2316      	movs	r3, #22
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	2001      	movs	r0, #1
 800caa8:	e7e7      	b.n	800ca7a <_raise_r+0x12>
 800caaa:	2400      	movs	r4, #0
 800caac:	4628      	mov	r0, r5
 800caae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cab2:	4798      	blx	r3
 800cab4:	2000      	movs	r0, #0
 800cab6:	e7e0      	b.n	800ca7a <_raise_r+0x12>

0800cab8 <raise>:
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <raise+0xc>)
 800caba:	4601      	mov	r1, r0
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	f7ff bfd3 	b.w	800ca68 <_raise_r>
 800cac2:	bf00      	nop
 800cac4:	200000f0 	.word	0x200000f0

0800cac8 <_kill_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	2300      	movs	r3, #0
 800cacc:	4d06      	ldr	r5, [pc, #24]	; (800cae8 <_kill_r+0x20>)
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	4611      	mov	r1, r2
 800cad4:	602b      	str	r3, [r5, #0]
 800cad6:	f7f6 fd18 	bl	800350a <_kill>
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	d102      	bne.n	800cae4 <_kill_r+0x1c>
 800cade:	682b      	ldr	r3, [r5, #0]
 800cae0:	b103      	cbz	r3, 800cae4 <_kill_r+0x1c>
 800cae2:	6023      	str	r3, [r4, #0]
 800cae4:	bd38      	pop	{r3, r4, r5, pc}
 800cae6:	bf00      	nop
 800cae8:	200004e8 	.word	0x200004e8

0800caec <_getpid_r>:
 800caec:	f7f6 bd06 	b.w	80034fc <_getpid>

0800caf0 <__sread>:
 800caf0:	b510      	push	{r4, lr}
 800caf2:	460c      	mov	r4, r1
 800caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf8:	f000 f894 	bl	800cc24 <_read_r>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	bfab      	itete	ge
 800cb00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb02:	89a3      	ldrhlt	r3, [r4, #12]
 800cb04:	181b      	addge	r3, r3, r0
 800cb06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb0a:	bfac      	ite	ge
 800cb0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb0e:	81a3      	strhlt	r3, [r4, #12]
 800cb10:	bd10      	pop	{r4, pc}

0800cb12 <__swrite>:
 800cb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb16:	461f      	mov	r7, r3
 800cb18:	898b      	ldrh	r3, [r1, #12]
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	05db      	lsls	r3, r3, #23
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4616      	mov	r6, r2
 800cb22:	d505      	bpl.n	800cb30 <__swrite+0x1e>
 800cb24:	2302      	movs	r3, #2
 800cb26:	2200      	movs	r2, #0
 800cb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb2c:	f000 f868 	bl	800cc00 <_lseek_r>
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	4632      	mov	r2, r6
 800cb34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	463b      	mov	r3, r7
 800cb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb46:	f000 b817 	b.w	800cb78 <_write_r>

0800cb4a <__sseek>:
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb52:	f000 f855 	bl	800cc00 <_lseek_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	bf15      	itete	ne
 800cb5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb66:	81a3      	strheq	r3, [r4, #12]
 800cb68:	bf18      	it	ne
 800cb6a:	81a3      	strhne	r3, [r4, #12]
 800cb6c:	bd10      	pop	{r4, pc}

0800cb6e <__sclose>:
 800cb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb72:	f000 b813 	b.w	800cb9c <_close_r>
	...

0800cb78 <_write_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	2200      	movs	r2, #0
 800cb82:	4d05      	ldr	r5, [pc, #20]	; (800cb98 <_write_r+0x20>)
 800cb84:	602a      	str	r2, [r5, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	f7f6 fcf6 	bl	8003578 <_write>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_write_r+0x1e>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_write_r+0x1e>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	200004e8 	.word	0x200004e8

0800cb9c <_close_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4d05      	ldr	r5, [pc, #20]	; (800cbb8 <_close_r+0x1c>)
 800cba2:	4604      	mov	r4, r0
 800cba4:	4608      	mov	r0, r1
 800cba6:	602b      	str	r3, [r5, #0]
 800cba8:	f7f6 fd02 	bl	80035b0 <_close>
 800cbac:	1c43      	adds	r3, r0, #1
 800cbae:	d102      	bne.n	800cbb6 <_close_r+0x1a>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	b103      	cbz	r3, 800cbb6 <_close_r+0x1a>
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
 800cbb8:	200004e8 	.word	0x200004e8

0800cbbc <_fstat_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	4d06      	ldr	r5, [pc, #24]	; (800cbdc <_fstat_r+0x20>)
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f7f6 fcfc 	bl	80035c6 <_fstat>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d102      	bne.n	800cbd8 <_fstat_r+0x1c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b103      	cbz	r3, 800cbd8 <_fstat_r+0x1c>
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	200004e8 	.word	0x200004e8

0800cbe0 <_isatty_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4d05      	ldr	r5, [pc, #20]	; (800cbfc <_isatty_r+0x1c>)
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4608      	mov	r0, r1
 800cbea:	602b      	str	r3, [r5, #0]
 800cbec:	f7f6 fcfa 	bl	80035e4 <_isatty>
 800cbf0:	1c43      	adds	r3, r0, #1
 800cbf2:	d102      	bne.n	800cbfa <_isatty_r+0x1a>
 800cbf4:	682b      	ldr	r3, [r5, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <_isatty_r+0x1a>
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
 800cbfc:	200004e8 	.word	0x200004e8

0800cc00 <_lseek_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	4611      	mov	r1, r2
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4d05      	ldr	r5, [pc, #20]	; (800cc20 <_lseek_r+0x20>)
 800cc0c:	602a      	str	r2, [r5, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	f7f6 fcf2 	bl	80035f8 <_lseek>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_lseek_r+0x1e>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_lseek_r+0x1e>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	200004e8 	.word	0x200004e8

0800cc24 <_read_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4d05      	ldr	r5, [pc, #20]	; (800cc44 <_read_r+0x20>)
 800cc30:	602a      	str	r2, [r5, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f7f6 fc83 	bl	800353e <_read>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_read_r+0x1e>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_read_r+0x1e>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	200004e8 	.word	0x200004e8

0800cc48 <_init>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr

0800cc54 <_fini>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr
