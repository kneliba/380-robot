
MTE380_robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800be40  0800be40  0001be40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b8  0800c2b8  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2b8  0800c2b8  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2b8  0800c2b8  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800c2c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000268  0800c524  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800c524  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001179c  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  00031a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d79  00000000  00000000  000366a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014edb  00000000  00000000  0003a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f40  00000000  00000000  0004f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eec  00000000  00000000  000e3284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be28 	.word	0x0800be28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	0800be28 	.word	0x0800be28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <invSqrt>:
// Functions

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
//	i = 0x5f3759df - (i>>1);
//	y = *(float*)&i;
//	y = y * (1.5f - (halfx * y * y));
//	return y;

	unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	085a      	lsrs	r2, r3, #1
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <invSqrt+0x5c>)
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
	float tmp = *(float*)&i;
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	617b      	str	r3, [r7, #20]
	float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4910      	ldr	r1, [pc, #64]	; (800115c <invSqrt+0x60>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe11 	bl	8000d44 <__aeabi_fmul>
 8001122:	4603      	mov	r3, r0
 8001124:	6979      	ldr	r1, [r7, #20]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe0c 	bl	8000d44 <__aeabi_fmul>
 800112c:	4603      	mov	r3, r0
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fe07 	bl	8000d44 <__aeabi_fmul>
 8001136:	4603      	mov	r3, r0
 8001138:	4619      	mov	r1, r3
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <invSqrt+0x64>)
 800113c:	f7ff fcf8 	bl	8000b30 <__aeabi_fsub>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff fdfd 	bl	8000d44 <__aeabi_fmul>
 800114a:	4603      	mov	r3, r0
 800114c:	613b      	str	r3, [r7, #16]
	return y;
 800114e:	693b      	ldr	r3, [r7, #16]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	5f1f1412 	.word	0x5f1f1412
 800115c:	3f36d312 	.word	0x3f36d312
 8001160:	3fd851ff 	.word	0x3fd851ff

08001164 <MadgwickAHRSupdate>:

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	b0ab      	sub	sp, #172	; 0xac
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001172:	f04f 0100 	mov.w	r1, #0
 8001176:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800117a:	f7ff ff77 	bl	800106c <__aeabi_fcmpeq>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01f      	beq.n	80011c4 <MadgwickAHRSupdate+0x60>
 8001184:	f04f 0100 	mov.w	r1, #0
 8001188:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800118c:	f7ff ff6e 	bl	800106c <__aeabi_fcmpeq>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d016      	beq.n	80011c4 <MadgwickAHRSupdate+0x60>
 8001196:	f04f 0100 	mov.w	r1, #0
 800119a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800119e:	f7ff ff65 	bl	800106c <__aeabi_fcmpeq>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <MadgwickAHRSupdate+0x60>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80011a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f001 f978 	bl	80024b0 <MadgwickAHRSupdateIMU>
		return;
 80011c0:	f001 b966 	b.w	8002490 <MadgwickAHRSupdate+0x132c>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 80011c4:	4980      	ldr	r1, [pc, #512]	; (80013c8 <MadgwickAHRSupdate+0x264>)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fdbc 	bl	8000d44 <__aeabi_fmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 80011d0:	497d      	ldr	r1, [pc, #500]	; (80013c8 <MadgwickAHRSupdate+0x264>)
 80011d2:	68b8      	ldr	r0, [r7, #8]
 80011d4:	f7ff fdb6 	bl	8000d44 <__aeabi_fmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 80011dc:	497a      	ldr	r1, [pc, #488]	; (80013c8 <MadgwickAHRSupdate+0x264>)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fdb0 	bl	8000d44 <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	607b      	str	r3, [r7, #4]

	// Convert accelerometer g to m/sec^2
	ax *= 9.81f;
 80011e8:	4978      	ldr	r1, [pc, #480]	; (80013cc <MadgwickAHRSupdate+0x268>)
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f7ff fdaa 	bl	8000d44 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	603b      	str	r3, [r7, #0]
	ay *= 9.81f;
 80011f4:	4975      	ldr	r1, [pc, #468]	; (80013cc <MadgwickAHRSupdate+0x268>)
 80011f6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80011fa:	f7ff fda3 	bl	8000d44 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	az *= 9.81f;
 8001204:	4971      	ldr	r1, [pc, #452]	; (80013cc <MadgwickAHRSupdate+0x268>)
 8001206:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800120a:	f7ff fd9b 	bl	8000d44 <__aeabi_fmul>
 800120e:	4603      	mov	r3, r0
 8001210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	// Convert magnetometer measurements uT to mT
	mx *= 1000.0f;
 8001214:	496e      	ldr	r1, [pc, #440]	; (80013d0 <MadgwickAHRSupdate+0x26c>)
 8001216:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800121a:	f7ff fd93 	bl	8000d44 <__aeabi_fmul>
 800121e:	4603      	mov	r3, r0
 8001220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	my *= 1000.0f;
 8001224:	496a      	ldr	r1, [pc, #424]	; (80013d0 <MadgwickAHRSupdate+0x26c>)
 8001226:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800122a:	f7ff fd8b 	bl	8000d44 <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	mz *= 1000.0f;
 8001234:	4966      	ldr	r1, [pc, #408]	; (80013d0 <MadgwickAHRSupdate+0x26c>)
 8001236:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800123a:	f7ff fd83 	bl	8000d44 <__aeabi_fmul>
 800123e:	4603      	mov	r3, r0
 8001240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001244:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <MadgwickAHRSupdate+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800124c:	68f9      	ldr	r1, [r7, #12]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd78 	bl	8000d44 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	461c      	mov	r4, r3
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <MadgwickAHRSupdate+0x274>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd70 	bl	8000d44 <__aeabi_fmul>
 8001264:	4603      	mov	r3, r0
 8001266:	4619      	mov	r1, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fc61 	bl	8000b30 <__aeabi_fsub>
 800126e:	4603      	mov	r3, r0
 8001270:	461c      	mov	r4, r3
 8001272:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <MadgwickAHRSupdate+0x278>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fd63 	bl	8000d44 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	4619      	mov	r1, r3
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fc54 	bl	8000b30 <__aeabi_fsub>
 8001288:	4603      	mov	r3, r0
 800128a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd58 	bl	8000d44 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <MadgwickAHRSupdate+0x27c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fd4f 	bl	8000d44 <__aeabi_fmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461c      	mov	r4, r3
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <MadgwickAHRSupdate+0x274>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fd47 	bl	8000d44 <__aeabi_fmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff fc3a 	bl	8000b34 <__addsf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461c      	mov	r4, r3
 80012c4:	4b45      	ldr	r3, [pc, #276]	; (80013dc <MadgwickAHRSupdate+0x278>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd3a 	bl	8000d44 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc2b 	bl	8000b30 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd2f 	bl	8000d44 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <MadgwickAHRSupdate+0x27c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fd26 	bl	8000d44 <__aeabi_fmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461c      	mov	r4, r3
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <MadgwickAHRSupdate+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd1e 	bl	8000d44 <__aeabi_fmul>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fc0f 	bl	8000b30 <__aeabi_fsub>
 8001312:	4603      	mov	r3, r0
 8001314:	461c      	mov	r4, r3
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MadgwickAHRSupdate+0x278>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fd11 	bl	8000d44 <__aeabi_fmul>
 8001322:	4603      	mov	r3, r0
 8001324:	4619      	mov	r1, r3
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff fc04 	bl	8000b34 <__addsf3>
 800132c:	4603      	mov	r3, r0
 800132e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fd06 	bl	8000d44 <__aeabi_fmul>
 8001338:	4603      	mov	r3, r0
 800133a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MadgwickAHRSupdate+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcfd 	bl	8000d44 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	461c      	mov	r4, r3
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MadgwickAHRSupdate+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fcf5 	bl	8000d44 <__aeabi_fmul>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff fbe8 	bl	8000b34 <__addsf3>
 8001364:	4603      	mov	r3, r0
 8001366:	461c      	mov	r4, r3
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MadgwickAHRSupdate+0x274>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fce8 	bl	8000d44 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fbd9 	bl	8000b30 <__aeabi_fsub>
 800137e:	4603      	mov	r3, r0
 8001380:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fcdd 	bl	8000d44 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f7ff fe69 	bl	800106c <__aeabi_fcmpeq>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d021      	beq.n	80013e4 <MadgwickAHRSupdate+0x280>
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013a8:	f7ff fe60 	bl	800106c <__aeabi_fcmpeq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d018      	beq.n	80013e4 <MadgwickAHRSupdate+0x280>
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80013ba:	f7ff fe57 	bl	800106c <__aeabi_fcmpeq>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f040 87ba 	bne.w	800233a <MadgwickAHRSupdate+0x11d6>
 80013c6:	e00d      	b.n	80013e4 <MadgwickAHRSupdate+0x280>
 80013c8:	3c8efa39 	.word	0x3c8efa39
 80013cc:	411cf5c3 	.word	0x411cf5c3
 80013d0:	447a0000 	.word	0x447a0000
 80013d4:	20000284 	.word	0x20000284
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000288 	.word	0x20000288
 80013e0:	20000004 	.word	0x20000004

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f7ff fcac 	bl	8000d44 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80013f4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013f8:	f7ff fca4 	bl	8000d44 <__aeabi_fmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fb97 	bl	8000b34 <__addsf3>
 8001406:	4603      	mov	r3, r0
 8001408:	461c      	mov	r4, r3
 800140a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800140e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001412:	f7ff fc97 	bl	8000d44 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	4619      	mov	r1, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fb8a 	bl	8000b34 <__addsf3>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fe6a 	bl	80010fc <invSqrt>
 8001428:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		ax *= recipNorm;
 800142c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f7ff fc87 	bl	8000d44 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800143a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800143e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001442:	f7ff fc7f 	bl	8000d44 <__aeabi_fmul>
 8001446:	4603      	mov	r3, r0
 8001448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		az *= recipNorm;
 800144c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001450:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001454:	f7ff fc76 	bl	8000d44 <__aeabi_fmul>
 8001458:	4603      	mov	r3, r0
 800145a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800145e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001462:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001466:	f7ff fc6d 	bl	8000d44 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	461c      	mov	r4, r3
 800146e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001472:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001476:	f7ff fc65 	bl	8000d44 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fb58 	bl	8000b34 <__addsf3>
 8001484:	4603      	mov	r3, r0
 8001486:	461c      	mov	r4, r3
 8001488:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800148c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001490:	f7ff fc58 	bl	8000d44 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff fb4b 	bl	8000b34 <__addsf3>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe2b 	bl	80010fc <invSqrt>
 80014a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		mx *= recipNorm;
 80014aa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80014ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80014b2:	f7ff fc47 	bl	8000d44 <__aeabi_fmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		my *= recipNorm;
 80014bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80014c0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80014c4:	f7ff fc3e 	bl	8000d44 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		mz *= recipNorm;
 80014ce:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80014d2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80014d6:	f7ff fc35 	bl	8000d44 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014e0:	4b98      	ldr	r3, [pc, #608]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb24 	bl	8000b34 <__addsf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80014f4:	f7ff fc26 	bl	8000d44 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_2q0my = 2.0f * q0 * my;
 80014fe:	4b91      	ldr	r3, [pc, #580]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb15 	bl	8000b34 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001512:	f7ff fc17 	bl	8000d44 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_2q0mz = 2.0f * q0 * mz;
 800151c:	4b89      	ldr	r3, [pc, #548]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fb06 	bl	8000b34 <__addsf3>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001530:	f7ff fc08 	bl	8000d44 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_2q1mx = 2.0f * q1 * mx;
 800153a:	4b83      	ldr	r3, [pc, #524]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4619      	mov	r1, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff faf7 	bl	8000b34 <__addsf3>
 8001546:	4603      	mov	r3, r0
 8001548:	4619      	mov	r1, r3
 800154a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800154e:	f7ff fbf9 	bl	8000d44 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	67fb      	str	r3, [r7, #124]	; 0x7c
		_2q0 = 2.0f * q0;
 8001556:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fae9 	bl	8000b34 <__addsf3>
 8001562:	4603      	mov	r3, r0
 8001564:	67bb      	str	r3, [r7, #120]	; 0x78
		_2q1 = 2.0f * q1;
 8001566:	4b78      	ldr	r3, [pc, #480]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fae1 	bl	8000b34 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	677b      	str	r3, [r7, #116]	; 0x74
		_2q2 = 2.0f * q2;
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fad9 	bl	8000b34 <__addsf3>
 8001582:	4603      	mov	r3, r0
 8001584:	673b      	str	r3, [r7, #112]	; 0x70
		_2q3 = 2.0f * q3;
 8001586:	4b72      	ldr	r3, [pc, #456]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fad1 	bl	8000b34 <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0q2 = 2.0f * q0 * q2;
 8001596:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fac9 	bl	8000b34 <__addsf3>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f7ff fbc9 	bl	8000d44 <__aeabi_fmul>
 80015b2:	4603      	mov	r3, r0
 80015b4:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q2q3 = 2.0f * q2 * q3;
 80015b6:	4b65      	ldr	r3, [pc, #404]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fab9 	bl	8000b34 <__addsf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f7ff fbb9 	bl	8000d44 <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	667b      	str	r3, [r7, #100]	; 0x64
		q0q0 = q0 * q0;
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbaf 	bl	8000d44 <__aeabi_fmul>
 80015e6:	4603      	mov	r3, r0
 80015e8:	663b      	str	r3, [r7, #96]	; 0x60
		q0q1 = q0 * q1;
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a56      	ldr	r2, [pc, #344]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fba5 	bl	8000d44 <__aeabi_fmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
		q0q2 = q0 * q2;
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fb9b 	bl	8000d44 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
		q0q3 = q0 * q3;
 8001612:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <MadgwickAHRSupdate+0x5e0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb91 	bl	8000d44 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	657b      	str	r3, [r7, #84]	; 0x54
		q1q1 = q1 * q1;
 8001626:	4b48      	ldr	r3, [pc, #288]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a47      	ldr	r2, [pc, #284]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb87 	bl	8000d44 <__aeabi_fmul>
 8001636:	4603      	mov	r3, r0
 8001638:	653b      	str	r3, [r7, #80]	; 0x50
		q1q2 = q1 * q2;
 800163a:	4b43      	ldr	r3, [pc, #268]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a43      	ldr	r2, [pc, #268]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb7d 	bl	8000d44 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	64fb      	str	r3, [r7, #76]	; 0x4c
		q1q3 = q1 * q3;
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <MadgwickAHRSupdate+0x5e4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a3f      	ldr	r2, [pc, #252]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fb73 	bl	8000d44 <__aeabi_fmul>
 800165e:	4603      	mov	r3, r0
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a39      	ldr	r2, [pc, #228]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb69 	bl	8000d44 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
		q2q3 = q2 * q3;
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a35      	ldr	r2, [pc, #212]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb5f 	bl	8000d44 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	643b      	str	r3, [r7, #64]	; 0x40
		q3q3 = q3 * q3;
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a30      	ldr	r2, [pc, #192]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb55 	bl	8000d44 <__aeabi_fmul>
 800169a:	4603      	mov	r3, r0
 800169c:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800169e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016a0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80016a4:	f7ff fb4e 	bl	8000d44 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461c      	mov	r4, r3
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb45 	bl	8000d44 <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fa36 	bl	8000b30 <__aeabi_fsub>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461c      	mov	r4, r3
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb37 	bl	8000d44 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fa2a 	bl	8000b34 <__addsf3>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461c      	mov	r4, r3
 80016e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80016e6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80016ea:	f7ff fb2b 	bl	8000d44 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fa1e 	bl	8000b34 <__addsf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461c      	mov	r4, r3
 80016fc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001700:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001702:	f7ff fb1f 	bl	8000d44 <__aeabi_fmul>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MadgwickAHRSupdate+0x5e8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fb17 	bl	8000d44 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fa0a 	bl	8000b34 <__addsf3>
 8001720:	4603      	mov	r3, r0
 8001722:	461c      	mov	r4, r3
 8001724:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001728:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800172a:	f7ff fb0b 	bl	8000d44 <__aeabi_fmul>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <MadgwickAHRSupdate+0x5ec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	4610      	mov	r0, r2
 800173a:	f7ff fb03 	bl	8000d44 <__aeabi_fmul>
 800173e:	4603      	mov	r3, r0
 8001740:	4619      	mov	r1, r3
 8001742:	e007      	b.n	8001754 <MadgwickAHRSupdate+0x5f0>
 8001744:	20000004 	.word	0x20000004
 8001748:	20000284 	.word	0x20000284
 800174c:	20000008 	.word	0x20000008
 8001750:	20000288 	.word	0x20000288
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff f9ed 	bl	8000b34 <__addsf3>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001760:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001764:	f7ff faee 	bl	8000d44 <__aeabi_fmul>
 8001768:	4603      	mov	r3, r0
 800176a:	4619      	mov	r1, r3
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff f9df 	bl	8000b30 <__aeabi_fsub>
 8001772:	4603      	mov	r3, r0
 8001774:	461c      	mov	r4, r3
 8001776:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001778:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800177c:	f7ff fae2 	bl	8000d44 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff f9d3 	bl	8000b30 <__aeabi_fsub>
 800178a:	4603      	mov	r3, r0
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800178e:	4ba2      	ldr	r3, [pc, #648]	; (8001a18 <MadgwickAHRSupdate+0x8b4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fad4 	bl	8000d44 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	461c      	mov	r4, r3
 80017a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017a2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80017a6:	f7ff facd 	bl	8000d44 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff f9c0 	bl	8000b34 <__addsf3>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	4b98      	ldr	r3, [pc, #608]	; (8001a1c <MadgwickAHRSupdate+0x8b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fabf 	bl	8000d44 <__aeabi_fmul>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff f9b0 	bl	8000b30 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461c      	mov	r4, r3
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <MadgwickAHRSupdate+0x8bc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fab2 	bl	8000d44 <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff f9a5 	bl	8000b34 <__addsf3>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461c      	mov	r4, r3
 80017ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017f0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80017f4:	f7ff faa6 	bl	8000d44 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff f997 	bl	8000b30 <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
 8001804:	461c      	mov	r4, r3
 8001806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001808:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800180c:	f7ff fa9a 	bl	8000d44 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff f98d 	bl	8000b34 <__addsf3>
 800181a:	4603      	mov	r3, r0
 800181c:	461c      	mov	r4, r3
 800181e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001822:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001824:	f7ff fa8e 	bl	8000d44 <__aeabi_fmul>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <MadgwickAHRSupdate+0x8b4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff fa86 	bl	8000d44 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff f979 	bl	8000b34 <__addsf3>
 8001842:	4603      	mov	r3, r0
 8001844:	461c      	mov	r4, r3
 8001846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001848:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800184c:	f7ff fa7a 	bl	8000d44 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	4619      	mov	r1, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff f96b 	bl	8000b30 <__aeabi_fsub>
 800185a:	4603      	mov	r3, r0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
		_2bx = sqrtf(hx * hx + hy * hy);
 800185e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001860:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001862:	f7ff fa6f 	bl	8000d44 <__aeabi_fmul>
 8001866:	4603      	mov	r3, r0
 8001868:	461c      	mov	r4, r3
 800186a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800186c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800186e:	f7ff fa69 	bl	8000d44 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff f95c 	bl	8000b34 <__addsf3>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f009 fd54 	bl	800b32c <sqrtf>
 8001884:	6338      	str	r0, [r7, #48]	; 0x30
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800188a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800188e:	4a64      	ldr	r2, [pc, #400]	; (8001a20 <MadgwickAHRSupdate+0x8bc>)
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa55 	bl	8000d44 <__aeabi_fmul>
 800189a:	4603      	mov	r3, r0
 800189c:	461c      	mov	r4, r3
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <MadgwickAHRSupdate+0x8b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa4c 	bl	8000d44 <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff f93f 	bl	8000b34 <__addsf3>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461c      	mov	r4, r3
 80018ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80018c0:	f7ff fa40 	bl	8000d44 <__aeabi_fmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff f933 	bl	8000b34 <__addsf3>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461c      	mov	r4, r3
 80018d2:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <MadgwickAHRSupdate+0x8b4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fa33 	bl	8000d44 <__aeabi_fmul>
 80018de:	4603      	mov	r3, r0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff f926 	bl	8000b34 <__addsf3>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461c      	mov	r4, r3
 80018ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018ee:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80018f2:	f7ff fa27 	bl	8000d44 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff f918 	bl	8000b30 <__aeabi_fsub>
 8001900:	4603      	mov	r3, r0
 8001902:	461c      	mov	r4, r3
 8001904:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001908:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800190a:	f7ff fa1b 	bl	8000d44 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <MadgwickAHRSupdate+0x8b4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f7ff fa13 	bl	8000d44 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff f906 	bl	8000b34 <__addsf3>
 8001928:	4603      	mov	r3, r0
 800192a:	461c      	mov	r4, r3
 800192c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800192e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001932:	f7ff fa07 	bl	8000d44 <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	4619      	mov	r1, r3
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff f8f8 	bl	8000b30 <__aeabi_fsub>
 8001940:	4603      	mov	r3, r0
 8001942:	461c      	mov	r4, r3
 8001944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001946:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800194a:	f7ff f9fb 	bl	8000d44 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff f8ee 	bl	8000b34 <__addsf3>
 8001958:	4603      	mov	r3, r0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
		_4bx = 2.0f * _2bx;
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	4619      	mov	r1, r3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f8e7 	bl	8000b34 <__addsf3>
 8001966:	4603      	mov	r3, r0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
		_4bz = 2.0f * _2bz;
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8e0 	bl	8000b34 <__addsf3>
 8001974:	4603      	mov	r3, r0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800197a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800197e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001980:	4619      	mov	r1, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8d6 	bl	8000b34 <__addsf3>
 8001988:	4603      	mov	r3, r0
 800198a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8cf 	bl	8000b30 <__aeabi_fsub>
 8001992:	4603      	mov	r3, r0
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f8ca 	bl	8000b30 <__aeabi_fsub>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f9cf 	bl	8000d44 <__aeabi_fmul>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461c      	mov	r4, r3
 80019aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8c0 	bl	8000b34 <__addsf3>
 80019b4:	4603      	mov	r3, r0
 80019b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f8bb 	bl	8000b34 <__addsf3>
 80019be:	4603      	mov	r3, r0
 80019c0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f8b3 	bl	8000b30 <__aeabi_fsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9b8 	bl	8000d44 <__aeabi_fmul>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff f8ab 	bl	8000b34 <__addsf3>
 80019de:	4603      	mov	r3, r0
 80019e0:	461c      	mov	r4, r3
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MadgwickAHRSupdate+0x8bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f9ab 	bl	8000d44 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461d      	mov	r5, r3
 80019f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019f4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80019f8:	f7ff f89a 	bl	8000b30 <__aeabi_fsub>
 80019fc:	4603      	mov	r3, r0
 80019fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f895 	bl	8000b30 <__aeabi_fsub>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f99a 	bl	8000d44 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461e      	mov	r6, r3
 8001a14:	e006      	b.n	8001a24 <MadgwickAHRSupdate+0x8c0>
 8001a16:	bf00      	nop
 8001a18:	20000288 	.word	0x20000288
 8001a1c:	20000284 	.word	0x20000284
 8001a20:	20000008 	.word	0x20000008
 8001a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a28:	f7ff f882 	bl	8000b30 <__aeabi_fsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f987 	bl	8000d44 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f7ff f87a 	bl	8000b34 <__addsf3>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f872 	bl	8000b30 <__aeabi_fsub>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff f977 	bl	8000d44 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff f868 	bl	8000b30 <__aeabi_fsub>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6a:	4a9f      	ldr	r2, [pc, #636]	; (8001ce8 <MadgwickAHRSupdate+0xb84>)
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f967 	bl	8000d44 <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b9c      	ldr	r3, [pc, #624]	; (8001cec <MadgwickAHRSupdate+0xb88>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f95f 	bl	8000d44 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f7ff f852 	bl	8000b34 <__addsf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461d      	mov	r5, r3
 8001a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a98:	f7ff f84a 	bl	8000b30 <__aeabi_fsub>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f94f 	bl	8000d44 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461e      	mov	r6, r3
 8001aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001aac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001aae:	f7ff f841 	bl	8000b34 <__addsf3>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f944 	bl	8000d44 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f7ff f837 	bl	8000b34 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f82f 	bl	8000b30 <__aeabi_fsub>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f7ff f934 	bl	8000d44 <__aeabi_fmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff f827 	bl	8000b34 <__addsf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461c      	mov	r4, r3
 8001aea:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <MadgwickAHRSupdate+0xb8c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f927 	bl	8000d44 <__aeabi_fmul>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461d      	mov	r5, r3
 8001afa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001afc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001afe:	f7ff f819 	bl	8000b34 <__addsf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f91c 	bl	8000d44 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461e      	mov	r6, r3
 8001b10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b12:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001b16:	f7ff f80b 	bl	8000b30 <__aeabi_fsub>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f806 	bl	8000b30 <__aeabi_fsub>
 8001b24:	4603      	mov	r3, r0
 8001b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f90b 	bl	8000d44 <__aeabi_fmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7fe fffe 	bl	8000b34 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fff6 	bl	8000b30 <__aeabi_fsub>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f7ff f8fb 	bl	8000d44 <__aeabi_fmul>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7fe ffee 	bl	8000b34 <__addsf3>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	623b      	str	r3, [r7, #32]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe ffe7 	bl	8000b34 <__addsf3>
 8001b66:	4603      	mov	r3, r0
 8001b68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe ffe0 	bl	8000b30 <__aeabi_fsub>
 8001b70:	4603      	mov	r3, r0
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe ffdb 	bl	8000b30 <__aeabi_fsub>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8e0 	bl	8000d44 <__aeabi_fmul>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461c      	mov	r4, r3
 8001b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ffd1 	bl	8000b34 <__addsf3>
 8001b92:	4603      	mov	r3, r0
 8001b94:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ffcc 	bl	8000b34 <__addsf3>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ffc4 	bl	8000b30 <__aeabi_fsub>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f8c9 	bl	8000d44 <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7fe ffbc 	bl	8000b34 <__addsf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <MadgwickAHRSupdate+0xb88>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8bb 	bl	8000d44 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ffac 	bl	8000b34 <__addsf3>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001be4:	f7fe ffa4 	bl	8000b30 <__aeabi_fsub>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461e      	mov	r6, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe ff9f 	bl	8000b34 <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f7fe ff98 	bl	8000b30 <__aeabi_fsub>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ff92 	bl	8000b30 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4628      	mov	r0, r5
 8001c12:	f7ff f897 	bl	8000d44 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7fe ff88 	bl	8000b30 <__aeabi_fsub>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461c      	mov	r4, r3
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <MadgwickAHRSupdate+0xb84>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f88a 	bl	8000d44 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461d      	mov	r5, r3
 8001c34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c36:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c3a:	f7fe ff79 	bl	8000b30 <__aeabi_fsub>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe ff74 	bl	8000b30 <__aeabi_fsub>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f879 	bl	8000d44 <__aeabi_fmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461e      	mov	r6, r3
 8001c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c5a:	f7fe ff69 	bl	8000b30 <__aeabi_fsub>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f86e 	bl	8000d44 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f7fe ff61 	bl	8000b34 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ff59 	bl	8000b30 <__aeabi_fsub>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4628      	mov	r0, r5
 8001c84:	f7ff f85e 	bl	8000d44 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7fe ff51 	bl	8000b34 <__addsf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461c      	mov	r4, r3
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MadgwickAHRSupdate+0xb8c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f851 	bl	8000d44 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MadgwickAHRSupdate+0xb90>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f849 	bl	8000d44 <__aeabi_fmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f7fe ff3c 	bl	8000b34 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cc4:	f7fe ff34 	bl	8000b30 <__aeabi_fsub>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f839 	bl	8000d44 <__aeabi_fmul>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461e      	mov	r6, r3
 8001cd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001cda:	f7fe ff2b 	bl	8000b34 <__addsf3>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	e008      	b.n	8001cf8 <MadgwickAHRSupdate+0xb94>
 8001ce6:	bf00      	nop
 8001ce8:	20000288 	.word	0x20000288
 8001cec:	20000284 	.word	0x20000284
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	f7ff f824 	bl	8000d44 <__aeabi_fmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4630      	mov	r0, r6
 8001d02:	f7fe ff17 	bl	8000b34 <__addsf3>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe ff0f 	bl	8000b30 <__aeabi_fsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4628      	mov	r0, r5
 8001d18:	f7ff f814 	bl	8000d44 <__aeabi_fmul>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7fe ff07 	bl	8000b34 <__addsf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461c      	mov	r4, r3
 8001d2a:	4b9f      	ldr	r3, [pc, #636]	; (8001fa8 <MadgwickAHRSupdate+0xe44>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f807 	bl	8000d44 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461d      	mov	r5, r3
 8001d3a:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <MadgwickAHRSupdate+0xe48>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ffff 	bl	8000d44 <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f7fe fef0 	bl	8000b30 <__aeabi_fsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461d      	mov	r5, r3
 8001d54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d58:	f7fe feec 	bl	8000b34 <__addsf3>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe ffef 	bl	8000d44 <__aeabi_fmul>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461e      	mov	r6, r3
 8001d6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d6c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001d70:	f7fe fede 	bl	8000b30 <__aeabi_fsub>
 8001d74:	4603      	mov	r3, r0
 8001d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fed9 	bl	8000b30 <__aeabi_fsub>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ffde 	bl	8000d44 <__aeabi_fmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f7fe fed1 	bl	8000b34 <__addsf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fec9 	bl	8000b30 <__aeabi_fsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4628      	mov	r0, r5
 8001da4:	f7fe ffce 	bl	8000d44 <__aeabi_fmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4619      	mov	r1, r3
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7fe fec1 	bl	8000b34 <__addsf3>
 8001db2:	4603      	mov	r3, r0
 8001db4:	61fb      	str	r3, [r7, #28]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe feb7 	bl	8000b34 <__addsf3>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe feb0 	bl	8000b30 <__aeabi_fsub>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe feab 	bl	8000b30 <__aeabi_fsub>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7fe ffb0 	bl	8000d44 <__aeabi_fmul>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461c      	mov	r4, r3
 8001de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fea1 	bl	8000b34 <__addsf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fe9c 	bl	8000b34 <__addsf3>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fe94 	bl	8000b30 <__aeabi_fsub>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe ff99 	bl	8000d44 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4619      	mov	r1, r3
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7fe fe8c 	bl	8000b34 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461c      	mov	r4, r3
 8001e20:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <MadgwickAHRSupdate+0xe4c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ff8b 	bl	8000d44 <__aeabi_fmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461d      	mov	r5, r3
 8001e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e34:	4619      	mov	r1, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe7c 	bl	8000b34 <__addsf3>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e44:	f7fe fe74 	bl	8000b30 <__aeabi_fsub>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461e      	mov	r6, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fe6f 	bl	8000b34 <__addsf3>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f7fe fe68 	bl	8000b30 <__aeabi_fsub>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe62 	bl	8000b30 <__aeabi_fsub>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4628      	mov	r0, r5
 8001e72:	f7fe ff67 	bl	8000d44 <__aeabi_fmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7fe fe58 	bl	8000b30 <__aeabi_fsub>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461c      	mov	r4, r3
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e8a:	4a49      	ldr	r2, [pc, #292]	; (8001fb0 <MadgwickAHRSupdate+0xe4c>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff57 	bl	8000d44 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461d      	mov	r5, r3
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <MadgwickAHRSupdate+0xe50>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff4f 	bl	8000d44 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f7fe fe40 	bl	8000b30 <__aeabi_fsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eb6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001eba:	f7fe fe39 	bl	8000b30 <__aeabi_fsub>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fe34 	bl	8000b30 <__aeabi_fsub>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff39 	bl	8000d44 <__aeabi_fmul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461e      	mov	r6, r3
 8001ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ed8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eda:	f7fe fe29 	bl	8000b30 <__aeabi_fsub>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff2e 	bl	8000d44 <__aeabi_fmul>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7fe fe21 	bl	8000b34 <__addsf3>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fe19 	bl	8000b30 <__aeabi_fsub>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7fe ff1e 	bl	8000d44 <__aeabi_fmul>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7fe fe11 	bl	8000b34 <__addsf3>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461c      	mov	r4, r3
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <MadgwickAHRSupdate+0xe48>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ff11 	bl	8000d44 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461d      	mov	r5, r3
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <MadgwickAHRSupdate+0xe44>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ff09 	bl	8000d44 <__aeabi_fmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4619      	mov	r1, r3
 8001f36:	4628      	mov	r0, r5
 8001f38:	f7fe fdfc 	bl	8000b34 <__addsf3>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461d      	mov	r5, r3
 8001f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f44:	f7fe fdf4 	bl	8000b30 <__aeabi_fsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fef9 	bl	8000d44 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461e      	mov	r6, r3
 8001f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f5a:	f7fe fdeb 	bl	8000b34 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe feee 	bl	8000d44 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7fe fde1 	bl	8000b34 <__addsf3>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fdd9 	bl	8000b30 <__aeabi_fsub>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4628      	mov	r0, r5
 8001f84:	f7fe fede 	bl	8000d44 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7fe fdd1 	bl	8000b34 <__addsf3>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461c      	mov	r4, r3
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MadgwickAHRSupdate+0xe50>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fed1 	bl	8000d44 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	e007      	b.n	8001fb8 <MadgwickAHRSupdate+0xe54>
 8001fa8:	20000288 	.word	0x20000288
 8001fac:	20000284 	.word	0x20000284
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	4b9f      	ldr	r3, [pc, #636]	; (8002238 <MadgwickAHRSupdate+0x10d4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fec0 	bl	8000d44 <__aeabi_fmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f7fe fdb1 	bl	8000b30 <__aeabi_fsub>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001fd4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001fd6:	f7fe fdad 	bl	8000b34 <__addsf3>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe feb0 	bl	8000d44 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461e      	mov	r6, r3
 8001fe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fea:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001fee:	f7fe fd9f 	bl	8000b30 <__aeabi_fsub>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fd9a 	bl	8000b30 <__aeabi_fsub>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fe9f 	bl	8000d44 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	4619      	mov	r1, r3
 800200a:	4630      	mov	r0, r6
 800200c:	f7fe fd92 	bl	8000b34 <__addsf3>
 8002010:	4603      	mov	r3, r0
 8002012:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fd8a 	bl	8000b30 <__aeabi_fsub>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	4628      	mov	r0, r5
 8002022:	f7fe fe8f 	bl	8000d44 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	4620      	mov	r0, r4
 800202c:	f7fe fd82 	bl	8000b34 <__addsf3>
 8002030:	4603      	mov	r3, r0
 8002032:	61bb      	str	r3, [r7, #24]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002036:	4619      	mov	r1, r3
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fd7b 	bl	8000b34 <__addsf3>
 800203e:	4603      	mov	r3, r0
 8002040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fd74 	bl	8000b30 <__aeabi_fsub>
 8002048:	4603      	mov	r3, r0
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd6f 	bl	8000b30 <__aeabi_fsub>
 8002052:	4603      	mov	r3, r0
 8002054:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fe74 	bl	8000d44 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	461c      	mov	r4, r3
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	4619      	mov	r1, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fd65 	bl	8000b34 <__addsf3>
 800206a:	4603      	mov	r3, r0
 800206c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fd60 	bl	8000b34 <__addsf3>
 8002074:	4603      	mov	r3, r0
 8002076:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fd58 	bl	8000b30 <__aeabi_fsub>
 8002080:	4603      	mov	r3, r0
 8002082:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fe5d 	bl	8000d44 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	4620      	mov	r0, r4
 8002090:	f7fe fd50 	bl	8000b34 <__addsf3>
 8002094:	4603      	mov	r3, r0
 8002096:	461c      	mov	r4, r3
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800209e:	4a67      	ldr	r2, [pc, #412]	; (800223c <MadgwickAHRSupdate+0x10d8>)
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fe4d 	bl	8000d44 <__aeabi_fmul>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461d      	mov	r5, r3
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <MadgwickAHRSupdate+0x10dc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fe45 	bl	8000d44 <__aeabi_fmul>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4628      	mov	r0, r5
 80020c0:	f7fe fd38 	bl	8000b34 <__addsf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461d      	mov	r5, r3
 80020c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020ca:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80020ce:	f7fe fd2f 	bl	8000b30 <__aeabi_fsub>
 80020d2:	4603      	mov	r3, r0
 80020d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fd2a 	bl	8000b30 <__aeabi_fsub>
 80020dc:	4603      	mov	r3, r0
 80020de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fe2f 	bl	8000d44 <__aeabi_fmul>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461e      	mov	r6, r3
 80020ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80020ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020ee:	f7fe fd1f 	bl	8000b30 <__aeabi_fsub>
 80020f2:	4603      	mov	r3, r0
 80020f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fe24 	bl	8000d44 <__aeabi_fmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	4630      	mov	r0, r6
 8002102:	f7fe fd17 	bl	8000b34 <__addsf3>
 8002106:	4603      	mov	r3, r0
 8002108:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fd0f 	bl	8000b30 <__aeabi_fsub>
 8002112:	4603      	mov	r3, r0
 8002114:	4619      	mov	r1, r3
 8002116:	4628      	mov	r0, r5
 8002118:	f7fe fe14 	bl	8000d44 <__aeabi_fmul>
 800211c:	4603      	mov	r3, r0
 800211e:	4619      	mov	r1, r3
 8002120:	4620      	mov	r0, r4
 8002122:	f7fe fd07 	bl	8000b34 <__addsf3>
 8002126:	4603      	mov	r3, r0
 8002128:	461c      	mov	r4, r3
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002130:	4a44      	ldr	r2, [pc, #272]	; (8002244 <MadgwickAHRSupdate+0x10e0>)
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fe04 	bl	8000d44 <__aeabi_fmul>
 800213c:	4603      	mov	r3, r0
 800213e:	461d      	mov	r5, r3
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <MadgwickAHRSupdate+0x10d4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fdfc 	bl	8000d44 <__aeabi_fmul>
 800214c:	4603      	mov	r3, r0
 800214e:	4619      	mov	r1, r3
 8002150:	4628      	mov	r0, r5
 8002152:	f7fe fcef 	bl	8000b34 <__addsf3>
 8002156:	4603      	mov	r3, r0
 8002158:	461d      	mov	r5, r3
 800215a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800215c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800215e:	f7fe fce7 	bl	8000b30 <__aeabi_fsub>
 8002162:	4603      	mov	r3, r0
 8002164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fdec 	bl	8000d44 <__aeabi_fmul>
 800216c:	4603      	mov	r3, r0
 800216e:	461e      	mov	r6, r3
 8002170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002172:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002174:	f7fe fcde 	bl	8000b34 <__addsf3>
 8002178:	4603      	mov	r3, r0
 800217a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fde1 	bl	8000d44 <__aeabi_fmul>
 8002182:	4603      	mov	r3, r0
 8002184:	4619      	mov	r1, r3
 8002186:	4630      	mov	r0, r6
 8002188:	f7fe fcd4 	bl	8000b34 <__addsf3>
 800218c:	4603      	mov	r3, r0
 800218e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fccc 	bl	8000b30 <__aeabi_fsub>
 8002198:	4603      	mov	r3, r0
 800219a:	4619      	mov	r1, r3
 800219c:	4628      	mov	r0, r5
 800219e:	f7fe fdd1 	bl	8000d44 <__aeabi_fmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7fe fcc4 	bl	8000b34 <__addsf3>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461c      	mov	r4, r3
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <MadgwickAHRSupdate+0x10dc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fdc4 	bl	8000d44 <__aeabi_fmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	461d      	mov	r5, r3
 80021c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021c4:	f7fe fcb6 	bl	8000b34 <__addsf3>
 80021c8:	4603      	mov	r3, r0
 80021ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fdb9 	bl	8000d44 <__aeabi_fmul>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461e      	mov	r6, r3
 80021d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80021d8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80021dc:	f7fe fca8 	bl	8000b30 <__aeabi_fsub>
 80021e0:	4603      	mov	r3, r0
 80021e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fca3 	bl	8000b30 <__aeabi_fsub>
 80021ea:	4603      	mov	r3, r0
 80021ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fda8 	bl	8000d44 <__aeabi_fmul>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4630      	mov	r0, r6
 80021fa:	f7fe fc9b 	bl	8000b34 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fc93 	bl	8000b30 <__aeabi_fsub>
 800220a:	4603      	mov	r3, r0
 800220c:	4619      	mov	r1, r3
 800220e:	4628      	mov	r0, r5
 8002210:	f7fe fd98 	bl	8000d44 <__aeabi_fmul>
 8002214:	4603      	mov	r3, r0
 8002216:	4619      	mov	r1, r3
 8002218:	4620      	mov	r0, r4
 800221a:	f7fe fc8b 	bl	8000b34 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002222:	6a39      	ldr	r1, [r7, #32]
 8002224:	6a38      	ldr	r0, [r7, #32]
 8002226:	f7fe fd8d 	bl	8000d44 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	461c      	mov	r4, r3
 800222e:	69f9      	ldr	r1, [r7, #28]
 8002230:	69f8      	ldr	r0, [r7, #28]
 8002232:	f7fe fd87 	bl	8000d44 <__aeabi_fmul>
 8002236:	e007      	b.n	8002248 <MadgwickAHRSupdate+0x10e4>
 8002238:	20000008 	.word	0x20000008
 800223c:	20000288 	.word	0x20000288
 8002240:	20000284 	.word	0x20000284
 8002244:	20000004 	.word	0x20000004
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	4620      	mov	r0, r4
 800224e:	f7fe fc71 	bl	8000b34 <__addsf3>
 8002252:	4603      	mov	r3, r0
 8002254:	461c      	mov	r4, r3
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	69b8      	ldr	r0, [r7, #24]
 800225a:	f7fe fd73 	bl	8000d44 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f7fe fc66 	bl	8000b34 <__addsf3>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	6979      	ldr	r1, [r7, #20]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7fe fd68 	bl	8000d44 <__aeabi_fmul>
 8002274:	4603      	mov	r3, r0
 8002276:	4619      	mov	r1, r3
 8002278:	4620      	mov	r0, r4
 800227a:	f7fe fc5b 	bl	8000b34 <__addsf3>
 800227e:	4603      	mov	r3, r0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe ff3b 	bl	80010fc <invSqrt>
 8002286:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		s0 *= recipNorm;
 800228a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800228e:	6a38      	ldr	r0, [r7, #32]
 8002290:	f7fe fd58 	bl	8000d44 <__aeabi_fmul>
 8002294:	4603      	mov	r3, r0
 8002296:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002298:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800229c:	69f8      	ldr	r0, [r7, #28]
 800229e:	f7fe fd51 	bl	8000d44 <__aeabi_fmul>
 80022a2:	4603      	mov	r3, r0
 80022a4:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 80022a6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022aa:	69b8      	ldr	r0, [r7, #24]
 80022ac:	f7fe fd4a 	bl	8000d44 <__aeabi_fmul>
 80022b0:	4603      	mov	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 80022b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f7fe fd43 	bl	8000d44 <__aeabi_fmul>
 80022be:	4603      	mov	r3, r0
 80022c0:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <MadgwickAHRSupdate+0x1334>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a39      	ldr	r1, [r7, #32]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fd3b 	bl	8000d44 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4619      	mov	r1, r3
 80022d2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80022d6:	f7fe fc2b 	bl	8000b30 <__aeabi_fsub>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <MadgwickAHRSupdate+0x1334>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69f9      	ldr	r1, [r7, #28]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd2c 	bl	8000d44 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4619      	mov	r1, r3
 80022f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022f4:	f7fe fc1c 	bl	8000b30 <__aeabi_fsub>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 80022fe:	4b66      	ldr	r3, [pc, #408]	; (8002498 <MadgwickAHRSupdate+0x1334>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd1d 	bl	8000d44 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002312:	f7fe fc0d 	bl	8000b30 <__aeabi_fsub>
 8002316:	4603      	mov	r3, r0
 8002318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 800231c:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <MadgwickAHRSupdate+0x1334>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6979      	ldr	r1, [r7, #20]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fd0e 	bl	8000d44 <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	4619      	mov	r1, r3
 800232c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002330:	f7fe fbfe 	bl	8000b30 <__aeabi_fsub>
 8002334:	4603      	mov	r3, r0
 8002336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800233a:	4958      	ldr	r1, [pc, #352]	; (800249c <MadgwickAHRSupdate+0x1338>)
 800233c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002340:	f7fe fd00 	bl	8000d44 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f7fe fbf0 	bl	8000b34 <__addsf3>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 800235a:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 800235c:	494f      	ldr	r1, [pc, #316]	; (800249c <MadgwickAHRSupdate+0x1338>)
 800235e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002362:	f7fe fcef 	bl	8000d44 <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b4e      	ldr	r3, [pc, #312]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f7fe fbdf 	bl	8000b34 <__addsf3>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 800237c:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 800237e:	4947      	ldr	r1, [pc, #284]	; (800249c <MadgwickAHRSupdate+0x1338>)
 8002380:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002384:	f7fe fcde 	bl	8000d44 <__aeabi_fmul>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f7fe fbce 	bl	8000b34 <__addsf3>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 800239e:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 80023a0:	493e      	ldr	r1, [pc, #248]	; (800249c <MadgwickAHRSupdate+0x1338>)
 80023a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80023a6:	f7fe fccd 	bl	8000d44 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7fe fbbd 	bl	8000b34 <__addsf3>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 80023c0:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fcb9 	bl	8000d44 <__aeabi_fmul>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461c      	mov	r4, r3
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a32      	ldr	r2, [pc, #200]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fcaf 	bl	8000d44 <__aeabi_fmul>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7fe fba2 	bl	8000b34 <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fca0 	bl	8000d44 <__aeabi_fmul>
 8002404:	4603      	mov	r3, r0
 8002406:	4619      	mov	r1, r3
 8002408:	4620      	mov	r0, r4
 800240a:	f7fe fb93 	bl	8000b34 <__addsf3>
 800240e:	4603      	mov	r3, r0
 8002410:	461c      	mov	r4, r3
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fc91 	bl	8000d44 <__aeabi_fmul>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	4620      	mov	r0, r4
 8002428:	f7fe fb84 	bl	8000b34 <__addsf3>
 800242c:	4603      	mov	r3, r0
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe64 	bl	80010fc <invSqrt>
 8002434:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	q0 *= recipNorm;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fc7f 	bl	8000d44 <__aeabi_fmul>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MadgwickAHRSupdate+0x133c>)
 800244c:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc74 	bl	8000d44 <__aeabi_fmul>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MadgwickAHRSupdate+0x1340>)
 8002462:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fc69 	bl	8000d44 <__aeabi_fmul>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MadgwickAHRSupdate+0x1344>)
 8002478:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc5e 	bl	8000d44 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <MadgwickAHRSupdate+0x1348>)
 800248e:	601a      	str	r2, [r3, #0]
}
 8002490:	37a4      	adds	r7, #164	; 0xa4
 8002492:	46bd      	mov	sp, r7
 8002494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000
 800249c:	3c23d70a 	.word	0x3c23d70a
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000284 	.word	0x20000284
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000288 	.word	0x20000288

080024b0 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b09b      	sub	sp, #108	; 0x6c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024be:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc3b 	bl	8000d44 <__aeabi_fmul>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461c      	mov	r4, r3
 80024d2:	4b99      	ldr	r3, [pc, #612]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fc33 	bl	8000d44 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7fe fb24 	bl	8000b30 <__aeabi_fsub>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461c      	mov	r4, r3
 80024ec:	4b93      	ldr	r3, [pc, #588]	; (800273c <MadgwickAHRSupdateIMU+0x28c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fc26 	bl	8000d44 <__aeabi_fmul>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4619      	mov	r1, r3
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7fe fb17 	bl	8000b30 <__aeabi_fsub>
 8002502:	4603      	mov	r3, r0
 8002504:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fc1b 	bl	8000d44 <__aeabi_fmul>
 800250e:	4603      	mov	r3, r0
 8002510:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <MadgwickAHRSupdateIMU+0x290>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fc13 	bl	8000d44 <__aeabi_fmul>
 800251e:	4603      	mov	r3, r0
 8002520:	461c      	mov	r4, r3
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fc0b 	bl	8000d44 <__aeabi_fmul>
 800252e:	4603      	mov	r3, r0
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7fe fafe 	bl	8000b34 <__addsf3>
 8002538:	4603      	mov	r3, r0
 800253a:	461c      	mov	r4, r3
 800253c:	4b7f      	ldr	r3, [pc, #508]	; (800273c <MadgwickAHRSupdateIMU+0x28c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fbfe 	bl	8000d44 <__aeabi_fmul>
 8002548:	4603      	mov	r3, r0
 800254a:	4619      	mov	r1, r3
 800254c:	4620      	mov	r0, r4
 800254e:	f7fe faef 	bl	8000b30 <__aeabi_fsub>
 8002552:	4603      	mov	r3, r0
 8002554:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fbf3 	bl	8000d44 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002562:	4b77      	ldr	r3, [pc, #476]	; (8002740 <MadgwickAHRSupdateIMU+0x290>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fbeb 	bl	8000d44 <__aeabi_fmul>
 800256e:	4603      	mov	r3, r0
 8002570:	461c      	mov	r4, r3
 8002572:	4b70      	ldr	r3, [pc, #448]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fbe3 	bl	8000d44 <__aeabi_fmul>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	4620      	mov	r0, r4
 8002584:	f7fe fad4 	bl	8000b30 <__aeabi_fsub>
 8002588:	4603      	mov	r3, r0
 800258a:	461c      	mov	r4, r3
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <MadgwickAHRSupdateIMU+0x28c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fbd6 	bl	8000d44 <__aeabi_fmul>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	4620      	mov	r0, r4
 800259e:	f7fe fac9 	bl	8000b34 <__addsf3>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fbcb 	bl	8000d44 <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <MadgwickAHRSupdateIMU+0x290>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fbc3 	bl	8000d44 <__aeabi_fmul>
 80025be:	4603      	mov	r3, r0
 80025c0:	461c      	mov	r4, r3
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fbbb 	bl	8000d44 <__aeabi_fmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7fe faae 	bl	8000b34 <__addsf3>
 80025d8:	4603      	mov	r3, r0
 80025da:	461c      	mov	r4, r3
 80025dc:	4b56      	ldr	r3, [pc, #344]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fbae 	bl	8000d44 <__aeabi_fmul>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7fe fa9f 	bl	8000b30 <__aeabi_fsub>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fba3 	bl	8000d44 <__aeabi_fmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f7fe fd30 	bl	800106c <__aeabi_fcmpeq>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <MadgwickAHRSupdateIMU+0x184>
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002618:	f7fe fd28 	bl	800106c <__aeabi_fcmpeq>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <MadgwickAHRSupdateIMU+0x184>
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002628:	f7fe fd20 	bl	800106c <__aeabi_fcmpeq>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 823c 	bne.w	8002aac <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f7fe fb84 	bl	8000d44 <__aeabi_fmul>
 800263c:	4603      	mov	r3, r0
 800263e:	461c      	mov	r4, r3
 8002640:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002642:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002644:	f7fe fb7e 	bl	8000d44 <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f7fe fa71 	bl	8000b34 <__addsf3>
 8002652:	4603      	mov	r3, r0
 8002654:	461c      	mov	r4, r3
 8002656:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002658:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800265a:	f7fe fb73 	bl	8000d44 <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	4619      	mov	r1, r3
 8002662:	4620      	mov	r0, r4
 8002664:	f7fe fa66 	bl	8000b34 <__addsf3>
 8002668:	4603      	mov	r3, r0
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd46 	bl	80010fc <invSqrt>
 8002670:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 8002672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	f7fe fb65 	bl	8000d44 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800267e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002680:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002682:	f7fe fb5f 	bl	8000d44 <__aeabi_fmul>
 8002686:	4603      	mov	r3, r0
 8002688:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 800268a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800268c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800268e:	f7fe fb59 	bl	8000d44 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <MadgwickAHRSupdateIMU+0x290>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fa49 	bl	8000b34 <__addsf3>
 80026a2:	4603      	mov	r3, r0
 80026a4:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa41 	bl	8000b34 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fa39 	bl	8000b34 <__addsf3>
 80026c2:	4603      	mov	r3, r0
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <MadgwickAHRSupdateIMU+0x28c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fa31 	bl	8000b34 <__addsf3>
 80026d2:	4603      	mov	r3, r0
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MadgwickAHRSupdateIMU+0x290>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fb30 	bl	8000d44 <__aeabi_fmul>
 80026e4:	4603      	mov	r3, r0
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fb27 	bl	8000d44 <__aeabi_fmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fb1e 	bl	8000d44 <__aeabi_fmul>
 8002708:	4603      	mov	r3, r0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MadgwickAHRSupdateIMU+0x284>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fb15 	bl	8000d44 <__aeabi_fmul>
 800271a:	4603      	mov	r3, r0
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <MadgwickAHRSupdateIMU+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb0c 	bl	8000d44 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
 8002730:	e008      	b.n	8002744 <MadgwickAHRSupdateIMU+0x294>
 8002732:	bf00      	nop
 8002734:	20000284 	.word	0x20000284
 8002738:	20000008 	.word	0x20000008
 800273c:	20000288 	.word	0x20000288
 8002740:	20000004 	.word	0x20000004
		q0q0 = q0 * q0;
 8002744:	4b9a      	ldr	r3, [pc, #616]	; (80029b0 <MadgwickAHRSupdateIMU+0x500>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a99      	ldr	r2, [pc, #612]	; (80029b0 <MadgwickAHRSupdateIMU+0x500>)
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe faf8 	bl	8000d44 <__aeabi_fmul>
 8002754:	4603      	mov	r3, r0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <MadgwickAHRSupdateIMU+0x504>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a95      	ldr	r2, [pc, #596]	; (80029b4 <MadgwickAHRSupdateIMU+0x504>)
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe faee 	bl	8000d44 <__aeabi_fmul>
 8002768:	4603      	mov	r3, r0
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <MadgwickAHRSupdateIMU+0x508>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a91      	ldr	r2, [pc, #580]	; (80029b8 <MadgwickAHRSupdateIMU+0x508>)
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fae4 	bl	8000d44 <__aeabi_fmul>
 800277c:	4603      	mov	r3, r0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8002780:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <MadgwickAHRSupdateIMU+0x50c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a8d      	ldr	r2, [pc, #564]	; (80029bc <MadgwickAHRSupdateIMU+0x50c>)
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fada 	bl	8000d44 <__aeabi_fmul>
 8002790:	4603      	mov	r3, r0
 8002792:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002796:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002798:	f7fe fad4 	bl	8000d44 <__aeabi_fmul>
 800279c:	4603      	mov	r3, r0
 800279e:	461c      	mov	r4, r3
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80027a4:	f7fe face 	bl	8000d44 <__aeabi_fmul>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4619      	mov	r1, r3
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7fe f9c1 	bl	8000b34 <__addsf3>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461c      	mov	r4, r3
 80027b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027ba:	f7fe fac3 	bl	8000d44 <__aeabi_fmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	4619      	mov	r1, r3
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fe f9b6 	bl	8000b34 <__addsf3>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461c      	mov	r4, r3
 80027cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80027ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027d0:	f7fe fab8 	bl	8000d44 <__aeabi_fmul>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4620      	mov	r0, r4
 80027da:	f7fe f9a9 	bl	8000b30 <__aeabi_fsub>
 80027de:	4603      	mov	r3, r0
 80027e0:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80027e2:	6a39      	ldr	r1, [r7, #32]
 80027e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027e6:	f7fe faad 	bl	8000d44 <__aeabi_fmul>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461c      	mov	r4, r3
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027f2:	f7fe faa7 	bl	8000d44 <__aeabi_fmul>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4619      	mov	r1, r3
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7fe f998 	bl	8000b30 <__aeabi_fsub>
 8002800:	4603      	mov	r3, r0
 8002802:	461c      	mov	r4, r3
 8002804:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800280a:	f7fe fa9b 	bl	8000d44 <__aeabi_fmul>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <MadgwickAHRSupdateIMU+0x504>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7fe fa93 	bl	8000d44 <__aeabi_fmul>
 800281e:	4603      	mov	r3, r0
 8002820:	4619      	mov	r1, r3
 8002822:	4620      	mov	r0, r4
 8002824:	f7fe f986 	bl	8000b34 <__addsf3>
 8002828:	4603      	mov	r3, r0
 800282a:	461c      	mov	r4, r3
 800282c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800282e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002830:	f7fe fa88 	bl	8000d44 <__aeabi_fmul>
 8002834:	4603      	mov	r3, r0
 8002836:	4619      	mov	r1, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f7fe f979 	bl	8000b30 <__aeabi_fsub>
 800283e:	4603      	mov	r3, r0
 8002840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe f974 	bl	8000b30 <__aeabi_fsub>
 8002848:	4603      	mov	r3, r0
 800284a:	461c      	mov	r4, r3
 800284c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002850:	f7fe fa78 	bl	8000d44 <__aeabi_fmul>
 8002854:	4603      	mov	r3, r0
 8002856:	4619      	mov	r1, r3
 8002858:	4620      	mov	r0, r4
 800285a:	f7fe f96b 	bl	8000b34 <__addsf3>
 800285e:	4603      	mov	r3, r0
 8002860:	461c      	mov	r4, r3
 8002862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002866:	f7fe fa6d 	bl	8000d44 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	4619      	mov	r1, r3
 800286e:	4620      	mov	r0, r4
 8002870:	f7fe f960 	bl	8000b34 <__addsf3>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800287a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800287c:	f7fe fa62 	bl	8000d44 <__aeabi_fmul>
 8002880:	4603      	mov	r3, r0
 8002882:	4619      	mov	r1, r3
 8002884:	4620      	mov	r0, r4
 8002886:	f7fe f955 	bl	8000b34 <__addsf3>
 800288a:	4603      	mov	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800288e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002894:	f7fe fa56 	bl	8000d44 <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <MadgwickAHRSupdateIMU+0x508>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7fe fa4e 	bl	8000d44 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461c      	mov	r4, r3
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028b0:	f7fe fa48 	bl	8000d44 <__aeabi_fmul>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe f93b 	bl	8000b34 <__addsf3>
 80028be:	4603      	mov	r3, r0
 80028c0:	461c      	mov	r4, r3
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028c6:	f7fe fa3d 	bl	8000d44 <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4619      	mov	r1, r3
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7fe f930 	bl	8000b34 <__addsf3>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461c      	mov	r4, r3
 80028d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80028da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028dc:	f7fe fa32 	bl	8000d44 <__aeabi_fmul>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7fe f923 	bl	8000b30 <__aeabi_fsub>
 80028ea:	4603      	mov	r3, r0
 80028ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe f91e 	bl	8000b30 <__aeabi_fsub>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461c      	mov	r4, r3
 80028f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fc:	f7fe fa22 	bl	8000d44 <__aeabi_fmul>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f7fe f915 	bl	8000b34 <__addsf3>
 800290a:	4603      	mov	r3, r0
 800290c:	461c      	mov	r4, r3
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002912:	f7fe fa17 	bl	8000d44 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f7fe f90a 	bl	8000b34 <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002928:	f7fe fa0c 	bl	8000d44 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	4620      	mov	r0, r4
 8002932:	f7fe f8ff 	bl	8000b34 <__addsf3>
 8002936:	4603      	mov	r3, r0
 8002938:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800293a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800293e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002940:	f7fe fa00 	bl	8000d44 <__aeabi_fmul>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <MadgwickAHRSupdateIMU+0x50c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe f9f8 	bl	8000d44 <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	461c      	mov	r4, r3
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800295c:	f7fe f9f2 	bl	8000d44 <__aeabi_fmul>
 8002960:	4603      	mov	r3, r0
 8002962:	4619      	mov	r1, r3
 8002964:	4620      	mov	r0, r4
 8002966:	f7fe f8e3 	bl	8000b30 <__aeabi_fsub>
 800296a:	4603      	mov	r3, r0
 800296c:	461c      	mov	r4, r3
 800296e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002974:	f7fe f9e6 	bl	8000d44 <__aeabi_fmul>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <MadgwickAHRSupdateIMU+0x50c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f7fe f9de 	bl	8000d44 <__aeabi_fmul>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f7fe f8d1 	bl	8000b34 <__addsf3>
 8002992:	4603      	mov	r3, r0
 8002994:	461c      	mov	r4, r3
 8002996:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002998:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800299a:	f7fe f9d3 	bl	8000d44 <__aeabi_fmul>
 800299e:	4603      	mov	r3, r0
 80029a0:	4619      	mov	r1, r3
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7fe f8c4 	bl	8000b30 <__aeabi_fsub>
 80029a8:	4603      	mov	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e008      	b.n	80029c0 <MadgwickAHRSupdateIMU+0x510>
 80029ae:	bf00      	nop
 80029b0:	20000004 	.word	0x20000004
 80029b4:	20000284 	.word	0x20000284
 80029b8:	20000008 	.word	0x20000008
 80029bc:	20000288 	.word	0x20000288
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029c0:	69f9      	ldr	r1, [r7, #28]
 80029c2:	69f8      	ldr	r0, [r7, #28]
 80029c4:	f7fe f9be 	bl	8000d44 <__aeabi_fmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461c      	mov	r4, r3
 80029cc:	69b9      	ldr	r1, [r7, #24]
 80029ce:	69b8      	ldr	r0, [r7, #24]
 80029d0:	f7fe f9b8 	bl	8000d44 <__aeabi_fmul>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4619      	mov	r1, r3
 80029d8:	4620      	mov	r0, r4
 80029da:	f7fe f8ab 	bl	8000b34 <__addsf3>
 80029de:	4603      	mov	r3, r0
 80029e0:	461c      	mov	r4, r3
 80029e2:	6979      	ldr	r1, [r7, #20]
 80029e4:	6978      	ldr	r0, [r7, #20]
 80029e6:	f7fe f9ad 	bl	8000d44 <__aeabi_fmul>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4619      	mov	r1, r3
 80029ee:	4620      	mov	r0, r4
 80029f0:	f7fe f8a0 	bl	8000b34 <__addsf3>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461c      	mov	r4, r3
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6938      	ldr	r0, [r7, #16]
 80029fc:	f7fe f9a2 	bl	8000d44 <__aeabi_fmul>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7fe f895 	bl	8000b34 <__addsf3>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fb75 	bl	80010fc <invSqrt>
 8002a12:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8002a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a16:	69f8      	ldr	r0, [r7, #28]
 8002a18:	f7fe f994 	bl	8000d44 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8002a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a22:	69b8      	ldr	r0, [r7, #24]
 8002a24:	f7fe f98e 	bl	8000d44 <__aeabi_fmul>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8002a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7fe f988 	bl	8000d44 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8002a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3a:	6938      	ldr	r0, [r7, #16]
 8002a3c:	f7fe f982 	bl	8000d44 <__aeabi_fmul>
 8002a40:	4603      	mov	r3, r0
 8002a42:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a44:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <MadgwickAHRSupdateIMU+0x748>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f97a 	bl	8000d44 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4619      	mov	r1, r3
 8002a54:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a56:	f7fe f86b 	bl	8000b30 <__aeabi_fsub>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8002a5e:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <MadgwickAHRSupdateIMU+0x748>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f96d 	bl	8000d44 <__aeabi_fmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a70:	f7fe f85e 	bl	8000b30 <__aeabi_fsub>
 8002a74:	4603      	mov	r3, r0
 8002a76:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8002a78:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <MadgwickAHRSupdateIMU+0x748>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6979      	ldr	r1, [r7, #20]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f960 	bl	8000d44 <__aeabi_fmul>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002a8a:	f7fe f851 	bl	8000b30 <__aeabi_fsub>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <MadgwickAHRSupdateIMU+0x748>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6939      	ldr	r1, [r7, #16]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f953 	bl	8000d44 <__aeabi_fmul>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002aa4:	f7fe f844 	bl	8000b30 <__aeabi_fsub>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002aac:	4953      	ldr	r1, [pc, #332]	; (8002bfc <MadgwickAHRSupdateIMU+0x74c>)
 8002aae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002ab0:	f7fe f948 	bl	8000d44 <__aeabi_fmul>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7fe f838 	bl	8000b34 <__addsf3>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002aca:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002acc:	494b      	ldr	r1, [pc, #300]	; (8002bfc <MadgwickAHRSupdateIMU+0x74c>)
 8002ace:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ad0:	f7fe f938 	bl	8000d44 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fe f828 	bl	8000b34 <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002aea:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002aec:	4943      	ldr	r1, [pc, #268]	; (8002bfc <MadgwickAHRSupdateIMU+0x74c>)
 8002aee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002af0:	f7fe f928 	bl	8000d44 <__aeabi_fmul>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f7fe f818 	bl	8000b34 <__addsf3>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002b0a:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002b0c:	493b      	ldr	r1, [pc, #236]	; (8002bfc <MadgwickAHRSupdateIMU+0x74c>)
 8002b0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002b10:	f7fe f918 	bl	8000d44 <__aeabi_fmul>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f7fe f808 	bl	8000b34 <__addsf3>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002b2a:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f904 	bl	8000d44 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f8fa 	bl	8000d44 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7fd ffed 	bl	8000b34 <__addsf3>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f8eb 	bl	8000d44 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fd ffde 	bl	8000b34 <__addsf3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f8dc 	bl	8000d44 <__aeabi_fmul>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7fd ffcf 	bl	8000b34 <__addsf3>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe faaf 	bl	80010fc <invSqrt>
 8002b9e:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f8cc 	bl	8000d44 <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <MadgwickAHRSupdateIMU+0x750>)
 8002bb2:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f8c2 	bl	8000d44 <__aeabi_fmul>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MadgwickAHRSupdateIMU+0x754>)
 8002bc6:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe f8b8 	bl	8000d44 <__aeabi_fmul>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MadgwickAHRSupdateIMU+0x758>)
 8002bda:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f8ae 	bl	8000d44 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MadgwickAHRSupdateIMU+0x75c>)
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	376c      	adds	r7, #108	; 0x6c
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	3c23d70a 	.word	0x3c23d70a
 8002c00:	20000004 	.word	0x20000004
 8002c04:	20000284 	.word	0x20000284
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000288 	.word	0x20000288

08002c10 <computeAngles>:

void computeAngles()
{
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	af00      	add	r7, sp, #0
//	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
//	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
//	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);

	// angles in rad/s
	roll  = atan2(2.0 * (q3 * q2 + q0 * q1) , 1.0 - 2.0 * (q1 * q1 + q2 * q2));
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <computeAngles+0x1c8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a70      	ldr	r2, [pc, #448]	; (8002ddc <computeAngles+0x1cc>)
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f890 	bl	8000d44 <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461c      	mov	r4, r3
 8002c28:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <computeAngles+0x1d0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6d      	ldr	r2, [pc, #436]	; (8002de4 <computeAngles+0x1d4>)
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f886 	bl	8000d44 <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7fd ff79 	bl	8000b34 <__addsf3>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fbef 	bl	8000428 <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	f7fd fa8d 	bl	800016c <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	461d      	mov	r5, r3
 8002c5a:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <computeAngles+0x1d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <computeAngles+0x1d4>)
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe f86d 	bl	8000d44 <__aeabi_fmul>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461e      	mov	r6, r3
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <computeAngles+0x1cc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <computeAngles+0x1cc>)
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe f863 	bl	8000d44 <__aeabi_fmul>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4619      	mov	r1, r3
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7fd ff56 	bl	8000b34 <__addsf3>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fbcc 	bl	8000428 <__aeabi_f2d>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	f7fd fa6a 	bl	800016c <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	4951      	ldr	r1, [pc, #324]	; (8002de8 <computeAngles+0x1d8>)
 8002ca2:	f7fd fa61 	bl	8000168 <__aeabi_dsub>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4620      	mov	r0, r4
 8002cac:	4629      	mov	r1, r5
 8002cae:	f008 fb3b 	bl	800b328 <atan2>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd fee5 	bl	8000a88 <__aeabi_d2f>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <computeAngles+0x1dc>)
 8002cc2:	6013      	str	r3, [r2, #0]
	pitch = asin(2.0 * (q2 * q0 - q3 * q1));
 8002cc4:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <computeAngles+0x1cc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a45      	ldr	r2, [pc, #276]	; (8002de0 <computeAngles+0x1d0>)
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f838 	bl	8000d44 <__aeabi_fmul>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <computeAngles+0x1c8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a41      	ldr	r2, [pc, #260]	; (8002de4 <computeAngles+0x1d4>)
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe f82e 	bl	8000d44 <__aeabi_fmul>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4619      	mov	r1, r3
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7fd ff1f 	bl	8000b30 <__aeabi_fsub>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fb97 	bl	8000428 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	f7fd fa35 	bl	800016c <__adddf3>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f008 fae5 	bl	800b2d8 <asin>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd feb7 	bl	8000a88 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a34      	ldr	r2, [pc, #208]	; (8002df0 <computeAngles+0x1e0>)
 8002d1e:	6013      	str	r3, [r2, #0]
	yaw   = atan2(2.0 * (q3 * q0 + q1 * q2) , - 1.0 + 2.0 * (q0 * q0 + q1 * q1));
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <computeAngles+0x1c8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <computeAngles+0x1d0>)
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f80a 	bl	8000d44 <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461c      	mov	r4, r3
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <computeAngles+0x1d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <computeAngles+0x1cc>)
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f800 	bl	8000d44 <__aeabi_fmul>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7fd fef3 	bl	8000b34 <__addsf3>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fb69 	bl	8000428 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	f7fd fa07 	bl	800016c <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4614      	mov	r4, r2
 8002d64:	461d      	mov	r5, r3
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <computeAngles+0x1d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <computeAngles+0x1d0>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ffe7 	bl	8000d44 <__aeabi_fmul>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461e      	mov	r6, r3
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <computeAngles+0x1d4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <computeAngles+0x1d4>)
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd ffdd 	bl	8000d44 <__aeabi_fmul>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f7fd fed0 	bl	8000b34 <__addsf3>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fb46 	bl	8000428 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	f7fd f9e4 	bl	800016c <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <computeAngles+0x1d8>)
 8002db2:	f7fd f9d9 	bl	8000168 <__aeabi_dsub>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f008 fab3 	bl	800b328 <atan2>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7fd fe5d 	bl	8000a88 <__aeabi_d2f>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <computeAngles+0x1e4>)
 8002dd2:	6013      	str	r3, [r2, #0]

}
 8002dd4:	bf00      	nop
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd8:	20000288 	.word	0x20000288
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	20000004 	.word	0x20000004
 8002de4:	20000284 	.word	0x20000284
 8002de8:	3ff00000 	.word	0x3ff00000
 8002dec:	2000028c 	.word	0x2000028c
 8002df0:	20000290 	.word	0x20000290
 8002df4:	20000294 	.word	0x20000294

08002df8 <ICM_readBytes>:

int16_t gyro_offset[3];
int16_t accel_offset[3];

void ICM_readBytes(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	72fb      	strb	r3, [r7, #11]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e12:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002e14:	7afb      	ldrb	r3, [r7, #11]
 8002e16:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002e18:	f107 0214 	add.w	r2, r7, #20
 8002e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2301      	movs	r3, #1
 8002e24:	21d2      	movs	r1, #210	; 0xd2
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f002 fca6 	bl	8005778 <HAL_I2C_Master_Transmit>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,Size,1000);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e36:	9200      	str	r2, [sp, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	21d2      	movs	r1, #210	; 0xd2
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f002 fd99 	bl	8005974 <HAL_I2C_Master_Receive>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <ICM_ReadOneByte>:
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,Size,1000);

}

void ICM_ReadOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t* pData) // ***
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	460b      	mov	r3, r1
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8002e5c:	7afb      	ldrb	r3, [r7, #11]
 8002e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e62:	72fb      	strb	r3, [r7, #11]
	uint8_t Trans[1]={reg};
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,1,1000);
 8002e68:	f107 0214 	add.w	r2, r7, #20
 8002e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2301      	movs	r3, #1
 8002e74:	21d2      	movs	r1, #210	; 0xd2
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f002 fc7e 	bl	8005778 <HAL_I2C_Master_Transmit>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(hi2c,ICM20948_ADDRESS << 1,pData,1,1000);
 8002e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2301      	movs	r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	21d2      	movs	r1, #210	; 0xd2
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f002 fd71 	bl	8005974 <HAL_I2C_Master_Receive>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <ICM_WriteOneByte>:

void ICM_WriteOneByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t Data) // ***
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb4:	70fb      	strb	r3, [r7, #3]
	uint8_t Trans[2]={reg, Data};
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	733b      	strb	r3, [r7, #12]
 8002eba:	78bb      	ldrb	r3, [r7, #2]
 8002ebc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c,ICM20948_ADDRESS << 1,Trans,2, 1000);
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2302      	movs	r3, #2
 8002eca:	21d2      	movs	r1, #210	; 0xd2
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f002 fc53 	bl	8005778 <HAL_I2C_Master_Transmit>
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(I2C_HandleTypeDef *hi2c, uint8_t reg,uint8_t value)
  {
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8002eea:	2230      	movs	r2, #48	; 0x30
 8002eec:	217f      	movs	r1, #127	; 0x7f
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffd5 	bl	8002e9e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f001 fe01 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C);//mode: write
 8002efa:	220c      	movs	r2, #12
 8002efc:	2103      	movs	r1, #3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffcd 	bl	8002e9e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002f04:	2001      	movs	r0, #1
 8002f06:	f001 fdf9 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);//set reg addr
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2104      	movs	r1, #4
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ffc4 	bl	8002e9e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f001 fdf0 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,value);//send value
 8002f1c:	78bb      	ldrb	r3, [r7, #2]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2106      	movs	r1, #6
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ffbb 	bl	8002e9e <ICM_WriteOneByte>

  	HAL_Delay(1);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f001 fde7 	bl	8004afc <HAL_Delay>
  }
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(I2C_HandleTypeDef *hi2c, uint8_t reg)
  {
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(hi2c, 0x7F, 0x30);
 8002f42:	2230      	movs	r2, #48	; 0x30
 8002f44:	217f      	movs	r1, #127	; 0x7f
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffa9 	bl	8002e9e <ICM_WriteOneByte>
    HAL_Delay(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f001 fdd5 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x03 ,0x0C|0x80);
 8002f52:	228c      	movs	r2, #140	; 0x8c
 8002f54:	2103      	movs	r1, #3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffa1 	bl	8002e9e <ICM_WriteOneByte>
    HAL_Delay(1);
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f001 fdcd 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x04 ,reg);// set reg addr
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	461a      	mov	r2, r3
 8002f66:	2104      	movs	r1, #4
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff98 	bl	8002e9e <ICM_WriteOneByte>
    HAL_Delay(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f001 fdc4 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x06 ,0xff);//read
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	2106      	movs	r1, #6
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff90 	bl	8002e9e <ICM_WriteOneByte>
  	HAL_Delay(1);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f001 fdbc 	bl	8004afc <HAL_Delay>
  	ICM_WriteOneByte(hi2c, 0x7F, 0x00);
 8002f84:	2200      	movs	r2, #0
 8002f86:	217f      	movs	r1, #127	; 0x7f
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff88 	bl	8002e9e <ICM_WriteOneByte>
  	ICM_ReadOneByte(hi2c, 0x3B,&Data);
 8002f8e:	f107 030f 	add.w	r3, r7, #15
 8002f92:	461a      	mov	r2, r3
 8002f94:	213b      	movs	r1, #59	; 0x3b
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff59 	bl	8002e4e <ICM_ReadOneByte>
    HAL_Delay(1);
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f001 fdad 	bl	8004afc <HAL_Delay>
  	return Data;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
  }
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(I2C_HandleTypeDef *hi2c, int16_t magn[3]) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];
    mag_buffer[0] =ICM_Mag_Read(hi2c, 0x01);
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ffbc 	bl	8002f36 <ICM_Mag_Read>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	733b      	strb	r3, [r7, #12]
    mag_buffer[1] =ICM_Mag_Read(hi2c, 0x11);
 8002fc2:	2111      	movs	r1, #17
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ffb6 	bl	8002f36 <ICM_Mag_Read>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	737b      	strb	r3, [r7, #13]
    mag_buffer[2] =ICM_Mag_Read(hi2c, 0x12);
 8002fce:	2112      	movs	r1, #18
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ffb0 	bl	8002f36 <ICM_Mag_Read>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73bb      	strb	r3, [r7, #14]
    magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8002fda:	7b7b      	ldrb	r3, [r7, #13]
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	7bbb      	ldrb	r3, [r7, #14]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(hi2c, 0x13);
 8002fec:	2113      	movs	r1, #19
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa1 	bl	8002f36 <ICM_Mag_Read>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
    mag_buffer[4] =ICM_Mag_Read(hi2c, 0x14);
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff9b 	bl	8002f36 <ICM_Mag_Read>
 8003000:	4603      	mov	r3, r0
 8003002:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	b219      	sxth	r1, r3
 8003008:	7c3b      	ldrb	r3, [r7, #16]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	b21a      	sxth	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	3302      	adds	r3, #2
 8003012:	430a      	orrs	r2, r1
 8003014:	b212      	sxth	r2, r2
 8003016:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(hi2c, 0x15);
 8003018:	2115      	movs	r1, #21
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff8b 	bl	8002f36 <ICM_Mag_Read>
 8003020:	4603      	mov	r3, r0
 8003022:	747b      	strb	r3, [r7, #17]
    mag_buffer[6] =ICM_Mag_Read(hi2c, 0x16);
 8003024:	2116      	movs	r1, #22
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff85 	bl	8002f36 <ICM_Mag_Read>
 800302c:	4603      	mov	r3, r0
 800302e:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003030:	7c7b      	ldrb	r3, [r7, #17]
 8003032:	b219      	sxth	r1, r3
 8003034:	7cbb      	ldrb	r3, [r7, #18]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	b21a      	sxth	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3304      	adds	r3, #4
 800303e:	430a      	orrs	r2, r1
 8003040:	b212      	sxth	r2, r2
 8003042:	801a      	strh	r2, [r3, #0]

	i2c_Mag_write(hi2c, 0x31,0x01);
 8003044:	2201      	movs	r2, #1
 8003046:	2131      	movs	r1, #49	; 0x31
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff46 	bl	8002eda <i2c_Mag_write>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(I2C_HandleTypeDef *hi2c) {
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	HAL_Delay(10);
 800305e:	200a      	movs	r0, #10
 8003060:	f001 fd4c 	bl	8004afc <HAL_Delay>
	ICM_SelectBank(hi2c, USER_BANK_0);
 8003064:	2100      	movs	r1, #0
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9b4 	bl	80033d4 <ICM_SelectBank>
	HAL_Delay(10);
 800306c:	200a      	movs	r0, #10
 800306e:	f001 fd45 	bl	8004afc <HAL_Delay>
	ICM_Enable_I2C(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9be 	bl	80033f4 <ICM_Enable_I2C>
	HAL_Delay(10);
 8003078:	200a      	movs	r0, #10
 800307a:	f001 fd3f 	bl	8004afc <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_3);
 800307e:	2130      	movs	r1, #48	; 0x30
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f9a7 	bl	80033d4 <ICM_SelectBank>
	ICM_Set_I2C_Clk(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa00 	bl	800348c <ICM_Set_I2C_Clk>
	HAL_Delay(10);
 800308c:	200a      	movs	r0, #10
 800308e:	f001 fd35 	bl	8004afc <HAL_Delay>

	ICM_SelectBank(hi2c, USER_BANK_0);
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f99d 	bl	80033d4 <ICM_SelectBank>
	HAL_Delay(10);
 800309a:	200a      	movs	r0, #10
 800309c:	f001 fd2e 	bl	8004afc <HAL_Delay>
	ICM_SetClock(hi2c, (uint8_t)CLK_BEST_AVAIL);
 80030a0:	2101      	movs	r1, #1
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9b3 	bl	800340e <ICM_SetClock>
	HAL_Delay(10);
 80030a8:	200a      	movs	r0, #10
 80030aa:	f001 fd27 	bl	8004afc <HAL_Delay>
	ICM_AccelGyroOff(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9bd 	bl	800342e <ICM_AccelGyroOff>
	HAL_Delay(20);
 80030b4:	2014      	movs	r0, #20
 80030b6:	f001 fd21 	bl	8004afc <HAL_Delay>
	ICM_AccelGyroOn(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9c4 	bl	8003448 <ICM_AccelGyroOn>
	HAL_Delay(35);
 80030c0:	2023      	movs	r0, #35	; 0x23
 80030c2:	f001 fd1b 	bl	8004afc <HAL_Delay>
	ICM_Initialize(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f804 	bl	80030d4 <ICM_Initialize>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <ICM_Initialize>:

uint16_t ICM_Initialize(I2C_HandleTypeDef *hi2c) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_2);
 80030dc:	2120      	movs	r1, #32
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f978 	bl	80033d4 <ICM_SelectBank>
	HAL_Delay(20);
 80030e4:	2014      	movs	r0, #20
 80030e6:	f001 fd09 	bl	8004afc <HAL_Delay>
	ICM_SetGyroRateLPF(hi2c, GYRO_RATE_250, GYRO_LPF_17HZ);
 80030ea:	2229      	movs	r2, #41	; 0x29
 80030ec:	2100      	movs	r1, #0
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9b7 	bl	8003462 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80030f4:	200a      	movs	r0, #10
 80030f6:	f001 fd01 	bl	8004afc <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(hi2c, 0x00, 0x0A);
 80030fa:	220a      	movs	r2, #10
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fecd 	bl	8002e9e <ICM_WriteOneByte>
	HAL_Delay(10);
 8003104:	200a      	movs	r0, #10
 8003106:	f001 fcf9 	bl	8004afc <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(hi2c, 0x14, (0x04 | 0x11));
 800310a:	2215      	movs	r2, #21
 800310c:	2114      	movs	r1, #20
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fec5 	bl	8002e9e <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(hi2c, 0x10, 0x00);
 8003114:	2200      	movs	r2, #0
 8003116:	2110      	movs	r1, #16
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fec0 	bl	8002e9e <ICM_WriteOneByte>
	HAL_Delay(10);
 800311e:	200a      	movs	r0, #10
 8003120:	f001 fcec 	bl	8004afc <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(hi2c, 0x11, 0x0A);
 8003124:	220a      	movs	r2, #10
 8003126:	2111      	movs	r1, #17
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff feb8 	bl	8002e9e <ICM_WriteOneByte>
	HAL_Delay(10);
 800312e:	200a      	movs	r0, #10
 8003130:	f001 fce4 	bl	8004afc <HAL_Delay>

//	ICM_SelectBank(hi2c, USER_BANK_2);
//	HAL_Delay(20);

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(hi2c, 0x7F, 0x00); // Select user bank 0
 8003134:	2200      	movs	r2, #0
 8003136:	217f      	movs	r1, #127	; 0x7f
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff feb0 	bl	8002e9e <ICM_WriteOneByte>
	HAL_Delay(10);
 800313e:	200a      	movs	r0, #10
 8003140:	f001 fcdc 	bl	8004afc <HAL_Delay>
	ICM_WriteOneByte(hi2c, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8003144:	2230      	movs	r2, #48	; 0x30
 8003146:	210f      	movs	r1, #15
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fea8 	bl	8002e9e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // I2C_MST_EN
 800314e:	2220      	movs	r2, #32
 8003150:	2103      	movs	r1, #3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fea3 	bl	8002e9e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x7F, 0x30); // Select user bank 3
 8003158:	2230      	movs	r2, #48	; 0x30
 800315a:	217f      	movs	r1, #127	; 0x7f
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe9e 	bl	8002e9e <ICM_WriteOneByte>
	HAL_Delay(10);
 8003162:	200a      	movs	r0, #10
 8003164:	f001 fcca 	bl	8004afc <HAL_Delay>
	ICM_WriteOneByte(hi2c, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8003168:	224d      	movs	r2, #77	; 0x4d
 800316a:	2101      	movs	r1, #1
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe96 	bl	8002e9e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8003172:	2201      	movs	r2, #1
 8003174:	2102      	movs	r1, #2
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fe91 	bl	8002e9e <ICM_WriteOneByte>
	ICM_WriteOneByte(hi2c, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 800317c:	2281      	movs	r2, #129	; 0x81
 800317e:	2105      	movs	r1, #5
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fe8c 	bl	8002e9e <ICM_WriteOneByte>

	// Initialize magnetometer
	i2c_Mag_write(hi2c, 0x32, 0x01); // Reset AK8963
 8003186:	2201      	movs	r2, #1
 8003188:	2132      	movs	r1, #50	; 0x32
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fea5 	bl	8002eda <i2c_Mag_write>
	HAL_Delay(1000);
 8003190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003194:	f001 fcb2 	bl	8004afc <HAL_Delay>
	i2c_Mag_write(hi2c, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8003198:	2202      	movs	r2, #2
 800319a:	2131      	movs	r1, #49	; 0x31
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fe9c 	bl	8002eda <i2c_Mag_write>

	return 1337;
 80031a2:	f240 5339 	movw	r3, #1337	; 0x539
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(I2C_HandleTypeDef *hi2c) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	static uint8_t raw_data[12];
	ICM_readBytes(hi2c, 0x2D, raw_data, 12);
 80031b8:	230c      	movs	r3, #12
 80031ba:	4a25      	ldr	r2, [pc, #148]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031bc:	212d      	movs	r1, #45	; 0x2d
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fe1a 	bl	8002df8 <ICM_readBytes>

	accel_data[0] = (((uint16_t) raw_data[0] << 8) | raw_data[1]);
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <ICM_ReadAccelGyro+0xa4>)
 80031d8:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (((uint16_t) raw_data[2] << 8) | raw_data[3]);
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031e4:	78db      	ldrb	r3, [r3, #3]
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b21a      	sxth	r2, r3
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <ICM_ReadAccelGyro+0xa4>)
 80031ee:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (((uint16_t) raw_data[4] << 8) | raw_data[5]);
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031f2:	791b      	ldrb	r3, [r3, #4]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	b21a      	sxth	r2, r3
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	4313      	orrs	r3, r2
 8003200:	b21a      	sxth	r2, r3
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <ICM_ReadAccelGyro+0xa4>)
 8003204:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((uint16_t) raw_data[6] << 8) | raw_data[7]);
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 8003208:	799b      	ldrb	r3, [r3, #6]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	b21a      	sxth	r2, r3
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 8003210:	79db      	ldrb	r3, [r3, #7]
 8003212:	b21b      	sxth	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	b21a      	sxth	r2, r3
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <ICM_ReadAccelGyro+0xa8>)
 800321a:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (((uint16_t) raw_data[8] << 8) | raw_data[9]);
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 800321e:	7a1b      	ldrb	r3, [r3, #8]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b21a      	sxth	r2, r3
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 8003226:	7a5b      	ldrb	r3, [r3, #9]
 8003228:	b21b      	sxth	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b21a      	sxth	r2, r3
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <ICM_ReadAccelGyro+0xa8>)
 8003230:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (((uint16_t) raw_data[10] << 8) | raw_data[11]);
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 8003234:	7a9b      	ldrb	r3, [r3, #10]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b21a      	sxth	r2, r3
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <ICM_ReadAccelGyro+0xa0>)
 800323c:	7adb      	ldrb	r3, [r3, #11]
 800323e:	b21b      	sxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b21a      	sxth	r2, r3
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <ICM_ReadAccelGyro+0xa8>)
 8003246:	809a      	strh	r2, [r3, #4]
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200002d0 	.word	0x200002d0
 8003254:	20000298 	.word	0x20000298
 8003258:	200002a0 	.word	0x200002a0
 800325c:	00000000 	.word	0x00000000

08003260 <ICM_CorrectAccelGyro>:

void ICM_CorrectAccelGyro(I2C_HandleTypeDef *hi2c, int16_t raw_accel_data[3], int16_t raw_gyro_data[3]) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
//	corr_accel_data[0] = (raw_accel_data[0] - (accel_offset[0] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[1] = (raw_accel_data[1] - (accel_offset[1] / (1<<0x04))) * (1<<0x04) / 16384.0;
//	corr_accel_data[2] = (raw_accel_data[2] - (accel_offset[2] / (1<<0x04))) * (1<<0x04) / 16384.0;

	corr_accel_data[0] = (raw_accel_data[0] - accel_offset[0]) / 16.0;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003272:	461a      	mov	r2, r3
 8003274:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <ICM_CorrectAccelGyro+0x160>)
 8003276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f8c1 	bl	8000404 <__aeabi_i2d>
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <ICM_CorrectAccelGyro+0x164>)
 8003288:	f7fd fa50 	bl	800072c <__aeabi_ddiv>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	f7fd fbd0 	bl	8000a38 <__aeabi_d2iz>
 8003298:	4603      	mov	r3, r0
 800329a:	b21a      	sxth	r2, r3
 800329c:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <ICM_CorrectAccelGyro+0x168>)
 800329e:	801a      	strh	r2, [r3, #0]
	corr_accel_data[1] = (raw_accel_data[1] - accel_offset[1]) / 16.0;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3302      	adds	r3, #2
 80032a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <ICM_CorrectAccelGyro+0x160>)
 80032ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f8a6 	bl	8000404 <__aeabi_i2d>
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <ICM_CorrectAccelGyro+0x164>)
 80032be:	f7fd fa35 	bl	800072c <__aeabi_ddiv>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7fd fbb5 	bl	8000a38 <__aeabi_d2iz>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b21a      	sxth	r2, r3
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <ICM_CorrectAccelGyro+0x168>)
 80032d4:	805a      	strh	r2, [r3, #2]
	corr_accel_data[2] = (raw_accel_data[2] - accel_offset[2]) / 16.0;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3304      	adds	r3, #4
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	461a      	mov	r2, r3
 80032e0:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <ICM_CorrectAccelGyro+0x160>)
 80032e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f88b 	bl	8000404 <__aeabi_i2d>
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <ICM_CorrectAccelGyro+0x164>)
 80032f4:	f7fd fa1a 	bl	800072c <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f7fd fb9a 	bl	8000a38 <__aeabi_d2iz>
 8003304:	4603      	mov	r3, r0
 8003306:	b21a      	sxth	r2, r3
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <ICM_CorrectAccelGyro+0x168>)
 800330a:	809a      	strh	r2, [r3, #4]
//	corr_gyro_data[0] = (raw_gyro_data[0] - (gyro_offset[0] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[1] = (raw_gyro_data[1] - (gyro_offset[1] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;
//	corr_gyro_data[2] = (raw_gyro_data[2] - (gyro_offset[2] / (1<<GYRO_RATE_250))) * (1<<GYRO_RATE_250) * 250.0 / 131000.0;


	corr_gyro_data[0] = (raw_gyro_data[0] - gyro_offset[0]) / 131.0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003312:	461a      	mov	r2, r3
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <ICM_CorrectAccelGyro+0x16c>)
 8003316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f871 	bl	8000404 <__aeabi_i2d>
 8003322:	a325      	add	r3, pc, #148	; (adr r3, 80033b8 <ICM_CorrectAccelGyro+0x158>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fd fa00 	bl	800072c <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f7fd fb80 	bl	8000a38 <__aeabi_d2iz>
 8003338:	4603      	mov	r3, r0
 800333a:	b21a      	sxth	r2, r3
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <ICM_CorrectAccelGyro+0x170>)
 800333e:	801a      	strh	r2, [r3, #0]
	corr_gyro_data[1] = (raw_gyro_data[1] - gyro_offset[1]) / 131.0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3302      	adds	r3, #2
 8003344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003348:	461a      	mov	r2, r3
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <ICM_CorrectAccelGyro+0x16c>)
 800334c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f856 	bl	8000404 <__aeabi_i2d>
 8003358:	a317      	add	r3, pc, #92	; (adr r3, 80033b8 <ICM_CorrectAccelGyro+0x158>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f9e5 	bl	800072c <__aeabi_ddiv>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fb65 	bl	8000a38 <__aeabi_d2iz>
 800336e:	4603      	mov	r3, r0
 8003370:	b21a      	sxth	r2, r3
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <ICM_CorrectAccelGyro+0x170>)
 8003374:	805a      	strh	r2, [r3, #2]
	corr_gyro_data[2] = (raw_gyro_data[2] - gyro_offset[2]) / 131.0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337e:	461a      	mov	r2, r3
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <ICM_CorrectAccelGyro+0x16c>)
 8003382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f83b 	bl	8000404 <__aeabi_i2d>
 800338e:	a30a      	add	r3, pc, #40	; (adr r3, 80033b8 <ICM_CorrectAccelGyro+0x158>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f9ca 	bl	800072c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fb4a 	bl	8000a38 <__aeabi_d2iz>
 80033a4:	4603      	mov	r3, r0
 80033a6:	b21a      	sxth	r2, r3
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <ICM_CorrectAccelGyro+0x170>)
 80033aa:	809a      	strh	r2, [r3, #4]

}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	f3af 8000 	nop.w
 80033b8:	00000000 	.word	0x00000000
 80033bc:	40606000 	.word	0x40606000
 80033c0:	200002c8 	.word	0x200002c8
 80033c4:	40300000 	.word	0x40300000
 80033c8:	200002b0 	.word	0x200002b0
 80033cc:	200002c0 	.word	0x200002c0
 80033d0:	200002b8 	.word	0x200002b8

080033d4 <ICM_SelectBank>:

void ICM_SelectBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, USER_BANK_SEL, bank);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	461a      	mov	r2, r3
 80033e4:	217f      	movs	r1, #127	; 0x7f
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fd59 	bl	8002e9e <ICM_WriteOneByte>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <ICM_Enable_I2C>:

void ICM_Enable_I2C(I2C_HandleTypeDef *hi2c) { //user bank 0
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x03, 0x20); // Enable I2C master
 80033fc:	2220      	movs	r2, #32
 80033fe:	2103      	movs	r1, #3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fd4c 	bl	8002e9e <ICM_WriteOneByte>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <ICM_SetClock>:

void ICM_SetClock(I2C_HandleTypeDef *hi2c, uint8_t clk) {
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(hi2c, PWR_MGMT_1, clk);
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	461a      	mov	r2, r3
 800341e:	2106      	movs	r1, #6
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fd3c 	bl	8002e9e <ICM_WriteOneByte>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(I2C_HandleTypeDef *hi2c) { //user bank 0
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x38 | 0x07));
 8003436:	223f      	movs	r2, #63	; 0x3f
 8003438:	2107      	movs	r1, #7
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fd2f 	bl	8002e9e <ICM_WriteOneByte>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(I2C_HandleTypeDef *hi2c) { //user bank 0
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, PWR_MGMT_2, (0x00 | 0x00));
 8003450:	2200      	movs	r2, #0
 8003452:	2107      	movs	r1, #7
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fd22 	bl	8002e9e <ICM_WriteOneByte>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <ICM_SetGyroRateLPF>:
	uint8_t i2cData = 0x01;
	ICM_ReadOneByte(hi2c, 0x00, &i2cData);
	return i2cData;
}

void ICM_SetGyroRateLPF(I2C_HandleTypeDef *hi2c, uint8_t rate, uint8_t lpf) {
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
 800346e:	4613      	mov	r3, r2
 8003470:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(hi2c, GYRO_CONFIG_1, (rate|lpf));
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	78bb      	ldrb	r3, [r7, #2]
 8003476:	4313      	orrs	r3, r2
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	2101      	movs	r1, #1
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fd0d 	bl	8002e9e <ICM_WriteOneByte>
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <ICM_Set_I2C_Clk>:

void ICM_Set_I2C_Clk(I2C_HandleTypeDef *hi2c) { //user bank 3
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(hi2c, 0x01, 0x07); //set I2C master clock to recommended freq
 8003494:	2207      	movs	r2, #7
 8003496:	2101      	movs	r1, #1
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fd00 	bl	8002e9e <ICM_WriteOneByte>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <ICM20948_Calibrate>:

void ICM20948_Calibrate(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(hi2c, USER_BANK_0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ff8e 	bl	80033d4 <ICM_SelectBank>
	HAL_Delay(10);
 80034b8:	200a      	movs	r0, #10
 80034ba:	f001 fb1f 	bl	8004afc <HAL_Delay>
	// Calibrate accelerometer
	for(int i=0; i<50; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e02f      	b.n	8003524 <ICM20948_Calibrate+0x7c>
		ICM_ReadAccelGyro(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff fe73 	bl	80031b0 <ICM_ReadAccelGyro>
		accel_offset[0] += accel_data[0];
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 80034cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <ICM20948_Calibrate+0x1b4>)
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4413      	add	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b21a      	sxth	r2, r3
 80034e0:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 80034e2:	801a      	strh	r2, [r3, #0]
		accel_offset[1] += accel_data[1];
 80034e4:	4b5c      	ldr	r3, [pc, #368]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 80034e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b5b      	ldr	r3, [pc, #364]	; (800365c <ICM20948_Calibrate+0x1b4>)
 80034ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	4b57      	ldr	r3, [pc, #348]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 80034fc:	805a      	strh	r2, [r3, #2]
		accel_offset[2] += accel_data[2];
 80034fe:	4b56      	ldr	r3, [pc, #344]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <ICM20948_Calibrate+0x1b4>)
 8003508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4413      	add	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	b21a      	sxth	r2, r3
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003516:	809a      	strh	r2, [r3, #4]
		HAL_Delay(50);
 8003518:	2032      	movs	r0, #50	; 0x32
 800351a:	f001 faef 	bl	8004afc <HAL_Delay>
	for(int i=0; i<50; i++){
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b31      	cmp	r3, #49	; 0x31
 8003528:	ddcc      	ble.n	80034c4 <ICM20948_Calibrate+0x1c>
	}

	accel_offset[0] /= 50;
 800352a:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 800352c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003530:	4a4b      	ldr	r2, [pc, #300]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 8003532:	fb82 1203 	smull	r1, r2, r2, r3
 8003536:	1112      	asrs	r2, r2, #4
 8003538:	17db      	asrs	r3, r3, #31
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	b21a      	sxth	r2, r3
 800353e:	4b46      	ldr	r3, [pc, #280]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003540:	801a      	strh	r2, [r3, #0]
	accel_offset[1] /= 50;
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 800354a:	fb82 1203 	smull	r1, r2, r2, r3
 800354e:	1112      	asrs	r2, r2, #4
 8003550:	17db      	asrs	r3, r3, #31
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	b21a      	sxth	r2, r3
 8003556:	4b40      	ldr	r3, [pc, #256]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003558:	805a      	strh	r2, [r3, #2]
	accel_offset[2] /= 50;
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 800355c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003560:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 8003562:	fb82 1203 	smull	r1, r2, r2, r3
 8003566:	1112      	asrs	r2, r2, #4
 8003568:	17db      	asrs	r3, r3, #31
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	b21a      	sxth	r2, r3
 800356e:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003570:	809a      	strh	r2, [r3, #4]
	accel_offset[2] += 4096.0; // 4096 LSB/g
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 8003574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ff43 	bl	8000404 <__aeabi_i2d>
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <ICM20948_Calibrate+0x1bc>)
 8003584:	f7fc fdf2 	bl	800016c <__adddf3>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f7fd fa52 	bl	8000a38 <__aeabi_d2iz>
 8003594:	4603      	mov	r3, r0
 8003596:	b21a      	sxth	r2, r3
 8003598:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <ICM20948_Calibrate+0x1b0>)
 800359a:	809a      	strh	r2, [r3, #4]

	// Calibrate gyroscope
	for(int i=0; i<50; i++){
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	e02f      	b.n	8003602 <ICM20948_Calibrate+0x15a>
		ICM_ReadAccelGyro(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fe04 	bl	80031b0 <ICM_ReadAccelGyro>
		gyro_offset[0] += gyro_data[0];
 80035a8:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <ICM20948_Calibrate+0x1c4>)
 80035b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	b21a      	sxth	r2, r3
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035c0:	801a      	strh	r2, [r3, #0]
		gyro_offset[1] += gyro_data[1];
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <ICM20948_Calibrate+0x1c4>)
 80035cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035da:	805a      	strh	r2, [r3, #2]
		gyro_offset[2] += gyro_data[2];
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <ICM20948_Calibrate+0x1c4>)
 80035e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 80035f4:	809a      	strh	r2, [r3, #4]
		HAL_Delay(50);
 80035f6:	2032      	movs	r0, #50	; 0x32
 80035f8:	f001 fa80 	bl	8004afc <HAL_Delay>
	for(int i=0; i<50; i++){
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b31      	cmp	r3, #49	; 0x31
 8003606:	ddcc      	ble.n	80035a2 <ICM20948_Calibrate+0xfa>
	}

	gyro_offset[0] /= 50;
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 800360a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 8003610:	fb82 1203 	smull	r1, r2, r2, r3
 8003614:	1112      	asrs	r2, r2, #4
 8003616:	17db      	asrs	r3, r3, #31
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	b21a      	sxth	r2, r3
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 800361e:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] /= 50;
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 8003622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 8003628:	fb82 1203 	smull	r1, r2, r2, r3
 800362c:	1112      	asrs	r2, r2, #4
 800362e:	17db      	asrs	r3, r3, #31
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	b21a      	sxth	r2, r3
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 8003636:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] /= 50;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 800363a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <ICM20948_Calibrate+0x1b8>)
 8003640:	fb82 1203 	smull	r1, r2, r2, r3
 8003644:	1112      	asrs	r2, r2, #4
 8003646:	17db      	asrs	r3, r3, #31
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	b21a      	sxth	r2, r3
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <ICM20948_Calibrate+0x1c0>)
 800364e:	809a      	strh	r2, [r3, #4]
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200002c8 	.word	0x200002c8
 800365c:	20000298 	.word	0x20000298
 8003660:	51eb851f 	.word	0x51eb851f
 8003664:	40b00000 	.word	0x40b00000
 8003668:	200002c0 	.word	0x200002c0
 800366c:	200002a0 	.word	0x200002a0

08003670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b0ad      	sub	sp, #180	; 0xb4
 8003676:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 8003678:	2300      	movs	r3, #0
 800367a:	677b      	str	r3, [r7, #116]	; 0x74
 800367c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003680:	221f      	movs	r2, #31
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f005 f913 	bl	80088b0 <memset>
	uint8_t ROLL_MSG[35] = {'\0'};
 800368a:	2300      	movs	r3, #0
 800368c:	653b      	str	r3, [r7, #80]	; 0x50
 800368e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003692:	221f      	movs	r2, #31
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f005 f90a 	bl	80088b0 <memset>
	uint8_t PITCH_MSG[35] = {'\0'};
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036a4:	221f      	movs	r2, #31
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f005 f901 	bl	80088b0 <memset>
	uint8_t YAW_MSG[35] = {'\0'};
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	221f      	movs	r2, #31
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 f8f8 	bl	80088b0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036c0:	f001 f9ba 	bl	8004a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036c4:	f000 f8fe 	bl	80038c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c8:	f000 fb3a 	bl	8003d40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80036cc:	f000 fb0e 	bl	8003cec <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80036d0:	f000 f988 	bl	80039e4 <MX_I2C2_Init>
  MX_ADC1_Init();
 80036d4:	f000 f948 	bl	8003968 <MX_ADC1_Init>
  MX_TIM2_Init();
 80036d8:	f000 fa0a 	bl	8003af0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80036dc:	f000 fa8a 	bl	8003bf4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80036e0:	f000 f9ae 	bl	8003a40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Right Motor Encoder
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80036e4:	213c      	movs	r1, #60	; 0x3c
 80036e6:	4866      	ldr	r0, [pc, #408]	; (8003880 <main+0x210>)
 80036e8:	f003 ff86 	bl	80075f8 <HAL_TIM_Encoder_Start_IT>

  // Initialize Timer3 for delay purposes
  HAL_TIM_Base_Start_IT(&htim3);
 80036ec:	4865      	ldr	r0, [pc, #404]	; (8003884 <main+0x214>)
 80036ee:	f003 fc37 	bl	8006f60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // enable interrupt on TIM3 CH2
 80036f2:	2104      	movs	r1, #4
 80036f4:	4863      	ldr	r0, [pc, #396]	; (8003884 <main+0x214>)
 80036f6:	f003 fdd7 	bl	80072a8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // enable interrupt on TIM3 CH3
 80036fa:	2108      	movs	r1, #8
 80036fc:	4861      	ldr	r0, [pc, #388]	; (8003884 <main+0x214>)
 80036fe:	f003 fdd3 	bl	80072a8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim2);
 8003702:	4861      	ldr	r0, [pc, #388]	; (8003888 <main+0x218>)
 8003704:	f003 fbe2 	bl	8006ecc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start PWM signal at 1ms (0 speed)
 8003708:	2104      	movs	r1, #4
 800370a:	485f      	ldr	r0, [pc, #380]	; (8003888 <main+0x218>)
 800370c:	f003 fcd2 	bl	80070b4 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 8003710:	f241 3088 	movw	r0, #5000	; 0x1388
 8003714:	f001 f9f2 	bl	8004afc <HAL_Delay>

  ICM_PowerOn(&hi2c2);
 8003718:	485c      	ldr	r0, [pc, #368]	; (800388c <main+0x21c>)
 800371a:	f7ff fc9c 	bl	8003056 <ICM_PowerOn>
  HAL_Delay(10);
 800371e:	200a      	movs	r0, #10
 8003720:	f001 f9ec 	bl	8004afc <HAL_Delay>
  ICM20948_Calibrate(&hi2c2);
 8003724:	4859      	ldr	r0, [pc, #356]	; (800388c <main+0x21c>)
 8003726:	f7ff febf 	bl	80034a8 <ICM20948_Calibrate>
  HAL_Delay(100);
 800372a:	2064      	movs	r0, #100	; 0x64
 800372c:	f001 f9e6 	bl	8004afc <HAL_Delay>
  t1 = HAL_GetTick();
 8003730:	f001 f9da 	bl	8004ae8 <HAL_GetTick>
 8003734:	4603      	mov	r3, r0
 8003736:	4a56      	ldr	r2, [pc, #344]	; (8003890 <main+0x220>)
 8003738:	6013      	str	r3, [r2, #0]


    // imu testing

//	   Select User Bank 0
	  ICM_SelectBank(&hi2c2, USER_BANK_0);
 800373a:	2100      	movs	r1, #0
 800373c:	4853      	ldr	r0, [pc, #332]	; (800388c <main+0x21c>)
 800373e:	f7ff fe49 	bl	80033d4 <ICM_SelectBank>
//	  HAL_Delay(10);

	  // Obtain raw accelerometer and gyro data
	  ICM_ReadAccelGyro(&hi2c2);
 8003742:	4852      	ldr	r0, [pc, #328]	; (800388c <main+0x21c>)
 8003744:	f7ff fd34 	bl	80031b0 <ICM_ReadAccelGyro>

	  // Obtain raw magnetometer data
//	  int16_t mag_data[3];
	  ICM_ReadMag(&hi2c2, mag_data);
 8003748:	4952      	ldr	r1, [pc, #328]	; (8003894 <main+0x224>)
 800374a:	4850      	ldr	r0, [pc, #320]	; (800388c <main+0x21c>)
 800374c:	f7ff fc2e 	bl	8002fac <ICM_ReadMag>

	  // Obtain corrected accelerometer and gyro data
	  ICM_CorrectAccelGyro(&hi2c2, accel_data, gyro_data);
 8003750:	4a51      	ldr	r2, [pc, #324]	; (8003898 <main+0x228>)
 8003752:	4952      	ldr	r1, [pc, #328]	; (800389c <main+0x22c>)
 8003754:	484d      	ldr	r0, [pc, #308]	; (800388c <main+0x21c>)
 8003756:	f7ff fd83 	bl	8003260 <ICM_CorrectAccelGyro>

	  // Apply Madgwick to get pitch, roll, and yaw
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <main+0x230>)
 800375c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fa9b 	bl	8000c9c <__aeabi_i2f>
 8003766:	4681      	mov	r9, r0
 8003768:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <main+0x230>)
 800376a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd fa94 	bl	8000c9c <__aeabi_i2f>
 8003774:	4682      	mov	sl, r0
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <main+0x230>)
 8003778:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fa8d 	bl	8000c9c <__aeabi_i2f>
 8003782:	4683      	mov	fp, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003784:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <main+0x234>)
 8003786:	f9b3 3000 	ldrsh.w	r3, [r3]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fa86 	bl	8000c9c <__aeabi_i2f>
 8003790:	6078      	str	r0, [r7, #4]
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <main+0x234>)
 8003794:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fa7f 	bl	8000c9c <__aeabi_i2f>
 800379e:	4604      	mov	r4, r0
			  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2],
 80037a0:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <main+0x234>)
 80037a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fa78 	bl	8000c9c <__aeabi_i2f>
 80037ac:	4605      	mov	r5, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80037ae:	4b39      	ldr	r3, [pc, #228]	; (8003894 <main+0x224>)
 80037b0:	f9b3 3000 	ldrsh.w	r3, [r3]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fa71 	bl	8000c9c <__aeabi_i2f>
 80037ba:	4606      	mov	r6, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <main+0x224>)
 80037be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fa6a 	bl	8000c9c <__aeabi_i2f>
 80037c8:	4680      	mov	r8, r0
						 mag_data[0], mag_data[1], mag_data[2]);
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <main+0x224>)
 80037cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  MadgwickAHRSupdate(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fa63 	bl	8000c9c <__aeabi_i2f>
 80037d6:	4603      	mov	r3, r0
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	f8cd 800c 	str.w	r8, [sp, #12]
 80037de:	9602      	str	r6, [sp, #8]
 80037e0:	9501      	str	r5, [sp, #4]
 80037e2:	9400      	str	r4, [sp, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	465a      	mov	r2, fp
 80037e8:	4651      	mov	r1, sl
 80037ea:	4648      	mov	r0, r9
 80037ec:	f7fd fcba 	bl	8001164 <MadgwickAHRSupdate>

//	  // Apply Madgwick to IMU data only
//	  MadgwickAHRSupdateIMU(corr_gyro_data[0], corr_gyro_data[1], corr_gyro_data[2],
//	  	  	  	 corr_accel_data[0], corr_accel_data[1], corr_accel_data[2]);

	  computeAngles();
 80037f0:	f7ff fa0e 	bl	8002c10 <computeAngles>

	  roll_main = roll*57.29578;
 80037f4:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <main+0x238>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fe15 	bl	8000428 <__aeabi_f2d>
 80037fe:	a31e      	add	r3, pc, #120	; (adr r3, 8003878 <main+0x208>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fe68 	bl	80004d8 <__aeabi_dmul>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f7fd f93a 	bl	8000a88 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <main+0x23c>)
 8003818:	6013      	str	r3, [r2, #0]
	  pitch_main = pitch*57.29578;
 800381a:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <main+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fe02 	bl	8000428 <__aeabi_f2d>
 8003824:	a314      	add	r3, pc, #80	; (adr r3, 8003878 <main+0x208>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fc fe55 	bl	80004d8 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f927 	bl	8000a88 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <main+0x244>)
 800383e:	6013      	str	r3, [r2, #0]
	  yaw_main = yaw*57.29578;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <main+0x248>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fdef 	bl	8000428 <__aeabi_f2d>
 800384a:	a30b      	add	r3, pc, #44	; (adr r3, 8003878 <main+0x208>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fc fe42 	bl	80004d8 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f7fd f914 	bl	8000a88 <__aeabi_d2f>
 8003860:	4603      	mov	r3, r0
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <main+0x24c>)
 8003864:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800386a:	4815      	ldr	r0, [pc, #84]	; (80038c0 <main+0x250>)
 800386c:	f001 fe26 	bl	80054bc <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8003870:	200a      	movs	r0, #10
 8003872:	f001 f943 	bl	8004afc <HAL_Delay>
  {
 8003876:	e760      	b.n	800373a <main+0xca>
 8003878:	1e7967cb 	.word	0x1e7967cb
 800387c:	404ca5dc 	.word	0x404ca5dc
 8003880:	20000360 	.word	0x20000360
 8003884:	200003f0 	.word	0x200003f0
 8003888:	200003a8 	.word	0x200003a8
 800388c:	2000030c 	.word	0x2000030c
 8003890:	2000000c 	.word	0x2000000c
 8003894:	200002a8 	.word	0x200002a8
 8003898:	200002a0 	.word	0x200002a0
 800389c:	20000298 	.word	0x20000298
 80038a0:	200002b8 	.word	0x200002b8
 80038a4:	200002b0 	.word	0x200002b0
 80038a8:	2000028c 	.word	0x2000028c
 80038ac:	2000047c 	.word	0x2000047c
 80038b0:	20000290 	.word	0x20000290
 80038b4:	20000480 	.word	0x20000480
 80038b8:	20000294 	.word	0x20000294
 80038bc:	20000484 	.word	0x20000484
 80038c0:	40011000 	.word	0x40011000

080038c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b094      	sub	sp, #80	; 0x50
 80038c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ce:	2228      	movs	r2, #40	; 0x28
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 ffec 	bl	80088b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038f4:	2302      	movs	r3, #2
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038f8:	2301      	movs	r3, #1
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038fc:	2310      	movs	r3, #16
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fdbf 	bl	800648c <HAL_RCC_OscConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8003914:	f000 fb2c 	bl	8003f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003918:	230f      	movs	r3, #15
 800391a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003928:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f003 f82b 	bl	8006990 <HAL_RCC_ClockConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003940:	f000 fb16 	bl	8003f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003944:	2302      	movs	r3, #2
 8003946:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f003 f9b5 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800395c:	f000 fb08 	bl	8003f70 <Error_Handler>
  }
}
 8003960:	bf00      	nop
 8003962:	3750      	adds	r7, #80	; 0x50
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <MX_ADC1_Init+0x74>)
 800397a:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <MX_ADC1_Init+0x78>)
 800397c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <MX_ADC1_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_ADC1_Init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <MX_ADC1_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <MX_ADC1_Init+0x74>)
 8003992:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <MX_ADC1_Init+0x74>)
 800399a:	2200      	movs	r2, #0
 800399c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <MX_ADC1_Init+0x74>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039a4:	480d      	ldr	r0, [pc, #52]	; (80039dc <MX_ADC1_Init+0x74>)
 80039a6:	f001 f8cd 	bl	8004b44 <HAL_ADC_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80039b0:	f000 fade 	bl	8003f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80039b4:	2304      	movs	r3, #4
 80039b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_ADC1_Init+0x74>)
 80039c6:	f001 f995 	bl	8004cf4 <HAL_ADC_ConfigChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80039d0:	f000 face 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200002dc 	.word	0x200002dc
 80039e0:	40012400 	.word	0x40012400

080039e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <MX_I2C2_Init+0x50>)
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <MX_I2C2_Init+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_I2C2_Init+0x50>)
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <MX_I2C2_Init+0x58>)
 80039f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <MX_I2C2_Init+0x50>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 210;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_I2C2_Init+0x50>)
 80039fc:	22d2      	movs	r2, #210	; 0xd2
 80039fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a20:	4804      	ldr	r0, [pc, #16]	; (8003a34 <MX_I2C2_Init+0x50>)
 8003a22:	f001 fd65 	bl	80054f0 <HAL_I2C_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a2c:	f000 faa0 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000030c 	.word	0x2000030c
 8003a38:	40005800 	.word	0x40005800
 8003a3c:	00061a80 	.word	0x00061a80

08003a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 ff2e 	bl	80088b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a5e:	4a23      	ldr	r2, [pc, #140]	; (8003aec <MX_TIM1_Init+0xac>)
 8003a60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003ab4:	f003 fcfe 	bl	80074b4 <HAL_TIM_Encoder_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003abe:	f000 fa57 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <MX_TIM1_Init+0xa8>)
 8003ad0:	f004 fd78 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003ada:	f000 fa49 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ade:	bf00      	nop
 8003ae0:	3730      	adds	r7, #48	; 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000360 	.word	0x20000360
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	; 0x38
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b04:	f107 0320 	add.w	r3, r7, #32
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	615a      	str	r2, [r3, #20]
 8003b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b36:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b48:	4829      	ldr	r0, [pc, #164]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b4a:	f003 f96f 	bl	8006e2c <HAL_TIM_Base_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b54:	f000 fa0c 	bl	8003f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	4619      	mov	r1, r3
 8003b64:	4822      	ldr	r0, [pc, #136]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b66:	f004 f84f 	bl	8007c08 <HAL_TIM_ConfigClockSource>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b70:	f000 f9fe 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b74:	481e      	ldr	r0, [pc, #120]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b76:	f003 fa45 	bl	8007004 <HAL_TIM_PWM_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003b80:	f000 f9f6 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b8c:	f107 0320 	add.w	r3, r7, #32
 8003b90:	4619      	mov	r1, r3
 8003b92:	4817      	ldr	r0, [pc, #92]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003b94:	f004 fd16 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003b9e:	f000 f9e7 	bl	8003f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ba2:	2360      	movs	r3, #96	; 0x60
 8003ba4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4619      	mov	r1, r3
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003bbc:	f003 ff66 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003bc6:	f000 f9d3 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2204      	movs	r2, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4807      	ldr	r0, [pc, #28]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003bd2:	f003 ff5b 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003bdc:	f000 f9c8 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003be0:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <MX_TIM2_Init+0x100>)
 8003be2:	f000 fb4b 	bl	800427c <HAL_TIM_MspPostInit>

}
 8003be6:	bf00      	nop
 8003be8:	3738      	adds	r7, #56	; 0x38
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200003a8 	.word	0x200003a8

08003bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c12:	463b      	mov	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <MX_TIM3_Init+0xf4>)
 8003c22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c26:	2207      	movs	r2, #7
 8003c28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c44:	4827      	ldr	r0, [pc, #156]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c46:	f003 f8f1 	bl	8006e2c <HAL_TIM_Base_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003c50:	f000 f98e 	bl	8003f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c5a:	f107 0318 	add.w	r3, r7, #24
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4820      	ldr	r0, [pc, #128]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c62:	f003 ffd1 	bl	8007c08 <HAL_TIM_ConfigClockSource>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003c6c:	f000 f980 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003c70:	481c      	ldr	r0, [pc, #112]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c72:	f003 fac1 	bl	80071f8 <HAL_TIM_IC_Init>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c7c:	f000 f978 	bl	8003f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c88:	f107 0310 	add.w	r3, r7, #16
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4815      	ldr	r0, [pc, #84]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003c90:	f004 fc98 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003c9a:	f000 f969 	bl	8003f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003cae:	463b      	mov	r3, r7
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	480b      	ldr	r0, [pc, #44]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003cb6:	f003 fe55 	bl	8007964 <HAL_TIM_IC_ConfigChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003cc0:	f000 f956 	bl	8003f70 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4806      	ldr	r0, [pc, #24]	; (8003ce4 <MX_TIM3_Init+0xf0>)
 8003ccc:	f003 fe4a 	bl	8007964 <HAL_TIM_IC_ConfigChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003cd6:	f000 f94b 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200003f0 	.word	0x200003f0
 8003ce8:	40000400 	.word	0x40000400

08003cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <MX_USART2_UART_Init+0x50>)
 8003cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d12:	220c      	movs	r2, #12
 8003d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d24:	f004 fcbe 	bl	80086a4 <HAL_UART_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d2e:	f000 f91f 	bl	8003f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000438 	.word	0x20000438
 8003d3c:	40004400 	.word	0x40004400

08003d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d54:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6193      	str	r3, [r2, #24]
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6c:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d72:	f043 0320 	orr.w	r3, r3, #32
 8003d76:	6193      	str	r3, [r2, #24]
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6193      	str	r3, [r2, #24]
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9c:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4a31      	ldr	r2, [pc, #196]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	6193      	str	r3, [r2, #24]
 8003da8:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <MX_GPIO_Init+0x128>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dba:	482c      	ldr	r0, [pc, #176]	; (8003e6c <MX_GPIO_Init+0x12c>)
 8003dbc:	f001 fb66 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRONT_TRIG_GPIO_Port, FRONT_TRIG_Pin, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	482a      	ldr	r0, [pc, #168]	; (8003e70 <MX_GPIO_Init+0x130>)
 8003dc6:	f001 fb61 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIDE_TRIG_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	215a      	movs	r1, #90	; 0x5a
 8003dce:	4829      	ldr	r0, [pc, #164]	; (8003e74 <MX_GPIO_Init+0x134>)
 8003dd0:	f001 fb5c 	bl	800548c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2302      	movs	r3, #2
 8003de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4619      	mov	r1, r3
 8003dec:	481f      	ldr	r0, [pc, #124]	; (8003e6c <MX_GPIO_Init+0x12c>)
 8003dee:	f001 f9c9 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8003df2:	2320      	movs	r3, #32
 8003df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 0310 	add.w	r3, r7, #16
 8003e02:	4619      	mov	r1, r3
 8003e04:	481a      	ldr	r0, [pc, #104]	; (8003e70 <MX_GPIO_Init+0x130>)
 8003e06:	f001 f9bd 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRONT_TRIG_Pin */
  GPIO_InitStruct.Pin = FRONT_TRIG_Pin;
 8003e0a:	2340      	movs	r3, #64	; 0x40
 8003e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e12:	2302      	movs	r3, #2
 8003e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2302      	movs	r3, #2
 8003e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FRONT_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4813      	ldr	r0, [pc, #76]	; (8003e70 <MX_GPIO_Init+0x130>)
 8003e22:	f001 f9af 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIDE_TRIG_Pin */
  GPIO_InitStruct.Pin = SIDE_TRIG_Pin;
 8003e26:	2302      	movs	r3, #2
 8003e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2302      	movs	r3, #2
 8003e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIDE_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480d      	ldr	r0, [pc, #52]	; (8003e74 <MX_GPIO_Init+0x134>)
 8003e3e:	f001 f9a1 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8003e42:	2358      	movs	r3, #88	; 0x58
 8003e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e52:	f107 0310 	add.w	r3, r7, #16
 8003e56:	4619      	mov	r1, r3
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <MX_GPIO_Init+0x134>)
 8003e5a:	f001 f993 	bl	8005184 <HAL_GPIO_Init>

}
 8003e5e:	bf00      	nop
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40010800 	.word	0x40010800
 8003e74:	40010c00 	.word	0x40010c00

08003e78 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) //motor encoder
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d150      	bne.n	8003f2c <HAL_TIM_IC_CaptureCallback+0xb4>
	{
		Motor_Encoder *right_motor_encoder;
		right_motor_encoder= &right_encoder;
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003e8c:	60fb      	str	r3, [r7, #12]

		//CW is positive
		counter = __HAL_TIM_GET_COUNTER(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003e96:	6013      	str	r3, [r2, #0]
		right_motor_encoder->counter = counter;
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

		//count becomes negative rather than jumping to 65000
		count = (int16_t)counter;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003ea8:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->count = count;
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003eac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	809a      	strh	r2, [r3, #4]

		//a single count normally is counted by 4 points, will have to test the number
		position = count/4;
 8003eb4:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da00      	bge.n	8003ec0 <HAL_TIM_IC_CaptureCallback+0x48>
 8003ebe:	3303      	adds	r3, #3
 8003ec0:	109b      	asrs	r3, r3, #2
 8003ec2:	b21a      	sxth	r2, r3
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8003ec6:	801a      	strh	r2, [r3, #0]
		right_motor_encoder->position = position;
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8003eca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	80da      	strh	r2, [r3, #6]

		distance = (2*3.1415*right_motor_encoder->wheel_radius) * position /3; // might have consider gear ratio in this calculation
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ed8:	a31b      	add	r3, pc, #108	; (adr r3, 8003f48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc fafb 	bl	80004d8 <__aeabi_dmul>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461d      	mov	r5, r3
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8003eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fa87 	bl	8000404 <__aeabi_i2d>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	f7fc faeb 	bl	80004d8 <__aeabi_dmul>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_TIM_IC_CaptureCallback+0xec>)
 8003f10:	f7fc fc0c 	bl	800072c <__aeabi_ddiv>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4913      	ldr	r1, [pc, #76]	; (8003f68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003f1a:	e9c1 2300 	strd	r2, r3, [r1]
		right_motor_encoder->distance = distance;
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	e9c1 2306 	strd	r2, r3, [r1, #24]
	else if (htim->Instance == TIM3) //ultrasonic
	{
		HCSR04_timer_input_CC (htim);
	}

}
 8003f2a:	e007      	b.n	8003f3c <HAL_TIM_IC_CaptureCallback+0xc4>
	else if (htim->Instance == TIM3) //ultrasonic
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d102      	bne.n	8003f3c <HAL_TIM_IC_CaptureCallback+0xc4>
		HCSR04_timer_input_CC (htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fbca 	bl	80046d0 <HCSR04_timer_input_CC>
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bdb0      	pop	{r4, r5, r7, pc}
 8003f44:	f3af 8000 	nop.w
 8003f48:	c083126f 	.word	0xc083126f
 8003f4c:	401921ca 	.word	0x401921ca
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	20000010 	.word	0x20000010
 8003f58:	20000488 	.word	0x20000488
 8003f5c:	2000048c 	.word	0x2000048c
 8003f60:	2000048e 	.word	0x2000048e
 8003f64:	40080000 	.word	0x40080000
 8003f68:	200004a0 	.word	0x200004a0
 8003f6c:	40000400 	.word	0x40000400

08003f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f74:	b672      	cpsid	i
}
 8003f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <Error_Handler+0x8>
	...

08003f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6193      	str	r3, [r2, #24]
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	61d3      	str	r3, [r2, #28]
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_MspInit+0x5c>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_MspInit+0x60>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_MspInit+0x60>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40010000 	.word	0x40010000

08003fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0310 	add.w	r3, r7, #16
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_ADC_MspInit+0x6c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d121      	bne.n	8004044 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_ADC_MspInit+0x70>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_ADC_MspInit+0x70>)
 8004006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400a:	6193      	str	r3, [r2, #24]
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_ADC_MspInit+0x70>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <HAL_ADC_MspInit+0x70>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <HAL_ADC_MspInit+0x70>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_ADC_MspInit+0x70>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_Pin;
 8004030:	2310      	movs	r3, #16
 8004032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004034:	2303      	movs	r3, #3
 8004036:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_GPIO_Port, &GPIO_InitStruct);
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	4619      	mov	r1, r3
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <HAL_ADC_MspInit+0x74>)
 8004040:	f001 f8a0 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004044:	bf00      	nop
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40012400 	.word	0x40012400
 8004050:	40021000 	.word	0x40021000
 8004054:	40010800 	.word	0x40010800

08004058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_I2C_MspInit+0x74>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d124      	bne.n	80040c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004078:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 800407e:	f043 0308 	orr.w	r3, r3, #8
 8004082:	6193      	str	r3, [r2, #24]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin|I2C_IMU_SDA_Pin;
 8004090:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004096:	2312      	movs	r3, #18
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409e:	f107 0310 	add.w	r3, r7, #16
 80040a2:	4619      	mov	r1, r3
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <HAL_I2C_MspInit+0x7c>)
 80040a6:	f001 f86d 	bl	8005184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 80040b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_I2C_MspInit+0x78>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80040c2:	bf00      	nop
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40005800 	.word	0x40005800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010c00 	.word	0x40010c00

080040d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_TIM_Encoder_MspInit+0xb4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d144      	bne.n	8004182 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 80040fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004102:	6193      	str	r3, [r2, #24]
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	6193      	str	r3, [r2, #24]
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_TIM_Encoder_MspInit+0xb8>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004128:	f44f 7340 	mov.w	r3, #768	; 0x300
 800412c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4619      	mov	r1, r3
 800413c:	4815      	ldr	r0, [pc, #84]	; (8004194 <HAL_TIM_Encoder_MspInit+0xbc>)
 800413e:	f001 f821 	bl	8005184 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8004142:	2200      	movs	r2, #0
 8004144:	2100      	movs	r1, #0
 8004146:	2018      	movs	r0, #24
 8004148:	f000 ffe5 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800414c:	2018      	movs	r0, #24
 800414e:	f000 fffe 	bl	800514e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004152:	2200      	movs	r2, #0
 8004154:	2100      	movs	r1, #0
 8004156:	2019      	movs	r0, #25
 8004158:	f000 ffdd 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800415c:	2019      	movs	r0, #25
 800415e:	f000 fff6 	bl	800514e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	201a      	movs	r0, #26
 8004168:	f000 ffd5 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800416c:	201a      	movs	r0, #26
 800416e:	f000 ffee 	bl	800514e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	201b      	movs	r0, #27
 8004178:	f000 ffcd 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800417c:	201b      	movs	r0, #27
 800417e:	f000 ffe6 	bl	800514e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004182:	bf00      	nop
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40010800 	.word	0x40010800

08004198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0318 	add.w	r3, r7, #24
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d10c      	bne.n	80041d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	4a2b      	ldr	r2, [pc, #172]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	61d3      	str	r3, [r2, #28]
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041d0:	e048      	b.n	8004264 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_TIM_Base_MspInit+0xd8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d143      	bne.n	8004264 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041dc:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	61d3      	str	r3, [r2, #28]
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6193      	str	r3, [r2, #24]
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 8004212:	f043 0308 	orr.w	r3, r3, #8
 8004216:	6193      	str	r3, [r2, #24]
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_TIM_Base_MspInit+0xd4>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FRONT_ECHO_Pin;
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FRONT_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004230:	f107 0318 	add.w	r3, r7, #24
 8004234:	4619      	mov	r1, r3
 8004236:	480f      	ldr	r0, [pc, #60]	; (8004274 <HAL_TIM_Base_MspInit+0xdc>)
 8004238:	f000 ffa4 	bl	8005184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIDE_ECHO_Pin;
 800423c:	2301      	movs	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIDE_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004248:	f107 0318 	add.w	r3, r7, #24
 800424c:	4619      	mov	r1, r3
 800424e:	480a      	ldr	r0, [pc, #40]	; (8004278 <HAL_TIM_Base_MspInit+0xe0>)
 8004250:	f000 ff98 	bl	8005184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004254:	2200      	movs	r2, #0
 8004256:	2100      	movs	r1, #0
 8004258:	201d      	movs	r0, #29
 800425a:	f000 ff5c 	bl	8005116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800425e:	201d      	movs	r0, #29
 8004260:	f000 ff75 	bl	800514e <HAL_NVIC_EnableIRQ>
}
 8004264:	bf00      	nop
 8004266:	3728      	adds	r7, #40	; 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	40000400 	.word	0x40000400
 8004274:	40010800 	.word	0x40010800
 8004278:	40010c00 	.word	0x40010c00

0800427c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d117      	bne.n	80042cc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_TIM_MspPostInit+0x58>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <HAL_TIM_MspPostInit+0x58>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6193      	str	r3, [r2, #24]
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_TIM_MspPostInit+0x58>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LEFT_PWM_Pin|RIGHT_PWM_Pin;
 80042b4:	2303      	movs	r3, #3
 80042b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b8:	2302      	movs	r3, #2
 80042ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042bc:	2302      	movs	r3, #2
 80042be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	4619      	mov	r1, r3
 80042c6:	4804      	ldr	r0, [pc, #16]	; (80042d8 <HAL_TIM_MspPostInit+0x5c>)
 80042c8:	f000 ff5c 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40010800 	.word	0x40010800

080042dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_UART_MspInit+0x88>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d12f      	bne.n	800435c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <HAL_UART_MspInit+0x8c>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_UART_MspInit+0x8c>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004306:	61d3      	str	r3, [r2, #28]
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_UART_MspInit+0x8c>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_UART_MspInit+0x8c>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a13      	ldr	r2, [pc, #76]	; (8004368 <HAL_UART_MspInit+0x8c>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_UART_MspInit+0x8c>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800432c:	2304      	movs	r3, #4
 800432e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004330:	2302      	movs	r3, #2
 8004332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004338:	f107 0310 	add.w	r3, r7, #16
 800433c:	4619      	mov	r1, r3
 800433e:	480b      	ldr	r0, [pc, #44]	; (800436c <HAL_UART_MspInit+0x90>)
 8004340:	f000 ff20 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004344:	2308      	movs	r3, #8
 8004346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	4619      	mov	r1, r3
 8004356:	4805      	ldr	r0, [pc, #20]	; (800436c <HAL_UART_MspInit+0x90>)
 8004358:	f000 ff14 	bl	8005184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800435c:	bf00      	nop
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40004400 	.word	0x40004400
 8004368:	40021000 	.word	0x40021000
 800436c:	40010800 	.word	0x40010800

08004370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004374:	e7fe      	b.n	8004374 <NMI_Handler+0x4>

08004376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800437a:	e7fe      	b.n	800437a <HardFault_Handler+0x4>

0800437c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004380:	e7fe      	b.n	8004380 <MemManage_Handler+0x4>

08004382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004386:	e7fe      	b.n	8004386 <BusFault_Handler+0x4>

08004388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800438c:	e7fe      	b.n	800438c <UsageFault_Handler+0x4>

0800438e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	0000      	movs	r0, r0
 80043b4:	0000      	movs	r0, r0
	...

080043b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 80043bc:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <SysTick_Handler+0x100>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	4a3d      	ldr	r2, [pc, #244]	; (80044b8 <SysTick_Handler+0x100>)
 80043c4:	6013      	str	r3, [r2, #0]
	if ( indx == 500) //calculated every half second
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <SysTick_Handler+0x100>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043ce:	d16b      	bne.n	80044a8 <SysTick_Handler+0xf0>
	{
		//speed in clicks per second
		speed = ((position - oldpos)*2);
 80043d0:	4b3a      	ldr	r3, [pc, #232]	; (80044bc <SysTick_Handler+0x104>)
 80043d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d6:	461a      	mov	r2, r3
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <SysTick_Handler+0x108>)
 80043da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc f80e 	bl	8000404 <__aeabi_i2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4935      	ldr	r1, [pc, #212]	; (80044c4 <SysTick_Handler+0x10c>)
 80043ee:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.speed = speed;
 80043f2:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <SysTick_Handler+0x10c>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	4933      	ldr	r1, [pc, #204]	; (80044c8 <SysTick_Handler+0x110>)
 80043fa:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//velocity
		position_m = (2*3.1415*0.07042) * position /3;
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <SysTick_Handler+0x104>)
 8004400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fb fffd 	bl	8000404 <__aeabi_i2d>
 800440a:	a329      	add	r3, pc, #164	; (adr r3, 80044b0 <SysTick_Handler+0xf8>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f862 	bl	80004d8 <__aeabi_dmul>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <SysTick_Handler+0x114>)
 8004422:	f7fc f983 	bl	800072c <__aeabi_ddiv>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4929      	ldr	r1, [pc, #164]	; (80044d0 <SysTick_Handler+0x118>)
 800442c:	e9c1 2300 	strd	r2, r3, [r1]
		oldpos_m = (2*3.1415*0.07042) * oldpos /3;
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <SysTick_Handler+0x108>)
 8004432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb ffe4 	bl	8000404 <__aeabi_i2d>
 800443c:	a31c      	add	r3, pc, #112	; (adr r3, 80044b0 <SysTick_Handler+0xf8>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc f849 	bl	80004d8 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <SysTick_Handler+0x114>)
 8004454:	f7fc f96a 	bl	800072c <__aeabi_ddiv>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	491d      	ldr	r1, [pc, #116]	; (80044d4 <SysTick_Handler+0x11c>)
 800445e:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = ((position_m - oldpos_m)*2);
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <SysTick_Handler+0x118>)
 8004464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <SysTick_Handler+0x11c>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fb fe7b 	bl	8000168 <__aeabi_dsub>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	f7fb fe75 	bl	800016c <__adddf3>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4914      	ldr	r1, [pc, #80]	; (80044d8 <SysTick_Handler+0x120>)
 8004488:	e9c1 2300 	strd	r2, r3, [r1]
		right_encoder.velocity = velocity;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <SysTick_Handler+0x120>)
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	490d      	ldr	r1, [pc, #52]	; (80044c8 <SysTick_Handler+0x110>)
 8004494:	e9c1 2304 	strd	r2, r3, [r1, #16]

		oldpos = position;
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <SysTick_Handler+0x104>)
 800449a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <SysTick_Handler+0x108>)
 80044a0:	801a      	strh	r2, [r3, #0]
		indx = 0;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <SysTick_Handler+0x100>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a8:	f000 fb0c 	bl	8004ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	05f68f13 	.word	0x05f68f13
 80044b4:	3fdc5115 	.word	0x3fdc5115
 80044b8:	200004ac 	.word	0x200004ac
 80044bc:	2000048e 	.word	0x2000048e
 80044c0:	200004a8 	.word	0x200004a8
 80044c4:	20000490 	.word	0x20000490
 80044c8:	20000010 	.word	0x20000010
 80044cc:	40080000 	.word	0x40080000
 80044d0:	200004b0 	.word	0x200004b0
 80044d4:	200004b8 	.word	0x200004b8
 80044d8:	20000498 	.word	0x20000498

080044dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <TIM1_BRK_IRQHandler+0x10>)
 80044e2:	f003 f937 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000360 	.word	0x20000360

080044f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <TIM1_UP_IRQHandler+0x10>)
 80044f6:	f003 f92d 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000360 	.word	0x20000360

08004504 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <TIM1_TRG_COM_IRQHandler+0x10>)
 800450a:	f003 f923 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000360 	.word	0x20000360

08004518 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <TIM1_CC_IRQHandler+0x10>)
 800451e:	f003 f919 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000360 	.word	0x20000360

0800452c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <TIM3_IRQHandler+0x10>)
 8004532:	f003 f90f 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200003f0 	.word	0x200003f0

08004540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
	return 1;
 8004544:	2301      	movs	r3, #1
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <_kill>:

int _kill(int pid, int sig)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004558:	f004 f980 	bl	800885c <__errno>
 800455c:	4603      	mov	r3, r0
 800455e:	2216      	movs	r2, #22
 8004560:	601a      	str	r2, [r3, #0]
	return -1;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <_exit>:

void _exit (int status)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004576:	f04f 31ff 	mov.w	r1, #4294967295
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffe7 	bl	800454e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004580:	e7fe      	b.n	8004580 <_exit+0x12>

08004582 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e00a      	b.n	80045aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004594:	f3af 8000 	nop.w
 8004598:	4601      	mov	r1, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	60ba      	str	r2, [r7, #8]
 80045a0:	b2ca      	uxtb	r2, r1
 80045a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3301      	adds	r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	dbf0      	blt.n	8004594 <_read+0x12>
	}

return len;
 80045b2:	687b      	ldr	r3, [r7, #4]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e009      	b.n	80045e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	60ba      	str	r2, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3301      	adds	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	dbf1      	blt.n	80045ce <_write+0x12>
	}
	return len;
 80045ea:	687b      	ldr	r3, [r7, #4]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_close>:

int _close(int file)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	return -1;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800461a:	605a      	str	r2, [r3, #4]
	return 0;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <_isatty>:

int _isatty(int file)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	return 1;
 8004630:	2301      	movs	r3, #1
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	return 0;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004684:	f004 f8ea 	bl	800885c <__errno>
 8004688:	4603      	mov	r3, r0
 800468a:	220c      	movs	r2, #12
 800468c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <_sbrk+0x64>)
 80046a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20005000 	.word	0x20005000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	200004c0 	.word	0x200004c0
 80046bc:	200004d8 	.word	0x200004d8

080046c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	0000      	movs	r0, r0
	...

080046d0 <HCSR04_timer_input_CC>:
	0,
	0
};

void HCSR04_timer_input_CC (TIM_HandleTypeDef *htim)
{
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	HCSR04_Type *ultrasonic;

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // Front Trig
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7f1b      	ldrb	r3, [r3, #28]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d102      	bne.n	80046e6 <HCSR04_timer_input_CC+0x16>
	{
		ultrasonic = &Front_US;
 80046e0:	4b93      	ldr	r3, [pc, #588]	; (8004930 <HCSR04_timer_input_CC+0x260>)
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e005      	b.n	80046f2 <HCSR04_timer_input_CC+0x22>
	}

	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // Side Trig
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7f1b      	ldrb	r3, [r3, #28]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d101      	bne.n	80046f2 <HCSR04_timer_input_CC+0x22>
	{
		ultrasonic = &Side_US;
 80046ee:	4b91      	ldr	r3, [pc, #580]	; (8004934 <HCSR04_timer_input_CC+0x264>)
 80046f0:	60fb      	str	r3, [r7, #12]
	}

	if (ultrasonic->FIRST_CAPTURED==0) // if the first value is not captured
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	7f1b      	ldrb	r3, [r3, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d16a      	bne.n	80047d0 <HCSR04_timer_input_CC+0x100>
	{
		ultrasonic->VAL1 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH); // read the first value
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f003 fb45 	bl	8007d90 <HAL_TIM_ReadCapturedValue>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	611a      	str	r2, [r3, #16]
//			ultrasonic->VAL1 = __HAL_TIM_GET_COUNTER(htim);
		ultrasonic->FIRST_CAPTURED = 1;  // set the first captured as true
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	771a      	strb	r2, [r3, #28]
		// Now change the polarity to falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HCSR04_timer_input_CC+0x5c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 020a 	bic.w	r2, r2, #10
 8004728:	621a      	str	r2, [r3, #32]
 800472a:	e021      	b.n	8004770 <HCSR04_timer_input_CC+0xa0>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d108      	bne.n	8004746 <HCSR04_timer_input_CC+0x76>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004742:	6213      	str	r3, [r2, #32]
 8004744:	e014      	b.n	8004770 <HCSR04_timer_input_CC+0xa0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b08      	cmp	r3, #8
 800474c:	d108      	bne.n	8004760 <HCSR04_timer_input_CC+0x90>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800475c:	6213      	str	r3, [r2, #32]
 800475e:	e007      	b.n	8004770 <HCSR04_timer_input_CC+0xa0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476e:	6213      	str	r3, [r2, #32]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HCSR04_timer_input_CC+0xba>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0202 	orr.w	r2, r2, #2
 8004786:	621a      	str	r2, [r3, #32]

		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
	}
}
 8004788:	e0f2      	b.n	8004970 <HCSR04_timer_input_CC+0x2a0>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b04      	cmp	r3, #4
 8004790:	d108      	bne.n	80047a4 <HCSR04_timer_input_CC+0xd4>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f043 0320 	orr.w	r3, r3, #32
 80047a0:	6213      	str	r3, [r2, #32]
 80047a2:	e0e5      	b.n	8004970 <HCSR04_timer_input_CC+0x2a0>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d108      	bne.n	80047be <HCSR04_timer_input_CC+0xee>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	e0d8      	b.n	8004970 <HCSR04_timer_input_CC+0x2a0>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047cc:	6213      	str	r3, [r2, #32]
}
 80047ce:	e0cf      	b.n	8004970 <HCSR04_timer_input_CC+0x2a0>
	else if (ultrasonic->FIRST_CAPTURED==1)   // if the first is already captured
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	7f1b      	ldrb	r3, [r3, #28]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 80cb 	bne.w	8004970 <HCSR04_timer_input_CC+0x2a0>
		ultrasonic->VAL2 = HAL_TIM_ReadCapturedValue(htim, ultrasonic->IC_TIM_CH);  // read second value
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f003 fad5 	bl	8007d90 <HAL_TIM_ReadCapturedValue>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
		if (ultrasonic->VAL2 > ultrasonic->VAL1)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d907      	bls.n	8004810 <HCSR04_timer_input_CC+0x140>
			ultrasonic->DIFFERENCE = ultrasonic->VAL2-ultrasonic->VAL1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	1ad2      	subs	r2, r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	619a      	str	r2, [r3, #24]
 800480e:	e00f      	b.n	8004830 <HCSR04_timer_input_CC+0x160>
		else if (ultrasonic->VAL1 > ultrasonic->VAL2)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d909      	bls.n	8004830 <HCSR04_timer_input_CC+0x160>
			ultrasonic->DIFFERENCE = (0xffff - ultrasonic->VAL1) + ultrasonic->VAL2;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800482a:	33ff      	adds	r3, #255	; 0xff
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	6193      	str	r3, [r2, #24]
		ultrasonic->SENSOR_VAL = ultrasonic->DIFFERENCE * .034/2;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fdd5 	bl	80003e4 <__aeabi_ui2d>
 800483a:	a33b      	add	r3, pc, #236	; (adr r3, 8004928 <HCSR04_timer_input_CC+0x258>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb fe4a 	bl	80004d8 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004854:	f7fb ff6a 	bl	800072c <__aeabi_ddiv>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f7fc f912 	bl	8000a88 <__aeabi_d2f>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
		ultrasonic->DISTANCE = filter(ultrasonic->SENSOR_VAL, ultrasonic->DISTANCE);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb fdda 	bl	8000428 <__aeabi_f2d>
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fdd3 	bl	8000428 <__aeabi_f2d>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4620      	mov	r0, r4
 8004888:	4629      	mov	r1, r5
 800488a:	f000 f875 	bl	8004978 <filter>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]
		ultrasonic->FIRST_CAPTURED = 0; // set back to false
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	771a      	strb	r2, [r3, #28]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, ultrasonic->IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <HCSR04_timer_input_CC+0x1e4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 020a 	bic.w	r2, r2, #10
 80048b0:	621a      	str	r2, [r3, #32]
 80048b2:	e021      	b.n	80048f8 <HCSR04_timer_input_CC+0x228>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d108      	bne.n	80048ce <HCSR04_timer_input_CC+0x1fe>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ca:	6213      	str	r3, [r2, #32]
 80048cc:	e014      	b.n	80048f8 <HCSR04_timer_input_CC+0x228>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d108      	bne.n	80048e8 <HCSR04_timer_input_CC+0x218>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e4:	6213      	str	r3, [r2, #32]
 80048e6:	e007      	b.n	80048f8 <HCSR04_timer_input_CC+0x228>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f6:	6213      	str	r3, [r2, #32]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <HCSR04_timer_input_CC+0x23e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a12      	ldr	r2, [r2, #32]
 800490a:	621a      	str	r2, [r3, #32]
 800490c:	e025      	b.n	800495a <HCSR04_timer_input_CC+0x28a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d110      	bne.n	8004938 <HCSR04_timer_input_CC+0x268>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	6213      	str	r3, [r2, #32]
 8004922:	e01a      	b.n	800495a <HCSR04_timer_input_CC+0x28a>
 8004924:	f3af 8000 	nop.w
 8004928:	b020c49c 	.word	0xb020c49c
 800492c:	3fa16872 	.word	0x3fa16872
 8004930:	2000003c 	.word	0x2000003c
 8004934:	20000064 	.word	0x20000064
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d106      	bne.n	800494e <HCSR04_timer_input_CC+0x27e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	6213      	str	r3, [r2, #32]
 800494c:	e005      	b.n	800495a <HCSR04_timer_input_CC+0x28a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	6213      	str	r3, [r2, #32]
		__HAL_TIM_DISABLE_IT(htim, ultrasonic->IC_TIM_CH);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68d9      	ldr	r1, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	43da      	mvns	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	400a      	ands	r2, r1
 800496c:	60da      	str	r2, [r3, #12]
}
 800496e:	e7ff      	b.n	8004970 <HCSR04_timer_input_CC+0x2a0>
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bdb0      	pop	{r4, r5, r7, pc}

08004978 <filter>:
{
	return Side_US.DISTANCE;
}

float filter (double Sv, double old_Kv)
{
 8004978:	b5b0      	push	{r4, r5, r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004982:	e9c7 2300 	strd	r2, r3, [r7]
	double Kv = Sv*r + old_Kv*(1-r);
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	4916      	ldr	r1, [pc, #88]	; (80049e4 <filter+0x6c>)
 800498c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004990:	f7fb fda2 	bl	80004d8 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4614      	mov	r4, r2
 800499a:	461d      	mov	r5, r3
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <filter+0x6c>)
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	4910      	ldr	r1, [pc, #64]	; (80049e8 <filter+0x70>)
 80049a8:	f7fb fbde 	bl	8000168 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b8:	f7fb fd8e 	bl	80004d8 <__aeabi_dmul>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	f7fb fbd2 	bl	800016c <__adddf3>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return Kv;
 80049d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049d4:	f7fc f858 	bl	8000a88 <__aeabi_d2f>
 80049d8:	4603      	mov	r3, r0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bdb0      	pop	{r4, r5, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	3fe00000 	.word	0x3fe00000
 80049e8:	3ff00000 	.word	0x3ff00000

080049ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80049ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80049ee:	e003      	b.n	80049f8 <LoopCopyDataInit>

080049f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80049f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049f6:	3104      	adds	r1, #4

080049f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049f8:	480a      	ldr	r0, [pc, #40]	; (8004a24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80049fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004a00:	d3f6      	bcc.n	80049f0 <CopyDataInit>
  ldr r2, =_sbss
 8004a02:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004a04:	e002      	b.n	8004a0c <LoopFillZerobss>

08004a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004a06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004a08:	f842 3b04 	str.w	r3, [r2], #4

08004a0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004a0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004a10:	d3f9      	bcc.n	8004a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a12:	f7ff fe55 	bl	80046c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a16:	f003 ff27 	bl	8008868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a1a:	f7fe fe29 	bl	8003670 <main>
  bx lr
 8004a1e:	4770      	bx	lr
  ldr r3, =_sidata
 8004a20:	0800c2c0 	.word	0x0800c2c0
  ldr r0, =_sdata
 8004a24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004a28:	20000264 	.word	0x20000264
  ldr r2, =_sbss
 8004a2c:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 8004a30:	200004d8 	.word	0x200004d8

08004a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a34:	e7fe      	b.n	8004a34 <ADC1_2_IRQHandler>
	...

08004a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <HAL_Init+0x28>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <HAL_Init+0x28>)
 8004a42:	f043 0310 	orr.w	r3, r3, #16
 8004a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a48:	2003      	movs	r0, #3
 8004a4a:	f000 fb59 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f000 f808 	bl	8004a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a54:	f7ff fa92 	bl	8003f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40022000 	.word	0x40022000

08004a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <HAL_InitTick+0x54>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_InitTick+0x58>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fb71 	bl	800516a <HAL_SYSTICK_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e00e      	b.n	8004ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d80a      	bhi.n	8004aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	f000 fb39 	bl	8005116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004aa4:	4a06      	ldr	r2, [pc, #24]	; (8004ac0 <HAL_InitTick+0x5c>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000038 	.word	0x20000038
 8004abc:	20000090 	.word	0x20000090
 8004ac0:	2000008c 	.word	0x2000008c

08004ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_IncTick+0x1c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_IncTick+0x20>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4a03      	ldr	r2, [pc, #12]	; (8004ae4 <HAL_IncTick+0x20>)
 8004ad6:	6013      	str	r3, [r2, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	20000090 	.word	0x20000090
 8004ae4:	200004c4 	.word	0x200004c4

08004ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return uwTick;
 8004aec:	4b02      	ldr	r3, [pc, #8]	; (8004af8 <HAL_GetTick+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	200004c4 	.word	0x200004c4

08004afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d005      	beq.n	8004b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <HAL_Delay+0x44>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b22:	bf00      	nop
 8004b24:	f7ff ffe0 	bl	8004ae8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d8f7      	bhi.n	8004b24 <HAL_Delay+0x28>
  {
  }
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000090 	.word	0x20000090

08004b44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0be      	b.n	8004ce4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fa2c 	bl	8003fe0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9ab 	bl	8004ee4 <ADC_ConversionStop_Disable>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f040 8099 	bne.w	8004cd2 <HAL_ADC_Init+0x18e>
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 8095 	bne.w	8004cd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	f043 0202 	orr.w	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004bc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7b1b      	ldrb	r3, [r3, #12]
 8004bca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004bcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d003      	beq.n	8004be6 <HAL_ADC_Init+0xa2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_ADC_Init+0xa8>
 8004be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bea:	e000      	b.n	8004bee <HAL_ADC_Init+0xaa>
 8004bec:	2300      	movs	r3, #0
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7d1b      	ldrb	r3, [r3, #20]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d119      	bne.n	8004c30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7b1b      	ldrb	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	035a      	lsls	r2, r3, #13
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e00b      	b.n	8004c30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	4b28      	ldr	r3, [pc, #160]	; (8004cec <HAL_ADC_Init+0x1a8>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d003      	beq.n	8004c6a <HAL_ADC_Init+0x126>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d104      	bne.n	8004c74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	051b      	lsls	r3, r3, #20
 8004c72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <HAL_ADC_Init+0x1ac>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d10b      	bne.n	8004cb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004cae:	e018      	b.n	8004ce2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	f023 0312 	bic.w	r3, r3, #18
 8004cb8:	f043 0210 	orr.w	r2, r3, #16
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004cd0:	e007      	b.n	8004ce2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	f043 0210 	orr.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	ffe1f7fd 	.word	0xffe1f7fd
 8004cf0:	ff1f0efe 	.word	0xff1f0efe

08004cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x20>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0dc      	b.n	8004ece <HAL_ADC_ConfigChannel+0x1da>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d81c      	bhi.n	8004d5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	3b05      	subs	r3, #5
 8004d36:	221f      	movs	r2, #31
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	4019      	ands	r1, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3b05      	subs	r3, #5
 8004d50:	fa00 f203 	lsl.w	r2, r0, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8004d5c:	e03c      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d81c      	bhi.n	8004da0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	3b23      	subs	r3, #35	; 0x23
 8004d78:	221f      	movs	r2, #31
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	4019      	ands	r1, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	3b23      	subs	r3, #35	; 0x23
 8004d92:	fa00 f203 	lsl.w	r2, r0, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d9e:	e01b      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	3b41      	subs	r3, #65	; 0x41
 8004db2:	221f      	movs	r2, #31
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	4019      	ands	r1, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	3b41      	subs	r3, #65	; 0x41
 8004dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d91c      	bls.n	8004e1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68d9      	ldr	r1, [r3, #12]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	3b1e      	subs	r3, #30
 8004df2:	2207      	movs	r2, #7
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	4019      	ands	r1, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6898      	ldr	r0, [r3, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	3b1e      	subs	r3, #30
 8004e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	e019      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6919      	ldr	r1, [r3, #16]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	4019      	ands	r1, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6898      	ldr	r0, [r3, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	fa00 f203 	lsl.w	r2, r0, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d003      	beq.n	8004e5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e5a:	2b11      	cmp	r3, #17
 8004e5c:	d132      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d125      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d126      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_ADC_ConfigChannel+0x1e8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	0c9a      	lsrs	r2, r3, #18
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ea4:	e002      	b.n	8004eac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f9      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x1b2>
 8004eb2:	e007      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40012400 	.word	0x40012400
 8004edc:	20000038 	.word	0x20000038
 8004ee0:	431bde83 	.word	0x431bde83

08004ee4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d12e      	bne.n	8004f5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f0e:	f7ff fdeb 	bl	8004ae8 <HAL_GetTick>
 8004f12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f14:	e01b      	b.n	8004f4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f16:	f7ff fde7 	bl	8004ae8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d914      	bls.n	8004f4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10d      	bne.n	8004f4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f043 0210 	orr.w	r2, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e007      	b.n	8004f5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d0dc      	beq.n	8004f16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	60d3      	str	r3, [r2, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 0307 	and.w	r3, r3, #7
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db0b      	blt.n	8004ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	4906      	ldr	r1, [pc, #24]	; (8005000 <__NVIC_EnableIRQ+0x34>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2001      	movs	r0, #1
 8004fee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	e000e100 	.word	0xe000e100

08005004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005014:	2b00      	cmp	r3, #0
 8005016:	db0a      	blt.n	800502e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	490c      	ldr	r1, [pc, #48]	; (8005050 <__NVIC_SetPriority+0x4c>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	440b      	add	r3, r1
 8005028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800502c:	e00a      	b.n	8005044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4908      	ldr	r1, [pc, #32]	; (8005054 <__NVIC_SetPriority+0x50>)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	3b04      	subs	r3, #4
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	440b      	add	r3, r1
 8005042:	761a      	strb	r2, [r3, #24]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e100 	.word	0xe000e100
 8005054:	e000ed00 	.word	0xe000ed00

08005058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f1c3 0307 	rsb	r3, r3, #7
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf28      	it	cs
 8005076:	2304      	movcs	r3, #4
 8005078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3304      	adds	r3, #4
 800507e:	2b06      	cmp	r3, #6
 8005080:	d902      	bls.n	8005088 <NVIC_EncodePriority+0x30>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3b03      	subs	r3, #3
 8005086:	e000      	b.n	800508a <NVIC_EncodePriority+0x32>
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	401a      	ands	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a0:	f04f 31ff 	mov.w	r1, #4294967295
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	43d9      	mvns	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	4313      	orrs	r3, r2
         );
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050cc:	d301      	bcc.n	80050d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ce:	2301      	movs	r3, #1
 80050d0:	e00f      	b.n	80050f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <SysTick_Config+0x40>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050da:	210f      	movs	r1, #15
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	f7ff ff90 	bl	8005004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Config+0x40>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <SysTick_Config+0x40>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010

08005100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff2d 	bl	8004f68 <__NVIC_SetPriorityGrouping>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005128:	f7ff ff42 	bl	8004fb0 <__NVIC_GetPriorityGrouping>
 800512c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff ff90 	bl	8005058 <NVIC_EncodePriority>
 8005138:	4602      	mov	r2, r0
 800513a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff5f 	bl	8005004 <__NVIC_SetPriority>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	4603      	mov	r3, r0
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff ff35 	bl	8004fcc <__NVIC_EnableIRQ>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ffa2 	bl	80050bc <SysTick_Config>
 8005178:	4603      	mov	r3, r0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b480      	push	{r7}
 8005186:	b08b      	sub	sp, #44	; 0x2c
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005196:	e169      	b.n	800546c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005198:	2201      	movs	r2, #1
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	f040 8158 	bne.w	8005466 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4a9a      	ldr	r2, [pc, #616]	; (8005424 <HAL_GPIO_Init+0x2a0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d05e      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051c0:	4a98      	ldr	r2, [pc, #608]	; (8005424 <HAL_GPIO_Init+0x2a0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d875      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051c6:	4a98      	ldr	r2, [pc, #608]	; (8005428 <HAL_GPIO_Init+0x2a4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d058      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051cc:	4a96      	ldr	r2, [pc, #600]	; (8005428 <HAL_GPIO_Init+0x2a4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d86f      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051d2:	4a96      	ldr	r2, [pc, #600]	; (800542c <HAL_GPIO_Init+0x2a8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d052      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051d8:	4a94      	ldr	r2, [pc, #592]	; (800542c <HAL_GPIO_Init+0x2a8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d869      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051de:	4a94      	ldr	r2, [pc, #592]	; (8005430 <HAL_GPIO_Init+0x2ac>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04c      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051e4:	4a92      	ldr	r2, [pc, #584]	; (8005430 <HAL_GPIO_Init+0x2ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d863      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051ea:	4a92      	ldr	r2, [pc, #584]	; (8005434 <HAL_GPIO_Init+0x2b0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d046      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051f0:	4a90      	ldr	r2, [pc, #576]	; (8005434 <HAL_GPIO_Init+0x2b0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d85d      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051f6:	2b12      	cmp	r3, #18
 80051f8:	d82a      	bhi.n	8005250 <HAL_GPIO_Init+0xcc>
 80051fa:	2b12      	cmp	r3, #18
 80051fc:	d859      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <HAL_GPIO_Init+0x80>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	0800527f 	.word	0x0800527f
 8005208:	08005259 	.word	0x08005259
 800520c:	0800526b 	.word	0x0800526b
 8005210:	080052ad 	.word	0x080052ad
 8005214:	080052b3 	.word	0x080052b3
 8005218:	080052b3 	.word	0x080052b3
 800521c:	080052b3 	.word	0x080052b3
 8005220:	080052b3 	.word	0x080052b3
 8005224:	080052b3 	.word	0x080052b3
 8005228:	080052b3 	.word	0x080052b3
 800522c:	080052b3 	.word	0x080052b3
 8005230:	080052b3 	.word	0x080052b3
 8005234:	080052b3 	.word	0x080052b3
 8005238:	080052b3 	.word	0x080052b3
 800523c:	080052b3 	.word	0x080052b3
 8005240:	080052b3 	.word	0x080052b3
 8005244:	080052b3 	.word	0x080052b3
 8005248:	08005261 	.word	0x08005261
 800524c:	08005275 	.word	0x08005275
 8005250:	4a79      	ldr	r2, [pc, #484]	; (8005438 <HAL_GPIO_Init+0x2b4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005256:	e02c      	b.n	80052b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	623b      	str	r3, [r7, #32]
          break;
 800525e:	e029      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	3304      	adds	r3, #4
 8005266:	623b      	str	r3, [r7, #32]
          break;
 8005268:	e024      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	3308      	adds	r3, #8
 8005270:	623b      	str	r3, [r7, #32]
          break;
 8005272:	e01f      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	330c      	adds	r3, #12
 800527a:	623b      	str	r3, [r7, #32]
          break;
 800527c:	e01a      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005286:	2304      	movs	r3, #4
 8005288:	623b      	str	r3, [r7, #32]
          break;
 800528a:	e013      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005294:	2308      	movs	r3, #8
 8005296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	611a      	str	r2, [r3, #16]
          break;
 800529e:	e009      	b.n	80052b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052a0:	2308      	movs	r3, #8
 80052a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	615a      	str	r2, [r3, #20]
          break;
 80052aa:	e003      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052ac:	2300      	movs	r3, #0
 80052ae:	623b      	str	r3, [r7, #32]
          break;
 80052b0:	e000      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          break;
 80052b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2bff      	cmp	r3, #255	; 0xff
 80052b8:	d801      	bhi.n	80052be <HAL_GPIO_Init+0x13a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	e001      	b.n	80052c2 <HAL_GPIO_Init+0x13e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2bff      	cmp	r3, #255	; 0xff
 80052c8:	d802      	bhi.n	80052d0 <HAL_GPIO_Init+0x14c>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	e002      	b.n	80052d6 <HAL_GPIO_Init+0x152>
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	3b08      	subs	r3, #8
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	210f      	movs	r1, #15
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	6a39      	ldr	r1, [r7, #32]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	431a      	orrs	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80b1 	beq.w	8005466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005304:	4b4d      	ldr	r3, [pc, #308]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	4a4c      	ldr	r2, [pc, #304]	; (800543c <HAL_GPIO_Init+0x2b8>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6193      	str	r3, [r2, #24]
 8005310:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800531c:	4a48      	ldr	r2, [pc, #288]	; (8005440 <HAL_GPIO_Init+0x2bc>)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	220f      	movs	r2, #15
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a40      	ldr	r2, [pc, #256]	; (8005444 <HAL_GPIO_Init+0x2c0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_GPIO_Init+0x1ec>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <HAL_GPIO_Init+0x2c4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00d      	beq.n	800536c <HAL_GPIO_Init+0x1e8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <HAL_GPIO_Init+0x2c8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <HAL_GPIO_Init+0x1e4>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <HAL_GPIO_Init+0x2cc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_GPIO_Init+0x1e0>
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005364:	2304      	movs	r3, #4
 8005366:	e004      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005368:	2302      	movs	r3, #2
 800536a:	e002      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005370:	2300      	movs	r3, #0
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	f002 0203 	and.w	r2, r2, #3
 8005378:	0092      	lsls	r2, r2, #2
 800537a:	4093      	lsls	r3, r2
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005382:	492f      	ldr	r1, [pc, #188]	; (8005440 <HAL_GPIO_Init+0x2bc>)
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	3302      	adds	r3, #2
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800539c:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	492c      	ldr	r1, [pc, #176]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	e006      	b.n	80053b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053aa:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	4928      	ldr	r1, [pc, #160]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4922      	ldr	r1, [pc, #136]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
 80053d0:	e006      	b.n	80053e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	43db      	mvns	r3, r3
 80053da:	491e      	ldr	r1, [pc, #120]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4918      	ldr	r1, [pc, #96]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	e006      	b.n	8005408 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	43db      	mvns	r3, r3
 8005402:	4914      	ldr	r1, [pc, #80]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 8005404:	4013      	ands	r3, r2
 8005406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	60cb      	str	r3, [r1, #12]
 8005420:	e021      	b.n	8005466 <HAL_GPIO_Init+0x2e2>
 8005422:	bf00      	nop
 8005424:	10320000 	.word	0x10320000
 8005428:	10310000 	.word	0x10310000
 800542c:	10220000 	.word	0x10220000
 8005430:	10210000 	.word	0x10210000
 8005434:	10120000 	.word	0x10120000
 8005438:	10110000 	.word	0x10110000
 800543c:	40021000 	.word	0x40021000
 8005440:	40010000 	.word	0x40010000
 8005444:	40010800 	.word	0x40010800
 8005448:	40010c00 	.word	0x40010c00
 800544c:	40011000 	.word	0x40011000
 8005450:	40011400 	.word	0x40011400
 8005454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_GPIO_Init+0x304>)
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	43db      	mvns	r3, r3
 8005460:	4909      	ldr	r1, [pc, #36]	; (8005488 <HAL_GPIO_Init+0x304>)
 8005462:	4013      	ands	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	3301      	adds	r3, #1
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f ae8e 	bne.w	8005198 <HAL_GPIO_Init+0x14>
  }
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	372c      	adds	r7, #44	; 0x2c
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	40010400 	.word	0x40010400

0800548c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
 8005498:	4613      	mov	r3, r2
 800549a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800549c:	787b      	ldrb	r3, [r7, #1]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80054a8:	e003      	b.n	80054b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054aa:	887b      	ldrh	r3, [r7, #2]
 80054ac:	041a      	lsls	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4013      	ands	r3, r2
 80054d4:	041a      	lsls	r2, r3, #16
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	43d9      	mvns	r1, r3
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	400b      	ands	r3, r1
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	611a      	str	r2, [r3, #16]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e12b      	b.n	800575a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fe fd9e 	bl	8004058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005554:	f001 fb6e 	bl	8006c34 <HAL_RCC_GetPCLK1Freq>
 8005558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4a81      	ldr	r2, [pc, #516]	; (8005764 <HAL_I2C_Init+0x274>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d807      	bhi.n	8005574 <HAL_I2C_Init+0x84>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a80      	ldr	r2, [pc, #512]	; (8005768 <HAL_I2C_Init+0x278>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf94      	ite	ls
 800556c:	2301      	movls	r3, #1
 800556e:	2300      	movhi	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e006      	b.n	8005582 <HAL_I2C_Init+0x92>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a7d      	ldr	r2, [pc, #500]	; (800576c <HAL_I2C_Init+0x27c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	bf94      	ite	ls
 800557c:	2301      	movls	r3, #1
 800557e:	2300      	movhi	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0e7      	b.n	800575a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a78      	ldr	r2, [pc, #480]	; (8005770 <HAL_I2C_Init+0x280>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0c9b      	lsrs	r3, r3, #18
 8005594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a6a      	ldr	r2, [pc, #424]	; (8005764 <HAL_I2C_Init+0x274>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d802      	bhi.n	80055c4 <HAL_I2C_Init+0xd4>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3301      	adds	r3, #1
 80055c2:	e009      	b.n	80055d8 <HAL_I2C_Init+0xe8>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	4a69      	ldr	r2, [pc, #420]	; (8005774 <HAL_I2C_Init+0x284>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	3301      	adds	r3, #1
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	495c      	ldr	r1, [pc, #368]	; (8005764 <HAL_I2C_Init+0x274>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d819      	bhi.n	800562c <HAL_I2C_Init+0x13c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e59      	subs	r1, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fbb1 f3f3 	udiv	r3, r1, r3
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800560c:	400b      	ands	r3, r1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_I2C_Init+0x138>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1e59      	subs	r1, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005626:	e051      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005628:	2304      	movs	r3, #4
 800562a:	e04f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <HAL_I2C_Init+0x168>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e012      	b.n	800567e <HAL_I2C_Init+0x18e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1e58      	subs	r0, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	0099      	lsls	r1, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	fbb0 f3f3 	udiv	r3, r0, r3
 800566e:	3301      	adds	r3, #1
 8005670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Init+0x196>
 8005682:	2301      	movs	r3, #1
 8005684:	e022      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <HAL_I2C_Init+0x1bc>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1e58      	subs	r0, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	440b      	add	r3, r1
 800569c:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a0:	3301      	adds	r3, #1
 80056a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056aa:	e00f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1e58      	subs	r0, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	0099      	lsls	r1, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c2:	3301      	adds	r3, #1
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	6809      	ldr	r1, [r1, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6911      	ldr	r1, [r2, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68d2      	ldr	r2, [r2, #12]
 8005706:	4311      	orrs	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	430b      	orrs	r3, r1
 800570e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	000186a0 	.word	0x000186a0
 8005768:	001e847f 	.word	0x001e847f
 800576c:	003d08ff 	.word	0x003d08ff
 8005770:	431bde83 	.word	0x431bde83
 8005774:	10624dd3 	.word	0x10624dd3

08005778 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	461a      	mov	r2, r3
 8005784:	460b      	mov	r3, r1
 8005786:	817b      	strh	r3, [r7, #10]
 8005788:	4613      	mov	r3, r2
 800578a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800578c:	f7ff f9ac 	bl	8004ae8 <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	f040 80e0 	bne.w	8005960 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2319      	movs	r3, #25
 80057a6:	2201      	movs	r2, #1
 80057a8:	4970      	ldr	r1, [pc, #448]	; (800596c <HAL_I2C_Master_Transmit+0x1f4>)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fc92 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0d3      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_I2C_Master_Transmit+0x50>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0cc      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d007      	beq.n	80057ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2221      	movs	r2, #33	; 0x21
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2210      	movs	r2, #16
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	893a      	ldrh	r2, [r7, #8]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a50      	ldr	r2, [pc, #320]	; (8005970 <HAL_I2C_Master_Transmit+0x1f8>)
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005830:	8979      	ldrh	r1, [r7, #10]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fafc 	bl	8005e34 <I2C_MasterRequestWrite>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e08d      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800585c:	e066      	b.n	800592c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	6a39      	ldr	r1, [r7, #32]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fd0c 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00d      	beq.n	800588a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b04      	cmp	r3, #4
 8005874:	d107      	bne.n	8005886 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e06b      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d11b      	bne.n	8005900 <HAL_I2C_Master_Transmit+0x188>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	6a39      	ldr	r1, [r7, #32]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fcfc 	bl	8006302 <I2C_WaitOnBTFFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	2b04      	cmp	r3, #4
 8005916:	d107      	bne.n	8005928 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e01a      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d194      	bne.n	800585e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	00100002 	.word	0x00100002
 8005970:	ffff0000 	.word	0xffff0000

08005974 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	607a      	str	r2, [r7, #4]
 800597e:	461a      	mov	r2, r3
 8005980:	460b      	mov	r3, r1
 8005982:	817b      	strh	r3, [r7, #10]
 8005984:	4613      	mov	r3, r2
 8005986:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800598c:	f7ff f8ac 	bl	8004ae8 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	f040 823f 	bne.w	8005e1e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2319      	movs	r3, #25
 80059a6:	2201      	movs	r2, #1
 80059a8:	497f      	ldr	r1, [pc, #508]	; (8005ba8 <HAL_I2C_Master_Receive+0x234>)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fb92 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
 80059b8:	e232      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_I2C_Master_Receive+0x54>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e22b      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d007      	beq.n	80059ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2222      	movs	r2, #34	; 0x22
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	893a      	ldrh	r2, [r7, #8]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a5f      	ldr	r2, [pc, #380]	; (8005bac <HAL_I2C_Master_Receive+0x238>)
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a30:	8979      	ldrh	r1, [r7, #10]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fa7e 	bl	8005f38 <I2C_MasterRequestRead>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e1ec      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d113      	bne.n	8005a76 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e1c0      	b.n	8005df8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d11e      	bne.n	8005abc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8e:	b672      	cpsid	i
}
 8005a90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ab8:	b662      	cpsie	i
}
 8005aba:	e035      	b.n	8005b28 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d11e      	bne.n	8005b02 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ad4:	b672      	cpsid	i
}
 8005ad6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005afe:	b662      	cpsie	i
}
 8005b00:	e012      	b.n	8005b28 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005b28:	e166      	b.n	8005df8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	f200 811f 	bhi.w	8005d72 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d123      	bne.n	8005b84 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fc1f 	bl	8006384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e167      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b82:	e139      	b.n	8005df8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d152      	bne.n	8005c32 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	2200      	movs	r2, #0
 8005b94:	4906      	ldr	r1, [pc, #24]	; (8005bb0 <HAL_I2C_Master_Receive+0x23c>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fa9c 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e13c      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
 8005ba6:	bf00      	nop
 8005ba8:	00100002 	.word	0x00100002
 8005bac:	ffff0000 	.word	0xffff0000
 8005bb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb4:	b672      	cpsid	i
}
 8005bb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bfa:	b662      	cpsie	i
}
 8005bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c30:	e0e2      	b.n	8005df8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2200      	movs	r2, #0
 8005c3a:	497b      	ldr	r1, [pc, #492]	; (8005e28 <HAL_I2C_Master_Receive+0x4b4>)
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fa49 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0e9      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c5c:	b672      	cpsid	i
}
 8005c5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c92:	4b66      	ldr	r3, [pc, #408]	; (8005e2c <HAL_I2C_Master_Receive+0x4b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	4a65      	ldr	r2, [pc, #404]	; (8005e30 <HAL_I2C_Master_Receive+0x4bc>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0a1a      	lsrs	r2, r3, #8
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00da      	lsls	r2, r3, #3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d118      	bne.n	8005cea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005cda:	b662      	cpsie	i
}
 8005cdc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e09a      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d1d9      	bne.n	8005cac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d3a:	b662      	cpsie	i
}
 8005d3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d70:	e042      	b.n	8005df8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fb04 	bl	8006384 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e04c      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d118      	bne.n	8005df8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f ae94 	bne.w	8005b2a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3728      	adds	r7, #40	; 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	00010004 	.word	0x00010004
 8005e2c:	20000038 	.word	0x20000038
 8005e30:	14f8b589 	.word	0x14f8b589

08005e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	460b      	mov	r3, r1
 8005e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d006      	beq.n	8005e5e <I2C_MasterRequestWrite+0x2a>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d003      	beq.n	8005e5e <I2C_MasterRequestWrite+0x2a>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e5c:	d108      	bne.n	8005e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e00b      	b.n	8005e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	2b12      	cmp	r3, #18
 8005e76:	d107      	bne.n	8005e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f91d 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d103      	bne.n	8005eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e035      	b.n	8005f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec4:	d108      	bne.n	8005ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ec6:	897b      	ldrh	r3, [r7, #10]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ed4:	611a      	str	r2, [r3, #16]
 8005ed6:	e01b      	b.n	8005f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ed8:	897b      	ldrh	r3, [r7, #10]
 8005eda:	11db      	asrs	r3, r3, #7
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0306 	and.w	r3, r3, #6
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f063 030f 	orn	r3, r3, #15
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	490e      	ldr	r1, [pc, #56]	; (8005f30 <I2C_MasterRequestWrite+0xfc>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f943 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e010      	b.n	8005f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4907      	ldr	r1, [pc, #28]	; (8005f34 <I2C_MasterRequestWrite+0x100>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f933 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	00010008 	.word	0x00010008
 8005f34:	00010002 	.word	0x00010002

08005f38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	460b      	mov	r3, r1
 8005f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d006      	beq.n	8005f72 <I2C_MasterRequestRead+0x3a>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d003      	beq.n	8005f72 <I2C_MasterRequestRead+0x3a>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f70:	d108      	bne.n	8005f84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e00b      	b.n	8005f9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	2b11      	cmp	r3, #17
 8005f8a:	d107      	bne.n	8005f9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f893 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc2:	d103      	bne.n	8005fcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e079      	b.n	80060c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd8:	d108      	bne.n	8005fec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	611a      	str	r2, [r3, #16]
 8005fea:	e05f      	b.n	80060ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fec:	897b      	ldrh	r3, [r7, #10]
 8005fee:	11db      	asrs	r3, r3, #7
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 0306 	and.w	r3, r3, #6
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f063 030f 	orn	r3, r3, #15
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4930      	ldr	r1, [pc, #192]	; (80060cc <I2C_MasterRequestRead+0x194>)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f8b9 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e054      	b.n	80060c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4929      	ldr	r1, [pc, #164]	; (80060d0 <I2C_MasterRequestRead+0x198>)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f8a9 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e044      	b.n	80060c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800605e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f831 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006086:	d103      	bne.n	8006090 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e017      	b.n	80060c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006094:	897b      	ldrh	r3, [r7, #10]
 8006096:	11db      	asrs	r3, r3, #7
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 0306 	and.w	r3, r3, #6
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f063 030e 	orn	r3, r3, #14
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4907      	ldr	r1, [pc, #28]	; (80060d0 <I2C_MasterRequestRead+0x198>)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f865 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	00010008 	.word	0x00010008
 80060d0:	00010002 	.word	0x00010002

080060d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e4:	e025      	b.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d021      	beq.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fe fcfb 	bl	8004ae8 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d116      	bne.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e023      	b.n	800617a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10d      	bne.n	8006158 <I2C_WaitOnFlagUntilTimeout+0x84>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	e00c      	b.n	8006172 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d0b6      	beq.n	80060e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006190:	e051      	b.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a0:	d123      	bne.n	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e046      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d021      	beq.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fe fc79 	bl	8004ae8 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d116      	bne.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e020      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10c      	bne.n	800625a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	43da      	mvns	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	bf14      	ite	ne
 8006252:	2301      	movne	r3, #1
 8006254:	2300      	moveq	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	e00b      	b.n	8006272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	43da      	mvns	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d18d      	bne.n	8006192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628c:	e02d      	b.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8ce 	bl	8006430 <I2C_IsAcknowledgeFailed>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e02d      	b.n	80062fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d021      	beq.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fe fc1f 	bl	8004ae8 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d116      	bne.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e007      	b.n	80062fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d1ca      	bne.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800630e:	e02d      	b.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f88d 	bl	8006430 <I2C_IsAcknowledgeFailed>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e02d      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d021      	beq.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006328:	f7fe fbde 	bl	8004ae8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d116      	bne.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d1ca      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006390:	e042      	b.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b10      	cmp	r3, #16
 800639e:	d119      	bne.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0210 	mvn.w	r2, #16
 80063a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e029      	b.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d4:	f7fe fb88 	bl	8004ae8 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d116      	bne.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e007      	b.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d1b5      	bne.n	8006392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d11b      	bne.n	8006480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f043 0204 	orr.w	r2, r3, #4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e272      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8087 	beq.w	80065ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064ac:	4b92      	ldr	r3, [pc, #584]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d00c      	beq.n	80064d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064b8:	4b8f      	ldr	r3, [pc, #572]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d112      	bne.n	80064ea <HAL_RCC_OscConfig+0x5e>
 80064c4:	4b8c      	ldr	r3, [pc, #560]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d10b      	bne.n	80064ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d2:	4b89      	ldr	r3, [pc, #548]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d06c      	beq.n	80065b8 <HAL_RCC_OscConfig+0x12c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d168      	bne.n	80065b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e24c      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x76>
 80064f4:	4b80      	ldr	r3, [pc, #512]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a7f      	ldr	r2, [pc, #508]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e02e      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x98>
 800650a:	4b7b      	ldr	r3, [pc, #492]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7a      	ldr	r2, [pc, #488]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b78      	ldr	r3, [pc, #480]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a77      	ldr	r2, [pc, #476]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800651c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0xbc>
 800652e:	4b72      	ldr	r3, [pc, #456]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a71      	ldr	r2, [pc, #452]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b6f      	ldr	r3, [pc, #444]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6e      	ldr	r2, [pc, #440]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006548:	4b6b      	ldr	r3, [pc, #428]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6a      	ldr	r2, [pc, #424]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b68      	ldr	r3, [pc, #416]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a67      	ldr	r2, [pc, #412]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006568:	f7fe fabe 	bl	8004ae8 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7fe faba 	bl	8004ae8 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e200      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b5d      	ldr	r3, [pc, #372]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xe4>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006590:	f7fe faaa 	bl	8004ae8 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fe faa6 	bl	8004ae8 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1ec      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x10c>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d063      	beq.n	800668e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065c6:	4b4c      	ldr	r3, [pc, #304]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065d2:	4b49      	ldr	r3, [pc, #292]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d11c      	bne.n	8006618 <HAL_RCC_OscConfig+0x18c>
 80065de:	4b46      	ldr	r3, [pc, #280]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d116      	bne.n	8006618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ea:	4b43      	ldr	r3, [pc, #268]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_RCC_OscConfig+0x176>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e1c0      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006602:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4939      	ldr	r1, [pc, #228]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	e03a      	b.n	800668e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006620:	4b36      	ldr	r3, [pc, #216]	; (80066fc <HAL_RCC_OscConfig+0x270>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006626:	f7fe fa5f 	bl	8004ae8 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662e:	f7fe fa5b 	bl	8004ae8 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1a1      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664c:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4927      	ldr	r1, [pc, #156]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
 8006660:	e015      	b.n	800668e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006662:	4b26      	ldr	r3, [pc, #152]	; (80066fc <HAL_RCC_OscConfig+0x270>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006668:	f7fe fa3e 	bl	8004ae8 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006670:	f7fe fa3a 	bl	8004ae8 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e180      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d03a      	beq.n	8006710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d019      	beq.n	80066d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HAL_RCC_OscConfig+0x274>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a8:	f7fe fa1e 	bl	8004ae8 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b0:	f7fe fa1a 	bl	8004ae8 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e160      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066ce:	2001      	movs	r0, #1
 80066d0:	f000 fad8 	bl	8006c84 <RCC_Delay>
 80066d4:	e01c      	b.n	8006710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <HAL_RCC_OscConfig+0x274>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7fe fa04 	bl	8004ae8 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e2:	e00f      	b.n	8006704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e4:	f7fe fa00 	bl	8004ae8 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d908      	bls.n	8006704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e146      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	42420000 	.word	0x42420000
 8006700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006704:	4b92      	ldr	r3, [pc, #584]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e9      	bne.n	80066e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80a6 	beq.w	800686a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006722:	4b8b      	ldr	r3, [pc, #556]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4b88      	ldr	r3, [pc, #544]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	4a87      	ldr	r2, [pc, #540]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006738:	61d3      	str	r3, [r2, #28]
 800673a:	4b85      	ldr	r3, [pc, #532]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674a:	4b82      	ldr	r3, [pc, #520]	; (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d118      	bne.n	8006788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006756:	4b7f      	ldr	r3, [pc, #508]	; (8006954 <HAL_RCC_OscConfig+0x4c8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7e      	ldr	r2, [pc, #504]	; (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006762:	f7fe f9c1 	bl	8004ae8 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7fe f9bd 	bl	8004ae8 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b64      	cmp	r3, #100	; 0x64
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e103      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677c:	4b75      	ldr	r3, [pc, #468]	; (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <HAL_RCC_OscConfig+0x312>
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4a6e      	ldr	r2, [pc, #440]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	6213      	str	r3, [r2, #32]
 800679c:	e02d      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x334>
 80067a6:	4b6a      	ldr	r3, [pc, #424]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a69      	ldr	r2, [pc, #420]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	6213      	str	r3, [r2, #32]
 80067b2:	4b67      	ldr	r3, [pc, #412]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4a66      	ldr	r2, [pc, #408]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067b8:	f023 0304 	bic.w	r3, r3, #4
 80067bc:	6213      	str	r3, [r2, #32]
 80067be:	e01c      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d10c      	bne.n	80067e2 <HAL_RCC_OscConfig+0x356>
 80067c8:	4b61      	ldr	r3, [pc, #388]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	4a60      	ldr	r2, [pc, #384]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	6213      	str	r3, [r2, #32]
 80067d4:	4b5e      	ldr	r3, [pc, #376]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	4a5d      	ldr	r2, [pc, #372]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	6213      	str	r3, [r2, #32]
 80067e0:	e00b      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 80067e2:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	4a5a      	ldr	r2, [pc, #360]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	6213      	str	r3, [r2, #32]
 80067ee:	4b58      	ldr	r3, [pc, #352]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	4a57      	ldr	r2, [pc, #348]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d015      	beq.n	800682e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006802:	f7fe f971 	bl	8004ae8 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006808:	e00a      	b.n	8006820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680a:	f7fe f96d 	bl	8004ae8 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f241 3288 	movw	r2, #5000	; 0x1388
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e0b1      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006820:	4b4b      	ldr	r3, [pc, #300]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ee      	beq.n	800680a <HAL_RCC_OscConfig+0x37e>
 800682c:	e014      	b.n	8006858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682e:	f7fe f95b 	bl	8004ae8 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fe f957 	bl	8004ae8 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e09b      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684c:	4b40      	ldr	r3, [pc, #256]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ee      	bne.n	8006836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685e:	4b3c      	ldr	r3, [pc, #240]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4a3b      	ldr	r2, [pc, #236]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8087 	beq.w	8006982 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006874:	4b36      	ldr	r3, [pc, #216]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d061      	beq.n	8006944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d146      	bne.n	8006916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b33      	ldr	r3, [pc, #204]	; (8006958 <HAL_RCC_OscConfig+0x4cc>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688e:	f7fe f92b 	bl	8004ae8 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006896:	f7fe f927 	bl	8004ae8 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e06d      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d108      	bne.n	80068d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4921      	ldr	r1, [pc, #132]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d0:	4b1f      	ldr	r3, [pc, #124]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a19      	ldr	r1, [r3, #32]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	430b      	orrs	r3, r1
 80068e2:	491b      	ldr	r1, [pc, #108]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068e8:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <HAL_RCC_OscConfig+0x4cc>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ee:	f7fe f8fb 	bl	8004ae8 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f6:	f7fe f8f7 	bl	8004ae8 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e03d      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0f0      	beq.n	80068f6 <HAL_RCC_OscConfig+0x46a>
 8006914:	e035      	b.n	8006982 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006916:	4b10      	ldr	r3, [pc, #64]	; (8006958 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691c:	f7fe f8e4 	bl	8004ae8 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7fe f8e0 	bl	8004ae8 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e026      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x498>
 8006942:	e01e      	b.n	8006982 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e019      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
 8006958:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800695c:	4b0b      	ldr	r3, [pc, #44]	; (800698c <HAL_RCC_OscConfig+0x500>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	429a      	cmp	r2, r3
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697a:	429a      	cmp	r2, r3
 800697c:	d001      	beq.n	8006982 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40021000 	.word	0x40021000

08006990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0d0      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069a4:	4b6a      	ldr	r3, [pc, #424]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d910      	bls.n	80069d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b2:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 0207 	bic.w	r2, r3, #7
 80069ba:	4965      	ldr	r1, [pc, #404]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	4313      	orrs	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c2:	4b63      	ldr	r3, [pc, #396]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0b8      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069ec:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a58      	ldr	r2, [pc, #352]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a04:	4b53      	ldr	r3, [pc, #332]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a52      	ldr	r2, [pc, #328]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a10:	4b50      	ldr	r3, [pc, #320]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	494d      	ldr	r1, [pc, #308]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d040      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	4b47      	ldr	r3, [pc, #284]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d115      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e07f      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	4b41      	ldr	r3, [pc, #260]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e073      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e06b      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f023 0203 	bic.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4936      	ldr	r1, [pc, #216]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a80:	f7fe f832 	bl	8004ae8 <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f7fe f82e 	bl	8004ae8 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e053      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 020c 	and.w	r2, r3, #12
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1eb      	bne.n	8006a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b27      	ldr	r3, [pc, #156]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d210      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	4922      	ldr	r1, [pc, #136]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e032      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aec:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4916      	ldr	r1, [pc, #88]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	490e      	ldr	r1, [pc, #56]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b1e:	f000 f821 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b22:	4602      	mov	r2, r0
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	490a      	ldr	r1, [pc, #40]	; (8006b58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b30:	5ccb      	ldrb	r3, [r1, r3]
 8006b32:	fa22 f303 	lsr.w	r3, r2, r3
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <HAL_RCC_ClockConfig+0x1cc>)
 8006b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_RCC_ClockConfig+0x1d0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd ff90 	bl	8004a64 <HAL_InitTick>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40022000 	.word	0x40022000
 8006b54:	40021000 	.word	0x40021000
 8006b58:	0800be50 	.word	0x0800be50
 8006b5c:	20000038 	.word	0x20000038
 8006b60:	2000008c 	.word	0x2000008c

08006b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b490      	push	{r4, r7}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b6a:	4b29      	ldr	r3, [pc, #164]	; (8006c10 <HAL_RCC_GetSysClockFreq+0xac>)
 8006b6c:	1d3c      	adds	r4, r7, #4
 8006b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b74:	f240 2301 	movw	r3, #513	; 0x201
 8006b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b8e:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d002      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x46>
 8006ba2:	e02b      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	; (8006c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ba6:	623b      	str	r3, [r7, #32]
      break;
 8006ba8:	e02b      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	0c9b      	lsrs	r3, r3, #18
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	3328      	adds	r3, #40	; 0x28
 8006bb4:	443b      	add	r3, r7
 8006bb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006bba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d012      	beq.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bc6:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	0c5b      	lsrs	r3, r3, #17
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	3328      	adds	r3, #40	; 0x28
 8006bd2:	443b      	add	r3, r7
 8006bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bde:	fb03 f202 	mul.w	r2, r3, r2
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	e004      	b.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4a0b      	ldr	r2, [pc, #44]	; (8006c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	623b      	str	r3, [r7, #32]
      break;
 8006bfa:	e002      	b.n	8006c02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bfe:	623b      	str	r3, [r7, #32]
      break;
 8006c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3728      	adds	r7, #40	; 0x28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc90      	pop	{r4, r7}
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	0800be40 	.word	0x0800be40
 8006c14:	40021000 	.word	0x40021000
 8006c18:	007a1200 	.word	0x007a1200
 8006c1c:	003d0900 	.word	0x003d0900

08006c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr
 8006c30:	20000038 	.word	0x20000038

08006c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c38:	f7ff fff2 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	4903      	ldr	r1, [pc, #12]	; (8006c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c4a:	5ccb      	ldrb	r3, [r1, r3]
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40021000 	.word	0x40021000
 8006c58:	0800be60 	.word	0x0800be60

08006c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c60:	f7ff ffde 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	0adb      	lsrs	r3, r3, #11
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4903      	ldr	r1, [pc, #12]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	0800be60 	.word	0x0800be60

08006c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <RCC_Delay+0x34>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <RCC_Delay+0x38>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	0a5b      	lsrs	r3, r3, #9
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ca0:	bf00      	nop
  }
  while (Delay --);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1e5a      	subs	r2, r3, #1
 8006ca6:	60fa      	str	r2, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f9      	bne.n	8006ca0 <RCC_Delay+0x1c>
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr
 8006cb8:	20000038 	.word	0x20000038
 8006cbc:	10624dd3 	.word	0x10624dd3

08006cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d07d      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ce0:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10d      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cec:	4b4c      	ldr	r3, [pc, #304]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4a4b      	ldr	r2, [pc, #300]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	61d3      	str	r3, [r2, #28]
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	4b46      	ldr	r3, [pc, #280]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d118      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a42      	ldr	r2, [pc, #264]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d20:	f7fd fee2 	bl	8004ae8 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	e008      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d28:	f7fd fede 	bl	8004ae8 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b64      	cmp	r3, #100	; 0x64
 8006d34:	d901      	bls.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e06d      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3a:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d46:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02e      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d027      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d6e:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d74:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7fd fead 	bl	8004ae8 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d90:	e00a      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d92:	f7fd fea9 	bl	8004ae8 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e036      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ee      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4917      	ldr	r1, [pc, #92]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	490b      	ldr	r1, [pc, #44]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d008      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4904      	ldr	r1, [pc, #16]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40007000 	.word	0x40007000
 8006e28:	42420440 	.word	0x42420440

08006e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e041      	b.n	8006ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fd f9a0 	bl	8004198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f000 fff8 	bl	8007e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e032      	b.n	8006f4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_TIM_Base_Start+0x88>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00e      	beq.n	8006f14 <HAL_TIM_Base_Start+0x48>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d009      	beq.n	8006f14 <HAL_TIM_Base_Start+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <HAL_TIM_Base_Start+0x8c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <HAL_TIM_Base_Start+0x48>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <HAL_TIM_Base_Start+0x90>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d111      	bne.n	8006f38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d010      	beq.n	8006f48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0201 	orr.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f36:	e007      	b.n	8006f48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800

08006f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e03a      	b.n	8006fee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_TIM_Base_Start_IT+0x98>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x58>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x58>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <HAL_TIM_Base_Start_IT+0x9c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x58>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <HAL_TIM_Base_Start_IT+0xa0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d111      	bne.n	8006fdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d010      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0201 	orr.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fda:	e007      	b.n	8006fec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800

08007004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e041      	b.n	800709a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f839 	bl	80070a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f000 ff0c 	bl	8007e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <HAL_TIM_PWM_Start+0x24>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	bf14      	ite	ne
 80070d0:	2301      	movne	r3, #1
 80070d2:	2300      	moveq	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e022      	b.n	800711e <HAL_TIM_PWM_Start+0x6a>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d109      	bne.n	80070f2 <HAL_TIM_PWM_Start+0x3e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	bf14      	ite	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	2300      	moveq	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	e015      	b.n	800711e <HAL_TIM_PWM_Start+0x6a>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d109      	bne.n	800710c <HAL_TIM_PWM_Start+0x58>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	e008      	b.n	800711e <HAL_TIM_PWM_Start+0x6a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e05e      	b.n	80071e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <HAL_TIM_PWM_Start+0x82>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	e013      	b.n	800715e <HAL_TIM_PWM_Start+0xaa>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d104      	bne.n	8007146 <HAL_TIM_PWM_Start+0x92>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007144:	e00b      	b.n	800715e <HAL_TIM_PWM_Start+0xaa>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b08      	cmp	r3, #8
 800714a:	d104      	bne.n	8007156 <HAL_TIM_PWM_Start+0xa2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007154:	e003      	b.n	800715e <HAL_TIM_PWM_Start+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2201      	movs	r2, #1
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fa07 	bl	800857a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_TIM_PWM_Start+0x138>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d107      	bne.n	8007186 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a18      	ldr	r2, [pc, #96]	; (80071ec <HAL_TIM_PWM_Start+0x138>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_TIM_PWM_Start+0xfa>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d009      	beq.n	80071ae <HAL_TIM_PWM_Start+0xfa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <HAL_TIM_PWM_Start+0x13c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_TIM_PWM_Start+0xfa>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <HAL_TIM_PWM_Start+0x140>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d111      	bne.n	80071d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d010      	beq.n	80071e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	e007      	b.n	80071e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800

080071f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e041      	b.n	800728e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f839 	bl	8007296 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f000 fe12 	bl	8007e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_IC_Start_IT+0x1a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	e013      	b.n	80072ea <HAL_TIM_IC_Start_IT+0x42>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_IC_Start_IT+0x2a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e00b      	b.n	80072ea <HAL_TIM_IC_Start_IT+0x42>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_IC_Start_IT+0x3a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	e003      	b.n	80072ea <HAL_TIM_IC_Start_IT+0x42>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <HAL_TIM_IC_Start_IT+0x54>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	e013      	b.n	8007324 <HAL_TIM_IC_Start_IT+0x7c>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d104      	bne.n	800730c <HAL_TIM_IC_Start_IT+0x64>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e00b      	b.n	8007324 <HAL_TIM_IC_Start_IT+0x7c>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b08      	cmp	r3, #8
 8007310:	d104      	bne.n	800731c <HAL_TIM_IC_Start_IT+0x74>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007318:	b2db      	uxtb	r3, r3
 800731a:	e003      	b.n	8007324 <HAL_TIM_IC_Start_IT+0x7c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007322:	b2db      	uxtb	r3, r3
 8007324:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d102      	bne.n	8007332 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d001      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e0b3      	b.n	800749e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <HAL_TIM_IC_Start_IT+0x9e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007344:	e013      	b.n	800736e <HAL_TIM_IC_Start_IT+0xc6>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d104      	bne.n	8007356 <HAL_TIM_IC_Start_IT+0xae>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	e00b      	b.n	800736e <HAL_TIM_IC_Start_IT+0xc6>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d104      	bne.n	8007366 <HAL_TIM_IC_Start_IT+0xbe>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007364:	e003      	b.n	800736e <HAL_TIM_IC_Start_IT+0xc6>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <HAL_TIM_IC_Start_IT+0xd6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800737c:	e013      	b.n	80073a6 <HAL_TIM_IC_Start_IT+0xfe>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b04      	cmp	r3, #4
 8007382:	d104      	bne.n	800738e <HAL_TIM_IC_Start_IT+0xe6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800738c:	e00b      	b.n	80073a6 <HAL_TIM_IC_Start_IT+0xfe>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d104      	bne.n	800739e <HAL_TIM_IC_Start_IT+0xf6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800739c:	e003      	b.n	80073a6 <HAL_TIM_IC_Start_IT+0xfe>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b0c      	cmp	r3, #12
 80073aa:	d841      	bhi.n	8007430 <HAL_TIM_IC_Start_IT+0x188>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_TIM_IC_Start_IT+0x10c>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073e9 	.word	0x080073e9
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007431 	.word	0x08007431
 80073c0:	08007431 	.word	0x08007431
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	0800740d 	.word	0x0800740d
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007431 	.word	0x08007431
 80073e4:	0800741f 	.word	0x0800741f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0202 	orr.w	r2, r2, #2
 80073f6:	60da      	str	r2, [r3, #12]
      break;
 80073f8:	e01b      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0204 	orr.w	r2, r2, #4
 8007408:	60da      	str	r2, [r3, #12]
      break;
 800740a:	e012      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0208 	orr.w	r2, r2, #8
 800741a:	60da      	str	r2, [r3, #12]
      break;
 800741c:	e009      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0210 	orr.w	r2, r2, #16
 800742c:	60da      	str	r2, [r3, #12]
      break;
 800742e:	e000      	b.n	8007432 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007430:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2201      	movs	r2, #1
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f89d 	bl	800857a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_TIM_IC_Start_IT+0x200>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00e      	beq.n	8007468 <HAL_TIM_IC_Start_IT+0x1c0>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007452:	d009      	beq.n	8007468 <HAL_TIM_IC_Start_IT+0x1c0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a14      	ldr	r2, [pc, #80]	; (80074ac <HAL_TIM_IC_Start_IT+0x204>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <HAL_TIM_IC_Start_IT+0x1c0>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <HAL_TIM_IC_Start_IT+0x208>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d111      	bne.n	800748c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b06      	cmp	r3, #6
 8007478:	d010      	beq.n	800749c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0201 	orr.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748a:	e007      	b.n	800749c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800

080074b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e093      	b.n	80075f0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fc fdfb 	bl	80040d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f8:	f023 0307 	bic.w	r3, r3, #7
 80074fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f000 fca9 	bl	8007e60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	4313      	orrs	r3, r2
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007554:	f023 030c 	bic.w	r3, r3, #12
 8007558:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	4313      	orrs	r3, r2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	011a      	lsls	r2, r3, #4
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	031b      	lsls	r3, r3, #12
 8007584:	4313      	orrs	r3, r2
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007592:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	4313      	orrs	r3, r2
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007608:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007610:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007618:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007620:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d110      	bne.n	800764a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d102      	bne.n	8007634 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d001      	beq.n	8007638 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e089      	b.n	800774c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007648:	e031      	b.n	80076ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b04      	cmp	r3, #4
 800764e:	d110      	bne.n	8007672 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d102      	bne.n	800765c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007656:	7b3b      	ldrb	r3, [r7, #12]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d001      	beq.n	8007660 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e075      	b.n	800774c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007670:	e01d      	b.n	80076ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d108      	bne.n	800768a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d105      	bne.n	800768a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800767e:	7b7b      	ldrb	r3, [r7, #13]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d102      	bne.n	800768a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007684:	7b3b      	ldrb	r3, [r7, #12]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d001      	beq.n	800768e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e05e      	b.n	800774c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_TIM_Encoder_Start_IT+0xc4>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d010      	beq.n	80076dc <HAL_TIM_Encoder_Start_IT+0xe4>
 80076ba:	e01f      	b.n	80076fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	2100      	movs	r1, #0
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 ff58 	bl	800857a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0202 	orr.w	r2, r2, #2
 80076d8:	60da      	str	r2, [r3, #12]
      break;
 80076da:	e02e      	b.n	800773a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2201      	movs	r2, #1
 80076e2:	2104      	movs	r1, #4
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff48 	bl	800857a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0204 	orr.w	r2, r2, #4
 80076f8:	60da      	str	r2, [r3, #12]
      break;
 80076fa:	e01e      	b.n	800773a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f000 ff38 	bl	800857a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2201      	movs	r2, #1
 8007710:	2104      	movs	r1, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ff31 	bl	800857a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0202 	orr.w	r2, r2, #2
 8007726:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0204 	orr.w	r2, r2, #4
 8007736:	60da      	str	r2, [r3, #12]
      break;
 8007738:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0201 	orr.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b02      	cmp	r3, #2
 8007768:	d122      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d11b      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0202 	mvn.w	r2, #2
 8007780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fc fb6e 	bl	8003e78 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb43 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb49 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0204 	mvn.w	r2, #4
 80077d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fc fb44 	bl	8003e78 <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fb19 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fb1f 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b08      	cmp	r3, #8
 8007810:	d122      	bne.n	8007858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b08      	cmp	r3, #8
 800781e:	d11b      	bne.n	8007858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0208 	mvn.w	r2, #8
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2204      	movs	r2, #4
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fc fb1a 	bl	8003e78 <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 faef 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 faf5 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b10      	cmp	r3, #16
 8007864:	d122      	bne.n	80078ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b10      	cmp	r3, #16
 8007872:	d11b      	bne.n	80078ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0210 	mvn.w	r2, #16
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2208      	movs	r2, #8
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fc faf0 	bl	8003e78 <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fac5 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 facb 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10e      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0201 	mvn.w	r2, #1
 80078d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 faa0 	bl	8007e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d10e      	bne.n	8007904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f0:	2b80      	cmp	r3, #128	; 0x80
 80078f2:	d107      	bne.n	8007904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fec7 	bl	8008692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d10e      	bne.n	8007930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d107      	bne.n	8007930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa8f 	bl	8007e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b20      	cmp	r3, #32
 800793c:	d10e      	bne.n	800795c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b20      	cmp	r3, #32
 800794a:	d107      	bne.n	800795c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0220 	mvn.w	r2, #32
 8007954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fe92 	bl	8008680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_TIM_IC_ConfigChannel+0x1a>
 800797a:	2302      	movs	r3, #2
 800797c:	e082      	b.n	8007a84 <HAL_TIM_IC_ConfigChannel+0x120>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11b      	bne.n	80079c4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f000 fc4a 	bl	8008234 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 020c 	bic.w	r2, r2, #12
 80079ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6999      	ldr	r1, [r3, #24]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	619a      	str	r2, [r3, #24]
 80079c2:	e05a      	b.n	8007a7a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d11c      	bne.n	8007a04 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f000 fcb3 	bl	8008344 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6999      	ldr	r1, [r3, #24]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	021a      	lsls	r2, r3, #8
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	619a      	str	r2, [r3, #24]
 8007a02:	e03a      	b.n	8007a7a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d11b      	bne.n	8007a42 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f000 fcfe 	bl	800841a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 020c 	bic.w	r2, r2, #12
 8007a2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	61da      	str	r2, [r3, #28]
 8007a40:	e01b      	b.n	8007a7a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f000 fd1d 	bl	8008490 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	021a      	lsls	r2, r3, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0ac      	b.n	8007c00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b0c      	cmp	r3, #12
 8007ab2:	f200 809f 	bhi.w	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007bf5 	.word	0x08007bf5
 8007ac4:	08007bf5 	.word	0x08007bf5
 8007ac8:	08007bf5 	.word	0x08007bf5
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007bf5 	.word	0x08007bf5
 8007ad4:	08007bf5 	.word	0x08007bf5
 8007ad8:	08007bf5 	.word	0x08007bf5
 8007adc:	08007b73 	.word	0x08007b73
 8007ae0:	08007bf5 	.word	0x08007bf5
 8007ae4:	08007bf5 	.word	0x08007bf5
 8007ae8:	08007bf5 	.word	0x08007bf5
 8007aec:	08007bb3 	.word	0x08007bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fa14 	bl	8007f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0204 	bic.w	r2, r2, #4
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	619a      	str	r2, [r3, #24]
      break;
 8007b2e:	e062      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fa5a 	bl	8007ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6999      	ldr	r1, [r3, #24]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	619a      	str	r2, [r3, #24]
      break;
 8007b70:	e041      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 faa3 	bl	80080c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0208 	orr.w	r2, r2, #8
 8007b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0204 	bic.w	r2, r2, #4
 8007b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69d9      	ldr	r1, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	61da      	str	r2, [r3, #28]
      break;
 8007bb0:	e021      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 faed 	bl	8008198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69d9      	ldr	r1, [r3, #28]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	61da      	str	r2, [r3, #28]
      break;
 8007bf2:	e000      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIM_ConfigClockSource+0x18>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e0b3      	b.n	8007d88 <HAL_TIM_ConfigClockSource+0x180>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c58:	d03e      	beq.n	8007cd8 <HAL_TIM_ConfigClockSource+0xd0>
 8007c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5e:	f200 8087 	bhi.w	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	f000 8085 	beq.w	8007d74 <HAL_TIM_ConfigClockSource+0x16c>
 8007c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6e:	d87f      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c70:	2b70      	cmp	r3, #112	; 0x70
 8007c72:	d01a      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0xa2>
 8007c74:	2b70      	cmp	r3, #112	; 0x70
 8007c76:	d87b      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c78:	2b60      	cmp	r3, #96	; 0x60
 8007c7a:	d050      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x116>
 8007c7c:	2b60      	cmp	r3, #96	; 0x60
 8007c7e:	d877      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c80:	2b50      	cmp	r3, #80	; 0x50
 8007c82:	d03c      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0xf6>
 8007c84:	2b50      	cmp	r3, #80	; 0x50
 8007c86:	d873      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c88:	2b40      	cmp	r3, #64	; 0x40
 8007c8a:	d058      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x136>
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d86f      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c90:	2b30      	cmp	r3, #48	; 0x30
 8007c92:	d064      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x156>
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d86b      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d060      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x156>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d867      	bhi.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d05c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x156>
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d05a      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ca8:	e062      	b.n	8007d70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6899      	ldr	r1, [r3, #8]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f000 fc3f 	bl	800853c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ccc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	609a      	str	r2, [r3, #8]
      break;
 8007cd6:	e04e      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f000 fc28 	bl	800853c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfa:	609a      	str	r2, [r3, #8]
      break;
 8007cfc:	e03b      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 faec 	bl	80082e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2150      	movs	r1, #80	; 0x50
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fbf6 	bl	8008508 <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e02b      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6859      	ldr	r1, [r3, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f000 fb46 	bl	80083bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2160      	movs	r1, #96	; 0x60
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fbe6 	bl	8008508 <TIM_ITRx_SetConfig>
      break;
 8007d3c:	e01b      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6859      	ldr	r1, [r3, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f000 facc 	bl	80082e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fbd6 	bl	8008508 <TIM_ITRx_SetConfig>
      break;
 8007d5c:	e00b      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f000 fbcd 	bl	8008508 <TIM_ITRx_SetConfig>
        break;
 8007d6e:	e002      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b0c      	cmp	r3, #12
 8007da2:	d831      	bhi.n	8007e08 <HAL_TIM_ReadCapturedValue+0x78>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <HAL_TIM_ReadCapturedValue+0x1c>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007de1 	.word	0x08007de1
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007e09 	.word	0x08007e09
 8007dbc:	08007deb 	.word	0x08007deb
 8007dc0:	08007e09 	.word	0x08007e09
 8007dc4:	08007e09 	.word	0x08007e09
 8007dc8:	08007e09 	.word	0x08007e09
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007e09 	.word	0x08007e09
 8007dd4:	08007e09 	.word	0x08007e09
 8007dd8:	08007e09 	.word	0x08007e09
 8007ddc:	08007dff 	.word	0x08007dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	60fb      	str	r3, [r7, #12]

      break;
 8007de8:	e00f      	b.n	8007e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	60fb      	str	r3, [r7, #12]

      break;
 8007df2:	e00a      	b.n	8007e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	60fb      	str	r3, [r7, #12]

      break;
 8007dfc:	e005      	b.n	8007e0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	60fb      	str	r3, [r7, #12]

      break;
 8007e06:	e000      	b.n	8007e0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007e08:	bf00      	nop
  }

  return tmpreg;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop

08007e18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a29      	ldr	r2, [pc, #164]	; (8007f18 <TIM_Base_SetConfig+0xb8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <TIM_Base_SetConfig+0x30>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d007      	beq.n	8007e90 <TIM_Base_SetConfig+0x30>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <TIM_Base_SetConfig+0xbc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_Base_SetConfig+0x30>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a25      	ldr	r2, [pc, #148]	; (8007f20 <TIM_Base_SetConfig+0xc0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d108      	bne.n	8007ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <TIM_Base_SetConfig+0xb8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_Base_SetConfig+0x62>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb0:	d007      	beq.n	8007ec2 <TIM_Base_SetConfig+0x62>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <TIM_Base_SetConfig+0xbc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_Base_SetConfig+0x62>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a18      	ldr	r2, [pc, #96]	; (8007f20 <TIM_Base_SetConfig+0xc0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d108      	bne.n	8007ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a07      	ldr	r2, [pc, #28]	; (8007f18 <TIM_Base_SetConfig+0xb8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d103      	bne.n	8007f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	615a      	str	r2, [r3, #20]
}
 8007f0e:	bf00      	nop
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr
 8007f18:	40012c00 	.word	0x40012c00
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800

08007f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 0302 	bic.w	r3, r3, #2
 8007f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <TIM_OC1_SetConfig+0xc8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10c      	bne.n	8007f9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 0308 	bic.w	r3, r3, #8
 8007f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f023 0304 	bic.w	r3, r3, #4
 8007f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <TIM_OC1_SetConfig+0xc8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d111      	bne.n	8007fc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	621a      	str	r2, [r3, #32]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bc80      	pop	{r7}
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40012c00 	.word	0x40012c00

08007ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0210 	bic.w	r2, r3, #16
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800801e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0320 	bic.w	r3, r3, #32
 800803a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <TIM_OC2_SetConfig+0xd0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10d      	bne.n	800806c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <TIM_OC2_SetConfig+0xd0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d113      	bne.n	800809c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800807a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	40012c00 	.word	0x40012c00

080080c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800810c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1d      	ldr	r2, [pc, #116]	; (8008194 <TIM_OC3_SetConfig+0xd0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10d      	bne.n	800813e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800813c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a14      	ldr	r2, [pc, #80]	; (8008194 <TIM_OC3_SetConfig+0xd0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d113      	bne.n	800816e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800814c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40012c00 	.word	0x40012c00

08008198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0f      	ldr	r2, [pc, #60]	; (8008230 <TIM_OC4_SetConfig+0x98>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d109      	bne.n	800820c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	019b      	lsls	r3, r3, #6
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr
 8008230:	40012c00 	.word	0x40012c00

08008234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f023 0201 	bic.w	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <TIM_TI1_SetConfig+0xa8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_TI1_SetConfig+0x46>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d007      	beq.n	800827a <TIM_TI1_SetConfig+0x46>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <TIM_TI1_SetConfig+0xac>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_TI1_SetConfig+0x46>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <TIM_TI1_SetConfig+0xb0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d101      	bne.n	800827e <TIM_TI1_SetConfig+0x4a>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <TIM_TI1_SetConfig+0x4c>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	e003      	b.n	800829e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f023 030a 	bic.w	r3, r3, #10
 80082b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 030a 	and.w	r3, r3, #10
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	40012c00 	.word	0x40012c00
 80082e0:	40000400 	.word	0x40000400
 80082e4:	40000800 	.word	0x40000800

080082e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f023 0201 	bic.w	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 030a 	bic.w	r3, r3, #10
 8008324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr

08008344 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f023 0210 	bic.w	r2, r3, #16
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	031b      	lsls	r3, r3, #12
 8008388:	b29b      	uxth	r3, r3
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008396:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f023 0210 	bic.w	r2, r3, #16
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	031b      	lsls	r3, r3, #12
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	621a      	str	r2, [r3, #32]
}
 8008410:	bf00      	nop
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800841a:	b480      	push	{r7}
 800841c:	b087      	sub	sp, #28
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f023 0303 	bic.w	r3, r3, #3
 8008446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	b2db      	uxtb	r3, r3
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800846a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4313      	orrs	r3, r2
 8008478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	621a      	str	r2, [r3, #32]
}
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	031b      	lsls	r3, r3, #12
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	031b      	lsls	r3, r3, #12
 80084e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	f043 0307 	orr.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	609a      	str	r2, [r3, #8]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	021a      	lsls	r2, r3, #8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	431a      	orrs	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4313      	orrs	r3, r2
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	2201      	movs	r2, #1
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a1a      	ldr	r2, [r3, #32]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	43db      	mvns	r3, r3
 800859c:	401a      	ands	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1a      	ldr	r2, [r3, #32]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	fa01 f303 	lsl.w	r3, r1, r3
 80085b2:	431a      	orrs	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	621a      	str	r2, [r3, #32]
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr
	...

080085c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e046      	b.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a16      	ldr	r2, [pc, #88]	; (8008674 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00e      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008628:	d009      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d004      	beq.n	800863e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a10      	ldr	r2, [pc, #64]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d10c      	bne.n	8008658 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr
 8008674:	40012c00 	.word	0x40012c00
 8008678:	40000400 	.word	0x40000400
 800867c:	40000800 	.word	0x40000800

08008680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr

08008692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e03f      	b.n	8008736 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fb fe06 	bl	80042dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	; 0x24
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f829 	bl	8008740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800870c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800871c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800877a:	f023 030c 	bic.w	r3, r3, #12
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	430b      	orrs	r3, r1
 8008786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a2c      	ldr	r2, [pc, #176]	; (8008854 <UART_SetConfig+0x114>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d103      	bne.n	80087b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80087a8:	f7fe fa58 	bl	8006c5c <HAL_RCC_GetPCLK2Freq>
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	e002      	b.n	80087b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087b0:	f7fe fa40 	bl	8006c34 <HAL_RCC_GetPCLK1Freq>
 80087b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009a      	lsls	r2, r3, #2
 80087c0:	441a      	add	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	4a22      	ldr	r2, [pc, #136]	; (8008858 <UART_SetConfig+0x118>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	0119      	lsls	r1, r3, #4
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80087ec:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <UART_SetConfig+0x118>)
 80087ee:	fba3 0302 	umull	r0, r3, r3, r2
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	2064      	movs	r0, #100	; 0x64
 80087f6:	fb00 f303 	mul.w	r3, r0, r3
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	3332      	adds	r3, #50	; 0x32
 8008800:	4a15      	ldr	r2, [pc, #84]	; (8008858 <UART_SetConfig+0x118>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800880c:	4419      	add	r1, r3
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009a      	lsls	r2, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	fbb2 f2f3 	udiv	r2, r2, r3
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <UART_SetConfig+0x118>)
 8008826:	fba3 0302 	umull	r0, r3, r3, r2
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	2064      	movs	r0, #100	; 0x64
 800882e:	fb00 f303 	mul.w	r3, r0, r3
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	3332      	adds	r3, #50	; 0x32
 8008838:	4a07      	ldr	r2, [pc, #28]	; (8008858 <UART_SetConfig+0x118>)
 800883a:	fba2 2303 	umull	r2, r3, r2, r3
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	f003 020f 	and.w	r2, r3, #15
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	440a      	add	r2, r1
 800884a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40013800 	.word	0x40013800
 8008858:	51eb851f 	.word	0x51eb851f

0800885c <__errno>:
 800885c:	4b01      	ldr	r3, [pc, #4]	; (8008864 <__errno+0x8>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20000094 	.word	0x20000094

08008868 <__libc_init_array>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	2600      	movs	r6, #0
 800886c:	4d0c      	ldr	r5, [pc, #48]	; (80088a0 <__libc_init_array+0x38>)
 800886e:	4c0d      	ldr	r4, [pc, #52]	; (80088a4 <__libc_init_array+0x3c>)
 8008870:	1b64      	subs	r4, r4, r5
 8008872:	10a4      	asrs	r4, r4, #2
 8008874:	42a6      	cmp	r6, r4
 8008876:	d109      	bne.n	800888c <__libc_init_array+0x24>
 8008878:	f003 fad6 	bl	800be28 <_init>
 800887c:	2600      	movs	r6, #0
 800887e:	4d0a      	ldr	r5, [pc, #40]	; (80088a8 <__libc_init_array+0x40>)
 8008880:	4c0a      	ldr	r4, [pc, #40]	; (80088ac <__libc_init_array+0x44>)
 8008882:	1b64      	subs	r4, r4, r5
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	42a6      	cmp	r6, r4
 8008888:	d105      	bne.n	8008896 <__libc_init_array+0x2e>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008890:	4798      	blx	r3
 8008892:	3601      	adds	r6, #1
 8008894:	e7ee      	b.n	8008874 <__libc_init_array+0xc>
 8008896:	f855 3b04 	ldr.w	r3, [r5], #4
 800889a:	4798      	blx	r3
 800889c:	3601      	adds	r6, #1
 800889e:	e7f2      	b.n	8008886 <__libc_init_array+0x1e>
 80088a0:	0800c2b8 	.word	0x0800c2b8
 80088a4:	0800c2b8 	.word	0x0800c2b8
 80088a8:	0800c2b8 	.word	0x0800c2b8
 80088ac:	0800c2bc 	.word	0x0800c2bc

080088b0 <memset>:
 80088b0:	4603      	mov	r3, r0
 80088b2:	4402      	add	r2, r0
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d100      	bne.n	80088ba <memset+0xa>
 80088b8:	4770      	bx	lr
 80088ba:	f803 1b01 	strb.w	r1, [r3], #1
 80088be:	e7f9      	b.n	80088b4 <memset+0x4>

080088c0 <__cvt>:
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c6:	461f      	mov	r7, r3
 80088c8:	bfbb      	ittet	lt
 80088ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80088ce:	461f      	movlt	r7, r3
 80088d0:	2300      	movge	r3, #0
 80088d2:	232d      	movlt	r3, #45	; 0x2d
 80088d4:	b088      	sub	sp, #32
 80088d6:	4614      	mov	r4, r2
 80088d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088dc:	7013      	strb	r3, [r2, #0]
 80088de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80088e4:	f023 0820 	bic.w	r8, r3, #32
 80088e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088ec:	d005      	beq.n	80088fa <__cvt+0x3a>
 80088ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088f2:	d100      	bne.n	80088f6 <__cvt+0x36>
 80088f4:	3501      	adds	r5, #1
 80088f6:	2302      	movs	r3, #2
 80088f8:	e000      	b.n	80088fc <__cvt+0x3c>
 80088fa:	2303      	movs	r3, #3
 80088fc:	aa07      	add	r2, sp, #28
 80088fe:	9204      	str	r2, [sp, #16]
 8008900:	aa06      	add	r2, sp, #24
 8008902:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008906:	e9cd 3500 	strd	r3, r5, [sp]
 800890a:	4622      	mov	r2, r4
 800890c:	463b      	mov	r3, r7
 800890e:	f000 fcc3 	bl	8009298 <_dtoa_r>
 8008912:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008916:	4606      	mov	r6, r0
 8008918:	d102      	bne.n	8008920 <__cvt+0x60>
 800891a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800891c:	07db      	lsls	r3, r3, #31
 800891e:	d522      	bpl.n	8008966 <__cvt+0xa6>
 8008920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008924:	eb06 0905 	add.w	r9, r6, r5
 8008928:	d110      	bne.n	800894c <__cvt+0x8c>
 800892a:	7833      	ldrb	r3, [r6, #0]
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d10a      	bne.n	8008946 <__cvt+0x86>
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	4620      	mov	r0, r4
 8008936:	4639      	mov	r1, r7
 8008938:	f7f8 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800893c:	b918      	cbnz	r0, 8008946 <__cvt+0x86>
 800893e:	f1c5 0501 	rsb	r5, r5, #1
 8008942:	f8ca 5000 	str.w	r5, [sl]
 8008946:	f8da 3000 	ldr.w	r3, [sl]
 800894a:	4499      	add	r9, r3
 800894c:	2200      	movs	r2, #0
 800894e:	2300      	movs	r3, #0
 8008950:	4620      	mov	r0, r4
 8008952:	4639      	mov	r1, r7
 8008954:	f7f8 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8008958:	b108      	cbz	r0, 800895e <__cvt+0x9e>
 800895a:	f8cd 901c 	str.w	r9, [sp, #28]
 800895e:	2230      	movs	r2, #48	; 0x30
 8008960:	9b07      	ldr	r3, [sp, #28]
 8008962:	454b      	cmp	r3, r9
 8008964:	d307      	bcc.n	8008976 <__cvt+0xb6>
 8008966:	4630      	mov	r0, r6
 8008968:	9b07      	ldr	r3, [sp, #28]
 800896a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800896c:	1b9b      	subs	r3, r3, r6
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	b008      	add	sp, #32
 8008972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008976:	1c59      	adds	r1, r3, #1
 8008978:	9107      	str	r1, [sp, #28]
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	e7f0      	b.n	8008960 <__cvt+0xa0>

0800897e <__exponent>:
 800897e:	4603      	mov	r3, r0
 8008980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008982:	2900      	cmp	r1, #0
 8008984:	f803 2b02 	strb.w	r2, [r3], #2
 8008988:	bfb6      	itet	lt
 800898a:	222d      	movlt	r2, #45	; 0x2d
 800898c:	222b      	movge	r2, #43	; 0x2b
 800898e:	4249      	neglt	r1, r1
 8008990:	2909      	cmp	r1, #9
 8008992:	7042      	strb	r2, [r0, #1]
 8008994:	dd2b      	ble.n	80089ee <__exponent+0x70>
 8008996:	f10d 0407 	add.w	r4, sp, #7
 800899a:	46a4      	mov	ip, r4
 800899c:	270a      	movs	r7, #10
 800899e:	fb91 f6f7 	sdiv	r6, r1, r7
 80089a2:	460a      	mov	r2, r1
 80089a4:	46a6      	mov	lr, r4
 80089a6:	fb07 1516 	mls	r5, r7, r6, r1
 80089aa:	2a63      	cmp	r2, #99	; 0x63
 80089ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80089b0:	4631      	mov	r1, r6
 80089b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80089b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089ba:	dcf0      	bgt.n	800899e <__exponent+0x20>
 80089bc:	3130      	adds	r1, #48	; 0x30
 80089be:	f1ae 0502 	sub.w	r5, lr, #2
 80089c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089c6:	4629      	mov	r1, r5
 80089c8:	1c44      	adds	r4, r0, #1
 80089ca:	4561      	cmp	r1, ip
 80089cc:	d30a      	bcc.n	80089e4 <__exponent+0x66>
 80089ce:	f10d 0209 	add.w	r2, sp, #9
 80089d2:	eba2 020e 	sub.w	r2, r2, lr
 80089d6:	4565      	cmp	r5, ip
 80089d8:	bf88      	it	hi
 80089da:	2200      	movhi	r2, #0
 80089dc:	4413      	add	r3, r2
 80089de:	1a18      	subs	r0, r3, r0
 80089e0:	b003      	add	sp, #12
 80089e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089ec:	e7ed      	b.n	80089ca <__exponent+0x4c>
 80089ee:	2330      	movs	r3, #48	; 0x30
 80089f0:	3130      	adds	r1, #48	; 0x30
 80089f2:	7083      	strb	r3, [r0, #2]
 80089f4:	70c1      	strb	r1, [r0, #3]
 80089f6:	1d03      	adds	r3, r0, #4
 80089f8:	e7f1      	b.n	80089de <__exponent+0x60>
	...

080089fc <_printf_float>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	b091      	sub	sp, #68	; 0x44
 8008a02:	460c      	mov	r4, r1
 8008a04:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008a08:	4616      	mov	r6, r2
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	f001 fa31 	bl	8009e74 <_localeconv_r>
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	9309      	str	r3, [sp, #36]	; 0x24
 8008a18:	f7f7 fb9a 	bl	8000150 <strlen>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8008a20:	f8d8 3000 	ldr.w	r3, [r8]
 8008a24:	900a      	str	r0, [sp, #40]	; 0x28
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	f103 0208 	add.w	r2, r3, #8
 8008a30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a34:	f8d4 b000 	ldr.w	fp, [r4]
 8008a38:	f8c8 2000 	str.w	r2, [r8]
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a44:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008a48:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a52:	4640      	mov	r0, r8
 8008a54:	4b9c      	ldr	r3, [pc, #624]	; (8008cc8 <_printf_float+0x2cc>)
 8008a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a58:	f7f7 ffd8 	bl	8000a0c <__aeabi_dcmpun>
 8008a5c:	bb70      	cbnz	r0, 8008abc <_printf_float+0xc0>
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	4640      	mov	r0, r8
 8008a64:	4b98      	ldr	r3, [pc, #608]	; (8008cc8 <_printf_float+0x2cc>)
 8008a66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a68:	f7f7 ffb2 	bl	80009d0 <__aeabi_dcmple>
 8008a6c:	bb30      	cbnz	r0, 8008abc <_printf_float+0xc0>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2300      	movs	r3, #0
 8008a72:	4640      	mov	r0, r8
 8008a74:	4651      	mov	r1, sl
 8008a76:	f7f7 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8008a7a:	b110      	cbz	r0, 8008a82 <_printf_float+0x86>
 8008a7c:	232d      	movs	r3, #45	; 0x2d
 8008a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a82:	4b92      	ldr	r3, [pc, #584]	; (8008ccc <_printf_float+0x2d0>)
 8008a84:	4892      	ldr	r0, [pc, #584]	; (8008cd0 <_printf_float+0x2d4>)
 8008a86:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a8a:	bf94      	ite	ls
 8008a8c:	4698      	movls	r8, r3
 8008a8e:	4680      	movhi	r8, r0
 8008a90:	2303      	movs	r3, #3
 8008a92:	f04f 0a00 	mov.w	sl, #0
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	f02b 0304 	bic.w	r3, fp, #4
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	4633      	mov	r3, r6
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	9700      	str	r7, [sp, #0]
 8008aa6:	aa0f      	add	r2, sp, #60	; 0x3c
 8008aa8:	f000 f9d4 	bl	8008e54 <_printf_common>
 8008aac:	3001      	adds	r0, #1
 8008aae:	f040 8090 	bne.w	8008bd2 <_printf_float+0x1d6>
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	b011      	add	sp, #68	; 0x44
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	4642      	mov	r2, r8
 8008abe:	4653      	mov	r3, sl
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4651      	mov	r1, sl
 8008ac4:	f7f7 ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8008ac8:	b148      	cbz	r0, 8008ade <_printf_float+0xe2>
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	bfb8      	it	lt
 8008ad0:	232d      	movlt	r3, #45	; 0x2d
 8008ad2:	4880      	ldr	r0, [pc, #512]	; (8008cd4 <_printf_float+0x2d8>)
 8008ad4:	bfb8      	it	lt
 8008ad6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ada:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <_printf_float+0x2dc>)
 8008adc:	e7d3      	b.n	8008a86 <_printf_float+0x8a>
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	d142      	bne.n	8008b6e <_printf_float+0x172>
 8008ae8:	2306      	movs	r3, #6
 8008aea:	6063      	str	r3, [r4, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	9206      	str	r2, [sp, #24]
 8008af0:	aa0e      	add	r2, sp, #56	; 0x38
 8008af2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008af6:	aa0d      	add	r2, sp, #52	; 0x34
 8008af8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008afc:	9203      	str	r2, [sp, #12]
 8008afe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008b02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	6863      	ldr	r3, [r4, #4]
 8008b0a:	4642      	mov	r2, r8
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	4653      	mov	r3, sl
 8008b12:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b14:	f7ff fed4 	bl	80088c0 <__cvt>
 8008b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	2947      	cmp	r1, #71	; 0x47
 8008b1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b20:	d108      	bne.n	8008b34 <_printf_float+0x138>
 8008b22:	1cc8      	adds	r0, r1, #3
 8008b24:	db02      	blt.n	8008b2c <_printf_float+0x130>
 8008b26:	6863      	ldr	r3, [r4, #4]
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	dd40      	ble.n	8008bae <_printf_float+0x1b2>
 8008b2c:	f1a9 0902 	sub.w	r9, r9, #2
 8008b30:	fa5f f989 	uxtb.w	r9, r9
 8008b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b38:	d81f      	bhi.n	8008b7a <_printf_float+0x17e>
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	3901      	subs	r1, #1
 8008b3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b42:	910d      	str	r1, [sp, #52]	; 0x34
 8008b44:	f7ff ff1b 	bl	800897e <__exponent>
 8008b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b4a:	4682      	mov	sl, r0
 8008b4c:	1813      	adds	r3, r2, r0
 8008b4e:	2a01      	cmp	r2, #1
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	dc02      	bgt.n	8008b5a <_printf_float+0x15e>
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	07d2      	lsls	r2, r2, #31
 8008b58:	d501      	bpl.n	8008b5e <_printf_float+0x162>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d09b      	beq.n	8008a9e <_printf_float+0xa2>
 8008b66:	232d      	movs	r3, #45	; 0x2d
 8008b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b6c:	e797      	b.n	8008a9e <_printf_float+0xa2>
 8008b6e:	2947      	cmp	r1, #71	; 0x47
 8008b70:	d1bc      	bne.n	8008aec <_printf_float+0xf0>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1ba      	bne.n	8008aec <_printf_float+0xf0>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7b7      	b.n	8008aea <_printf_float+0xee>
 8008b7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b7e:	d118      	bne.n	8008bb2 <_printf_float+0x1b6>
 8008b80:	2900      	cmp	r1, #0
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	dd0b      	ble.n	8008b9e <_printf_float+0x1a2>
 8008b86:	6121      	str	r1, [r4, #16]
 8008b88:	b913      	cbnz	r3, 8008b90 <_printf_float+0x194>
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	07d0      	lsls	r0, r2, #31
 8008b8e:	d502      	bpl.n	8008b96 <_printf_float+0x19a>
 8008b90:	3301      	adds	r3, #1
 8008b92:	440b      	add	r3, r1
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	f04f 0a00 	mov.w	sl, #0
 8008b9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b9c:	e7df      	b.n	8008b5e <_printf_float+0x162>
 8008b9e:	b913      	cbnz	r3, 8008ba6 <_printf_float+0x1aa>
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	07d2      	lsls	r2, r2, #31
 8008ba4:	d501      	bpl.n	8008baa <_printf_float+0x1ae>
 8008ba6:	3302      	adds	r3, #2
 8008ba8:	e7f4      	b.n	8008b94 <_printf_float+0x198>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e7f2      	b.n	8008b94 <_printf_float+0x198>
 8008bae:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	db05      	blt.n	8008bc4 <_printf_float+0x1c8>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	6121      	str	r1, [r4, #16]
 8008bbc:	07d8      	lsls	r0, r3, #31
 8008bbe:	d5ea      	bpl.n	8008b96 <_printf_float+0x19a>
 8008bc0:	1c4b      	adds	r3, r1, #1
 8008bc2:	e7e7      	b.n	8008b94 <_printf_float+0x198>
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	bfcc      	ite	gt
 8008bc8:	2201      	movgt	r2, #1
 8008bca:	f1c1 0202 	rsble	r2, r1, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	e7e0      	b.n	8008b94 <_printf_float+0x198>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	055a      	lsls	r2, r3, #21
 8008bd6:	d407      	bmi.n	8008be8 <_printf_float+0x1ec>
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	4642      	mov	r2, r8
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	d12b      	bne.n	8008c3e <_printf_float+0x242>
 8008be6:	e764      	b.n	8008ab2 <_printf_float+0xb6>
 8008be8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bec:	f240 80dd 	bls.w	8008daa <_printf_float+0x3ae>
 8008bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f7f7 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d033      	beq.n	8008c68 <_printf_float+0x26c>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	4a35      	ldr	r2, [pc, #212]	; (8008cdc <_printf_float+0x2e0>)
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f43f af51 	beq.w	8008ab2 <_printf_float+0xb6>
 8008c10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c14:	429a      	cmp	r2, r3
 8008c16:	db02      	blt.n	8008c1e <_printf_float+0x222>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	07d8      	lsls	r0, r3, #31
 8008c1c:	d50f      	bpl.n	8008c3e <_printf_float+0x242>
 8008c1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f af42 	beq.w	8008ab2 <_printf_float+0xb6>
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	f104 091a 	add.w	r9, r4, #26
 8008c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	4543      	cmp	r3, r8
 8008c3c:	dc09      	bgt.n	8008c52 <_printf_float+0x256>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	079b      	lsls	r3, r3, #30
 8008c42:	f100 8102 	bmi.w	8008e4a <_printf_float+0x44e>
 8008c46:	68e0      	ldr	r0, [r4, #12]
 8008c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4a:	4298      	cmp	r0, r3
 8008c4c:	bfb8      	it	lt
 8008c4e:	4618      	movlt	r0, r3
 8008c50:	e731      	b.n	8008ab6 <_printf_float+0xba>
 8008c52:	2301      	movs	r3, #1
 8008c54:	464a      	mov	r2, r9
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f43f af28 	beq.w	8008ab2 <_printf_float+0xb6>
 8008c62:	f108 0801 	add.w	r8, r8, #1
 8008c66:	e7e6      	b.n	8008c36 <_printf_float+0x23a>
 8008c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dc38      	bgt.n	8008ce0 <_printf_float+0x2e4>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <_printf_float+0x2e0>)
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f af1a 	beq.w	8008ab2 <_printf_float+0xb6>
 8008c7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c82:	4313      	orrs	r3, r2
 8008c84:	d102      	bne.n	8008c8c <_printf_float+0x290>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07d9      	lsls	r1, r3, #31
 8008c8a:	d5d8      	bpl.n	8008c3e <_printf_float+0x242>
 8008c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c90:	4631      	mov	r1, r6
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	f43f af0b 	beq.w	8008ab2 <_printf_float+0xb6>
 8008c9c:	f04f 0900 	mov.w	r9, #0
 8008ca0:	f104 0a1a 	add.w	sl, r4, #26
 8008ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ca6:	425b      	negs	r3, r3
 8008ca8:	454b      	cmp	r3, r9
 8008caa:	dc01      	bgt.n	8008cb0 <_printf_float+0x2b4>
 8008cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cae:	e794      	b.n	8008bda <_printf_float+0x1de>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	47b8      	blx	r7
 8008cba:	3001      	adds	r0, #1
 8008cbc:	f43f aef9 	beq.w	8008ab2 <_printf_float+0xb6>
 8008cc0:	f109 0901 	add.w	r9, r9, #1
 8008cc4:	e7ee      	b.n	8008ca4 <_printf_float+0x2a8>
 8008cc6:	bf00      	nop
 8008cc8:	7fefffff 	.word	0x7fefffff
 8008ccc:	0800be6c 	.word	0x0800be6c
 8008cd0:	0800be70 	.word	0x0800be70
 8008cd4:	0800be78 	.word	0x0800be78
 8008cd8:	0800be74 	.word	0x0800be74
 8008cdc:	0800be7c 	.word	0x0800be7c
 8008ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bfa8      	it	ge
 8008ce8:	461a      	movge	r2, r3
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	4691      	mov	r9, r2
 8008cee:	dc37      	bgt.n	8008d60 <_printf_float+0x364>
 8008cf0:	f04f 0b00 	mov.w	fp, #0
 8008cf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cf8:	f104 021a 	add.w	r2, r4, #26
 8008cfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008d00:	ebaa 0309 	sub.w	r3, sl, r9
 8008d04:	455b      	cmp	r3, fp
 8008d06:	dc33      	bgt.n	8008d70 <_printf_float+0x374>
 8008d08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	db3b      	blt.n	8008d88 <_printf_float+0x38c>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	07da      	lsls	r2, r3, #31
 8008d14:	d438      	bmi.n	8008d88 <_printf_float+0x38c>
 8008d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d1a:	eba3 020a 	sub.w	r2, r3, sl
 8008d1e:	eba3 0901 	sub.w	r9, r3, r1
 8008d22:	4591      	cmp	r9, r2
 8008d24:	bfa8      	it	ge
 8008d26:	4691      	movge	r9, r2
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	dc34      	bgt.n	8008d98 <_printf_float+0x39c>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d36:	f104 0a1a 	add.w	sl, r4, #26
 8008d3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	eba3 0309 	sub.w	r3, r3, r9
 8008d44:	4543      	cmp	r3, r8
 8008d46:	f77f af7a 	ble.w	8008c3e <_printf_float+0x242>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f aeac 	beq.w	8008ab2 <_printf_float+0xb6>
 8008d5a:	f108 0801 	add.w	r8, r8, #1
 8008d5e:	e7ec      	b.n	8008d3a <_printf_float+0x33e>
 8008d60:	4613      	mov	r3, r2
 8008d62:	4631      	mov	r1, r6
 8008d64:	4642      	mov	r2, r8
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d1c0      	bne.n	8008cf0 <_printf_float+0x2f4>
 8008d6e:	e6a0      	b.n	8008ab2 <_printf_float+0xb6>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f43f ae99 	beq.w	8008ab2 <_printf_float+0xb6>
 8008d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d82:	f10b 0b01 	add.w	fp, fp, #1
 8008d86:	e7b9      	b.n	8008cfc <_printf_float+0x300>
 8008d88:	4631      	mov	r1, r6
 8008d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	d1bf      	bne.n	8008d16 <_printf_float+0x31a>
 8008d96:	e68c      	b.n	8008ab2 <_printf_float+0xb6>
 8008d98:	464b      	mov	r3, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	eb08 020a 	add.w	r2, r8, sl
 8008da2:	47b8      	blx	r7
 8008da4:	3001      	adds	r0, #1
 8008da6:	d1c2      	bne.n	8008d2e <_printf_float+0x332>
 8008da8:	e683      	b.n	8008ab2 <_printf_float+0xb6>
 8008daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dac:	2a01      	cmp	r2, #1
 8008dae:	dc01      	bgt.n	8008db4 <_printf_float+0x3b8>
 8008db0:	07db      	lsls	r3, r3, #31
 8008db2:	d537      	bpl.n	8008e24 <_printf_float+0x428>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4642      	mov	r2, r8
 8008db8:	4631      	mov	r1, r6
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	f43f ae77 	beq.w	8008ab2 <_printf_float+0xb6>
 8008dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b8      	blx	r7
 8008dce:	3001      	adds	r0, #1
 8008dd0:	f43f ae6f 	beq.w	8008ab2 <_printf_float+0xb6>
 8008dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f7f7 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8008de0:	b9d8      	cbnz	r0, 8008e1a <_printf_float+0x41e>
 8008de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008de4:	f108 0201 	add.w	r2, r8, #1
 8008de8:	3b01      	subs	r3, #1
 8008dea:	4631      	mov	r1, r6
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b8      	blx	r7
 8008df0:	3001      	adds	r0, #1
 8008df2:	d10e      	bne.n	8008e12 <_printf_float+0x416>
 8008df4:	e65d      	b.n	8008ab2 <_printf_float+0xb6>
 8008df6:	2301      	movs	r3, #1
 8008df8:	464a      	mov	r2, r9
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	f43f ae56 	beq.w	8008ab2 <_printf_float+0xb6>
 8008e06:	f108 0801 	add.w	r8, r8, #1
 8008e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4543      	cmp	r3, r8
 8008e10:	dcf1      	bgt.n	8008df6 <_printf_float+0x3fa>
 8008e12:	4653      	mov	r3, sl
 8008e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e18:	e6e0      	b.n	8008bdc <_printf_float+0x1e0>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	f104 091a 	add.w	r9, r4, #26
 8008e22:	e7f2      	b.n	8008e0a <_printf_float+0x40e>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4642      	mov	r2, r8
 8008e28:	e7df      	b.n	8008dea <_printf_float+0x3ee>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	4631      	mov	r1, r6
 8008e30:	4628      	mov	r0, r5
 8008e32:	47b8      	blx	r7
 8008e34:	3001      	adds	r0, #1
 8008e36:	f43f ae3c 	beq.w	8008ab2 <_printf_float+0xb6>
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e42:	1a5b      	subs	r3, r3, r1
 8008e44:	4543      	cmp	r3, r8
 8008e46:	dcf0      	bgt.n	8008e2a <_printf_float+0x42e>
 8008e48:	e6fd      	b.n	8008c46 <_printf_float+0x24a>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	f104 0919 	add.w	r9, r4, #25
 8008e52:	e7f4      	b.n	8008e3e <_printf_float+0x442>

08008e54 <_printf_common>:
 8008e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	4616      	mov	r6, r2
 8008e5a:	4699      	mov	r9, r3
 8008e5c:	688a      	ldr	r2, [r1, #8]
 8008e5e:	690b      	ldr	r3, [r1, #16]
 8008e60:	4607      	mov	r7, r0
 8008e62:	4293      	cmp	r3, r2
 8008e64:	bfb8      	it	lt
 8008e66:	4613      	movlt	r3, r2
 8008e68:	6033      	str	r3, [r6, #0]
 8008e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e6e:	460c      	mov	r4, r1
 8008e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e74:	b10a      	cbz	r2, 8008e7a <_printf_common+0x26>
 8008e76:	3301      	adds	r3, #1
 8008e78:	6033      	str	r3, [r6, #0]
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	0699      	lsls	r1, r3, #26
 8008e7e:	bf42      	ittt	mi
 8008e80:	6833      	ldrmi	r3, [r6, #0]
 8008e82:	3302      	addmi	r3, #2
 8008e84:	6033      	strmi	r3, [r6, #0]
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	f015 0506 	ands.w	r5, r5, #6
 8008e8c:	d106      	bne.n	8008e9c <_printf_common+0x48>
 8008e8e:	f104 0a19 	add.w	sl, r4, #25
 8008e92:	68e3      	ldr	r3, [r4, #12]
 8008e94:	6832      	ldr	r2, [r6, #0]
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	42ab      	cmp	r3, r5
 8008e9a:	dc28      	bgt.n	8008eee <_printf_common+0x9a>
 8008e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ea0:	1e13      	subs	r3, r2, #0
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	bf18      	it	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	0692      	lsls	r2, r2, #26
 8008eaa:	d42d      	bmi.n	8008f08 <_printf_common+0xb4>
 8008eac:	4649      	mov	r1, r9
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb4:	47c0      	blx	r8
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d020      	beq.n	8008efc <_printf_common+0xa8>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	68e5      	ldr	r5, [r4, #12]
 8008ebe:	f003 0306 	and.w	r3, r3, #6
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	bf18      	it	ne
 8008ec6:	2500      	movne	r5, #0
 8008ec8:	6832      	ldr	r2, [r6, #0]
 8008eca:	f04f 0600 	mov.w	r6, #0
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	bf08      	it	eq
 8008ed2:	1aad      	subeq	r5, r5, r2
 8008ed4:	6922      	ldr	r2, [r4, #16]
 8008ed6:	bf08      	it	eq
 8008ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008edc:	4293      	cmp	r3, r2
 8008ede:	bfc4      	itt	gt
 8008ee0:	1a9b      	subgt	r3, r3, r2
 8008ee2:	18ed      	addgt	r5, r5, r3
 8008ee4:	341a      	adds	r4, #26
 8008ee6:	42b5      	cmp	r5, r6
 8008ee8:	d11a      	bne.n	8008f20 <_printf_common+0xcc>
 8008eea:	2000      	movs	r0, #0
 8008eec:	e008      	b.n	8008f00 <_printf_common+0xac>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	47c0      	blx	r8
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d103      	bne.n	8008f04 <_printf_common+0xb0>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f04:	3501      	adds	r5, #1
 8008f06:	e7c4      	b.n	8008e92 <_printf_common+0x3e>
 8008f08:	2030      	movs	r0, #48	; 0x30
 8008f0a:	18e1      	adds	r1, r4, r3
 8008f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f16:	4422      	add	r2, r4
 8008f18:	3302      	adds	r3, #2
 8008f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f1e:	e7c5      	b.n	8008eac <_printf_common+0x58>
 8008f20:	2301      	movs	r3, #1
 8008f22:	4622      	mov	r2, r4
 8008f24:	4649      	mov	r1, r9
 8008f26:	4638      	mov	r0, r7
 8008f28:	47c0      	blx	r8
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d0e6      	beq.n	8008efc <_printf_common+0xa8>
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7d9      	b.n	8008ee6 <_printf_common+0x92>
	...

08008f34 <_printf_i>:
 8008f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	7e0f      	ldrb	r7, [r1, #24]
 8008f3a:	4691      	mov	r9, r2
 8008f3c:	2f78      	cmp	r7, #120	; 0x78
 8008f3e:	4680      	mov	r8, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	469a      	mov	sl, r3
 8008f44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f4a:	d807      	bhi.n	8008f5c <_printf_i+0x28>
 8008f4c:	2f62      	cmp	r7, #98	; 0x62
 8008f4e:	d80a      	bhi.n	8008f66 <_printf_i+0x32>
 8008f50:	2f00      	cmp	r7, #0
 8008f52:	f000 80d9 	beq.w	8009108 <_printf_i+0x1d4>
 8008f56:	2f58      	cmp	r7, #88	; 0x58
 8008f58:	f000 80a4 	beq.w	80090a4 <_printf_i+0x170>
 8008f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f64:	e03a      	b.n	8008fdc <_printf_i+0xa8>
 8008f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f6a:	2b15      	cmp	r3, #21
 8008f6c:	d8f6      	bhi.n	8008f5c <_printf_i+0x28>
 8008f6e:	a101      	add	r1, pc, #4	; (adr r1, 8008f74 <_printf_i+0x40>)
 8008f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f74:	08008fcd 	.word	0x08008fcd
 8008f78:	08008fe1 	.word	0x08008fe1
 8008f7c:	08008f5d 	.word	0x08008f5d
 8008f80:	08008f5d 	.word	0x08008f5d
 8008f84:	08008f5d 	.word	0x08008f5d
 8008f88:	08008f5d 	.word	0x08008f5d
 8008f8c:	08008fe1 	.word	0x08008fe1
 8008f90:	08008f5d 	.word	0x08008f5d
 8008f94:	08008f5d 	.word	0x08008f5d
 8008f98:	08008f5d 	.word	0x08008f5d
 8008f9c:	08008f5d 	.word	0x08008f5d
 8008fa0:	080090ef 	.word	0x080090ef
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	080090d1 	.word	0x080090d1
 8008fac:	08008f5d 	.word	0x08008f5d
 8008fb0:	08008f5d 	.word	0x08008f5d
 8008fb4:	08009111 	.word	0x08009111
 8008fb8:	08008f5d 	.word	0x08008f5d
 8008fbc:	08009011 	.word	0x08009011
 8008fc0:	08008f5d 	.word	0x08008f5d
 8008fc4:	08008f5d 	.word	0x08008f5d
 8008fc8:	080090d9 	.word	0x080090d9
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	1d1a      	adds	r2, r3, #4
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	602a      	str	r2, [r5, #0]
 8008fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0a4      	b.n	800912a <_printf_i+0x1f6>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	6829      	ldr	r1, [r5, #0]
 8008fe4:	0606      	lsls	r6, r0, #24
 8008fe6:	f101 0304 	add.w	r3, r1, #4
 8008fea:	d50a      	bpl.n	8009002 <_printf_i+0xce>
 8008fec:	680e      	ldr	r6, [r1, #0]
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	da03      	bge.n	8008ffc <_printf_i+0xc8>
 8008ff4:	232d      	movs	r3, #45	; 0x2d
 8008ff6:	4276      	negs	r6, r6
 8008ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffc:	230a      	movs	r3, #10
 8008ffe:	485e      	ldr	r0, [pc, #376]	; (8009178 <_printf_i+0x244>)
 8009000:	e019      	b.n	8009036 <_printf_i+0x102>
 8009002:	680e      	ldr	r6, [r1, #0]
 8009004:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	bf18      	it	ne
 800900c:	b236      	sxthne	r6, r6
 800900e:	e7ef      	b.n	8008ff0 <_printf_i+0xbc>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	6820      	ldr	r0, [r4, #0]
 8009014:	1d19      	adds	r1, r3, #4
 8009016:	6029      	str	r1, [r5, #0]
 8009018:	0601      	lsls	r1, r0, #24
 800901a:	d501      	bpl.n	8009020 <_printf_i+0xec>
 800901c:	681e      	ldr	r6, [r3, #0]
 800901e:	e002      	b.n	8009026 <_printf_i+0xf2>
 8009020:	0646      	lsls	r6, r0, #25
 8009022:	d5fb      	bpl.n	800901c <_printf_i+0xe8>
 8009024:	881e      	ldrh	r6, [r3, #0]
 8009026:	2f6f      	cmp	r7, #111	; 0x6f
 8009028:	bf0c      	ite	eq
 800902a:	2308      	moveq	r3, #8
 800902c:	230a      	movne	r3, #10
 800902e:	4852      	ldr	r0, [pc, #328]	; (8009178 <_printf_i+0x244>)
 8009030:	2100      	movs	r1, #0
 8009032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009036:	6865      	ldr	r5, [r4, #4]
 8009038:	2d00      	cmp	r5, #0
 800903a:	bfa8      	it	ge
 800903c:	6821      	ldrge	r1, [r4, #0]
 800903e:	60a5      	str	r5, [r4, #8]
 8009040:	bfa4      	itt	ge
 8009042:	f021 0104 	bicge.w	r1, r1, #4
 8009046:	6021      	strge	r1, [r4, #0]
 8009048:	b90e      	cbnz	r6, 800904e <_printf_i+0x11a>
 800904a:	2d00      	cmp	r5, #0
 800904c:	d04d      	beq.n	80090ea <_printf_i+0x1b6>
 800904e:	4615      	mov	r5, r2
 8009050:	fbb6 f1f3 	udiv	r1, r6, r3
 8009054:	fb03 6711 	mls	r7, r3, r1, r6
 8009058:	5dc7      	ldrb	r7, [r0, r7]
 800905a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800905e:	4637      	mov	r7, r6
 8009060:	42bb      	cmp	r3, r7
 8009062:	460e      	mov	r6, r1
 8009064:	d9f4      	bls.n	8009050 <_printf_i+0x11c>
 8009066:	2b08      	cmp	r3, #8
 8009068:	d10b      	bne.n	8009082 <_printf_i+0x14e>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	07de      	lsls	r6, r3, #31
 800906e:	d508      	bpl.n	8009082 <_printf_i+0x14e>
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	6861      	ldr	r1, [r4, #4]
 8009074:	4299      	cmp	r1, r3
 8009076:	bfde      	ittt	le
 8009078:	2330      	movle	r3, #48	; 0x30
 800907a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800907e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009082:	1b52      	subs	r2, r2, r5
 8009084:	6122      	str	r2, [r4, #16]
 8009086:	464b      	mov	r3, r9
 8009088:	4621      	mov	r1, r4
 800908a:	4640      	mov	r0, r8
 800908c:	f8cd a000 	str.w	sl, [sp]
 8009090:	aa03      	add	r2, sp, #12
 8009092:	f7ff fedf 	bl	8008e54 <_printf_common>
 8009096:	3001      	adds	r0, #1
 8009098:	d14c      	bne.n	8009134 <_printf_i+0x200>
 800909a:	f04f 30ff 	mov.w	r0, #4294967295
 800909e:	b004      	add	sp, #16
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a4:	4834      	ldr	r0, [pc, #208]	; (8009178 <_printf_i+0x244>)
 80090a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090aa:	6829      	ldr	r1, [r5, #0]
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80090b2:	6029      	str	r1, [r5, #0]
 80090b4:	061d      	lsls	r5, r3, #24
 80090b6:	d514      	bpl.n	80090e2 <_printf_i+0x1ae>
 80090b8:	07df      	lsls	r7, r3, #31
 80090ba:	bf44      	itt	mi
 80090bc:	f043 0320 	orrmi.w	r3, r3, #32
 80090c0:	6023      	strmi	r3, [r4, #0]
 80090c2:	b91e      	cbnz	r6, 80090cc <_printf_i+0x198>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	f023 0320 	bic.w	r3, r3, #32
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	2310      	movs	r3, #16
 80090ce:	e7af      	b.n	8009030 <_printf_i+0xfc>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	f043 0320 	orr.w	r3, r3, #32
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	2378      	movs	r3, #120	; 0x78
 80090da:	4828      	ldr	r0, [pc, #160]	; (800917c <_printf_i+0x248>)
 80090dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e0:	e7e3      	b.n	80090aa <_printf_i+0x176>
 80090e2:	0659      	lsls	r1, r3, #25
 80090e4:	bf48      	it	mi
 80090e6:	b2b6      	uxthmi	r6, r6
 80090e8:	e7e6      	b.n	80090b8 <_printf_i+0x184>
 80090ea:	4615      	mov	r5, r2
 80090ec:	e7bb      	b.n	8009066 <_printf_i+0x132>
 80090ee:	682b      	ldr	r3, [r5, #0]
 80090f0:	6826      	ldr	r6, [r4, #0]
 80090f2:	1d18      	adds	r0, r3, #4
 80090f4:	6961      	ldr	r1, [r4, #20]
 80090f6:	6028      	str	r0, [r5, #0]
 80090f8:	0635      	lsls	r5, r6, #24
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	d501      	bpl.n	8009102 <_printf_i+0x1ce>
 80090fe:	6019      	str	r1, [r3, #0]
 8009100:	e002      	b.n	8009108 <_printf_i+0x1d4>
 8009102:	0670      	lsls	r0, r6, #25
 8009104:	d5fb      	bpl.n	80090fe <_printf_i+0x1ca>
 8009106:	8019      	strh	r1, [r3, #0]
 8009108:	2300      	movs	r3, #0
 800910a:	4615      	mov	r5, r2
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	e7ba      	b.n	8009086 <_printf_i+0x152>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	2100      	movs	r1, #0
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	681d      	ldr	r5, [r3, #0]
 800911a:	6862      	ldr	r2, [r4, #4]
 800911c:	4628      	mov	r0, r5
 800911e:	f000 feb5 	bl	8009e8c <memchr>
 8009122:	b108      	cbz	r0, 8009128 <_printf_i+0x1f4>
 8009124:	1b40      	subs	r0, r0, r5
 8009126:	6060      	str	r0, [r4, #4]
 8009128:	6863      	ldr	r3, [r4, #4]
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	2300      	movs	r3, #0
 800912e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009132:	e7a8      	b.n	8009086 <_printf_i+0x152>
 8009134:	462a      	mov	r2, r5
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	47d0      	blx	sl
 800913e:	3001      	adds	r0, #1
 8009140:	d0ab      	beq.n	800909a <_printf_i+0x166>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	079b      	lsls	r3, r3, #30
 8009146:	d413      	bmi.n	8009170 <_printf_i+0x23c>
 8009148:	68e0      	ldr	r0, [r4, #12]
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	4298      	cmp	r0, r3
 800914e:	bfb8      	it	lt
 8009150:	4618      	movlt	r0, r3
 8009152:	e7a4      	b.n	800909e <_printf_i+0x16a>
 8009154:	2301      	movs	r3, #1
 8009156:	4632      	mov	r2, r6
 8009158:	4649      	mov	r1, r9
 800915a:	4640      	mov	r0, r8
 800915c:	47d0      	blx	sl
 800915e:	3001      	adds	r0, #1
 8009160:	d09b      	beq.n	800909a <_printf_i+0x166>
 8009162:	3501      	adds	r5, #1
 8009164:	68e3      	ldr	r3, [r4, #12]
 8009166:	9903      	ldr	r1, [sp, #12]
 8009168:	1a5b      	subs	r3, r3, r1
 800916a:	42ab      	cmp	r3, r5
 800916c:	dcf2      	bgt.n	8009154 <_printf_i+0x220>
 800916e:	e7eb      	b.n	8009148 <_printf_i+0x214>
 8009170:	2500      	movs	r5, #0
 8009172:	f104 0619 	add.w	r6, r4, #25
 8009176:	e7f5      	b.n	8009164 <_printf_i+0x230>
 8009178:	0800be7e 	.word	0x0800be7e
 800917c:	0800be8f 	.word	0x0800be8f

08009180 <quorem>:
 8009180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	6903      	ldr	r3, [r0, #16]
 8009186:	690c      	ldr	r4, [r1, #16]
 8009188:	4607      	mov	r7, r0
 800918a:	42a3      	cmp	r3, r4
 800918c:	f2c0 8082 	blt.w	8009294 <quorem+0x114>
 8009190:	3c01      	subs	r4, #1
 8009192:	f100 0514 	add.w	r5, r0, #20
 8009196:	f101 0814 	add.w	r8, r1, #20
 800919a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a8:	3301      	adds	r3, #1
 80091aa:	429a      	cmp	r2, r3
 80091ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80091b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091b8:	d331      	bcc.n	800921e <quorem+0x9e>
 80091ba:	f04f 0e00 	mov.w	lr, #0
 80091be:	4640      	mov	r0, r8
 80091c0:	46ac      	mov	ip, r5
 80091c2:	46f2      	mov	sl, lr
 80091c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80091c8:	b293      	uxth	r3, r2
 80091ca:	fb06 e303 	mla	r3, r6, r3, lr
 80091ce:	0c12      	lsrs	r2, r2, #16
 80091d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	fb06 e202 	mla	r2, r6, r2, lr
 80091da:	ebaa 0303 	sub.w	r3, sl, r3
 80091de:	f8dc a000 	ldr.w	sl, [ip]
 80091e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091e6:	fa1f fa8a 	uxth.w	sl, sl
 80091ea:	4453      	add	r3, sl
 80091ec:	f8dc a000 	ldr.w	sl, [ip]
 80091f0:	b292      	uxth	r2, r2
 80091f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009200:	4581      	cmp	r9, r0
 8009202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009206:	f84c 3b04 	str.w	r3, [ip], #4
 800920a:	d2db      	bcs.n	80091c4 <quorem+0x44>
 800920c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009210:	b92b      	cbnz	r3, 800921e <quorem+0x9e>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	3b04      	subs	r3, #4
 8009216:	429d      	cmp	r5, r3
 8009218:	461a      	mov	r2, r3
 800921a:	d32f      	bcc.n	800927c <quorem+0xfc>
 800921c:	613c      	str	r4, [r7, #16]
 800921e:	4638      	mov	r0, r7
 8009220:	f001 f8ce 	bl	800a3c0 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	db25      	blt.n	8009274 <quorem+0xf4>
 8009228:	4628      	mov	r0, r5
 800922a:	f04f 0c00 	mov.w	ip, #0
 800922e:	3601      	adds	r6, #1
 8009230:	f858 1b04 	ldr.w	r1, [r8], #4
 8009234:	f8d0 e000 	ldr.w	lr, [r0]
 8009238:	b28b      	uxth	r3, r1
 800923a:	ebac 0303 	sub.w	r3, ip, r3
 800923e:	fa1f f28e 	uxth.w	r2, lr
 8009242:	4413      	add	r3, r2
 8009244:	0c0a      	lsrs	r2, r1, #16
 8009246:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800924a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800924e:	b29b      	uxth	r3, r3
 8009250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009254:	45c1      	cmp	r9, r8
 8009256:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800925a:	f840 3b04 	str.w	r3, [r0], #4
 800925e:	d2e7      	bcs.n	8009230 <quorem+0xb0>
 8009260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009264:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009268:	b922      	cbnz	r2, 8009274 <quorem+0xf4>
 800926a:	3b04      	subs	r3, #4
 800926c:	429d      	cmp	r5, r3
 800926e:	461a      	mov	r2, r3
 8009270:	d30a      	bcc.n	8009288 <quorem+0x108>
 8009272:	613c      	str	r4, [r7, #16]
 8009274:	4630      	mov	r0, r6
 8009276:	b003      	add	sp, #12
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	6812      	ldr	r2, [r2, #0]
 800927e:	3b04      	subs	r3, #4
 8009280:	2a00      	cmp	r2, #0
 8009282:	d1cb      	bne.n	800921c <quorem+0x9c>
 8009284:	3c01      	subs	r4, #1
 8009286:	e7c6      	b.n	8009216 <quorem+0x96>
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	3b04      	subs	r3, #4
 800928c:	2a00      	cmp	r2, #0
 800928e:	d1f0      	bne.n	8009272 <quorem+0xf2>
 8009290:	3c01      	subs	r4, #1
 8009292:	e7eb      	b.n	800926c <quorem+0xec>
 8009294:	2000      	movs	r0, #0
 8009296:	e7ee      	b.n	8009276 <quorem+0xf6>

08009298 <_dtoa_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	4616      	mov	r6, r2
 800929e:	461f      	mov	r7, r3
 80092a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80092a2:	b099      	sub	sp, #100	; 0x64
 80092a4:	4605      	mov	r5, r0
 80092a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80092aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80092ae:	b974      	cbnz	r4, 80092ce <_dtoa_r+0x36>
 80092b0:	2010      	movs	r0, #16
 80092b2:	f000 fde3 	bl	8009e7c <malloc>
 80092b6:	4602      	mov	r2, r0
 80092b8:	6268      	str	r0, [r5, #36]	; 0x24
 80092ba:	b920      	cbnz	r0, 80092c6 <_dtoa_r+0x2e>
 80092bc:	21ea      	movs	r1, #234	; 0xea
 80092be:	4ba8      	ldr	r3, [pc, #672]	; (8009560 <_dtoa_r+0x2c8>)
 80092c0:	48a8      	ldr	r0, [pc, #672]	; (8009564 <_dtoa_r+0x2cc>)
 80092c2:	f001 fa81 	bl	800a7c8 <__assert_func>
 80092c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092ca:	6004      	str	r4, [r0, #0]
 80092cc:	60c4      	str	r4, [r0, #12]
 80092ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	b151      	cbz	r1, 80092ea <_dtoa_r+0x52>
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	2301      	movs	r3, #1
 80092d8:	4093      	lsls	r3, r2
 80092da:	604a      	str	r2, [r1, #4]
 80092dc:	608b      	str	r3, [r1, #8]
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fe30 	bl	8009f44 <_Bfree>
 80092e4:	2200      	movs	r2, #0
 80092e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	1e3b      	subs	r3, r7, #0
 80092ec:	bfaf      	iteee	ge
 80092ee:	2300      	movge	r3, #0
 80092f0:	2201      	movlt	r2, #1
 80092f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	9305      	strlt	r3, [sp, #20]
 80092f8:	bfa8      	it	ge
 80092fa:	f8c8 3000 	strge.w	r3, [r8]
 80092fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009302:	4b99      	ldr	r3, [pc, #612]	; (8009568 <_dtoa_r+0x2d0>)
 8009304:	bfb8      	it	lt
 8009306:	f8c8 2000 	strlt.w	r2, [r8]
 800930a:	ea33 0309 	bics.w	r3, r3, r9
 800930e:	d119      	bne.n	8009344 <_dtoa_r+0xac>
 8009310:	f242 730f 	movw	r3, #9999	; 0x270f
 8009314:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800931c:	4333      	orrs	r3, r6
 800931e:	f000 857f 	beq.w	8009e20 <_dtoa_r+0xb88>
 8009322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009324:	b953      	cbnz	r3, 800933c <_dtoa_r+0xa4>
 8009326:	4b91      	ldr	r3, [pc, #580]	; (800956c <_dtoa_r+0x2d4>)
 8009328:	e022      	b.n	8009370 <_dtoa_r+0xd8>
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_dtoa_r+0x2d8>)
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	3308      	adds	r3, #8
 8009330:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	9803      	ldr	r0, [sp, #12]
 8009336:	b019      	add	sp, #100	; 0x64
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	4b8b      	ldr	r3, [pc, #556]	; (800956c <_dtoa_r+0x2d4>)
 800933e:	9303      	str	r3, [sp, #12]
 8009340:	3303      	adds	r3, #3
 8009342:	e7f5      	b.n	8009330 <_dtoa_r+0x98>
 8009344:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009348:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800934c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8009358:	4680      	mov	r8, r0
 800935a:	b158      	cbz	r0, 8009374 <_dtoa_r+0xdc>
 800935c:	2301      	movs	r3, #1
 800935e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8558 	beq.w	8009e1a <_dtoa_r+0xb82>
 800936a:	4882      	ldr	r0, [pc, #520]	; (8009574 <_dtoa_r+0x2dc>)
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	1e43      	subs	r3, r0, #1
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	e7df      	b.n	8009334 <_dtoa_r+0x9c>
 8009374:	ab16      	add	r3, sp, #88	; 0x58
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	ab17      	add	r3, sp, #92	; 0x5c
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4628      	mov	r0, r5
 800937e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009382:	f001 f8c5 	bl	800a510 <__d2b>
 8009386:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800938a:	4683      	mov	fp, r0
 800938c:	2c00      	cmp	r4, #0
 800938e:	d07f      	beq.n	8009490 <_dtoa_r+0x1f8>
 8009390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009396:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800939a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800939e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80093a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80093a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80093aa:	2200      	movs	r2, #0
 80093ac:	4b72      	ldr	r3, [pc, #456]	; (8009578 <_dtoa_r+0x2e0>)
 80093ae:	f7f6 fedb 	bl	8000168 <__aeabi_dsub>
 80093b2:	a365      	add	r3, pc, #404	; (adr r3, 8009548 <_dtoa_r+0x2b0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f7 f88e 	bl	80004d8 <__aeabi_dmul>
 80093bc:	a364      	add	r3, pc, #400	; (adr r3, 8009550 <_dtoa_r+0x2b8>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f6 fed3 	bl	800016c <__adddf3>
 80093c6:	4606      	mov	r6, r0
 80093c8:	4620      	mov	r0, r4
 80093ca:	460f      	mov	r7, r1
 80093cc:	f7f7 f81a 	bl	8000404 <__aeabi_i2d>
 80093d0:	a361      	add	r3, pc, #388	; (adr r3, 8009558 <_dtoa_r+0x2c0>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f7 f87f 	bl	80004d8 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f6 fec3 	bl	800016c <__adddf3>
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	f7f7 fb25 	bl	8000a38 <__aeabi_d2iz>
 80093ee:	2200      	movs	r2, #0
 80093f0:	4682      	mov	sl, r0
 80093f2:	2300      	movs	r3, #0
 80093f4:	4630      	mov	r0, r6
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f7 fae0 	bl	80009bc <__aeabi_dcmplt>
 80093fc:	b148      	cbz	r0, 8009412 <_dtoa_r+0x17a>
 80093fe:	4650      	mov	r0, sl
 8009400:	f7f7 f800 	bl	8000404 <__aeabi_i2d>
 8009404:	4632      	mov	r2, r6
 8009406:	463b      	mov	r3, r7
 8009408:	f7f7 face 	bl	80009a8 <__aeabi_dcmpeq>
 800940c:	b908      	cbnz	r0, 8009412 <_dtoa_r+0x17a>
 800940e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009412:	f1ba 0f16 	cmp.w	sl, #22
 8009416:	d858      	bhi.n	80094ca <_dtoa_r+0x232>
 8009418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800941c:	4b57      	ldr	r3, [pc, #348]	; (800957c <_dtoa_r+0x2e4>)
 800941e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f7 fac9 	bl	80009bc <__aeabi_dcmplt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d04f      	beq.n	80094ce <_dtoa_r+0x236>
 800942e:	2300      	movs	r3, #0
 8009430:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009434:	930f      	str	r3, [sp, #60]	; 0x3c
 8009436:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009438:	1b1c      	subs	r4, r3, r4
 800943a:	1e63      	subs	r3, r4, #1
 800943c:	9309      	str	r3, [sp, #36]	; 0x24
 800943e:	bf49      	itett	mi
 8009440:	f1c4 0301 	rsbmi	r3, r4, #1
 8009444:	2300      	movpl	r3, #0
 8009446:	9306      	strmi	r3, [sp, #24]
 8009448:	2300      	movmi	r3, #0
 800944a:	bf54      	ite	pl
 800944c:	9306      	strpl	r3, [sp, #24]
 800944e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009450:	f1ba 0f00 	cmp.w	sl, #0
 8009454:	db3d      	blt.n	80094d2 <_dtoa_r+0x23a>
 8009456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009458:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800945c:	4453      	add	r3, sl
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	2300      	movs	r3, #0
 8009462:	930a      	str	r3, [sp, #40]	; 0x28
 8009464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009466:	2b09      	cmp	r3, #9
 8009468:	f200 808c 	bhi.w	8009584 <_dtoa_r+0x2ec>
 800946c:	2b05      	cmp	r3, #5
 800946e:	bfc4      	itt	gt
 8009470:	3b04      	subgt	r3, #4
 8009472:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009476:	bfc8      	it	gt
 8009478:	2400      	movgt	r4, #0
 800947a:	f1a3 0302 	sub.w	r3, r3, #2
 800947e:	bfd8      	it	le
 8009480:	2401      	movle	r4, #1
 8009482:	2b03      	cmp	r3, #3
 8009484:	f200 808a 	bhi.w	800959c <_dtoa_r+0x304>
 8009488:	e8df f003 	tbb	[pc, r3]
 800948c:	5b4d4f2d 	.word	0x5b4d4f2d
 8009490:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009494:	441c      	add	r4, r3
 8009496:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800949a:	2b20      	cmp	r3, #32
 800949c:	bfc3      	ittte	gt
 800949e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80094a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80094aa:	f1c3 0320 	rsble	r3, r3, #32
 80094ae:	bfc6      	itte	gt
 80094b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80094b4:	4318      	orrgt	r0, r3
 80094b6:	fa06 f003 	lslle.w	r0, r6, r3
 80094ba:	f7f6 ff93 	bl	80003e4 <__aeabi_ui2d>
 80094be:	2301      	movs	r3, #1
 80094c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80094c4:	3c01      	subs	r4, #1
 80094c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80094c8:	e76f      	b.n	80093aa <_dtoa_r+0x112>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e7b2      	b.n	8009434 <_dtoa_r+0x19c>
 80094ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80094d0:	e7b1      	b.n	8009436 <_dtoa_r+0x19e>
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	eba3 030a 	sub.w	r3, r3, sl
 80094d8:	9306      	str	r3, [sp, #24]
 80094da:	f1ca 0300 	rsb	r3, sl, #0
 80094de:	930a      	str	r3, [sp, #40]	; 0x28
 80094e0:	2300      	movs	r3, #0
 80094e2:	930e      	str	r3, [sp, #56]	; 0x38
 80094e4:	e7be      	b.n	8009464 <_dtoa_r+0x1cc>
 80094e6:	2300      	movs	r3, #0
 80094e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dc58      	bgt.n	80095a2 <_dtoa_r+0x30a>
 80094f0:	f04f 0901 	mov.w	r9, #1
 80094f4:	464b      	mov	r3, r9
 80094f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80094fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80094fe:	2200      	movs	r2, #0
 8009500:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009502:	6042      	str	r2, [r0, #4]
 8009504:	2204      	movs	r2, #4
 8009506:	f102 0614 	add.w	r6, r2, #20
 800950a:	429e      	cmp	r6, r3
 800950c:	6841      	ldr	r1, [r0, #4]
 800950e:	d94e      	bls.n	80095ae <_dtoa_r+0x316>
 8009510:	4628      	mov	r0, r5
 8009512:	f000 fcd7 	bl	8009ec4 <_Balloc>
 8009516:	9003      	str	r0, [sp, #12]
 8009518:	2800      	cmp	r0, #0
 800951a:	d14c      	bne.n	80095b6 <_dtoa_r+0x31e>
 800951c:	4602      	mov	r2, r0
 800951e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009522:	4b17      	ldr	r3, [pc, #92]	; (8009580 <_dtoa_r+0x2e8>)
 8009524:	e6cc      	b.n	80092c0 <_dtoa_r+0x28>
 8009526:	2301      	movs	r3, #1
 8009528:	e7de      	b.n	80094e8 <_dtoa_r+0x250>
 800952a:	2300      	movs	r3, #0
 800952c:	930b      	str	r3, [sp, #44]	; 0x2c
 800952e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009530:	eb0a 0903 	add.w	r9, sl, r3
 8009534:	f109 0301 	add.w	r3, r9, #1
 8009538:	2b01      	cmp	r3, #1
 800953a:	9308      	str	r3, [sp, #32]
 800953c:	bfb8      	it	lt
 800953e:	2301      	movlt	r3, #1
 8009540:	e7dd      	b.n	80094fe <_dtoa_r+0x266>
 8009542:	2301      	movs	r3, #1
 8009544:	e7f2      	b.n	800952c <_dtoa_r+0x294>
 8009546:	bf00      	nop
 8009548:	636f4361 	.word	0x636f4361
 800954c:	3fd287a7 	.word	0x3fd287a7
 8009550:	8b60c8b3 	.word	0x8b60c8b3
 8009554:	3fc68a28 	.word	0x3fc68a28
 8009558:	509f79fb 	.word	0x509f79fb
 800955c:	3fd34413 	.word	0x3fd34413
 8009560:	0800bead 	.word	0x0800bead
 8009564:	0800bec4 	.word	0x0800bec4
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	0800bea9 	.word	0x0800bea9
 8009570:	0800bea0 	.word	0x0800bea0
 8009574:	0800be7d 	.word	0x0800be7d
 8009578:	3ff80000 	.word	0x3ff80000
 800957c:	0800bfb8 	.word	0x0800bfb8
 8009580:	0800bf1f 	.word	0x0800bf1f
 8009584:	2401      	movs	r4, #1
 8009586:	2300      	movs	r3, #0
 8009588:	940b      	str	r4, [sp, #44]	; 0x2c
 800958a:	9322      	str	r3, [sp, #136]	; 0x88
 800958c:	f04f 39ff 	mov.w	r9, #4294967295
 8009590:	2200      	movs	r2, #0
 8009592:	2312      	movs	r3, #18
 8009594:	f8cd 9020 	str.w	r9, [sp, #32]
 8009598:	9223      	str	r2, [sp, #140]	; 0x8c
 800959a:	e7b0      	b.n	80094fe <_dtoa_r+0x266>
 800959c:	2301      	movs	r3, #1
 800959e:	930b      	str	r3, [sp, #44]	; 0x2c
 80095a0:	e7f4      	b.n	800958c <_dtoa_r+0x2f4>
 80095a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80095a6:	464b      	mov	r3, r9
 80095a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80095ac:	e7a7      	b.n	80094fe <_dtoa_r+0x266>
 80095ae:	3101      	adds	r1, #1
 80095b0:	6041      	str	r1, [r0, #4]
 80095b2:	0052      	lsls	r2, r2, #1
 80095b4:	e7a7      	b.n	8009506 <_dtoa_r+0x26e>
 80095b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095b8:	9a03      	ldr	r2, [sp, #12]
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	9b08      	ldr	r3, [sp, #32]
 80095be:	2b0e      	cmp	r3, #14
 80095c0:	f200 80a8 	bhi.w	8009714 <_dtoa_r+0x47c>
 80095c4:	2c00      	cmp	r4, #0
 80095c6:	f000 80a5 	beq.w	8009714 <_dtoa_r+0x47c>
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	dd34      	ble.n	800963a <_dtoa_r+0x3a2>
 80095d0:	4a9a      	ldr	r2, [pc, #616]	; (800983c <_dtoa_r+0x5a4>)
 80095d2:	f00a 030f 	and.w	r3, sl, #15
 80095d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80095de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80095e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80095ea:	d016      	beq.n	800961a <_dtoa_r+0x382>
 80095ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095f0:	4b93      	ldr	r3, [pc, #588]	; (8009840 <_dtoa_r+0x5a8>)
 80095f2:	2703      	movs	r7, #3
 80095f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095f8:	f7f7 f898 	bl	800072c <__aeabi_ddiv>
 80095fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009600:	f004 040f 	and.w	r4, r4, #15
 8009604:	4e8e      	ldr	r6, [pc, #568]	; (8009840 <_dtoa_r+0x5a8>)
 8009606:	b954      	cbnz	r4, 800961e <_dtoa_r+0x386>
 8009608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800960c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009610:	f7f7 f88c 	bl	800072c <__aeabi_ddiv>
 8009614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009618:	e029      	b.n	800966e <_dtoa_r+0x3d6>
 800961a:	2702      	movs	r7, #2
 800961c:	e7f2      	b.n	8009604 <_dtoa_r+0x36c>
 800961e:	07e1      	lsls	r1, r4, #31
 8009620:	d508      	bpl.n	8009634 <_dtoa_r+0x39c>
 8009622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009626:	e9d6 2300 	ldrd	r2, r3, [r6]
 800962a:	f7f6 ff55 	bl	80004d8 <__aeabi_dmul>
 800962e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009632:	3701      	adds	r7, #1
 8009634:	1064      	asrs	r4, r4, #1
 8009636:	3608      	adds	r6, #8
 8009638:	e7e5      	b.n	8009606 <_dtoa_r+0x36e>
 800963a:	f000 80a5 	beq.w	8009788 <_dtoa_r+0x4f0>
 800963e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009642:	f1ca 0400 	rsb	r4, sl, #0
 8009646:	4b7d      	ldr	r3, [pc, #500]	; (800983c <_dtoa_r+0x5a4>)
 8009648:	f004 020f 	and.w	r2, r4, #15
 800964c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 ff40 	bl	80004d8 <__aeabi_dmul>
 8009658:	2702      	movs	r7, #2
 800965a:	2300      	movs	r3, #0
 800965c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009660:	4e77      	ldr	r6, [pc, #476]	; (8009840 <_dtoa_r+0x5a8>)
 8009662:	1124      	asrs	r4, r4, #4
 8009664:	2c00      	cmp	r4, #0
 8009666:	f040 8084 	bne.w	8009772 <_dtoa_r+0x4da>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1d2      	bne.n	8009614 <_dtoa_r+0x37c>
 800966e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 808b 	beq.w	800978c <_dtoa_r+0x4f4>
 8009676:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800967a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800967e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009682:	2200      	movs	r2, #0
 8009684:	4b6f      	ldr	r3, [pc, #444]	; (8009844 <_dtoa_r+0x5ac>)
 8009686:	f7f7 f999 	bl	80009bc <__aeabi_dcmplt>
 800968a:	2800      	cmp	r0, #0
 800968c:	d07e      	beq.n	800978c <_dtoa_r+0x4f4>
 800968e:	9b08      	ldr	r3, [sp, #32]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d07b      	beq.n	800978c <_dtoa_r+0x4f4>
 8009694:	f1b9 0f00 	cmp.w	r9, #0
 8009698:	dd38      	ble.n	800970c <_dtoa_r+0x474>
 800969a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800969e:	2200      	movs	r2, #0
 80096a0:	4b69      	ldr	r3, [pc, #420]	; (8009848 <_dtoa_r+0x5b0>)
 80096a2:	f7f6 ff19 	bl	80004d8 <__aeabi_dmul>
 80096a6:	464c      	mov	r4, r9
 80096a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 80096b0:	3701      	adds	r7, #1
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7f6 fea6 	bl	8000404 <__aeabi_i2d>
 80096b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096bc:	f7f6 ff0c 	bl	80004d8 <__aeabi_dmul>
 80096c0:	2200      	movs	r2, #0
 80096c2:	4b62      	ldr	r3, [pc, #392]	; (800984c <_dtoa_r+0x5b4>)
 80096c4:	f7f6 fd52 	bl	800016c <__adddf3>
 80096c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80096cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096d0:	9611      	str	r6, [sp, #68]	; 0x44
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d15d      	bne.n	8009792 <_dtoa_r+0x4fa>
 80096d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096da:	2200      	movs	r2, #0
 80096dc:	4b5c      	ldr	r3, [pc, #368]	; (8009850 <_dtoa_r+0x5b8>)
 80096de:	f7f6 fd43 	bl	8000168 <__aeabi_dsub>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ea:	4633      	mov	r3, r6
 80096ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096ee:	f7f7 f983 	bl	80009f8 <__aeabi_dcmpgt>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f040 829c 	bne.w	8009c30 <_dtoa_r+0x998>
 80096f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009702:	f7f7 f95b 	bl	80009bc <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	f040 8290 	bne.w	8009c2c <_dtoa_r+0x994>
 800970c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009710:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009716:	2b00      	cmp	r3, #0
 8009718:	f2c0 8152 	blt.w	80099c0 <_dtoa_r+0x728>
 800971c:	f1ba 0f0e 	cmp.w	sl, #14
 8009720:	f300 814e 	bgt.w	80099c0 <_dtoa_r+0x728>
 8009724:	4b45      	ldr	r3, [pc, #276]	; (800983c <_dtoa_r+0x5a4>)
 8009726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800972a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800972e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009734:	2b00      	cmp	r3, #0
 8009736:	f280 80db 	bge.w	80098f0 <_dtoa_r+0x658>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f300 80d7 	bgt.w	80098f0 <_dtoa_r+0x658>
 8009742:	f040 8272 	bne.w	8009c2a <_dtoa_r+0x992>
 8009746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800974a:	2200      	movs	r2, #0
 800974c:	4b40      	ldr	r3, [pc, #256]	; (8009850 <_dtoa_r+0x5b8>)
 800974e:	f7f6 fec3 	bl	80004d8 <__aeabi_dmul>
 8009752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009756:	f7f7 f945 	bl	80009e4 <__aeabi_dcmpge>
 800975a:	9c08      	ldr	r4, [sp, #32]
 800975c:	4626      	mov	r6, r4
 800975e:	2800      	cmp	r0, #0
 8009760:	f040 8248 	bne.w	8009bf4 <_dtoa_r+0x95c>
 8009764:	2331      	movs	r3, #49	; 0x31
 8009766:	9f03      	ldr	r7, [sp, #12]
 8009768:	f10a 0a01 	add.w	sl, sl, #1
 800976c:	f807 3b01 	strb.w	r3, [r7], #1
 8009770:	e244      	b.n	8009bfc <_dtoa_r+0x964>
 8009772:	07e2      	lsls	r2, r4, #31
 8009774:	d505      	bpl.n	8009782 <_dtoa_r+0x4ea>
 8009776:	e9d6 2300 	ldrd	r2, r3, [r6]
 800977a:	f7f6 fead 	bl	80004d8 <__aeabi_dmul>
 800977e:	2301      	movs	r3, #1
 8009780:	3701      	adds	r7, #1
 8009782:	1064      	asrs	r4, r4, #1
 8009784:	3608      	adds	r6, #8
 8009786:	e76d      	b.n	8009664 <_dtoa_r+0x3cc>
 8009788:	2702      	movs	r7, #2
 800978a:	e770      	b.n	800966e <_dtoa_r+0x3d6>
 800978c:	46d0      	mov	r8, sl
 800978e:	9c08      	ldr	r4, [sp, #32]
 8009790:	e78f      	b.n	80096b2 <_dtoa_r+0x41a>
 8009792:	9903      	ldr	r1, [sp, #12]
 8009794:	4b29      	ldr	r3, [pc, #164]	; (800983c <_dtoa_r+0x5a4>)
 8009796:	4421      	add	r1, r4
 8009798:	9112      	str	r1, [sp, #72]	; 0x48
 800979a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800979c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80097a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097a8:	2900      	cmp	r1, #0
 80097aa:	d055      	beq.n	8009858 <_dtoa_r+0x5c0>
 80097ac:	2000      	movs	r0, #0
 80097ae:	4929      	ldr	r1, [pc, #164]	; (8009854 <_dtoa_r+0x5bc>)
 80097b0:	f7f6 ffbc 	bl	800072c <__aeabi_ddiv>
 80097b4:	463b      	mov	r3, r7
 80097b6:	4632      	mov	r2, r6
 80097b8:	f7f6 fcd6 	bl	8000168 <__aeabi_dsub>
 80097bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097c0:	9f03      	ldr	r7, [sp, #12]
 80097c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097c6:	f7f7 f937 	bl	8000a38 <__aeabi_d2iz>
 80097ca:	4604      	mov	r4, r0
 80097cc:	f7f6 fe1a 	bl	8000404 <__aeabi_i2d>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097d8:	f7f6 fcc6 	bl	8000168 <__aeabi_dsub>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	3430      	adds	r4, #48	; 0x30
 80097e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097ea:	f807 4b01 	strb.w	r4, [r7], #1
 80097ee:	f7f7 f8e5 	bl	80009bc <__aeabi_dcmplt>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d174      	bne.n	80098e0 <_dtoa_r+0x648>
 80097f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fa:	2000      	movs	r0, #0
 80097fc:	4911      	ldr	r1, [pc, #68]	; (8009844 <_dtoa_r+0x5ac>)
 80097fe:	f7f6 fcb3 	bl	8000168 <__aeabi_dsub>
 8009802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009806:	f7f7 f8d9 	bl	80009bc <__aeabi_dcmplt>
 800980a:	2800      	cmp	r0, #0
 800980c:	f040 80b7 	bne.w	800997e <_dtoa_r+0x6e6>
 8009810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009812:	429f      	cmp	r7, r3
 8009814:	f43f af7a 	beq.w	800970c <_dtoa_r+0x474>
 8009818:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800981c:	2200      	movs	r2, #0
 800981e:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <_dtoa_r+0x5b0>)
 8009820:	f7f6 fe5a 	bl	80004d8 <__aeabi_dmul>
 8009824:	2200      	movs	r2, #0
 8009826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800982a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800982e:	4b06      	ldr	r3, [pc, #24]	; (8009848 <_dtoa_r+0x5b0>)
 8009830:	f7f6 fe52 	bl	80004d8 <__aeabi_dmul>
 8009834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009838:	e7c3      	b.n	80097c2 <_dtoa_r+0x52a>
 800983a:	bf00      	nop
 800983c:	0800bfb8 	.word	0x0800bfb8
 8009840:	0800bf90 	.word	0x0800bf90
 8009844:	3ff00000 	.word	0x3ff00000
 8009848:	40240000 	.word	0x40240000
 800984c:	401c0000 	.word	0x401c0000
 8009850:	40140000 	.word	0x40140000
 8009854:	3fe00000 	.word	0x3fe00000
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 fe3c 	bl	80004d8 <__aeabi_dmul>
 8009860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009862:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009866:	9c03      	ldr	r4, [sp, #12]
 8009868:	9314      	str	r3, [sp, #80]	; 0x50
 800986a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800986e:	f7f7 f8e3 	bl	8000a38 <__aeabi_d2iz>
 8009872:	9015      	str	r0, [sp, #84]	; 0x54
 8009874:	f7f6 fdc6 	bl	8000404 <__aeabi_i2d>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009880:	f7f6 fc72 	bl	8000168 <__aeabi_dsub>
 8009884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009886:	4606      	mov	r6, r0
 8009888:	3330      	adds	r3, #48	; 0x30
 800988a:	f804 3b01 	strb.w	r3, [r4], #1
 800988e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009890:	460f      	mov	r7, r1
 8009892:	429c      	cmp	r4, r3
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	d124      	bne.n	80098e4 <_dtoa_r+0x64c>
 800989a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800989e:	4bb0      	ldr	r3, [pc, #704]	; (8009b60 <_dtoa_r+0x8c8>)
 80098a0:	f7f6 fc64 	bl	800016c <__adddf3>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f7 f8a4 	bl	80009f8 <__aeabi_dcmpgt>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d163      	bne.n	800997c <_dtoa_r+0x6e4>
 80098b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098b8:	2000      	movs	r0, #0
 80098ba:	49a9      	ldr	r1, [pc, #676]	; (8009b60 <_dtoa_r+0x8c8>)
 80098bc:	f7f6 fc54 	bl	8000168 <__aeabi_dsub>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4630      	mov	r0, r6
 80098c6:	4639      	mov	r1, r7
 80098c8:	f7f7 f878 	bl	80009bc <__aeabi_dcmplt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f af1d 	beq.w	800970c <_dtoa_r+0x474>
 80098d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80098d4:	1e7b      	subs	r3, r7, #1
 80098d6:	9314      	str	r3, [sp, #80]	; 0x50
 80098d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80098dc:	2b30      	cmp	r3, #48	; 0x30
 80098de:	d0f8      	beq.n	80098d2 <_dtoa_r+0x63a>
 80098e0:	46c2      	mov	sl, r8
 80098e2:	e03b      	b.n	800995c <_dtoa_r+0x6c4>
 80098e4:	4b9f      	ldr	r3, [pc, #636]	; (8009b64 <_dtoa_r+0x8cc>)
 80098e6:	f7f6 fdf7 	bl	80004d8 <__aeabi_dmul>
 80098ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ee:	e7bc      	b.n	800986a <_dtoa_r+0x5d2>
 80098f0:	9f03      	ldr	r7, [sp, #12]
 80098f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80098f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f6 ff15 	bl	800072c <__aeabi_ddiv>
 8009902:	f7f7 f899 	bl	8000a38 <__aeabi_d2iz>
 8009906:	4604      	mov	r4, r0
 8009908:	f7f6 fd7c 	bl	8000404 <__aeabi_i2d>
 800990c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009910:	f7f6 fde2 	bl	80004d8 <__aeabi_dmul>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	f7f6 fc24 	bl	8000168 <__aeabi_dsub>
 8009920:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009924:	f807 6b01 	strb.w	r6, [r7], #1
 8009928:	9e03      	ldr	r6, [sp, #12]
 800992a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800992e:	1bbe      	subs	r6, r7, r6
 8009930:	45b4      	cmp	ip, r6
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	d136      	bne.n	80099a6 <_dtoa_r+0x70e>
 8009938:	f7f6 fc18 	bl	800016c <__adddf3>
 800993c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009940:	4680      	mov	r8, r0
 8009942:	4689      	mov	r9, r1
 8009944:	f7f7 f858 	bl	80009f8 <__aeabi_dcmpgt>
 8009948:	bb58      	cbnz	r0, 80099a2 <_dtoa_r+0x70a>
 800994a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f7 f829 	bl	80009a8 <__aeabi_dcmpeq>
 8009956:	b108      	cbz	r0, 800995c <_dtoa_r+0x6c4>
 8009958:	07e1      	lsls	r1, r4, #31
 800995a:	d422      	bmi.n	80099a2 <_dtoa_r+0x70a>
 800995c:	4628      	mov	r0, r5
 800995e:	4659      	mov	r1, fp
 8009960:	f000 faf0 	bl	8009f44 <_Bfree>
 8009964:	2300      	movs	r3, #0
 8009966:	703b      	strb	r3, [r7, #0]
 8009968:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800996a:	f10a 0001 	add.w	r0, sl, #1
 800996e:	6018      	str	r0, [r3, #0]
 8009970:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009972:	2b00      	cmp	r3, #0
 8009974:	f43f acde 	beq.w	8009334 <_dtoa_r+0x9c>
 8009978:	601f      	str	r7, [r3, #0]
 800997a:	e4db      	b.n	8009334 <_dtoa_r+0x9c>
 800997c:	4627      	mov	r7, r4
 800997e:	463b      	mov	r3, r7
 8009980:	461f      	mov	r7, r3
 8009982:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009986:	2a39      	cmp	r2, #57	; 0x39
 8009988:	d107      	bne.n	800999a <_dtoa_r+0x702>
 800998a:	9a03      	ldr	r2, [sp, #12]
 800998c:	429a      	cmp	r2, r3
 800998e:	d1f7      	bne.n	8009980 <_dtoa_r+0x6e8>
 8009990:	2230      	movs	r2, #48	; 0x30
 8009992:	9903      	ldr	r1, [sp, #12]
 8009994:	f108 0801 	add.w	r8, r8, #1
 8009998:	700a      	strb	r2, [r1, #0]
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	3201      	adds	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	e79e      	b.n	80098e0 <_dtoa_r+0x648>
 80099a2:	46d0      	mov	r8, sl
 80099a4:	e7eb      	b.n	800997e <_dtoa_r+0x6e6>
 80099a6:	2200      	movs	r2, #0
 80099a8:	4b6e      	ldr	r3, [pc, #440]	; (8009b64 <_dtoa_r+0x8cc>)
 80099aa:	f7f6 fd95 	bl	80004d8 <__aeabi_dmul>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4680      	mov	r8, r0
 80099b4:	4689      	mov	r9, r1
 80099b6:	f7f6 fff7 	bl	80009a8 <__aeabi_dcmpeq>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d09b      	beq.n	80098f6 <_dtoa_r+0x65e>
 80099be:	e7cd      	b.n	800995c <_dtoa_r+0x6c4>
 80099c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	f000 80d0 	beq.w	8009b68 <_dtoa_r+0x8d0>
 80099c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099ca:	2a01      	cmp	r2, #1
 80099cc:	f300 80ae 	bgt.w	8009b2c <_dtoa_r+0x894>
 80099d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	f000 80a6 	beq.w	8009b24 <_dtoa_r+0x88c>
 80099d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80099de:	9f06      	ldr	r7, [sp, #24]
 80099e0:	9a06      	ldr	r2, [sp, #24]
 80099e2:	2101      	movs	r1, #1
 80099e4:	441a      	add	r2, r3
 80099e6:	9206      	str	r2, [sp, #24]
 80099e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ea:	4628      	mov	r0, r5
 80099ec:	441a      	add	r2, r3
 80099ee:	9209      	str	r2, [sp, #36]	; 0x24
 80099f0:	f000 fb5e 	bl	800a0b0 <__i2b>
 80099f4:	4606      	mov	r6, r0
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	dd0c      	ble.n	8009a14 <_dtoa_r+0x77c>
 80099fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	dd09      	ble.n	8009a14 <_dtoa_r+0x77c>
 8009a00:	42bb      	cmp	r3, r7
 8009a02:	bfa8      	it	ge
 8009a04:	463b      	movge	r3, r7
 8009a06:	9a06      	ldr	r2, [sp, #24]
 8009a08:	1aff      	subs	r7, r7, r3
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	9206      	str	r2, [sp, #24]
 8009a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	9309      	str	r3, [sp, #36]	; 0x24
 8009a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a16:	b1f3      	cbz	r3, 8009a56 <_dtoa_r+0x7be>
 8009a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80a8 	beq.w	8009b70 <_dtoa_r+0x8d8>
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	dd10      	ble.n	8009a46 <_dtoa_r+0x7ae>
 8009a24:	4631      	mov	r1, r6
 8009a26:	4622      	mov	r2, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 fbff 	bl	800a22c <__pow5mult>
 8009a2e:	465a      	mov	r2, fp
 8009a30:	4601      	mov	r1, r0
 8009a32:	4606      	mov	r6, r0
 8009a34:	4628      	mov	r0, r5
 8009a36:	f000 fb51 	bl	800a0dc <__multiply>
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 fa80 	bl	8009f44 <_Bfree>
 8009a44:	46c3      	mov	fp, r8
 8009a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a48:	1b1a      	subs	r2, r3, r4
 8009a4a:	d004      	beq.n	8009a56 <_dtoa_r+0x7be>
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 fbec 	bl	800a22c <__pow5mult>
 8009a54:	4683      	mov	fp, r0
 8009a56:	2101      	movs	r1, #1
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f000 fb29 	bl	800a0b0 <__i2b>
 8009a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a60:	4604      	mov	r4, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f340 8086 	ble.w	8009b74 <_dtoa_r+0x8dc>
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f000 fbdd 	bl	800a22c <__pow5mult>
 8009a72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a74:	4604      	mov	r4, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	dd7f      	ble.n	8009b7a <_dtoa_r+0x8e2>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a84:	6918      	ldr	r0, [r3, #16]
 8009a86:	f000 fac5 	bl	800a014 <__hi0bits>
 8009a8a:	f1c0 0020 	rsb	r0, r0, #32
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	4418      	add	r0, r3
 8009a92:	f010 001f 	ands.w	r0, r0, #31
 8009a96:	f000 8092 	beq.w	8009bbe <_dtoa_r+0x926>
 8009a9a:	f1c0 0320 	rsb	r3, r0, #32
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	f340 808a 	ble.w	8009bb8 <_dtoa_r+0x920>
 8009aa4:	f1c0 001c 	rsb	r0, r0, #28
 8009aa8:	9b06      	ldr	r3, [sp, #24]
 8009aaa:	4407      	add	r7, r0
 8009aac:	4403      	add	r3, r0
 8009aae:	9306      	str	r3, [sp, #24]
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	4403      	add	r3, r0
 8009ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab6:	9b06      	ldr	r3, [sp, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd05      	ble.n	8009ac8 <_dtoa_r+0x830>
 8009abc:	4659      	mov	r1, fp
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f000 fc0d 	bl	800a2e0 <__lshift>
 8009ac6:	4683      	mov	fp, r0
 8009ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	dd05      	ble.n	8009ada <_dtoa_r+0x842>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f000 fc04 	bl	800a2e0 <__lshift>
 8009ad8:	4604      	mov	r4, r0
 8009ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d070      	beq.n	8009bc2 <_dtoa_r+0x92a>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4658      	mov	r0, fp
 8009ae4:	f000 fc6c 	bl	800a3c0 <__mcmp>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	da6a      	bge.n	8009bc2 <_dtoa_r+0x92a>
 8009aec:	2300      	movs	r3, #0
 8009aee:	4659      	mov	r1, fp
 8009af0:	220a      	movs	r2, #10
 8009af2:	4628      	mov	r0, r5
 8009af4:	f000 fa48 	bl	8009f88 <__multadd>
 8009af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afa:	4683      	mov	fp, r0
 8009afc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8194 	beq.w	8009e2e <_dtoa_r+0xb96>
 8009b06:	4631      	mov	r1, r6
 8009b08:	2300      	movs	r3, #0
 8009b0a:	220a      	movs	r2, #10
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 fa3b 	bl	8009f88 <__multadd>
 8009b12:	f1b9 0f00 	cmp.w	r9, #0
 8009b16:	4606      	mov	r6, r0
 8009b18:	f300 8093 	bgt.w	8009c42 <_dtoa_r+0x9aa>
 8009b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	dc57      	bgt.n	8009bd2 <_dtoa_r+0x93a>
 8009b22:	e08e      	b.n	8009c42 <_dtoa_r+0x9aa>
 8009b24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b2a:	e757      	b.n	80099dc <_dtoa_r+0x744>
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	1e5c      	subs	r4, r3, #1
 8009b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	bfb7      	itett	lt
 8009b36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b38:	1b1c      	subge	r4, r3, r4
 8009b3a:	1ae2      	sublt	r2, r4, r3
 8009b3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009b3e:	bfbe      	ittt	lt
 8009b40:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009b42:	189b      	addlt	r3, r3, r2
 8009b44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	bfb8      	it	lt
 8009b4a:	2400      	movlt	r4, #0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfbb      	ittet	lt
 8009b50:	9b06      	ldrlt	r3, [sp, #24]
 8009b52:	9a08      	ldrlt	r2, [sp, #32]
 8009b54:	9f06      	ldrge	r7, [sp, #24]
 8009b56:	1a9f      	sublt	r7, r3, r2
 8009b58:	bfac      	ite	ge
 8009b5a:	9b08      	ldrge	r3, [sp, #32]
 8009b5c:	2300      	movlt	r3, #0
 8009b5e:	e73f      	b.n	80099e0 <_dtoa_r+0x748>
 8009b60:	3fe00000 	.word	0x3fe00000
 8009b64:	40240000 	.word	0x40240000
 8009b68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b6a:	9f06      	ldr	r7, [sp, #24]
 8009b6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009b6e:	e742      	b.n	80099f6 <_dtoa_r+0x75e>
 8009b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b72:	e76b      	b.n	8009a4c <_dtoa_r+0x7b4>
 8009b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	dc19      	bgt.n	8009bae <_dtoa_r+0x916>
 8009b7a:	9b04      	ldr	r3, [sp, #16]
 8009b7c:	b9bb      	cbnz	r3, 8009bae <_dtoa_r+0x916>
 8009b7e:	9b05      	ldr	r3, [sp, #20]
 8009b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b84:	b99b      	cbnz	r3, 8009bae <_dtoa_r+0x916>
 8009b86:	9b05      	ldr	r3, [sp, #20]
 8009b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b8c:	0d1b      	lsrs	r3, r3, #20
 8009b8e:	051b      	lsls	r3, r3, #20
 8009b90:	b183      	cbz	r3, 8009bb4 <_dtoa_r+0x91c>
 8009b92:	f04f 0801 	mov.w	r8, #1
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	9306      	str	r3, [sp, #24]
 8009b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f47f af6a 	bne.w	8009a7e <_dtoa_r+0x7e6>
 8009baa:	2001      	movs	r0, #1
 8009bac:	e76f      	b.n	8009a8e <_dtoa_r+0x7f6>
 8009bae:	f04f 0800 	mov.w	r8, #0
 8009bb2:	e7f6      	b.n	8009ba2 <_dtoa_r+0x90a>
 8009bb4:	4698      	mov	r8, r3
 8009bb6:	e7f4      	b.n	8009ba2 <_dtoa_r+0x90a>
 8009bb8:	f43f af7d 	beq.w	8009ab6 <_dtoa_r+0x81e>
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	301c      	adds	r0, #28
 8009bc0:	e772      	b.n	8009aa8 <_dtoa_r+0x810>
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dc36      	bgt.n	8009c36 <_dtoa_r+0x99e>
 8009bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	dd33      	ble.n	8009c36 <_dtoa_r+0x99e>
 8009bce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bd2:	f1b9 0f00 	cmp.w	r9, #0
 8009bd6:	d10d      	bne.n	8009bf4 <_dtoa_r+0x95c>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	464b      	mov	r3, r9
 8009bdc:	2205      	movs	r2, #5
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f9d2 	bl	8009f88 <__multadd>
 8009be4:	4601      	mov	r1, r0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4658      	mov	r0, fp
 8009bea:	f000 fbe9 	bl	800a3c0 <__mcmp>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f73f adb8 	bgt.w	8009764 <_dtoa_r+0x4cc>
 8009bf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bf6:	9f03      	ldr	r7, [sp, #12]
 8009bf8:	ea6f 0a03 	mvn.w	sl, r3
 8009bfc:	f04f 0800 	mov.w	r8, #0
 8009c00:	4621      	mov	r1, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f99e 	bl	8009f44 <_Bfree>
 8009c08:	2e00      	cmp	r6, #0
 8009c0a:	f43f aea7 	beq.w	800995c <_dtoa_r+0x6c4>
 8009c0e:	f1b8 0f00 	cmp.w	r8, #0
 8009c12:	d005      	beq.n	8009c20 <_dtoa_r+0x988>
 8009c14:	45b0      	cmp	r8, r6
 8009c16:	d003      	beq.n	8009c20 <_dtoa_r+0x988>
 8009c18:	4641      	mov	r1, r8
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f992 	bl	8009f44 <_Bfree>
 8009c20:	4631      	mov	r1, r6
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f98e 	bl	8009f44 <_Bfree>
 8009c28:	e698      	b.n	800995c <_dtoa_r+0x6c4>
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	4626      	mov	r6, r4
 8009c2e:	e7e1      	b.n	8009bf4 <_dtoa_r+0x95c>
 8009c30:	46c2      	mov	sl, r8
 8009c32:	4626      	mov	r6, r4
 8009c34:	e596      	b.n	8009764 <_dtoa_r+0x4cc>
 8009c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80fd 	beq.w	8009e3c <_dtoa_r+0xba4>
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	dd05      	ble.n	8009c52 <_dtoa_r+0x9ba>
 8009c46:	4631      	mov	r1, r6
 8009c48:	463a      	mov	r2, r7
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 fb48 	bl	800a2e0 <__lshift>
 8009c50:	4606      	mov	r6, r0
 8009c52:	f1b8 0f00 	cmp.w	r8, #0
 8009c56:	d05c      	beq.n	8009d12 <_dtoa_r+0xa7a>
 8009c58:	4628      	mov	r0, r5
 8009c5a:	6871      	ldr	r1, [r6, #4]
 8009c5c:	f000 f932 	bl	8009ec4 <_Balloc>
 8009c60:	4607      	mov	r7, r0
 8009c62:	b928      	cbnz	r0, 8009c70 <_dtoa_r+0x9d8>
 8009c64:	4602      	mov	r2, r0
 8009c66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c6a:	4b7f      	ldr	r3, [pc, #508]	; (8009e68 <_dtoa_r+0xbd0>)
 8009c6c:	f7ff bb28 	b.w	80092c0 <_dtoa_r+0x28>
 8009c70:	6932      	ldr	r2, [r6, #16]
 8009c72:	f106 010c 	add.w	r1, r6, #12
 8009c76:	3202      	adds	r2, #2
 8009c78:	0092      	lsls	r2, r2, #2
 8009c7a:	300c      	adds	r0, #12
 8009c7c:	f000 f914 	bl	8009ea8 <memcpy>
 8009c80:	2201      	movs	r2, #1
 8009c82:	4639      	mov	r1, r7
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 fb2b 	bl	800a2e0 <__lshift>
 8009c8a:	46b0      	mov	r8, r6
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	444b      	add	r3, r9
 8009c98:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	4658      	mov	r0, fp
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	f7ff fa68 	bl	8009180 <quorem>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	3330      	adds	r3, #48	; 0x30
 8009cb6:	9006      	str	r0, [sp, #24]
 8009cb8:	4658      	mov	r0, fp
 8009cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cbc:	f000 fb80 	bl	800a3c0 <__mcmp>
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	4681      	mov	r9, r0
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 fb96 	bl	800a3f8 <__mdiff>
 8009ccc:	68c2      	ldr	r2, [r0, #12]
 8009cce:	4607      	mov	r7, r0
 8009cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd2:	bb02      	cbnz	r2, 8009d16 <_dtoa_r+0xa7e>
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	f000 fb72 	bl	800a3c0 <__mcmp>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009ce8:	f000 f92c 	bl	8009f44 <_Bfree>
 8009cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cf0:	9f08      	ldr	r7, [sp, #32]
 8009cf2:	ea43 0102 	orr.w	r1, r3, r2
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cfc:	d10d      	bne.n	8009d1a <_dtoa_r+0xa82>
 8009cfe:	2b39      	cmp	r3, #57	; 0x39
 8009d00:	d029      	beq.n	8009d56 <_dtoa_r+0xabe>
 8009d02:	f1b9 0f00 	cmp.w	r9, #0
 8009d06:	dd01      	ble.n	8009d0c <_dtoa_r+0xa74>
 8009d08:	9b06      	ldr	r3, [sp, #24]
 8009d0a:	3331      	adds	r3, #49	; 0x31
 8009d0c:	9a04      	ldr	r2, [sp, #16]
 8009d0e:	7013      	strb	r3, [r2, #0]
 8009d10:	e776      	b.n	8009c00 <_dtoa_r+0x968>
 8009d12:	4630      	mov	r0, r6
 8009d14:	e7b9      	b.n	8009c8a <_dtoa_r+0x9f2>
 8009d16:	2201      	movs	r2, #1
 8009d18:	e7e2      	b.n	8009ce0 <_dtoa_r+0xa48>
 8009d1a:	f1b9 0f00 	cmp.w	r9, #0
 8009d1e:	db06      	blt.n	8009d2e <_dtoa_r+0xa96>
 8009d20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d22:	ea41 0909 	orr.w	r9, r1, r9
 8009d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d28:	ea59 0101 	orrs.w	r1, r9, r1
 8009d2c:	d120      	bne.n	8009d70 <_dtoa_r+0xad8>
 8009d2e:	2a00      	cmp	r2, #0
 8009d30:	ddec      	ble.n	8009d0c <_dtoa_r+0xa74>
 8009d32:	4659      	mov	r1, fp
 8009d34:	2201      	movs	r2, #1
 8009d36:	4628      	mov	r0, r5
 8009d38:	9308      	str	r3, [sp, #32]
 8009d3a:	f000 fad1 	bl	800a2e0 <__lshift>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4683      	mov	fp, r0
 8009d42:	f000 fb3d 	bl	800a3c0 <__mcmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	9b08      	ldr	r3, [sp, #32]
 8009d4a:	dc02      	bgt.n	8009d52 <_dtoa_r+0xaba>
 8009d4c:	d1de      	bne.n	8009d0c <_dtoa_r+0xa74>
 8009d4e:	07da      	lsls	r2, r3, #31
 8009d50:	d5dc      	bpl.n	8009d0c <_dtoa_r+0xa74>
 8009d52:	2b39      	cmp	r3, #57	; 0x39
 8009d54:	d1d8      	bne.n	8009d08 <_dtoa_r+0xa70>
 8009d56:	2339      	movs	r3, #57	; 0x39
 8009d58:	9a04      	ldr	r2, [sp, #16]
 8009d5a:	7013      	strb	r3, [r2, #0]
 8009d5c:	463b      	mov	r3, r7
 8009d5e:	461f      	mov	r7, r3
 8009d60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	2a39      	cmp	r2, #57	; 0x39
 8009d68:	d050      	beq.n	8009e0c <_dtoa_r+0xb74>
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	e747      	b.n	8009c00 <_dtoa_r+0x968>
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	dd03      	ble.n	8009d7c <_dtoa_r+0xae4>
 8009d74:	2b39      	cmp	r3, #57	; 0x39
 8009d76:	d0ee      	beq.n	8009d56 <_dtoa_r+0xabe>
 8009d78:	3301      	adds	r3, #1
 8009d7a:	e7c7      	b.n	8009d0c <_dtoa_r+0xa74>
 8009d7c:	9a08      	ldr	r2, [sp, #32]
 8009d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d84:	428a      	cmp	r2, r1
 8009d86:	d02a      	beq.n	8009dde <_dtoa_r+0xb46>
 8009d88:	4659      	mov	r1, fp
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	220a      	movs	r2, #10
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f8fa 	bl	8009f88 <__multadd>
 8009d94:	45b0      	cmp	r8, r6
 8009d96:	4683      	mov	fp, r0
 8009d98:	f04f 0300 	mov.w	r3, #0
 8009d9c:	f04f 020a 	mov.w	r2, #10
 8009da0:	4641      	mov	r1, r8
 8009da2:	4628      	mov	r0, r5
 8009da4:	d107      	bne.n	8009db6 <_dtoa_r+0xb1e>
 8009da6:	f000 f8ef 	bl	8009f88 <__multadd>
 8009daa:	4680      	mov	r8, r0
 8009dac:	4606      	mov	r6, r0
 8009dae:	9b08      	ldr	r3, [sp, #32]
 8009db0:	3301      	adds	r3, #1
 8009db2:	9308      	str	r3, [sp, #32]
 8009db4:	e775      	b.n	8009ca2 <_dtoa_r+0xa0a>
 8009db6:	f000 f8e7 	bl	8009f88 <__multadd>
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	220a      	movs	r2, #10
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f8e0 	bl	8009f88 <__multadd>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	e7f0      	b.n	8009dae <_dtoa_r+0xb16>
 8009dcc:	f1b9 0f00 	cmp.w	r9, #0
 8009dd0:	bfcc      	ite	gt
 8009dd2:	464f      	movgt	r7, r9
 8009dd4:	2701      	movle	r7, #1
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	9a03      	ldr	r2, [sp, #12]
 8009ddc:	4417      	add	r7, r2
 8009dde:	4659      	mov	r1, fp
 8009de0:	2201      	movs	r2, #1
 8009de2:	4628      	mov	r0, r5
 8009de4:	9308      	str	r3, [sp, #32]
 8009de6:	f000 fa7b 	bl	800a2e0 <__lshift>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4683      	mov	fp, r0
 8009dee:	f000 fae7 	bl	800a3c0 <__mcmp>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	dcb2      	bgt.n	8009d5c <_dtoa_r+0xac4>
 8009df6:	d102      	bne.n	8009dfe <_dtoa_r+0xb66>
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	07db      	lsls	r3, r3, #31
 8009dfc:	d4ae      	bmi.n	8009d5c <_dtoa_r+0xac4>
 8009dfe:	463b      	mov	r3, r7
 8009e00:	461f      	mov	r7, r3
 8009e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e06:	2a30      	cmp	r2, #48	; 0x30
 8009e08:	d0fa      	beq.n	8009e00 <_dtoa_r+0xb68>
 8009e0a:	e6f9      	b.n	8009c00 <_dtoa_r+0x968>
 8009e0c:	9a03      	ldr	r2, [sp, #12]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d1a5      	bne.n	8009d5e <_dtoa_r+0xac6>
 8009e12:	2331      	movs	r3, #49	; 0x31
 8009e14:	f10a 0a01 	add.w	sl, sl, #1
 8009e18:	e779      	b.n	8009d0e <_dtoa_r+0xa76>
 8009e1a:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <_dtoa_r+0xbd4>)
 8009e1c:	f7ff baa8 	b.w	8009370 <_dtoa_r+0xd8>
 8009e20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f47f aa81 	bne.w	800932a <_dtoa_r+0x92>
 8009e28:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <_dtoa_r+0xbd8>)
 8009e2a:	f7ff baa1 	b.w	8009370 <_dtoa_r+0xd8>
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	dc03      	bgt.n	8009e3c <_dtoa_r+0xba4>
 8009e34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	f73f aecb 	bgt.w	8009bd2 <_dtoa_r+0x93a>
 8009e3c:	9f03      	ldr	r7, [sp, #12]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4658      	mov	r0, fp
 8009e42:	f7ff f99d 	bl	8009180 <quorem>
 8009e46:	9a03      	ldr	r2, [sp, #12]
 8009e48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e4c:	f807 3b01 	strb.w	r3, [r7], #1
 8009e50:	1aba      	subs	r2, r7, r2
 8009e52:	4591      	cmp	r9, r2
 8009e54:	ddba      	ble.n	8009dcc <_dtoa_r+0xb34>
 8009e56:	4659      	mov	r1, fp
 8009e58:	2300      	movs	r3, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 f893 	bl	8009f88 <__multadd>
 8009e62:	4683      	mov	fp, r0
 8009e64:	e7eb      	b.n	8009e3e <_dtoa_r+0xba6>
 8009e66:	bf00      	nop
 8009e68:	0800bf1f 	.word	0x0800bf1f
 8009e6c:	0800be7c 	.word	0x0800be7c
 8009e70:	0800bea0 	.word	0x0800bea0

08009e74 <_localeconv_r>:
 8009e74:	4800      	ldr	r0, [pc, #0]	; (8009e78 <_localeconv_r+0x4>)
 8009e76:	4770      	bx	lr
 8009e78:	200001e8 	.word	0x200001e8

08009e7c <malloc>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <malloc+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f000 bc1d 	b.w	800a6c0 <_malloc_r>
 8009e86:	bf00      	nop
 8009e88:	20000094 	.word	0x20000094

08009e8c <memchr>:
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	b510      	push	{r4, lr}
 8009e90:	b2c9      	uxtb	r1, r1
 8009e92:	4402      	add	r2, r0
 8009e94:	4293      	cmp	r3, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	d101      	bne.n	8009e9e <memchr+0x12>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e003      	b.n	8009ea6 <memchr+0x1a>
 8009e9e:	7804      	ldrb	r4, [r0, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	428c      	cmp	r4, r1
 8009ea4:	d1f6      	bne.n	8009e94 <memchr+0x8>
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <memcpy>:
 8009ea8:	440a      	add	r2, r1
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb0:	d100      	bne.n	8009eb4 <memcpy+0xc>
 8009eb2:	4770      	bx	lr
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eba:	4291      	cmp	r1, r2
 8009ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec0:	d1f9      	bne.n	8009eb6 <memcpy+0xe>
 8009ec2:	bd10      	pop	{r4, pc}

08009ec4 <_Balloc>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	b976      	cbnz	r6, 8009eec <_Balloc+0x28>
 8009ece:	2010      	movs	r0, #16
 8009ed0:	f7ff ffd4 	bl	8009e7c <malloc>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6260      	str	r0, [r4, #36]	; 0x24
 8009ed8:	b920      	cbnz	r0, 8009ee4 <_Balloc+0x20>
 8009eda:	2166      	movs	r1, #102	; 0x66
 8009edc:	4b17      	ldr	r3, [pc, #92]	; (8009f3c <_Balloc+0x78>)
 8009ede:	4818      	ldr	r0, [pc, #96]	; (8009f40 <_Balloc+0x7c>)
 8009ee0:	f000 fc72 	bl	800a7c8 <__assert_func>
 8009ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee8:	6006      	str	r6, [r0, #0]
 8009eea:	60c6      	str	r6, [r0, #12]
 8009eec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009eee:	68f3      	ldr	r3, [r6, #12]
 8009ef0:	b183      	cbz	r3, 8009f14 <_Balloc+0x50>
 8009ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009efa:	b9b8      	cbnz	r0, 8009f2c <_Balloc+0x68>
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f605 	lsl.w	r6, r1, r5
 8009f02:	1d72      	adds	r2, r6, #5
 8009f04:	4620      	mov	r0, r4
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	f000 fb5e 	bl	800a5c8 <_calloc_r>
 8009f0c:	b160      	cbz	r0, 8009f28 <_Balloc+0x64>
 8009f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f12:	e00e      	b.n	8009f32 <_Balloc+0x6e>
 8009f14:	2221      	movs	r2, #33	; 0x21
 8009f16:	2104      	movs	r1, #4
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fb55 	bl	800a5c8 <_calloc_r>
 8009f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f20:	60f0      	str	r0, [r6, #12]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e4      	bne.n	8009ef2 <_Balloc+0x2e>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	6802      	ldr	r2, [r0, #0]
 8009f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f32:	2300      	movs	r3, #0
 8009f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f38:	e7f7      	b.n	8009f2a <_Balloc+0x66>
 8009f3a:	bf00      	nop
 8009f3c:	0800bead 	.word	0x0800bead
 8009f40:	0800bf30 	.word	0x0800bf30

08009f44 <_Bfree>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f48:	4605      	mov	r5, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	b976      	cbnz	r6, 8009f6c <_Bfree+0x28>
 8009f4e:	2010      	movs	r0, #16
 8009f50:	f7ff ff94 	bl	8009e7c <malloc>
 8009f54:	4602      	mov	r2, r0
 8009f56:	6268      	str	r0, [r5, #36]	; 0x24
 8009f58:	b920      	cbnz	r0, 8009f64 <_Bfree+0x20>
 8009f5a:	218a      	movs	r1, #138	; 0x8a
 8009f5c:	4b08      	ldr	r3, [pc, #32]	; (8009f80 <_Bfree+0x3c>)
 8009f5e:	4809      	ldr	r0, [pc, #36]	; (8009f84 <_Bfree+0x40>)
 8009f60:	f000 fc32 	bl	800a7c8 <__assert_func>
 8009f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f68:	6006      	str	r6, [r0, #0]
 8009f6a:	60c6      	str	r6, [r0, #12]
 8009f6c:	b13c      	cbz	r4, 8009f7e <_Bfree+0x3a>
 8009f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f70:	6862      	ldr	r2, [r4, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f78:	6021      	str	r1, [r4, #0]
 8009f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	0800bead 	.word	0x0800bead
 8009f84:	0800bf30 	.word	0x0800bf30

08009f88 <__multadd>:
 8009f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	461e      	mov	r6, r3
 8009f92:	2000      	movs	r0, #0
 8009f94:	690d      	ldr	r5, [r1, #16]
 8009f96:	f101 0c14 	add.w	ip, r1, #20
 8009f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	fb02 6101 	mla	r1, r2, r1, r6
 8009fa6:	0c1e      	lsrs	r6, r3, #16
 8009fa8:	0c0b      	lsrs	r3, r1, #16
 8009faa:	fb02 3306 	mla	r3, r2, r6, r3
 8009fae:	b289      	uxth	r1, r1
 8009fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fb4:	4285      	cmp	r5, r0
 8009fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fba:	f84c 1b04 	str.w	r1, [ip], #4
 8009fbe:	dcec      	bgt.n	8009f9a <__multadd+0x12>
 8009fc0:	b30e      	cbz	r6, 800a006 <__multadd+0x7e>
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	42ab      	cmp	r3, r5
 8009fc6:	dc19      	bgt.n	8009ffc <__multadd+0x74>
 8009fc8:	6861      	ldr	r1, [r4, #4]
 8009fca:	4638      	mov	r0, r7
 8009fcc:	3101      	adds	r1, #1
 8009fce:	f7ff ff79 	bl	8009ec4 <_Balloc>
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	b928      	cbnz	r0, 8009fe2 <__multadd+0x5a>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	21b5      	movs	r1, #181	; 0xb5
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <__multadd+0x84>)
 8009fdc:	480c      	ldr	r0, [pc, #48]	; (800a010 <__multadd+0x88>)
 8009fde:	f000 fbf3 	bl	800a7c8 <__assert_func>
 8009fe2:	6922      	ldr	r2, [r4, #16]
 8009fe4:	f104 010c 	add.w	r1, r4, #12
 8009fe8:	3202      	adds	r2, #2
 8009fea:	0092      	lsls	r2, r2, #2
 8009fec:	300c      	adds	r0, #12
 8009fee:	f7ff ff5b 	bl	8009ea8 <memcpy>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff ffa5 	bl	8009f44 <_Bfree>
 8009ffa:	4644      	mov	r4, r8
 8009ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a000:	3501      	adds	r5, #1
 800a002:	615e      	str	r6, [r3, #20]
 800a004:	6125      	str	r5, [r4, #16]
 800a006:	4620      	mov	r0, r4
 800a008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00c:	0800bf1f 	.word	0x0800bf1f
 800a010:	0800bf30 	.word	0x0800bf30

0800a014 <__hi0bits>:
 800a014:	0c02      	lsrs	r2, r0, #16
 800a016:	0412      	lsls	r2, r2, #16
 800a018:	4603      	mov	r3, r0
 800a01a:	b9ca      	cbnz	r2, 800a050 <__hi0bits+0x3c>
 800a01c:	0403      	lsls	r3, r0, #16
 800a01e:	2010      	movs	r0, #16
 800a020:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a024:	bf04      	itt	eq
 800a026:	021b      	lsleq	r3, r3, #8
 800a028:	3008      	addeq	r0, #8
 800a02a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a02e:	bf04      	itt	eq
 800a030:	011b      	lsleq	r3, r3, #4
 800a032:	3004      	addeq	r0, #4
 800a034:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a038:	bf04      	itt	eq
 800a03a:	009b      	lsleq	r3, r3, #2
 800a03c:	3002      	addeq	r0, #2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	db05      	blt.n	800a04e <__hi0bits+0x3a>
 800a042:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a046:	f100 0001 	add.w	r0, r0, #1
 800a04a:	bf08      	it	eq
 800a04c:	2020      	moveq	r0, #32
 800a04e:	4770      	bx	lr
 800a050:	2000      	movs	r0, #0
 800a052:	e7e5      	b.n	800a020 <__hi0bits+0xc>

0800a054 <__lo0bits>:
 800a054:	6803      	ldr	r3, [r0, #0]
 800a056:	4602      	mov	r2, r0
 800a058:	f013 0007 	ands.w	r0, r3, #7
 800a05c:	d00b      	beq.n	800a076 <__lo0bits+0x22>
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d421      	bmi.n	800a0a6 <__lo0bits+0x52>
 800a062:	0798      	lsls	r0, r3, #30
 800a064:	bf49      	itett	mi
 800a066:	085b      	lsrmi	r3, r3, #1
 800a068:	089b      	lsrpl	r3, r3, #2
 800a06a:	2001      	movmi	r0, #1
 800a06c:	6013      	strmi	r3, [r2, #0]
 800a06e:	bf5c      	itt	pl
 800a070:	2002      	movpl	r0, #2
 800a072:	6013      	strpl	r3, [r2, #0]
 800a074:	4770      	bx	lr
 800a076:	b299      	uxth	r1, r3
 800a078:	b909      	cbnz	r1, 800a07e <__lo0bits+0x2a>
 800a07a:	2010      	movs	r0, #16
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	b2d9      	uxtb	r1, r3
 800a080:	b909      	cbnz	r1, 800a086 <__lo0bits+0x32>
 800a082:	3008      	adds	r0, #8
 800a084:	0a1b      	lsrs	r3, r3, #8
 800a086:	0719      	lsls	r1, r3, #28
 800a088:	bf04      	itt	eq
 800a08a:	091b      	lsreq	r3, r3, #4
 800a08c:	3004      	addeq	r0, #4
 800a08e:	0799      	lsls	r1, r3, #30
 800a090:	bf04      	itt	eq
 800a092:	089b      	lsreq	r3, r3, #2
 800a094:	3002      	addeq	r0, #2
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	d403      	bmi.n	800a0a2 <__lo0bits+0x4e>
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	f100 0001 	add.w	r0, r0, #1
 800a0a0:	d003      	beq.n	800a0aa <__lo0bits+0x56>
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4770      	bx	lr
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	4770      	bx	lr
 800a0aa:	2020      	movs	r0, #32
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <__i2b>:
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	f7ff ff05 	bl	8009ec4 <_Balloc>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	b928      	cbnz	r0, 800a0ca <__i2b+0x1a>
 800a0be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0c2:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <__i2b+0x24>)
 800a0c4:	4804      	ldr	r0, [pc, #16]	; (800a0d8 <__i2b+0x28>)
 800a0c6:	f000 fb7f 	bl	800a7c8 <__assert_func>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	6144      	str	r4, [r0, #20]
 800a0ce:	6103      	str	r3, [r0, #16]
 800a0d0:	bd10      	pop	{r4, pc}
 800a0d2:	bf00      	nop
 800a0d4:	0800bf1f 	.word	0x0800bf1f
 800a0d8:	0800bf30 	.word	0x0800bf30

0800a0dc <__multiply>:
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	4691      	mov	r9, r2
 800a0e2:	690a      	ldr	r2, [r1, #16]
 800a0e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	bfbe      	ittt	lt
 800a0ee:	460b      	movlt	r3, r1
 800a0f0:	464c      	movlt	r4, r9
 800a0f2:	4699      	movlt	r9, r3
 800a0f4:	6927      	ldr	r7, [r4, #16]
 800a0f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	eb07 060a 	add.w	r6, r7, sl
 800a102:	42b3      	cmp	r3, r6
 800a104:	b085      	sub	sp, #20
 800a106:	bfb8      	it	lt
 800a108:	3101      	addlt	r1, #1
 800a10a:	f7ff fedb 	bl	8009ec4 <_Balloc>
 800a10e:	b930      	cbnz	r0, 800a11e <__multiply+0x42>
 800a110:	4602      	mov	r2, r0
 800a112:	f240 115d 	movw	r1, #349	; 0x15d
 800a116:	4b43      	ldr	r3, [pc, #268]	; (800a224 <__multiply+0x148>)
 800a118:	4843      	ldr	r0, [pc, #268]	; (800a228 <__multiply+0x14c>)
 800a11a:	f000 fb55 	bl	800a7c8 <__assert_func>
 800a11e:	f100 0514 	add.w	r5, r0, #20
 800a122:	462b      	mov	r3, r5
 800a124:	2200      	movs	r2, #0
 800a126:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a12a:	4543      	cmp	r3, r8
 800a12c:	d321      	bcc.n	800a172 <__multiply+0x96>
 800a12e:	f104 0314 	add.w	r3, r4, #20
 800a132:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a136:	f109 0314 	add.w	r3, r9, #20
 800a13a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a13e:	9202      	str	r2, [sp, #8]
 800a140:	1b3a      	subs	r2, r7, r4
 800a142:	3a15      	subs	r2, #21
 800a144:	f022 0203 	bic.w	r2, r2, #3
 800a148:	3204      	adds	r2, #4
 800a14a:	f104 0115 	add.w	r1, r4, #21
 800a14e:	428f      	cmp	r7, r1
 800a150:	bf38      	it	cc
 800a152:	2204      	movcc	r2, #4
 800a154:	9201      	str	r2, [sp, #4]
 800a156:	9a02      	ldr	r2, [sp, #8]
 800a158:	9303      	str	r3, [sp, #12]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d80c      	bhi.n	800a178 <__multiply+0x9c>
 800a15e:	2e00      	cmp	r6, #0
 800a160:	dd03      	ble.n	800a16a <__multiply+0x8e>
 800a162:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a166:	2b00      	cmp	r3, #0
 800a168:	d059      	beq.n	800a21e <__multiply+0x142>
 800a16a:	6106      	str	r6, [r0, #16]
 800a16c:	b005      	add	sp, #20
 800a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	f843 2b04 	str.w	r2, [r3], #4
 800a176:	e7d8      	b.n	800a12a <__multiply+0x4e>
 800a178:	f8b3 a000 	ldrh.w	sl, [r3]
 800a17c:	f1ba 0f00 	cmp.w	sl, #0
 800a180:	d023      	beq.n	800a1ca <__multiply+0xee>
 800a182:	46a9      	mov	r9, r5
 800a184:	f04f 0c00 	mov.w	ip, #0
 800a188:	f104 0e14 	add.w	lr, r4, #20
 800a18c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a190:	f8d9 1000 	ldr.w	r1, [r9]
 800a194:	fa1f fb82 	uxth.w	fp, r2
 800a198:	b289      	uxth	r1, r1
 800a19a:	fb0a 110b 	mla	r1, sl, fp, r1
 800a19e:	4461      	add	r1, ip
 800a1a0:	f8d9 c000 	ldr.w	ip, [r9]
 800a1a4:	0c12      	lsrs	r2, r2, #16
 800a1a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a1aa:	fb0a c202 	mla	r2, sl, r2, ip
 800a1ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1b2:	b289      	uxth	r1, r1
 800a1b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1b8:	4577      	cmp	r7, lr
 800a1ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1be:	f849 1b04 	str.w	r1, [r9], #4
 800a1c2:	d8e3      	bhi.n	800a18c <__multiply+0xb0>
 800a1c4:	9a01      	ldr	r2, [sp, #4]
 800a1c6:	f845 c002 	str.w	ip, [r5, r2]
 800a1ca:	9a03      	ldr	r2, [sp, #12]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d020      	beq.n	800a21a <__multiply+0x13e>
 800a1d8:	46ae      	mov	lr, r5
 800a1da:	f04f 0a00 	mov.w	sl, #0
 800a1de:	6829      	ldr	r1, [r5, #0]
 800a1e0:	f104 0c14 	add.w	ip, r4, #20
 800a1e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1ec:	b289      	uxth	r1, r1
 800a1ee:	fb09 220b 	mla	r2, r9, fp, r2
 800a1f2:	4492      	add	sl, r2
 800a1f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a1fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a200:	f8be 1000 	ldrh.w	r1, [lr]
 800a204:	0c12      	lsrs	r2, r2, #16
 800a206:	fb09 1102 	mla	r1, r9, r2, r1
 800a20a:	4567      	cmp	r7, ip
 800a20c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a214:	d8e6      	bhi.n	800a1e4 <__multiply+0x108>
 800a216:	9a01      	ldr	r2, [sp, #4]
 800a218:	50a9      	str	r1, [r5, r2]
 800a21a:	3504      	adds	r5, #4
 800a21c:	e79b      	b.n	800a156 <__multiply+0x7a>
 800a21e:	3e01      	subs	r6, #1
 800a220:	e79d      	b.n	800a15e <__multiply+0x82>
 800a222:	bf00      	nop
 800a224:	0800bf1f 	.word	0x0800bf1f
 800a228:	0800bf30 	.word	0x0800bf30

0800a22c <__pow5mult>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	4615      	mov	r5, r2
 800a232:	f012 0203 	ands.w	r2, r2, #3
 800a236:	4606      	mov	r6, r0
 800a238:	460f      	mov	r7, r1
 800a23a:	d007      	beq.n	800a24c <__pow5mult+0x20>
 800a23c:	4c25      	ldr	r4, [pc, #148]	; (800a2d4 <__pow5mult+0xa8>)
 800a23e:	3a01      	subs	r2, #1
 800a240:	2300      	movs	r3, #0
 800a242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a246:	f7ff fe9f 	bl	8009f88 <__multadd>
 800a24a:	4607      	mov	r7, r0
 800a24c:	10ad      	asrs	r5, r5, #2
 800a24e:	d03d      	beq.n	800a2cc <__pow5mult+0xa0>
 800a250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a252:	b97c      	cbnz	r4, 800a274 <__pow5mult+0x48>
 800a254:	2010      	movs	r0, #16
 800a256:	f7ff fe11 	bl	8009e7c <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6270      	str	r0, [r6, #36]	; 0x24
 800a25e:	b928      	cbnz	r0, 800a26c <__pow5mult+0x40>
 800a260:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a264:	4b1c      	ldr	r3, [pc, #112]	; (800a2d8 <__pow5mult+0xac>)
 800a266:	481d      	ldr	r0, [pc, #116]	; (800a2dc <__pow5mult+0xb0>)
 800a268:	f000 faae 	bl	800a7c8 <__assert_func>
 800a26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a270:	6004      	str	r4, [r0, #0]
 800a272:	60c4      	str	r4, [r0, #12]
 800a274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a27c:	b94c      	cbnz	r4, 800a292 <__pow5mult+0x66>
 800a27e:	f240 2171 	movw	r1, #625	; 0x271
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ff14 	bl	800a0b0 <__i2b>
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a290:	6003      	str	r3, [r0, #0]
 800a292:	f04f 0900 	mov.w	r9, #0
 800a296:	07eb      	lsls	r3, r5, #31
 800a298:	d50a      	bpl.n	800a2b0 <__pow5mult+0x84>
 800a29a:	4639      	mov	r1, r7
 800a29c:	4622      	mov	r2, r4
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ff1c 	bl	800a0dc <__multiply>
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff fe4b 	bl	8009f44 <_Bfree>
 800a2ae:	4647      	mov	r7, r8
 800a2b0:	106d      	asrs	r5, r5, #1
 800a2b2:	d00b      	beq.n	800a2cc <__pow5mult+0xa0>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	b938      	cbnz	r0, 800a2c8 <__pow5mult+0x9c>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff ff0d 	bl	800a0dc <__multiply>
 800a2c2:	6020      	str	r0, [r4, #0]
 800a2c4:	f8c0 9000 	str.w	r9, [r0]
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e7e4      	b.n	800a296 <__pow5mult+0x6a>
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800c080 	.word	0x0800c080
 800a2d8:	0800bead 	.word	0x0800bead
 800a2dc:	0800bf30 	.word	0x0800bf30

0800a2e0 <__lshift>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	4691      	mov	r9, r2
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	6849      	ldr	r1, [r1, #4]
 800a2ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f8:	f108 0601 	add.w	r6, r8, #1
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	db0b      	blt.n	800a318 <__lshift+0x38>
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff fddf 	bl	8009ec4 <_Balloc>
 800a306:	4605      	mov	r5, r0
 800a308:	b948      	cbnz	r0, 800a31e <__lshift+0x3e>
 800a30a:	4602      	mov	r2, r0
 800a30c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a310:	4b29      	ldr	r3, [pc, #164]	; (800a3b8 <__lshift+0xd8>)
 800a312:	482a      	ldr	r0, [pc, #168]	; (800a3bc <__lshift+0xdc>)
 800a314:	f000 fa58 	bl	800a7c8 <__assert_func>
 800a318:	3101      	adds	r1, #1
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	e7ee      	b.n	800a2fc <__lshift+0x1c>
 800a31e:	2300      	movs	r3, #0
 800a320:	f100 0114 	add.w	r1, r0, #20
 800a324:	f100 0210 	add.w	r2, r0, #16
 800a328:	4618      	mov	r0, r3
 800a32a:	4553      	cmp	r3, sl
 800a32c:	db37      	blt.n	800a39e <__lshift+0xbe>
 800a32e:	6920      	ldr	r0, [r4, #16]
 800a330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a334:	f104 0314 	add.w	r3, r4, #20
 800a338:	f019 091f 	ands.w	r9, r9, #31
 800a33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a340:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a344:	d02f      	beq.n	800a3a6 <__lshift+0xc6>
 800a346:	468a      	mov	sl, r1
 800a348:	f04f 0c00 	mov.w	ip, #0
 800a34c:	f1c9 0e20 	rsb	lr, r9, #32
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	fa02 f209 	lsl.w	r2, r2, r9
 800a356:	ea42 020c 	orr.w	r2, r2, ip
 800a35a:	f84a 2b04 	str.w	r2, [sl], #4
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	4298      	cmp	r0, r3
 800a364:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a368:	d8f2      	bhi.n	800a350 <__lshift+0x70>
 800a36a:	1b03      	subs	r3, r0, r4
 800a36c:	3b15      	subs	r3, #21
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	3304      	adds	r3, #4
 800a374:	f104 0215 	add.w	r2, r4, #21
 800a378:	4290      	cmp	r0, r2
 800a37a:	bf38      	it	cc
 800a37c:	2304      	movcc	r3, #4
 800a37e:	f841 c003 	str.w	ip, [r1, r3]
 800a382:	f1bc 0f00 	cmp.w	ip, #0
 800a386:	d001      	beq.n	800a38c <__lshift+0xac>
 800a388:	f108 0602 	add.w	r6, r8, #2
 800a38c:	3e01      	subs	r6, #1
 800a38e:	4638      	mov	r0, r7
 800a390:	4621      	mov	r1, r4
 800a392:	612e      	str	r6, [r5, #16]
 800a394:	f7ff fdd6 	bl	8009f44 <_Bfree>
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	e7c1      	b.n	800a32a <__lshift+0x4a>
 800a3a6:	3904      	subs	r1, #4
 800a3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ac:	4298      	cmp	r0, r3
 800a3ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3b2:	d8f9      	bhi.n	800a3a8 <__lshift+0xc8>
 800a3b4:	e7ea      	b.n	800a38c <__lshift+0xac>
 800a3b6:	bf00      	nop
 800a3b8:	0800bf1f 	.word	0x0800bf1f
 800a3bc:	0800bf30 	.word	0x0800bf30

0800a3c0 <__mcmp>:
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	690a      	ldr	r2, [r1, #16]
 800a3c4:	6900      	ldr	r0, [r0, #16]
 800a3c6:	b530      	push	{r4, r5, lr}
 800a3c8:	1a80      	subs	r0, r0, r2
 800a3ca:	d10d      	bne.n	800a3e8 <__mcmp+0x28>
 800a3cc:	3314      	adds	r3, #20
 800a3ce:	3114      	adds	r1, #20
 800a3d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3e0:	4295      	cmp	r5, r2
 800a3e2:	d002      	beq.n	800a3ea <__mcmp+0x2a>
 800a3e4:	d304      	bcc.n	800a3f0 <__mcmp+0x30>
 800a3e6:	2001      	movs	r0, #1
 800a3e8:	bd30      	pop	{r4, r5, pc}
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	d3f4      	bcc.n	800a3d8 <__mcmp+0x18>
 800a3ee:	e7fb      	b.n	800a3e8 <__mcmp+0x28>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e7f8      	b.n	800a3e8 <__mcmp+0x28>
	...

0800a3f8 <__mdiff>:
 800a3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	4607      	mov	r7, r0
 800a400:	4611      	mov	r1, r2
 800a402:	4628      	mov	r0, r5
 800a404:	4614      	mov	r4, r2
 800a406:	f7ff ffdb 	bl	800a3c0 <__mcmp>
 800a40a:	1e06      	subs	r6, r0, #0
 800a40c:	d111      	bne.n	800a432 <__mdiff+0x3a>
 800a40e:	4631      	mov	r1, r6
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff fd57 	bl	8009ec4 <_Balloc>
 800a416:	4602      	mov	r2, r0
 800a418:	b928      	cbnz	r0, 800a426 <__mdiff+0x2e>
 800a41a:	f240 2132 	movw	r1, #562	; 0x232
 800a41e:	4b3a      	ldr	r3, [pc, #232]	; (800a508 <__mdiff+0x110>)
 800a420:	483a      	ldr	r0, [pc, #232]	; (800a50c <__mdiff+0x114>)
 800a422:	f000 f9d1 	bl	800a7c8 <__assert_func>
 800a426:	2301      	movs	r3, #1
 800a428:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a42c:	4610      	mov	r0, r2
 800a42e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	bfa4      	itt	ge
 800a434:	4623      	movge	r3, r4
 800a436:	462c      	movge	r4, r5
 800a438:	4638      	mov	r0, r7
 800a43a:	6861      	ldr	r1, [r4, #4]
 800a43c:	bfa6      	itte	ge
 800a43e:	461d      	movge	r5, r3
 800a440:	2600      	movge	r6, #0
 800a442:	2601      	movlt	r6, #1
 800a444:	f7ff fd3e 	bl	8009ec4 <_Balloc>
 800a448:	4602      	mov	r2, r0
 800a44a:	b918      	cbnz	r0, 800a454 <__mdiff+0x5c>
 800a44c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a450:	4b2d      	ldr	r3, [pc, #180]	; (800a508 <__mdiff+0x110>)
 800a452:	e7e5      	b.n	800a420 <__mdiff+0x28>
 800a454:	f102 0814 	add.w	r8, r2, #20
 800a458:	46c2      	mov	sl, r8
 800a45a:	f04f 0c00 	mov.w	ip, #0
 800a45e:	6927      	ldr	r7, [r4, #16]
 800a460:	60c6      	str	r6, [r0, #12]
 800a462:	692e      	ldr	r6, [r5, #16]
 800a464:	f104 0014 	add.w	r0, r4, #20
 800a468:	f105 0914 	add.w	r9, r5, #20
 800a46c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a470:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a474:	3410      	adds	r4, #16
 800a476:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a47a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a47e:	fa1f f18b 	uxth.w	r1, fp
 800a482:	448c      	add	ip, r1
 800a484:	b299      	uxth	r1, r3
 800a486:	0c1b      	lsrs	r3, r3, #16
 800a488:	ebac 0101 	sub.w	r1, ip, r1
 800a48c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a490:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a494:	b289      	uxth	r1, r1
 800a496:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a49a:	454e      	cmp	r6, r9
 800a49c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a4a0:	f84a 3b04 	str.w	r3, [sl], #4
 800a4a4:	d8e7      	bhi.n	800a476 <__mdiff+0x7e>
 800a4a6:	1b73      	subs	r3, r6, r5
 800a4a8:	3b15      	subs	r3, #21
 800a4aa:	f023 0303 	bic.w	r3, r3, #3
 800a4ae:	3515      	adds	r5, #21
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	42ae      	cmp	r6, r5
 800a4b4:	bf38      	it	cc
 800a4b6:	2304      	movcc	r3, #4
 800a4b8:	4418      	add	r0, r3
 800a4ba:	4443      	add	r3, r8
 800a4bc:	461e      	mov	r6, r3
 800a4be:	4605      	mov	r5, r0
 800a4c0:	4575      	cmp	r5, lr
 800a4c2:	d30e      	bcc.n	800a4e2 <__mdiff+0xea>
 800a4c4:	f10e 0103 	add.w	r1, lr, #3
 800a4c8:	1a09      	subs	r1, r1, r0
 800a4ca:	f021 0103 	bic.w	r1, r1, #3
 800a4ce:	3803      	subs	r0, #3
 800a4d0:	4586      	cmp	lr, r0
 800a4d2:	bf38      	it	cc
 800a4d4:	2100      	movcc	r1, #0
 800a4d6:	4419      	add	r1, r3
 800a4d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a4dc:	b18b      	cbz	r3, 800a502 <__mdiff+0x10a>
 800a4de:	6117      	str	r7, [r2, #16]
 800a4e0:	e7a4      	b.n	800a42c <__mdiff+0x34>
 800a4e2:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4e6:	fa1f f188 	uxth.w	r1, r8
 800a4ea:	4461      	add	r1, ip
 800a4ec:	140c      	asrs	r4, r1, #16
 800a4ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4f8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a4fc:	f846 1b04 	str.w	r1, [r6], #4
 800a500:	e7de      	b.n	800a4c0 <__mdiff+0xc8>
 800a502:	3f01      	subs	r7, #1
 800a504:	e7e8      	b.n	800a4d8 <__mdiff+0xe0>
 800a506:	bf00      	nop
 800a508:	0800bf1f 	.word	0x0800bf1f
 800a50c:	0800bf30 	.word	0x0800bf30

0800a510 <__d2b>:
 800a510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a514:	2101      	movs	r1, #1
 800a516:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a51a:	4690      	mov	r8, r2
 800a51c:	461d      	mov	r5, r3
 800a51e:	f7ff fcd1 	bl	8009ec4 <_Balloc>
 800a522:	4604      	mov	r4, r0
 800a524:	b930      	cbnz	r0, 800a534 <__d2b+0x24>
 800a526:	4602      	mov	r2, r0
 800a528:	f240 310a 	movw	r1, #778	; 0x30a
 800a52c:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <__d2b+0xb0>)
 800a52e:	4825      	ldr	r0, [pc, #148]	; (800a5c4 <__d2b+0xb4>)
 800a530:	f000 f94a 	bl	800a7c8 <__assert_func>
 800a534:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a538:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a53c:	bb2d      	cbnz	r5, 800a58a <__d2b+0x7a>
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	f1b8 0300 	subs.w	r3, r8, #0
 800a544:	d026      	beq.n	800a594 <__d2b+0x84>
 800a546:	4668      	mov	r0, sp
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	f7ff fd83 	bl	800a054 <__lo0bits>
 800a54e:	9900      	ldr	r1, [sp, #0]
 800a550:	b1f0      	cbz	r0, 800a590 <__d2b+0x80>
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	f1c0 0320 	rsb	r3, r0, #32
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	430b      	orrs	r3, r1
 800a55e:	40c2      	lsrs	r2, r0
 800a560:	6163      	str	r3, [r4, #20]
 800a562:	9201      	str	r2, [sp, #4]
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bf14      	ite	ne
 800a56a:	2102      	movne	r1, #2
 800a56c:	2101      	moveq	r1, #1
 800a56e:	61a3      	str	r3, [r4, #24]
 800a570:	6121      	str	r1, [r4, #16]
 800a572:	b1c5      	cbz	r5, 800a5a6 <__d2b+0x96>
 800a574:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a578:	4405      	add	r5, r0
 800a57a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a57e:	603d      	str	r5, [r7, #0]
 800a580:	6030      	str	r0, [r6, #0]
 800a582:	4620      	mov	r0, r4
 800a584:	b002      	add	sp, #8
 800a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a58e:	e7d6      	b.n	800a53e <__d2b+0x2e>
 800a590:	6161      	str	r1, [r4, #20]
 800a592:	e7e7      	b.n	800a564 <__d2b+0x54>
 800a594:	a801      	add	r0, sp, #4
 800a596:	f7ff fd5d 	bl	800a054 <__lo0bits>
 800a59a:	2101      	movs	r1, #1
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	6121      	str	r1, [r4, #16]
 800a5a0:	6163      	str	r3, [r4, #20]
 800a5a2:	3020      	adds	r0, #32
 800a5a4:	e7e5      	b.n	800a572 <__d2b+0x62>
 800a5a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a5aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5ae:	6038      	str	r0, [r7, #0]
 800a5b0:	6918      	ldr	r0, [r3, #16]
 800a5b2:	f7ff fd2f 	bl	800a014 <__hi0bits>
 800a5b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a5ba:	6031      	str	r1, [r6, #0]
 800a5bc:	e7e1      	b.n	800a582 <__d2b+0x72>
 800a5be:	bf00      	nop
 800a5c0:	0800bf1f 	.word	0x0800bf1f
 800a5c4:	0800bf30 	.word	0x0800bf30

0800a5c8 <_calloc_r>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	fba1 5402 	umull	r5, r4, r1, r2
 800a5ce:	b934      	cbnz	r4, 800a5de <_calloc_r+0x16>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f000 f875 	bl	800a6c0 <_malloc_r>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	b928      	cbnz	r0, 800a5e6 <_calloc_r+0x1e>
 800a5da:	4630      	mov	r0, r6
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
 800a5de:	220c      	movs	r2, #12
 800a5e0:	2600      	movs	r6, #0
 800a5e2:	6002      	str	r2, [r0, #0]
 800a5e4:	e7f9      	b.n	800a5da <_calloc_r+0x12>
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7fe f961 	bl	80088b0 <memset>
 800a5ee:	e7f4      	b.n	800a5da <_calloc_r+0x12>

0800a5f0 <_free_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d040      	beq.n	800a67a <_free_r+0x8a>
 800a5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5fc:	1f0c      	subs	r4, r1, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bfb8      	it	lt
 800a602:	18e4      	addlt	r4, r4, r3
 800a604:	f000 f922 	bl	800a84c <__malloc_lock>
 800a608:	4a1c      	ldr	r2, [pc, #112]	; (800a67c <_free_r+0x8c>)
 800a60a:	6813      	ldr	r3, [r2, #0]
 800a60c:	b933      	cbnz	r3, 800a61c <_free_r+0x2c>
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	6014      	str	r4, [r2, #0]
 800a612:	4628      	mov	r0, r5
 800a614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a618:	f000 b91e 	b.w	800a858 <__malloc_unlock>
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	d908      	bls.n	800a632 <_free_r+0x42>
 800a620:	6820      	ldr	r0, [r4, #0]
 800a622:	1821      	adds	r1, r4, r0
 800a624:	428b      	cmp	r3, r1
 800a626:	bf01      	itttt	eq
 800a628:	6819      	ldreq	r1, [r3, #0]
 800a62a:	685b      	ldreq	r3, [r3, #4]
 800a62c:	1809      	addeq	r1, r1, r0
 800a62e:	6021      	streq	r1, [r4, #0]
 800a630:	e7ed      	b.n	800a60e <_free_r+0x1e>
 800a632:	461a      	mov	r2, r3
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	b10b      	cbz	r3, 800a63c <_free_r+0x4c>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d9fa      	bls.n	800a632 <_free_r+0x42>
 800a63c:	6811      	ldr	r1, [r2, #0]
 800a63e:	1850      	adds	r0, r2, r1
 800a640:	42a0      	cmp	r0, r4
 800a642:	d10b      	bne.n	800a65c <_free_r+0x6c>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	4401      	add	r1, r0
 800a648:	1850      	adds	r0, r2, r1
 800a64a:	4283      	cmp	r3, r0
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	d1e0      	bne.n	800a612 <_free_r+0x22>
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	4401      	add	r1, r0
 800a656:	6011      	str	r1, [r2, #0]
 800a658:	6053      	str	r3, [r2, #4]
 800a65a:	e7da      	b.n	800a612 <_free_r+0x22>
 800a65c:	d902      	bls.n	800a664 <_free_r+0x74>
 800a65e:	230c      	movs	r3, #12
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	e7d6      	b.n	800a612 <_free_r+0x22>
 800a664:	6820      	ldr	r0, [r4, #0]
 800a666:	1821      	adds	r1, r4, r0
 800a668:	428b      	cmp	r3, r1
 800a66a:	bf01      	itttt	eq
 800a66c:	6819      	ldreq	r1, [r3, #0]
 800a66e:	685b      	ldreq	r3, [r3, #4]
 800a670:	1809      	addeq	r1, r1, r0
 800a672:	6021      	streq	r1, [r4, #0]
 800a674:	6063      	str	r3, [r4, #4]
 800a676:	6054      	str	r4, [r2, #4]
 800a678:	e7cb      	b.n	800a612 <_free_r+0x22>
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	200004c8 	.word	0x200004c8

0800a680 <sbrk_aligned>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4e0e      	ldr	r6, [pc, #56]	; (800a6bc <sbrk_aligned+0x3c>)
 800a684:	460c      	mov	r4, r1
 800a686:	6831      	ldr	r1, [r6, #0]
 800a688:	4605      	mov	r5, r0
 800a68a:	b911      	cbnz	r1, 800a692 <sbrk_aligned+0x12>
 800a68c:	f000 f88c 	bl	800a7a8 <_sbrk_r>
 800a690:	6030      	str	r0, [r6, #0]
 800a692:	4621      	mov	r1, r4
 800a694:	4628      	mov	r0, r5
 800a696:	f000 f887 	bl	800a7a8 <_sbrk_r>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d00a      	beq.n	800a6b4 <sbrk_aligned+0x34>
 800a69e:	1cc4      	adds	r4, r0, #3
 800a6a0:	f024 0403 	bic.w	r4, r4, #3
 800a6a4:	42a0      	cmp	r0, r4
 800a6a6:	d007      	beq.n	800a6b8 <sbrk_aligned+0x38>
 800a6a8:	1a21      	subs	r1, r4, r0
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 f87c 	bl	800a7a8 <_sbrk_r>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d101      	bne.n	800a6b8 <sbrk_aligned+0x38>
 800a6b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	200004cc 	.word	0x200004cc

0800a6c0 <_malloc_r>:
 800a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c4:	1ccd      	adds	r5, r1, #3
 800a6c6:	f025 0503 	bic.w	r5, r5, #3
 800a6ca:	3508      	adds	r5, #8
 800a6cc:	2d0c      	cmp	r5, #12
 800a6ce:	bf38      	it	cc
 800a6d0:	250c      	movcc	r5, #12
 800a6d2:	2d00      	cmp	r5, #0
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	db01      	blt.n	800a6dc <_malloc_r+0x1c>
 800a6d8:	42a9      	cmp	r1, r5
 800a6da:	d905      	bls.n	800a6e8 <_malloc_r+0x28>
 800a6dc:	230c      	movs	r3, #12
 800a6de:	2600      	movs	r6, #0
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e8:	4e2e      	ldr	r6, [pc, #184]	; (800a7a4 <_malloc_r+0xe4>)
 800a6ea:	f000 f8af 	bl	800a84c <__malloc_lock>
 800a6ee:	6833      	ldr	r3, [r6, #0]
 800a6f0:	461c      	mov	r4, r3
 800a6f2:	bb34      	cbnz	r4, 800a742 <_malloc_r+0x82>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f7ff ffc2 	bl	800a680 <sbrk_aligned>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	4604      	mov	r4, r0
 800a700:	d14d      	bne.n	800a79e <_malloc_r+0xde>
 800a702:	6834      	ldr	r4, [r6, #0]
 800a704:	4626      	mov	r6, r4
 800a706:	2e00      	cmp	r6, #0
 800a708:	d140      	bne.n	800a78c <_malloc_r+0xcc>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	4631      	mov	r1, r6
 800a70e:	4638      	mov	r0, r7
 800a710:	eb04 0803 	add.w	r8, r4, r3
 800a714:	f000 f848 	bl	800a7a8 <_sbrk_r>
 800a718:	4580      	cmp	r8, r0
 800a71a:	d13a      	bne.n	800a792 <_malloc_r+0xd2>
 800a71c:	6821      	ldr	r1, [r4, #0]
 800a71e:	3503      	adds	r5, #3
 800a720:	1a6d      	subs	r5, r5, r1
 800a722:	f025 0503 	bic.w	r5, r5, #3
 800a726:	3508      	adds	r5, #8
 800a728:	2d0c      	cmp	r5, #12
 800a72a:	bf38      	it	cc
 800a72c:	250c      	movcc	r5, #12
 800a72e:	4638      	mov	r0, r7
 800a730:	4629      	mov	r1, r5
 800a732:	f7ff ffa5 	bl	800a680 <sbrk_aligned>
 800a736:	3001      	adds	r0, #1
 800a738:	d02b      	beq.n	800a792 <_malloc_r+0xd2>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	442b      	add	r3, r5
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	e00e      	b.n	800a760 <_malloc_r+0xa0>
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	1b52      	subs	r2, r2, r5
 800a746:	d41e      	bmi.n	800a786 <_malloc_r+0xc6>
 800a748:	2a0b      	cmp	r2, #11
 800a74a:	d916      	bls.n	800a77a <_malloc_r+0xba>
 800a74c:	1961      	adds	r1, r4, r5
 800a74e:	42a3      	cmp	r3, r4
 800a750:	6025      	str	r5, [r4, #0]
 800a752:	bf18      	it	ne
 800a754:	6059      	strne	r1, [r3, #4]
 800a756:	6863      	ldr	r3, [r4, #4]
 800a758:	bf08      	it	eq
 800a75a:	6031      	streq	r1, [r6, #0]
 800a75c:	5162      	str	r2, [r4, r5]
 800a75e:	604b      	str	r3, [r1, #4]
 800a760:	4638      	mov	r0, r7
 800a762:	f104 060b 	add.w	r6, r4, #11
 800a766:	f000 f877 	bl	800a858 <__malloc_unlock>
 800a76a:	f026 0607 	bic.w	r6, r6, #7
 800a76e:	1d23      	adds	r3, r4, #4
 800a770:	1af2      	subs	r2, r6, r3
 800a772:	d0b6      	beq.n	800a6e2 <_malloc_r+0x22>
 800a774:	1b9b      	subs	r3, r3, r6
 800a776:	50a3      	str	r3, [r4, r2]
 800a778:	e7b3      	b.n	800a6e2 <_malloc_r+0x22>
 800a77a:	6862      	ldr	r2, [r4, #4]
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	bf0c      	ite	eq
 800a780:	6032      	streq	r2, [r6, #0]
 800a782:	605a      	strne	r2, [r3, #4]
 800a784:	e7ec      	b.n	800a760 <_malloc_r+0xa0>
 800a786:	4623      	mov	r3, r4
 800a788:	6864      	ldr	r4, [r4, #4]
 800a78a:	e7b2      	b.n	800a6f2 <_malloc_r+0x32>
 800a78c:	4634      	mov	r4, r6
 800a78e:	6876      	ldr	r6, [r6, #4]
 800a790:	e7b9      	b.n	800a706 <_malloc_r+0x46>
 800a792:	230c      	movs	r3, #12
 800a794:	4638      	mov	r0, r7
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f000 f85e 	bl	800a858 <__malloc_unlock>
 800a79c:	e7a1      	b.n	800a6e2 <_malloc_r+0x22>
 800a79e:	6025      	str	r5, [r4, #0]
 800a7a0:	e7de      	b.n	800a760 <_malloc_r+0xa0>
 800a7a2:	bf00      	nop
 800a7a4:	200004c8 	.word	0x200004c8

0800a7a8 <_sbrk_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4d05      	ldr	r5, [pc, #20]	; (800a7c4 <_sbrk_r+0x1c>)
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f9 ff4e 	bl	8004654 <_sbrk>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_sbrk_r+0x1a>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_sbrk_r+0x1a>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	200004d0 	.word	0x200004d0

0800a7c8 <__assert_func>:
 800a7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <__assert_func+0x2c>)
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68d8      	ldr	r0, [r3, #12]
 800a7d6:	b14c      	cbz	r4, 800a7ec <__assert_func+0x24>
 800a7d8:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <__assert_func+0x30>)
 800a7da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7de:	9100      	str	r1, [sp, #0]
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	4906      	ldr	r1, [pc, #24]	; (800a7fc <__assert_func+0x34>)
 800a7e4:	f000 f80e 	bl	800a804 <fiprintf>
 800a7e8:	f000 fa62 	bl	800acb0 <abort>
 800a7ec:	4b04      	ldr	r3, [pc, #16]	; (800a800 <__assert_func+0x38>)
 800a7ee:	461c      	mov	r4, r3
 800a7f0:	e7f3      	b.n	800a7da <__assert_func+0x12>
 800a7f2:	bf00      	nop
 800a7f4:	20000094 	.word	0x20000094
 800a7f8:	0800c08c 	.word	0x0800c08c
 800a7fc:	0800c099 	.word	0x0800c099
 800a800:	0800c0c7 	.word	0x0800c0c7

0800a804 <fiprintf>:
 800a804:	b40e      	push	{r1, r2, r3}
 800a806:	b503      	push	{r0, r1, lr}
 800a808:	4601      	mov	r1, r0
 800a80a:	ab03      	add	r3, sp, #12
 800a80c:	4805      	ldr	r0, [pc, #20]	; (800a824 <fiprintf+0x20>)
 800a80e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a812:	6800      	ldr	r0, [r0, #0]
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	f000 f84d 	bl	800a8b4 <_vfiprintf_r>
 800a81a:	b002      	add	sp, #8
 800a81c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a820:	b003      	add	sp, #12
 800a822:	4770      	bx	lr
 800a824:	20000094 	.word	0x20000094

0800a828 <__ascii_mbtowc>:
 800a828:	b082      	sub	sp, #8
 800a82a:	b901      	cbnz	r1, 800a82e <__ascii_mbtowc+0x6>
 800a82c:	a901      	add	r1, sp, #4
 800a82e:	b142      	cbz	r2, 800a842 <__ascii_mbtowc+0x1a>
 800a830:	b14b      	cbz	r3, 800a846 <__ascii_mbtowc+0x1e>
 800a832:	7813      	ldrb	r3, [r2, #0]
 800a834:	600b      	str	r3, [r1, #0]
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	1e10      	subs	r0, r2, #0
 800a83a:	bf18      	it	ne
 800a83c:	2001      	movne	r0, #1
 800a83e:	b002      	add	sp, #8
 800a840:	4770      	bx	lr
 800a842:	4610      	mov	r0, r2
 800a844:	e7fb      	b.n	800a83e <__ascii_mbtowc+0x16>
 800a846:	f06f 0001 	mvn.w	r0, #1
 800a84a:	e7f8      	b.n	800a83e <__ascii_mbtowc+0x16>

0800a84c <__malloc_lock>:
 800a84c:	4801      	ldr	r0, [pc, #4]	; (800a854 <__malloc_lock+0x8>)
 800a84e:	f000 bbeb 	b.w	800b028 <__retarget_lock_acquire_recursive>
 800a852:	bf00      	nop
 800a854:	200004d4 	.word	0x200004d4

0800a858 <__malloc_unlock>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__malloc_unlock+0x8>)
 800a85a:	f000 bbe6 	b.w	800b02a <__retarget_lock_release_recursive>
 800a85e:	bf00      	nop
 800a860:	200004d4 	.word	0x200004d4

0800a864 <__sfputc_r>:
 800a864:	6893      	ldr	r3, [r2, #8]
 800a866:	b410      	push	{r4}
 800a868:	3b01      	subs	r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	6093      	str	r3, [r2, #8]
 800a86e:	da07      	bge.n	800a880 <__sfputc_r+0x1c>
 800a870:	6994      	ldr	r4, [r2, #24]
 800a872:	42a3      	cmp	r3, r4
 800a874:	db01      	blt.n	800a87a <__sfputc_r+0x16>
 800a876:	290a      	cmp	r1, #10
 800a878:	d102      	bne.n	800a880 <__sfputc_r+0x1c>
 800a87a:	bc10      	pop	{r4}
 800a87c:	f000 b94a 	b.w	800ab14 <__swbuf_r>
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	1c58      	adds	r0, r3, #1
 800a884:	6010      	str	r0, [r2, #0]
 800a886:	7019      	strb	r1, [r3, #0]
 800a888:	4608      	mov	r0, r1
 800a88a:	bc10      	pop	{r4}
 800a88c:	4770      	bx	lr

0800a88e <__sfputs_r>:
 800a88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a890:	4606      	mov	r6, r0
 800a892:	460f      	mov	r7, r1
 800a894:	4614      	mov	r4, r2
 800a896:	18d5      	adds	r5, r2, r3
 800a898:	42ac      	cmp	r4, r5
 800a89a:	d101      	bne.n	800a8a0 <__sfputs_r+0x12>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e007      	b.n	800a8b0 <__sfputs_r+0x22>
 800a8a0:	463a      	mov	r2, r7
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a8:	f7ff ffdc 	bl	800a864 <__sfputc_r>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d1f3      	bne.n	800a898 <__sfputs_r+0xa>
 800a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8b4 <_vfiprintf_r>:
 800a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	4698      	mov	r8, r3
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b09d      	sub	sp, #116	; 0x74
 800a8c2:	b118      	cbz	r0, 800a8cc <_vfiprintf_r+0x18>
 800a8c4:	6983      	ldr	r3, [r0, #24]
 800a8c6:	b90b      	cbnz	r3, 800a8cc <_vfiprintf_r+0x18>
 800a8c8:	f000 fb10 	bl	800aeec <__sinit>
 800a8cc:	4b89      	ldr	r3, [pc, #548]	; (800aaf4 <_vfiprintf_r+0x240>)
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	d11b      	bne.n	800a90a <_vfiprintf_r+0x56>
 800a8d2:	6875      	ldr	r5, [r6, #4]
 800a8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d6:	07d9      	lsls	r1, r3, #31
 800a8d8:	d405      	bmi.n	800a8e6 <_vfiprintf_r+0x32>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	059a      	lsls	r2, r3, #22
 800a8de:	d402      	bmi.n	800a8e6 <_vfiprintf_r+0x32>
 800a8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e2:	f000 fba1 	bl	800b028 <__retarget_lock_acquire_recursive>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	071b      	lsls	r3, r3, #28
 800a8ea:	d501      	bpl.n	800a8f0 <_vfiprintf_r+0x3c>
 800a8ec:	692b      	ldr	r3, [r5, #16]
 800a8ee:	b9eb      	cbnz	r3, 800a92c <_vfiprintf_r+0x78>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f000 f96e 	bl	800abd4 <__swsetup_r>
 800a8f8:	b1c0      	cbz	r0, 800a92c <_vfiprintf_r+0x78>
 800a8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8fc:	07dc      	lsls	r4, r3, #31
 800a8fe:	d50e      	bpl.n	800a91e <_vfiprintf_r+0x6a>
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	b01d      	add	sp, #116	; 0x74
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90a:	4b7b      	ldr	r3, [pc, #492]	; (800aaf8 <_vfiprintf_r+0x244>)
 800a90c:	429d      	cmp	r5, r3
 800a90e:	d101      	bne.n	800a914 <_vfiprintf_r+0x60>
 800a910:	68b5      	ldr	r5, [r6, #8]
 800a912:	e7df      	b.n	800a8d4 <_vfiprintf_r+0x20>
 800a914:	4b79      	ldr	r3, [pc, #484]	; (800aafc <_vfiprintf_r+0x248>)
 800a916:	429d      	cmp	r5, r3
 800a918:	bf08      	it	eq
 800a91a:	68f5      	ldreq	r5, [r6, #12]
 800a91c:	e7da      	b.n	800a8d4 <_vfiprintf_r+0x20>
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	0598      	lsls	r0, r3, #22
 800a922:	d4ed      	bmi.n	800a900 <_vfiprintf_r+0x4c>
 800a924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a926:	f000 fb80 	bl	800b02a <__retarget_lock_release_recursive>
 800a92a:	e7e9      	b.n	800a900 <_vfiprintf_r+0x4c>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9309      	str	r3, [sp, #36]	; 0x24
 800a930:	2320      	movs	r3, #32
 800a932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a936:	2330      	movs	r3, #48	; 0x30
 800a938:	f04f 0901 	mov.w	r9, #1
 800a93c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a940:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab00 <_vfiprintf_r+0x24c>
 800a944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a948:	4623      	mov	r3, r4
 800a94a:	469a      	mov	sl, r3
 800a94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a950:	b10a      	cbz	r2, 800a956 <_vfiprintf_r+0xa2>
 800a952:	2a25      	cmp	r2, #37	; 0x25
 800a954:	d1f9      	bne.n	800a94a <_vfiprintf_r+0x96>
 800a956:	ebba 0b04 	subs.w	fp, sl, r4
 800a95a:	d00b      	beq.n	800a974 <_vfiprintf_r+0xc0>
 800a95c:	465b      	mov	r3, fp
 800a95e:	4622      	mov	r2, r4
 800a960:	4629      	mov	r1, r5
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ff93 	bl	800a88e <__sfputs_r>
 800a968:	3001      	adds	r0, #1
 800a96a:	f000 80aa 	beq.w	800aac2 <_vfiprintf_r+0x20e>
 800a96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a970:	445a      	add	r2, fp
 800a972:	9209      	str	r2, [sp, #36]	; 0x24
 800a974:	f89a 3000 	ldrb.w	r3, [sl]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80a2 	beq.w	800aac2 <_vfiprintf_r+0x20e>
 800a97e:	2300      	movs	r3, #0
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a988:	f10a 0a01 	add.w	sl, sl, #1
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a994:	931a      	str	r3, [sp, #104]	; 0x68
 800a996:	4654      	mov	r4, sl
 800a998:	2205      	movs	r2, #5
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	4858      	ldr	r0, [pc, #352]	; (800ab00 <_vfiprintf_r+0x24c>)
 800a9a0:	f7ff fa74 	bl	8009e8c <memchr>
 800a9a4:	9a04      	ldr	r2, [sp, #16]
 800a9a6:	b9d8      	cbnz	r0, 800a9e0 <_vfiprintf_r+0x12c>
 800a9a8:	06d1      	lsls	r1, r2, #27
 800a9aa:	bf44      	itt	mi
 800a9ac:	2320      	movmi	r3, #32
 800a9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b2:	0713      	lsls	r3, r2, #28
 800a9b4:	bf44      	itt	mi
 800a9b6:	232b      	movmi	r3, #43	; 0x2b
 800a9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c2:	d015      	beq.n	800a9f0 <_vfiprintf_r+0x13c>
 800a9c4:	4654      	mov	r4, sl
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	9a07      	ldr	r2, [sp, #28]
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d4:	3b30      	subs	r3, #48	; 0x30
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d94e      	bls.n	800aa78 <_vfiprintf_r+0x1c4>
 800a9da:	b1b0      	cbz	r0, 800aa0a <_vfiprintf_r+0x156>
 800a9dc:	9207      	str	r2, [sp, #28]
 800a9de:	e014      	b.n	800aa0a <_vfiprintf_r+0x156>
 800a9e0:	eba0 0308 	sub.w	r3, r0, r8
 800a9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	46a2      	mov	sl, r4
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	e7d2      	b.n	800a996 <_vfiprintf_r+0xe2>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	1d19      	adds	r1, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9103      	str	r1, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfbb      	ittet	lt
 800a9fc:	425b      	neglt	r3, r3
 800a9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800aa02:	9307      	strge	r3, [sp, #28]
 800aa04:	9307      	strlt	r3, [sp, #28]
 800aa06:	bfb8      	it	lt
 800aa08:	9204      	strlt	r2, [sp, #16]
 800aa0a:	7823      	ldrb	r3, [r4, #0]
 800aa0c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa0e:	d10c      	bne.n	800aa2a <_vfiprintf_r+0x176>
 800aa10:	7863      	ldrb	r3, [r4, #1]
 800aa12:	2b2a      	cmp	r3, #42	; 0x2a
 800aa14:	d135      	bne.n	800aa82 <_vfiprintf_r+0x1ce>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	3402      	adds	r4, #2
 800aa1a:	1d1a      	adds	r2, r3, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	9203      	str	r2, [sp, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfb8      	it	lt
 800aa24:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab04 <_vfiprintf_r+0x250>
 800aa2e:	2203      	movs	r2, #3
 800aa30:	4650      	mov	r0, sl
 800aa32:	7821      	ldrb	r1, [r4, #0]
 800aa34:	f7ff fa2a 	bl	8009e8c <memchr>
 800aa38:	b140      	cbz	r0, 800aa4c <_vfiprintf_r+0x198>
 800aa3a:	2340      	movs	r3, #64	; 0x40
 800aa3c:	eba0 000a 	sub.w	r0, r0, sl
 800aa40:	fa03 f000 	lsl.w	r0, r3, r0
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	3401      	adds	r4, #1
 800aa48:	4303      	orrs	r3, r0
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa50:	2206      	movs	r2, #6
 800aa52:	482d      	ldr	r0, [pc, #180]	; (800ab08 <_vfiprintf_r+0x254>)
 800aa54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa58:	f7ff fa18 	bl	8009e8c <memchr>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d03f      	beq.n	800aae0 <_vfiprintf_r+0x22c>
 800aa60:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <_vfiprintf_r+0x258>)
 800aa62:	bb1b      	cbnz	r3, 800aaac <_vfiprintf_r+0x1f8>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	3307      	adds	r3, #7
 800aa68:	f023 0307 	bic.w	r3, r3, #7
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	443b      	add	r3, r7
 800aa74:	9309      	str	r3, [sp, #36]	; 0x24
 800aa76:	e767      	b.n	800a948 <_vfiprintf_r+0x94>
 800aa78:	460c      	mov	r4, r1
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa80:	e7a5      	b.n	800a9ce <_vfiprintf_r+0x11a>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	4619      	mov	r1, r3
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa94:	3a30      	subs	r2, #48	; 0x30
 800aa96:	2a09      	cmp	r2, #9
 800aa98:	d903      	bls.n	800aaa2 <_vfiprintf_r+0x1ee>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0c5      	beq.n	800aa2a <_vfiprintf_r+0x176>
 800aa9e:	9105      	str	r1, [sp, #20]
 800aaa0:	e7c3      	b.n	800aa2a <_vfiprintf_r+0x176>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaaa:	e7f0      	b.n	800aa8e <_vfiprintf_r+0x1da>
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4630      	mov	r0, r6
 800aab4:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <_vfiprintf_r+0x25c>)
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	f7fd ffa0 	bl	80089fc <_printf_float>
 800aabc:	4607      	mov	r7, r0
 800aabe:	1c78      	adds	r0, r7, #1
 800aac0:	d1d6      	bne.n	800aa70 <_vfiprintf_r+0x1bc>
 800aac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac4:	07d9      	lsls	r1, r3, #31
 800aac6:	d405      	bmi.n	800aad4 <_vfiprintf_r+0x220>
 800aac8:	89ab      	ldrh	r3, [r5, #12]
 800aaca:	059a      	lsls	r2, r3, #22
 800aacc:	d402      	bmi.n	800aad4 <_vfiprintf_r+0x220>
 800aace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad0:	f000 faab 	bl	800b02a <__retarget_lock_release_recursive>
 800aad4:	89ab      	ldrh	r3, [r5, #12]
 800aad6:	065b      	lsls	r3, r3, #25
 800aad8:	f53f af12 	bmi.w	800a900 <_vfiprintf_r+0x4c>
 800aadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aade:	e711      	b.n	800a904 <_vfiprintf_r+0x50>
 800aae0:	ab03      	add	r3, sp, #12
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	462a      	mov	r2, r5
 800aae6:	4630      	mov	r0, r6
 800aae8:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <_vfiprintf_r+0x25c>)
 800aaea:	a904      	add	r1, sp, #16
 800aaec:	f7fe fa22 	bl	8008f34 <_printf_i>
 800aaf0:	e7e4      	b.n	800aabc <_vfiprintf_r+0x208>
 800aaf2:	bf00      	nop
 800aaf4:	0800c204 	.word	0x0800c204
 800aaf8:	0800c224 	.word	0x0800c224
 800aafc:	0800c1e4 	.word	0x0800c1e4
 800ab00:	0800c0d2 	.word	0x0800c0d2
 800ab04:	0800c0d8 	.word	0x0800c0d8
 800ab08:	0800c0dc 	.word	0x0800c0dc
 800ab0c:	080089fd 	.word	0x080089fd
 800ab10:	0800a88f 	.word	0x0800a88f

0800ab14 <__swbuf_r>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	460e      	mov	r6, r1
 800ab18:	4614      	mov	r4, r2
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	b118      	cbz	r0, 800ab26 <__swbuf_r+0x12>
 800ab1e:	6983      	ldr	r3, [r0, #24]
 800ab20:	b90b      	cbnz	r3, 800ab26 <__swbuf_r+0x12>
 800ab22:	f000 f9e3 	bl	800aeec <__sinit>
 800ab26:	4b21      	ldr	r3, [pc, #132]	; (800abac <__swbuf_r+0x98>)
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	d12b      	bne.n	800ab84 <__swbuf_r+0x70>
 800ab2c:	686c      	ldr	r4, [r5, #4]
 800ab2e:	69a3      	ldr	r3, [r4, #24]
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	89a3      	ldrh	r3, [r4, #12]
 800ab34:	071a      	lsls	r2, r3, #28
 800ab36:	d52f      	bpl.n	800ab98 <__swbuf_r+0x84>
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	b36b      	cbz	r3, 800ab98 <__swbuf_r+0x84>
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	b2f6      	uxtb	r6, r6
 800ab42:	1ac0      	subs	r0, r0, r3
 800ab44:	6963      	ldr	r3, [r4, #20]
 800ab46:	4637      	mov	r7, r6
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	dc04      	bgt.n	800ab56 <__swbuf_r+0x42>
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f000 f938 	bl	800adc4 <_fflush_r>
 800ab54:	bb30      	cbnz	r0, 800aba4 <__swbuf_r+0x90>
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	3001      	adds	r0, #1
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	60a3      	str	r3, [r4, #8]
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	701e      	strb	r6, [r3, #0]
 800ab66:	6963      	ldr	r3, [r4, #20]
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	d004      	beq.n	800ab76 <__swbuf_r+0x62>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	07db      	lsls	r3, r3, #31
 800ab70:	d506      	bpl.n	800ab80 <__swbuf_r+0x6c>
 800ab72:	2e0a      	cmp	r6, #10
 800ab74:	d104      	bne.n	800ab80 <__swbuf_r+0x6c>
 800ab76:	4621      	mov	r1, r4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f000 f923 	bl	800adc4 <_fflush_r>
 800ab7e:	b988      	cbnz	r0, 800aba4 <__swbuf_r+0x90>
 800ab80:	4638      	mov	r0, r7
 800ab82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab84:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <__swbuf_r+0x9c>)
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d101      	bne.n	800ab8e <__swbuf_r+0x7a>
 800ab8a:	68ac      	ldr	r4, [r5, #8]
 800ab8c:	e7cf      	b.n	800ab2e <__swbuf_r+0x1a>
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <__swbuf_r+0xa0>)
 800ab90:	429c      	cmp	r4, r3
 800ab92:	bf08      	it	eq
 800ab94:	68ec      	ldreq	r4, [r5, #12]
 800ab96:	e7ca      	b.n	800ab2e <__swbuf_r+0x1a>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 f81a 	bl	800abd4 <__swsetup_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d0cb      	beq.n	800ab3c <__swbuf_r+0x28>
 800aba4:	f04f 37ff 	mov.w	r7, #4294967295
 800aba8:	e7ea      	b.n	800ab80 <__swbuf_r+0x6c>
 800abaa:	bf00      	nop
 800abac:	0800c204 	.word	0x0800c204
 800abb0:	0800c224 	.word	0x0800c224
 800abb4:	0800c1e4 	.word	0x0800c1e4

0800abb8 <__ascii_wctomb>:
 800abb8:	4603      	mov	r3, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	b141      	cbz	r1, 800abd0 <__ascii_wctomb+0x18>
 800abbe:	2aff      	cmp	r2, #255	; 0xff
 800abc0:	d904      	bls.n	800abcc <__ascii_wctomb+0x14>
 800abc2:	228a      	movs	r2, #138	; 0x8a
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4770      	bx	lr
 800abcc:	2001      	movs	r0, #1
 800abce:	700a      	strb	r2, [r1, #0]
 800abd0:	4770      	bx	lr
	...

0800abd4 <__swsetup_r>:
 800abd4:	4b32      	ldr	r3, [pc, #200]	; (800aca0 <__swsetup_r+0xcc>)
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	681d      	ldr	r5, [r3, #0]
 800abda:	4606      	mov	r6, r0
 800abdc:	460c      	mov	r4, r1
 800abde:	b125      	cbz	r5, 800abea <__swsetup_r+0x16>
 800abe0:	69ab      	ldr	r3, [r5, #24]
 800abe2:	b913      	cbnz	r3, 800abea <__swsetup_r+0x16>
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f981 	bl	800aeec <__sinit>
 800abea:	4b2e      	ldr	r3, [pc, #184]	; (800aca4 <__swsetup_r+0xd0>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d10f      	bne.n	800ac10 <__swsetup_r+0x3c>
 800abf0:	686c      	ldr	r4, [r5, #4]
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abf8:	0719      	lsls	r1, r3, #28
 800abfa:	d42c      	bmi.n	800ac56 <__swsetup_r+0x82>
 800abfc:	06dd      	lsls	r5, r3, #27
 800abfe:	d411      	bmi.n	800ac24 <__swsetup_r+0x50>
 800ac00:	2309      	movs	r3, #9
 800ac02:	6033      	str	r3, [r6, #0]
 800ac04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	e03e      	b.n	800ac8e <__swsetup_r+0xba>
 800ac10:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <__swsetup_r+0xd4>)
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d101      	bne.n	800ac1a <__swsetup_r+0x46>
 800ac16:	68ac      	ldr	r4, [r5, #8]
 800ac18:	e7eb      	b.n	800abf2 <__swsetup_r+0x1e>
 800ac1a:	4b24      	ldr	r3, [pc, #144]	; (800acac <__swsetup_r+0xd8>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	bf08      	it	eq
 800ac20:	68ec      	ldreq	r4, [r5, #12]
 800ac22:	e7e6      	b.n	800abf2 <__swsetup_r+0x1e>
 800ac24:	0758      	lsls	r0, r3, #29
 800ac26:	d512      	bpl.n	800ac4e <__swsetup_r+0x7a>
 800ac28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac2a:	b141      	cbz	r1, 800ac3e <__swsetup_r+0x6a>
 800ac2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac30:	4299      	cmp	r1, r3
 800ac32:	d002      	beq.n	800ac3a <__swsetup_r+0x66>
 800ac34:	4630      	mov	r0, r6
 800ac36:	f7ff fcdb 	bl	800a5f0 <_free_r>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	2300      	movs	r3, #0
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	6923      	ldr	r3, [r4, #16]
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f043 0308 	orr.w	r3, r3, #8
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	b94b      	cbnz	r3, 800ac6e <__swsetup_r+0x9a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac64:	d003      	beq.n	800ac6e <__swsetup_r+0x9a>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 fa05 	bl	800b078 <__smakebuf_r>
 800ac6e:	89a0      	ldrh	r0, [r4, #12]
 800ac70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac74:	f010 0301 	ands.w	r3, r0, #1
 800ac78:	d00a      	beq.n	800ac90 <__swsetup_r+0xbc>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60a3      	str	r3, [r4, #8]
 800ac7e:	6963      	ldr	r3, [r4, #20]
 800ac80:	425b      	negs	r3, r3
 800ac82:	61a3      	str	r3, [r4, #24]
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	b943      	cbnz	r3, 800ac9a <__swsetup_r+0xc6>
 800ac88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac8c:	d1ba      	bne.n	800ac04 <__swsetup_r+0x30>
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	0781      	lsls	r1, r0, #30
 800ac92:	bf58      	it	pl
 800ac94:	6963      	ldrpl	r3, [r4, #20]
 800ac96:	60a3      	str	r3, [r4, #8]
 800ac98:	e7f4      	b.n	800ac84 <__swsetup_r+0xb0>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e7f7      	b.n	800ac8e <__swsetup_r+0xba>
 800ac9e:	bf00      	nop
 800aca0:	20000094 	.word	0x20000094
 800aca4:	0800c204 	.word	0x0800c204
 800aca8:	0800c224 	.word	0x0800c224
 800acac:	0800c1e4 	.word	0x0800c1e4

0800acb0 <abort>:
 800acb0:	2006      	movs	r0, #6
 800acb2:	b508      	push	{r3, lr}
 800acb4:	f000 fa48 	bl	800b148 <raise>
 800acb8:	2001      	movs	r0, #1
 800acba:	f7f9 fc58 	bl	800456e <_exit>
	...

0800acc0 <__sflush_r>:
 800acc0:	898a      	ldrh	r2, [r1, #12]
 800acc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc4:	4605      	mov	r5, r0
 800acc6:	0710      	lsls	r0, r2, #28
 800acc8:	460c      	mov	r4, r1
 800acca:	d457      	bmi.n	800ad7c <__sflush_r+0xbc>
 800accc:	684b      	ldr	r3, [r1, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dc04      	bgt.n	800acdc <__sflush_r+0x1c>
 800acd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dc01      	bgt.n	800acdc <__sflush_r+0x1c>
 800acd8:	2000      	movs	r0, #0
 800acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d0fa      	beq.n	800acd8 <__sflush_r+0x18>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ace8:	682f      	ldr	r7, [r5, #0]
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	d032      	beq.n	800ad54 <__sflush_r+0x94>
 800acee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	075a      	lsls	r2, r3, #29
 800acf4:	d505      	bpl.n	800ad02 <__sflush_r+0x42>
 800acf6:	6863      	ldr	r3, [r4, #4]
 800acf8:	1ac0      	subs	r0, r0, r3
 800acfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acfc:	b10b      	cbz	r3, 800ad02 <__sflush_r+0x42>
 800acfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad00:	1ac0      	subs	r0, r0, r3
 800ad02:	2300      	movs	r3, #0
 800ad04:	4602      	mov	r2, r0
 800ad06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad08:	4628      	mov	r0, r5
 800ad0a:	6a21      	ldr	r1, [r4, #32]
 800ad0c:	47b0      	blx	r6
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	d106      	bne.n	800ad22 <__sflush_r+0x62>
 800ad14:	6829      	ldr	r1, [r5, #0]
 800ad16:	291d      	cmp	r1, #29
 800ad18:	d82c      	bhi.n	800ad74 <__sflush_r+0xb4>
 800ad1a:	4a29      	ldr	r2, [pc, #164]	; (800adc0 <__sflush_r+0x100>)
 800ad1c:	40ca      	lsrs	r2, r1
 800ad1e:	07d6      	lsls	r6, r2, #31
 800ad20:	d528      	bpl.n	800ad74 <__sflush_r+0xb4>
 800ad22:	2200      	movs	r2, #0
 800ad24:	6062      	str	r2, [r4, #4]
 800ad26:	6922      	ldr	r2, [r4, #16]
 800ad28:	04d9      	lsls	r1, r3, #19
 800ad2a:	6022      	str	r2, [r4, #0]
 800ad2c:	d504      	bpl.n	800ad38 <__sflush_r+0x78>
 800ad2e:	1c42      	adds	r2, r0, #1
 800ad30:	d101      	bne.n	800ad36 <__sflush_r+0x76>
 800ad32:	682b      	ldr	r3, [r5, #0]
 800ad34:	b903      	cbnz	r3, 800ad38 <__sflush_r+0x78>
 800ad36:	6560      	str	r0, [r4, #84]	; 0x54
 800ad38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad3a:	602f      	str	r7, [r5, #0]
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d0cb      	beq.n	800acd8 <__sflush_r+0x18>
 800ad40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad44:	4299      	cmp	r1, r3
 800ad46:	d002      	beq.n	800ad4e <__sflush_r+0x8e>
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7ff fc51 	bl	800a5f0 <_free_r>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	6360      	str	r0, [r4, #52]	; 0x34
 800ad52:	e7c2      	b.n	800acda <__sflush_r+0x1a>
 800ad54:	6a21      	ldr	r1, [r4, #32]
 800ad56:	2301      	movs	r3, #1
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b0      	blx	r6
 800ad5c:	1c41      	adds	r1, r0, #1
 800ad5e:	d1c7      	bne.n	800acf0 <__sflush_r+0x30>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0c4      	beq.n	800acf0 <__sflush_r+0x30>
 800ad66:	2b1d      	cmp	r3, #29
 800ad68:	d001      	beq.n	800ad6e <__sflush_r+0xae>
 800ad6a:	2b16      	cmp	r3, #22
 800ad6c:	d101      	bne.n	800ad72 <__sflush_r+0xb2>
 800ad6e:	602f      	str	r7, [r5, #0]
 800ad70:	e7b2      	b.n	800acd8 <__sflush_r+0x18>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	e7ae      	b.n	800acda <__sflush_r+0x1a>
 800ad7c:	690f      	ldr	r7, [r1, #16]
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	d0aa      	beq.n	800acd8 <__sflush_r+0x18>
 800ad82:	0793      	lsls	r3, r2, #30
 800ad84:	bf18      	it	ne
 800ad86:	2300      	movne	r3, #0
 800ad88:	680e      	ldr	r6, [r1, #0]
 800ad8a:	bf08      	it	eq
 800ad8c:	694b      	ldreq	r3, [r1, #20]
 800ad8e:	1bf6      	subs	r6, r6, r7
 800ad90:	600f      	str	r7, [r1, #0]
 800ad92:	608b      	str	r3, [r1, #8]
 800ad94:	2e00      	cmp	r6, #0
 800ad96:	dd9f      	ble.n	800acd8 <__sflush_r+0x18>
 800ad98:	4633      	mov	r3, r6
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ada4:	47e0      	blx	ip
 800ada6:	2800      	cmp	r0, #0
 800ada8:	dc06      	bgt.n	800adb8 <__sflush_r+0xf8>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	e790      	b.n	800acda <__sflush_r+0x1a>
 800adb8:	4407      	add	r7, r0
 800adba:	1a36      	subs	r6, r6, r0
 800adbc:	e7ea      	b.n	800ad94 <__sflush_r+0xd4>
 800adbe:	bf00      	nop
 800adc0:	20400001 	.word	0x20400001

0800adc4 <_fflush_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	690b      	ldr	r3, [r1, #16]
 800adc8:	4605      	mov	r5, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b913      	cbnz	r3, 800add4 <_fflush_r+0x10>
 800adce:	2500      	movs	r5, #0
 800add0:	4628      	mov	r0, r5
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	b118      	cbz	r0, 800adde <_fflush_r+0x1a>
 800add6:	6983      	ldr	r3, [r0, #24]
 800add8:	b90b      	cbnz	r3, 800adde <_fflush_r+0x1a>
 800adda:	f000 f887 	bl	800aeec <__sinit>
 800adde:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <_fflush_r+0x6c>)
 800ade0:	429c      	cmp	r4, r3
 800ade2:	d11b      	bne.n	800ae1c <_fflush_r+0x58>
 800ade4:	686c      	ldr	r4, [r5, #4]
 800ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0ef      	beq.n	800adce <_fflush_r+0xa>
 800adee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adf0:	07d0      	lsls	r0, r2, #31
 800adf2:	d404      	bmi.n	800adfe <_fflush_r+0x3a>
 800adf4:	0599      	lsls	r1, r3, #22
 800adf6:	d402      	bmi.n	800adfe <_fflush_r+0x3a>
 800adf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adfa:	f000 f915 	bl	800b028 <__retarget_lock_acquire_recursive>
 800adfe:	4628      	mov	r0, r5
 800ae00:	4621      	mov	r1, r4
 800ae02:	f7ff ff5d 	bl	800acc0 <__sflush_r>
 800ae06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae08:	4605      	mov	r5, r0
 800ae0a:	07da      	lsls	r2, r3, #31
 800ae0c:	d4e0      	bmi.n	800add0 <_fflush_r+0xc>
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	059b      	lsls	r3, r3, #22
 800ae12:	d4dd      	bmi.n	800add0 <_fflush_r+0xc>
 800ae14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae16:	f000 f908 	bl	800b02a <__retarget_lock_release_recursive>
 800ae1a:	e7d9      	b.n	800add0 <_fflush_r+0xc>
 800ae1c:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <_fflush_r+0x70>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <_fflush_r+0x62>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7df      	b.n	800ade6 <_fflush_r+0x22>
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <_fflush_r+0x74>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	68ec      	ldreq	r4, [r5, #12]
 800ae2e:	e7da      	b.n	800ade6 <_fflush_r+0x22>
 800ae30:	0800c204 	.word	0x0800c204
 800ae34:	0800c224 	.word	0x0800c224
 800ae38:	0800c1e4 	.word	0x0800c1e4

0800ae3c <std>:
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	4604      	mov	r4, r0
 800ae42:	e9c0 3300 	strd	r3, r3, [r0]
 800ae46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae4a:	6083      	str	r3, [r0, #8]
 800ae4c:	8181      	strh	r1, [r0, #12]
 800ae4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae50:	81c2      	strh	r2, [r0, #14]
 800ae52:	6183      	str	r3, [r0, #24]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2208      	movs	r2, #8
 800ae58:	305c      	adds	r0, #92	; 0x5c
 800ae5a:	f7fd fd29 	bl	80088b0 <memset>
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x38>)
 800ae60:	6224      	str	r4, [r4, #32]
 800ae62:	6263      	str	r3, [r4, #36]	; 0x24
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <std+0x3c>)
 800ae66:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae68:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <std+0x40>)
 800ae6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae6c:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <std+0x44>)
 800ae6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae70:	bd10      	pop	{r4, pc}
 800ae72:	bf00      	nop
 800ae74:	0800b181 	.word	0x0800b181
 800ae78:	0800b1a3 	.word	0x0800b1a3
 800ae7c:	0800b1db 	.word	0x0800b1db
 800ae80:	0800b1ff 	.word	0x0800b1ff

0800ae84 <_cleanup_r>:
 800ae84:	4901      	ldr	r1, [pc, #4]	; (800ae8c <_cleanup_r+0x8>)
 800ae86:	f000 b8af 	b.w	800afe8 <_fwalk_reent>
 800ae8a:	bf00      	nop
 800ae8c:	0800adc5 	.word	0x0800adc5

0800ae90 <__sfmoreglue>:
 800ae90:	2268      	movs	r2, #104	; 0x68
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	1e4d      	subs	r5, r1, #1
 800ae96:	4355      	muls	r5, r2
 800ae98:	460e      	mov	r6, r1
 800ae9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae9e:	f7ff fc0f 	bl	800a6c0 <_malloc_r>
 800aea2:	4604      	mov	r4, r0
 800aea4:	b140      	cbz	r0, 800aeb8 <__sfmoreglue+0x28>
 800aea6:	2100      	movs	r1, #0
 800aea8:	e9c0 1600 	strd	r1, r6, [r0]
 800aeac:	300c      	adds	r0, #12
 800aeae:	60a0      	str	r0, [r4, #8]
 800aeb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeb4:	f7fd fcfc 	bl	80088b0 <memset>
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bd70      	pop	{r4, r5, r6, pc}

0800aebc <__sfp_lock_acquire>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_acquire+0x8>)
 800aebe:	f000 b8b3 	b.w	800b028 <__retarget_lock_acquire_recursive>
 800aec2:	bf00      	nop
 800aec4:	200004d5 	.word	0x200004d5

0800aec8 <__sfp_lock_release>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sfp_lock_release+0x8>)
 800aeca:	f000 b8ae 	b.w	800b02a <__retarget_lock_release_recursive>
 800aece:	bf00      	nop
 800aed0:	200004d5 	.word	0x200004d5

0800aed4 <__sinit_lock_acquire>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_acquire+0x8>)
 800aed6:	f000 b8a7 	b.w	800b028 <__retarget_lock_acquire_recursive>
 800aeda:	bf00      	nop
 800aedc:	200004d6 	.word	0x200004d6

0800aee0 <__sinit_lock_release>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__sinit_lock_release+0x8>)
 800aee2:	f000 b8a2 	b.w	800b02a <__retarget_lock_release_recursive>
 800aee6:	bf00      	nop
 800aee8:	200004d6 	.word	0x200004d6

0800aeec <__sinit>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4604      	mov	r4, r0
 800aef0:	f7ff fff0 	bl	800aed4 <__sinit_lock_acquire>
 800aef4:	69a3      	ldr	r3, [r4, #24]
 800aef6:	b11b      	cbz	r3, 800af00 <__sinit+0x14>
 800aef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aefc:	f7ff bff0 	b.w	800aee0 <__sinit_lock_release>
 800af00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af04:	6523      	str	r3, [r4, #80]	; 0x50
 800af06:	4b13      	ldr	r3, [pc, #76]	; (800af54 <__sinit+0x68>)
 800af08:	4a13      	ldr	r2, [pc, #76]	; (800af58 <__sinit+0x6c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af0e:	42a3      	cmp	r3, r4
 800af10:	bf08      	it	eq
 800af12:	2301      	moveq	r3, #1
 800af14:	4620      	mov	r0, r4
 800af16:	bf08      	it	eq
 800af18:	61a3      	streq	r3, [r4, #24]
 800af1a:	f000 f81f 	bl	800af5c <__sfp>
 800af1e:	6060      	str	r0, [r4, #4]
 800af20:	4620      	mov	r0, r4
 800af22:	f000 f81b 	bl	800af5c <__sfp>
 800af26:	60a0      	str	r0, [r4, #8]
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f817 	bl	800af5c <__sfp>
 800af2e:	2200      	movs	r2, #0
 800af30:	2104      	movs	r1, #4
 800af32:	60e0      	str	r0, [r4, #12]
 800af34:	6860      	ldr	r0, [r4, #4]
 800af36:	f7ff ff81 	bl	800ae3c <std>
 800af3a:	2201      	movs	r2, #1
 800af3c:	2109      	movs	r1, #9
 800af3e:	68a0      	ldr	r0, [r4, #8]
 800af40:	f7ff ff7c 	bl	800ae3c <std>
 800af44:	2202      	movs	r2, #2
 800af46:	2112      	movs	r1, #18
 800af48:	68e0      	ldr	r0, [r4, #12]
 800af4a:	f7ff ff77 	bl	800ae3c <std>
 800af4e:	2301      	movs	r3, #1
 800af50:	61a3      	str	r3, [r4, #24]
 800af52:	e7d1      	b.n	800aef8 <__sinit+0xc>
 800af54:	0800be68 	.word	0x0800be68
 800af58:	0800ae85 	.word	0x0800ae85

0800af5c <__sfp>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	4607      	mov	r7, r0
 800af60:	f7ff ffac 	bl	800aebc <__sfp_lock_acquire>
 800af64:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <__sfp+0x84>)
 800af66:	681e      	ldr	r6, [r3, #0]
 800af68:	69b3      	ldr	r3, [r6, #24]
 800af6a:	b913      	cbnz	r3, 800af72 <__sfp+0x16>
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff ffbd 	bl	800aeec <__sinit>
 800af72:	3648      	adds	r6, #72	; 0x48
 800af74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af78:	3b01      	subs	r3, #1
 800af7a:	d503      	bpl.n	800af84 <__sfp+0x28>
 800af7c:	6833      	ldr	r3, [r6, #0]
 800af7e:	b30b      	cbz	r3, 800afc4 <__sfp+0x68>
 800af80:	6836      	ldr	r6, [r6, #0]
 800af82:	e7f7      	b.n	800af74 <__sfp+0x18>
 800af84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af88:	b9d5      	cbnz	r5, 800afc0 <__sfp+0x64>
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <__sfp+0x88>)
 800af8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af90:	60e3      	str	r3, [r4, #12]
 800af92:	6665      	str	r5, [r4, #100]	; 0x64
 800af94:	f000 f847 	bl	800b026 <__retarget_lock_init_recursive>
 800af98:	f7ff ff96 	bl	800aec8 <__sfp_lock_release>
 800af9c:	2208      	movs	r2, #8
 800af9e:	4629      	mov	r1, r5
 800afa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afa8:	6025      	str	r5, [r4, #0]
 800afaa:	61a5      	str	r5, [r4, #24]
 800afac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afb0:	f7fd fc7e 	bl	80088b0 <memset>
 800afb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afbc:	4620      	mov	r0, r4
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	3468      	adds	r4, #104	; 0x68
 800afc2:	e7d9      	b.n	800af78 <__sfp+0x1c>
 800afc4:	2104      	movs	r1, #4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff62 	bl	800ae90 <__sfmoreglue>
 800afcc:	4604      	mov	r4, r0
 800afce:	6030      	str	r0, [r6, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1d5      	bne.n	800af80 <__sfp+0x24>
 800afd4:	f7ff ff78 	bl	800aec8 <__sfp_lock_release>
 800afd8:	230c      	movs	r3, #12
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	e7ee      	b.n	800afbc <__sfp+0x60>
 800afde:	bf00      	nop
 800afe0:	0800be68 	.word	0x0800be68
 800afe4:	ffff0001 	.word	0xffff0001

0800afe8 <_fwalk_reent>:
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	4606      	mov	r6, r0
 800afee:	4688      	mov	r8, r1
 800aff0:	2700      	movs	r7, #0
 800aff2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800affa:	f1b9 0901 	subs.w	r9, r9, #1
 800affe:	d505      	bpl.n	800b00c <_fwalk_reent+0x24>
 800b000:	6824      	ldr	r4, [r4, #0]
 800b002:	2c00      	cmp	r4, #0
 800b004:	d1f7      	bne.n	800aff6 <_fwalk_reent+0xe>
 800b006:	4638      	mov	r0, r7
 800b008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00c:	89ab      	ldrh	r3, [r5, #12]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d907      	bls.n	800b022 <_fwalk_reent+0x3a>
 800b012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b016:	3301      	adds	r3, #1
 800b018:	d003      	beq.n	800b022 <_fwalk_reent+0x3a>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	47c0      	blx	r8
 800b020:	4307      	orrs	r7, r0
 800b022:	3568      	adds	r5, #104	; 0x68
 800b024:	e7e9      	b.n	800affa <_fwalk_reent+0x12>

0800b026 <__retarget_lock_init_recursive>:
 800b026:	4770      	bx	lr

0800b028 <__retarget_lock_acquire_recursive>:
 800b028:	4770      	bx	lr

0800b02a <__retarget_lock_release_recursive>:
 800b02a:	4770      	bx	lr

0800b02c <__swhatbuf_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	460e      	mov	r6, r1
 800b030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b034:	4614      	mov	r4, r2
 800b036:	2900      	cmp	r1, #0
 800b038:	461d      	mov	r5, r3
 800b03a:	b096      	sub	sp, #88	; 0x58
 800b03c:	da08      	bge.n	800b050 <__swhatbuf_r+0x24>
 800b03e:	2200      	movs	r2, #0
 800b040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b044:	602a      	str	r2, [r5, #0]
 800b046:	061a      	lsls	r2, r3, #24
 800b048:	d410      	bmi.n	800b06c <__swhatbuf_r+0x40>
 800b04a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b04e:	e00e      	b.n	800b06e <__swhatbuf_r+0x42>
 800b050:	466a      	mov	r2, sp
 800b052:	f000 f8fb 	bl	800b24c <_fstat_r>
 800b056:	2800      	cmp	r0, #0
 800b058:	dbf1      	blt.n	800b03e <__swhatbuf_r+0x12>
 800b05a:	9a01      	ldr	r2, [sp, #4]
 800b05c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b064:	425a      	negs	r2, r3
 800b066:	415a      	adcs	r2, r3
 800b068:	602a      	str	r2, [r5, #0]
 800b06a:	e7ee      	b.n	800b04a <__swhatbuf_r+0x1e>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	2000      	movs	r0, #0
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	b016      	add	sp, #88	; 0x58
 800b074:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b078 <__smakebuf_r>:
 800b078:	898b      	ldrh	r3, [r1, #12]
 800b07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b07c:	079d      	lsls	r5, r3, #30
 800b07e:	4606      	mov	r6, r0
 800b080:	460c      	mov	r4, r1
 800b082:	d507      	bpl.n	800b094 <__smakebuf_r+0x1c>
 800b084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	2301      	movs	r3, #1
 800b08e:	6163      	str	r3, [r4, #20]
 800b090:	b002      	add	sp, #8
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	466a      	mov	r2, sp
 800b096:	ab01      	add	r3, sp, #4
 800b098:	f7ff ffc8 	bl	800b02c <__swhatbuf_r>
 800b09c:	9900      	ldr	r1, [sp, #0]
 800b09e:	4605      	mov	r5, r0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7ff fb0d 	bl	800a6c0 <_malloc_r>
 800b0a6:	b948      	cbnz	r0, 800b0bc <__smakebuf_r+0x44>
 800b0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ac:	059a      	lsls	r2, r3, #22
 800b0ae:	d4ef      	bmi.n	800b090 <__smakebuf_r+0x18>
 800b0b0:	f023 0303 	bic.w	r3, r3, #3
 800b0b4:	f043 0302 	orr.w	r3, r3, #2
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	e7e3      	b.n	800b084 <__smakebuf_r+0xc>
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <__smakebuf_r+0x7c>)
 800b0be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	6020      	str	r0, [r4, #0]
 800b0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c8:	81a3      	strh	r3, [r4, #12]
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	6120      	str	r0, [r4, #16]
 800b0ce:	6163      	str	r3, [r4, #20]
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	b15b      	cbz	r3, 800b0ec <__smakebuf_r+0x74>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0da:	f000 f8c9 	bl	800b270 <_isatty_r>
 800b0de:	b128      	cbz	r0, 800b0ec <__smakebuf_r+0x74>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	f043 0301 	orr.w	r3, r3, #1
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	89a0      	ldrh	r0, [r4, #12]
 800b0ee:	4305      	orrs	r5, r0
 800b0f0:	81a5      	strh	r5, [r4, #12]
 800b0f2:	e7cd      	b.n	800b090 <__smakebuf_r+0x18>
 800b0f4:	0800ae85 	.word	0x0800ae85

0800b0f8 <_raise_r>:
 800b0f8:	291f      	cmp	r1, #31
 800b0fa:	b538      	push	{r3, r4, r5, lr}
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	460d      	mov	r5, r1
 800b100:	d904      	bls.n	800b10c <_raise_r+0x14>
 800b102:	2316      	movs	r3, #22
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	f04f 30ff 	mov.w	r0, #4294967295
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b10e:	b112      	cbz	r2, 800b116 <_raise_r+0x1e>
 800b110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b114:	b94b      	cbnz	r3, 800b12a <_raise_r+0x32>
 800b116:	4620      	mov	r0, r4
 800b118:	f000 f830 	bl	800b17c <_getpid_r>
 800b11c:	462a      	mov	r2, r5
 800b11e:	4601      	mov	r1, r0
 800b120:	4620      	mov	r0, r4
 800b122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b126:	f000 b817 	b.w	800b158 <_kill_r>
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d00a      	beq.n	800b144 <_raise_r+0x4c>
 800b12e:	1c59      	adds	r1, r3, #1
 800b130:	d103      	bne.n	800b13a <_raise_r+0x42>
 800b132:	2316      	movs	r3, #22
 800b134:	6003      	str	r3, [r0, #0]
 800b136:	2001      	movs	r0, #1
 800b138:	e7e7      	b.n	800b10a <_raise_r+0x12>
 800b13a:	2400      	movs	r4, #0
 800b13c:	4628      	mov	r0, r5
 800b13e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b142:	4798      	blx	r3
 800b144:	2000      	movs	r0, #0
 800b146:	e7e0      	b.n	800b10a <_raise_r+0x12>

0800b148 <raise>:
 800b148:	4b02      	ldr	r3, [pc, #8]	; (800b154 <raise+0xc>)
 800b14a:	4601      	mov	r1, r0
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	f7ff bfd3 	b.w	800b0f8 <_raise_r>
 800b152:	bf00      	nop
 800b154:	20000094 	.word	0x20000094

0800b158 <_kill_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	2300      	movs	r3, #0
 800b15c:	4d06      	ldr	r5, [pc, #24]	; (800b178 <_kill_r+0x20>)
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	f7f9 f9f2 	bl	800454e <_kill>
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	d102      	bne.n	800b174 <_kill_r+0x1c>
 800b16e:	682b      	ldr	r3, [r5, #0]
 800b170:	b103      	cbz	r3, 800b174 <_kill_r+0x1c>
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	bd38      	pop	{r3, r4, r5, pc}
 800b176:	bf00      	nop
 800b178:	200004d0 	.word	0x200004d0

0800b17c <_getpid_r>:
 800b17c:	f7f9 b9e0 	b.w	8004540 <_getpid>

0800b180 <__sread>:
 800b180:	b510      	push	{r4, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	f000 f894 	bl	800b2b4 <_read_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	bfab      	itete	ge
 800b190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b192:	89a3      	ldrhlt	r3, [r4, #12]
 800b194:	181b      	addge	r3, r3, r0
 800b196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b19a:	bfac      	ite	ge
 800b19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b19e:	81a3      	strhlt	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__swrite>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	05db      	lsls	r3, r3, #23
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1e>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1bc:	f000 f868 	bl	800b290 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	4632      	mov	r2, r6
 800b1c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	463b      	mov	r3, r7
 800b1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	f000 b817 	b.w	800b208 <_write_r>

0800b1da <__sseek>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 f855 	bl	800b290 <_lseek_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	bf15      	itete	ne
 800b1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1f6:	81a3      	strheq	r3, [r4, #12]
 800b1f8:	bf18      	it	ne
 800b1fa:	81a3      	strhne	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__sclose>:
 800b1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b202:	f000 b813 	b.w	800b22c <_close_r>
	...

0800b208 <_write_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	4611      	mov	r1, r2
 800b210:	2200      	movs	r2, #0
 800b212:	4d05      	ldr	r5, [pc, #20]	; (800b228 <_write_r+0x20>)
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f7f9 f9d0 	bl	80045bc <_write>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_write_r+0x1e>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_write_r+0x1e>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	200004d0 	.word	0x200004d0

0800b22c <_close_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	2300      	movs	r3, #0
 800b230:	4d05      	ldr	r5, [pc, #20]	; (800b248 <_close_r+0x1c>)
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f9 f9dc 	bl	80045f4 <_close>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_close_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_close_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	200004d0 	.word	0x200004d0

0800b24c <_fstat_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	2300      	movs	r3, #0
 800b250:	4d06      	ldr	r5, [pc, #24]	; (800b26c <_fstat_r+0x20>)
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f9 f9d6 	bl	800460a <_fstat>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_fstat_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_fstat_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	200004d0 	.word	0x200004d0

0800b270 <_isatty_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	2300      	movs	r3, #0
 800b274:	4d05      	ldr	r5, [pc, #20]	; (800b28c <_isatty_r+0x1c>)
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	f7f9 f9d4 	bl	8004628 <_isatty>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_isatty_r+0x1a>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_isatty_r+0x1a>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	200004d0 	.word	0x200004d0

0800b290 <_lseek_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	2200      	movs	r2, #0
 800b29a:	4d05      	ldr	r5, [pc, #20]	; (800b2b0 <_lseek_r+0x20>)
 800b29c:	602a      	str	r2, [r5, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f7f9 f9cc 	bl	800463c <_lseek>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_lseek_r+0x1e>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_lseek_r+0x1e>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	200004d0 	.word	0x200004d0

0800b2b4 <_read_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4d05      	ldr	r5, [pc, #20]	; (800b2d4 <_read_r+0x20>)
 800b2c0:	602a      	str	r2, [r5, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f7f9 f95d 	bl	8004582 <_read>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_read_r+0x1e>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_read_r+0x1e>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	200004d0 	.word	0x200004d0

0800b2d8 <asin>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	460d      	mov	r5, r1
 800b2de:	f000 f83f 	bl	800b360 <__ieee754_asin>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	460f      	mov	r7, r1
 800b2e8:	462b      	mov	r3, r5
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	f7f5 fb8d 	bl	8000a0c <__aeabi_dcmpun>
 800b2f2:	b988      	cbnz	r0, 800b318 <asin+0x40>
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f000 fd8c 	bl	800be14 <fabs>
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4b08      	ldr	r3, [pc, #32]	; (800b320 <asin+0x48>)
 800b300:	f7f5 fb7a 	bl	80009f8 <__aeabi_dcmpgt>
 800b304:	b140      	cbz	r0, 800b318 <asin+0x40>
 800b306:	f7fd faa9 	bl	800885c <__errno>
 800b30a:	2321      	movs	r3, #33	; 0x21
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <asin+0x4c>)
 800b310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b314:	f000 bd82 	b.w	800be1c <nan>
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b31e:	bf00      	nop
 800b320:	3ff00000 	.word	0x3ff00000
 800b324:	0800c0c7 	.word	0x0800c0c7

0800b328 <atan2>:
 800b328:	f000 ba16 	b.w	800b758 <__ieee754_atan2>

0800b32c <sqrtf>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4605      	mov	r5, r0
 800b330:	f000 fb94 	bl	800ba5c <__ieee754_sqrtf>
 800b334:	4629      	mov	r1, r5
 800b336:	4604      	mov	r4, r0
 800b338:	4628      	mov	r0, r5
 800b33a:	f7f5 fec9 	bl	80010d0 <__aeabi_fcmpun>
 800b33e:	b968      	cbnz	r0, 800b35c <sqrtf+0x30>
 800b340:	2100      	movs	r1, #0
 800b342:	4628      	mov	r0, r5
 800b344:	f7f5 fe9c 	bl	8001080 <__aeabi_fcmplt>
 800b348:	b140      	cbz	r0, 800b35c <sqrtf+0x30>
 800b34a:	f7fd fa87 	bl	800885c <__errno>
 800b34e:	2321      	movs	r3, #33	; 0x21
 800b350:	2100      	movs	r1, #0
 800b352:	6003      	str	r3, [r0, #0]
 800b354:	4608      	mov	r0, r1
 800b356:	f7f5 fda9 	bl	8000eac <__aeabi_fdiv>
 800b35a:	4604      	mov	r4, r0
 800b35c:	4620      	mov	r0, r4
 800b35e:	bd38      	pop	{r3, r4, r5, pc}

0800b360 <__ieee754_asin>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	4bc4      	ldr	r3, [pc, #784]	; (800b678 <__ieee754_asin+0x318>)
 800b366:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b36a:	b087      	sub	sp, #28
 800b36c:	429e      	cmp	r6, r3
 800b36e:	4602      	mov	r2, r0
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	9105      	str	r1, [sp, #20]
 800b376:	dd29      	ble.n	800b3cc <__ieee754_asin+0x6c>
 800b378:	4603      	mov	r3, r0
 800b37a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800b37e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b382:	4333      	orrs	r3, r6
 800b384:	d114      	bne.n	800b3b0 <__ieee754_asin+0x50>
 800b386:	a3a2      	add	r3, pc, #648	; (adr r3, 800b610 <__ieee754_asin+0x2b0>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f5 f8a4 	bl	80004d8 <__aeabi_dmul>
 800b390:	a3a1      	add	r3, pc, #644	; (adr r3, 800b618 <__ieee754_asin+0x2b8>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	4620      	mov	r0, r4
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7f5 f89b 	bl	80004d8 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f4 fedf 	bl	800016c <__adddf3>
 800b3ae:	e006      	b.n	800b3be <__ieee754_asin+0x5e>
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	f7f4 fed9 	bl	8000168 <__aeabi_dsub>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	f7f5 f9b7 	bl	800072c <__aeabi_ddiv>
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	b007      	add	sp, #28
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4bab      	ldr	r3, [pc, #684]	; (800b67c <__ieee754_asin+0x31c>)
 800b3ce:	429e      	cmp	r6, r3
 800b3d0:	dc0e      	bgt.n	800b3f0 <__ieee754_asin+0x90>
 800b3d2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b3d6:	f280 80ab 	bge.w	800b530 <__ieee754_asin+0x1d0>
 800b3da:	a391      	add	r3, pc, #580	; (adr r3, 800b620 <__ieee754_asin+0x2c0>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 fec4 	bl	800016c <__adddf3>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4ba6      	ldr	r3, [pc, #664]	; (800b680 <__ieee754_asin+0x320>)
 800b3e8:	f7f5 fb06 	bl	80009f8 <__aeabi_dcmpgt>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1e8      	bne.n	800b3c2 <__ieee754_asin+0x62>
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f000 fd0e 	bl	800be14 <fabs>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	49a0      	ldr	r1, [pc, #640]	; (800b680 <__ieee754_asin+0x320>)
 800b400:	f7f4 feb2 	bl	8000168 <__aeabi_dsub>
 800b404:	2200      	movs	r2, #0
 800b406:	4b9f      	ldr	r3, [pc, #636]	; (800b684 <__ieee754_asin+0x324>)
 800b408:	f7f5 f866 	bl	80004d8 <__aeabi_dmul>
 800b40c:	a386      	add	r3, pc, #536	; (adr r3, 800b628 <__ieee754_asin+0x2c8>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	4604      	mov	r4, r0
 800b414:	460d      	mov	r5, r1
 800b416:	f7f5 f85f 	bl	80004d8 <__aeabi_dmul>
 800b41a:	a385      	add	r3, pc, #532	; (adr r3, 800b630 <__ieee754_asin+0x2d0>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f4 fea4 	bl	800016c <__adddf3>
 800b424:	4622      	mov	r2, r4
 800b426:	462b      	mov	r3, r5
 800b428:	f7f5 f856 	bl	80004d8 <__aeabi_dmul>
 800b42c:	a382      	add	r3, pc, #520	; (adr r3, 800b638 <__ieee754_asin+0x2d8>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f4 fe99 	bl	8000168 <__aeabi_dsub>
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	f7f5 f84d 	bl	80004d8 <__aeabi_dmul>
 800b43e:	a380      	add	r3, pc, #512	; (adr r3, 800b640 <__ieee754_asin+0x2e0>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f4 fe92 	bl	800016c <__adddf3>
 800b448:	4622      	mov	r2, r4
 800b44a:	462b      	mov	r3, r5
 800b44c:	f7f5 f844 	bl	80004d8 <__aeabi_dmul>
 800b450:	a37d      	add	r3, pc, #500	; (adr r3, 800b648 <__ieee754_asin+0x2e8>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f4 fe87 	bl	8000168 <__aeabi_dsub>
 800b45a:	4622      	mov	r2, r4
 800b45c:	462b      	mov	r3, r5
 800b45e:	f7f5 f83b 	bl	80004d8 <__aeabi_dmul>
 800b462:	a37b      	add	r3, pc, #492	; (adr r3, 800b650 <__ieee754_asin+0x2f0>)
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	f7f4 fe80 	bl	800016c <__adddf3>
 800b46c:	4622      	mov	r2, r4
 800b46e:	462b      	mov	r3, r5
 800b470:	f7f5 f832 	bl	80004d8 <__aeabi_dmul>
 800b474:	a378      	add	r3, pc, #480	; (adr r3, 800b658 <__ieee754_asin+0x2f8>)
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	e9cd 0100 	strd	r0, r1, [sp]
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 f829 	bl	80004d8 <__aeabi_dmul>
 800b486:	a376      	add	r3, pc, #472	; (adr r3, 800b660 <__ieee754_asin+0x300>)
 800b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48c:	f7f4 fe6c 	bl	8000168 <__aeabi_dsub>
 800b490:	4622      	mov	r2, r4
 800b492:	462b      	mov	r3, r5
 800b494:	f7f5 f820 	bl	80004d8 <__aeabi_dmul>
 800b498:	a373      	add	r3, pc, #460	; (adr r3, 800b668 <__ieee754_asin+0x308>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f4 fe65 	bl	800016c <__adddf3>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	f7f5 f817 	bl	80004d8 <__aeabi_dmul>
 800b4aa:	a371      	add	r3, pc, #452	; (adr r3, 800b670 <__ieee754_asin+0x310>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f4 fe5a 	bl	8000168 <__aeabi_dsub>
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	462b      	mov	r3, r5
 800b4b8:	f7f5 f80e 	bl	80004d8 <__aeabi_dmul>
 800b4bc:	4b70      	ldr	r3, [pc, #448]	; (800b680 <__ieee754_asin+0x320>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f7f4 fe54 	bl	800016c <__adddf3>
 800b4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	f000 fa16 	bl	800b8fc <__ieee754_sqrt>
 800b4d0:	4b6d      	ldr	r3, [pc, #436]	; (800b688 <__ieee754_asin+0x328>)
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	429e      	cmp	r6, r3
 800b4d6:	468b      	mov	fp, r1
 800b4d8:	f340 80d8 	ble.w	800b68c <__ieee754_asin+0x32c>
 800b4dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4e4:	f7f5 f922 	bl	800072c <__aeabi_ddiv>
 800b4e8:	4652      	mov	r2, sl
 800b4ea:	465b      	mov	r3, fp
 800b4ec:	f7f4 fff4 	bl	80004d8 <__aeabi_dmul>
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	f7f4 fe3a 	bl	800016c <__adddf3>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	f7f4 fe36 	bl	800016c <__adddf3>
 800b500:	a345      	add	r3, pc, #276	; (adr r3, 800b618 <__ieee754_asin+0x2b8>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 fe2f 	bl	8000168 <__aeabi_dsub>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	a140      	add	r1, pc, #256	; (adr r1, 800b610 <__ieee754_asin+0x2b0>)
 800b510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b514:	f7f4 fe28 	bl	8000168 <__aeabi_dsub>
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	4604      	mov	r4, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfdc      	itt	le
 800b520:	4602      	movle	r2, r0
 800b522:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b526:	460d      	mov	r5, r1
 800b528:	bfdc      	itt	le
 800b52a:	4614      	movle	r4, r2
 800b52c:	461d      	movle	r5, r3
 800b52e:	e748      	b.n	800b3c2 <__ieee754_asin+0x62>
 800b530:	460b      	mov	r3, r1
 800b532:	f7f4 ffd1 	bl	80004d8 <__aeabi_dmul>
 800b536:	a33c      	add	r3, pc, #240	; (adr r3, 800b628 <__ieee754_asin+0x2c8>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	f7f4 ffca 	bl	80004d8 <__aeabi_dmul>
 800b544:	a33a      	add	r3, pc, #232	; (adr r3, 800b630 <__ieee754_asin+0x2d0>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7f4 fe0f 	bl	800016c <__adddf3>
 800b54e:	4632      	mov	r2, r6
 800b550:	463b      	mov	r3, r7
 800b552:	f7f4 ffc1 	bl	80004d8 <__aeabi_dmul>
 800b556:	a338      	add	r3, pc, #224	; (adr r3, 800b638 <__ieee754_asin+0x2d8>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fe04 	bl	8000168 <__aeabi_dsub>
 800b560:	4632      	mov	r2, r6
 800b562:	463b      	mov	r3, r7
 800b564:	f7f4 ffb8 	bl	80004d8 <__aeabi_dmul>
 800b568:	a335      	add	r3, pc, #212	; (adr r3, 800b640 <__ieee754_asin+0x2e0>)
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	f7f4 fdfd 	bl	800016c <__adddf3>
 800b572:	4632      	mov	r2, r6
 800b574:	463b      	mov	r3, r7
 800b576:	f7f4 ffaf 	bl	80004d8 <__aeabi_dmul>
 800b57a:	a333      	add	r3, pc, #204	; (adr r3, 800b648 <__ieee754_asin+0x2e8>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 fdf2 	bl	8000168 <__aeabi_dsub>
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	f7f4 ffa6 	bl	80004d8 <__aeabi_dmul>
 800b58c:	a330      	add	r3, pc, #192	; (adr r3, 800b650 <__ieee754_asin+0x2f0>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	f7f4 fdeb 	bl	800016c <__adddf3>
 800b596:	4632      	mov	r2, r6
 800b598:	463b      	mov	r3, r7
 800b59a:	f7f4 ff9d 	bl	80004d8 <__aeabi_dmul>
 800b59e:	a32e      	add	r3, pc, #184	; (adr r3, 800b658 <__ieee754_asin+0x2f8>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 ff94 	bl	80004d8 <__aeabi_dmul>
 800b5b0:	a32b      	add	r3, pc, #172	; (adr r3, 800b660 <__ieee754_asin+0x300>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f4 fdd7 	bl	8000168 <__aeabi_dsub>
 800b5ba:	4632      	mov	r2, r6
 800b5bc:	463b      	mov	r3, r7
 800b5be:	f7f4 ff8b 	bl	80004d8 <__aeabi_dmul>
 800b5c2:	a329      	add	r3, pc, #164	; (adr r3, 800b668 <__ieee754_asin+0x308>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	f7f4 fdd0 	bl	800016c <__adddf3>
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	463b      	mov	r3, r7
 800b5d0:	f7f4 ff82 	bl	80004d8 <__aeabi_dmul>
 800b5d4:	a326      	add	r3, pc, #152	; (adr r3, 800b670 <__ieee754_asin+0x310>)
 800b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5da:	f7f4 fdc5 	bl	8000168 <__aeabi_dsub>
 800b5de:	4632      	mov	r2, r6
 800b5e0:	463b      	mov	r3, r7
 800b5e2:	f7f4 ff79 	bl	80004d8 <__aeabi_dmul>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4b25      	ldr	r3, [pc, #148]	; (800b680 <__ieee754_asin+0x320>)
 800b5ea:	f7f4 fdbf 	bl	800016c <__adddf3>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	f7f5 f899 	bl	800072c <__aeabi_ddiv>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 ff6b 	bl	80004d8 <__aeabi_dmul>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4620      	mov	r0, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	e6ce      	b.n	800b3aa <__ieee754_asin+0x4a>
 800b60c:	f3af 8000 	nop.w
 800b610:	54442d18 	.word	0x54442d18
 800b614:	3ff921fb 	.word	0x3ff921fb
 800b618:	33145c07 	.word	0x33145c07
 800b61c:	3c91a626 	.word	0x3c91a626
 800b620:	8800759c 	.word	0x8800759c
 800b624:	7e37e43c 	.word	0x7e37e43c
 800b628:	0dfdf709 	.word	0x0dfdf709
 800b62c:	3f023de1 	.word	0x3f023de1
 800b630:	7501b288 	.word	0x7501b288
 800b634:	3f49efe0 	.word	0x3f49efe0
 800b638:	b5688f3b 	.word	0xb5688f3b
 800b63c:	3fa48228 	.word	0x3fa48228
 800b640:	0e884455 	.word	0x0e884455
 800b644:	3fc9c155 	.word	0x3fc9c155
 800b648:	03eb6f7d 	.word	0x03eb6f7d
 800b64c:	3fd4d612 	.word	0x3fd4d612
 800b650:	55555555 	.word	0x55555555
 800b654:	3fc55555 	.word	0x3fc55555
 800b658:	b12e9282 	.word	0xb12e9282
 800b65c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b660:	1b8d0159 	.word	0x1b8d0159
 800b664:	3fe6066c 	.word	0x3fe6066c
 800b668:	9c598ac8 	.word	0x9c598ac8
 800b66c:	40002ae5 	.word	0x40002ae5
 800b670:	1c8a2d4b 	.word	0x1c8a2d4b
 800b674:	40033a27 	.word	0x40033a27
 800b678:	3fefffff 	.word	0x3fefffff
 800b67c:	3fdfffff 	.word	0x3fdfffff
 800b680:	3ff00000 	.word	0x3ff00000
 800b684:	3fe00000 	.word	0x3fe00000
 800b688:	3fef3332 	.word	0x3fef3332
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	f7f4 fd6c 	bl	800016c <__adddf3>
 800b694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b698:	4606      	mov	r6, r0
 800b69a:	460f      	mov	r7, r1
 800b69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6a0:	f7f5 f844 	bl	800072c <__aeabi_ddiv>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	f04f 0800 	mov.w	r8, #0
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	465b      	mov	r3, fp
 800b6bc:	4640      	mov	r0, r8
 800b6be:	4659      	mov	r1, fp
 800b6c0:	f7f4 ff0a 	bl	80004d8 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fd4c 	bl	8000168 <__aeabi_dsub>
 800b6d0:	4642      	mov	r2, r8
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4650      	mov	r0, sl
 800b6da:	4659      	mov	r1, fp
 800b6dc:	f7f4 fd46 	bl	800016c <__adddf3>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f5 f820 	bl	800072c <__aeabi_ddiv>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	f7f4 fd3c 	bl	800016c <__adddf3>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	a113      	add	r1, pc, #76	; (adr r1, 800b748 <__ieee754_asin+0x3e8>)
 800b6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fe:	f7f4 fd33 	bl	8000168 <__aeabi_dsub>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f4 fd2d 	bl	8000168 <__aeabi_dsub>
 800b70e:	4642      	mov	r2, r8
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	465b      	mov	r3, fp
 800b716:	4640      	mov	r0, r8
 800b718:	4659      	mov	r1, fp
 800b71a:	f7f4 fd27 	bl	800016c <__adddf3>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	a10b      	add	r1, pc, #44	; (adr r1, 800b750 <__ieee754_asin+0x3f0>)
 800b724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b728:	f7f4 fd1e 	bl	8000168 <__aeabi_dsub>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4620      	mov	r0, r4
 800b732:	4629      	mov	r1, r5
 800b734:	f7f4 fd18 	bl	8000168 <__aeabi_dsub>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	a104      	add	r1, pc, #16	; (adr r1, 800b750 <__ieee754_asin+0x3f0>)
 800b73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b742:	e6e7      	b.n	800b514 <__ieee754_asin+0x1b4>
 800b744:	f3af 8000 	nop.w
 800b748:	33145c07 	.word	0x33145c07
 800b74c:	3c91a626 	.word	0x3c91a626
 800b750:	54442d18 	.word	0x54442d18
 800b754:	3fe921fb 	.word	0x3fe921fb

0800b758 <__ieee754_atan2>:
 800b758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4692      	mov	sl, r2
 800b75e:	4699      	mov	r9, r3
 800b760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b764:	461f      	mov	r7, r3
 800b766:	f1ca 0300 	rsb	r3, sl, #0
 800b76a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b8f0 <__ieee754_atan2+0x198>
 800b76e:	ea43 030a 	orr.w	r3, r3, sl
 800b772:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b776:	4573      	cmp	r3, lr
 800b778:	4604      	mov	r4, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	d808      	bhi.n	800b790 <__ieee754_atan2+0x38>
 800b77e:	4246      	negs	r6, r0
 800b780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b784:	4306      	orrs	r6, r0
 800b786:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800b78a:	4576      	cmp	r6, lr
 800b78c:	468c      	mov	ip, r1
 800b78e:	d908      	bls.n	800b7a2 <__ieee754_atan2+0x4a>
 800b790:	4652      	mov	r2, sl
 800b792:	464b      	mov	r3, r9
 800b794:	4620      	mov	r0, r4
 800b796:	4629      	mov	r1, r5
 800b798:	f7f4 fce8 	bl	800016c <__adddf3>
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	e019      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b7a2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800b7a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b7aa:	ea56 060a 	orrs.w	r6, r6, sl
 800b7ae:	d103      	bne.n	800b7b8 <__ieee754_atan2+0x60>
 800b7b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	f000 b9a4 	b.w	800bb00 <atan>
 800b7b8:	17be      	asrs	r6, r7, #30
 800b7ba:	f006 0602 	and.w	r6, r6, #2
 800b7be:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b7c2:	ea53 0100 	orrs.w	r1, r3, r0
 800b7c6:	d10a      	bne.n	800b7de <__ieee754_atan2+0x86>
 800b7c8:	2e02      	cmp	r6, #2
 800b7ca:	d067      	beq.n	800b89c <__ieee754_atan2+0x144>
 800b7cc:	2e03      	cmp	r6, #3
 800b7ce:	d102      	bne.n	800b7d6 <__ieee754_atan2+0x7e>
 800b7d0:	a53b      	add	r5, pc, #236	; (adr r5, 800b8c0 <__ieee754_atan2+0x168>)
 800b7d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	ea52 010a 	orrs.w	r1, r2, sl
 800b7e2:	d106      	bne.n	800b7f2 <__ieee754_atan2+0x9a>
 800b7e4:	f1bc 0f00 	cmp.w	ip, #0
 800b7e8:	da63      	bge.n	800b8b2 <__ieee754_atan2+0x15a>
 800b7ea:	a537      	add	r5, pc, #220	; (adr r5, 800b8c8 <__ieee754_atan2+0x170>)
 800b7ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7f0:	e7f1      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b7f2:	4572      	cmp	r2, lr
 800b7f4:	d10f      	bne.n	800b816 <__ieee754_atan2+0xbe>
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	f106 36ff 	add.w	r6, r6, #4294967295
 800b7fc:	d107      	bne.n	800b80e <__ieee754_atan2+0xb6>
 800b7fe:	2e02      	cmp	r6, #2
 800b800:	d850      	bhi.n	800b8a4 <__ieee754_atan2+0x14c>
 800b802:	4b3c      	ldr	r3, [pc, #240]	; (800b8f4 <__ieee754_atan2+0x19c>)
 800b804:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b808:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b80c:	e7e3      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b80e:	2e02      	cmp	r6, #2
 800b810:	d84c      	bhi.n	800b8ac <__ieee754_atan2+0x154>
 800b812:	4b39      	ldr	r3, [pc, #228]	; (800b8f8 <__ieee754_atan2+0x1a0>)
 800b814:	e7f6      	b.n	800b804 <__ieee754_atan2+0xac>
 800b816:	4573      	cmp	r3, lr
 800b818:	d0e4      	beq.n	800b7e4 <__ieee754_atan2+0x8c>
 800b81a:	1a9b      	subs	r3, r3, r2
 800b81c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b820:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b824:	da20      	bge.n	800b868 <__ieee754_atan2+0x110>
 800b826:	2f00      	cmp	r7, #0
 800b828:	da01      	bge.n	800b82e <__ieee754_atan2+0xd6>
 800b82a:	323c      	adds	r2, #60	; 0x3c
 800b82c:	db20      	blt.n	800b870 <__ieee754_atan2+0x118>
 800b82e:	4652      	mov	r2, sl
 800b830:	464b      	mov	r3, r9
 800b832:	4620      	mov	r0, r4
 800b834:	4629      	mov	r1, r5
 800b836:	f7f4 ff79 	bl	800072c <__aeabi_ddiv>
 800b83a:	f000 faeb 	bl	800be14 <fabs>
 800b83e:	f000 f95f 	bl	800bb00 <atan>
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	2e01      	cmp	r6, #1
 800b848:	d015      	beq.n	800b876 <__ieee754_atan2+0x11e>
 800b84a:	2e02      	cmp	r6, #2
 800b84c:	d017      	beq.n	800b87e <__ieee754_atan2+0x126>
 800b84e:	2e00      	cmp	r6, #0
 800b850:	d0c1      	beq.n	800b7d6 <__ieee754_atan2+0x7e>
 800b852:	a31f      	add	r3, pc, #124	; (adr r3, 800b8d0 <__ieee754_atan2+0x178>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	4620      	mov	r0, r4
 800b85a:	4629      	mov	r1, r5
 800b85c:	f7f4 fc84 	bl	8000168 <__aeabi_dsub>
 800b860:	a31d      	add	r3, pc, #116	; (adr r3, 800b8d8 <__ieee754_atan2+0x180>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	e016      	b.n	800b896 <__ieee754_atan2+0x13e>
 800b868:	a51d      	add	r5, pc, #116	; (adr r5, 800b8e0 <__ieee754_atan2+0x188>)
 800b86a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b86e:	e7ea      	b.n	800b846 <__ieee754_atan2+0xee>
 800b870:	2400      	movs	r4, #0
 800b872:	2500      	movs	r5, #0
 800b874:	e7e7      	b.n	800b846 <__ieee754_atan2+0xee>
 800b876:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b87a:	461d      	mov	r5, r3
 800b87c:	e7ab      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b87e:	a314      	add	r3, pc, #80	; (adr r3, 800b8d0 <__ieee754_atan2+0x178>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fc6e 	bl	8000168 <__aeabi_dsub>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	a111      	add	r1, pc, #68	; (adr r1, 800b8d8 <__ieee754_atan2+0x180>)
 800b892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b896:	f7f4 fc67 	bl	8000168 <__aeabi_dsub>
 800b89a:	e77f      	b.n	800b79c <__ieee754_atan2+0x44>
 800b89c:	a50e      	add	r5, pc, #56	; (adr r5, 800b8d8 <__ieee754_atan2+0x180>)
 800b89e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8a2:	e798      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b8a4:	a510      	add	r5, pc, #64	; (adr r5, 800b8e8 <__ieee754_atan2+0x190>)
 800b8a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8aa:	e794      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	2500      	movs	r5, #0
 800b8b0:	e791      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b8b2:	a50b      	add	r5, pc, #44	; (adr r5, 800b8e0 <__ieee754_atan2+0x188>)
 800b8b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8b8:	e78d      	b.n	800b7d6 <__ieee754_atan2+0x7e>
 800b8ba:	bf00      	nop
 800b8bc:	f3af 8000 	nop.w
 800b8c0:	54442d18 	.word	0x54442d18
 800b8c4:	c00921fb 	.word	0xc00921fb
 800b8c8:	54442d18 	.word	0x54442d18
 800b8cc:	bff921fb 	.word	0xbff921fb
 800b8d0:	33145c07 	.word	0x33145c07
 800b8d4:	3ca1a626 	.word	0x3ca1a626
 800b8d8:	54442d18 	.word	0x54442d18
 800b8dc:	400921fb 	.word	0x400921fb
 800b8e0:	54442d18 	.word	0x54442d18
 800b8e4:	3ff921fb 	.word	0x3ff921fb
 800b8e8:	54442d18 	.word	0x54442d18
 800b8ec:	3fe921fb 	.word	0x3fe921fb
 800b8f0:	7ff00000 	.word	0x7ff00000
 800b8f4:	0800c248 	.word	0x0800c248
 800b8f8:	0800c260 	.word	0x0800c260

0800b8fc <__ieee754_sqrt>:
 800b8fc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ba58 <__ieee754_sqrt+0x15c>
 800b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b904:	ea3c 0c01 	bics.w	ip, ip, r1
 800b908:	4606      	mov	r6, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	460c      	mov	r4, r1
 800b90e:	460a      	mov	r2, r1
 800b910:	4607      	mov	r7, r0
 800b912:	4603      	mov	r3, r0
 800b914:	d10f      	bne.n	800b936 <__ieee754_sqrt+0x3a>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	f7f4 fddd 	bl	80004d8 <__aeabi_dmul>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	4630      	mov	r0, r6
 800b924:	4629      	mov	r1, r5
 800b926:	f7f4 fc21 	bl	800016c <__adddf3>
 800b92a:	4606      	mov	r6, r0
 800b92c:	460d      	mov	r5, r1
 800b92e:	4630      	mov	r0, r6
 800b930:	4629      	mov	r1, r5
 800b932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b936:	2900      	cmp	r1, #0
 800b938:	dc0e      	bgt.n	800b958 <__ieee754_sqrt+0x5c>
 800b93a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b93e:	ea5c 0707 	orrs.w	r7, ip, r7
 800b942:	d0f4      	beq.n	800b92e <__ieee754_sqrt+0x32>
 800b944:	b141      	cbz	r1, 800b958 <__ieee754_sqrt+0x5c>
 800b946:	4602      	mov	r2, r0
 800b948:	460b      	mov	r3, r1
 800b94a:	f7f4 fc0d 	bl	8000168 <__aeabi_dsub>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	f7f4 feeb 	bl	800072c <__aeabi_ddiv>
 800b956:	e7e8      	b.n	800b92a <__ieee754_sqrt+0x2e>
 800b958:	1521      	asrs	r1, r4, #20
 800b95a:	d075      	beq.n	800ba48 <__ieee754_sqrt+0x14c>
 800b95c:	07cc      	lsls	r4, r1, #31
 800b95e:	f04f 0400 	mov.w	r4, #0
 800b962:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b966:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b96a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b96e:	bf5e      	ittt	pl
 800b970:	0fd9      	lsrpl	r1, r3, #31
 800b972:	005b      	lslpl	r3, r3, #1
 800b974:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b978:	0fd9      	lsrs	r1, r3, #31
 800b97a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b97e:	2516      	movs	r5, #22
 800b980:	4620      	mov	r0, r4
 800b982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b986:	107f      	asrs	r7, r7, #1
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	1846      	adds	r6, r0, r1
 800b98c:	4296      	cmp	r6, r2
 800b98e:	bfde      	ittt	le
 800b990:	1b92      	suble	r2, r2, r6
 800b992:	1870      	addle	r0, r6, r1
 800b994:	1864      	addle	r4, r4, r1
 800b996:	0052      	lsls	r2, r2, #1
 800b998:	3d01      	subs	r5, #1
 800b99a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b99e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b9a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9a6:	d1f0      	bne.n	800b98a <__ieee754_sqrt+0x8e>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f04f 0e20 	mov.w	lr, #32
 800b9ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b9b2:	4282      	cmp	r2, r0
 800b9b4:	eb06 0c05 	add.w	ip, r6, r5
 800b9b8:	dc02      	bgt.n	800b9c0 <__ieee754_sqrt+0xc4>
 800b9ba:	d113      	bne.n	800b9e4 <__ieee754_sqrt+0xe8>
 800b9bc:	459c      	cmp	ip, r3
 800b9be:	d811      	bhi.n	800b9e4 <__ieee754_sqrt+0xe8>
 800b9c0:	f1bc 0f00 	cmp.w	ip, #0
 800b9c4:	eb0c 0506 	add.w	r5, ip, r6
 800b9c8:	da43      	bge.n	800ba52 <__ieee754_sqrt+0x156>
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	db41      	blt.n	800ba52 <__ieee754_sqrt+0x156>
 800b9ce:	f100 0801 	add.w	r8, r0, #1
 800b9d2:	1a12      	subs	r2, r2, r0
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	459c      	cmp	ip, r3
 800b9d8:	bf88      	it	hi
 800b9da:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b9de:	eba3 030c 	sub.w	r3, r3, ip
 800b9e2:	4431      	add	r1, r6
 800b9e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b9e8:	f1be 0e01 	subs.w	lr, lr, #1
 800b9ec:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b9f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b9f8:	d1db      	bne.n	800b9b2 <__ieee754_sqrt+0xb6>
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	d006      	beq.n	800ba0c <__ieee754_sqrt+0x110>
 800b9fe:	1c48      	adds	r0, r1, #1
 800ba00:	bf0b      	itete	eq
 800ba02:	4671      	moveq	r1, lr
 800ba04:	3101      	addne	r1, #1
 800ba06:	3401      	addeq	r4, #1
 800ba08:	f021 0101 	bicne.w	r1, r1, #1
 800ba0c:	1063      	asrs	r3, r4, #1
 800ba0e:	0849      	lsrs	r1, r1, #1
 800ba10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ba14:	07e2      	lsls	r2, r4, #31
 800ba16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ba1a:	bf48      	it	mi
 800ba1c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ba20:	460e      	mov	r6, r1
 800ba22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba26:	e782      	b.n	800b92e <__ieee754_sqrt+0x32>
 800ba28:	0ada      	lsrs	r2, r3, #11
 800ba2a:	3815      	subs	r0, #21
 800ba2c:	055b      	lsls	r3, r3, #21
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	d0fa      	beq.n	800ba28 <__ieee754_sqrt+0x12c>
 800ba32:	02d5      	lsls	r5, r2, #11
 800ba34:	d50a      	bpl.n	800ba4c <__ieee754_sqrt+0x150>
 800ba36:	f1c1 0420 	rsb	r4, r1, #32
 800ba3a:	fa23 f404 	lsr.w	r4, r3, r4
 800ba3e:	1e4d      	subs	r5, r1, #1
 800ba40:	408b      	lsls	r3, r1
 800ba42:	4322      	orrs	r2, r4
 800ba44:	1b41      	subs	r1, r0, r5
 800ba46:	e789      	b.n	800b95c <__ieee754_sqrt+0x60>
 800ba48:	4608      	mov	r0, r1
 800ba4a:	e7f0      	b.n	800ba2e <__ieee754_sqrt+0x132>
 800ba4c:	0052      	lsls	r2, r2, #1
 800ba4e:	3101      	adds	r1, #1
 800ba50:	e7ef      	b.n	800ba32 <__ieee754_sqrt+0x136>
 800ba52:	4680      	mov	r8, r0
 800ba54:	e7bd      	b.n	800b9d2 <__ieee754_sqrt+0xd6>
 800ba56:	bf00      	nop
 800ba58:	7ff00000 	.word	0x7ff00000

0800ba5c <__ieee754_sqrtf>:
 800ba5c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ba60:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	4603      	mov	r3, r0
 800ba68:	4604      	mov	r4, r0
 800ba6a:	d309      	bcc.n	800ba80 <__ieee754_sqrtf+0x24>
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	f7f5 f969 	bl	8000d44 <__aeabi_fmul>
 800ba72:	4601      	mov	r1, r0
 800ba74:	4620      	mov	r0, r4
 800ba76:	f7f5 f85d 	bl	8000b34 <__addsf3>
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d0fb      	beq.n	800ba7c <__ieee754_sqrtf+0x20>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	da06      	bge.n	800ba96 <__ieee754_sqrtf+0x3a>
 800ba88:	4601      	mov	r1, r0
 800ba8a:	f7f5 f851 	bl	8000b30 <__aeabi_fsub>
 800ba8e:	4601      	mov	r1, r0
 800ba90:	f7f5 fa0c 	bl	8000eac <__aeabi_fdiv>
 800ba94:	e7f1      	b.n	800ba7a <__ieee754_sqrtf+0x1e>
 800ba96:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ba9a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ba9e:	d029      	beq.n	800baf4 <__ieee754_sqrtf+0x98>
 800baa0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800baa4:	07cb      	lsls	r3, r1, #31
 800baa6:	f04f 0300 	mov.w	r3, #0
 800baaa:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800baae:	f04f 0419 	mov.w	r4, #25
 800bab2:	461e      	mov	r6, r3
 800bab4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800bab8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800babc:	bf58      	it	pl
 800babe:	0052      	lslpl	r2, r2, #1
 800bac0:	1040      	asrs	r0, r0, #1
 800bac2:	0052      	lsls	r2, r2, #1
 800bac4:	1875      	adds	r5, r6, r1
 800bac6:	4295      	cmp	r5, r2
 800bac8:	bfde      	ittt	le
 800baca:	186e      	addle	r6, r5, r1
 800bacc:	1b52      	suble	r2, r2, r5
 800bace:	185b      	addle	r3, r3, r1
 800bad0:	3c01      	subs	r4, #1
 800bad2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bad6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bada:	d1f3      	bne.n	800bac4 <__ieee754_sqrtf+0x68>
 800badc:	b112      	cbz	r2, 800bae4 <__ieee754_sqrtf+0x88>
 800bade:	3301      	adds	r3, #1
 800bae0:	f023 0301 	bic.w	r3, r3, #1
 800bae4:	105c      	asrs	r4, r3, #1
 800bae6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800baea:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800baee:	e7c5      	b.n	800ba7c <__ieee754_sqrtf+0x20>
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	3201      	adds	r2, #1
 800baf4:	0218      	lsls	r0, r3, #8
 800baf6:	d5fb      	bpl.n	800baf0 <__ieee754_sqrtf+0x94>
 800baf8:	3a01      	subs	r2, #1
 800bafa:	1a89      	subs	r1, r1, r2
 800bafc:	e7d0      	b.n	800baa0 <__ieee754_sqrtf+0x44>
	...

0800bb00 <atan>:
 800bb00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	4bb6      	ldr	r3, [pc, #728]	; (800bde0 <atan+0x2e0>)
 800bb06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb0a:	429e      	cmp	r6, r3
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	460d      	mov	r5, r1
 800bb10:	468b      	mov	fp, r1
 800bb12:	dd17      	ble.n	800bb44 <atan+0x44>
 800bb14:	4bb3      	ldr	r3, [pc, #716]	; (800bde4 <atan+0x2e4>)
 800bb16:	429e      	cmp	r6, r3
 800bb18:	dc01      	bgt.n	800bb1e <atan+0x1e>
 800bb1a:	d109      	bne.n	800bb30 <atan+0x30>
 800bb1c:	b140      	cbz	r0, 800bb30 <atan+0x30>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	462b      	mov	r3, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fb21 	bl	800016c <__adddf3>
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	460d      	mov	r5, r1
 800bb2e:	e005      	b.n	800bb3c <atan+0x3c>
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	4cac      	ldr	r4, [pc, #688]	; (800bde8 <atan+0x2e8>)
 800bb36:	f300 8121 	bgt.w	800bd7c <atan+0x27c>
 800bb3a:	4dac      	ldr	r5, [pc, #688]	; (800bdec <atan+0x2ec>)
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb44:	4baa      	ldr	r3, [pc, #680]	; (800bdf0 <atan+0x2f0>)
 800bb46:	429e      	cmp	r6, r3
 800bb48:	dc11      	bgt.n	800bb6e <atan+0x6e>
 800bb4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bb4e:	429e      	cmp	r6, r3
 800bb50:	dc0a      	bgt.n	800bb68 <atan+0x68>
 800bb52:	a38b      	add	r3, pc, #556	; (adr r3, 800bd80 <atan+0x280>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fb08 	bl	800016c <__adddf3>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4ba5      	ldr	r3, [pc, #660]	; (800bdf4 <atan+0x2f4>)
 800bb60:	f7f4 ff4a 	bl	80009f8 <__aeabi_dcmpgt>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d1e9      	bne.n	800bb3c <atan+0x3c>
 800bb68:	f04f 3aff 	mov.w	sl, #4294967295
 800bb6c:	e027      	b.n	800bbbe <atan+0xbe>
 800bb6e:	f000 f951 	bl	800be14 <fabs>
 800bb72:	4ba1      	ldr	r3, [pc, #644]	; (800bdf8 <atan+0x2f8>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	429e      	cmp	r6, r3
 800bb78:	460d      	mov	r5, r1
 800bb7a:	f300 80b8 	bgt.w	800bcee <atan+0x1ee>
 800bb7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb82:	429e      	cmp	r6, r3
 800bb84:	f300 809c 	bgt.w	800bcc0 <atan+0x1c0>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	f7f4 faee 	bl	800016c <__adddf3>
 800bb90:	2200      	movs	r2, #0
 800bb92:	4b98      	ldr	r3, [pc, #608]	; (800bdf4 <atan+0x2f4>)
 800bb94:	f7f4 fae8 	bl	8000168 <__aeabi_dsub>
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bba2:	4620      	mov	r0, r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	f7f4 fae1 	bl	800016c <__adddf3>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fdbb 	bl	800072c <__aeabi_ddiv>
 800bbb6:	f04f 0a00 	mov.w	sl, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	460d      	mov	r5, r1
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f4 fc87 	bl	80004d8 <__aeabi_dmul>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4689      	mov	r9, r1
 800bbd2:	f7f4 fc81 	bl	80004d8 <__aeabi_dmul>
 800bbd6:	a36c      	add	r3, pc, #432	; (adr r3, 800bd88 <atan+0x288>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	f7f4 fc7a 	bl	80004d8 <__aeabi_dmul>
 800bbe4:	a36a      	add	r3, pc, #424	; (adr r3, 800bd90 <atan+0x290>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	f7f4 fabf 	bl	800016c <__adddf3>
 800bbee:	4632      	mov	r2, r6
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	f7f4 fc71 	bl	80004d8 <__aeabi_dmul>
 800bbf6:	a368      	add	r3, pc, #416	; (adr r3, 800bd98 <atan+0x298>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fab6 	bl	800016c <__adddf3>
 800bc00:	4632      	mov	r2, r6
 800bc02:	463b      	mov	r3, r7
 800bc04:	f7f4 fc68 	bl	80004d8 <__aeabi_dmul>
 800bc08:	a365      	add	r3, pc, #404	; (adr r3, 800bda0 <atan+0x2a0>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 faad 	bl	800016c <__adddf3>
 800bc12:	4632      	mov	r2, r6
 800bc14:	463b      	mov	r3, r7
 800bc16:	f7f4 fc5f 	bl	80004d8 <__aeabi_dmul>
 800bc1a:	a363      	add	r3, pc, #396	; (adr r3, 800bda8 <atan+0x2a8>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 faa4 	bl	800016c <__adddf3>
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	f7f4 fc56 	bl	80004d8 <__aeabi_dmul>
 800bc2c:	a360      	add	r3, pc, #384	; (adr r3, 800bdb0 <atan+0x2b0>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fa9b 	bl	800016c <__adddf3>
 800bc36:	4642      	mov	r2, r8
 800bc38:	464b      	mov	r3, r9
 800bc3a:	f7f4 fc4d 	bl	80004d8 <__aeabi_dmul>
 800bc3e:	a35e      	add	r3, pc, #376	; (adr r3, 800bdb8 <atan+0x2b8>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	4630      	mov	r0, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 fc44 	bl	80004d8 <__aeabi_dmul>
 800bc50:	a35b      	add	r3, pc, #364	; (adr r3, 800bdc0 <atan+0x2c0>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fa87 	bl	8000168 <__aeabi_dsub>
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	f7f4 fc3b 	bl	80004d8 <__aeabi_dmul>
 800bc62:	a359      	add	r3, pc, #356	; (adr r3, 800bdc8 <atan+0x2c8>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f7f4 fa7e 	bl	8000168 <__aeabi_dsub>
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	f7f4 fc32 	bl	80004d8 <__aeabi_dmul>
 800bc74:	a356      	add	r3, pc, #344	; (adr r3, 800bdd0 <atan+0x2d0>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f7f4 fa75 	bl	8000168 <__aeabi_dsub>
 800bc7e:	4632      	mov	r2, r6
 800bc80:	463b      	mov	r3, r7
 800bc82:	f7f4 fc29 	bl	80004d8 <__aeabi_dmul>
 800bc86:	a354      	add	r3, pc, #336	; (adr r3, 800bdd8 <atan+0x2d8>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f7f4 fa6c 	bl	8000168 <__aeabi_dsub>
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	f7f4 fc20 	bl	80004d8 <__aeabi_dmul>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 fa64 	bl	800016c <__adddf3>
 800bca4:	4622      	mov	r2, r4
 800bca6:	462b      	mov	r3, r5
 800bca8:	f7f4 fc16 	bl	80004d8 <__aeabi_dmul>
 800bcac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	d144      	bne.n	800bd40 <atan+0x240>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 fa55 	bl	8000168 <__aeabi_dsub>
 800bcbe:	e734      	b.n	800bb2a <atan+0x2a>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4b4c      	ldr	r3, [pc, #304]	; (800bdf4 <atan+0x2f4>)
 800bcc4:	f7f4 fa50 	bl	8000168 <__aeabi_dsub>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4606      	mov	r6, r0
 800bccc:	460f      	mov	r7, r1
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4b48      	ldr	r3, [pc, #288]	; (800bdf4 <atan+0x2f4>)
 800bcd4:	f7f4 fa4a 	bl	800016c <__adddf3>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4630      	mov	r0, r6
 800bcde:	4639      	mov	r1, r7
 800bce0:	f7f4 fd24 	bl	800072c <__aeabi_ddiv>
 800bce4:	f04f 0a01 	mov.w	sl, #1
 800bce8:	4604      	mov	r4, r0
 800bcea:	460d      	mov	r5, r1
 800bcec:	e767      	b.n	800bbbe <atan+0xbe>
 800bcee:	4b43      	ldr	r3, [pc, #268]	; (800bdfc <atan+0x2fc>)
 800bcf0:	429e      	cmp	r6, r3
 800bcf2:	da1a      	bge.n	800bd2a <atan+0x22a>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4b42      	ldr	r3, [pc, #264]	; (800be00 <atan+0x300>)
 800bcf8:	f7f4 fa36 	bl	8000168 <__aeabi_dsub>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460f      	mov	r7, r1
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	4b3e      	ldr	r3, [pc, #248]	; (800be00 <atan+0x300>)
 800bd08:	f7f4 fbe6 	bl	80004d8 <__aeabi_dmul>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4b39      	ldr	r3, [pc, #228]	; (800bdf4 <atan+0x2f4>)
 800bd10:	f7f4 fa2c 	bl	800016c <__adddf3>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4630      	mov	r0, r6
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	f7f4 fd06 	bl	800072c <__aeabi_ddiv>
 800bd20:	f04f 0a02 	mov.w	sl, #2
 800bd24:	4604      	mov	r4, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	e749      	b.n	800bbbe <atan+0xbe>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	2000      	movs	r0, #0
 800bd30:	4934      	ldr	r1, [pc, #208]	; (800be04 <atan+0x304>)
 800bd32:	f7f4 fcfb 	bl	800072c <__aeabi_ddiv>
 800bd36:	f04f 0a03 	mov.w	sl, #3
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	e73e      	b.n	800bbbe <atan+0xbe>
 800bd40:	4b31      	ldr	r3, [pc, #196]	; (800be08 <atan+0x308>)
 800bd42:	4e32      	ldr	r6, [pc, #200]	; (800be0c <atan+0x30c>)
 800bd44:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd48:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bd4c:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd50:	f7f4 fa0a 	bl	8000168 <__aeabi_dsub>
 800bd54:	4622      	mov	r2, r4
 800bd56:	462b      	mov	r3, r5
 800bd58:	f7f4 fa06 	bl	8000168 <__aeabi_dsub>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd64:	f7f4 fa00 	bl	8000168 <__aeabi_dsub>
 800bd68:	f1bb 0f00 	cmp.w	fp, #0
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	f6bf aee4 	bge.w	800bb3c <atan+0x3c>
 800bd74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd78:	461d      	mov	r5, r3
 800bd7a:	e6df      	b.n	800bb3c <atan+0x3c>
 800bd7c:	4d24      	ldr	r5, [pc, #144]	; (800be10 <atan+0x310>)
 800bd7e:	e6dd      	b.n	800bb3c <atan+0x3c>
 800bd80:	8800759c 	.word	0x8800759c
 800bd84:	7e37e43c 	.word	0x7e37e43c
 800bd88:	e322da11 	.word	0xe322da11
 800bd8c:	3f90ad3a 	.word	0x3f90ad3a
 800bd90:	24760deb 	.word	0x24760deb
 800bd94:	3fa97b4b 	.word	0x3fa97b4b
 800bd98:	a0d03d51 	.word	0xa0d03d51
 800bd9c:	3fb10d66 	.word	0x3fb10d66
 800bda0:	c54c206e 	.word	0xc54c206e
 800bda4:	3fb745cd 	.word	0x3fb745cd
 800bda8:	920083ff 	.word	0x920083ff
 800bdac:	3fc24924 	.word	0x3fc24924
 800bdb0:	5555550d 	.word	0x5555550d
 800bdb4:	3fd55555 	.word	0x3fd55555
 800bdb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bdbc:	bfa2b444 	.word	0xbfa2b444
 800bdc0:	52defd9a 	.word	0x52defd9a
 800bdc4:	3fadde2d 	.word	0x3fadde2d
 800bdc8:	af749a6d 	.word	0xaf749a6d
 800bdcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800bdd0:	fe231671 	.word	0xfe231671
 800bdd4:	3fbc71c6 	.word	0x3fbc71c6
 800bdd8:	9998ebc4 	.word	0x9998ebc4
 800bddc:	3fc99999 	.word	0x3fc99999
 800bde0:	440fffff 	.word	0x440fffff
 800bde4:	7ff00000 	.word	0x7ff00000
 800bde8:	54442d18 	.word	0x54442d18
 800bdec:	bff921fb 	.word	0xbff921fb
 800bdf0:	3fdbffff 	.word	0x3fdbffff
 800bdf4:	3ff00000 	.word	0x3ff00000
 800bdf8:	3ff2ffff 	.word	0x3ff2ffff
 800bdfc:	40038000 	.word	0x40038000
 800be00:	3ff80000 	.word	0x3ff80000
 800be04:	bff00000 	.word	0xbff00000
 800be08:	0800c298 	.word	0x0800c298
 800be0c:	0800c278 	.word	0x0800c278
 800be10:	3ff921fb 	.word	0x3ff921fb

0800be14 <fabs>:
 800be14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be18:	4770      	bx	lr
	...

0800be1c <nan>:
 800be1c:	2000      	movs	r0, #0
 800be1e:	4901      	ldr	r1, [pc, #4]	; (800be24 <nan+0x8>)
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	7ff80000 	.word	0x7ff80000

0800be28 <_init>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr

0800be34 <_fini>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	bf00      	nop
 800be38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3a:	bc08      	pop	{r3}
 800be3c:	469e      	mov	lr, r3
 800be3e:	4770      	bx	lr
